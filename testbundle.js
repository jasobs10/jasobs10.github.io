/*!
 * jQuery JavaScript Library v1.9.1
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2012 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-2-4
 */
(function( window, undefined ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//"use strict";
var
	// The deferred used on DOM ready
	readyList,

	// A central reference to the root jQuery(document)
	rootjQuery,

	// Support: IE<9
	// For `typeof node.method` instead of `node.method !== undefined`
	core_strundefined = typeof undefined,

	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,
	location = window.location,

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// [[Class]] -> type pairs
	class2type = {},

	// List of deleted data cache ids, so we can reuse them
	core_deletedIds = [],

	core_version = "1.9.1",

	// Save a reference to some core methods
	core_concat = core_deletedIds.concat,
	core_push = core_deletedIds.push,
	core_slice = core_deletedIds.slice,
	core_indexOf = core_deletedIds.indexOf,
	core_toString = class2type.toString,
	core_hasOwn = class2type.hasOwnProperty,
	core_trim = core_version.trim,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Used for matching numbers
	core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,

	// Used for splitting on whitespace
	core_rnotwhite = /\S+/g,

	// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	},

	// The ready event handler
	completed = function( event ) {

		// readyState === "complete" is good enough for us to call the dom ready in oldIE
		if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
			detach();
			jQuery.ready();
		}
	},
	// Clean-up method for dom ready events
	detach = function() {
		if ( document.addEventListener ) {
			document.removeEventListener( "DOMContentLoaded", completed, false );
			window.removeEventListener( "load", completed, false );

		} else {
			document.detachEvent( "onreadystatechange", completed );
			window.detachEvent( "onload", completed );
		}
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: core_version,

	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	// The number of elements contained in the matched element set
	size: function() {
		return this.length;
	},

	toArray: function() {
		return core_slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	},

	slice: function() {
		return this.pushStack( core_slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: core_push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.trigger ) {
			jQuery( document ).trigger("ready").off("ready");
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return String( obj );
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ core_toString.call(obj) ] || "object" :
			typeof obj;
	},

	isPlainObject: function( obj ) {
		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!core_hasOwn.call(obj, "constructor") &&
				!core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.

		var key;
		for ( key in obj ) {}

		return key === undefined || core_hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	parseHTML: function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts );
		if ( scripts ) {
			jQuery( scripts ).remove();
		}
		return jQuery.merge( [], parsed.childNodes );
	},

	parseJSON: function( data ) {
		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		if ( data === null ) {
			return data;
		}

		if ( typeof data === "string" ) {

			// Make sure leading/trailing whitespace is removed (IE can't handle it)
			data = jQuery.trim( data );

			if ( data ) {
				// Make sure the incoming data is actual JSON
				// Logic borrowed from http://json.org/json2.js
				if ( rvalidchars.test( data.replace( rvalidescape, "@" )
					.replace( rvalidtokens, "]" )
					.replace( rvalidbraces, "")) ) {

					return ( new Function( "return " + data ) )();
				}
			}
		}

		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Use native String.trim function wherever possible
	trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
		function( text ) {
			return text == null ?
				"" :
				core_trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				core_push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( core_indexOf ) {
				return core_indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var l = second.length,
			i = first.length,
			j = 0;

		if ( typeof l === "number" ) {
			for ( ; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}
		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var retVal,
			ret = [],
			i = 0,
			length = elems.length;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return core_concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = core_slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( core_slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			length = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < length; i++ ) {
					fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: function() {
		return ( new Date() ).getTime();
	}
});

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || type !== "function" &&
		( length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj );
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);
// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( core_rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				args = args || [];
				args = [ context, args.slice ? args.slice() : args ];
				if ( list && ( !fired || stack ) ) {
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};
jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var action = tuple[ 0 ],
								fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ action + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = core_slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
					if( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});
jQuery.support = (function() {

	var support, all, a,
		input, select, fragment,
		opt, eventName, isSupported, i,
		div = document.createElement("div");

	// Setup
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// Support tests won't run in some limited or non-browser environments
	all = div.getElementsByTagName("*");
	a = div.getElementsByTagName("a")[ 0 ];
	if ( !all || !a || !all.length ) {
		return {};
	}

	// First batch of tests
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px;float:left;opacity:.5";
	support = {
		// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		getSetAttribute: div.className !== "t",

		// IE strips leading whitespace when .innerHTML is used
		leadingWhitespace: div.firstChild.nodeType === 3,

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		tbody: !div.getElementsByTagName("tbody").length,

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		htmlSerialize: !!div.getElementsByTagName("link").length,

		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		style: /top/.test( a.getAttribute("style") ),

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		hrefNormalized: a.getAttribute("href") === "/a",

		// Make sure that element opacity exists
		// (IE uses filter instead)
		// Use a regex to work around a WebKit issue. See #5145
		opacity: /^0.5/.test( a.style.opacity ),

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		cssFloat: !!a.style.cssFloat,

		// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
		checkOn: !!input.value,

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		optSelected: opt.selected,

		// Tests for enctype support on a form (#6743)
		enctype: !!document.createElement("form").enctype,

		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",

		// jQuery.support.boxModel DEPRECATED in 1.8 since we don't support Quirks Mode
		boxModel: document.compatMode === "CSS1Compat",

		// Will be defined later
		deleteExpando: true,
		noCloneEvent: true,
		inlineBlockNeedsLayout: false,
		shrinkWrapBlocks: false,
		reliableMarginRight: true,
		boxSizingReliable: true,
		pixelPosition: false
	};

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<9
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	// Check if we can trust getAttribute("value")
	input = document.createElement("input");
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "checked", "t" );
	input.setAttribute( "name", "t" );

	fragment = document.createDocumentFragment();
	fragment.appendChild( input );

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	if ( div.attachEvent ) {
		div.attachEvent( "onclick", function() {
			support.noCloneEvent = false;
		});

		div.cloneNode( true ).click();
	}

	// Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)
	// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP), test/csp.php
	for ( i in { submit: true, change: true, focusin: true }) {
		div.setAttribute( eventName = "on" + i, "t" );

		support[ i + "Bubbles" ] = eventName in window || div.attributes[ eventName ].expando === false;
	}

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, marginDiv, tds,
			divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		container = document.createElement("div");
		container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";

		body.appendChild( container ).appendChild( div );

		// Support: IE8
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName("td");
		tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Support: IE8
		// Check if empty table cells still have offsetWidth/Height
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

		// Check box-sizing and margin behavior
		div.innerHTML = "";
		div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
		support.boxSizing = ( div.offsetWidth === 4 );
		support.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== 1 );

		// Use window.getComputedStyle because jsdom on node.js will break without it.
		if ( window.getComputedStyle ) {
			support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. (#3333)
			// Fails in WebKit before Feb 2011 nightlies
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			marginDiv = div.appendChild( document.createElement("div") );
			marginDiv.style.cssText = div.style.cssText = divReset;
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";

			support.reliableMarginRight =
				!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
		}

		if ( typeof div.style.zoom !== core_strundefined ) {
			// Support: IE<8
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			div.innerHTML = "";
			div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

			// Support: IE6
			// Check if elements with layout shrink-wrap their children
			div.style.display = "block";
			div.innerHTML = "<div></div>";
			div.firstChild.style.width = "5px";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );

			if ( support.inlineBlockNeedsLayout ) {
				// Prevent IE 6 from affecting layout for positioned elements #11048
				// Prevent IE from shrinking the body in IE 7 mode #12869
				// Support: IE<8
				body.style.zoom = 1;
			}
		}

		body.removeChild( container );

		// Null elements to avoid leaks in IE
		container = div = tds = marginDiv = null;
	});

	// Null elements to avoid leaks in IE
	all = select = fragment = opt = a = input = null;

	return support;
})();

var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
	rmultiDash = /([A-Z])/g;

function internalData( elem, name, data, pvt /* Internal Use Only */ ){
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var thisCache, ret,
		internalKey = jQuery.expando,
		getByName = typeof name === "string",

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && getByName && data === undefined ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			elem[ internalKey ] = id = core_deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		cache[ id ] = {};

		// Avoids exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		if ( !isNode ) {
			cache[ id ].toJSON = jQuery.noop;
		}
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( getByName ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var i, l, thisCache,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split(" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			for ( i = 0, l = name.length; i < l; i++ ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	} else if ( jQuery.support.deleteExpando || cache != cache.window ) {
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery.extend({
	cache: {},

	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( core_version + Math.random() ).replace( /\D/g, "" ),

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
		"applet": true
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		// Do not set data on non-element because it will not be cleared (#8335).
		if ( elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9 ) {
			return false;
		}

		var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];

		// nodes accept data unless otherwise specified; rejection can be conditional
		return !noData || noData !== true && elem.getAttribute("classid") === noData;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var attrs, name,
			elem = this[0],
			i = 0,
			data = null;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					attrs = elem.attributes;
					for ( ; i < attrs.length; i++ ) {
						name = attrs[i].name;

						if ( !name.indexOf( "data-" ) ) {
							name = jQuery.camelCase( name.slice(5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		return jQuery.access( this, function( value ) {

			if ( value === undefined ) {
				// Try to fetch any internally stored data first
				return elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : null;
			}

			this.each(function() {
				jQuery.data( this, key, value );
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}
jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		hooks.cur = fn;
		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var nodeHook, boolHook,
	rclass = /[\t\r\n]/g,
	rreturn = /\r/g,
	rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i,
	rboolean = /^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute,
	getSetInput = jQuery.support.input;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}
					elem.className = jQuery.trim( cur );

				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}
					elem.className = value ? jQuery.trim( cur ) : "";
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isBool = typeof stateVal === "boolean";

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					state = stateVal,
					classNames = value.match( core_rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					state = isBool ? state : !self.hasClass( className );
					self[ state ? "addClass" : "removeClass" ]( className );
				}

			// Toggle whole class name
			} else if ( type === core_strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var ret, hooks, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val,
				self = jQuery(this);

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, self.val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// attributes.value is undefined in Blackberry 4.7 but
				// uses .value. See #6932
				var val = elem.attributes.value;
				return !val || val.specified ? elem.value : elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var values = jQuery.makeArray( value );

				jQuery(elem).find("option").each(function() {
					this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
				});

				if ( !values.length ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	attr: function( elem, name, value ) {
		var hooks, notxml, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === core_strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( notxml ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && notxml && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && notxml && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {

			// In IE9+, Flash objects don't have .getAttribute (#12945)
			// Support: IE9+
			if ( typeof elem.getAttribute !== core_strundefined ) {
				ret =  elem.getAttribute( name );
			}

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( core_rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( rboolean.test( name ) ) {
					// Set corresponding property to false for boolean attributes
					// Also clear defaultChecked/defaultSelected (if appropriate) for IE<8
					if ( !getSetAttribute && ruseDefault.test( name ) ) {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					} else {
						elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	propFix: {
		tabindex: "tabIndex",
		readonly: "readOnly",
		"for": "htmlFor",
		"class": "className",
		maxlength: "maxLength",
		cellspacing: "cellSpacing",
		cellpadding: "cellPadding",
		rowspan: "rowSpan",
		colspan: "colSpan",
		usemap: "useMap",
		frameborder: "frameBorder",
		contenteditable: "contentEditable"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				return ( elem[ name ] = value );
			}

		} else {
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
				return ret;

			} else {
				return elem[ name ];
			}
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				var attributeNode = elem.getAttributeNode("tabindex");

				return attributeNode && attributeNode.specified ?
					parseInt( attributeNode.value, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						undefined;
			}
		}
	}
});

// Hook for boolean attributes
boolHook = {
	get: function( elem, name ) {
		var
			// Use .prop to determine if this attribute is understood as boolean
			prop = jQuery.prop( elem, name ),

			// Fetch it accordingly
			attr = typeof prop === "boolean" && elem.getAttribute( name ),
			detail = typeof prop === "boolean" ?

				getSetInput && getSetAttribute ?
					attr != null :
					// oldIE fabricates an empty string for missing boolean attributes
					// and conflates checked/selected into attroperties
					ruseDefault.test( name ) ?
						elem[ jQuery.camelCase( "default-" + name ) ] :
						!!attr :

				// fetch an attribute node for properties not recognized as boolean
				elem.getAttributeNode( name );

		return detail && detail.value !== false ?
			name.toLowerCase() :
			undefined;
	},
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};

// fix oldIE value attroperty
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return jQuery.nodeName( elem, "input" ) ?

				// Ignore the value *property* by using defaultValue
				elem.defaultValue :

				ret && ret.specified ? ret.value : undefined;
		},
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return ret && ( name === "id" || name === "name" || name === "coords" ? ret.value !== "" : ret.specified ) ?
				ret.value :
				undefined;
		},
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					(ret = elem.ownerDocument.createAttribute( name ))
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			return name === "value" || value === elem.getAttribute( name ) ?
				value :
				undefined;
		}
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		get: nodeHook.get,
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		});
	});
}


// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !jQuery.support.hrefNormalized ) {
	jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			get: function( elem ) {
				var ret = elem.getAttribute( name, 2 );
				return ret == null ? undefined : ret;
			}
		});
	});

	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each([ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	});
}

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
if ( !jQuery.support.checkOn ) {
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			get: function( elem ) {
				// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
				return elem.getAttribute("value") === null ? "on" : elem.value;
			}
		};
	});
}
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	});
});
var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		// jQuery(...).bind("mouseover mouseout", fn);
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = core_hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = core_hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		event.isTrigger = true;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
				!(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = core_slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur != this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			}
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== document.activeElement && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === document.activeElement && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Even when returnValue equals to undefined Firefox will still show alert
				if ( event.result !== undefined ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{ type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === core_strundefined ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});
/*!
 * Sizzle CSS Selector Engine
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license
 * http://sizzlejs.com/
 */
(function( window, undefined ) {

var i,
	cachedruns,
	Expr,
	getText,
	isXML,
	compile,
	hasDuplicate,
	outermostContext,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsXML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,
	sortOrder,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	support = {},
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Array methods
	arr = [],
	pop = arr.pop,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},


	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	operators = "([*^$|!~]?=)",
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*" ),
	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"NAME": new RegExp( "^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rsibling = /[\x20\t\r\n\f]*[+~]/,

	rnative = /^[^{]+\{\s*\[native code/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rescape = /'|\\/g,
	rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = /\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g,
	funescape = function( _, escaped ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		return high !== high ?
			escaped :
			// BMP codepoint
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Use a stripped-down slice if we can't use a native one
try {
	slice.call( preferredDoc.documentElement.childNodes, 0 )[0].nodeType;
} catch ( e ) {
	slice = function( i ) {
		var elem,
			results = [];
		while ( (elem = this[i++]) ) {
			results.push( elem );
		}
		return results;
	};
}

/**
 * For feature detection
 * @param {Function} fn The function to test for native support
 */
function isNative( fn ) {
	return rnative.test( fn + "" );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var cache,
		keys = [];

	return (cache = function( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key += " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key ] = value);
	});
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return fn( div );
	} catch (e) {
		return false;
	} finally {
		// release memory in IE
		div = null;
	}
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( !documentIsXML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, slice.call(context.getElementsByTagName( selector ), 0) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getByClassName && context.getElementsByClassName ) {
				push.apply( results, slice.call(context.getElementsByClassName( m ), 0) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && !rbuggyQSA.test(selector) ) {
			old = true;
			nid = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && context.parentNode || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results, slice.call( newContext.querySelectorAll(
						newSelector
					), 0 ) );
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Detect xml
 * @param {Element|Object} elem An element or a document
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsXML = isXML( doc );

	// Check if getElementsByTagName("*") returns only elements
	support.tagNameNoComments = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if attributes should be retrieved by attribute nodes
	support.attributes = assert(function( div ) {
		div.innerHTML = "<select></select>";
		var type = typeof div.lastChild.getAttribute("multiple");
		// IE8 returns a string for some attributes even when not present
		return type !== "boolean" && type !== "string";
	});

	// Check if getElementsByClassName can be trusted
	support.getByClassName = assert(function( div ) {
		// Opera can't find a second classname (in 9.6)
		div.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>";
		if ( !div.getElementsByClassName || !div.getElementsByClassName("e").length ) {
			return false;
		}

		// Safari 3.2 caches class attributes and doesn't catch changes
		div.lastChild.className = "e";
		return div.getElementsByClassName("e").length === 2;
	});

	// Check if getElementById returns elements by name
	// Check if getElementsByName privileges form controls or returns elements by ID
	support.getByName = assert(function( div ) {
		// Inject content
		div.id = expando + 0;
		div.innerHTML = "<a name='" + expando + "'></a><div name='" + expando + "'></div>";
		docElem.insertBefore( div, docElem.firstChild );

		// Test
		var pass = doc.getElementsByName &&
			// buggy browsers will return fewer than the correct 2
			doc.getElementsByName( expando ).length === 2 +
			// buggy browsers will return more than the correct 0
			doc.getElementsByName( expando + 0 ).length;
		support.getIdNotName = !doc.getElementById( expando );

		// Cleanup
		docElem.removeChild( div );

		return pass;
	});

	// IE6/7 return modified attributes
	Expr.attrHandle = assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild && typeof div.firstChild.getAttribute !== strundefined &&
			div.firstChild.getAttribute("href") === "#";
	}) ?
		{} :
		{
			"href": function( elem ) {
				return elem.getAttribute( "href", 2 );
			},
			"type": function( elem ) {
				return elem.getAttribute("type");
			}
		};

	// ID find and filter
	if ( support.getIdNotName ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && !documentIsXML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && !documentIsXML ) {
				var m = context.getElementById( id );

				return m ?
					m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ?
						[m] :
						undefined :
					[];
			}
		};
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.tagNameNoComments ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Name
	Expr.find["NAME"] = support.getByName && function( tag, context ) {
		if ( typeof context.getElementsByName !== strundefined ) {
			return context.getElementsByName( name );
		}
	};

	// Class
	Expr.find["CLASS"] = support.getByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && !documentIsXML ) {
			return context.getElementsByClassName( className );
		}
	};

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21),
	// no need to also add to buggyMatches since matches checks buggyQSA
	// A support test would require too much code (would include document ready)
	rbuggyQSA = [ ":focus" ];

	if ( (support.qsa = isNative(doc.querySelectorAll)) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explictly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select><option selected=''></option></select>";

			// IE8 - Some boolean attributes are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {

			// Opera 10-12/IE8 - ^= $= *= and empty values
			// Should not select anything
			div.innerHTML = "<input type='hidden' i=''/>";
			if ( div.querySelectorAll("[i^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:\"\"|'')" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = isNative( (matches = docElem.matchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.webkitMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = new RegExp( rbuggyMatches.join("|") );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = isNative(docElem.contains) || docElem.compareDocumentPosition ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	// Document order sorting
	sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {
		var compare;

		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		if ( (compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b )) ) {
			if ( compare & 1 || a.parentNode && a.parentNode.nodeType === 11 ) {
				if ( a === doc || contains( preferredDoc, a ) ) {
					return -1;
				}
				if ( b === doc || contains( preferredDoc, b ) ) {
					return 1;
				}
				return 0;
			}
			return compare & 4 ? -1 : 1;
		}

		return a.compareDocumentPosition ? -1 : 1;
	} :
	function( a, b ) {
		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Parentless nodes are either documents or disconnected
		} else if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	// Always assume the presence of duplicates if sort doesn't
	// pass them to our comparison function (as in Google Chrome).
	hasDuplicate = false;
	[0, 0].sort( sortOrder );
	support.detectDuplicates = hasDuplicate;

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	// rbuggyQSA always contains :focus, so no need for an existence check
	if ( support.matchesSelector && !documentIsXML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && !rbuggyQSA.test(expr) ) {
		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [elem] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	var val;

	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	if ( !documentIsXML ) {
		name = name.toLowerCase();
	}
	if ( (val = Expr.attrHandle[ name ]) ) {
		return val( elem );
	}
	if ( documentIsXML || support.attributes ) {
		return elem.getAttribute( name );
	}
	return ( (val = elem.getAttributeNode( name )) || elem.getAttribute( name ) ) && elem[ name ] === true ?
		name :
		val && val.specified ? val.value : null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

// Document sorting and removing duplicates
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		i = 1,
		j = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		for ( ; (elem = results[i]); i++ ) {
			if ( elem === results[ i - 1 ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	return results;
};

function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && ( ~b.sourceIndex || MAX_NEGATIVE ) - ( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

// Returns a function to use in pseudos for input types
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

// Returns a function to use in pseudos for buttons
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

// Returns a function to use in pseudos for positionals
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (see #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[4] ) {
				match[2] = match[4];

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeName ) {
			if ( nodeName === "*" ) {
				return function() { return true; };
			}

			nodeName = nodeName.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
			};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute("class")) || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifider
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsXML ?
						elem.getAttribute("xml:lang") || elem.getAttribute("lang") :
						elem.lang) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( tokens = [] );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var data, cache, outerCache,
				dirkey = dirruns + " " + doneName;

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {
							if ( (data = cache[1]) === true || data === cachedruns ) {
								return data === true;
							}
						} else {
							cache = outerCache[ dir ] = [ dirkey ];
							cache[1] = matcher( elem, context, xml ) || cachedruns;
							if ( cache[1] === true ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector( tokens.slice( 0, i - 1 ) ).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	// A counter to specify which element is currently being matched
	var matcherCachedRuns = 0,
		bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);

			if ( outermost ) {
				outermostContext = context !== document && context;
				cachedruns = matcherCachedRuns;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++matcherCachedRuns;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && !documentIsXML &&
					Expr.relative[ tokens[1].type ] ) {

				context = Expr.find["ID"]( token.matches[0].replace( runescape, funescape ), context )[0];
				if ( !context ) {
					return results;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && context.parentNode || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, slice.call( seed, 0 ) );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		documentIsXML,
		results,
		rsibling.test( selector )
	);
	return results;
}

// Deprecated
Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Easy API for creating new setFilters
function setFilters() {}
Expr.filters = setFilters.prototype = Expr.pseudos;
Expr.setFilters = new setFilters();

// Initialize with the default document
setDocument();

// Override sizzle attribute retrieval
Sizzle.attr = jQuery.attr;
jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})( window );
var runtil = /Until$/,
	rparentsprev = /^(?:parents|prev(?:Until|All))/,
	isSimple = /^.[^:#\[\.,]*$/,
	rneedsContext = jQuery.expr.match.needsContext,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var i, ret, self,
			len = this.length;

		if ( typeof selector !== "string" ) {
			self = this;
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		ret = [];
		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, this[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = ( this.selector ? this.selector + " " : "" ) + selector;
		return ret;
	},

	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector, false) );
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector, true) );
	},

	is: function( selector ) {
		return !!selector && (
			typeof selector === "string" ?
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				rneedsContext.test( selector ) ?
					jQuery( selector, this.context ).index( this[0] ) >= 0 :
					jQuery.filter( selector, this ).length > 0 :
				this.filter( selector ).length > 0 );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			ret = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			cur = this[i];

			while ( cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11 ) {
				if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
					ret.push( cur );
					break;
				}
				cur = cur.parentNode;
			}
		}

		return this.pushStack( ret.length > 1 ? jQuery.unique( ret ) : ret );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( jQuery.unique(all) );
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

jQuery.fn.andSelf = jQuery.fn.addBack;

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( !runtil.test( name ) ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;

		if ( this.length > 1 && rparentsprev.test( name ) ) {
			ret = ret.reverse();
		}

		return this.pushStack( ret );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 ?
			jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
			jQuery.find.matches(expr, elems);
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, keep ) {

	// Can't pass null or undefined to indexOf in Firefox 4
	// Set to 0 to skip string check
	qualifier = qualifier || 0;

	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep(elements, function( elem, i ) {
			var retVal = !!qualifier.call( elem, i, elem );
			return retVal === keep;
		});

	} else if ( qualifier.nodeType ) {
		return jQuery.grep(elements, function( elem ) {
			return ( elem === qualifier ) === keep;
		});

	} else if ( typeof qualifier === "string" ) {
		var filtered = jQuery.grep(elements, function( elem ) {
			return elem.nodeType === 1;
		});

		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter(qualifier, filtered, !keep);
		} else {
			qualifier = jQuery.filter( qualifier, filtered );
		}
	}

	return jQuery.grep(elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
	});
}
function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: jQuery.support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	},

	append: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				this.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				this.insertBefore( elem, this.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, false, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, false, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( !selector || jQuery.filter( selector, [ elem ] ).length > 0 ) {
				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( getAll( elem ) );
				}

				if ( elem.parentNode ) {
					if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
						setGlobalEval( getAll( elem, "script" ) );
					}
					elem.parentNode.removeChild( elem );
				}
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[0] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function( value ) {
		var isFunc = jQuery.isFunction( value );

		// Make sure that the elements are removed from the DOM before they are inserted
		// this can help fix replacing a parent with child elements
		if ( !isFunc && typeof value !== "string" ) {
			value = jQuery( value ).not( this ).detach();
		}

		return this.domManip( [ value ], true, function( elem ) {
			var next = this.nextSibling,
				parent = this.parentNode;

			if ( parent ) {
				jQuery( this ).remove();
				parent.insertBefore( elem, next );
			}
		});
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, table, callback ) {

		// Flatten any nested arrays
		args = core_concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction || !( l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[0] = value.call( this, index, table ? self.html() : undefined );
				}
				self.domManip( args, table, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				table = table && jQuery.nodeName( first, "tr" );
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call(
						table && jQuery.nodeName( this[i], "table" ) ?
							findOrAppend( this[i], "tbody" ) :
							this[i],
						node,
						i
					);
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Hope ajax is available...
								jQuery.ajax({
									url: node.src,
									type: "GET",
									dataType: "script",
									async: false,
									global: false,
									"throws": true
								});
							} else {
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

function findOrAppend( elem, tag ) {
	return elem.getElementsByTagName( tag )[0] || elem.appendChild( elem.ownerDocument.createElement( tag ) );
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	var attr = elem.getAttributeNode("type");
	elem.type = ( attr && attr.specified ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[1];
	} else {
		elem.removeAttribute("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !jQuery.support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( jQuery.support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && manipulation_rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone(true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			core_push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( manipulation_rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !jQuery.support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = jQuery.support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem.removeAttribute !== core_strundefined ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						core_deletedIds.push( id );
					}
				}
			}
		}
	}
});
var iframe, getStyles, curCSS,
	ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,
	rposition = /^(top|right|bottom|left)$/,
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rmargin = /^margin/,
	rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
	rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + core_pnum + ")", "i" ),
	elemdisplay = { BODY: "block" },

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssExpand = [ "Top", "Right", "Bottom", "Left" ],
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function isHidden( elem, el ) {
	// isHidden might be called from jQuery#filter function;
	// in that case, element will be second argument
	elem = el || elem;
	return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
			}
		} else {

			if ( !values[ index ] ) {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
				}
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.fn.extend({
	css: function( name, value ) {
		return jQuery.access( this, function( elem, name, value ) {
			var len, styles,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		var bool = typeof state === "boolean";

		return this.each(function() {
			if ( bool ? state : isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Exclude the following css properties to add px
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations
	swap: function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

// NOTE: we've included the "window" in window.getComputedStyle
// because jsdom on node.js will break without it.
if ( window.getComputedStyle ) {
	getStyles = function( elem ) {
		return window.getComputedStyle( elem, null );
	};

	curCSS = function( elem, name, _computed ) {
		var width, minWidth, maxWidth,
			computed = _computed || getStyles( elem ),

			// getPropertyValue is only needed for .css('filter') in IE9, see #12537
			ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined,
			style = elem.style;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret;
	};
} else if ( document.documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, _computed ) {
		var left, rs, rsLeft,
			computed = _computed || getStyles( elem ),
			ret = computed ? computed[ name ] : undefined,
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

// Try to determine the default display value of an element
function css_defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {
			// Use the already-created iframe if possible
			iframe = ( iframe ||
				jQuery("<iframe frameborder='0' width='0' height='0'/>")
				.css( "cssText", "display:block !important" )
			).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[0].contentWindow || iframe[0].contentDocument ).document;
			doc.write("<!doctype html><html><body>");
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}

// Called ONLY from within css_defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
		display = jQuery.css( elem[0], "display" );
	elem.remove();
	return display;
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
jQuery(function() {
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				if ( computed ) {
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// Work around by temporarily setting element display to inline-block
					return jQuery.swap( elem, { "display": "inline-block" },
						curCSS, [ elem, "marginRight" ] );
				}
			}
		};
	}

	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
		jQuery.each( [ "top", "left" ], function( i, prop ) {
			jQuery.cssHooks[ prop ] = {
				get: function( elem, computed ) {
					if ( computed ) {
						computed = curCSS( elem, prop );
						// if curCSS returns percentage, fallback to offset
						return rnumnonpx.test( computed ) ?
							jQuery( elem ).position()[ prop ] + "px" :
							computed;
					}
				}
			};
		});
	}

});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
			(!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});
var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function(){
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function(){
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !manipulation_rcheckableType.test( type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

//Serialize an array of form elements or a set of
//key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}
jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.hover = function( fnOver, fnOut ) {
	return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
};
var
	// Document location
	ajaxLocParts,
	ajaxLocation,
	ajax_nonce = jQuery.now(),

	ajax_rquery = /\?/,
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( core_rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = url.slice( off, url.length );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ){
	jQuery.fn[ type ] = function( fn ){
		return this.on( type, fn );
	};
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": window.String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( core_rnotwhite ) || [""];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? 80 : 443 ) ) !=
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + ajax_nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ajax_nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// If successful, handle type chaining
			if ( status >= 200 && status < 300 || status === 304 ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 ) {
					isSuccess = true;
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					isSuccess = true;
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					isSuccess = ajaxConvert( s, response );
					statusText = isSuccess.state;
					success = isSuccess.data;
					error = isSuccess.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	}
});

/* Handles responses to an ajax request:
 * - sets all responseXXX fields accordingly
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes,
		responseFields = s.responseFields;

	// Fill responseXXX fields
	for ( type in responseFields ) {
		if ( type in responses ) {
			jqXHR[ responseFields[type] ] = responses[ type ];
		}
	}

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

// Chain conversions given the request and the original response
function ajaxConvert( s, response ) {
	var conv2, current, conv, tmp,
		converters = {},
		i = 0,
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice(),
		prev = dataTypes[ 0 ];

	// Apply the dataFilter if provided
	if ( s.dataFilter ) {
		response = s.dataFilter( response, s.dataType );
	}

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	// Convert to each sequential dataType, tolerating list modification
	for ( ; (current = dataTypes[++i]); ) {

		// There's only work to do if current dataType is non-auto
		if ( current !== "*" ) {

			// Convert response if prev dataType is non-auto and differs from current
			if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split(" ");
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.splice( i--, 0, current );
								}

								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s["throws"] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}

			// Update prev for next iteration
			prev = current;
		}
	}

	return { state: "success", data: response };
}
// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery("head")[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement("script");

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
});
var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( ajax_nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( ajax_rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});
var xhrCallbacks, xhrSupported,
	xhrId = 0,
	// #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject && function() {
		// Abort all pending requests
		var key;
		for ( key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	};

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject("Microsoft.XMLHTTP");
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
xhrSupported = jQuery.ajaxSettings.xhr();
jQuery.support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = jQuery.support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var handle, i,
						xhr = s.xhr();

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( err ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent && s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, responseHeaders, statusText, responses;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occurred
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									responses = {};
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();

									// When requesting binary data, IE6-9 will throw an exception
									// on any attempt to access responseText (#11426)
									if ( typeof xhr.responseText === "string" ) {
										responses.text = xhr.responseText;
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && s.isLocal && !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					if ( !s.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}
var fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [function( prop, value ) {
			var end, unit,
				tween = this.createTween( prop, value ),
				parts = rfxnum.exec( value ),
				target = tween.cur(),
				start = +target || 0,
				scale = 1,
				maxIterations = 20;

			if ( parts ) {
				end = +parts[2];
				unit = parts[3] || ( jQuery.cssNumber[ prop ] ? "" : "px" );

				// We need to compute starting value
				if ( unit !== "px" && start ) {
					// Iteratively approximate from a nonzero starting point
					// Prefer the current property, because this process will be trivial if it uses the same units
					// Fallback to end or a simple constant
					start = jQuery.css( tween.elem, prop, true ) || end || 1;

					do {
						// If previous iteration zeroed out, double until we get *something*
						// Use a string for doubling factor so we don't accidentally see scale as unchanged below
						scale = scale || ".5";

						// Adjust and apply
						start = start / scale;
						jQuery.style( tween.elem, prop, start + unit );

					// Update scale, tolerating zero or NaN from tween.cur()
					// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
					} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
				}

				tween.unit = unit;
				tween.start = start;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[1] ? start + ( parts[1] + 1 ) * end : end;
			}
			return tween;
		}]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

function createTweens( animation, props ) {
	jQuery.each( props, function( prop, value ) {
		var collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( collection[ index ].call( animation, prop, value ) ) {

				// we're done with this property
				return;
			}
		}
	});
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	createTweens( animation, props );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

function propFilter( props, specialEasing ) {
	var value, name, index, easing, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

function defaultPrefilter( elem, props, opts ) {
	/*jshint validthis:true */
	var prop, index, length,
		value, dataShow, toggle,
		tween, hooks, oldfire,
		anim = this,
		style = elem.style,
		orig = {},
		handled = [],
		hidden = elem.nodeType && isHidden( elem );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		if ( jQuery.css( elem, "display" ) === "inline" &&
				jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";

			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !jQuery.support.shrinkWrapBlocks ) {
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}


	// show/hide pass
	for ( index in props ) {
		value = props[ index ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ index ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {
				continue;
			}
			handled.push( index );
		}
	}

	length = handled.length;
	if ( length ) {
		dataShow = jQuery._data( elem, "fxshow" ) || jQuery._data( elem, "fxshow", {} );
		if ( "hidden" in dataShow ) {
			hidden = dataShow.hidden;
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( index = 0 ; index < length ; index++ ) {
			prop = handled[ index ];
			tween = anim.createTween( prop, hidden ? dataShow[ prop ] : 0 );
			orig[ prop ] = dataShow[ prop ] || jQuery.style( elem, prop );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Remove in 2.0 - this supports IE8's panic based approach
// to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );
				doAnimation.finish = function() {
					anim.stop( true );
				};
				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.cur && hooks.cur.finish ) {
				hooks.cur.finish.call( this );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth? 1 : 0;
	for( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p*Math.PI ) / 2;
	}
};

jQuery.timers = [];
jQuery.fx = Tween.prototype.init;
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	if ( timer() && jQuery.timers.push( timer ) ) {
		jQuery.fx.start();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};

// Back Compat <1.8 extension point
jQuery.fx.step = {};

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}
jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var docElem, win,
		box = { top: 0, left: 0 },
		elem = this[ 0 ],
		doc = elem && elem.ownerDocument;

	if ( !doc ) {
		return;
	}

	docElem = doc.documentElement;

	// Make sure it's not a disconnected DOM node
	if ( !jQuery.contains( docElem, elem ) ) {
		return box;
	}

	// If we don't have gBCR, just use 0,0 rather than error
	// BlackBerry 5, iOS 3 (original iPhone)
	if ( typeof elem.getBoundingClientRect !== core_strundefined ) {
		box = elem.getBoundingClientRect();
	}
	win = getWindow( doc );
	return {
		top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
		left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
	};
};

jQuery.offset = {

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || document.documentElement;
			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position") === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || document.documentElement;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return jQuery.access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});
// Limit scope pollution from any deprecated API
// (function() {

// })();
// Expose jQuery to the global object
window.jQuery = window.$ = jQuery;

// Expose jQuery as an AMD module, but only for AMD loaders that
// understand the issues with loading multiple versions of jQuery
// in a page that all might call define(). The loader will indicate
// they have special allowances for multiple jQuery versions by
// specifying define.amd.jQuery = true. Register as a named module,
// since jQuery can be concatenated with other files that may use define,
// but not use a proper concatenation script that understands anonymous
// AMD modules. A named AMD is safest and most robust way to register.
// Lowercase jquery is used because AMD module names are derived from
// file names, and jQuery is normally delivered in a lowercase file name.
// Do this after creating the global so that if an AMD module wants to call
// noConflict to hide this version of jQuery, it will work.
if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
	define( "jquery", [], function () { return jQuery; } );
}

})( window );

/**
 * @license AngularJS v1.5.0
 * (c) 2010-2016 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, document, undefined) {'use strict';

/**
 * @description
 *
 * This object provides a utility for producing rich Error messages within
 * Angular. It can be called as follows:
 *
 * var exampleMinErr = minErr('example');
 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
 *
 * The above creates an instance of minErr in the example namespace. The
 * resulting error will have a namespaced error code of example.one.  The
 * resulting error will replace {0} with the value of foo, and {1} with the
 * value of bar. The object is not restricted in the number of arguments it can
 * take.
 *
 * If fewer arguments are specified than necessary for interpolation, the extra
 * interpolation markers will be preserved in the final string.
 *
 * Since data will be parsed statically during a build step, some restrictions
 * are applied with respect to how minErr instances are created and called.
 * Instances should have names of the form namespaceMinErr for a minErr created
 * using minErr('namespace') . Error codes, namespaces and template strings
 * should all be static strings, not variables or general expressions.
 *
 * @param {string} module The namespace to use for the new minErr instance.
 * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning
 *   error from returned function, for cases when a particular type of error is useful.
 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
 */

function minErr(module, ErrorConstructor) {
  ErrorConstructor = ErrorConstructor || Error;
  return function() {
    var SKIP_INDEXES = 2;

    var templateArgs = arguments,
      code = templateArgs[0],
      message = '[' + (module ? module + ':' : '') + code + '] ',
      template = templateArgs[1],
      paramPrefix, i;

    message += template.replace(/\{\d+\}/g, function(match) {
      var index = +match.slice(1, -1),
        shiftedIndex = index + SKIP_INDEXES;

      if (shiftedIndex < templateArgs.length) {
        return toDebugString(templateArgs[shiftedIndex]);
      }

      return match;
    });

    message += '\nhttp://errors.angularjs.org/1.5.0/' +
      (module ? module + '/' : '') + code;

    for (i = SKIP_INDEXES, paramPrefix = '?'; i < templateArgs.length; i++, paramPrefix = '&') {
      message += paramPrefix + 'p' + (i - SKIP_INDEXES) + '=' +
        encodeURIComponent(toDebugString(templateArgs[i]));
    }

    return new ErrorConstructor(message);
  };
}

/* We need to tell jshint what variables are being exported */
/* global angular: true,
  msie: true,
  jqLite: true,
  jQuery: true,
  slice: true,
  splice: true,
  push: true,
  toString: true,
  ngMinErr: true,
  angularModule: true,
  uid: true,
  REGEX_STRING_REGEXP: true,
  VALIDITY_STATE_PROPERTY: true,

  lowercase: true,
  uppercase: true,
  manualLowercase: true,
  manualUppercase: true,
  nodeName_: true,
  isArrayLike: true,
  forEach: true,
  forEachSorted: true,
  reverseParams: true,
  nextUid: true,
  setHashKey: true,
  extend: true,
  toInt: true,
  inherit: true,
  merge: true,
  noop: true,
  identity: true,
  valueFn: true,
  isUndefined: true,
  isDefined: true,
  isObject: true,
  isBlankObject: true,
  isString: true,
  isNumber: true,
  isDate: true,
  isArray: true,
  isFunction: true,
  isRegExp: true,
  isWindow: true,
  isScope: true,
  isFile: true,
  isFormData: true,
  isBlob: true,
  isBoolean: true,
  isPromiseLike: true,
  trim: true,
  escapeForRegexp: true,
  isElement: true,
  makeMap: true,
  includes: true,
  arrayRemove: true,
  copy: true,
  shallowCopy: true,
  equals: true,
  csp: true,
  jq: true,
  concat: true,
  sliceArgs: true,
  bind: true,
  toJsonReplacer: true,
  toJson: true,
  fromJson: true,
  convertTimezoneToLocal: true,
  timezoneToOffset: true,
  startingTag: true,
  tryDecodeURIComponent: true,
  parseKeyValue: true,
  toKeyValue: true,
  encodeUriSegment: true,
  encodeUriQuery: true,
  angularInit: true,
  bootstrap: true,
  getTestability: true,
  snake_case: true,
  bindJQuery: true,
  assertArg: true,
  assertArgFn: true,
  assertNotHasOwnProperty: true,
  getter: true,
  getBlockNodes: true,
  hasOwnProperty: true,
  createMap: true,

  NODE_TYPE_ELEMENT: true,
  NODE_TYPE_ATTRIBUTE: true,
  NODE_TYPE_TEXT: true,
  NODE_TYPE_COMMENT: true,
  NODE_TYPE_DOCUMENT: true,
  NODE_TYPE_DOCUMENT_FRAGMENT: true,
*/

////////////////////////////////////

/**
 * @ngdoc module
 * @name ng
 * @module ng
 * @description
 *
 * # ng (core module)
 * The ng module is loaded by default when an AngularJS application is started. The module itself
 * contains the essential components for an AngularJS application to function. The table below
 * lists a high level breakdown of each of the services/factories, filters, directives and testing
 * components available within this core module.
 *
 * <div doc-module-components="ng"></div>
 */

var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/;

// The name of a form control's ValidityState property.
// This is used so that it's possible for internal tests to create mock ValidityStates.
var VALIDITY_STATE_PROPERTY = 'validity';

var hasOwnProperty = Object.prototype.hasOwnProperty;

var lowercase = function(string) {return isString(string) ? string.toLowerCase() : string;};
var uppercase = function(string) {return isString(string) ? string.toUpperCase() : string;};


var manualLowercase = function(s) {
  /* jshint bitwise: false */
  return isString(s)
      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})
      : s;
};
var manualUppercase = function(s) {
  /* jshint bitwise: false */
  return isString(s)
      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})
      : s;
};


// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
// with correct but slower alternatives. See https://github.com/angular/angular.js/issues/11387
if ('i' !== 'I'.toLowerCase()) {
  lowercase = manualLowercase;
  uppercase = manualUppercase;
}


var
    msie,             // holds major version number for IE, or NaN if UA is not IE.
    jqLite,           // delay binding since jQuery could be loaded after us.
    jQuery,           // delay binding
    slice             = [].slice,
    splice            = [].splice,
    push              = [].push,
    toString          = Object.prototype.toString,
    getPrototypeOf    = Object.getPrototypeOf,
    ngMinErr          = minErr('ng'),

    /** @name angular */
    angular           = window.angular || (window.angular = {}),
    angularModule,
    uid               = 0;

/**
 * documentMode is an IE-only property
 * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx
 */
msie = document.documentMode;


/**
 * @private
 * @param {*} obj
 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
 *                   String ...)
 */
function isArrayLike(obj) {

  // `null`, `undefined` and `window` are not array-like
  if (obj == null || isWindow(obj)) return false;

  // arrays, strings and jQuery/jqLite objects are array like
  // * jqLite is either the jQuery or jqLite constructor function
  // * we have to check the existence of jqLite first as this method is called
  //   via the forEach method when constructing the jqLite object in the first place
  if (isArray(obj) || isString(obj) || (jqLite && obj instanceof jqLite)) return true;

  // Support: iOS 8.2 (not reproducible in simulator)
  // "length" in obj used to prevent JIT error (gh-11508)
  var length = "length" in Object(obj) && obj.length;

  // NodeList objects (with `item` method) and
  // other objects with suitable length characteristics are array-like
  return isNumber(length) &&
    (length >= 0 && ((length - 1) in obj || obj instanceof Array) || typeof obj.item == 'function');

}

/**
 * @ngdoc function
 * @name angular.forEach
 * @module ng
 * @kind function
 *
 * @description
 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
 * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`
 * is the value of an object property or an array element, `key` is the object property key or
 * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.
 *
 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
 * using the `hasOwnProperty` method.
 *
 * Unlike ES262's
 * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),
 * Providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just
 * return the value provided.
 *
   ```js
     var values = {name: 'misko', gender: 'male'};
     var log = [];
     angular.forEach(values, function(value, key) {
       this.push(key + ': ' + value);
     }, log);
     expect(log).toEqual(['name: misko', 'gender: male']);
   ```
 *
 * @param {Object|Array} obj Object to iterate over.
 * @param {Function} iterator Iterator function.
 * @param {Object=} context Object to become context (`this`) for the iterator function.
 * @returns {Object|Array} Reference to `obj`.
 */

function forEach(obj, iterator, context) {
  var key, length;
  if (obj) {
    if (isFunction(obj)) {
      for (key in obj) {
        // Need to check if hasOwnProperty exists,
        // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function
        if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
          iterator.call(context, obj[key], key, obj);
        }
      }
    } else if (isArray(obj) || isArrayLike(obj)) {
      var isPrimitive = typeof obj !== 'object';
      for (key = 0, length = obj.length; key < length; key++) {
        if (isPrimitive || key in obj) {
          iterator.call(context, obj[key], key, obj);
        }
      }
    } else if (obj.forEach && obj.forEach !== forEach) {
        obj.forEach(iterator, context, obj);
    } else if (isBlankObject(obj)) {
      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
      for (key in obj) {
        iterator.call(context, obj[key], key, obj);
      }
    } else if (typeof obj.hasOwnProperty === 'function') {
      // Slow path for objects inheriting Object.prototype, hasOwnProperty check needed
      for (key in obj) {
        if (obj.hasOwnProperty(key)) {
          iterator.call(context, obj[key], key, obj);
        }
      }
    } else {
      // Slow path for objects which do not have a method `hasOwnProperty`
      for (key in obj) {
        if (hasOwnProperty.call(obj, key)) {
          iterator.call(context, obj[key], key, obj);
        }
      }
    }
  }
  return obj;
}

function forEachSorted(obj, iterator, context) {
  var keys = Object.keys(obj).sort();
  for (var i = 0; i < keys.length; i++) {
    iterator.call(context, obj[keys[i]], keys[i]);
  }
  return keys;
}


/**
 * when using forEach the params are value, key, but it is often useful to have key, value.
 * @param {function(string, *)} iteratorFn
 * @returns {function(*, string)}
 */
function reverseParams(iteratorFn) {
  return function(value, key) {iteratorFn(key, value);};
}

/**
 * A consistent way of creating unique IDs in angular.
 *
 * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before
 * we hit number precision issues in JavaScript.
 *
 * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M
 *
 * @returns {number} an unique alpha-numeric string
 */
function nextUid() {
  return ++uid;
}


/**
 * Set or clear the hashkey for an object.
 * @param obj object
 * @param h the hashkey (!truthy to delete the hashkey)
 */
function setHashKey(obj, h) {
  if (h) {
    obj.$$hashKey = h;
  } else {
    delete obj.$$hashKey;
  }
}


function baseExtend(dst, objs, deep) {
  var h = dst.$$hashKey;

  for (var i = 0, ii = objs.length; i < ii; ++i) {
    var obj = objs[i];
    if (!isObject(obj) && !isFunction(obj)) continue;
    var keys = Object.keys(obj);
    for (var j = 0, jj = keys.length; j < jj; j++) {
      var key = keys[j];
      var src = obj[key];

      if (deep && isObject(src)) {
        if (isDate(src)) {
          dst[key] = new Date(src.valueOf());
        } else if (isRegExp(src)) {
          dst[key] = new RegExp(src);
        } else if (src.nodeName) {
          dst[key] = src.cloneNode(true);
        } else if (isElement(src)) {
          dst[key] = src.clone();
        } else {
          if (!isObject(dst[key])) dst[key] = isArray(src) ? [] : {};
          baseExtend(dst[key], [src], true);
        }
      } else {
        dst[key] = src;
      }
    }
  }

  setHashKey(dst, h);
  return dst;
}

/**
 * @ngdoc function
 * @name angular.extend
 * @module ng
 * @kind function
 *
 * @description
 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
 * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
 * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.
 *
 * **Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy). Use
 * {@link angular.merge} for this.
 *
 * @param {Object} dst Destination object.
 * @param {...Object} src Source object(s).
 * @returns {Object} Reference to `dst`.
 */
function extend(dst) {
  return baseExtend(dst, slice.call(arguments, 1), false);
}


/**
* @ngdoc function
* @name angular.merge
* @module ng
* @kind function
*
* @description
* Deeply extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
* to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
* by passing an empty object as the target: `var object = angular.merge({}, object1, object2)`.
*
* Unlike {@link angular.extend extend()}, `merge()` recursively descends into object properties of source
* objects, performing a deep copy.
*
* @param {Object} dst Destination object.
* @param {...Object} src Source object(s).
* @returns {Object} Reference to `dst`.
*/
function merge(dst) {
  return baseExtend(dst, slice.call(arguments, 1), true);
}



function toInt(str) {
  return parseInt(str, 10);
}


function inherit(parent, extra) {
  return extend(Object.create(parent), extra);
}

/**
 * @ngdoc function
 * @name angular.noop
 * @module ng
 * @kind function
 *
 * @description
 * A function that performs no operations. This function can be useful when writing code in the
 * functional style.
   ```js
     function foo(callback) {
       var result = calculateResult();
       (callback || angular.noop)(result);
     }
   ```
 */
function noop() {}
noop.$inject = [];


/**
 * @ngdoc function
 * @name angular.identity
 * @module ng
 * @kind function
 *
 * @description
 * A function that returns its first argument. This function is useful when writing code in the
 * functional style.
 *
   ```js
     function transformer(transformationFn, value) {
       return (transformationFn || angular.identity)(value);
     };
   ```
  * @param {*} value to be returned.
  * @returns {*} the value passed in.
 */
function identity($) {return $;}
identity.$inject = [];


function valueFn(value) {return function() {return value;};}

function hasCustomToString(obj) {
  return isFunction(obj.toString) && obj.toString !== toString;
}


/**
 * @ngdoc function
 * @name angular.isUndefined
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is undefined.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is undefined.
 */
function isUndefined(value) {return typeof value === 'undefined';}


/**
 * @ngdoc function
 * @name angular.isDefined
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is defined.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is defined.
 */
function isDefined(value) {return typeof value !== 'undefined';}


/**
 * @ngdoc function
 * @name angular.isObject
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
 * considered to be objects. Note that JavaScript arrays are objects.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is an `Object` but not `null`.
 */
function isObject(value) {
  // http://jsperf.com/isobject4
  return value !== null && typeof value === 'object';
}


/**
 * Determine if a value is an object with a null prototype
 *
 * @returns {boolean} True if `value` is an `Object` with a null prototype
 */
function isBlankObject(value) {
  return value !== null && typeof value === 'object' && !getPrototypeOf(value);
}


/**
 * @ngdoc function
 * @name angular.isString
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `String`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `String`.
 */
function isString(value) {return typeof value === 'string';}


/**
 * @ngdoc function
 * @name angular.isNumber
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `Number`.
 *
 * This includes the "special" numbers `NaN`, `+Infinity` and `-Infinity`.
 *
 * If you wish to exclude these then you can use the native
 * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)
 * method.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Number`.
 */
function isNumber(value) {return typeof value === 'number';}


/**
 * @ngdoc function
 * @name angular.isDate
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a value is a date.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Date`.
 */
function isDate(value) {
  return toString.call(value) === '[object Date]';
}


/**
 * @ngdoc function
 * @name angular.isArray
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is an `Array`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is an `Array`.
 */
var isArray = Array.isArray;

/**
 * @ngdoc function
 * @name angular.isFunction
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `Function`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Function`.
 */
function isFunction(value) {return typeof value === 'function';}


/**
 * Determines if a value is a regular expression object.
 *
 * @private
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `RegExp`.
 */
function isRegExp(value) {
  return toString.call(value) === '[object RegExp]';
}


/**
 * Checks if `obj` is a window object.
 *
 * @private
 * @param {*} obj Object to check
 * @returns {boolean} True if `obj` is a window obj.
 */
function isWindow(obj) {
  return obj && obj.window === obj;
}


function isScope(obj) {
  return obj && obj.$evalAsync && obj.$watch;
}


function isFile(obj) {
  return toString.call(obj) === '[object File]';
}


function isFormData(obj) {
  return toString.call(obj) === '[object FormData]';
}


function isBlob(obj) {
  return toString.call(obj) === '[object Blob]';
}


function isBoolean(value) {
  return typeof value === 'boolean';
}


function isPromiseLike(obj) {
  return obj && isFunction(obj.then);
}


var TYPED_ARRAY_REGEXP = /^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/;
function isTypedArray(value) {
  return value && isNumber(value.length) && TYPED_ARRAY_REGEXP.test(toString.call(value));
}

function isArrayBuffer(obj) {
  return toString.call(obj) === '[object ArrayBuffer]';
}


var trim = function(value) {
  return isString(value) ? value.trim() : value;
};

// Copied from:
// http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021
// Prereq: s is a string.
var escapeForRegexp = function(s) {
  return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').
           replace(/\x08/g, '\\x08');
};


/**
 * @ngdoc function
 * @name angular.isElement
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a DOM element (or wrapped jQuery element).
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
 */
function isElement(node) {
  return !!(node &&
    (node.nodeName  // we are a direct element
    || (node.prop && node.attr && node.find)));  // we have an on and find method part of jQuery API
}

/**
 * @param str 'key1,key2,...'
 * @returns {object} in the form of {key1:true, key2:true, ...}
 */
function makeMap(str) {
  var obj = {}, items = str.split(','), i;
  for (i = 0; i < items.length; i++) {
    obj[items[i]] = true;
  }
  return obj;
}


function nodeName_(element) {
  return lowercase(element.nodeName || (element[0] && element[0].nodeName));
}

function includes(array, obj) {
  return Array.prototype.indexOf.call(array, obj) != -1;
}

function arrayRemove(array, value) {
  var index = array.indexOf(value);
  if (index >= 0) {
    array.splice(index, 1);
  }
  return index;
}

/**
 * @ngdoc function
 * @name angular.copy
 * @module ng
 * @kind function
 *
 * @description
 * Creates a deep copy of `source`, which should be an object or an array.
 *
 * * If no destination is supplied, a copy of the object or array is created.
 * * If a destination is provided, all of its elements (for arrays) or properties (for objects)
 *   are deleted and then all elements/properties from the source are copied to it.
 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
 * * If `source` is identical to 'destination' an exception will be thrown.
 *
 * @param {*} source The source that will be used to make a copy.
 *                   Can be any type, including primitives, `null`, and `undefined`.
 * @param {(Object|Array)=} destination Destination into which the source is copied. If
 *     provided, must be of the same type as `source`.
 * @returns {*} The copy or updated `destination`, if `destination` was specified.
 *
 * @example
 <example module="copyExample">
 <file name="index.html">
 <div ng-controller="ExampleController">
 <form novalidate class="simple-form">
 Name: <input type="text" ng-model="user.name" /><br />
 E-mail: <input type="email" ng-model="user.email" /><br />
 Gender: <input type="radio" ng-model="user.gender" value="male" />male
 <input type="radio" ng-model="user.gender" value="female" />female<br />
 <button ng-click="reset()">RESET</button>
 <button ng-click="update(user)">SAVE</button>
 </form>
 <pre>form = {{user | json}}</pre>
 <pre>master = {{master | json}}</pre>
 </div>

 <script>
  angular.module('copyExample', [])
    .controller('ExampleController', ['$scope', function($scope) {
      $scope.master= {};

      $scope.update = function(user) {
        // Example with 1 argument
        $scope.master= angular.copy(user);
      };

      $scope.reset = function() {
        // Example with 2 arguments
        angular.copy($scope.master, $scope.user);
      };

      $scope.reset();
    }]);
 </script>
 </file>
 </example>
 */
function copy(source, destination) {
  var stackSource = [];
  var stackDest = [];

  if (destination) {
    if (isTypedArray(destination) || isArrayBuffer(destination)) {
      throw ngMinErr('cpta', "Can't copy! TypedArray destination cannot be mutated.");
    }
    if (source === destination) {
      throw ngMinErr('cpi', "Can't copy! Source and destination are identical.");
    }

    // Empty the destination object
    if (isArray(destination)) {
      destination.length = 0;
    } else {
      forEach(destination, function(value, key) {
        if (key !== '$$hashKey') {
          delete destination[key];
        }
      });
    }

    stackSource.push(source);
    stackDest.push(destination);
    return copyRecurse(source, destination);
  }

  return copyElement(source);

  function copyRecurse(source, destination) {
    var h = destination.$$hashKey;
    var result, key;
    if (isArray(source)) {
      for (var i = 0, ii = source.length; i < ii; i++) {
        destination.push(copyElement(source[i]));
      }
    } else if (isBlankObject(source)) {
      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
      for (key in source) {
        destination[key] = copyElement(source[key]);
      }
    } else if (source && typeof source.hasOwnProperty === 'function') {
      // Slow path, which must rely on hasOwnProperty
      for (key in source) {
        if (source.hasOwnProperty(key)) {
          destination[key] = copyElement(source[key]);
        }
      }
    } else {
      // Slowest path --- hasOwnProperty can't be called as a method
      for (key in source) {
        if (hasOwnProperty.call(source, key)) {
          destination[key] = copyElement(source[key]);
        }
      }
    }
    setHashKey(destination, h);
    return destination;
  }

  function copyElement(source) {
    // Simple values
    if (!isObject(source)) {
      return source;
    }

    // Already copied values
    var index = stackSource.indexOf(source);
    if (index !== -1) {
      return stackDest[index];
    }

    if (isWindow(source) || isScope(source)) {
      throw ngMinErr('cpws',
        "Can't copy! Making copies of Window or Scope instances is not supported.");
    }

    var needsRecurse = false;
    var destination = copyType(source);

    if (destination === undefined) {
      destination = isArray(source) ? [] : Object.create(getPrototypeOf(source));
      needsRecurse = true;
    }

    stackSource.push(source);
    stackDest.push(destination);

    return needsRecurse
      ? copyRecurse(source, destination)
      : destination;
  }

  function copyType(source) {
    switch (toString.call(source)) {
      case '[object Int8Array]':
      case '[object Int16Array]':
      case '[object Int32Array]':
      case '[object Float32Array]':
      case '[object Float64Array]':
      case '[object Uint8Array]':
      case '[object Uint8ClampedArray]':
      case '[object Uint16Array]':
      case '[object Uint32Array]':
        return new source.constructor(copyElement(source.buffer));

      case '[object ArrayBuffer]':
        //Support: IE10
        if (!source.slice) {
          var copied = new ArrayBuffer(source.byteLength);
          new Uint8Array(copied).set(new Uint8Array(source));
          return copied;
        }
        return source.slice(0);

      case '[object Boolean]':
      case '[object Number]':
      case '[object String]':
      case '[object Date]':
        return new source.constructor(source.valueOf());

      case '[object RegExp]':
        var re = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);
        re.lastIndex = source.lastIndex;
        return re;
    }

    if (isFunction(source.cloneNode)) {
      return source.cloneNode(true);
    }
  }
}

/**
 * Creates a shallow copy of an object, an array or a primitive.
 *
 * Assumes that there are no proto properties for objects.
 */
function shallowCopy(src, dst) {
  if (isArray(src)) {
    dst = dst || [];

    for (var i = 0, ii = src.length; i < ii; i++) {
      dst[i] = src[i];
    }
  } else if (isObject(src)) {
    dst = dst || {};

    for (var key in src) {
      if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {
        dst[key] = src[key];
      }
    }
  }

  return dst || src;
}


/**
 * @ngdoc function
 * @name angular.equals
 * @module ng
 * @kind function
 *
 * @description
 * Determines if two objects or two values are equivalent. Supports value types, regular
 * expressions, arrays and objects.
 *
 * Two objects or values are considered equivalent if at least one of the following is true:
 *
 * * Both objects or values pass `===` comparison.
 * * Both objects or values are of the same type and all of their properties are equal by
 *   comparing them with `angular.equals`.
 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
 * * Both values represent the same regular expression (In JavaScript,
 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
 *   representation matches).
 *
 * During a property comparison, properties of `function` type and properties with names
 * that begin with `$` are ignored.
 *
 * Scope and DOMWindow objects are being compared only by identify (`===`).
 *
 * @param {*} o1 Object or value to compare.
 * @param {*} o2 Object or value to compare.
 * @returns {boolean} True if arguments are equal.
 */
function equals(o1, o2) {
  if (o1 === o2) return true;
  if (o1 === null || o2 === null) return false;
  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN
  var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
  if (t1 == t2 && t1 == 'object') {
    if (isArray(o1)) {
      if (!isArray(o2)) return false;
      if ((length = o1.length) == o2.length) {
        for (key = 0; key < length; key++) {
          if (!equals(o1[key], o2[key])) return false;
        }
        return true;
      }
    } else if (isDate(o1)) {
      if (!isDate(o2)) return false;
      return equals(o1.getTime(), o2.getTime());
    } else if (isRegExp(o1)) {
      if (!isRegExp(o2)) return false;
      return o1.toString() == o2.toString();
    } else {
      if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) ||
        isArray(o2) || isDate(o2) || isRegExp(o2)) return false;
      keySet = createMap();
      for (key in o1) {
        if (key.charAt(0) === '$' || isFunction(o1[key])) continue;
        if (!equals(o1[key], o2[key])) return false;
        keySet[key] = true;
      }
      for (key in o2) {
        if (!(key in keySet) &&
            key.charAt(0) !== '$' &&
            isDefined(o2[key]) &&
            !isFunction(o2[key])) return false;
      }
      return true;
    }
  }
  return false;
}

var csp = function() {
  if (!isDefined(csp.rules)) {


    var ngCspElement = (document.querySelector('[ng-csp]') ||
                    document.querySelector('[data-ng-csp]'));

    if (ngCspElement) {
      var ngCspAttribute = ngCspElement.getAttribute('ng-csp') ||
                    ngCspElement.getAttribute('data-ng-csp');
      csp.rules = {
        noUnsafeEval: !ngCspAttribute || (ngCspAttribute.indexOf('no-unsafe-eval') !== -1),
        noInlineStyle: !ngCspAttribute || (ngCspAttribute.indexOf('no-inline-style') !== -1)
      };
    } else {
      csp.rules = {
        noUnsafeEval: noUnsafeEval(),
        noInlineStyle: false
      };
    }
  }

  return csp.rules;

  function noUnsafeEval() {
    try {
      /* jshint -W031, -W054 */
      new Function('');
      /* jshint +W031, +W054 */
      return false;
    } catch (e) {
      return true;
    }
  }
};

/**
 * @ngdoc directive
 * @module ng
 * @name ngJq
 *
 * @element ANY
 * @param {string=} ngJq the name of the library available under `window`
 * to be used for angular.element
 * @description
 * Use this directive to force the angular.element library.  This should be
 * used to force either jqLite by leaving ng-jq blank or setting the name of
 * the jquery variable under window (eg. jQuery).
 *
 * Since angular looks for this directive when it is loaded (doesn't wait for the
 * DOMContentLoaded event), it must be placed on an element that comes before the script
 * which loads angular. Also, only the first instance of `ng-jq` will be used and all
 * others ignored.
 *
 * @example
 * This example shows how to force jqLite using the `ngJq` directive to the `html` tag.
 ```html
 <!doctype html>
 <html ng-app ng-jq>
 ...
 ...
 </html>
 ```
 * @example
 * This example shows how to use a jQuery based library of a different name.
 * The library name must be available at the top most 'window'.
 ```html
 <!doctype html>
 <html ng-app ng-jq="jQueryLib">
 ...
 ...
 </html>
 ```
 */
var jq = function() {
  if (isDefined(jq.name_)) return jq.name_;
  var el;
  var i, ii = ngAttrPrefixes.length, prefix, name;
  for (i = 0; i < ii; ++i) {
    prefix = ngAttrPrefixes[i];
    if (el = document.querySelector('[' + prefix.replace(':', '\\:') + 'jq]')) {
      name = el.getAttribute(prefix + 'jq');
      break;
    }
  }

  return (jq.name_ = name);
};

function concat(array1, array2, index) {
  return array1.concat(slice.call(array2, index));
}

function sliceArgs(args, startIndex) {
  return slice.call(args, startIndex || 0);
}


/* jshint -W101 */
/**
 * @ngdoc function
 * @name angular.bind
 * @module ng
 * @kind function
 *
 * @description
 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
 * distiClientshed from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
 *
 * @param {Object} self Context which `fn` should be evaluated in.
 * @param {function()} fn Function to be bound.
 * @param {...*} args Optional arguments to be prebound to the `fn` function call.
 * @returns {function()} Function that wraps the `fn` with all the specified bindings.
 */
/* jshint +W101 */
function bind(self, fn) {
  var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
  if (isFunction(fn) && !(fn instanceof RegExp)) {
    return curryArgs.length
      ? function() {
          return arguments.length
            ? fn.apply(self, concat(curryArgs, arguments, 0))
            : fn.apply(self, curryArgs);
        }
      : function() {
          return arguments.length
            ? fn.apply(self, arguments)
            : fn.call(self);
        };
  } else {
    // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)
    return fn;
  }
}


function toJsonReplacer(key, value) {
  var val = value;

  if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {
    val = undefined;
  } else if (isWindow(value)) {
    val = '$WINDOW';
  } else if (value &&  document === value) {
    val = '$DOCUMENT';
  } else if (isScope(value)) {
    val = '$SCOPE';
  }

  return val;
}


/**
 * @ngdoc function
 * @name angular.toJson
 * @module ng
 * @kind function
 *
 * @description
 * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be
 * stripped since angular uses this notation internally.
 *
 * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.
 * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.
 *    If set to an integer, the JSON output will contain that many spaces per indentation.
 * @returns {string|undefined} JSON-ified string representing `obj`.
 */
function toJson(obj, pretty) {
  if (isUndefined(obj)) return undefined;
  if (!isNumber(pretty)) {
    pretty = pretty ? 2 : null;
  }
  return JSON.stringify(obj, toJsonReplacer, pretty);
}


/**
 * @ngdoc function
 * @name angular.fromJson
 * @module ng
 * @kind function
 *
 * @description
 * Deserializes a JSON string.
 *
 * @param {string} json JSON string to deserialize.
 * @returns {Object|Array|string|number} Deserialized JSON string.
 */
function fromJson(json) {
  return isString(json)
      ? JSON.parse(json)
      : json;
}


var ALL_COLONS = /:/g;
function timezoneToOffset(timezone, fallback) {
  // IE/Edge do not "understand" colon (`:`) in timezone
  timezone = timezone.replace(ALL_COLONS, '');
  var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
}


function addDateMinutes(date, minutes) {
  date = new Date(date.getTime());
  date.setMinutes(date.getMinutes() + minutes);
  return date;
}


function convertTimezoneToLocal(date, timezone, reverse) {
  reverse = reverse ? -1 : 1;
  var dateTimezoneOffset = date.getTimezoneOffset();
  var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
  return addDateMinutes(date, reverse * (timezoneOffset - dateTimezoneOffset));
}


/**
 * @returns {string} Returns the string representation of the element.
 */
function startingTag(element) {
  element = jqLite(element).clone();
  try {
    // turns out IE does not let you set .html() on elements which
    // are not allowed to have children. So we just ignore it.
    element.empty();
  } catch (e) {}
  var elemHtml = jqLite('<div>').append(element).html();
  try {
    return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) :
        elemHtml.
          match(/^(<[^>]+>)/)[1].
          replace(/^<([\w\-]+)/, function(match, nodeName) {return '<' + lowercase(nodeName);});
  } catch (e) {
    return lowercase(elemHtml);
  }

}


/////////////////////////////////////////////////

/**
 * Tries to decode the URI component without throwing an exception.
 *
 * @private
 * @param str value potential URI component to check.
 * @returns {boolean} True if `value` can be decoded
 * with the decodeURIComponent function.
 */
function tryDecodeURIComponent(value) {
  try {
    return decodeURIComponent(value);
  } catch (e) {
    // Ignore any invalid uri component
  }
}


/**
 * Parses an escaped url query string into key-value pairs.
 * @returns {Object.<string,boolean|Array>}
 */
function parseKeyValue(/**string*/keyValue) {
  var obj = {};
  forEach((keyValue || "").split('&'), function(keyValue) {
    var splitPoint, key, val;
    if (keyValue) {
      key = keyValue = keyValue.replace(/\+/g,'%20');
      splitPoint = keyValue.indexOf('=');
      if (splitPoint !== -1) {
        key = keyValue.substring(0, splitPoint);
        val = keyValue.substring(splitPoint + 1);
      }
      key = tryDecodeURIComponent(key);
      if (isDefined(key)) {
        val = isDefined(val) ? tryDecodeURIComponent(val) : true;
        if (!hasOwnProperty.call(obj, key)) {
          obj[key] = val;
        } else if (isArray(obj[key])) {
          obj[key].push(val);
        } else {
          obj[key] = [obj[key],val];
        }
      }
    }
  });
  return obj;
}

function toKeyValue(obj) {
  var parts = [];
  forEach(obj, function(value, key) {
    if (isArray(value)) {
      forEach(value, function(arrayValue) {
        parts.push(encodeUriQuery(key, true) +
                   (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));
      });
    } else {
    parts.push(encodeUriQuery(key, true) +
               (value === true ? '' : '=' + encodeUriQuery(value, true)));
    }
  });
  return parts.length ? parts.join('&') : '';
}


/**
 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
 * segments:
 *    segment       = *pchar
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
 *    pct-encoded   = "%" HEXDIG HEXDIG
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *                     / "*" / "+" / "," / ";" / "="
 */
function encodeUriSegment(val) {
  return encodeUriQuery(val, true).
             replace(/%26/gi, '&').
             replace(/%3D/gi, '=').
             replace(/%2B/gi, '+');
}


/**
 * This method is intended for encoding *key* or *value* parts of query component. We need a custom
 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
 * encoded per http://tools.ietf.org/html/rfc3986:
 *    query       = *( pchar / "/" / "?" )
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 *    pct-encoded   = "%" HEXDIG HEXDIG
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *                     / "*" / "+" / "," / ";" / "="
 */
function encodeUriQuery(val, pctEncodeSpaces) {
  return encodeURIComponent(val).
             replace(/%40/gi, '@').
             replace(/%3A/gi, ':').
             replace(/%24/g, '$').
             replace(/%2C/gi, ',').
             replace(/%3B/gi, ';').
             replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));
}

var ngAttrPrefixes = ['ng-', 'data-ng-', 'ng:', 'x-ng-'];

function getNgAttribute(element, ngAttr) {
  var attr, i, ii = ngAttrPrefixes.length;
  for (i = 0; i < ii; ++i) {
    attr = ngAttrPrefixes[i] + ngAttr;
    if (isString(attr = element.getAttribute(attr))) {
      return attr;
    }
  }
  return null;
}

/**
 * @ngdoc directive
 * @name ngApp
 * @module ng
 *
 * @element ANY
 * @param {angular.Module} ngApp an optional application
 *   {@link angular.module module} name to load.
 * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be
 *   created in "strict-di" mode. This means that the application will fail to invoke functions which
 *   do not use explicit function annotation (and are thus unsuitable for minification), as described
 *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in
 *   tracking down the root of these bugs.
 *
 * @description
 *
 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
 * designates the **root element** of the application and is typically placed near the root element
 * of the page - e.g. on the `<body>` or `<html>` tags.
 *
 * Only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
 * found in the document will be used to define the root element to auto-bootstrap as an
 * application. To run multiple applications in an HTML document you must manually bootstrap them using
 * {@link angular.bootstrap} instead. AngularJS applications cannot be nested within each other.
 *
 * You can specify an **AngularJS module** to be used as the root module for the application.  This
 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It
 * should contain the application code needed or have dependencies on other modules that will
 * contain the code. See {@link angular.module} for more information.
 *
 * In the example below if the `ngApp` directive were not placed on the `html` element then the
 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
 * would not be resolved to `3`.
 *
 * `ngApp` is the easiest, and most common way to bootstrap an application.
 *
 <example module="ngAppDemo">
   <file name="index.html">
   <div ng-controller="ngAppDemoController">
     I can add: {{a}} + {{b}} =  {{ a+b }}
   </div>
   </file>
   <file name="script.js">
   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
     $scope.a = 1;
     $scope.b = 2;
   });
   </file>
 </example>
 *
 * Using `ngStrictDi`, you would see something like this:
 *
 <example ng-app-included="true">
   <file name="index.html">
   <div ng-app="ngAppStrictDemo" ng-strict-di>
       <div ng-controller="GoodController1">
           I can add: {{a}} + {{b}} =  {{ a+b }}

           <p>This renders because the controller does not fail to
              instantiate, by using explicit annotation style (see
              script.js for details)
           </p>
       </div>

       <div ng-controller="GoodController2">
           Name: <input ng-model="name"><br />
           Hello, {{name}}!

           <p>This renders because the controller does not fail to
              instantiate, by using explicit annotation style
              (see script.js for details)
           </p>
       </div>

       <div ng-controller="BadController">
           I can add: {{a}} + {{b}} =  {{ a+b }}

           <p>The controller could not be instantiated, due to relying
              on automatic function annotations (which are disabled in
              strict mode). As such, the content of this section is not
              interpolated, and there should be an error in your web console.
           </p>
       </div>
   </div>
   </file>
   <file name="script.js">
   angular.module('ngAppStrictDemo', [])
     // BadController will fail to instantiate, due to relying on automatic function annotation,
     // rather than an explicit annotation
     .controller('BadController', function($scope) {
       $scope.a = 1;
       $scope.b = 2;
     })
     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,
     // due to using explicit annotations using the array style and $inject property, respectively.
     .controller('GoodController1', ['$scope', function($scope) {
       $scope.a = 1;
       $scope.b = 2;
     }])
     .controller('GoodController2', GoodController2);
     function GoodController2($scope) {
       $scope.name = "World";
     }
     GoodController2.$inject = ['$scope'];
   </file>
   <file name="style.css">
   div[ng-controller] {
       margin-bottom: 1em;
       -webkit-border-radius: 4px;
       border-radius: 4px;
       border: 1px solid;
       padding: .5em;
   }
   div[ng-controller^=Good] {
       border-color: #d6e9c6;
       background-color: #dff0d8;
       color: #3c763d;
   }
   div[ng-controller^=Bad] {
       border-color: #ebccd1;
       background-color: #f2dede;
       color: #a94442;
       margin-bottom: 0;
   }
   </file>
 </example>
 */
function angularInit(element, bootstrap) {
  var appElement,
      module,
      config = {};

  // The element `element` has priority over any other element
  forEach(ngAttrPrefixes, function(prefix) {
    var name = prefix + 'app';

    if (!appElement && element.hasAttribute && element.hasAttribute(name)) {
      appElement = element;
      module = element.getAttribute(name);
    }
  });
  forEach(ngAttrPrefixes, function(prefix) {
    var name = prefix + 'app';
    var candidate;

    if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\:') + ']'))) {
      appElement = candidate;
      module = candidate.getAttribute(name);
    }
  });
  if (appElement) {
    config.strictDi = getNgAttribute(appElement, "strict-di") !== null;
    bootstrap(appElement, module ? [module] : [], config);
  }
}

/**
 * @ngdoc function
 * @name angular.bootstrap
 * @module ng
 * @description
 * Use this function to manually start up angular application.
 *
 * See: {@link guide/bootstrap Bootstrap}
 *
 * Note that Protractor based end-to-end tests cannot use this function to bootstrap manually.
 * They must use {@link ng.directive:ngApp ngApp}.
 *
 * Angular will detect if it has been loaded into the browser more than once and only allow the
 * first loaded script to be bootstrapped and will report a warning to the browser console for
 * each of the subsequent scripts. This prevents strange results in applications, where otherwise
 * multiple instances of Angular try to work on the DOM.
 *
 * ```html
 * <!doctype html>
 * <html>
 * <body>
 * <div ng-controller="WelcomeController">
 *   {{greeting}}
 * </div>
 *
 * <script src="angular.js"></script>
 * <script>
 *   var app = angular.module('demo', [])
 *   .controller('WelcomeController', function($scope) {
 *       $scope.greeting = 'Welcome!';
 *   });
 *   angular.bootstrap(document, ['demo']);
 * </script>
 * </body>
 * </html>
 * ```
 *
 * @param {DOMElement} element DOM element which is the root of angular application.
 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
 *     Each item in the array should be the name of a predefined module or a (DI annotated)
 *     function that will be invoked by the injector as a `config` block.
 *     See: {@link angular.module modules}
 * @param {Object=} config an object for defining configuration options for the application. The
 *     following keys are supported:
 *
 * * `strictDi` - disable automatic function annotation for the application. This is meant to
 *   assist in finding bugs which break minified code. Defaults to `false`.
 *
 * @returns {auto.$injector} Returns the newly created injector for this app.
 */
function bootstrap(element, modules, config) {
  if (!isObject(config)) config = {};
  var defaultConfig = {
    strictDi: false
  };
  config = extend(defaultConfig, config);
  var doBootstrap = function() {
    element = jqLite(element);

    if (element.injector()) {
      var tag = (element[0] === document) ? 'document' : startingTag(element);
      //Encode angle brackets to prevent input from being sanitized to empty string #8683
      throw ngMinErr(
          'btstrpd',
          "App Already Bootstrapped with this Element '{0}'",
          tag.replace(/</,'&lt;').replace(/>/,'&gt;'));
    }

    modules = modules || [];
    modules.unshift(['$provide', function($provide) {
      $provide.value('$rootElement', element);
    }]);

    if (config.debugInfoEnabled) {
      // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.
      modules.push(['$compileProvider', function($compileProvider) {
        $compileProvider.debugInfoEnabled(true);
      }]);
    }

    modules.unshift('ng');
    var injector = createInjector(modules, config.strictDi);
    injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector',
       function bootstrapApply(scope, element, compile, injector) {
        scope.$apply(function() {
          element.data('$injector', injector);
          compile(element)(scope);
        });
      }]
    );
    return injector;
  };

  var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;
  var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;

  if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {
    config.debugInfoEnabled = true;
    window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');
  }

  if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
    return doBootstrap();
  }

  window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');
  angular.resumeBootstrap = function(extraModules) {
    forEach(extraModules, function(module) {
      modules.push(module);
    });
    return doBootstrap();
  };

  if (isFunction(angular.resumeDeferredBootstrap)) {
    angular.resumeDeferredBootstrap();
  }
}

/**
 * @ngdoc function
 * @name angular.reloadWithDebugInfo
 * @module ng
 * @description
 * Use this function to reload the current application with debug information turned on.
 * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.
 *
 * See {@link ng.$compileProvider#debugInfoEnabled} for more.
 */
function reloadWithDebugInfo() {
  window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;
  window.location.reload();
}

/**
 * @name angular.getTestability
 * @module ng
 * @description
 * Get the testability service for the instance of Angular on the given
 * element.
 * @param {DOMElement} element DOM element which is the root of angular application.
 */
function getTestability(rootElement) {
  var injector = angular.element(rootElement).injector();
  if (!injector) {
    throw ngMinErr('test',
      'no injector found for element argument to getTestability');
  }
  return injector.get('$$testability');
}

var SNAKE_CASE_REGEXP = /[A-Z]/g;
function snake_case(name, separator) {
  separator = separator || '_';
  return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
    return (pos ? separator : '') + letter.toLowerCase();
  });
}

var bindJQueryFired = false;
function bindJQuery() {
  var originalCleanData;

  if (bindJQueryFired) {
    return;
  }

  // bind to jQuery if present;
  var jqName = jq();
  jQuery = isUndefined(jqName) ? window.jQuery :   // use jQuery (if present)
           !jqName             ? undefined     :   // use jqLite
                                 window[jqName];   // use jQuery specified by `ngJq`

  // Use jQuery if it exists with proper functionality, otherwise default to us.
  // Angular 1.2+ requires jQuery 1.7+ for on()/off() support.
  // Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older
  // versions. It will not work for sure with jQuery <1.7, though.
  if (jQuery && jQuery.fn.on) {
    jqLite = jQuery;
    extend(jQuery.fn, {
      scope: JQLitePrototype.scope,
      isolateScope: JQLitePrototype.isolateScope,
      controller: JQLitePrototype.controller,
      injector: JQLitePrototype.injector,
      inheritedData: JQLitePrototype.inheritedData
    });

    // All nodes removed from the DOM via various jQuery APIs like .remove()
    // are passed through jQuery.cleanData. Monkey-patch this method to fire
    // the $destroy event on all removed nodes.
    originalCleanData = jQuery.cleanData;
    jQuery.cleanData = function(elems) {
      var events;
      for (var i = 0, elem; (elem = elems[i]) != null; i++) {
        events = jQuery._data(elem, "events");
        if (events && events.$destroy) {
          jQuery(elem).triggerHandler('$destroy');
        }
      }
      originalCleanData(elems);
    };
  } else {
    jqLite = JQLite;
  }

  angular.element = jqLite;

  // Prevent double-proxying.
  bindJQueryFired = true;
}

/**
 * throw error if the argument is falsy.
 */
function assertArg(arg, name, reason) {
  if (!arg) {
    throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));
  }
  return arg;
}

function assertArgFn(arg, name, acceptArrayAnnotation) {
  if (acceptArrayAnnotation && isArray(arg)) {
      arg = arg[arg.length - 1];
  }

  assertArg(isFunction(arg), name, 'not a function, got ' +
      (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));
  return arg;
}

/**
 * throw error if the name given is hasOwnProperty
 * @param  {String} name    the name to test
 * @param  {String} context the context in which the name is used, such as module or directive
 */
function assertNotHasOwnProperty(name, context) {
  if (name === 'hasOwnProperty') {
    throw ngMinErr('badname', "hasOwnProperty is not a valid {0} name", context);
  }
}

/**
 * Return the value accessible from the object by path. Any undefined traversals are ignored
 * @param {Object} obj starting object
 * @param {String} path path to traverse
 * @param {boolean} [bindFnToScope=true]
 * @returns {Object} value as accessible by path
 */
//TODO(misko): this function needs to be removed
function getter(obj, path, bindFnToScope) {
  if (!path) return obj;
  var keys = path.split('.');
  var key;
  var lastInstance = obj;
  var len = keys.length;

  for (var i = 0; i < len; i++) {
    key = keys[i];
    if (obj) {
      obj = (lastInstance = obj)[key];
    }
  }
  if (!bindFnToScope && isFunction(obj)) {
    return bind(lastInstance, obj);
  }
  return obj;
}

/**
 * Return the DOM siblings between the first and last node in the given array.
 * @param {Array} array like object
 * @returns {Array} the inputted object or a jqLite collection containing the nodes
 */
function getBlockNodes(nodes) {
  // TODO(perf): update `nodes` instead of creating a new object?
  var node = nodes[0];
  var endNode = nodes[nodes.length - 1];
  var blockNodes;

  for (var i = 1; node !== endNode && (node = node.nextSibling); i++) {
    if (blockNodes || nodes[i] !== node) {
      if (!blockNodes) {
        blockNodes = jqLite(slice.call(nodes, 0, i));
      }
      blockNodes.push(node);
    }
  }

  return blockNodes || nodes;
}


/**
 * Creates a new object without a prototype. This object is useful for lookup without having to
 * guard against prototypically inherited properties via hasOwnProperty.
 *
 * Related micro-benchmarks:
 * - http://jsperf.com/object-create2
 * - http://jsperf.com/proto-map-lookup/2
 * - http://jsperf.com/for-in-vs-object-keys2
 *
 * @returns {Object}
 */
function createMap() {
  return Object.create(null);
}

var NODE_TYPE_ELEMENT = 1;
var NODE_TYPE_ATTRIBUTE = 2;
var NODE_TYPE_TEXT = 3;
var NODE_TYPE_COMMENT = 8;
var NODE_TYPE_DOCUMENT = 9;
var NODE_TYPE_DOCUMENT_FRAGMENT = 11;

/**
 * @ngdoc type
 * @name angular.Module
 * @module ng
 * @description
 *
 * Interface for configuring angular {@link angular.module modules}.
 */

function setupModuleLoader(window) {

  var $injectorMinErr = minErr('$injector');
  var ngMinErr = minErr('ng');

  function ensure(obj, name, factory) {
    return obj[name] || (obj[name] = factory());
  }

  var angular = ensure(window, 'angular', Object);

  // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
  angular.$$minErr = angular.$$minErr || minErr;

  return ensure(angular, 'module', function() {
    /** @type {Object.<string, angular.Module>} */
    var modules = {};

    /**
     * @ngdoc function
     * @name angular.module
     * @module ng
     * @description
     *
     * The `angular.module` is a global place for creating, registering and retrieving Angular
     * modules.
     * All modules (angular core or 3rd party) that should be available to an application must be
     * registered using this mechanism.
     *
     * Passing one argument retrieves an existing {@link angular.Module},
     * whereas passing more than one argument creates a new {@link angular.Module}
     *
     *
     * # Module
     *
     * A module is a collection of services, directives, controllers, filters, and configuration information.
     * `angular.module` is used to configure the {@link auto.$injector $injector}.
     *
     * ```js
     * // Create a new module
     * var myModule = angular.module('myModule', []);
     *
     * // register a new service
     * myModule.value('appName', 'MyCoolApp');
     *
     * // configure existing services inside initialization blocks.
     * myModule.config(['$locationProvider', function($locationProvider) {
     *   // Configure existing providers
     *   $locationProvider.hashPrefix('!');
     * }]);
     * ```
     *
     * Then you can create an injector and load your modules like this:
     *
     * ```js
     * var injector = angular.injector(['ng', 'myModule'])
     * ```
     *
     * However it's more likely that you'll just use
     * {@link ng.directive:ngApp ngApp} or
     * {@link angular.bootstrap} to simplify this process for you.
     *
     * @param {!string} name The name of the module to create or retrieve.
     * @param {!Array.<string>=} requires If specified then new module is being created. If
     *        unspecified then the module is being retrieved for further configuration.
     * @param {Function=} configFn Optional configuration function for the module. Same as
     *        {@link angular.Module#config Module#config()}.
     * @returns {angular.Module} new module with the {@link angular.Module} api.
     */
    return function module(name, requires, configFn) {
      var assertNotHasOwnProperty = function(name, context) {
        if (name === 'hasOwnProperty') {
          throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
        }
      };

      assertNotHasOwnProperty(name, 'module');
      if (requires && modules.hasOwnProperty(name)) {
        modules[name] = null;
      }
      return ensure(modules, name, function() {
        if (!requires) {
          throw $injectorMinErr('nomod', "Module '{0}' is not available! You either misspelled " +
             "the module name or forgot to load it. If registering a module ensure that you " +
             "specify the dependencies as the second argument.", name);
        }

        /** @type {!Array.<Array.<*>>} */
        var invokeQueue = [];

        /** @type {!Array.<Function>} */
        var configBlocks = [];

        /** @type {!Array.<Function>} */
        var runBlocks = [];

        var config = invokeLater('$injector', 'invoke', 'push', configBlocks);

        /** @type {angular.Module} */
        var moduleInstance = {
          // Private state
          _invokeQueue: invokeQueue,
          _configBlocks: configBlocks,
          _runBlocks: runBlocks,

          /**
           * @ngdoc property
           * @name angular.Module#requires
           * @module ng
           *
           * @description
           * Holds the list of modules which the injector will load before the current module is
           * loaded.
           */
          requires: requires,

          /**
           * @ngdoc property
           * @name angular.Module#name
           * @module ng
           *
           * @description
           * Name of the module.
           */
          name: name,


          /**
           * @ngdoc method
           * @name angular.Module#provider
           * @module ng
           * @param {string} name service name
           * @param {Function} providerType Construction function for creating new instance of the
           *                                service.
           * @description
           * See {@link auto.$provide#provider $provide.provider()}.
           */
          provider: invokeLaterAndSetModuleName('$provide', 'provider'),

          /**
           * @ngdoc method
           * @name angular.Module#factory
           * @module ng
           * @param {string} name service name
           * @param {Function} providerFunction Function for creating new instance of the service.
           * @description
           * See {@link auto.$provide#factory $provide.factory()}.
           */
          factory: invokeLaterAndSetModuleName('$provide', 'factory'),

          /**
           * @ngdoc method
           * @name angular.Module#service
           * @module ng
           * @param {string} name service name
           * @param {Function} constructor A constructor function that will be instantiated.
           * @description
           * See {@link auto.$provide#service $provide.service()}.
           */
          service: invokeLaterAndSetModuleName('$provide', 'service'),

          /**
           * @ngdoc method
           * @name angular.Module#value
           * @module ng
           * @param {string} name service name
           * @param {*} object Service instance object.
           * @description
           * See {@link auto.$provide#value $provide.value()}.
           */
          value: invokeLater('$provide', 'value'),

          /**
           * @ngdoc method
           * @name angular.Module#constant
           * @module ng
           * @param {string} name constant name
           * @param {*} object Constant value.
           * @description
           * Because the constants are fixed, they get applied before other provide methods.
           * See {@link auto.$provide#constant $provide.constant()}.
           */
          constant: invokeLater('$provide', 'constant', 'unshift'),

           /**
           * @ngdoc method
           * @name angular.Module#decorator
           * @module ng
           * @param {string} The name of the service to decorate.
           * @param {Function} This function will be invoked when the service needs to be
           *                                    instantiated and should return the decorated service instance.
           * @description
           * See {@link auto.$provide#decorator $provide.decorator()}.
           */
          decorator: invokeLaterAndSetModuleName('$provide', 'decorator'),

          /**
           * @ngdoc method
           * @name angular.Module#animation
           * @module ng
           * @param {string} name animation name
           * @param {Function} animationFactory Factory function for creating new instance of an
           *                                    animation.
           * @description
           *
           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.
           *
           *
           * Defines an animation hook that can be later used with
           * {@link $animate $animate} service and directives that use this service.
           *
           * ```js
           * module.animation('.animation-name', function($inject1, $inject2) {
           *   return {
           *     eventName : function(element, done) {
           *       //code to run the animation
           *       //once complete, then run done()
           *       return function cancellationFunction(element) {
           *         //code to cancel the animation
           *       }
           *     }
           *   }
           * })
           * ```
           *
           * See {@link ng.$animateProvider#register $animateProvider.register()} and
           * {@link ngAnimate ngAnimate module} for more information.
           */
          animation: invokeLaterAndSetModuleName('$animateProvider', 'register'),

          /**
           * @ngdoc method
           * @name angular.Module#filter
           * @module ng
           * @param {string} name Filter name - this must be a valid angular expression identifier
           * @param {Function} filterFactory Factory function for creating new instance of filter.
           * @description
           * See {@link ng.$filterProvider#register $filterProvider.register()}.
           *
           * <div class="alert alert-warning">
           * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
           * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
           * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
           * (`myapp_subsection_filterx`).
           * </div>
           */
          filter: invokeLaterAndSetModuleName('$filterProvider', 'register'),

          /**
           * @ngdoc method
           * @name angular.Module#controller
           * @module ng
           * @param {string|Object} name Controller name, or an object map of controllers where the
           *    keys are the names and the values are the constructors.
           * @param {Function} constructor Controller constructor function.
           * @description
           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.
           */
          controller: invokeLaterAndSetModuleName('$controllerProvider', 'register'),

          /**
           * @ngdoc method
           * @name angular.Module#directive
           * @module ng
           * @param {string|Object} name Directive name, or an object map of directives where the
           *    keys are the names and the values are the factories.
           * @param {Function} directiveFactory Factory function for creating new instance of
           * directives.
           * @description
           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.
           */
          directive: invokeLaterAndSetModuleName('$compileProvider', 'directive'),

          /**
           * @ngdoc method
           * @name angular.Module#component
           * @module ng
           * @param {string} name Name of the component in camel-case (i.e. myComp which will match as my-comp)
           * @param {Object} options Component definition object (a simplified
           *    {@link ng.$compile#directive-definition-object directive definition object})
           *
           * @description
           * See {@link ng.$compileProvider#component $compileProvider.component()}.
           */
          component: invokeLaterAndSetModuleName('$compileProvider', 'component'),

          /**
           * @ngdoc method
           * @name angular.Module#config
           * @module ng
           * @param {Function} configFn Execute this function on module load. Useful for service
           *    configuration.
           * @description
           * Use this method to register work which needs to be performed on module loading.
           * For more about how to configure services, see
           * {@link providers#provider-recipe Provider Recipe}.
           */
          config: config,

          /**
           * @ngdoc method
           * @name angular.Module#run
           * @module ng
           * @param {Function} initializationFn Execute this function after injector creation.
           *    Useful for application initialization.
           * @description
           * Use this method to register work which should be performed when the injector is done
           * loading all modules.
           */
          run: function(block) {
            runBlocks.push(block);
            return this;
          }
        };

        if (configFn) {
          config(configFn);
        }

        return moduleInstance;

        /**
         * @param {string} provider
         * @param {string} method
         * @param {String=} insertMethod
         * @returns {angular.Module}
         */
        function invokeLater(provider, method, insertMethod, queue) {
          if (!queue) queue = invokeQueue;
          return function() {
            queue[insertMethod || 'push']([provider, method, arguments]);
            return moduleInstance;
          };
        }

        /**
         * @param {string} provider
         * @param {string} method
         * @returns {angular.Module}
         */
        function invokeLaterAndSetModuleName(provider, method) {
          return function(recipeName, factoryFunction) {
            if (factoryFunction && isFunction(factoryFunction)) factoryFunction.$$moduleName = name;
            invokeQueue.push([provider, method, arguments]);
            return moduleInstance;
          };
        }
      });
    };
  });

}

/* global: toDebugString: true */

function serializeObject(obj) {
  var seen = [];

  return JSON.stringify(obj, function(key, val) {
    val = toJsonReplacer(key, val);
    if (isObject(val)) {

      if (seen.indexOf(val) >= 0) return '...';

      seen.push(val);
    }
    return val;
  });
}

function toDebugString(obj) {
  if (typeof obj === 'function') {
    return obj.toString().replace(/ \{[\s\S]*$/, '');
  } else if (isUndefined(obj)) {
    return 'undefined';
  } else if (typeof obj !== 'string') {
    return serializeObject(obj);
  }
  return obj;
}

/* global angularModule: true,
  version: true,

  $CompileProvider,

  htmlAnchorDirective,
  inputDirective,
  inputDirective,
  formDirective,
  scriptDirective,
  selectDirective,
  styleDirective,
  optionDirective,
  ngBindDirective,
  ngBindHtmlDirective,
  ngBindTemplateDirective,
  ngClassDirective,
  ngClassEvenDirective,
  ngClassOddDirective,
  ngCloakDirective,
  ngControllerDirective,
  ngFormDirective,
  ngHideDirective,
  ngIfDirective,
  ngIncludeDirective,
  ngIncludeFillContentDirective,
  ngInitDirective,
  ngNonBindableDirective,
  ngPluralizeDirective,
  ngRepeatDirective,
  ngShowDirective,
  ngStyleDirective,
  ngSwitchDirective,
  ngSwitchWhenDirective,
  ngSwitchDefaultDirective,
  ngOptionsDirective,
  ngTranscludeDirective,
  ngModelDirective,
  ngListDirective,
  ngChangeDirective,
  patternDirective,
  patternDirective,
  requiredDirective,
  requiredDirective,
  minlengthDirective,
  minlengthDirective,
  maxlengthDirective,
  maxlengthDirective,
  ngValueDirective,
  ngModelOptionsDirective,
  ngAttributeAliasDirectives,
  ngEventDirectives,

  $AnchorScrollProvider,
  $AnimateProvider,
  $CoreAnimateCssProvider,
  $$CoreAnimateJsProvider,
  $$CoreAnimateQueueProvider,
  $$AnimateRunnerFactoryProvider,
  $$AnimateAsyncRunFactoryProvider,
  $BrowserProvider,
  $CacheFactoryProvider,
  $ControllerProvider,
  $DateProvider,
  $DocumentProvider,
  $ExceptionHandlerProvider,
  $FilterProvider,
  $$ForceReflowProvider,
  $InterpolateProvider,
  $IntervalProvider,
  $$HashMapProvider,
  $HttpProvider,
  $HttpParamSerializerProvider,
  $HttpParamSerializerJQLikeProvider,
  $HttpBackendProvider,
  $xhrFactoryProvider,
  $LocationProvider,
  $LogProvider,
  $ParseProvider,
  $RootScopeProvider,
  $QProvider,
  $$QProvider,
  $$SanitizeUriProvider,
  $SceProvider,
  $SceDelegateProvider,
  $SnifferProvider,
  $TemplateCacheProvider,
  $TemplateRequestProvider,
  $$TestabilityProvider,
  $TimeoutProvider,
  $$RAFProvider,
  $WindowProvider,
  $$jqLiteProvider,
  $$CookieReaderProvider
*/


/**
 * @ngdoc object
 * @name angular.version
 * @module ng
 * @description
 * An object that contains information about the current AngularJS version.
 *
 * This object has the following properties:
 *
 * - `full` – `{string}` – Full version string, such as "0.9.18".
 * - `major` – `{number}` – Major version number, such as "0".
 * - `minor` – `{number}` – Minor version number, such as "9".
 * - `dot` – `{number}` – Dot version number, such as "18".
 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
 */
var version = {
  full: '1.5.0',    // all of these placeholder strings will be replaced by grunt's
  major: 1,    // package task
  minor: 5,
  dot: 0,
  codeName: 'ennoblement-facilitation'
};


function publishExternalAPI(angular) {
  extend(angular, {
    'bootstrap': bootstrap,
    'copy': copy,
    'extend': extend,
    'merge': merge,
    'equals': equals,
    'element': jqLite,
    'forEach': forEach,
    'injector': createInjector,
    'noop': noop,
    'bind': bind,
    'toJson': toJson,
    'fromJson': fromJson,
    'identity': identity,
    'isUndefined': isUndefined,
    'isDefined': isDefined,
    'isString': isString,
    'isFunction': isFunction,
    'isObject': isObject,
    'isNumber': isNumber,
    'isElement': isElement,
    'isArray': isArray,
    'version': version,
    'isDate': isDate,
    'lowercase': lowercase,
    'uppercase': uppercase,
    'callbacks': {counter: 0},
    'getTestability': getTestability,
    '$$minErr': minErr,
    '$$csp': csp,
    'reloadWithDebugInfo': reloadWithDebugInfo
  });

  angularModule = setupModuleLoader(window);

  angularModule('ng', ['ngLocale'], ['$provide',
    function ngModule($provide) {
      // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
      $provide.provider({
        $$sanitizeUri: $$SanitizeUriProvider
      });
      $provide.provider('$compile', $CompileProvider).
        directive({
            a: htmlAnchorDirective,
            input: inputDirective,
            textarea: inputDirective,
            form: formDirective,
            script: scriptDirective,
            select: selectDirective,
            style: styleDirective,
            option: optionDirective,
            ngBind: ngBindDirective,
            ngBindHtml: ngBindHtmlDirective,
            ngBindTemplate: ngBindTemplateDirective,
            ngClass: ngClassDirective,
            ngClassEven: ngClassEvenDirective,
            ngClassOdd: ngClassOddDirective,
            ngCloak: ngCloakDirective,
            ngController: ngControllerDirective,
            ngForm: ngFormDirective,
            ngHide: ngHideDirective,
            ngIf: ngIfDirective,
            ngInclude: ngIncludeDirective,
            ngInit: ngInitDirective,
            ngNonBindable: ngNonBindableDirective,
            ngPluralize: ngPluralizeDirective,
            ngRepeat: ngRepeatDirective,
            ngShow: ngShowDirective,
            ngStyle: ngStyleDirective,
            ngSwitch: ngSwitchDirective,
            ngSwitchWhen: ngSwitchWhenDirective,
            ngSwitchDefault: ngSwitchDefaultDirective,
            ngOptions: ngOptionsDirective,
            ngTransclude: ngTranscludeDirective,
            ngModel: ngModelDirective,
            ngList: ngListDirective,
            ngChange: ngChangeDirective,
            pattern: patternDirective,
            ngPattern: patternDirective,
            required: requiredDirective,
            ngRequired: requiredDirective,
            minlength: minlengthDirective,
            ngMinlength: minlengthDirective,
            maxlength: maxlengthDirective,
            ngMaxlength: maxlengthDirective,
            ngValue: ngValueDirective,
            ngModelOptions: ngModelOptionsDirective
        }).
        directive({
          ngInclude: ngIncludeFillContentDirective
        }).
        directive(ngAttributeAliasDirectives).
        directive(ngEventDirectives);
      $provide.provider({
        $anchorScroll: $AnchorScrollProvider,
        $animate: $AnimateProvider,
        $animateCss: $CoreAnimateCssProvider,
        $$animateJs: $$CoreAnimateJsProvider,
        $$animateQueue: $$CoreAnimateQueueProvider,
        $$AnimateRunner: $$AnimateRunnerFactoryProvider,
        $$animateAsyncRun: $$AnimateAsyncRunFactoryProvider,
        $browser: $BrowserProvider,
        $cacheFactory: $CacheFactoryProvider,
        $controller: $ControllerProvider,
        $document: $DocumentProvider,
        $exceptionHandler: $ExceptionHandlerProvider,
        $filter: $FilterProvider,
        $$forceReflow: $$ForceReflowProvider,
        $interpolate: $InterpolateProvider,
        $interval: $IntervalProvider,
        $http: $HttpProvider,
        $httpParamSerializer: $HttpParamSerializerProvider,
        $httpParamSerializerJQLike: $HttpParamSerializerJQLikeProvider,
        $httpBackend: $HttpBackendProvider,
        $xhrFactory: $xhrFactoryProvider,
        $location: $LocationProvider,
        $log: $LogProvider,
        $parse: $ParseProvider,
        $rootScope: $RootScopeProvider,
        $q: $QProvider,
        $$q: $$QProvider,
        $sce: $SceProvider,
        $sceDelegate: $SceDelegateProvider,
        $sniffer: $SnifferProvider,
        $templateCache: $TemplateCacheProvider,
        $templateRequest: $TemplateRequestProvider,
        $$testability: $$TestabilityProvider,
        $timeout: $TimeoutProvider,
        $window: $WindowProvider,
        $$rAF: $$RAFProvider,
        $$jqLite: $$jqLiteProvider,
        $$HashMap: $$HashMapProvider,
        $$cookieReader: $$CookieReaderProvider
      });
    }
  ]);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *     Any commits to this file should be reviewed with security in mind.  *
 *   Changes to this file can potentially create security vulnerabilities. *
 *          An approval from 2 Core members with history of modifying      *
 *                         this file is required.                          *
 *                                                                         *
 *  Does the change somehow allow for arbitrary javascript to be executed? *
 *    Or allows for someone to change the prototype of built-in objects?   *
 *     Or gives undesired access to variables likes document or window?    *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* global JQLitePrototype: true,
  addEventListenerFn: true,
  removeEventListenerFn: true,
  BOOLEAN_ATTR: true,
  ALIASED_ATTR: true,
*/

//////////////////////////////////
//JQLite
//////////////////////////////////

/**
 * @ngdoc function
 * @name angular.element
 * @module ng
 * @kind function
 *
 * @description
 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
 *
 * If jQuery is available, `angular.element` is an alias for the
 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or **jqLite**.
 *
 * jqLite is a tiny, API-compatible subset of jQuery that allows
 * Angular to manipulate the DOM in a cross-browser compatible way. jqLite implements only the most
 * commonly needed functionality with the goal of having a very small footprint.
 *
 * To use `jQuery`, simply ensure it is loaded before the `angular.js` file. You can also use the
 * {@link ngJq `ngJq`} directive to specify that jqlite should be used over jQuery, or to use a
 * specific version of jQuery if multiple versions exist on the page.
 *
 * <div class="alert alert-info">**Note:** All element references in Angular are always wrapped with jQuery or
 * jqLite (such as the element argument in a directive's compile / link function). They are never raw DOM references.</div>
 *
 * <div class="alert alert-warning">**Note:** Keep in mind that this function will not find elements
 * by tag name / CSS selector. For lookups by tag name, try instead `angular.element(document).find(...)`
 * or `$document.find()`, or use the standard DOM APIs, e.g. `document.querySelectorAll()`.</div>
 *
 * ## Angular's jqLite
 * jqLite provides only the following jQuery methods:
 *
 * - [`addClass()`](http://api.jquery.com/addClass/)
 * - [`after()`](http://api.jquery.com/after/)
 * - [`append()`](http://api.jquery.com/append/)
 * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters
 * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData
 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
 * - [`clone()`](http://api.jquery.com/clone/)
 * - [`contents()`](http://api.jquery.com/contents/)
 * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`.
 *   As a setter, does not convert numbers to strings or append 'px', and also does not have automatic property prefixing.
 * - [`data()`](http://api.jquery.com/data/)
 * - [`detach()`](http://api.jquery.com/detach/)
 * - [`empty()`](http://api.jquery.com/empty/)
 * - [`eq()`](http://api.jquery.com/eq/)
 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
 * - [`hasClass()`](http://api.jquery.com/hasClass/)
 * - [`html()`](http://api.jquery.com/html/)
 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces, selectors or event object as parameter
 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
 * - [`prepend()`](http://api.jquery.com/prepend/)
 * - [`prop()`](http://api.jquery.com/prop/)
 * - [`ready()`](http://api.jquery.com/ready/)
 * - [`remove()`](http://api.jquery.com/remove/)
 * - [`removeAttr()`](http://api.jquery.com/removeAttr/)
 * - [`removeClass()`](http://api.jquery.com/removeClass/)
 * - [`removeData()`](http://api.jquery.com/removeData/)
 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
 * - [`text()`](http://api.jquery.com/text/)
 * - [`toggleClass()`](http://api.jquery.com/toggleClass/)
 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.
 * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces or event object as parameter
 * - [`val()`](http://api.jquery.com/val/)
 * - [`wrap()`](http://api.jquery.com/wrap/)
 *
 * ## jQuery/jqLite Extras
 * Angular also provides the following additional methods and events to both jQuery and jqLite:
 *
 * ### Events
 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
 *    element before it is removed.
 *
 * ### Methods
 * - `controller(name)` - retrieves the controller of the current element or its parent. By default
 *   retrieves controller associated with the `ngController` directive. If `name` is provided as
 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
 *   `'ngModel'`).
 * - `injector()` - retrieves the injector of the current element or its parent.
 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
 *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to
 *   be enabled.
 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
 *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.
 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
 *   parent element is reached.
 *
 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
 * @returns {Object} jQuery object.
 */

JQLite.expando = 'ng339';

var jqCache = JQLite.cache = {},
    jqId = 1,
    addEventListenerFn = function(element, type, fn) {
      element.addEventListener(type, fn, false);
    },
    removeEventListenerFn = function(element, type, fn) {
      element.removeEventListener(type, fn, false);
    };

/*
 * !!! This is an undocumented "private" function !!!
 */
JQLite._data = function(node) {
  //jQuery always returns an object on cache miss
  return this.cache[node[this.expando]] || {};
};

function jqNextId() { return ++jqId; }


var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
var MOZ_HACK_REGEXP = /^moz([A-Z])/;
var MOUSE_EVENT_MAP= { mouseleave: "mouseout", mouseenter: "mouseover"};
var jqLiteMinErr = minErr('jqLite');

/**
 * Converts snake_case to camelCase.
 * Also there is special case for Moz prefix starting with upper case letter.
 * @param name Name to normalize
 */
function camelCase(name) {
  return name.
    replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {
      return offset ? letter.toUpperCase() : letter;
    }).
    replace(MOZ_HACK_REGEXP, 'Moz$1');
}

var SINGLE_TAG_REGEXP = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;
var HTML_REGEXP = /<|&#?\w+;/;
var TAG_NAME_REGEXP = /<([\w:-]+)/;
var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi;

var wrapMap = {
  'option': [1, '<select multiple="multiple">', '</select>'],

  'thead': [1, '<table>', '</table>'],
  'col': [2, '<table><colgroup>', '</colgroup></table>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],
  'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],
  '_default': [0, "", ""]
};

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function jqLiteIsTextNode(html) {
  return !HTML_REGEXP.test(html);
}

function jqLiteAcceptsData(node) {
  // The window object can accept data but has no nodeType
  // Otherwise we are only interested in elements (1) and documents (9)
  var nodeType = node.nodeType;
  return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;
}

function jqLiteHasData(node) {
  for (var key in jqCache[node.ng339]) {
    return true;
  }
  return false;
}

function jqLiteCleanData(nodes) {
  for (var i = 0, ii = nodes.length; i < ii; i++) {
    jqLiteRemoveData(nodes[i]);
  }
}

function jqLiteBuildFragment(html, context) {
  var tmp, tag, wrap,
      fragment = context.createDocumentFragment(),
      nodes = [], i;

  if (jqLiteIsTextNode(html)) {
    // Convert non-html into a text node
    nodes.push(context.createTextNode(html));
  } else {
    // Convert html into DOM nodes
    tmp = tmp || fragment.appendChild(context.createElement("div"));
    tag = (TAG_NAME_REGEXP.exec(html) || ["", ""])[1].toLowerCase();
    wrap = wrapMap[tag] || wrapMap._default;
    tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2];

    // Descend through wrappers to the right content
    i = wrap[0];
    while (i--) {
      tmp = tmp.lastChild;
    }

    nodes = concat(nodes, tmp.childNodes);

    tmp = fragment.firstChild;
    tmp.textContent = "";
  }

  // Remove wrapper from fragment
  fragment.textContent = "";
  fragment.innerHTML = ""; // Clear inner HTML
  forEach(nodes, function(node) {
    fragment.appendChild(node);
  });

  return fragment;
}

function jqLiteParseHTML(html, context) {
  context = context || document;
  var parsed;

  if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {
    return [context.createElement(parsed[1])];
  }

  if ((parsed = jqLiteBuildFragment(html, context))) {
    return parsed.childNodes;
  }

  return [];
}

function jqLiteWrapNode(node, wrapper) {
  var parent = node.parentNode;

  if (parent) {
    parent.replaceChild(wrapper, node);
  }

  wrapper.appendChild(node);
}


// IE9-11 has no method "contains" in SVG element and in Node.prototype. Bug #10259.
var jqLiteContains = Node.prototype.contains || function(arg) {
  // jshint bitwise: false
  return !!(this.compareDocumentPosition(arg) & 16);
  // jshint bitwise: true
};

/////////////////////////////////////////////
function JQLite(element) {
  if (element instanceof JQLite) {
    return element;
  }

  var argIsString;

  if (isString(element)) {
    element = trim(element);
    argIsString = true;
  }
  if (!(this instanceof JQLite)) {
    if (argIsString && element.charAt(0) != '<') {
      throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
    }
    return new JQLite(element);
  }

  if (argIsString) {
    jqLiteAddNodes(this, jqLiteParseHTML(element));
  } else {
    jqLiteAddNodes(this, element);
  }
}

function jqLiteClone(element) {
  return element.cloneNode(true);
}

function jqLiteDealoc(element, onlyDescendants) {
  if (!onlyDescendants) jqLiteRemoveData(element);

  if (element.querySelectorAll) {
    var descendants = element.querySelectorAll('*');
    for (var i = 0, l = descendants.length; i < l; i++) {
      jqLiteRemoveData(descendants[i]);
    }
  }
}

function jqLiteOff(element, type, fn, unsupported) {
  if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');

  var expandoStore = jqLiteExpandoStore(element);
  var events = expandoStore && expandoStore.events;
  var handle = expandoStore && expandoStore.handle;

  if (!handle) return; //no listeners registered

  if (!type) {
    for (type in events) {
      if (type !== '$destroy') {
        removeEventListenerFn(element, type, handle);
      }
      delete events[type];
    }
  } else {

    var removeHandler = function(type) {
      var listenerFns = events[type];
      if (isDefined(fn)) {
        arrayRemove(listenerFns || [], fn);
      }
      if (!(isDefined(fn) && listenerFns && listenerFns.length > 0)) {
        removeEventListenerFn(element, type, handle);
        delete events[type];
      }
    };

    forEach(type.split(' '), function(type) {
      removeHandler(type);
      if (MOUSE_EVENT_MAP[type]) {
        removeHandler(MOUSE_EVENT_MAP[type]);
      }
    });
  }
}

function jqLiteRemoveData(element, name) {
  var expandoId = element.ng339;
  var expandoStore = expandoId && jqCache[expandoId];

  if (expandoStore) {
    if (name) {
      delete expandoStore.data[name];
      return;
    }

    if (expandoStore.handle) {
      if (expandoStore.events.$destroy) {
        expandoStore.handle({}, '$destroy');
      }
      jqLiteOff(element);
    }
    delete jqCache[expandoId];
    element.ng339 = undefined; // don't delete DOM expandos. IE and Chrome don't like it
  }
}


function jqLiteExpandoStore(element, createIfNecessary) {
  var expandoId = element.ng339,
      expandoStore = expandoId && jqCache[expandoId];

  if (createIfNecessary && !expandoStore) {
    element.ng339 = expandoId = jqNextId();
    expandoStore = jqCache[expandoId] = {events: {}, data: {}, handle: undefined};
  }

  return expandoStore;
}


function jqLiteData(element, key, value) {
  if (jqLiteAcceptsData(element)) {

    var isSimpleSetter = isDefined(value);
    var isSimpleGetter = !isSimpleSetter && key && !isObject(key);
    var massGetter = !key;
    var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);
    var data = expandoStore && expandoStore.data;

    if (isSimpleSetter) { // data('key', value)
      data[key] = value;
    } else {
      if (massGetter) {  // data()
        return data;
      } else {
        if (isSimpleGetter) { // data('key')
          // don't force creation of expandoStore if it doesn't exist yet
          return data && data[key];
        } else { // mass-setter: data({key1: val1, key2: val2})
          extend(data, key);
        }
      }
    }
  }
}

function jqLiteHasClass(element, selector) {
  if (!element.getAttribute) return false;
  return ((" " + (element.getAttribute('class') || '') + " ").replace(/[\n\t]/g, " ").
      indexOf(" " + selector + " ") > -1);
}

function jqLiteRemoveClass(element, cssClasses) {
  if (cssClasses && element.setAttribute) {
    forEach(cssClasses.split(' '), function(cssClass) {
      element.setAttribute('class', trim(
          (" " + (element.getAttribute('class') || '') + " ")
          .replace(/[\n\t]/g, " ")
          .replace(" " + trim(cssClass) + " ", " "))
      );
    });
  }
}

function jqLiteAddClass(element, cssClasses) {
  if (cssClasses && element.setAttribute) {
    var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')
                            .replace(/[\n\t]/g, " ");

    forEach(cssClasses.split(' '), function(cssClass) {
      cssClass = trim(cssClass);
      if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
        existingClasses += cssClass + ' ';
      }
    });

    element.setAttribute('class', trim(existingClasses));
  }
}


function jqLiteAddNodes(root, elements) {
  // THIS CODE IS VERY HOT. Don't make changes without benchmarking.

  if (elements) {

    // if a Node (the most common case)
    if (elements.nodeType) {
      root[root.length++] = elements;
    } else {
      var length = elements.length;

      // if an Array or NodeList and not a Window
      if (typeof length === 'number' && elements.window !== elements) {
        if (length) {
          for (var i = 0; i < length; i++) {
            root[root.length++] = elements[i];
          }
        }
      } else {
        root[root.length++] = elements;
      }
    }
  }
}


function jqLiteController(element, name) {
  return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');
}

function jqLiteInheritedData(element, name, value) {
  // if element is the document object work with the html element instead
  // this makes $(document).scope() possible
  if (element.nodeType == NODE_TYPE_DOCUMENT) {
    element = element.documentElement;
  }
  var names = isArray(name) ? name : [name];

  while (element) {
    for (var i = 0, ii = names.length; i < ii; i++) {
      if (isDefined(value = jqLite.data(element, names[i]))) return value;
    }

    // If dealing with a document fragment node with a host element, and no parent, use the host
    // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
    // to lookup parent controllers.
    element = element.parentNode || (element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host);
  }
}

function jqLiteEmpty(element) {
  jqLiteDealoc(element, true);
  while (element.firstChild) {
    element.removeChild(element.firstChild);
  }
}

function jqLiteRemove(element, keepData) {
  if (!keepData) jqLiteDealoc(element);
  var parent = element.parentNode;
  if (parent) parent.removeChild(element);
}


function jqLiteDocumentLoaded(action, win) {
  win = win || window;
  if (win.document.readyState === 'complete') {
    // Force the action to be run async for consistent behavior
    // from the action's point of view
    // i.e. it will definitely not be in a $apply
    win.setTimeout(action);
  } else {
    // No need to unbind this handler as load is only ever called once
    jqLite(win).on('load', action);
  }
}

//////////////////////////////////////////
// Functions which are declared directly.
//////////////////////////////////////////
var JQLitePrototype = JQLite.prototype = {
  ready: function(fn) {
    var fired = false;

    function trigger() {
      if (fired) return;
      fired = true;
      fn();
    }

    // check if document is already loaded
    if (document.readyState === 'complete') {
      setTimeout(trigger);
    } else {
      this.on('DOMContentLoaded', trigger); // works for modern browsers and IE9
      // we can not use jqLite since we are not done loading and jQuery could be loaded later.
      // jshint -W064
      JQLite(window).on('load', trigger); // fallback to window.onload for others
      // jshint +W064
    }
  },
  toString: function() {
    var value = [];
    forEach(this, function(e) { value.push('' + e);});
    return '[' + value.join(', ') + ']';
  },

  eq: function(index) {
      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);
  },

  length: 0,
  push: push,
  sort: [].sort,
  splice: [].splice
};

//////////////////////////////////////////
// Functions iterating getter/setters.
// these functions return self on setter and
// value on get.
//////////////////////////////////////////
var BOOLEAN_ATTR = {};
forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {
  BOOLEAN_ATTR[lowercase(value)] = value;
});
var BOOLEAN_ELEMENTS = {};
forEach('input,select,option,textarea,button,form,details'.split(','), function(value) {
  BOOLEAN_ELEMENTS[value] = true;
});
var ALIASED_ATTR = {
  'ngMinlength': 'minlength',
  'ngMaxlength': 'maxlength',
  'ngMin': 'min',
  'ngMax': 'max',
  'ngPattern': 'pattern'
};

function getBooleanAttrName(element, name) {
  // check dom last since we will most likely fail on name
  var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];

  // booleanAttr is here twice to minimize DOM access
  return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;
}

function getAliasedAttrName(name) {
  return ALIASED_ATTR[name];
}

forEach({
  data: jqLiteData,
  removeData: jqLiteRemoveData,
  hasData: jqLiteHasData,
  cleanData: jqLiteCleanData
}, function(fn, name) {
  JQLite[name] = fn;
});

forEach({
  data: jqLiteData,
  inheritedData: jqLiteInheritedData,

  scope: function(element) {
    // Can't use jqLiteData here directly so we stay compatible with jQuery!
    return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);
  },

  isolateScope: function(element) {
    // Can't use jqLiteData here directly so we stay compatible with jQuery!
    return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');
  },

  controller: jqLiteController,

  injector: function(element) {
    return jqLiteInheritedData(element, '$injector');
  },

  removeAttr: function(element, name) {
    element.removeAttribute(name);
  },

  hasClass: jqLiteHasClass,

  css: function(element, name, value) {
    name = camelCase(name);

    if (isDefined(value)) {
      element.style[name] = value;
    } else {
      return element.style[name];
    }
  },

  attr: function(element, name, value) {
    var nodeType = element.nodeType;
    if (nodeType === NODE_TYPE_TEXT || nodeType === NODE_TYPE_ATTRIBUTE || nodeType === NODE_TYPE_COMMENT) {
      return;
    }
    var lowercasedName = lowercase(name);
    if (BOOLEAN_ATTR[lowercasedName]) {
      if (isDefined(value)) {
        if (!!value) {
          element[name] = true;
          element.setAttribute(name, lowercasedName);
        } else {
          element[name] = false;
          element.removeAttribute(lowercasedName);
        }
      } else {
        return (element[name] ||
                 (element.attributes.getNamedItem(name) || noop).specified)
               ? lowercasedName
               : undefined;
      }
    } else if (isDefined(value)) {
      element.setAttribute(name, value);
    } else if (element.getAttribute) {
      // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code
      // some elements (e.g. Document) don't have get attribute, so return undefined
      var ret = element.getAttribute(name, 2);
      // normalize non-existing attributes to undefined (as jQuery)
      return ret === null ? undefined : ret;
    }
  },

  prop: function(element, name, value) {
    if (isDefined(value)) {
      element[name] = value;
    } else {
      return element[name];
    }
  },

  text: (function() {
    getText.$dv = '';
    return getText;

    function getText(element, value) {
      if (isUndefined(value)) {
        var nodeType = element.nodeType;
        return (nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT) ? element.textContent : '';
      }
      element.textContent = value;
    }
  })(),

  val: function(element, value) {
    if (isUndefined(value)) {
      if (element.multiple && nodeName_(element) === 'select') {
        var result = [];
        forEach(element.options, function(option) {
          if (option.selected) {
            result.push(option.value || option.text);
          }
        });
        return result.length === 0 ? null : result;
      }
      return element.value;
    }
    element.value = value;
  },

  html: function(element, value) {
    if (isUndefined(value)) {
      return element.innerHTML;
    }
    jqLiteDealoc(element, true);
    element.innerHTML = value;
  },

  empty: jqLiteEmpty
}, function(fn, name) {
  /**
   * Properties: writes return selection, reads return first value
   */
  JQLite.prototype[name] = function(arg1, arg2) {
    var i, key;
    var nodeCount = this.length;

    // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
    // in a way that survives minification.
    // jqLiteEmpty takes no arguments but is a setter.
    if (fn !== jqLiteEmpty &&
        (isUndefined((fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2))) {
      if (isObject(arg1)) {

        // we are a write, but the object properties are the key/values
        for (i = 0; i < nodeCount; i++) {
          if (fn === jqLiteData) {
            // data() takes the whole object in jQuery
            fn(this[i], arg1);
          } else {
            for (key in arg1) {
              fn(this[i], key, arg1[key]);
            }
          }
        }
        // return self for chaining
        return this;
      } else {
        // we are a read, so read the first child.
        // TODO: do we still need this?
        var value = fn.$dv;
        // Only if we have $dv do we iterate over all, otherwise it is just the first element.
        var jj = (isUndefined(value)) ? Math.min(nodeCount, 1) : nodeCount;
        for (var j = 0; j < jj; j++) {
          var nodeValue = fn(this[j], arg1, arg2);
          value = value ? value + nodeValue : nodeValue;
        }
        return value;
      }
    } else {
      // we are a write, so apply to all children
      for (i = 0; i < nodeCount; i++) {
        fn(this[i], arg1, arg2);
      }
      // return self for chaining
      return this;
    }
  };
});

function createEventHandler(element, events) {
  var eventHandler = function(event, type) {
    // jQuery specific api
    event.isDefaultPrevented = function() {
      return event.defaultPrevented;
    };

    var eventFns = events[type || event.type];
    var eventFnsLength = eventFns ? eventFns.length : 0;

    if (!eventFnsLength) return;

    if (isUndefined(event.immediatePropagationStopped)) {
      var originalStopImmediatePropagation = event.stopImmediatePropagation;
      event.stopImmediatePropagation = function() {
        event.immediatePropagationStopped = true;

        if (event.stopPropagation) {
          event.stopPropagation();
        }

        if (originalStopImmediatePropagation) {
          originalStopImmediatePropagation.call(event);
        }
      };
    }

    event.isImmediatePropagationStopped = function() {
      return event.immediatePropagationStopped === true;
    };

    // Some events have special handlers that wrap the real handler
    var handlerWrapper = eventFns.specialHandlerWrapper || defaultHandlerWrapper;

    // Copy event handlers in case event handlers array is modified during execution.
    if ((eventFnsLength > 1)) {
      eventFns = shallowCopy(eventFns);
    }

    for (var i = 0; i < eventFnsLength; i++) {
      if (!event.isImmediatePropagationStopped()) {
        handlerWrapper(element, event, eventFns[i]);
      }
    }
  };

  // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all
  //       events on `element`
  eventHandler.elem = element;
  return eventHandler;
}

function defaultHandlerWrapper(element, event, handler) {
  handler.call(element, event);
}

function specialMouseHandlerWrapper(target, event, handler) {
  // Refer to jQuery's implementation of mouseenter & mouseleave
  // Read about mouseenter and mouseleave:
  // http://www.quirksmode.org/js/events_mouse.html#link8
  var related = event.relatedTarget;
  // For mousenter/leave call the handler if related is outside the target.
  // NB: No relatedTarget if the mouse left/entered the browser window
  if (!related || (related !== target && !jqLiteContains.call(target, related))) {
    handler.call(target, event);
  }
}

//////////////////////////////////////////
// Functions iterating traversal.
// These functions chain results into a single
// selector.
//////////////////////////////////////////
forEach({
  removeData: jqLiteRemoveData,

  on: function jqLiteOn(element, type, fn, unsupported) {
    if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');

    // Do not add event handlers to non-elements because they will not be cleaned up.
    if (!jqLiteAcceptsData(element)) {
      return;
    }

    var expandoStore = jqLiteExpandoStore(element, true);
    var events = expandoStore.events;
    var handle = expandoStore.handle;

    if (!handle) {
      handle = expandoStore.handle = createEventHandler(element, events);
    }

    // http://jsperf.com/string-indexof-vs-split
    var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];
    var i = types.length;

    var addHandler = function(type, specialHandlerWrapper, noEventListener) {
      var eventFns = events[type];

      if (!eventFns) {
        eventFns = events[type] = [];
        eventFns.specialHandlerWrapper = specialHandlerWrapper;
        if (type !== '$destroy' && !noEventListener) {
          addEventListenerFn(element, type, handle);
        }
      }

      eventFns.push(fn);
    };

    while (i--) {
      type = types[i];
      if (MOUSE_EVENT_MAP[type]) {
        addHandler(MOUSE_EVENT_MAP[type], specialMouseHandlerWrapper);
        addHandler(type, undefined, true);
      } else {
        addHandler(type);
      }
    }
  },

  off: jqLiteOff,

  one: function(element, type, fn) {
    element = jqLite(element);

    //add the listener twice so that when it is called
    //you can remove the original function and still be
    //able to call element.off(ev, fn) normally
    element.on(type, function onFn() {
      element.off(type, fn);
      element.off(type, onFn);
    });
    element.on(type, fn);
  },

  replaceWith: function(element, replaceNode) {
    var index, parent = element.parentNode;
    jqLiteDealoc(element);
    forEach(new JQLite(replaceNode), function(node) {
      if (index) {
        parent.insertBefore(node, index.nextSibling);
      } else {
        parent.replaceChild(node, element);
      }
      index = node;
    });
  },

  children: function(element) {
    var children = [];
    forEach(element.childNodes, function(element) {
      if (element.nodeType === NODE_TYPE_ELEMENT) {
        children.push(element);
      }
    });
    return children;
  },

  contents: function(element) {
    return element.contentDocument || element.childNodes || [];
  },

  append: function(element, node) {
    var nodeType = element.nodeType;
    if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return;

    node = new JQLite(node);

    for (var i = 0, ii = node.length; i < ii; i++) {
      var child = node[i];
      element.appendChild(child);
    }
  },

  prepend: function(element, node) {
    if (element.nodeType === NODE_TYPE_ELEMENT) {
      var index = element.firstChild;
      forEach(new JQLite(node), function(child) {
        element.insertBefore(child, index);
      });
    }
  },

  wrap: function(element, wrapNode) {
    jqLiteWrapNode(element, jqLite(wrapNode).eq(0).clone()[0]);
  },

  remove: jqLiteRemove,

  detach: function(element) {
    jqLiteRemove(element, true);
  },

  after: function(element, newElement) {
    var index = element, parent = element.parentNode;
    newElement = new JQLite(newElement);

    for (var i = 0, ii = newElement.length; i < ii; i++) {
      var node = newElement[i];
      parent.insertBefore(node, index.nextSibling);
      index = node;
    }
  },

  addClass: jqLiteAddClass,
  removeClass: jqLiteRemoveClass,

  toggleClass: function(element, selector, condition) {
    if (selector) {
      forEach(selector.split(' '), function(className) {
        var classCondition = condition;
        if (isUndefined(classCondition)) {
          classCondition = !jqLiteHasClass(element, className);
        }
        (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
      });
    }
  },

  parent: function(element) {
    var parent = element.parentNode;
    return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;
  },

  next: function(element) {
    return element.nextElementSibling;
  },

  find: function(element, selector) {
    if (element.getElementsByTagName) {
      return element.getElementsByTagName(selector);
    } else {
      return [];
    }
  },

  clone: jqLiteClone,

  triggerHandler: function(element, event, extraParameters) {

    var dummyEvent, eventFnsCopy, handlerArgs;
    var eventName = event.type || event;
    var expandoStore = jqLiteExpandoStore(element);
    var events = expandoStore && expandoStore.events;
    var eventFns = events && events[eventName];

    if (eventFns) {
      // Create a dummy event to pass to the handlers
      dummyEvent = {
        preventDefault: function() { this.defaultPrevented = true; },
        isDefaultPrevented: function() { return this.defaultPrevented === true; },
        stopImmediatePropagation: function() { this.immediatePropagationStopped = true; },
        isImmediatePropagationStopped: function() { return this.immediatePropagationStopped === true; },
        stopPropagation: noop,
        type: eventName,
        target: element
      };

      // If a custom event was provided then extend our dummy event with it
      if (event.type) {
        dummyEvent = extend(dummyEvent, event);
      }

      // Copy event handlers in case event handlers array is modified during execution.
      eventFnsCopy = shallowCopy(eventFns);
      handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];

      forEach(eventFnsCopy, function(fn) {
        if (!dummyEvent.isImmediatePropagationStopped()) {
          fn.apply(element, handlerArgs);
        }
      });
    }
  }
}, function(fn, name) {
  /**
   * chaining functions
   */
  JQLite.prototype[name] = function(arg1, arg2, arg3) {
    var value;

    for (var i = 0, ii = this.length; i < ii; i++) {
      if (isUndefined(value)) {
        value = fn(this[i], arg1, arg2, arg3);
        if (isDefined(value)) {
          // any function which returns a value needs to be wrapped
          value = jqLite(value);
        }
      } else {
        jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
      }
    }
    return isDefined(value) ? value : this;
  };

  // bind legacy bind/unbind to on/off
  JQLite.prototype.bind = JQLite.prototype.on;
  JQLite.prototype.unbind = JQLite.prototype.off;
});


// Provider for private $$jqLite service
function $$jqLiteProvider() {
  this.$get = function $$jqLite() {
    return extend(JQLite, {
      hasClass: function(node, classes) {
        if (node.attr) node = node[0];
        return jqLiteHasClass(node, classes);
      },
      addClass: function(node, classes) {
        if (node.attr) node = node[0];
        return jqLiteAddClass(node, classes);
      },
      removeClass: function(node, classes) {
        if (node.attr) node = node[0];
        return jqLiteRemoveClass(node, classes);
      }
    });
  };
}

/**
 * Computes a hash of an 'obj'.
 * Hash of a:
 *  string is string
 *  number is number as string
 *  object is either result of calling $$hashKey function on the object or uniquely generated id,
 *         that is also assigned to the $$hashKey property of the object.
 *
 * @param obj
 * @returns {string} hash string such that the same input will have the same hash string.
 *         The resulting string key is in 'type:hashKey' format.
 */
function hashKey(obj, nextUidFn) {
  var key = obj && obj.$$hashKey;

  if (key) {
    if (typeof key === 'function') {
      key = obj.$$hashKey();
    }
    return key;
  }

  var objType = typeof obj;
  if (objType == 'function' || (objType == 'object' && obj !== null)) {
    key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();
  } else {
    key = objType + ':' + obj;
  }

  return key;
}

/**
 * HashMap which can use objects as keys
 */
function HashMap(array, isolatedUid) {
  if (isolatedUid) {
    var uid = 0;
    this.nextUid = function() {
      return ++uid;
    };
  }
  forEach(array, this.put, this);
}
HashMap.prototype = {
  /**
   * Store key value pair
   * @param key key to store can be any type
   * @param value value to store can be any type
   */
  put: function(key, value) {
    this[hashKey(key, this.nextUid)] = value;
  },

  /**
   * @param key
   * @returns {Object} the value for the key
   */
  get: function(key) {
    return this[hashKey(key, this.nextUid)];
  },

  /**
   * Remove the key/value pair
   * @param key
   */
  remove: function(key) {
    var value = this[key = hashKey(key, this.nextUid)];
    delete this[key];
    return value;
  }
};

var $$HashMapProvider = [function() {
  this.$get = [function() {
    return HashMap;
  }];
}];

/**
 * @ngdoc function
 * @module ng
 * @name angular.injector
 * @kind function
 *
 * @description
 * Creates an injector object that can be used for retrieving services as well as for
 * dependency injection (see {@link guide/di dependency injection}).
 *
 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
 *     {@link angular.module}. The `ng` module must be explicitly added.
 * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which
 *     disallows argument name annotation inference.
 * @returns {injector} Injector object. See {@link auto.$injector $injector}.
 *
 * @example
 * Typical usage
 * ```js
 *   // create an injector
 *   var $injector = angular.injector(['ng']);
 *
 *   // use the injector to kick off your application
 *   // use the type inference to auto inject arguments, or use implicit injection
 *   $injector.invoke(function($rootScope, $compile, $document) {
 *     $compile($document)($rootScope);
 *     $rootScope.$digest();
 *   });
 * ```
 *
 * Sometimes you want to get access to the injector of a currently running Angular app
 * from outside Angular. Perhaps, you want to inject and compile some markup after the
 * application has been bootstrapped. You can do this using the extra `injector()` added
 * to JQuery/jqLite elements. See {@link angular.element}.
 *
 * *This is fairly rare but could be the case if a third party library is injecting the
 * markup.*
 *
 * In the following example a new block of HTML containing a `ng-controller`
 * directive is added to the end of the document body by JQuery. We then compile and link
 * it into the current AngularJS scope.
 *
 * ```js
 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
 * $(document.body).append($div);
 *
 * angular.element(document).injector().invoke(function($compile) {
 *   var scope = angular.element($div).scope();
 *   $compile($div)(scope);
 * });
 * ```
 */


/**
 * @ngdoc module
 * @name auto
 * @description
 *
 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
 */

var ARROW_ARG = /^([^\(]+?)=>/;
var FN_ARGS = /^[^\(]*\(\s*([^\)]*)\)/m;
var FN_ARG_SPLIT = /,/;
var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
var $injectorMinErr = minErr('$injector');

function extractArgs(fn) {
  var fnText = fn.toString().replace(STRIP_COMMENTS, ''),
      args = fnText.match(ARROW_ARG) || fnText.match(FN_ARGS);
  return args;
}

function anonFn(fn) {
  // For anonymous functions, showing at the very least the function signature can help in
  // debugging.
  var args = extractArgs(fn);
  if (args) {
    return 'function(' + (args[1] || '').replace(/[\s\r\n]+/, ' ') + ')';
  }
  return 'fn';
}

function annotate(fn, strictDi, name) {
  var $inject,
      argDecl,
      last;

  if (typeof fn === 'function') {
    if (!($inject = fn.$inject)) {
      $inject = [];
      if (fn.length) {
        if (strictDi) {
          if (!isString(name) || !name) {
            name = fn.name || anonFn(fn);
          }
          throw $injectorMinErr('strictdi',
            '{0} is not using explicit annotation and cannot be invoked in strict mode', name);
        }
        argDecl = extractArgs(fn);
        forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {
          arg.replace(FN_ARG, function(all, underscore, name) {
            $inject.push(name);
          });
        });
      }
      fn.$inject = $inject;
    }
  } else if (isArray(fn)) {
    last = fn.length - 1;
    assertArgFn(fn[last], 'fn');
    $inject = fn.slice(0, last);
  } else {
    assertArgFn(fn, 'fn', true);
  }
  return $inject;
}

///////////////////////////////////////

/**
 * @ngdoc service
 * @name $injector
 *
 * @description
 *
 * `$injector` is used to retrieve object instances as defined by
 * {@link auto.$provide provider}, instantiate types, invoke methods,
 * and load modules.
 *
 * The following always holds true:
 *
 * ```js
 *   var $injector = angular.injector();
 *   expect($injector.get('$injector')).toBe($injector);
 *   expect($injector.invoke(function($injector) {
 *     return $injector;
 *   })).toBe($injector);
 * ```
 *
 * # Injection Function Annotation
 *
 * JavaScript does not have annotations, and annotations are needed for dependency injection. The
 * following are all valid ways of annotating function with injection arguments and are equivalent.
 *
 * ```js
 *   // inferred (only works if code not minified/obfuscated)
 *   $injector.invoke(function(serviceA){});
 *
 *   // annotated
 *   function explicit(serviceA) {};
 *   explicit.$inject = ['serviceA'];
 *   $injector.invoke(explicit);
 *
 *   // inline
 *   $injector.invoke(['serviceA', function(serviceA){}]);
 * ```
 *
 * ## Inference
 *
 * In JavaScript calling `toString()` on a function returns the function definition. The definition
 * can then be parsed and the function arguments can be extracted. This method of discovering
 * annotations is disallowed when the injector is in strict mode.
 * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the
 * argument names.
 *
 * ## `$inject` Annotation
 * By adding an `$inject` property onto a function the injection parameters can be specified.
 *
 * ## Inline
 * As an array of injection names, where the last item in the array is the function to call.
 */

/**
 * @ngdoc method
 * @name $injector#get
 *
 * @description
 * Return an instance of the service.
 *
 * @param {string} name The name of the instance to retrieve.
 * @param {string=} caller An optional string to provide the origin of the function call for error messages.
 * @return {*} The instance.
 */

/**
 * @ngdoc method
 * @name $injector#invoke
 *
 * @description
 * Invoke the method and supply the method arguments from the `$injector`.
 *
 * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are
 *   injected according to the {@link guide/di $inject Annotation} rules.
 * @param {Object=} self The `this` for the invoked method.
 * @param {Object=} locals Optional object. If preset then any argument names are read from this
 *                         object first, before the `$injector` is consulted.
 * @returns {*} the value returned by the invoked `fn` function.
 */

/**
 * @ngdoc method
 * @name $injector#has
 *
 * @description
 * Allows the user to query if the particular service exists.
 *
 * @param {string} name Name of the service to query.
 * @returns {boolean} `true` if injector has given service.
 */

/**
 * @ngdoc method
 * @name $injector#instantiate
 * @description
 * Create a new instance of JS type. The method takes a constructor function, invokes the new
 * operator, and supplies all of the arguments to the constructor function as specified by the
 * constructor annotation.
 *
 * @param {Function} Type Annotated constructor function.
 * @param {Object=} locals Optional object. If preset then any argument names are read from this
 * object first, before the `$injector` is consulted.
 * @returns {Object} new instance of `Type`.
 */

/**
 * @ngdoc method
 * @name $injector#annotate
 *
 * @description
 * Returns an array of service names which the function is requesting for injection. This API is
 * used by the injector to determine which services need to be injected into the function when the
 * function is invoked. There are three ways in which the function can be annotated with the needed
 * dependencies.
 *
 * # Argument names
 *
 * The simplest form is to extract the dependencies from the arguments of the function. This is done
 * by converting the function into a string using `toString()` method and extracting the argument
 * names.
 * ```js
 *   // Given
 *   function MyController($scope, $route) {
 *     // ...
 *   }
 *
 *   // Then
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
 * ```
 *
 * You can disallow this method by using strict injection mode.
 *
 * This method does not work with code minification / obfuscation. For this reason the following
 * annotation strategies are supported.
 *
 * # The `$inject` property
 *
 * If a function has an `$inject` property and its value is an array of strings, then the strings
 * represent names of services to be injected into the function.
 * ```js
 *   // Given
 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
 *     // ...
 *   }
 *   // Define function dependencies
 *   MyController['$inject'] = ['$scope', '$route'];
 *
 *   // Then
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
 * ```
 *
 * # The array notation
 *
 * It is often desirable to inline Injected functions and that's when setting the `$inject` property
 * is very inconvenient. In these situations using the array notation to specify the dependencies in
 * a way that survives minification is a better choice:
 *
 * ```js
 *   // We wish to write this (not minification / obfuscation safe)
 *   injector.invoke(function($compile, $rootScope) {
 *     // ...
 *   });
 *
 *   // We are forced to write break inlining
 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
 *     // ...
 *   };
 *   tmpFn.$inject = ['$compile', '$rootScope'];
 *   injector.invoke(tmpFn);
 *
 *   // To better support inline function the inline annotation is supported
 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
 *     // ...
 *   }]);
 *
 *   // Therefore
 *   expect(injector.annotate(
 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
 *    ).toEqual(['$compile', '$rootScope']);
 * ```
 *
 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
 * be retrieved as described above.
 *
 * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.
 *
 * @returns {Array.<string>} The names of the services which the function requires.
 */




/**
 * @ngdoc service
 * @name $provide
 *
 * @description
 *
 * The {@link auto.$provide $provide} service has a number of methods for registering components
 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
 * {@link angular.Module}.
 *
 * An Angular **service** is a singleton object created by a **service factory**.  These **service
 * factories** are functions which, in turn, are created by a **service provider**.
 * The **service providers** are constructor functions. When instantiated they must contain a
 * property called `$get`, which holds the **service factory** function.
 *
 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
 * correct **service provider**, instantiating it and then calling its `$get` **service factory**
 * function to get the instance of the **service**.
 *
 * Often services have no configuration options and there is no need to add methods to the service
 * provider.  The provider will be no more than a constructor function with a `$get` property. For
 * these cases the {@link auto.$provide $provide} service has additional helper methods to register
 * services without specifying a provider.
 *
 * * {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the
 *     {@link auto.$injector $injector}
 * * {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by
 *     providers and services.
 * * {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by
 *     services, not providers.
 * * {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,
 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
 *     given factory function.
 * * {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`
 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
 *      a new object using the given constructor function.
 *
 * See the individual methods for more information and examples.
 */

/**
 * @ngdoc method
 * @name $provide#provider
 * @description
 *
 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
 * are constructor functions, whose instances are responsible for "providing" a factory for a
 * service.
 *
 * Service provider names start with the name of the service they provide followed by `Provider`.
 * For example, the {@link ng.$log $log} service has a provider called
 * {@link ng.$logProvider $logProvider}.
 *
 * Service provider objects can have additional methods which allow configuration of the provider
 * and its service. Importantly, you can configure what kind of service is created by the `$get`
 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
 * method {@link ng.$logProvider#debugEnabled debugEnabled}
 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
 * console or not.
 *
 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
                        'Provider'` key.
 * @param {(Object|function())} provider If the provider is:
 *
 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
 *   - `Constructor`: a new instance of the provider will be created using
 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
 *
 * @returns {Object} registered provider instance

 * @example
 *
 * The following example shows how to create a simple event tracking service and register it using
 * {@link auto.$provide#provider $provide.provider()}.
 *
 * ```js
 *  // Define the SyncronyPlatform provider
 *  function SyncronyPlatformProvider() {
 *    var trackingUrl = '/track';
 *
 *    // A provider method for configuring where the tracked events should been saved
 *    this.setTrackingUrl = function(url) {
 *      trackingUrl = url;
 *    };
 *
 *    // The service factory function
 *    this.$get = ['$http', function($http) {
 *      var trackedEvents = {};
 *      return {
 *        // Call this to track an event
 *        event: function(event) {
 *          var count = trackedEvents[event] || 0;
 *          count += 1;
 *          trackedEvents[event] = count;
 *          return count;
 *        },
 *        // Call this to save the tracked events to the trackingUrl
 *        save: function() {
 *          $http.post(trackingUrl, trackedEvents);
 *        }
 *      };
 *    }];
 *  }
 *
 *  describe('SyncronyPlatform', function() {
 *    var postSpy;
 *
 *    beforeEach(module(function($provide) {
 *      // Register the SyncronyPlatform provider
 *      $provide.provider('SyncronyPlatform', SyncronyPlatformProvider);
 *    }));
 *
 *    beforeEach(module(function(SyncronyPlatformProvider) {
 *      // Configure SyncronyPlatform provider
 *      SyncronyPlatformProvider.setTrackingUrl('/custom-track');
 *    }));
 *
 *    it('tracks events', inject(function(SyncronyPlatform) {
 *      expect(SyncronyPlatform.event('login')).toEqual(1);
 *      expect(SyncronyPlatform.event('login')).toEqual(2);
 *    }));
 *
 *    it('saves to the tracking url', inject(function(SyncronyPlatform, $http) {
 *      postSpy = spyOn($http, 'post');
 *      SyncronyPlatform.event('login');
 *      SyncronyPlatform.save();
 *      expect(postSpy).toHaveBeenCalled();
 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
 *    }));
 *  });
 * ```
 */

/**
 * @ngdoc method
 * @name $provide#factory
 * @description
 *
 * Register a **service factory**, which will be called to return the service instance.
 * This is short for registering a service where its provider consists of only a `$get` property,
 * which is the given service factory function.
 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
 * configure your service in a provider.
 *
 * @param {string} name The name of the instance.
 * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.
 *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here is an example of registering a service
 * ```js
 *   $provide.factory('ping', ['$http', function($http) {
 *     return function ping() {
 *       return $http.send('/ping');
 *     };
 *   }]);
 * ```
 * You would then inject and use this service like this:
 * ```js
 *   someModule.controller('Ctrl', ['ping', function(ping) {
 *     ping();
 *   }]);
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#service
 * @description
 *
 * Register a **service constructor**, which will be invoked with `new` to create the service
 * instance.
 * This is short for registering a service where its provider's `$get` property is a factory
 * function that returns an instance instantiated by the injector from the service constructor
 * function.
 *
 * Internally it looks a bit like this:
 *
 * ```
 * {
 *   $get: function() {
 *     return $injector.instantiate(constructor);
 *   }
 * }
 * ```
 *
 *
 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
 * as a type/class.
 *
 * @param {string} name The name of the instance.
 * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)
 *     that will be instantiated.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here is an example of registering a service using
 * {@link auto.$provide#service $provide.service(class)}.
 * ```js
 *   var Ping = function($http) {
 *     this.$http = $http;
 *   };
 *
 *   Ping.$inject = ['$http'];
 *
 *   Ping.prototype.send = function() {
 *     return this.$http.get('/ping');
 *   };
 *   $provide.service('ping', Ping);
 * ```
 * You would then inject and use this service like this:
 * ```js
 *   someModule.controller('Ctrl', ['ping', function(ping) {
 *     ping.send();
 *   }]);
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#value
 * @description
 *
 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
 * number, an array, an object or a function.  This is short for registering a service where its
 * provider's `$get` property is a factory function that takes no arguments and returns the **value
 * service**.
 *
 * Value services are similar to constant services, except that they cannot be injected into a
 * module configuration function (see {@link angular.Module#config}) but they can be overridden by
 * an Angular
 * {@link auto.$provide#decorator decorator}.
 *
 * @param {string} name The name of the instance.
 * @param {*} value The value.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here are some examples of creating value services.
 * ```js
 *   $provide.value('ADMIN_USER', 'admin');
 *
 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
 *
 *   $provide.value('halfOf', function(value) {
 *     return value / 2;
 *   });
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#constant
 * @description
 *
 * Register a **constant service**, such as a string, a number, an array, an object or a function,
 * with the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be
 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
 * be overridden by an Angular {@link auto.$provide#decorator decorator}.
 *
 * @param {string} name The name of the constant.
 * @param {*} value The constant value.
 * @returns {Object} registered instance
 *
 * @example
 * Here a some examples of creating constants:
 * ```js
 *   $provide.constant('SHARD_HEIGHT', 306);
 *
 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
 *
 *   $provide.constant('double', function(value) {
 *     return value * 2;
 *   });
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#decorator
 * @description
 *
 * Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator
 * intercepts the creation of a service, allowing it to override or modify the behavior of the
 * service. The object returned by the decorator may be the original service, or a new service
 * object which replaces or wraps and delegates to the original service.
 *
 * @param {string} name The name of the service to decorate.
 * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be
 *    instantiated and should return the decorated service instance. The function is called using
 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
 *    Local injection arguments:
 *
 *    * `$delegate` - The original service instance, which can be monkey patched, configured,
 *      decorated or delegated to.
 *
 * @example
 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
 * calls to {@link ng.$log#error $log.warn()}.
 * ```js
 *   $provide.decorator('$log', ['$delegate', function($delegate) {
 *     $delegate.warn = $delegate.error;
 *     return $delegate;
 *   }]);
 * ```
 */


function createInjector(modulesToLoad, strictDi) {
  strictDi = (strictDi === true);
  var INSTANTIATING = {},
      providerSuffix = 'Provider',
      path = [],
      loadedModules = new HashMap([], true),
      providerCache = {
        $provide: {
            provider: supportObject(provider),
            factory: supportObject(factory),
            service: supportObject(service),
            value: supportObject(value),
            constant: supportObject(constant),
            decorator: decorator
          }
      },
      providerInjector = (providerCache.$injector =
          createInternalInjector(providerCache, function(serviceName, caller) {
            if (angular.isString(caller)) {
              path.push(caller);
            }
            throw $injectorMinErr('unpr', "Unknown provider: {0}", path.join(' <- '));
          })),
      instanceCache = {},
      protoInstanceInjector =
          createInternalInjector(instanceCache, function(serviceName, caller) {
            var provider = providerInjector.get(serviceName + providerSuffix, caller);
            return instanceInjector.invoke(
                provider.$get, provider, undefined, serviceName);
          }),
      instanceInjector = protoInstanceInjector;

  providerCache['$injector' + providerSuffix] = { $get: valueFn(protoInstanceInjector) };
  var runBlocks = loadModules(modulesToLoad);
  instanceInjector = protoInstanceInjector.get('$injector');
  instanceInjector.strictDi = strictDi;
  forEach(runBlocks, function(fn) { if (fn) instanceInjector.invoke(fn); });

  return instanceInjector;

  ////////////////////////////////////
  // $provider
  ////////////////////////////////////

  function supportObject(delegate) {
    return function(key, value) {
      if (isObject(key)) {
        forEach(key, reverseParams(delegate));
      } else {
        return delegate(key, value);
      }
    };
  }

  function provider(name, provider_) {
    assertNotHasOwnProperty(name, 'service');
    if (isFunction(provider_) || isArray(provider_)) {
      provider_ = providerInjector.instantiate(provider_);
    }
    if (!provider_.$get) {
      throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);
    }
    return providerCache[name + providerSuffix] = provider_;
  }

  function enforceReturnValue(name, factory) {
    return function enforcedReturnValue() {
      var result = instanceInjector.invoke(factory, this);
      if (isUndefined(result)) {
        throw $injectorMinErr('undef', "Provider '{0}' must return a value from $get factory method.", name);
      }
      return result;
    };
  }

  function factory(name, factoryFn, enforce) {
    return provider(name, {
      $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn
    });
  }

  function service(name, constructor) {
    return factory(name, ['$injector', function($injector) {
      return $injector.instantiate(constructor);
    }]);
  }

  function value(name, val) { return factory(name, valueFn(val), false); }

  function constant(name, value) {
    assertNotHasOwnProperty(name, 'constant');
    providerCache[name] = value;
    instanceCache[name] = value;
  }

  function decorator(serviceName, decorFn) {
    var origProvider = providerInjector.get(serviceName + providerSuffix),
        orig$get = origProvider.$get;

    origProvider.$get = function() {
      var origInstance = instanceInjector.invoke(orig$get, origProvider);
      return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});
    };
  }

  ////////////////////////////////////
  // Module Loading
  ////////////////////////////////////
  function loadModules(modulesToLoad) {
    assertArg(isUndefined(modulesToLoad) || isArray(modulesToLoad), 'modulesToLoad', 'not an array');
    var runBlocks = [], moduleFn;
    forEach(modulesToLoad, function(module) {
      if (loadedModules.get(module)) return;
      loadedModules.put(module, true);

      function runInvokeQueue(queue) {
        var i, ii;
        for (i = 0, ii = queue.length; i < ii; i++) {
          var invokeArgs = queue[i],
              provider = providerInjector.get(invokeArgs[0]);

          provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
        }
      }

      try {
        if (isString(module)) {
          moduleFn = angularModule(module);
          runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);
          runInvokeQueue(moduleFn._invokeQueue);
          runInvokeQueue(moduleFn._configBlocks);
        } else if (isFunction(module)) {
            runBlocks.push(providerInjector.invoke(module));
        } else if (isArray(module)) {
            runBlocks.push(providerInjector.invoke(module));
        } else {
          assertArgFn(module, 'module');
        }
      } catch (e) {
        if (isArray(module)) {
          module = module[module.length - 1];
        }
        if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {
          // Safari & FF's stack traces don't contain error.message content
          // unlike those of Chrome and IE
          // So if stack doesn't contain message, we create a new string that contains both.
          // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
          /* jshint -W022 */
          e = e.message + '\n' + e.stack;
        }
        throw $injectorMinErr('modulerr', "Failed to instantiate module {0} due to:\n{1}",
                  module, e.stack || e.message || e);
      }
    });
    return runBlocks;
  }

  ////////////////////////////////////
  // internal Injector
  ////////////////////////////////////

  function createInternalInjector(cache, factory) {

    function getService(serviceName, caller) {
      if (cache.hasOwnProperty(serviceName)) {
        if (cache[serviceName] === INSTANTIATING) {
          throw $injectorMinErr('cdep', 'Circular dependency found: {0}',
                    serviceName + ' <- ' + path.join(' <- '));
        }
        return cache[serviceName];
      } else {
        try {
          path.unshift(serviceName);
          cache[serviceName] = INSTANTIATING;
          return cache[serviceName] = factory(serviceName, caller);
        } catch (err) {
          if (cache[serviceName] === INSTANTIATING) {
            delete cache[serviceName];
          }
          throw err;
        } finally {
          path.shift();
        }
      }
    }


    function injectionArgs(fn, locals, serviceName) {
      var args = [],
          $inject = createInjector.$$annotate(fn, strictDi, serviceName);

      for (var i = 0, length = $inject.length; i < length; i++) {
        var key = $inject[i];
        if (typeof key !== 'string') {
          throw $injectorMinErr('itkn',
                  'Incorrect injection token! Expected service name as string, got {0}', key);
        }
        args.push(locals && locals.hasOwnProperty(key) ? locals[key] :
                                                         getService(key, serviceName));
      }
      return args;
    }

    function isClass(func) {
      // IE 9-11 do not support classes and IE9 leaks with the code below.
      if (msie <= 11) {
        return false;
      }
      // Workaround for MS Edge.
      // Check https://connect.microsoft.com/IE/Feedback/Details/2211653
      return typeof func === 'function'
        && /^(?:class\s|constructor\()/.test(Function.prototype.toString.call(func));
    }

    function invoke(fn, self, locals, serviceName) {
      if (typeof locals === 'string') {
        serviceName = locals;
        locals = null;
      }

      var args = injectionArgs(fn, locals, serviceName);
      if (isArray(fn)) {
        fn = fn[fn.length - 1];
      }

      if (!isClass(fn)) {
        // http://jsperf.com/angularjs-invoke-apply-vs-switch
        // #5388
        return fn.apply(self, args);
      } else {
        args.unshift(null);
        return new (Function.prototype.bind.apply(fn, args))();
      }
    }


    function instantiate(Type, locals, serviceName) {
      // Check if Type is annotated and use just the given function at n-1 as parameter
      // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
      var ctor = (isArray(Type) ? Type[Type.length - 1] : Type);
      var args = injectionArgs(Type, locals, serviceName);
      // Empty object at position 0 is ignored for invocation with `new`, but required.
      args.unshift(null);
      return new (Function.prototype.bind.apply(ctor, args))();
    }


    return {
      invoke: invoke,
      instantiate: instantiate,
      get: getService,
      annotate: createInjector.$$annotate,
      has: function(name) {
        return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
      }
    };
  }
}

createInjector.$$annotate = annotate;

/**
 * @ngdoc provider
 * @name $anchorScrollProvider
 *
 * @description
 * Use `$anchorScrollProvider` to disable automatic scrolling whenever
 * {@link ng.$location#hash $location.hash()} changes.
 */
function $AnchorScrollProvider() {

  var autoScrollingEnabled = true;

  /**
   * @ngdoc method
   * @name $anchorScrollProvider#disableAutoScrolling
   *
   * @description
   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to
   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />
   * Use this method to disable automatic scrolling.
   *
   * If automatic scrolling is disabled, one must explicitly call
   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the
   * current hash.
   */
  this.disableAutoScrolling = function() {
    autoScrollingEnabled = false;
  };

  /**
   * @ngdoc service
   * @name $anchorScroll
   * @kind function
   * @requires $window
   * @requires $location
   * @requires $rootScope
   *
   * @description
   * When called, it scrolls to the element related to the specified `hash` or (if omitted) to the
   * current value of {@link ng.$location#hash $location.hash()}, according to the rules specified
   * in the
   * [HTML5 spec](http://www.w3.org/html/wg/drafts/html/master/browsers.html#the-indicated-part-of-the-document).
   *
   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to
   * match any anchor whenever it changes. This can be disabled by calling
   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.
   *
   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a
   * vertical scroll-offset (either fixed or dynamic).
   *
   * @param {string=} hash The hash specifying the element to scroll to. If omitted, the value of
   *                       {@link ng.$location#hash $location.hash()} will be used.
   *
   * @property {(number|function|jqLite)} yOffset
   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed
   * positioned elements at the top of the page, such as navbars, headers etc.
   *
   * `yOffset` can be specified in various ways:
   * - **number**: A fixed number of pixels to be used as offset.<br /><br />
   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return
   *   a number representing the offset (in pixels).<br /><br />
   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from
   *   the top of the page to the element's bottom will be used as offset.<br />
   *   **Note**: The element will be taken into account only as long as its `position` is set to
   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust
   *   their height and/or positioning according to the viewport's size.
   *
   * <br />
   * <div class="alert alert-warning">
   * In order for `yOffset` to work properly, scrolling should take place on the document's root and
   * not some child element.
   * </div>
   *
   * @example
     <example module="anchorScrollExample">
       <file name="index.html">
         <div id="scrollArea" ng-controller="ScrollController">
           <a ng-click="gotoBottom()">Go to bottom</a>
           <a id="bottom"></a> You're at the bottom!
         </div>
       </file>
       <file name="script.js">
         angular.module('anchorScrollExample', [])
           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',
             function ($scope, $location, $anchorScroll) {
               $scope.gotoBottom = function() {
                 // set the location.hash to the id of
                 // the element you wish to scroll to.
                 $location.hash('bottom');

                 // call $anchorScroll()
                 $anchorScroll();
               };
             }]);
       </file>
       <file name="style.css">
         #scrollArea {
           height: 280px;
           overflow: auto;
         }

         #bottom {
           display: block;
           margin-top: 2000px;
         }
       </file>
     </example>
   *
   * <hr />
   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).
   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.
   *
   * @example
     <example module="anchorScrollOffsetExample">
       <file name="index.html">
         <div class="fixed-header" ng-controller="headerCtrl">
           <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">
             Go to anchor {{x}}
           </a>
         </div>
         <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">
           Anchor {{x}} of 5
         </div>
       </file>
       <file name="script.js">
         angular.module('anchorScrollOffsetExample', [])
           .run(['$anchorScroll', function($anchorScroll) {
             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels
           }])
           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',
             function ($anchorScroll, $location, $scope) {
               $scope.gotoAnchor = function(x) {
                 var newHash = 'anchor' + x;
                 if ($location.hash() !== newHash) {
                   // set the $location.hash to `newHash` and
                   // $anchorScroll will automatically scroll to it
                   $location.hash('anchor' + x);
                 } else {
                   // call $anchorScroll() explicitly,
                   // since $location.hash hasn't changed
                   $anchorScroll();
                 }
               };
             }
           ]);
       </file>
       <file name="style.css">
         body {
           padding-top: 50px;
         }

         .anchor {
           border: 2px dashed DarkOrchid;
           padding: 10px 10px 200px 10px;
         }

         .fixed-header {
           background-color: rgba(0, 0, 0, 0.2);
           height: 50px;
           position: fixed;
           top: 0; left: 0; right: 0;
         }

         .fixed-header > a {
           display: inline-block;
           margin: 5px 15px;
         }
       </file>
     </example>
   */
  this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {
    var document = $window.document;

    // Helper function to get first anchor from a NodeList
    // (using `Array#some()` instead of `angular#forEach()` since it's more performant
    //  and working in all supported browsers.)
    function getFirstAnchor(list) {
      var result = null;
      Array.prototype.some.call(list, function(element) {
        if (nodeName_(element) === 'a') {
          result = element;
          return true;
        }
      });
      return result;
    }

    function getYOffset() {

      var offset = scroll.yOffset;

      if (isFunction(offset)) {
        offset = offset();
      } else if (isElement(offset)) {
        var elem = offset[0];
        var style = $window.getComputedStyle(elem);
        if (style.position !== 'fixed') {
          offset = 0;
        } else {
          offset = elem.getBoundingClientRect().bottom;
        }
      } else if (!isNumber(offset)) {
        offset = 0;
      }

      return offset;
    }

    function scrollTo(elem) {
      if (elem) {
        elem.scrollIntoView();

        var offset = getYOffset();

        if (offset) {
          // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.
          // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the
          // top of the viewport.
          //
          // IF the number of pixels from the top of `elem` to the end of the page's content is less
          // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some
          // way down the page.
          //
          // This is often the case for elements near the bottom of the page.
          //
          // In such cases we do not need to scroll the whole `offset` up, just the difference between
          // the top of the element and the offset, which is enough to align the top of `elem` at the
          // desired position.
          var elemTop = elem.getBoundingClientRect().top;
          $window.scrollBy(0, elemTop - offset);
        }
      } else {
        $window.scrollTo(0, 0);
      }
    }

    function scroll(hash) {
      hash = isString(hash) ? hash : $location.hash();
      var elm;

      // empty hash, scroll to the top of the page
      if (!hash) scrollTo(null);

      // element with given id
      else if ((elm = document.getElementById(hash))) scrollTo(elm);

      // first anchor with given name :-D
      else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) scrollTo(elm);

      // no element and hash == 'top', scroll to the top of the page
      else if (hash === 'top') scrollTo(null);
    }

    // does not scroll when user clicks on anchor link that is currently on
    // (no url change, no $location.hash() change), browser native does scroll
    if (autoScrollingEnabled) {
      $rootScope.$watch(function autoScrollWatch() {return $location.hash();},
        function autoScrollWatchAction(newVal, oldVal) {
          // skip the initial scroll if $location.hash is empty
          if (newVal === oldVal && newVal === '') return;

          jqLiteDocumentLoaded(function() {
            $rootScope.$evalAsync(scroll);
          });
        });
    }

    return scroll;
  }];
}

var $animateMinErr = minErr('$animate');
var ELEMENT_NODE = 1;
var NG_ANIMATE_CLASSNAME = 'ng-animate';

function mergeClasses(a,b) {
  if (!a && !b) return '';
  if (!a) return b;
  if (!b) return a;
  if (isArray(a)) a = a.join(' ');
  if (isArray(b)) b = b.join(' ');
  return a + ' ' + b;
}

function extractElementNode(element) {
  for (var i = 0; i < element.length; i++) {
    var elm = element[i];
    if (elm.nodeType === ELEMENT_NODE) {
      return elm;
    }
  }
}

function splitClasses(classes) {
  if (isString(classes)) {
    classes = classes.split(' ');
  }

  // Use createMap() to prevent class assumptions involving property names in
  // Object.prototype
  var obj = createMap();
  forEach(classes, function(klass) {
    // sometimes the split leaves empty string values
    // incase extra spaces were applied to the options
    if (klass.length) {
      obj[klass] = true;
    }
  });
  return obj;
}

// if any other type of options value besides an Object value is
// passed into the $animate.method() animation then this helper code
// will be run which will ignore it. While this patch is not the
// greatest solution to this, a lot of existing plugins depend on
// $animate to either call the callback (< 1.2) or return a promise
// that can be changed. This helper function ensures that the options
// are wiped clean incase a callback function is provided.
function prepareAnimateOptions(options) {
  return isObject(options)
      ? options
      : {};
}

var $$CoreAnimateJsProvider = function() {
  this.$get = function() {};
};

// this is prefixed with Core since it conflicts with
// the animateQueueProvider defined in ngAnimate/animateQueue.js
var $$CoreAnimateQueueProvider = function() {
  var postDigestQueue = new HashMap();
  var postDigestElements = [];

  this.$get = ['$$AnimateRunner', '$rootScope',
       function($$AnimateRunner,   $rootScope) {
    return {
      enabled: noop,
      on: noop,
      off: noop,
      pin: noop,

      push: function(element, event, options, domOperation) {
        domOperation        && domOperation();

        options = options || {};
        options.from        && element.css(options.from);
        options.to          && element.css(options.to);

        if (options.addClass || options.removeClass) {
          addRemoveClassesPostDigest(element, options.addClass, options.removeClass);
        }

        var runner = new $$AnimateRunner(); // jshint ignore:line

        // since there are no animations to run the runner needs to be
        // notified that the animation call is complete.
        runner.complete();
        return runner;
      }
    };


    function updateData(data, classes, value) {
      var changed = false;
      if (classes) {
        classes = isString(classes) ? classes.split(' ') :
                  isArray(classes) ? classes : [];
        forEach(classes, function(className) {
          if (className) {
            changed = true;
            data[className] = value;
          }
        });
      }
      return changed;
    }

    function handleCSSClassChanges() {
      forEach(postDigestElements, function(element) {
        var data = postDigestQueue.get(element);
        if (data) {
          var existing = splitClasses(element.attr('class'));
          var toAdd = '';
          var toRemove = '';
          forEach(data, function(status, className) {
            var hasClass = !!existing[className];
            if (status !== hasClass) {
              if (status) {
                toAdd += (toAdd.length ? ' ' : '') + className;
              } else {
                toRemove += (toRemove.length ? ' ' : '') + className;
              }
            }
          });

          forEach(element, function(elm) {
            toAdd    && jqLiteAddClass(elm, toAdd);
            toRemove && jqLiteRemoveClass(elm, toRemove);
          });
          postDigestQueue.remove(element);
        }
      });
      postDigestElements.length = 0;
    }


    function addRemoveClassesPostDigest(element, add, remove) {
      var data = postDigestQueue.get(element) || {};

      var classesAdded = updateData(data, add, true);
      var classesRemoved = updateData(data, remove, false);

      if (classesAdded || classesRemoved) {

        postDigestQueue.put(element, data);
        postDigestElements.push(element);

        if (postDigestElements.length === 1) {
          $rootScope.$$postDigest(handleCSSClassChanges);
        }
      }
    }
  }];
};

/**
 * @ngdoc provider
 * @name $animateProvider
 *
 * @description
 * Default implementation of $animate that doesn't perform any animations, instead just
 * synchronously performs DOM updates and resolves the returned runner promise.
 *
 * In order to enable animations the `ngAnimate` module has to be loaded.
 *
 * To see the functional implementation check out `src/ngAnimate/animate.js`.
 */
var $AnimateProvider = ['$provide', function($provide) {
  var provider = this;

  this.$$registeredAnimations = Object.create(null);

   /**
   * @ngdoc method
   * @name $animateProvider#register
   *
   * @description
   * Registers a new injectable animation factory function. The factory function produces the
   * animation object which contains callback functions for each event that is expected to be
   * animated.
   *
   *   * `eventFn`: `function(element, ... , doneFunction, options)`
   *   The element to animate, the `doneFunction` and the options fed into the animation. Depending
   *   on the type of animation additional arguments will be injected into the animation function. The
   *   list below explains the function signatures for the different animation methods:
   *
   *   - setClass: function(element, addedClasses, removedClasses, doneFunction, options)
   *   - addClass: function(element, addedClasses, doneFunction, options)
   *   - removeClass: function(element, removedClasses, doneFunction, options)
   *   - enter, leave, move: function(element, doneFunction, options)
   *   - animate: function(element, fromStyles, toStyles, doneFunction, options)
   *
   *   Make sure to trigger the `doneFunction` once the animation is fully complete.
   *
   * ```js
   *   return {
   *     //enter, leave, move signature
   *     eventFn : function(element, done, options) {
   *       //code to run the animation
   *       //once complete, then run done()
   *       return function endFunction(wasCancelled) {
   *         //code to cancel the animation
   *       }
   *     }
   *   }
   * ```
   *
   * @param {string} name The name of the animation (this is what the class-based CSS value will be compared to).
   * @param {Function} factory The factory function that will be executed to return the animation
   *                           object.
   */
  this.register = function(name, factory) {
    if (name && name.charAt(0) !== '.') {
      throw $animateMinErr('notcsel', "Expecting class selector starting with '.' got '{0}'.", name);
    }

    var key = name + '-animation';
    provider.$$registeredAnimations[name.substr(1)] = key;
    $provide.factory(key, factory);
  };

  /**
   * @ngdoc method
   * @name $animateProvider#classNameFilter
   *
   * @description
   * Sets and/or returns the CSS class regular expression that is checked when performing
   * an animation. Upon bootstrap the classNameFilter value is not set at all and will
   * therefore enable $animate to attempt to perform an animation on any element that is triggered.
   * When setting the `classNameFilter` value, animations will only be performed on elements
   * that successfully match the filter expression. This in turn can boost performance
   * for low-powered devices as well as applications containing a lot of structural operations.
   * @param {RegExp=} expression The className expression which will be checked against all animations
   * @return {RegExp} The current CSS className expression value. If null then there is no expression value
   */
  this.classNameFilter = function(expression) {
    if (arguments.length === 1) {
      this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;
      if (this.$$classNameFilter) {
        var reservedRegex = new RegExp("(\\s+|\\/)" + NG_ANIMATE_CLASSNAME + "(\\s+|\\/)");
        if (reservedRegex.test(this.$$classNameFilter.toString())) {
          throw $animateMinErr('nongcls','$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.', NG_ANIMATE_CLASSNAME);

        }
      }
    }
    return this.$$classNameFilter;
  };

  this.$get = ['$$animateQueue', function($$animateQueue) {
    function domInsert(element, parentElement, afterElement) {
      // if for some reason the previous element was removed
      // from the dom sometime before this code runs then let's
      // just stick to using the parent element as the anchor
      if (afterElement) {
        var afterNode = extractElementNode(afterElement);
        if (afterNode && !afterNode.parentNode && !afterNode.previousElementSibling) {
          afterElement = null;
        }
      }
      afterElement ? afterElement.after(element) : parentElement.prepend(element);
    }

    /**
     * @ngdoc service
     * @name $animate
     * @description The $animate service exposes a series of DOM utility methods that provide support
     * for animation hooks. The default behavior is the application of DOM operations, however,
     * when an animation is detected (and animations are enabled), $animate will do the heavy lifting
     * to ensure that animation runs with the triggered DOM operation.
     *
     * By default $animate doesn't trigger any animations. This is because the `ngAnimate` module isn't
     * included and only when it is active then the animation hooks that `$animate` triggers will be
     * functional. Once active then all structural `ng-` directives will trigger animations as they perform
     * their DOM-related operations (enter, leave and move). Other directives such as `ngClass`,
     * `ngShow`, `ngHide` and `ngMessages` also provide support for animations.
     *
     * It is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.
     *
     * To learn more about enabling animation support, click here to visit the
     * {@link ngAnimate ngAnimate module page}.
     */
    return {
      // we don't call it directly since non-existant arguments may
      // be interpreted as null within the sub enabled function

      /**
       *
       * @ngdoc method
       * @name $animate#on
       * @kind function
       * @description Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...)
       *    has fired on the given element or among any of its children. Once the listener is fired, the provided callback
       *    is fired with the following params:
       *
       * ```js
       * $animate.on('enter', container,
       *    function callback(element, phase) {
       *      // cool we detected an enter animation within the container
       *    }
       * );
       * ```
       *
       * @param {string} event the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)
       * @param {DOMElement} container the container element that will capture each of the animation events that are fired on itself
       *     as well as among its children
       * @param {Function} callback the callback function that will be fired when the listener is triggered
       *
       * The arguments present in the callback function are:
       * * `element` - The captured DOM element that the animation was fired on.
       * * `phase` - The phase of the animation. The two possible phases are **start** (when the animation starts) and **close** (when it ends).
       */
      on: $$animateQueue.on,

      /**
       *
       * @ngdoc method
       * @name $animate#off
       * @kind function
       * @description Deregisters an event listener based on the event which has been associated with the provided element. This method
       * can be used in three different ways depending on the arguments:
       *
       * ```js
       * // remove all the animation event listeners listening for `enter`
       * $animate.off('enter');
       *
       * // remove all the animation event listeners listening for `enter` on the given element and its children
       * $animate.off('enter', container);
       *
       * // remove the event listener function provided by `callback` that is set
       * // to listen for `enter` on the given `container` as well as its children
       * $animate.off('enter', container, callback);
       * ```
       *
       * @param {string} event the animation event (e.g. enter, leave, move, addClass, removeClass, etc...)
       * @param {DOMElement=} container the container element the event listener was placed on
       * @param {Function=} callback the callback function that was registered as the listener
       */
      off: $$animateQueue.off,

      /**
       * @ngdoc method
       * @name $animate#pin
       * @kind function
       * @description Associates the provided element with a host parent element to allow the element to be animated even if it exists
       *    outside of the DOM structure of the Angular application. By doing so, any animation triggered via `$animate` can be issued on the
       *    element despite being outside the realm of the application or within another application. Say for example if the application
       *    was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated
       *    as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind
       *    that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.
       *
       *    Note that this feature is only active when the `ngAnimate` module is used.
       *
       * @param {DOMElement} element the external element that will be pinned
       * @param {DOMElement} parentElement the host parent element that will be associated with the external element
       */
      pin: $$animateQueue.pin,

      /**
       *
       * @ngdoc method
       * @name $animate#enabled
       * @kind function
       * @description Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This
       * function can be called in four ways:
       *
       * ```js
       * // returns true or false
       * $animate.enabled();
       *
       * // changes the enabled state for all animations
       * $animate.enabled(false);
       * $animate.enabled(true);
       *
       * // returns true or false if animations are enabled for an element
       * $animate.enabled(element);
       *
       * // changes the enabled state for an element and its children
       * $animate.enabled(element, true);
       * $animate.enabled(element, false);
       * ```
       *
       * @param {DOMElement=} element the element that will be considered for checking/setting the enabled state
       * @param {boolean=} enabled whether or not the animations will be enabled for the element
       *
       * @return {boolean} whether or not animations are enabled
       */
      enabled: $$animateQueue.enabled,

      /**
       * @ngdoc method
       * @name $animate#cancel
       * @kind function
       * @description Cancels the provided animation.
       *
       * @param {Promise} animationPromise The animation promise that is returned when an animation is started.
       */
      cancel: function(runner) {
        runner.end && runner.end();
      },

      /**
       *
       * @ngdoc method
       * @name $animate#enter
       * @kind function
       * @description Inserts the element into the DOM either after the `after` element (if provided) or
       *   as the first child within the `parent` element and then triggers an animation.
       *   A promise is returned that will be resolved during the next digest once the animation
       *   has completed.
       *
       * @param {DOMElement} element the element which will be inserted into the DOM
       * @param {DOMElement} parent the parent element which will append the element as
       *   a child (so long as the after element is not present)
       * @param {DOMElement=} after the sibling element after which the element will be appended
       * @param {object=} options an optional collection of options/styles that will be applied to the element
       *
       * @return {Promise} the animation callback promise
       */
      enter: function(element, parent, after, options) {
        parent = parent && jqLite(parent);
        after = after && jqLite(after);
        parent = parent || after.parent();
        domInsert(element, parent, after);
        return $$animateQueue.push(element, 'enter', prepareAnimateOptions(options));
      },

      /**
       *
       * @ngdoc method
       * @name $animate#move
       * @kind function
       * @description Inserts (moves) the element into its new position in the DOM either after
       *   the `after` element (if provided) or as the first child within the `parent` element
       *   and then triggers an animation. A promise is returned that will be resolved
       *   during the next digest once the animation has completed.
       *
       * @param {DOMElement} element the element which will be moved into the new DOM position
       * @param {DOMElement} parent the parent element which will append the element as
       *   a child (so long as the after element is not present)
       * @param {DOMElement=} after the sibling element after which the element will be appended
       * @param {object=} options an optional collection of options/styles that will be applied to the element
       *
       * @return {Promise} the animation callback promise
       */
      move: function(element, parent, after, options) {
        parent = parent && jqLite(parent);
        after = after && jqLite(after);
        parent = parent || after.parent();
        domInsert(element, parent, after);
        return $$animateQueue.push(element, 'move', prepareAnimateOptions(options));
      },

      /**
       * @ngdoc method
       * @name $animate#leave
       * @kind function
       * @description Triggers an animation and then removes the element from the DOM.
       * When the function is called a promise is returned that will be resolved during the next
       * digest once the animation has completed.
       *
       * @param {DOMElement} element the element which will be removed from the DOM
       * @param {object=} options an optional collection of options/styles that will be applied to the element
       *
       * @return {Promise} the animation callback promise
       */
      leave: function(element, options) {
        return $$animateQueue.push(element, 'leave', prepareAnimateOptions(options), function() {
          element.remove();
        });
      },

      /**
       * @ngdoc method
       * @name $animate#addClass
       * @kind function
       *
       * @description Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon
       *   execution, the addClass operation will only be handled after the next digest and it will not trigger an
       *   animation if element already contains the CSS class or if the class is removed at a later step.
       *   Note that class-based animations are treated differently compared to structural animations
       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
       *   depending if CSS or JavaScript animations are used.
       *
       * @param {DOMElement} element the element which the CSS classes will be applied to
       * @param {string} className the CSS class(es) that will be added (multiple classes are separated via spaces)
       * @param {object=} options an optional collection of options/styles that will be applied to the element
       *
       * @return {Promise} the animation callback promise
       */
      addClass: function(element, className, options) {
        options = prepareAnimateOptions(options);
        options.addClass = mergeClasses(options.addclass, className);
        return $$animateQueue.push(element, 'addClass', options);
      },

      /**
       * @ngdoc method
       * @name $animate#removeClass
       * @kind function
       *
       * @description Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon
       *   execution, the removeClass operation will only be handled after the next digest and it will not trigger an
       *   animation if element does not contain the CSS class or if the class is added at a later step.
       *   Note that class-based animations are treated differently compared to structural animations
       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
       *   depending if CSS or JavaScript animations are used.
       *
       * @param {DOMElement} element the element which the CSS classes will be applied to
       * @param {string} className the CSS class(es) that will be removed (multiple classes are separated via spaces)
       * @param {object=} options an optional collection of options/styles that will be applied to the element
       *
       * @return {Promise} the animation callback promise
       */
      removeClass: function(element, className, options) {
        options = prepareAnimateOptions(options);
        options.removeClass = mergeClasses(options.removeClass, className);
        return $$animateQueue.push(element, 'removeClass', options);
      },

      /**
       * @ngdoc method
       * @name $animate#setClass
       * @kind function
       *
       * @description Performs both the addition and removal of a CSS classes on an element and (during the process)
       *    triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and
       *    `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has
       *    passed. Note that class-based animations are treated differently compared to structural animations
       *    (like enter, move and leave) since the CSS classes may be added/removed at different points
       *    depending if CSS or JavaScript animations are used.
       *
       * @param {DOMElement} element the element which the CSS classes will be applied to
       * @param {string} add the CSS class(es) that will be added (multiple classes are separated via spaces)
       * @param {string} remove the CSS class(es) that will be removed (multiple classes are separated via spaces)
       * @param {object=} options an optional collection of options/styles that will be applied to the element
       *
       * @return {Promise} the animation callback promise
       */
      setClass: function(element, add, remove, options) {
        options = prepareAnimateOptions(options);
        options.addClass = mergeClasses(options.addClass, add);
        options.removeClass = mergeClasses(options.removeClass, remove);
        return $$animateQueue.push(element, 'setClass', options);
      },

      /**
       * @ngdoc method
       * @name $animate#animate
       * @kind function
       *
       * @description Performs an inline animation on the element which applies the provided to and from CSS styles to the element.
       * If any detected CSS transition, keyframe or JavaScript matches the provided className value, then the animation will take
       * on the provided styles. For example, if a transition animation is set for the given classNamem, then the provided `from` and
       * `to` styles will be applied alongside the given transition. If the CSS style provided in `from` does not have a corresponding
       * style in `to`, the style in `from` is applied immediately, and no animation is run.
       * If a JavaScript animation is detected then the provided styles will be given in as function parameters into the `animate`
       * method (or as part of the `options` parameter):
       *
       * ```js
       * ngModule.animation('.my-inline-animation', function() {
       *   return {
       *     animate : function(element, from, to, done, options) {
       *       //animation
       *       done();
       *     }
       *   }
       * });
       * ```
       *
       * @param {DOMElement} element the element which the CSS styles will be applied to
       * @param {object} from the from (starting) CSS styles that will be applied to the element and across the animation.
       * @param {object} to the to (destination) CSS styles that will be applied to the element and across the animation.
       * @param {string=} className an optional CSS class that will be applied to the element for the duration of the animation. If
       *    this value is left as empty then a CSS class of `ng-inline-animate` will be applied to the element.
       *    (Note that if no animation is detected then this value will not be applied to the element.)
       * @param {object=} options an optional collection of options/styles that will be applied to the element
       *
       * @return {Promise} the animation callback promise
       */
      animate: function(element, from, to, className, options) {
        options = prepareAnimateOptions(options);
        options.from = options.from ? extend(options.from, from) : from;
        options.to   = options.to   ? extend(options.to, to)     : to;

        className = className || 'ng-inline-animate';
        options.tempClasses = mergeClasses(options.tempClasses, className);
        return $$animateQueue.push(element, 'animate', options);
      }
    };
  }];
}];

var $$AnimateAsyncRunFactoryProvider = function() {
  this.$get = ['$$rAF', function($$rAF) {
    var waitQueue = [];

    function waitForTick(fn) {
      waitQueue.push(fn);
      if (waitQueue.length > 1) return;
      $$rAF(function() {
        for (var i = 0; i < waitQueue.length; i++) {
          waitQueue[i]();
        }
        waitQueue = [];
      });
    }

    return function() {
      var passed = false;
      waitForTick(function() {
        passed = true;
      });
      return function(callback) {
        passed ? callback() : waitForTick(callback);
      };
    };
  }];
};

var $$AnimateRunnerFactoryProvider = function() {
  this.$get = ['$q', '$sniffer', '$$animateAsyncRun', '$document', '$timeout',
       function($q,   $sniffer,   $$animateAsyncRun,   $document,   $timeout) {

    var INITIAL_STATE = 0;
    var DONE_PENDING_STATE = 1;
    var DONE_COMPLETE_STATE = 2;

    AnimateRunner.chain = function(chain, callback) {
      var index = 0;

      next();
      function next() {
        if (index === chain.length) {
          callback(true);
          return;
        }

        chain[index](function(response) {
          if (response === false) {
            callback(false);
            return;
          }
          index++;
          next();
        });
      }
    };

    AnimateRunner.all = function(runners, callback) {
      var count = 0;
      var status = true;
      forEach(runners, function(runner) {
        runner.done(onProgress);
      });

      function onProgress(response) {
        status = status && response;
        if (++count === runners.length) {
          callback(status);
        }
      }
    };

    function AnimateRunner(host) {
      this.setHost(host);

      var rafTick = $$animateAsyncRun();
      var timeoutTick = function(fn) {
        $timeout(fn, 0, false);
      };

      this._doneCallbacks = [];
      this._tick = function(fn) {
        var doc = $document[0];

        // the document may not be ready or attached
        // to the module for some internal tests
        if (doc && doc.hidden) {
          timeoutTick(fn);
        } else {
          rafTick(fn);
        }
      };
      this._state = 0;
    }

    AnimateRunner.prototype = {
      setHost: function(host) {
        this.host = host || {};
      },

      done: function(fn) {
        if (this._state === DONE_COMPLETE_STATE) {
          fn();
        } else {
          this._doneCallbacks.push(fn);
        }
      },

      progress: noop,

      getPromise: function() {
        if (!this.promise) {
          var self = this;
          this.promise = $q(function(resolve, reject) {
            self.done(function(status) {
              status === false ? reject() : resolve();
            });
          });
        }
        return this.promise;
      },

      then: function(resolveHandler, rejectHandler) {
        return this.getPromise().then(resolveHandler, rejectHandler);
      },

      'catch': function(handler) {
        return this.getPromise()['catch'](handler);
      },

      'finally': function(handler) {
        return this.getPromise()['finally'](handler);
      },

      pause: function() {
        if (this.host.pause) {
          this.host.pause();
        }
      },

      resume: function() {
        if (this.host.resume) {
          this.host.resume();
        }
      },

      end: function() {
        if (this.host.end) {
          this.host.end();
        }
        this._resolve(true);
      },

      cancel: function() {
        if (this.host.cancel) {
          this.host.cancel();
        }
        this._resolve(false);
      },

      complete: function(response) {
        var self = this;
        if (self._state === INITIAL_STATE) {
          self._state = DONE_PENDING_STATE;
          self._tick(function() {
            self._resolve(response);
          });
        }
      },

      _resolve: function(response) {
        if (this._state !== DONE_COMPLETE_STATE) {
          forEach(this._doneCallbacks, function(fn) {
            fn(response);
          });
          this._doneCallbacks.length = 0;
          this._state = DONE_COMPLETE_STATE;
        }
      }
    };

    return AnimateRunner;
  }];
};

/**
 * @ngdoc service
 * @name $animateCss
 * @kind object
 *
 * @description
 * This is the core version of `$animateCss`. By default, only when the `ngAnimate` is included,
 * then the `$animateCss` service will actually perform animations.
 *
 * Click here {@link ngAnimate.$animateCss to read the documentation for $animateCss}.
 */
var $CoreAnimateCssProvider = function() {
  this.$get = ['$$rAF', '$q', '$$AnimateRunner', function($$rAF, $q, $$AnimateRunner) {

    return function(element, initialOptions) {
      // all of the animation functions should create
      // a copy of the options data, however, if a
      // parent service has already created a copy then
      // we should stick to using that
      var options = initialOptions || {};
      if (!options.$$prepared) {
        options = copy(options);
      }

      // there is no point in applying the styles since
      // there is no animation that goes on at all in
      // this version of $animateCss.
      if (options.cleanupStyles) {
        options.from = options.to = null;
      }

      if (options.from) {
        element.css(options.from);
        options.from = null;
      }

      /* jshint newcap: false */
      var closed, runner = new $$AnimateRunner();
      return {
        start: run,
        end: run
      };

      function run() {
        $$rAF(function() {
          applyAnimationContents();
          if (!closed) {
            runner.complete();
          }
          closed = true;
        });
        return runner;
      }

      function applyAnimationContents() {
        if (options.addClass) {
          element.addClass(options.addClass);
          options.addClass = null;
        }
        if (options.removeClass) {
          element.removeClass(options.removeClass);
          options.removeClass = null;
        }
        if (options.to) {
          element.css(options.to);
          options.to = null;
        }
      }
    };
  }];
};

/* global stripHash: true */

/**
 * ! This is a private undocumented service !
 *
 * @name $browser
 * @requires $log
 * @description
 * This object has two goals:
 *
 * - hide all the global state in the browser caused by the window object
 * - abstract away all the browser specific features and inconsistencies
 *
 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
 * service, which can be used for convenient testing of the application without the interaction with
 * the real browser apis.
 */
/**
 * @param {object} window The global window object.
 * @param {object} document jQuery wrapped document.
 * @param {object} $log window.console or an object with the same interface.
 * @param {object} $sniffer $sniffer service
 */
function Browser(window, document, $log, $sniffer) {
  var self = this,
      rawDocument = document[0],
      location = window.location,
      history = window.history,
      setTimeout = window.setTimeout,
      clearTimeout = window.clearTimeout,
      pendingDeferIds = {};

  self.isMock = false;

  var outstandingRequestCount = 0;
  var outstandingRequestCallbacks = [];

  // TODO(vojta): remove this temporary api
  self.$$completeOutstandingRequest = completeOutstandingRequest;
  self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };

  /**
   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
   */
  function completeOutstandingRequest(fn) {
    try {
      fn.apply(null, sliceArgs(arguments, 1));
    } finally {
      outstandingRequestCount--;
      if (outstandingRequestCount === 0) {
        while (outstandingRequestCallbacks.length) {
          try {
            outstandingRequestCallbacks.pop()();
          } catch (e) {
            $log.error(e);
          }
        }
      }
    }
  }

  function getHash(url) {
    var index = url.indexOf('#');
    return index === -1 ? '' : url.substr(index);
  }

  /**
   * @private
   * Note: this method is used only by scenario runner
   * TODO(vojta): prefix this method with $$ ?
   * @param {function()} callback Function that will be called when no outstanding request
   */
  self.notifyWhenNoOutstandingRequests = function(callback) {
    if (outstandingRequestCount === 0) {
      callback();
    } else {
      outstandingRequestCallbacks.push(callback);
    }
  };

  //////////////////////////////////////////////////////////////
  // URL API
  //////////////////////////////////////////////////////////////

  var cachedState, lastHistoryState,
      lastBrowserUrl = location.href,
      baseElement = document.find('base'),
      pendingLocation = null;

  cacheState();
  lastHistoryState = cachedState;

  /**
   * @name $browser#url
   *
   * @description
   * GETTER:
   * Without any argument, this method just returns current value of location.href.
   *
   * SETTER:
   * With at least one argument, this method sets url to new value.
   * If html5 history api supported, pushState/replaceState is used, otherwise
   * location.href/location.replace is used.
   * Returns its own instance to allow chaining
   *
   * NOTE: this api is intended for use only by the $location service. Please use the
   * {@link ng.$location $location service} to change url.
   *
   * @param {string} url New url (when used as setter)
   * @param {boolean=} replace Should new url replace current history record?
   * @param {object=} state object to use with pushState/replaceState
   */
  self.url = function(url, replace, state) {
    // In modern browsers `history.state` is `null` by default; treating it separately
    // from `undefined` would cause `$browser.url('/foo')` to change `history.state`
    // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.
    if (isUndefined(state)) {
      state = null;
    }

    // Android Browser BFCache causes location, history reference to become stale.
    if (location !== window.location) location = window.location;
    if (history !== window.history) history = window.history;

    // setter
    if (url) {
      var sameState = lastHistoryState === state;

      // Don't change anything if previous and current URLs and states match. This also prevents
      // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.
      // See https://github.com/angular/angular.js/commit/ffb2701
      if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {
        return self;
      }
      var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);
      lastBrowserUrl = url;
      lastHistoryState = state;
      // Don't use history API if only the hash changed
      // due to a bug in IE10/IE11 which leads
      // to not firing a `hashchange` nor `popstate` event
      // in some cases (see #9143).
      if ($sniffer.history && (!sameBase || !sameState)) {
        history[replace ? 'replaceState' : 'pushState'](state, '', url);
        cacheState();
        // Do the assignment again so that those two variables are referentially identical.
        lastHistoryState = cachedState;
      } else {
        if (!sameBase || pendingLocation) {
          pendingLocation = url;
        }
        if (replace) {
          location.replace(url);
        } else if (!sameBase) {
          location.href = url;
        } else {
          location.hash = getHash(url);
        }
        if (location.href !== url) {
          pendingLocation = url;
        }
      }
      return self;
    // getter
    } else {
      // - pendingLocation is needed as browsers don't allow to read out
      //   the new location.href if a reload happened or if there is a bug like in iOS 9 (see
      //   https://openradar.appspot.com/22186109).
      // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
      return pendingLocation || location.href.replace(/%27/g,"'");
    }
  };

  /**
   * @name $browser#state
   *
   * @description
   * This method is a getter.
   *
   * Return history.state or null if history.state is undefined.
   *
   * @returns {object} state
   */
  self.state = function() {
    return cachedState;
  };

  var urlChangeListeners = [],
      urlChangeInit = false;

  function cacheStateAndFireUrlChange() {
    pendingLocation = null;
    cacheState();
    fireUrlChange();
  }

  function getCurrentState() {
    try {
      return history.state;
    } catch (e) {
      // MSIE can reportedly throw when there is no state (UNCONFIRMED).
    }
  }

  // This variable should be used *only* inside the cacheState function.
  var lastCachedState = null;
  function cacheState() {
    // This should be the only place in $browser where `history.state` is read.
    cachedState = getCurrentState();
    cachedState = isUndefined(cachedState) ? null : cachedState;

    // Prevent callbacks fo fire twice if both hashchange & popstate were fired.
    if (equals(cachedState, lastCachedState)) {
      cachedState = lastCachedState;
    }
    lastCachedState = cachedState;
  }

  function fireUrlChange() {
    if (lastBrowserUrl === self.url() && lastHistoryState === cachedState) {
      return;
    }

    lastBrowserUrl = self.url();
    lastHistoryState = cachedState;
    forEach(urlChangeListeners, function(listener) {
      listener(self.url(), cachedState);
    });
  }

  /**
   * @name $browser#onUrlChange
   *
   * @description
   * Register callback function that will be called, when url changes.
   *
   * It's only called when the url is changed from outside of angular:
   * - user types different url into address bar
   * - user clicks on history (forward/back) button
   * - user clicks on a link
   *
   * It's not called when url is changed by $browser.url() method
   *
   * The listener gets called with new url as parameter.
   *
   * NOTE: this api is intended for use only by the $location service. Please use the
   * {@link ng.$location $location service} to monitor url changes in angular apps.
   *
   * @param {function(string)} listener Listener function to be called when url changes.
   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
   */
  self.onUrlChange = function(callback) {
    // TODO(vojta): refactor to use node's syntax for events
    if (!urlChangeInit) {
      // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
      // don't fire popstate when user change the address bar and don't fire hashchange when url
      // changed by push/replaceState

      // html5 history api - popstate event
      if ($sniffer.history) jqLite(window).on('popstate', cacheStateAndFireUrlChange);
      // hashchange event
      jqLite(window).on('hashchange', cacheStateAndFireUrlChange);

      urlChangeInit = true;
    }

    urlChangeListeners.push(callback);
    return callback;
  };

  /**
   * @private
   * Remove popstate and hashchange handler from window.
   *
   * NOTE: this api is intended for use only by $rootScope.
   */
  self.$$applicationDestroyed = function() {
    jqLite(window).off('hashchange popstate', cacheStateAndFireUrlChange);
  };

  /**
   * Checks whether the url has changed outside of Angular.
   * Needs to be exported to be able to check for changes that have been done in sync,
   * as hashchange/popstate events fire in async.
   */
  self.$$checkUrlChange = fireUrlChange;

  //////////////////////////////////////////////////////////////
  // Misc API
  //////////////////////////////////////////////////////////////

  /**
   * @name $browser#baseHref
   *
   * @description
   * Returns current <base href>
   * (always relative - without domain)
   *
   * @returns {string} The current base href
   */
  self.baseHref = function() {
    var href = baseElement.attr('href');
    return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';
  };

  /**
   * @name $browser#defer
   * @param {function()} fn A function, who's execution should be deferred.
   * @param {number=} [delay=0] of milliseconds to defer the function execution.
   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
   *
   * @description
   * Executes a fn asynchronously via `setTimeout(fn, delay)`.
   *
   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
   * via `$browser.defer.flush()`.
   *
   */
  self.defer = function(fn, delay) {
    var timeoutId;
    outstandingRequestCount++;
    timeoutId = setTimeout(function() {
      delete pendingDeferIds[timeoutId];
      completeOutstandingRequest(fn);
    }, delay || 0);
    pendingDeferIds[timeoutId] = true;
    return timeoutId;
  };


  /**
   * @name $browser#defer.cancel
   *
   * @description
   * Cancels a deferred task identified with `deferId`.
   *
   * @param {*} deferId Token returned by the `$browser.defer` function.
   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
   *                    canceled.
   */
  self.defer.cancel = function(deferId) {
    if (pendingDeferIds[deferId]) {
      delete pendingDeferIds[deferId];
      clearTimeout(deferId);
      completeOutstandingRequest(noop);
      return true;
    }
    return false;
  };

}

function $BrowserProvider() {
  this.$get = ['$window', '$log', '$sniffer', '$document',
      function($window, $log, $sniffer, $document) {
        return new Browser($window, $document, $log, $sniffer);
      }];
}

/**
 * @ngdoc service
 * @name $cacheFactory
 *
 * @description
 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
 * them.
 *
 * ```js
 *
 *  var cache = $cacheFactory('cacheId');
 *  expect($cacheFactory.get('cacheId')).toBe(cache);
 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
 *
 *  cache.put("key", "value");
 *  cache.put("another key", "another value");
 *
 *  // We've specified no options on creation
 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
 *
 * ```
 *
 *
 * @param {string} cacheId Name or id of the newly created cache.
 * @param {object=} options Options object that specifies the cache behavior. Properties:
 *
 *   - `{number=}` `capacity` — turns the cache into LRU cache.
 *
 * @returns {object} Newly created cache object with the following set of methods:
 *
 * - `{object}` `info()` — Returns id, size, and options of cache.
 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
 *   it.
 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
 * - `{void}` `removeAll()` — Removes all cached values.
 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
 *
 * @example
   <example module="cacheExampleApp">
     <file name="index.html">
       <div ng-controller="CacheController">
         <input ng-model="newCacheKey" placeholder="Key">
         <input ng-model="newCacheValue" placeholder="Value">
         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>

         <p ng-if="keys.length">Cached Values</p>
         <div ng-repeat="key in keys">
           <span ng-bind="key"></span>
           <span>: </span>
           <b ng-bind="cache.get(key)"></b>
         </div>

         <p>Cache Info</p>
         <div ng-repeat="(key, value) in cache.info()">
           <span ng-bind="key"></span>
           <span>: </span>
           <b ng-bind="value"></b>
         </div>
       </div>
     </file>
     <file name="script.js">
       angular.module('cacheExampleApp', []).
         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
           $scope.keys = [];
           $scope.cache = $cacheFactory('cacheId');
           $scope.put = function(key, value) {
             if (angular.isUndefined($scope.cache.get(key))) {
               $scope.keys.push(key);
             }
             $scope.cache.put(key, angular.isUndefined(value) ? null : value);
           };
         }]);
     </file>
     <file name="style.css">
       p {
         margin: 10px 0 3px;
       }
     </file>
   </example>
 */
function $CacheFactoryProvider() {

  this.$get = function() {
    var caches = {};

    function cacheFactory(cacheId, options) {
      if (cacheId in caches) {
        throw minErr('$cacheFactory')('iid', "CacheId '{0}' is already taken!", cacheId);
      }

      var size = 0,
          stats = extend({}, options, {id: cacheId}),
          data = createMap(),
          capacity = (options && options.capacity) || Number.MAX_VALUE,
          lruHash = createMap(),
          freshEnd = null,
          staleEnd = null;

      /**
       * @ngdoc type
       * @name $cacheFactory.Cache
       *
       * @description
       * A cache object used to store and retrieve data, primarily used by
       * {@link $http $http} and the {@link ng.directive:script script} directive to cache
       * templates and other data.
       *
       * ```js
       *  angular.module('superCache')
       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
       *      return $cacheFactory('super-cache');
       *    }]);
       * ```
       *
       * Example test:
       *
       * ```js
       *  it('should behave like a cache', inject(function(superCache) {
       *    superCache.put('key', 'value');
       *    superCache.put('another key', 'another value');
       *
       *    expect(superCache.info()).toEqual({
       *      id: 'super-cache',
       *      size: 2
       *    });
       *
       *    superCache.remove('another key');
       *    expect(superCache.get('another key')).toBeUndefined();
       *
       *    superCache.removeAll();
       *    expect(superCache.info()).toEqual({
       *      id: 'super-cache',
       *      size: 0
       *    });
       *  }));
       * ```
       */
      return caches[cacheId] = {

        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#put
         * @kind function
         *
         * @description
         * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be
         * retrieved later, and incrementing the size of the cache if the key was not already
         * present in the cache. If behaving like an LRU cache, it will also remove stale
         * entries from the set.
         *
         * It will not insert undefined values into the cache.
         *
         * @param {string} key the key under which the cached data is stored.
         * @param {*} value the value to store alongside the key. If it is undefined, the key
         *    will not be stored.
         * @returns {*} the value stored.
         */
        put: function(key, value) {
          if (isUndefined(value)) return;
          if (capacity < Number.MAX_VALUE) {
            var lruEntry = lruHash[key] || (lruHash[key] = {key: key});

            refresh(lruEntry);
          }

          if (!(key in data)) size++;
          data[key] = value;

          if (size > capacity) {
            this.remove(staleEnd.key);
          }

          return value;
        },

        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#get
         * @kind function
         *
         * @description
         * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.
         *
         * @param {string} key the key of the data to be retrieved
         * @returns {*} the value stored.
         */
        get: function(key) {
          if (capacity < Number.MAX_VALUE) {
            var lruEntry = lruHash[key];

            if (!lruEntry) return;

            refresh(lruEntry);
          }

          return data[key];
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#remove
         * @kind function
         *
         * @description
         * Removes an entry from the {@link $cacheFactory.Cache Cache} object.
         *
         * @param {string} key the key of the entry to be removed
         */
        remove: function(key) {
          if (capacity < Number.MAX_VALUE) {
            var lruEntry = lruHash[key];

            if (!lruEntry) return;

            if (lruEntry == freshEnd) freshEnd = lruEntry.p;
            if (lruEntry == staleEnd) staleEnd = lruEntry.n;
            link(lruEntry.n,lruEntry.p);

            delete lruHash[key];
          }

          if (!(key in data)) return;

          delete data[key];
          size--;
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#removeAll
         * @kind function
         *
         * @description
         * Clears the cache object of any entries.
         */
        removeAll: function() {
          data = createMap();
          size = 0;
          lruHash = createMap();
          freshEnd = staleEnd = null;
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#destroy
         * @kind function
         *
         * @description
         * Destroys the {@link $cacheFactory.Cache Cache} object entirely,
         * removing it from the {@link $cacheFactory $cacheFactory} set.
         */
        destroy: function() {
          data = null;
          stats = null;
          lruHash = null;
          delete caches[cacheId];
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#info
         * @kind function
         *
         * @description
         * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.
         *
         * @returns {object} an object with the following properties:
         *   <ul>
         *     <li>**id**: the id of the cache instance</li>
         *     <li>**size**: the number of entries kept in the cache instance</li>
         *     <li>**...**: any additional properties from the options object when creating the
         *       cache.</li>
         *   </ul>
         */
        info: function() {
          return extend({}, stats, {size: size});
        }
      };


      /**
       * makes the `entry` the freshEnd of the LRU linked list
       */
      function refresh(entry) {
        if (entry != freshEnd) {
          if (!staleEnd) {
            staleEnd = entry;
          } else if (staleEnd == entry) {
            staleEnd = entry.n;
          }

          link(entry.n, entry.p);
          link(entry, freshEnd);
          freshEnd = entry;
          freshEnd.n = null;
        }
      }


      /**
       * bidirectionally links two entries of the LRU linked list
       */
      function link(nextEntry, prevEntry) {
        if (nextEntry != prevEntry) {
          if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify
          if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify
        }
      }
    }


  /**
   * @ngdoc method
   * @name $cacheFactory#info
   *
   * @description
   * Get information about all the caches that have been created
   *
   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
   */
    cacheFactory.info = function() {
      var info = {};
      forEach(caches, function(cache, cacheId) {
        info[cacheId] = cache.info();
      });
      return info;
    };


  /**
   * @ngdoc method
   * @name $cacheFactory#get
   *
   * @description
   * Get access to a cache object by the `cacheId` used when it was created.
   *
   * @param {string} cacheId Name or id of a cache to access.
   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
   */
    cacheFactory.get = function(cacheId) {
      return caches[cacheId];
    };


    return cacheFactory;
  };
}

/**
 * @ngdoc service
 * @name $templateCache
 *
 * @description
 * The first time a template is used, it is loaded in the template cache for quick retrieval. You
 * can load templates directly into the cache in a `script` tag, or by consuming the
 * `$templateCache` service directly.
 *
 * Adding via the `script` tag:
 *
 * ```html
 *   <script type="text/ng-template" id="templateId.html">
 *     <p>This is the content of the template</p>
 *   </script>
 * ```
 *
 * **Note:** the `script` tag containing the template does not need to be included in the `head` of
 * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,
 * element with ng-app attribute), otherwise the template will be ignored.
 *
 * Adding via the `$templateCache` service:
 *
 * ```js
 * var myApp = angular.module('myApp', []);
 * myApp.run(function($templateCache) {
 *   $templateCache.put('templateId.html', 'This is the content of the template');
 * });
 * ```
 *
 * To retrieve the template later, simply use it in your HTML:
 * ```html
 * <div ng-include=" 'templateId.html' "></div>
 * ```
 *
 * or get it via Javascript:
 * ```js
 * $templateCache.get('templateId.html')
 * ```
 *
 * See {@link ng.$cacheFactory $cacheFactory}.
 *
 */
function $TemplateCacheProvider() {
  this.$get = ['$cacheFactory', function($cacheFactory) {
    return $cacheFactory('templates');
  }];
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *     Any commits to this file should be reviewed with security in mind.  *
 *   Changes to this file can potentially create security vulnerabilities. *
 *          An approval from 2 Core members with history of modifying      *
 *                         this file is required.                          *
 *                                                                         *
 *  Does the change somehow allow for arbitrary javascript to be executed? *
 *    Or allows for someone to change the prototype of built-in objects?   *
 *     Or gives undesired access to variables likes document or window?    *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
 *
 * DOM-related variables:
 *
 * - "node" - DOM Node
 * - "element" - DOM Element or Node
 * - "$node" or "$element" - jqLite-wrapped node or element
 *
 *
 * Compiler related stuff:
 *
 * - "linkFn" - linking fn of a single directive
 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
 */


/**
 * @ngdoc service
 * @name $compile
 * @kind function
 *
 * @description
 * Compiles an HTML string or DOM into a template and produces a template function, which
 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
 *
 * The compilation is a process of walking the DOM tree and matching DOM elements to
 * {@link ng.$compileProvider#directive directives}.
 *
 * <div class="alert alert-warning">
 * **Note:** This document is an in-depth reference of all directive options.
 * For a gentle introduction to directives with examples of common use cases,
 * see the {@link guide/directive directive guide}.
 * </div>
 *
 * ## Comprehensive Directive API
 *
 * There are many different options for a directive.
 *
 * The difference resides in the return value of the factory function.
 * You can either return a "Directive Definition Object" (see below) that defines the directive properties,
 * or just the `postLink` function (all other properties will have the default values).
 *
 * <div class="alert alert-success">
 * **Best Practice:** It's recommended to use the "directive definition object" form.
 * </div>
 *
 * Here's an example directive declared with a Directive Definition Object:
 *
 * ```js
 *   var myModule = angular.module(...);
 *
 *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       priority: 0,
 *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },
 *       // or
 *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },
 *       transclude: false,
 *       restrict: 'A',
 *       templateNamespace: 'html',
 *       scope: false,
 *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
 *       controllerAs: 'stringIdentifier',
 *       bindToController: false,
 *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
 *       compile: function compile(tElement, tAttrs, transclude) {
 *         return {
 *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },
 *           post: function postLink(scope, iElement, iAttrs, controller) { ... }
 *         }
 *         // or
 *         // return function postLink( ... ) { ... }
 *       },
 *       // or
 *       // link: {
 *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },
 *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }
 *       // }
 *       // or
 *       // link: function postLink( ... ) { ... }
 *     };
 *     return directiveDefinitionObject;
 *   });
 * ```
 *
 * <div class="alert alert-warning">
 * **Note:** Any unspecified options will use the default value. You can see the default values below.
 * </div>
 *
 * Therefore the above can be simplified as:
 *
 * ```js
 *   var myModule = angular.module(...);
 *
 *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       link: function postLink(scope, iElement, iAttrs) { ... }
 *     };
 *     return directiveDefinitionObject;
 *     // or
 *     // return function postLink(scope, iElement, iAttrs) { ... }
 *   });
 * ```
 *
 *
 *
 * ### Directive Definition Object
 *
 * The directive definition object provides instructions to the {@link ng.$compile
 * compiler}. The attributes are:
 *
 * #### `multiElement`
 * When this property is set to true, the HTML compiler will collect DOM nodes between
 * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them
 * together as the directive elements. It is recommended that this feature be used on directives
 * which are not strictly behavioral (such as {@link ngClick}), and which
 * do not manipulate or replace child nodes (such as {@link ngInclude}).
 *
 * #### `priority`
 * When there are multiple directives defined on a single DOM element, sometimes it
 * is necessary to specify the order in which the directives are applied. The `priority` is used
 * to sort the directives before their `compile` functions get called. Priority is defined as a
 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
 * are also run in priority order, but post-link functions are run in reverse order. The order
 * of directives with the same priority is undefined. The default priority is `0`.
 *
 * #### `terminal`
 * If set to true then the current `priority` will be the last set of directives
 * which will execute (any directives at the current priority will still execute
 * as the order of execution on same `priority` is undefined). Note that expressions
 * and other directives used in the directive's template will also be excluded from execution.
 *
 * #### `scope`
 * The scope property can be `true`, an object or a falsy value:
 *
 * * **falsy:** No scope will be created for the directive. The directive will use its parent's scope.
 *
 * * **`true`:** A new child scope that prototypically inherits from its parent will be created for
 * the directive's element. If multiple directives on the same element request a new scope,
 * only one new scope is created. The new scope rule does not apply for the root of the template
 * since the root of the template always gets a new scope.
 *
 * * **`{...}` (an object hash):** A new "isolate" scope is created for the directive's element. The
 * 'isolate' scope differs from normal scope in that it does not prototypically inherit from its parent
 * scope. This is useful when creating reusable components, which should not accidentally read or modify
 * data in the parent scope.
 *
 * The 'isolate' scope object hash defines a set of local scope properties derived from attributes on the
 * directive's element. These local properties are useful for aliasing values for templates. The keys in
 * the object hash map to the name of the property on the isolate scope; the values define how the property
 * is bound to the parent scope, via matching attributes on the directive's element:
 *
 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
 *   always a string since DOM attributes are strings. If no `attr` name is specified then the
 *   attribute name is assumed to be the same as the local name. Given `<my-component
 *   my-attr="hello {{name}}">` and the isolate scope definition `scope: { localName:'@myAttr' }`,
 *   the directive's scope property `localName` will reflect the interpolated value of `hello
 *   {{name}}`. As the `name` attribute changes so will the `localName` property on the directive's
 *   scope. The `name` is read from the parent scope (not the directive's scope).
 *
 * * `=` or `=attr` - set up a bidirectional binding between a local scope property and an expression
 *   passed via the attribute `attr`. The expression is evaluated in the context of the parent scope.
 *   If no `attr` name is specified then the attribute name is assumed to be the same as the local
 *   name. Given `<my-component my-attr="parentModel">` and the isolate scope definition `scope: {
 *   localModel: '=myAttr' }`, the property `localModel` on the directive's scope will reflect the
 *   value of `parentModel` on the parent scope. Changes to `parentModel` will be reflected in
 *   `localModel` and vice versa. Optional attributes should be marked as such with a question mark:
 *   `=?` or `=?attr`. If the binding expression is non-assignable, or if the attribute isn't
 *   optional and doesn't exist, an exception ({@link error/$compile/nonassign `$compile:nonassign`})
 *   will be thrown upon discovering changes to the local value, since it will be impossible to sync
 *   them back to the parent scope. By default, the {@link ng.$rootScope.Scope#$watch `$watch`}
 *   method is used for tracking changes, and the equality check is based on object identity.
 *   However, if an object literal or an array literal is passed as the binding expression, the
 *   equality check is done by value (using the {@link angular.equals} function). It's also possible
 *   to watch the evaluated value shallowly with {@link ng.$rootScope.Scope#$watchCollection
 *   `$watchCollection`}: use `=*` or `=*attr` (`=*?` or `=*?attr` if the attribute is optional).
 *
  * * `<` or `<attr` - set up a one-way (one-directional) binding between a local scope property and an
 *   expression passed via the attribute `attr`. The expression is evaluated in the context of the
 *   parent scope. If no `attr` name is specified then the attribute name is assumed to be the same as the
 *   local name. You can also make the binding optional by adding `?`: `<?` or `<?attr`.
 *
 *   For example, given `<my-component my-attr="parentModel">` and directive definition of
 *   `scope: { localModel:'<myAttr' }`, then the isolated scope property `localModel` will reflect the
 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
 *   in `localModel`, but changes in `localModel` will not reflect in `parentModel`. There are however
 *   two caveats:
 *     1. one-way binding does not copy the value from the parent to the isolate scope, it simply
 *     sets the same value. That means if your bound value is an object, changes to its properties
 *     in the isolated scope will be reflected in the parent scope (because both reference the same object).
 *     2. one-way binding watches changes to the **identity** of the parent value. That means the
 *     {@link ng.$rootScope.Scope#$watch `$watch`} on the parent value only fires if the reference
 *     to the value has changed. In most cases, this should not be of concern, but can be important
 *     to know if you one-way bind to an object, and then replace that object in the isolated scope.
 *     If you now change a property of the object in your parent scope, the change will not be
 *     propagated to the isolated scope, because the identity of the object on the parent scope
 *     has not changed. Instead you must assign a new object.
 *
 *   One-way binding is useful if you do not plan to propagate changes to your isolated scope bindings
 *   back to the parent. However, it does not make this completely impossible.
 *
 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope. If
 *   no `attr` name is specified then the attribute name is assumed to be the same as the local name.
 *   Given `<my-component my-attr="count = count + value">` and the isolate scope definition `scope: {
 *   localFn:'&myAttr' }`, the isolate scope property `localFn` will point to a function wrapper for
 *   the `count = count + value` expression. Often it's desirable to pass data from the isolated scope
 *   via an expression to the parent scope. This can be done by passing a map of local variable names
 *   and values into the expression wrapper fn. For example, if the expression is `increment(amount)`
 *   then we can specify the amount value by calling the `localFn` as `localFn({amount: 22})`.
 *
 * In general it's possible to apply more than one directive to one element, but there might be limitations
 * depending on the type of scope required by the directives. The following points will help explain these limitations.
 * For simplicity only two directives are taken into account, but it is also applicable for several directives:
 *
 * * **no scope** + **no scope** => Two directives which don't require their own scope will use their parent's scope
 * * **child scope** + **no scope** =>  Both directives will share one single child scope
 * * **child scope** + **child scope** =>  Both directives will share one single child scope
 * * **isolated scope** + **no scope** =>  The isolated directive will use it's own created isolated scope. The other directive will use
 * its parent's scope
 * * **isolated scope** + **child scope** =>  **Won't work!** Only one scope can be related to one element. Therefore these directives cannot
 * be applied to the same element.
 * * **isolated scope** + **isolated scope**  =>  **Won't work!** Only one scope can be related to one element. Therefore these directives
 * cannot be applied to the same element.
 *
 *
 * #### `bindToController`
 * This property is used to bind scope properties directly to the controller. It can be either
 * `true` or an object hash with the same format as the `scope` property. Additionally, a controller
 * alias must be set, either by using `controllerAs: 'myAlias'` or by specifying the alias in the controller
 * definition: `controller: 'myCtrl as myAlias'`.
 *
 * When an isolate scope is used for a directive (see above), `bindToController: true` will
 * allow a component to have its properties bound to the controller, rather than to scope.
 *
 * After the controller is instantiated, the initial values of the isolate scope bindings will be bound to the controller
 * properties. You can access these bindings once they have been initialized by providing a controller method called
 * `$onInit`, which is called after all the controllers on an element have been constructed and had their bindings
 * initialized.
 *
 * <div class="alert alert-warning">
 * **Deprecation warning:** although bindings for non-ES6 class controllers are currently
 * bound to `this` before the controller constructor is called, this use is now deprecated. Please place initialization
 * code that relies upon bindings inside a `$onInit` method on the controller, instead.
 * </div>
 *
 * It is also possible to set `bindToController` to an object hash with the same format as the `scope` property.
 * This will set up the scope bindings to the controller directly. Note that `scope` can still be used
 * to define which kind of scope is created. By default, no scope is created. Use `scope: {}` to create an isolate
 * scope (useful for component directives).
 *
 * If both `bindToController` and `scope` are defined and have object hashes, `bindToController` overrides `scope`.
 *
 *
 * #### `controller`
 * Controller constructor function. The controller is instantiated before the
 * pre-linking phase and can be accessed by other directives (see
 * `require` attribute). This allows the directives to communicate with each other and augment
 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
 *
 * * `$scope` - Current scope associated with the element
 * * `$element` - Current element
 * * `$attrs` - Current attributes object for the element
 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:
 *   `function([scope], cloneLinkingFn, futureParentElement, slotName)`:
 *    * `scope`: (optional) override the scope.
 *    * `cloneLinkingFn`: (optional) argument to create clones of the original transcluded content.
 *    * `futureParentElement` (optional):
 *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.
 *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.
 *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)
 *          and when the `cloneLinkinFn` is passed,
 *          as those elements need to created and cloned in a special way when they are defined outside their
 *          usual containers (e.g. like `<svg>`).
 *        * See also the `directive.templateNamespace` property.
 *    * `slotName`: (optional) the name of the slot to transclude. If falsy (e.g. `null`, `undefined` or `''`)
 *      then the default translusion is provided.
 *    The `$transclude` function also has a method on it, `$transclude.isSlotFilled(slotName)`, which returns
 *    `true` if the specified slot contains content (i.e. one or more DOM nodes).
 *
 * The controller can provide the following methods that act as life-cycle hooks:
 * * `$onInit` - Called on each controller after all the controllers on an element have been constructed and
 *   had their bindings initialized (and before the pre &amp; post linking functions for the directives on
 *   this element). This is a good place to put initialization code for your controller.
 *
 * #### `require`
 * Require another directive and inject its controller as the fourth argument to the linking function. The
 * `require` property can be a string, an array or an object:
 * * a **string** containing the name of the directive to pass to the linking function
 * * an **array** containing the names of directives to pass to the linking function. The argument passed to the
 * linking function will be an array of controllers in the same order as the names in the `require` property
 * * an **object** whose property values are the names of the directives to pass to the linking function. The argument
 * passed to the linking function will also be an object with matching keys, whose values will hold the corresponding
 * controllers.
 *
 * If the `require` property is an object and `bindToController` is truthy, then the required controllers are
 * bound to the controller using the keys of the `require` property. This binding occurs after all the controllers
 * have been constructed but before `$onInit` is called.
 * See the {@link $compileProvider#component} helper for an example of how this can be used.
 *
 * If no such required directive(s) can be found, or if the directive does not have a controller, then an error is
 * raised (unless no link function is specified and the required controllers are not being bound to the directive
 * controller, in which case error checking is skipped). The name can be prefixed with:
 *
 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.
 * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.
 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass
 *   `null` to the `link` fn if not found.
 * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass
 *   `null` to the `link` fn if not found.
 *
 *
 * #### `controllerAs`
 * Identifier name for a reference to the controller in the directive's scope.
 * This allows the controller to be referenced from the directive template. This is especially
 * useful when a directive is used as component, i.e. with an `isolate` scope. It's also possible
 * to use it in a directive without an `isolate` / `new` scope, but you need to be aware that the
 * `controllerAs` reference might overwrite a property that already exists on the parent scope.
 *
 *
 * #### `restrict`
 * String of subset of `EACM` which restricts the directive to a specific directive
 * declaration style. If omitted, the defaults (elements and attributes) are used.
 *
 * * `E` - Element name (default): `<my-directive></my-directive>`
 * * `A` - Attribute (default): `<div my-directive="exp"></div>`
 * * `C` - Class: `<div class="my-directive: exp;"></div>`
 * * `M` - Comment: `<!-- directive: my-directive exp -->`
 *
 *
 * #### `templateNamespace`
 * String representing the document type used by the markup in the template.
 * AngularJS needs this information as those elements need to be created and cloned
 * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.
 *
 * * `html` - All root nodes in the template are HTML. Root nodes may also be
 *   top-level elements such as `<svg>` or `<math>`.
 * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).
 * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).
 *
 * If no `templateNamespace` is specified, then the namespace is considered to be `html`.
 *
 * #### `template`
 * HTML markup that may:
 * * Replace the contents of the directive's element (default).
 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).
 * * Wrap the contents of the directive's element (if `transclude` is true).
 *
 * Value may be:
 *
 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.
 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`
 *   function api below) and returns a string value.
 *
 *
 * #### `templateUrl`
 * This is similar to `template` but the template is loaded from the specified URL, asynchronously.
 *
 * Because template loading is asynchronous the compiler will suspend compilation of directives on that element
 * for later when the template has been resolved.  In the meantime it will continue to compile and link
 * sibling and parent elements as though this element had not contained any directives.
 *
 * The compiler does not suspend the entire compilation to wait for templates to be loaded because this
 * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the
 * case when only one deeply nested directive has `templateUrl`.
 *
 * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}
 *
 * You can specify `templateUrl` as a string representing the URL or as a function which takes two
 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
 * a string value representing the url.  In either case, the template URL is passed through {@link
 * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
 *
 *
 * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)
 * specify what the template should replace. Defaults to `false`.
 *
 * * `true` - the template will replace the directive's element.
 * * `false` - the template will replace the contents of the directive's element.
 *
 * The replacement process migrates all of the attributes / classes from the old element to the new
 * one. See the {@link guide/directive#template-expanding-directive
 * Directives Guide} for an example.
 *
 * There are very few scenarios where element replacement is required for the application function,
 * the main one being reusable custom components that are used within SVG contexts
 * (because SVG doesn't work with custom elements in the DOM tree).
 *
 * #### `transclude`
 * Extract the contents of the element where the directive appears and make it available to the directive.
 * The contents are compiled and provided to the directive as a **transclusion function**. See the
 * {@link $compile#transclusion Transclusion} section below.
 *
 *
 * #### `compile`
 *
 * ```js
 *   function compile(tElement, tAttrs, transclude) { ... }
 * ```
 *
 * The compile function deals with transforming the template DOM. Since most directives do not do
 * template transformation, it is not used often. The compile function takes the following arguments:
 *
 *   * `tElement` - template element - The element where the directive has been declared. It is
 *     safe to do template transformation on the element and child elements only.
 *
 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
 *     between all directive compile functions.
 *
 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
 *
 * <div class="alert alert-warning">
 * **Note:** The template instance and the link instance may be different objects if the template has
 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
 * should be done in a linking function rather than in a compile function.
 * </div>

 * <div class="alert alert-warning">
 * **Note:** The compile function cannot handle directives that recursively use themselves in their
 * own templates or compile functions. Compiling these directives results in an infinite loop and
 * stack overflow errors.
 *
 * This can be avoided by manually using $compile in the postLink function to imperatively compile
 * a directive's template instead of relying on automatic template compilation via `template` or
 * `templateUrl` declaration or manual compilation inside the compile function.
 * </div>
 *
 * <div class="alert alert-danger">
 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
 *   to the link function instead.
 * </div>

 * A compile function can have a return value which can be either a function or an object.
 *
 * * returning a (post-link) function - is equivalent to registering the linking function via the
 *   `link` property of the config object when the compile function is empty.
 *
 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
 *   control when a linking function should be called during the linking phase. See info about
 *   pre-linking and post-linking functions below.
 *
 *
 * #### `link`
 * This property is used only if the `compile` property is not defined.
 *
 * ```js
 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
 * ```
 *
 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
 * executed after the template has been cloned. This is where most of the directive logic will be
 * put.
 *
 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
 *
 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
 *     manipulate the children of the element only in `postLink` function since the children have
 *     already been linked.
 *
 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
 *     between all directive linking functions.
 *
 *   * `controller` - the directive's required controller instance(s) - Instances are shared
 *     among all directives, which allows the directives to use the controllers as a communication
 *     channel. The exact value depends on the directive's `require` property:
 *       * no controller(s) required: the directive's own controller, or `undefined` if it doesn't have one
 *       * `string`: the controller instance
 *       * `array`: array of controller instances
 *
 *     If a required controller cannot be found, and it is optional, the instance is `null`,
 *     otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.
 *
 *     Note that you can also require the directive's own controller - it will be made available like
 *     any other controller.
 *
 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
 *     This is the same as the `$transclude`
 *     parameter of directive controllers, see there for details.
 *     `function([scope], cloneLinkingFn, futureParentElement)`.
 *
 * #### Pre-linking function
 *
 * Executed before the child elements are linked. Not safe to do DOM transformation since the
 * compiler linking function will fail to locate the correct elements for linking.
 *
 * #### Post-linking function
 *
 * Executed after the child elements are linked.
 *
 * Note that child elements that contain `templateUrl` directives will not have been compiled
 * and linked since they are waiting for their template to load asynchronously and their own
 * compilation and linking has been suspended until that occurs.
 *
 * It is safe to do DOM transformation in the post-linking function on elements that are not waiting
 * for their async templates to be resolved.
 *
 *
 * ### Transclusion
 *
 * Transclusion is the process of extracting a collection of DOM elements from one part of the DOM and
 * copying them to another part of the DOM, while maintaining their connection to the original AngularJS
 * scope from where they were taken.
 *
 * Transclusion is used (often with {@link ngTransclude}) to insert the
 * original contents of a directive's element into a specified place in the template of the directive.
 * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded
 * content has access to the properties on the scope from which it was taken, even if the directive
 * has isolated scope.
 * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.
 *
 * This makes it possible for the widget to have private state for its template, while the transcluded
 * content has access to its originating scope.
 *
 * <div class="alert alert-warning">
 * **Note:** When testing an element transclude directive you must not place the directive at the root of the
 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives
 * Testing Transclusion Directives}.
 * </div>
 *
 * There are three kinds of transclusion depending upon whether you want to transclude just the contents of the
 * directive's element, the entire element or multiple parts of the element contents:
 *
 * * `true` - transclude the content (i.e. the child nodes) of the directive's element.
 * * `'element'` - transclude the whole of the directive's element including any directives on this
 *   element that defined at a lower priority than this directive. When used, the `template`
 *   property is ignored.
 * * **`{...}` (an object hash):** - map elements of the content onto transclusion "slots" in the template.
 *
 * **Mult-slot transclusion** is declared by providing an object for the `transclude` property.
 *
 * This object is a map where the keys are the name of the slot to fill and the value is an element selector
 * used to match the HTML to the slot. The element selector should be in normalized form (e.g. `myElement`)
 * and will match the standard element variants (e.g. `my-element`, `my:element`, `data-my-element`, etc).
 *
 * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
 *
 * If the element selector is prefixed with a `?` then that slot is optional.
 *
 * For example, the transclude object `{ slotA: '?myCustomElement' }` maps `<my-custom-element>` elements to
 * the `slotA` slot, which can be accessed via the `$transclude` function or via the {@link ngTransclude} directive.
 *
 * Slots that are not marked as optional (`?`) will trigger a compile time error if there are no matching elements
 * in the transclude content. If you wish to know if an optional slot was filled with content, then you can call
 * `$transclude.isSlotFilled(slotName)` on the transclude function passed to the directive's link function and
 * injectable into the directive's controller.
 *
 *
 * #### Transclusion Functions
 *
 * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion
 * function** to the directive's `link` function and `controller`. This transclusion function is a special
 * **linking function** that will return the compiled contents linked to a new transclusion scope.
 *
 * <div class="alert alert-info">
 * If you are just using {@link ngTransclude} then you don't need to worry about this function, since
 * ngTransclude will deal with it for us.
 * </div>
 *
 * If you want to manually control the insertion and removal of the transcluded content in your directive
 * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery
 * object that contains the compiled DOM, which is linked to the correct transclusion scope.
 *
 * When you call a transclusion function you can pass in a **clone attach function**. This function accepts
 * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded
 * content and the `scope` is the newly created transclusion scope, to which the clone is bound.
 *
 * <div class="alert alert-info">
 * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a transclude function
 * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.
 * </div>
 *
 * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone
 * attach function**:
 *
 * ```js
 * var transcludedContent, transclusionScope;
 *
 * $transclude(function(clone, scope) {
 *   element.append(clone);
 *   transcludedContent = clone;
 *   transclusionScope = scope;
 * });
 * ```
 *
 * Later, if you want to remove the transcluded content from your DOM then you should also destroy the
 * associated transclusion scope:
 *
 * ```js
 * transcludedContent.remove();
 * transclusionScope.$destroy();
 * ```
 *
 * <div class="alert alert-info">
 * **Best Practice**: if you intend to add and remove transcluded content manually in your directive
 * (by calling the transclude function to get the DOM and calling `element.remove()` to remove it),
 * then you are also responsible for calling `$destroy` on the transclusion scope.
 * </div>
 *
 * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}
 * automatically destroy their transcluded clones as necessary so you do not need to worry about this if
 * you are simply using {@link ngTransclude} to inject the transclusion into your directive.
 *
 *
 * #### Transclusion Scopes
 *
 * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion
 * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed
 * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it
 * was taken.
 *
 * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look
 * like this:
 *
 * ```html
 * <div ng-app>
 *   <div isolate>
 *     <div transclusion>
 *     </div>
 *   </div>
 * </div>
 * ```
 *
 * The `$parent` scope hierarchy will look like this:
 *
   ```
   - $rootScope
     - isolate
       - transclusion
   ```
 *
 * but the scopes will inherit prototypically from different scopes to their `$parent`.
 *
   ```
   - $rootScope
     - transclusion
   - isolate
   ```
 *
 *
 * ### Attributes
 *
 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
 * `link()` or `compile()` functions. It has a variety of uses.
 *
 * * *Accessing normalized attribute names:* Directives like 'ngBind' can be expressed in many ways:
 *   'ng:bind', `data-ng-bind`, or 'x-ng-bind'. The attributes object allows for normalized access
 *   to the attributes.
 *
 * * *Directive inter-communication:* All directives share the same instance of the attributes
 *   object which allows the directives to use the attributes object as inter directive
 *   communication.
 *
 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
 *   allowing other directives to read the interpolated value.
 *
 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
 *   the only way to easily get the actual value because during the linking phase the interpolation
 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
 *
 * ```js
 * function linkingFn(scope, elm, attrs, ctrl) {
 *   // get the attribute value
 *   console.log(attrs.ngModel);
 *
 *   // change the attribute
 *   attrs.$set('ngModel', 'new value');
 *
 *   // observe changes to interpolated attribute
 *   attrs.$observe('ngModel', function(value) {
 *     console.log('ngModel has changed value to ' + value);
 *   });
 * }
 * ```
 *
 * ## Example
 *
 * <div class="alert alert-warning">
 * **Note**: Typically directives are registered with `module.directive`. The example below is
 * to illustrate how `$compile` works.
 * </div>
 *
 <example module="compileExample">
   <file name="index.html">
    <script>
      angular.module('compileExample', [], function($compileProvider) {
        // configure new 'compile' directive by passing a directive
        // factory function. The factory function injects the '$compile'
        $compileProvider.directive('compile', function($compile) {
          // directive factory creates a link function
          return function(scope, element, attrs) {
            scope.$watch(
              function(scope) {
                 // watch the 'compile' expression for changes
                return scope.$eval(attrs.compile);
              },
              function(value) {
                // when the 'compile' expression changes
                // assign it into the current DOM
                element.html(value);

                // compile the new DOM and link it to the current
                // scope.
                // NOTE: we only compile .childNodes so that
                // we don't get into infinite loop compiling ourselves
                $compile(element.contents())(scope);
              }
            );
          };
        });
      })
      .controller('GreeterController', ['$scope', function($scope) {
        $scope.name = 'Angular';
        $scope.html = 'Hello {{name}}';
      }]);
    </script>
    <div ng-controller="GreeterController">
      <input ng-model="name"> <br/>
      <textarea ng-model="html"></textarea> <br/>
      <div compile="html"></div>
    </div>
   </file>
   <file name="protractor.js" type="protractor">
     it('should auto compile', function() {
       var textarea = $('textarea');
       var output = $('div[compile]');
       // The initial state reads 'Hello Angular'.
       expect(output.getText()).toBe('Hello Angular');
       textarea.clear();
       textarea.sendKeys('{{name}}!');
       expect(output.getText()).toBe('Angular!');
     });
   </file>
 </example>

 *
 *
 * @param {string|DOMElement} element Element or HTML string to compile into a template function.
 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.
 *
 * <div class="alert alert-danger">
 * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it
 *   e.g. will not use the right outer scope. Please pass the transclude function as a
 *   `parentBoundTranscludeFn` to the link function instead.
 * </div>
 *
 * @param {number} maxPriority only apply directives lower than given priority (Only effects the
 *                 root element(s), not their children)
 * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template
 * (a DOM element/tree) to a scope. Where:
 *
 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
 *  called as: <br/> `cloneAttachFn(clonedElement, scope)` where:
 *
 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
 *      * `scope` - is the current scope with which the linking function is working with.
 *
 *  * `options` - An optional object hash with linking options. If `options` is provided, then the following
 *  keys may be used to control linking behavior:
 *
 *      * `parentBoundTranscludeFn` - the transclude function made available to
 *        directives; if given, it will be passed through to the link functions of
 *        directives found in `element` during compilation.
 *      * `transcludeControllers` - an object hash with keys that map controller names
 *        to a hash with the key `instance`, which maps to the controller instance;
 *        if given, it will make the controllers available to directives on the compileNode:
 *        ```
 *        {
 *          parent: {
 *            instance: parentControllerInstance
 *          }
 *        }
 *        ```
 *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add
 *        the cloned elements; only needed for transcludes that are allowed to contain non html
 *        elements (e.g. SVG elements). See also the directive.controller property.
 *
 * Calling the linking function returns the element of the template. It is either the original
 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
 *
 * After linking the view is not updated until after a call to $digest which typically is done by
 * Angular automatically.
 *
 * If you need access to the bound view, there are two ways to do it:
 *
 * - If you are not asking the linking function to clone the template, create the DOM element(s)
 *   before you send them to the compiler and keep this reference around.
 *   ```js
 *     var element = $compile('<p>{{total}}</p>')(scope);
 *   ```
 *
 * - if on the other hand, you need the element to be cloned, the view reference from the original
 *   example would not point to the clone, but rather to the original template that was cloned. In
 *   this case, you can access the clone via the cloneAttachFn:
 *   ```js
 *     var templateElement = angular.element('<p>{{total}}</p>'),
 *         scope = ....;
 *
 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
 *       //attach the clone to DOM document at the right place
 *     });
 *
 *     //now we have reference to the cloned DOM via `clonedElement`
 *   ```
 *
 *
 * For information on how the compiler works, see the
 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
 */

var $compileMinErr = minErr('$compile');

/**
 * @ngdoc provider
 * @name $compileProvider
 *
 * @description
 */
$CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];
function $CompileProvider($provide, $$sanitizeUriProvider) {
  var hasDirectives = {},
      Suffix = 'Directive',
      COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/,
      CLASS_DIRECTIVE_REGEXP = /(([\w\-]+)(?:\:([^;]+))?;?)/,
      ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'),
      REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/;

  // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
  // The assumption is that future DOM event attribute names will begin with
  // 'on' and be composed of only English letters.
  var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;

  function parseIsolateBindings(scope, directiveName, isController) {
    var LOCAL_REGEXP = /^\s*([@&<]|=(\*?))(\??)\s*(\w*)\s*$/;

    var bindings = {};

    forEach(scope, function(definition, scopeName) {
      var match = definition.match(LOCAL_REGEXP);

      if (!match) {
        throw $compileMinErr('iscp',
            "Invalid {3} for directive '{0}'." +
            " Definition: {... {1}: '{2}' ...}",
            directiveName, scopeName, definition,
            (isController ? "controller bindings definition" :
            "isolate scope definition"));
      }

      bindings[scopeName] = {
        mode: match[1][0],
        collection: match[2] === '*',
        optional: match[3] === '?',
        attrName: match[4] || scopeName
      };
    });

    return bindings;
  }

  function parseDirectiveBindings(directive, directiveName) {
    var bindings = {
      isolateScope: null,
      bindToController: null
    };
    if (isObject(directive.scope)) {
      if (directive.bindToController === true) {
        bindings.bindToController = parseIsolateBindings(directive.scope,
                                                         directiveName, true);
        bindings.isolateScope = {};
      } else {
        bindings.isolateScope = parseIsolateBindings(directive.scope,
                                                     directiveName, false);
      }
    }
    if (isObject(directive.bindToController)) {
      bindings.bindToController =
          parseIsolateBindings(directive.bindToController, directiveName, true);
    }
    if (isObject(bindings.bindToController)) {
      var controller = directive.controller;
      var controllerAs = directive.controllerAs;
      if (!controller) {
        // There is no controller, there may or may not be a controllerAs property
        throw $compileMinErr('noctrl',
              "Cannot bind to controller without directive '{0}'s controller.",
              directiveName);
      } else if (!identifierForController(controller, controllerAs)) {
        // There is a controller, but no identifier or controllerAs property
        throw $compileMinErr('noident',
              "Cannot bind to controller without identifier for directive '{0}'.",
              directiveName);
      }
    }
    return bindings;
  }

  function assertValidDirectiveName(name) {
    var letter = name.charAt(0);
    if (!letter || letter !== lowercase(letter)) {
      throw $compileMinErr('baddir', "Directive name '{0}' is invalid. The first character must be a lowercase letter", name);
    }
    if (name !== name.trim()) {
      throw $compileMinErr('baddir',
            "Directive name '{0}' is invalid. The name should not contain leading or trailing whitespaces",
            name);
    }
  }

  /**
   * @ngdoc method
   * @name $compileProvider#directive
   * @kind function
   *
   * @description
   * Register a new directive with the compiler.
   *
   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
   *    names and the values are the factories.
   * @param {Function|Array} directiveFactory An injectable directive factory function. See the
   *    {@link guide/directive directive guide} and the {@link $compile compile API} for more info.
   * @returns {ng.$compileProvider} Self for chaining.
   */
   this.directive = function registerDirective(name, directiveFactory) {
    assertNotHasOwnProperty(name, 'directive');
    if (isString(name)) {
      assertValidDirectiveName(name);
      assertArg(directiveFactory, 'directiveFactory');
      if (!hasDirectives.hasOwnProperty(name)) {
        hasDirectives[name] = [];
        $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',
          function($injector, $exceptionHandler) {
            var directives = [];
            forEach(hasDirectives[name], function(directiveFactory, index) {
              try {
                var directive = $injector.invoke(directiveFactory);
                if (isFunction(directive)) {
                  directive = { compile: valueFn(directive) };
                } else if (!directive.compile && directive.link) {
                  directive.compile = valueFn(directive.link);
                }
                directive.priority = directive.priority || 0;
                directive.index = index;
                directive.name = directive.name || name;
                directive.require = directive.require || (directive.controller && directive.name);
                directive.restrict = directive.restrict || 'EA';
                var bindings = directive.$$bindings =
                    parseDirectiveBindings(directive, directive.name);
                if (isObject(bindings.isolateScope)) {
                  directive.$$isolateBindings = bindings.isolateScope;
                }
                directive.$$moduleName = directiveFactory.$$moduleName;
                directives.push(directive);
              } catch (e) {
                $exceptionHandler(e);
              }
            });
            return directives;
          }]);
      }
      hasDirectives[name].push(directiveFactory);
    } else {
      forEach(name, reverseParams(registerDirective));
    }
    return this;
  };

  /**
   * @ngdoc method
   * @name $compileProvider#component
   * @module ng
   * @param {string} name Name of the component in camelCase (i.e. `myComp` which will match `<my-comp>`)
   * @param {Object} options Component definition object (a simplified
   *    {@link ng.$compile#directive-definition-object directive definition object}),
   *    with the following properties (all optional):
   *
   *    - `controller` – `{(string|function()=}` – controller constructor function that should be
   *      associated with newly created scope or the name of a {@link ng.$compile#-controller-
   *      registered controller} if passed as a string. An empty `noop` function by default.
   *    - `controllerAs` – `{string=}` – identifier name for to reference the controller in the component's scope.
   *      If present, the controller will be published to scope under the `controllerAs` name.
   *      If not present, this will default to be `$ctrl`.
   *    - `template` – `{string=|function()=}` – html template as a string or a function that
   *      returns an html template as a string which should be used as the contents of this component.
   *      Empty string by default.
   *
   *      If `template` is a function, then it is {@link auto.$injector#invoke injected} with
   *      the following locals:
   *
   *      - `$element` - Current element
   *      - `$attrs` - Current attributes object for the element
   *
   *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html
   *      template that should be used  as the contents of this component.
   *
   *      If `templateUrl` is a function, then it is {@link auto.$injector#invoke injected} with
   *      the following locals:
   *
   *      - `$element` - Current element
   *      - `$attrs` - Current attributes object for the element
   *
   *    - `bindings` – `{object=}` – defines bindings between DOM attributes and component properties.
   *      Component properties are always bound to the component controller and not to the scope.
   *      See {@link ng.$compile#-bindtocontroller- `bindToController`}.
   *    - `transclude` – `{boolean=}` – whether {@link $compile#transclusion content transclusion} is enabled.
   *      Disabled by default.
   *    - `$...` – `{function()=}` – additional annotations to provide to the directive factory function.
   *
   * @returns {ng.$compileProvider} the compile provider itself, for chaining of function calls.
   * @description
   * Register a **component definition** with the compiler. This is a shorthand for registering a special
   * type of directive, which represents a self-contained UI component in your application. Such components
   * are always isolated (i.e. `scope: {}`) and are always restricted to elements (i.e. `restrict: 'E'`).
   *
   * Component definitions are very simple and do not require as much configuration as defining general
   * directives. Component definitions usually consist only of a template and a controller backing it.
   *
   * In order to make the definition easier, components enforce best practices like use of `controllerAs`,
   * `bindToController`. They always have **isolate scope** and are restricted to elements.
   *
   * Here are a few examples of how you would usually define components:
   *
   * ```js
   *   var myMod = angular.module(...);
   *   myMod.component('myComp', {
   *     template: '<div>My name is {{$ctrl.name}}</div>',
   *     controller: function() {
   *       this.name = 'shahar';
   *     }
   *   });
   *
   *   myMod.component('myComp', {
   *     template: '<div>My name is {{$ctrl.name}}</div>',
   *     bindings: {name: '@'}
   *   });
   *
   *   myMod.component('myComp', {
   *     templateUrl: 'views/my-comp.html',
   *     controller: 'MyCtrl as ctrl',
   *     bindings: {name: '@'}
   *   });
   *
   * ```
   * For more examples, and an in-depth guide, see the {@link guide/component component guide}.
   *
   * <br />
   * See also {@link ng.$compileProvider#directive $compileProvider.directive()}.
   */
  this.component = function registerComponent(name, options) {
    var controller = options.controller || function() {};

    function factory($injector) {
      function makeInjectable(fn) {
        if (isFunction(fn) || isArray(fn)) {
          return function(tElement, tAttrs) {
            return $injector.invoke(fn, this, {$element: tElement, $attrs: tAttrs});
          };
        } else {
          return fn;
        }
      }

      var template = (!options.template && !options.templateUrl ? '' : options.template);
      return {
        controller: controller,
        controllerAs: identifierForController(options.controller) || options.controllerAs || '$ctrl',
        template: makeInjectable(template),
        templateUrl: makeInjectable(options.templateUrl),
        transclude: options.transclude,
        scope: {},
        bindToController: options.bindings || {},
        restrict: 'E',
        require: options.require
      };
    }

    // Copy any annotation properties (starting with $) over to the factory function
    // These could be used by libraries such as the new component router
    forEach(options, function(val, key) {
      if (key.charAt(0) === '$') {
        factory[key] = val;
      }
    });

    factory.$inject = ['$injector'];

    return this.directive(name, factory);
  };


  /**
   * @ngdoc method
   * @name $compileProvider#aHrefSanitizationWhitelist
   * @kind function
   *
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during a[href] sanitization.
   *
   * The sanitization is a security measure aimed at preventing XSS attacks via html links.
   *
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.aHrefSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
      return this;
    } else {
      return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
    }
  };


  /**
   * @ngdoc method
   * @name $compileProvider#imgSrcSanitizationWhitelist
   * @kind function
   *
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during img[src] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.imgSrcSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
      return this;
    } else {
      return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
    }
  };

  /**
   * @ngdoc method
   * @name  $compileProvider#debugInfoEnabled
   *
   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the
   * current debugInfoEnabled state
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   *
   * @kind function
   *
   * @description
   * Call this method to enable/disable various debug runtime information in the compiler such as adding
   * binding information and a reference to the current scope on to DOM elements.
   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope
   * * `ng-binding` CSS class
   * * `$binding` data property containing an array of the binding expressions
   *
   * You may want to disable this in production for a significant performance boost. See
   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.
   *
   * The default value is true.
   */
  var debugInfoEnabled = true;
  this.debugInfoEnabled = function(enabled) {
    if (isDefined(enabled)) {
      debugInfoEnabled = enabled;
      return this;
    }
    return debugInfoEnabled;
  };

  this.$get = [
            '$injector', '$interpolate', '$exceptionHandler', '$templateRequest', '$parse',
            '$controller', '$rootScope', '$sce', '$animate', '$$sanitizeUri',
    function($injector,   $interpolate,   $exceptionHandler,   $templateRequest,   $parse,
             $controller,   $rootScope,   $sce,   $animate,   $$sanitizeUri) {

    var SIMPLE_ATTR_NAME = /^\w/;
    var specialAttrHolder = document.createElement('div');
    var Attributes = function(element, attributesToCopy) {
      if (attributesToCopy) {
        var keys = Object.keys(attributesToCopy);
        var i, l, key;

        for (i = 0, l = keys.length; i < l; i++) {
          key = keys[i];
          this[key] = attributesToCopy[key];
        }
      } else {
        this.$attr = {};
      }

      this.$$element = element;
    };

    Attributes.prototype = {
      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$normalize
       * @kind function
       *
       * @description
       * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or
       * `data-`) to its normalized, camelCase form.
       *
       * Also there is special case for Moz prefix starting with upper case letter.
       *
       * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
       *
       * @param {string} name Name to normalize
       */
      $normalize: directiveNormalize,


      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$addClass
       * @kind function
       *
       * @description
       * Adds the CSS class value specified by the classVal parameter to the element. If animations
       * are enabled then an animation will be triggered for the class addition.
       *
       * @param {string} classVal The className value that will be added to the element
       */
      $addClass: function(classVal) {
        if (classVal && classVal.length > 0) {
          $animate.addClass(this.$$element, classVal);
        }
      },

      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$removeClass
       * @kind function
       *
       * @description
       * Removes the CSS class value specified by the classVal parameter from the element. If
       * animations are enabled then an animation will be triggered for the class removal.
       *
       * @param {string} classVal The className value that will be removed from the element
       */
      $removeClass: function(classVal) {
        if (classVal && classVal.length > 0) {
          $animate.removeClass(this.$$element, classVal);
        }
      },

      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$updateClass
       * @kind function
       *
       * @description
       * Adds and removes the appropriate CSS class values to the element based on the difference
       * between the new and old CSS class values (specified as newClasses and oldClasses).
       *
       * @param {string} newClasses The current CSS className value
       * @param {string} oldClasses The former CSS className value
       */
      $updateClass: function(newClasses, oldClasses) {
        var toAdd = tokenDifference(newClasses, oldClasses);
        if (toAdd && toAdd.length) {
          $animate.addClass(this.$$element, toAdd);
        }

        var toRemove = tokenDifference(oldClasses, newClasses);
        if (toRemove && toRemove.length) {
          $animate.removeClass(this.$$element, toRemove);
        }
      },

      /**
       * Set a normalized attribute on the element in a way such that all directives
       * can share the attribute. This function properly handles boolean attributes.
       * @param {string} key Normalized key. (ie ngAttribute)
       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.
       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.
       *     Defaults to true.
       * @param {string=} attrName Optional none normalized name. Defaults to key.
       */
      $set: function(key, value, writeAttr, attrName) {
        // TODO: decide whether or not to throw an error if "class"
        //is set through this function since it may cause $updateClass to
        //become unstable.

        var node = this.$$element[0],
            booleanKey = getBooleanAttrName(node, key),
            aliasedKey = getAliasedAttrName(key),
            observer = key,
            nodeName;

        if (booleanKey) {
          this.$$element.prop(key, value);
          attrName = booleanKey;
        } else if (aliasedKey) {
          this[aliasedKey] = value;
          observer = aliasedKey;
        }

        this[key] = value;

        // translate normalized key to actual key
        if (attrName) {
          this.$attr[key] = attrName;
        } else {
          attrName = this.$attr[key];
          if (!attrName) {
            this.$attr[key] = attrName = snake_case(key, '-');
          }
        }

        nodeName = nodeName_(this.$$element);

        if ((nodeName === 'a' && (key === 'href' || key === 'xlinkHref')) ||
            (nodeName === 'img' && key === 'src')) {
          // sanitize a[href] and img[src] values
          this[key] = value = $$sanitizeUri(value, key === 'src');
        } else if (nodeName === 'img' && key === 'srcset') {
          // sanitize img[srcset] values
          var result = "";

          // first check if there are spaces because it's not the same pattern
          var trimmedSrcset = trim(value);
          //                (   999x   ,|   999w   ,|   ,|,   )
          var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;
          var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/;

          // split srcset into tuple of uri and descriptor except for the last item
          var rawUris = trimmedSrcset.split(pattern);

          // for each tuples
          var nbrUrisWith2parts = Math.floor(rawUris.length / 2);
          for (var i = 0; i < nbrUrisWith2parts; i++) {
            var innerIdx = i * 2;
            // sanitize the uri
            result += $$sanitizeUri(trim(rawUris[innerIdx]), true);
            // add the descriptor
            result += (" " + trim(rawUris[innerIdx + 1]));
          }

          // split the last item into uri and descriptor
          var lastTuple = trim(rawUris[i * 2]).split(/\s/);

          // sanitize the last uri
          result += $$sanitizeUri(trim(lastTuple[0]), true);

          // and add the last descriptor if any
          if (lastTuple.length === 2) {
            result += (" " + trim(lastTuple[1]));
          }
          this[key] = value = result;
        }

        if (writeAttr !== false) {
          if (value === null || isUndefined(value)) {
            this.$$element.removeAttr(attrName);
          } else {
            if (SIMPLE_ATTR_NAME.test(attrName)) {
              this.$$element.attr(attrName, value);
            } else {
              setSpecialAttr(this.$$element[0], attrName, value);
            }
          }
        }

        // fire observers
        var $$observers = this.$$observers;
        $$observers && forEach($$observers[observer], function(fn) {
          try {
            fn(value);
          } catch (e) {
            $exceptionHandler(e);
          }
        });
      },


      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$observe
       * @kind function
       *
       * @description
       * Observes an interpolated attribute.
       *
       * The observer function will be invoked once during the next `$digest` following
       * compilation. The observer is then invoked whenever the interpolated value
       * changes.
       *
       * @param {string} key Normalized key. (ie ngAttribute) .
       * @param {function(interpolatedValue)} fn Function that will be called whenever
                the interpolated value of the attribute changes.
       *        See the {@link guide/interpolation#how-text-and-attribute-bindings-work Interpolation
       *        guide} for more info.
       * @returns {function()} Returns a deregistration function for this observer.
       */
      $observe: function(key, fn) {
        var attrs = this,
            $$observers = (attrs.$$observers || (attrs.$$observers = createMap())),
            listeners = ($$observers[key] || ($$observers[key] = []));

        listeners.push(fn);
        $rootScope.$evalAsync(function() {
          if (!listeners.$$inter && attrs.hasOwnProperty(key) && !isUndefined(attrs[key])) {
            // no one registered attribute interpolation function, so lets call it manually
            fn(attrs[key]);
          }
        });

        return function() {
          arrayRemove(listeners, fn);
        };
      }
    };

    function setSpecialAttr(element, attrName, value) {
      // Attributes names that do not start with letters (such as `(click)`) cannot be set using `setAttribute`
      // so we have to jump through some hoops to get such an attribute
      // https://github.com/angular/angular.js/pull/13318
      specialAttrHolder.innerHTML = "<span " + attrName + ">";
      var attributes = specialAttrHolder.firstChild.attributes;
      var attribute = attributes[0];
      // We have to remove the attribute from its container element before we can add it to the destination element
      attributes.removeNamedItem(attribute.name);
      attribute.value = value;
      element.attributes.setNamedItem(attribute);
    }

    function safeAddClass($element, className) {
      try {
        $element.addClass(className);
      } catch (e) {
        // ignore, since it means that we are trying to set class on
        // SVG element, where class name is read-only.
      }
    }


    var startSymbol = $interpolate.startSymbol(),
        endSymbol = $interpolate.endSymbol(),
        denormalizeTemplate = (startSymbol == '{{' && endSymbol  == '}}')
            ? identity
            : function denormalizeTemplate(template) {
              return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
        },
        NG_ATTR_BINDING = /^ngAttr[A-Z]/;
    var MULTI_ELEMENT_DIR_RE = /^(.+)Start$/;

    compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {
      var bindings = $element.data('$binding') || [];

      if (isArray(binding)) {
        bindings = bindings.concat(binding);
      } else {
        bindings.push(binding);
      }

      $element.data('$binding', bindings);
    } : noop;

    compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {
      safeAddClass($element, 'ng-binding');
    } : noop;

    compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {
      var dataName = isolated ? (noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope') : '$scope';
      $element.data(dataName, scope);
    } : noop;

    compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {
      safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');
    } : noop;

    return compile;

    //================================

    function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,
                        previousCompileContext) {
      if (!($compileNodes instanceof jqLite)) {
        // jquery always rewraps, whereas we need to preserve the original selector so that we can
        // modify it.
        $compileNodes = jqLite($compileNodes);
      }

      var NOT_EMPTY = /\S+/;

      // We can not compile top level text elements since text nodes can be merged and we will
      // not be able to attach scope data to them, so we will wrap them in <span>
      for (var i = 0, len = $compileNodes.length; i < len; i++) {
        var domNode = $compileNodes[i];

        if (domNode.nodeType === NODE_TYPE_TEXT && domNode.nodeValue.match(NOT_EMPTY) /* non-empty */) {
          jqLiteWrapNode(domNode, $compileNodes[i] = document.createElement('span'));
        }
      }

      var compositeLinkFn =
              compileNodes($compileNodes, transcludeFn, $compileNodes,
                           maxPriority, ignoreDirective, previousCompileContext);
      compile.$$addScopeClass($compileNodes);
      var namespace = null;
      return function publicLinkFn(scope, cloneConnectFn, options) {
        assertArg(scope, 'scope');

        if (previousCompileContext && previousCompileContext.needsNewScope) {
          // A parent directive did a replace and a directive on this element asked
          // for transclusion, which caused us to lose a layer of element on which
          // we could hold the new transclusion scope, so we will create it manually
          // here.
          scope = scope.$parent.$new();
        }

        options = options || {};
        var parentBoundTranscludeFn = options.parentBoundTranscludeFn,
          transcludeControllers = options.transcludeControllers,
          futureParentElement = options.futureParentElement;

        // When `parentBoundTranscludeFn` is passed, it is a
        // `controllersBoundTransclude` function (it was previously passed
        // as `transclude` to directive.link) so we must unwrap it to get
        // its `boundTranscludeFn`
        if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {
          parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;
        }

        if (!namespace) {
          namespace = detectNamespaceForChildElements(futureParentElement);
        }
        var $linkNode;
        if (namespace !== 'html') {
          // When using a directive with replace:true and templateUrl the $compileNodes
          // (or a child element inside of them)
          // might change, so we need to recreate the namespace adapted compileNodes
          // for call to the link function.
          // Note: This will already clone the nodes...
          $linkNode = jqLite(
            wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html())
          );
        } else if (cloneConnectFn) {
          // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
          // and sometimes changes the structure of the DOM.
          $linkNode = JQLitePrototype.clone.call($compileNodes);
        } else {
          $linkNode = $compileNodes;
        }

        if (transcludeControllers) {
          for (var controllerName in transcludeControllers) {
            $linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);
          }
        }

        compile.$$addScopeInfo($linkNode, scope);

        if (cloneConnectFn) cloneConnectFn($linkNode, scope);
        if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);
        return $linkNode;
      };
    }

    function detectNamespaceForChildElements(parentElement) {
      // TODO: Make this detect MathML as well...
      var node = parentElement && parentElement[0];
      if (!node) {
        return 'html';
      } else {
        return nodeName_(node) !== 'foreignobject' && toString.call(node).match(/SVG/) ? 'svg' : 'html';
      }
    }

    /**
     * Compile function matches each node in nodeList against the directives. Once all directives
     * for a particular node are collected their compile functions are executed. The compile
     * functions return values - the linking functions - are combined into a composite linking
     * function, which is the a linking function for the node.
     *
     * @param {NodeList} nodeList an array of nodes or NodeList to compile
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
     *        scope argument is auto-generated to the new child of the transcluded parent scope.
     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
     *        the rootElement must be set the jqLite collection of the compile root. This is
     *        needed so that the jqLite collection items can be replaced with widgets.
     * @param {number=} maxPriority Max directive priority.
     * @returns {Function} A composite linking function of all of the matched directives or null.
     */
    function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,
                            previousCompileContext) {
      var linkFns = [],
          attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;

      for (var i = 0; i < nodeList.length; i++) {
        attrs = new Attributes();

        // we must always refer to nodeList[i] since the nodes can be replaced underneath us.
        directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,
                                        ignoreDirective);

        nodeLinkFn = (directives.length)
            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,
                                      null, [], [], previousCompileContext)
            : null;

        if (nodeLinkFn && nodeLinkFn.scope) {
          compile.$$addScopeClass(attrs.$$element);
        }

        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||
                      !(childNodes = nodeList[i].childNodes) ||
                      !childNodes.length)
            ? null
            : compileNodes(childNodes,
                 nodeLinkFn ? (
                  (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement)
                     && nodeLinkFn.transclude) : transcludeFn);

        if (nodeLinkFn || childLinkFn) {
          linkFns.push(i, nodeLinkFn, childLinkFn);
          linkFnFound = true;
          nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;
        }

        //use the previous context only for the first element in the virtual group
        previousCompileContext = null;
      }

      // return a linking function if we have found anything, null otherwise
      return linkFnFound ? compositeLinkFn : null;

      function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {
        var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;
        var stableNodeList;


        if (nodeLinkFnFound) {
          // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our
          // offsets don't get screwed up
          var nodeListLength = nodeList.length;
          stableNodeList = new Array(nodeListLength);

          // create a sparse array by only copying the elements which have a linkFn
          for (i = 0; i < linkFns.length; i+=3) {
            idx = linkFns[i];
            stableNodeList[idx] = nodeList[idx];
          }
        } else {
          stableNodeList = nodeList;
        }

        for (i = 0, ii = linkFns.length; i < ii;) {
          node = stableNodeList[linkFns[i++]];
          nodeLinkFn = linkFns[i++];
          childLinkFn = linkFns[i++];

          if (nodeLinkFn) {
            if (nodeLinkFn.scope) {
              childScope = scope.$new();
              compile.$$addScopeInfo(jqLite(node), childScope);
            } else {
              childScope = scope;
            }

            if (nodeLinkFn.transcludeOnThisElement) {
              childBoundTranscludeFn = createBoundTranscludeFn(
                  scope, nodeLinkFn.transclude, parentBoundTranscludeFn);

            } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {
              childBoundTranscludeFn = parentBoundTranscludeFn;

            } else if (!parentBoundTranscludeFn && transcludeFn) {
              childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);

            } else {
              childBoundTranscludeFn = null;
            }

            nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);

          } else if (childLinkFn) {
            childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);
          }
        }
      }
    }

    function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {

      var boundTranscludeFn = function(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {

        if (!transcludedScope) {
          transcludedScope = scope.$new(false, containingScope);
          transcludedScope.$$transcluded = true;
        }

        return transcludeFn(transcludedScope, cloneFn, {
          parentBoundTranscludeFn: previousBoundTranscludeFn,
          transcludeControllers: controllers,
          futureParentElement: futureParentElement
        });
      };

      // We need  to attach the transclusion slots onto the `boundTranscludeFn`
      // so that they are available inside the `controllersBoundTransclude` function
      var boundSlots = boundTranscludeFn.$$slots = createMap();
      for (var slotName in transcludeFn.$$slots) {
        if (transcludeFn.$$slots[slotName]) {
          boundSlots[slotName] = createBoundTranscludeFn(scope, transcludeFn.$$slots[slotName], previousBoundTranscludeFn);
        } else {
          boundSlots[slotName] = null;
        }
      }

      return boundTranscludeFn;
    }

    /**
     * Looks for directives on the given node and adds them to the directive collection which is
     * sorted.
     *
     * @param node Node to search.
     * @param directives An array to which the directives are added to. This array is sorted before
     *        the function returns.
     * @param attrs The shared attrs object which is used to populate the normalized attributes.
     * @param {number=} maxPriority Max directive priority.
     */
    function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
      var nodeType = node.nodeType,
          attrsMap = attrs.$attr,
          match,
          className;

      switch (nodeType) {
        case NODE_TYPE_ELEMENT: /* Element */
          // use the node name: <directive>
          addDirective(directives,
              directiveNormalize(nodeName_(node)), 'E', maxPriority, ignoreDirective);

          // iterate over the attributes
          for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes,
                   j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
            var attrStartName = false;
            var attrEndName = false;

            attr = nAttrs[j];
            name = attr.name;
            value = trim(attr.value);

            // support ngAttr attribute binding
            ngAttrName = directiveNormalize(name);
            if (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) {
              name = name.replace(PREFIX_REGEXP, '')
                .substr(8).replace(/_(.)/g, function(match, letter) {
                  return letter.toUpperCase();
                });
            }

            var multiElementMatch = ngAttrName.match(MULTI_ELEMENT_DIR_RE);
            if (multiElementMatch && directiveIsMultiElement(multiElementMatch[1])) {
              attrStartName = name;
              attrEndName = name.substr(0, name.length - 5) + 'end';
              name = name.substr(0, name.length - 6);
            }

            nName = directiveNormalize(name.toLowerCase());
            attrsMap[nName] = name;
            if (isNgAttr || !attrs.hasOwnProperty(nName)) {
                attrs[nName] = value;
                if (getBooleanAttrName(node, nName)) {
                  attrs[nName] = true; // presence means true
                }
            }
            addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);
            addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,
                          attrEndName);
          }

          // use class as directive
          className = node.className;
          if (isObject(className)) {
              // Maybe SVGAnimatedString
              className = className.animVal;
          }
          if (isString(className) && className !== '') {
            while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {
              nName = directiveNormalize(match[2]);
              if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
                attrs[nName] = trim(match[3]);
              }
              className = className.substr(match.index + match[0].length);
            }
          }
          break;
        case NODE_TYPE_TEXT: /* Text Node */
          if (msie === 11) {
            // Workaround for #11781
            while (node.parentNode && node.nextSibling && node.nextSibling.nodeType === NODE_TYPE_TEXT) {
              node.nodeValue = node.nodeValue + node.nextSibling.nodeValue;
              node.parentNode.removeChild(node.nextSibling);
            }
          }
          addTextInterpolateDirective(directives, node.nodeValue);
          break;
        case NODE_TYPE_COMMENT: /* Comment */
          try {
            match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
            if (match) {
              nName = directiveNormalize(match[1]);
              if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
                attrs[nName] = trim(match[2]);
              }
            }
          } catch (e) {
            // turns out that under some circumstances IE9 throws errors when one attempts to read
            // comment's node value.
            // Just ignore it and continue. (Can't seem to reproduce in test case.)
          }
          break;
      }

      directives.sort(byPriority);
      return directives;
    }

    /**
     * Given a node with an directive-start it collects all of the siblings until it finds
     * directive-end.
     * @param node
     * @param attrStart
     * @param attrEnd
     * @returns {*}
     */
    function groupScan(node, attrStart, attrEnd) {
      var nodes = [];
      var depth = 0;
      if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
        do {
          if (!node) {
            throw $compileMinErr('uterdir',
                      "Unterminated attribute, found '{0}' but no matching '{1}' found.",
                      attrStart, attrEnd);
          }
          if (node.nodeType == NODE_TYPE_ELEMENT) {
            if (node.hasAttribute(attrStart)) depth++;
            if (node.hasAttribute(attrEnd)) depth--;
          }
          nodes.push(node);
          node = node.nextSibling;
        } while (depth > 0);
      } else {
        nodes.push(node);
      }

      return jqLite(nodes);
    }

    /**
     * Wrapper for linking function which converts normal linking function into a grouped
     * linking function.
     * @param linkFn
     * @param attrStart
     * @param attrEnd
     * @returns {Function}
     */
    function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
      return function(scope, element, attrs, controllers, transcludeFn) {
        element = groupScan(element[0], attrStart, attrEnd);
        return linkFn(scope, element, attrs, controllers, transcludeFn);
      };
    }

    /**
     * A function generator that is used to support both eager and lazy compilation
     * linking function.
     * @param eager
     * @param $compileNodes
     * @param transcludeFn
     * @param maxPriority
     * @param ignoreDirective
     * @param previousCompileContext
     * @returns {Function}
     */
    function compilationGenerator(eager, $compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext) {
        if (eager) {
            return compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext);
        }

        var compiled;

        return function() {
            if (!compiled) {
                compiled = compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext);

                // Null out all of these references in order to make them eligible for garbage collection
                // since this is a potentially long lived closure
                $compileNodes = transcludeFn = previousCompileContext = null;
            }

            return compiled.apply(this, arguments);
        };
    }

    /**
     * Once the directives have been collected, their compile functions are executed. This method
     * is responsible for inlining directive templates as well as terminating the application
     * of the directives if the terminal directive has been reached.
     *
     * @param {Array} directives Array of collected directives to execute their compile function.
     *        this needs to be pre-sorted by priority order.
     * @param {Node} compileNode The raw DOM node to apply the compile functions to
     * @param {Object} templateAttrs The shared attribute function
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
     *                                                  scope argument is auto-generated to the new
     *                                                  child of the transcluded parent scope.
     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
     *                              argument has the root jqLite array so that we can replace nodes
     *                              on it.
     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
     *                                           compiling the transclusion.
     * @param {Array.<Function>} preLinkFns
     * @param {Array.<Function>} postLinkFns
     * @param {Object} previousCompileContext Context used for previous compilation of the current
     *                                        node
     * @returns {Function} linkFn
     */
    function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,
                                   jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,
                                   previousCompileContext) {
      previousCompileContext = previousCompileContext || {};

      var terminalPriority = -Number.MAX_VALUE,
          newScopeDirective = previousCompileContext.newScopeDirective,
          controllerDirectives = previousCompileContext.controllerDirectives,
          newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,
          templateDirective = previousCompileContext.templateDirective,
          nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,
          hasTranscludeDirective = false,
          hasTemplate = false,
          hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,
          $compileNode = templateAttrs.$$element = jqLite(compileNode),
          directive,
          directiveName,
          $template,
          replaceDirective = originalReplaceDirective,
          childTranscludeFn = transcludeFn,
          linkFn,
          didScanForMultipleTransclusion = false,
          mightHaveMultipleTransclusionError = false,
          directiveValue;

      // executes all directives on the current element
      for (var i = 0, ii = directives.length; i < ii; i++) {
        directive = directives[i];
        var attrStart = directive.$$start;
        var attrEnd = directive.$$end;

        // collect multiblock sections
        if (attrStart) {
          $compileNode = groupScan(compileNode, attrStart, attrEnd);
        }
        $template = undefined;

        if (terminalPriority > directive.priority) {
          break; // prevent further processing of directives
        }

        if (directiveValue = directive.scope) {

          // skip the check for directives with async templates, we'll check the derived sync
          // directive when the template arrives
          if (!directive.templateUrl) {
            if (isObject(directiveValue)) {
              // This directive is trying to add an isolated scope.
              // Check that there is no scope of any kind already
              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective,
                                directive, $compileNode);
              newIsolateScopeDirective = directive;
            } else {
              // This directive is trying to add a child scope.
              // Check that there is no isolated scope already
              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,
                                $compileNode);
            }
          }

          newScopeDirective = newScopeDirective || directive;
        }

        directiveName = directive.name;

        // If we encounter a condition that can result in transclusion on the directive,
        // then scan ahead in the remaining directives for others that may cause a multiple
        // transclusion error to be thrown during the compilation process.  If a matching directive
        // is found, then we know that when we encounter a transcluded directive, we need to eagerly
        // compile the `transclude` function rather than doing it lazily in order to throw
        // exceptions at the correct time
        if (!didScanForMultipleTransclusion && ((directive.replace && (directive.templateUrl || directive.template))
            || (directive.transclude && !directive.$$tlb))) {
                var candidateDirective;

                for (var scanningIndex = i + 1; candidateDirective = directives[scanningIndex++];) {
                    if ((candidateDirective.transclude && !candidateDirective.$$tlb)
                        || (candidateDirective.replace && (candidateDirective.templateUrl || candidateDirective.template))) {
                        mightHaveMultipleTransclusionError = true;
                        break;
                    }
                }

                didScanForMultipleTransclusion = true;
        }

        if (!directive.templateUrl && directive.controller) {
          directiveValue = directive.controller;
          controllerDirectives = controllerDirectives || createMap();
          assertNoDuplicate("'" + directiveName + "' controller",
              controllerDirectives[directiveName], directive, $compileNode);
          controllerDirectives[directiveName] = directive;
        }

        if (directiveValue = directive.transclude) {
          hasTranscludeDirective = true;

          // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
          // This option should only be used by directives that know how to safely handle element transclusion,
          // where the transcluded nodes are added or replaced after linking.
          if (!directive.$$tlb) {
            assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);
            nonTlbTranscludeDirective = directive;
          }

          if (directiveValue == 'element') {
            hasElementTranscludeDirective = true;
            terminalPriority = directive.priority;
            $template = $compileNode;
            $compileNode = templateAttrs.$$element =
                jqLite(document.createComment(' ' + directiveName + ': ' +
                                              templateAttrs[directiveName] + ' '));
            compileNode = $compileNode[0];
            replaceWith(jqCollection, sliceArgs($template), compileNode);

            childTranscludeFn = compilationGenerator(mightHaveMultipleTransclusionError, $template, transcludeFn, terminalPriority,
                                        replaceDirective && replaceDirective.name, {
                                          // Don't pass in:
                                          // - controllerDirectives - otherwise we'll create duplicates controllers
                                          // - newIsolateScopeDirective or templateDirective - combining templates with
                                          //   element transclusion doesn't make sense.
                                          //
                                          // We need only nonTlbTranscludeDirective so that we prevent putting transclusion
                                          // on the same element more than once.
                                          nonTlbTranscludeDirective: nonTlbTranscludeDirective
                                        });
          } else {

            var slots = createMap();

            $template = jqLite(jqLiteClone(compileNode)).contents();

            if (isObject(directiveValue)) {

              // We have transclusion slots,
              // collect them up, compile them and store their transclusion functions
              $template = [];

              var slotMap = createMap();
              var filledSlots = createMap();

              // Parse the element selectors
              forEach(directiveValue, function(elementSelector, slotName) {
                // If an element selector starts with a ? then it is optional
                var optional = (elementSelector.charAt(0) === '?');
                elementSelector = optional ? elementSelector.substring(1) : elementSelector;

                slotMap[elementSelector] = slotName;

                // We explicitly assign `null` since this implies that a slot was defined but not filled.
                // Later when calling boundTransclusion functions with a slot name we only error if the
                // slot is `undefined`
                slots[slotName] = null;

                // filledSlots contains `true` for all slots that are either optional or have been
                // filled. This is used to check that we have not missed any required slots
                filledSlots[slotName] = optional;
              });

              // Add the matching elements into their slot
              forEach($compileNode.contents(), function(node) {
                var slotName = slotMap[directiveNormalize(nodeName_(node))];
                if (slotName) {
                  filledSlots[slotName] = true;
                  slots[slotName] = slots[slotName] || [];
                  slots[slotName].push(node);
                } else {
                  $template.push(node);
                }
              });

              // Check for required slots that were not filled
              forEach(filledSlots, function(filled, slotName) {
                if (!filled) {
                  throw $compileMinErr('reqslot', 'Required transclusion slot `{0}` was not filled.', slotName);
                }
              });

              for (var slotName in slots) {
                if (slots[slotName]) {
                  // Only define a transclusion function if the slot was filled
                  slots[slotName] = compilationGenerator(mightHaveMultipleTransclusionError, slots[slotName], transcludeFn);
                }
              }
            }

            $compileNode.empty(); // clear contents
            childTranscludeFn = compilationGenerator(mightHaveMultipleTransclusionError, $template, transcludeFn, undefined,
                undefined, { needsNewScope: directive.$$isolateScope || directive.$$newScope});
            childTranscludeFn.$$slots = slots;
          }
        }

        if (directive.template) {
          hasTemplate = true;
          assertNoDuplicate('template', templateDirective, directive, $compileNode);
          templateDirective = directive;

          directiveValue = (isFunction(directive.template))
              ? directive.template($compileNode, templateAttrs)
              : directive.template;

          directiveValue = denormalizeTemplate(directiveValue);

          if (directive.replace) {
            replaceDirective = directive;
            if (jqLiteIsTextNode(directiveValue)) {
              $template = [];
            } else {
              $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));
            }
            compileNode = $template[0];

            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
              throw $compileMinErr('tplrt',
                  "Template for directive '{0}' must have exactly one root element. {1}",
                  directiveName, '');
            }

            replaceWith(jqCollection, $compileNode, compileNode);

            var newTemplateAttrs = {$attr: {}};

            // combine directives from the original node and from the template:
            // - take the array of directives for this element
            // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
            // - collect directives from the template and sort them by priority
            // - combine directives as: processed + template + unprocessed
            var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
            var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));

            if (newIsolateScopeDirective || newScopeDirective) {
              // The original directive caused the current element to be replaced but this element
              // also needs to have a new scope, so we need to tell the template directives
              // that they would need to get their scope from further up, if they require transclusion
              markDirectiveScope(templateDirectives, newIsolateScopeDirective, newScopeDirective);
            }
            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);

            ii = directives.length;
          } else {
            $compileNode.html(directiveValue);
          }
        }

        if (directive.templateUrl) {
          hasTemplate = true;
          assertNoDuplicate('template', templateDirective, directive, $compileNode);
          templateDirective = directive;

          if (directive.replace) {
            replaceDirective = directive;
          }

          nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,
              templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {
                controllerDirectives: controllerDirectives,
                newScopeDirective: (newScopeDirective !== directive) && newScopeDirective,
                newIsolateScopeDirective: newIsolateScopeDirective,
                templateDirective: templateDirective,
                nonTlbTranscludeDirective: nonTlbTranscludeDirective
              });
          ii = directives.length;
        } else if (directive.compile) {
          try {
            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
            if (isFunction(linkFn)) {
              addLinkFns(null, linkFn, attrStart, attrEnd);
            } else if (linkFn) {
              addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);
            }
          } catch (e) {
            $exceptionHandler(e, startingTag($compileNode));
          }
        }

        if (directive.terminal) {
          nodeLinkFn.terminal = true;
          terminalPriority = Math.max(terminalPriority, directive.priority);
        }

      }

      nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
      nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;
      nodeLinkFn.templateOnThisElement = hasTemplate;
      nodeLinkFn.transclude = childTranscludeFn;

      previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;

      // might be normal or delayed nodeLinkFn depending on if templateUrl is present
      return nodeLinkFn;

      ////////////////////

      function addLinkFns(pre, post, attrStart, attrEnd) {
        if (pre) {
          if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
          pre.require = directive.require;
          pre.directiveName = directiveName;
          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
            pre = cloneAndAnnotateFn(pre, {isolateScope: true});
          }
          preLinkFns.push(pre);
        }
        if (post) {
          if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
          post.require = directive.require;
          post.directiveName = directiveName;
          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
            post = cloneAndAnnotateFn(post, {isolateScope: true});
          }
          postLinkFns.push(post);
        }
      }


      function getControllers(directiveName, require, $element, elementControllers) {
        var value;

        if (isString(require)) {
          var match = require.match(REQUIRE_PREFIX_REGEXP);
          var name = require.substring(match[0].length);
          var inheritType = match[1] || match[3];
          var optional = match[2] === '?';

          //If only parents then start at the parent element
          if (inheritType === '^^') {
            $element = $element.parent();
          //Otherwise attempt getting the controller from elementControllers in case
          //the element is transcluded (and has no data) and to avoid .data if possible
          } else {
            value = elementControllers && elementControllers[name];
            value = value && value.instance;
          }

          if (!value) {
            var dataName = '$' + name + 'Controller';
            value = inheritType ? $element.inheritedData(dataName) : $element.data(dataName);
          }

          if (!value && !optional) {
            throw $compileMinErr('ctreq',
                "Controller '{0}', required by directive '{1}', can't be found!",
                name, directiveName);
          }
        } else if (isArray(require)) {
          value = [];
          for (var i = 0, ii = require.length; i < ii; i++) {
            value[i] = getControllers(directiveName, require[i], $element, elementControllers);
          }
        } else if (isObject(require)) {
          value = {};
          forEach(require, function(controller, property) {
            value[property] = getControllers(directiveName, controller, $element, elementControllers);
          });
        }

        return value || null;
      }

      function setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope) {
        var elementControllers = createMap();
        for (var controllerKey in controllerDirectives) {
          var directive = controllerDirectives[controllerKey];
          var locals = {
            $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
            $element: $element,
            $attrs: attrs,
            $transclude: transcludeFn
          };

          var controller = directive.controller;
          if (controller == '@') {
            controller = attrs[directive.name];
          }

          var controllerInstance = $controller(controller, locals, true, directive.controllerAs);

          // For directives with element transclusion the element is a comment,
          // but jQuery .data doesn't support attaching data to comment nodes as it's hard to
          // clean up (http://bugs.jquery.com/ticket/8335).
          // Instead, we save the controllers for the element in a local hash and attach to .data
          // later, once we have the actual element.
          elementControllers[directive.name] = controllerInstance;
          if (!hasElementTranscludeDirective) {
            $element.data('$' + directive.name + 'Controller', controllerInstance.instance);
          }
        }
        return elementControllers;
      }

      function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {
        var i, ii, linkFn, isolateScope, controllerScope, elementControllers, transcludeFn, $element,
            attrs, removeScopeBindingWatches, removeControllerBindingWatches;

        if (compileNode === linkNode) {
          attrs = templateAttrs;
          $element = templateAttrs.$$element;
        } else {
          $element = jqLite(linkNode);
          attrs = new Attributes($element, templateAttrs);
        }

        controllerScope = scope;
        if (newIsolateScopeDirective) {
          isolateScope = scope.$new(true);
        } else if (newScopeDirective) {
          controllerScope = scope.$parent;
        }

        if (boundTranscludeFn) {
          // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`
          // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`
          transcludeFn = controllersBoundTransclude;
          transcludeFn.$$boundTransclude = boundTranscludeFn;
          // expose the slots on the `$transclude` function
          transcludeFn.isSlotFilled = function(slotName) {
            return !!boundTranscludeFn.$$slots[slotName];
          };
        }

        if (controllerDirectives) {
          elementControllers = setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope);
        }

        if (newIsolateScopeDirective) {
          // Initialize isolate scope bindings for new isolate scope directive.
          compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective ||
              templateDirective === newIsolateScopeDirective.$$originalDirective)));
          compile.$$addScopeClass($element, true);
          isolateScope.$$isolateBindings =
              newIsolateScopeDirective.$$isolateBindings;
          removeScopeBindingWatches = initializeDirectiveBindings(scope, attrs, isolateScope,
                                        isolateScope.$$isolateBindings,
                                        newIsolateScopeDirective);
          if (removeScopeBindingWatches) {
            isolateScope.$on('$destroy', removeScopeBindingWatches);
          }
        }

        // Initialize bindToController bindings
        for (var name in elementControllers) {
          var controllerDirective = controllerDirectives[name];
          var controller = elementControllers[name];
          var bindings = controllerDirective.$$bindings.bindToController;

          if (controller.identifier && bindings) {
            removeControllerBindingWatches =
              initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
          }

          var controllerResult = controller();
          if (controllerResult !== controller.instance) {
            // If the controller constructor has a return value, overwrite the instance
            // from setupControllers
            controller.instance = controllerResult;
            $element.data('$' + controllerDirective.name + 'Controller', controllerResult);
            removeControllerBindingWatches && removeControllerBindingWatches();
            removeControllerBindingWatches =
              initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
          }
        }

        // Bind the required controllers to the controller, if `require` is an object and `bindToController` is truthy
        forEach(controllerDirectives, function(controllerDirective, name) {
          var require = controllerDirective.require;
          if (controllerDirective.bindToController && !isArray(require) && isObject(require)) {
            extend(elementControllers[name].instance, getControllers(name, require, $element, elementControllers));
          }
        });

        // Trigger the `$onInit` method on all controllers that have one
        forEach(elementControllers, function(controller) {
          if (isFunction(controller.instance.$onInit)) {
            controller.instance.$onInit();
          }
        });

        // PRELINKING
        for (i = 0, ii = preLinkFns.length; i < ii; i++) {
          linkFn = preLinkFns[i];
          invokeLinkFn(linkFn,
              linkFn.isolateScope ? isolateScope : scope,
              $element,
              attrs,
              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
              transcludeFn
          );
        }

        // RECURSION
        // We only pass the isolate scope, if the isolate directive has a template,
        // otherwise the child elements do not belong to the isolate directive.
        var scopeToChild = scope;
        if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
          scopeToChild = isolateScope;
        }
        childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);

        // POSTLINKING
        for (i = postLinkFns.length - 1; i >= 0; i--) {
          linkFn = postLinkFns[i];
          invokeLinkFn(linkFn,
              linkFn.isolateScope ? isolateScope : scope,
              $element,
              attrs,
              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
              transcludeFn
          );
        }

        // This is the function that is injected as `$transclude`.
        // Note: all arguments are optional!
        function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement, slotName) {
          var transcludeControllers;
          // No scope passed in:
          if (!isScope(scope)) {
            slotName = futureParentElement;
            futureParentElement = cloneAttachFn;
            cloneAttachFn = scope;
            scope = undefined;
          }

          if (hasElementTranscludeDirective) {
            transcludeControllers = elementControllers;
          }
          if (!futureParentElement) {
            futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;
          }
          if (slotName) {
            // slotTranscludeFn can be one of three things:
            //  * a transclude function - a filled slot
            //  * `null` - an optional slot that was not filled
            //  * `undefined` - a slot that was not declared (i.e. invalid)
            var slotTranscludeFn = boundTranscludeFn.$$slots[slotName];
            if (slotTranscludeFn) {
              return slotTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
            } else if (isUndefined(slotTranscludeFn)) {
              throw $compileMinErr('noslot',
               'No parent directive that requires a transclusion with slot name "{0}". ' +
               'Element: {1}',
               slotName, startingTag($element));
            }
          } else {
            return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
          }
        }
      }
    }

    // Depending upon the context in which a directive finds itself it might need to have a new isolated
    // or child scope created. For instance:
    // * if the directive has been pulled into a template because another directive with a higher priority
    // asked for element transclusion
    // * if the directive itself asks for transclusion but it is at the root of a template and the original
    // element was replaced. See https://github.com/angular/angular.js/issues/12936
    function markDirectiveScope(directives, isolateScope, newScope) {
      for (var j = 0, jj = directives.length; j < jj; j++) {
        directives[j] = inherit(directives[j], {$$isolateScope: isolateScope, $$newScope: newScope});
      }
    }

    /**
     * looks up the directive and decorates it with exception handling and proper parameters. We
     * call this the boundDirective.
     *
     * @param {string} name name of the directive to look up.
     * @param {string} location The directive must be found in specific format.
     *   String containing any of theses characters:
     *
     *   * `E`: element name
     *   * `A': attribute
     *   * `C`: class
     *   * `M`: comment
     * @returns {boolean} true if directive was added.
     */
    function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,
                          endAttrName) {
      if (name === ignoreDirective) return null;
      var match = null;
      if (hasDirectives.hasOwnProperty(name)) {
        for (var directive, directives = $injector.get(name + Suffix),
            i = 0, ii = directives.length; i < ii; i++) {
          try {
            directive = directives[i];
            if ((isUndefined(maxPriority) || maxPriority > directive.priority) &&
                 directive.restrict.indexOf(location) != -1) {
              if (startAttrName) {
                directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});
              }
              tDirectives.push(directive);
              match = directive;
            }
          } catch (e) { $exceptionHandler(e); }
        }
      }
      return match;
    }


    /**
     * looks up the directive and returns true if it is a multi-element directive,
     * and therefore requires DOM nodes between -start and -end markers to be grouped
     * together.
     *
     * @param {string} name name of the directive to look up.
     * @returns true if directive was registered as multi-element.
     */
    function directiveIsMultiElement(name) {
      if (hasDirectives.hasOwnProperty(name)) {
        for (var directive, directives = $injector.get(name + Suffix),
            i = 0, ii = directives.length; i < ii; i++) {
          directive = directives[i];
          if (directive.multiElement) {
            return true;
          }
        }
      }
      return false;
    }

    /**
     * When the element is replaced with HTML template then the new attributes
     * on the template need to be merged with the existing attributes in the DOM.
     * The desired effect is to have both of the attributes present.
     *
     * @param {object} dst destination attributes (original DOM)
     * @param {object} src source attributes (from the directive template)
     */
    function mergeTemplateAttributes(dst, src) {
      var srcAttr = src.$attr,
          dstAttr = dst.$attr,
          $element = dst.$$element;

      // reapply the old attributes to the new element
      forEach(dst, function(value, key) {
        if (key.charAt(0) != '$') {
          if (src[key] && src[key] !== value) {
            value += (key === 'style' ? ';' : ' ') + src[key];
          }
          dst.$set(key, value, true, srcAttr[key]);
        }
      });

      // copy the new attributes on the old attrs object
      forEach(src, function(value, key) {
        if (key == 'class') {
          safeAddClass($element, value);
          dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;
        } else if (key == 'style') {
          $element.attr('style', $element.attr('style') + ';' + value);
          dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;
          // `dst` will never contain hasOwnProperty as DOM parser won't let it.
          // You will get an "InvalidCharacterError: DOM Exception 5" error if you
          // have an attribute like "has-own-property" or "data-has-own-property", etc.
        } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {
          dst[key] = value;
          dstAttr[key] = srcAttr[key];
        }
      });
    }


    function compileTemplateUrl(directives, $compileNode, tAttrs,
        $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
      var linkQueue = [],
          afterTemplateNodeLinkFn,
          afterTemplateChildLinkFn,
          beforeTemplateCompileNode = $compileNode[0],
          origAsyncDirective = directives.shift(),
          derivedSyncDirective = inherit(origAsyncDirective, {
            templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective
          }),
          templateUrl = (isFunction(origAsyncDirective.templateUrl))
              ? origAsyncDirective.templateUrl($compileNode, tAttrs)
              : origAsyncDirective.templateUrl,
          templateNamespace = origAsyncDirective.templateNamespace;

      $compileNode.empty();

      $templateRequest(templateUrl)
        .then(function(content) {
          var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;

          content = denormalizeTemplate(content);

          if (origAsyncDirective.replace) {
            if (jqLiteIsTextNode(content)) {
              $template = [];
            } else {
              $template = removeComments(wrapTemplate(templateNamespace, trim(content)));
            }
            compileNode = $template[0];

            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
              throw $compileMinErr('tplrt',
                  "Template for directive '{0}' must have exactly one root element. {1}",
                  origAsyncDirective.name, templateUrl);
            }

            tempTemplateAttrs = {$attr: {}};
            replaceWith($rootElement, $compileNode, compileNode);
            var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);

            if (isObject(origAsyncDirective.scope)) {
              // the original directive that caused the template to be loaded async required
              // an isolate scope
              markDirectiveScope(templateDirectives, true);
            }
            directives = templateDirectives.concat(directives);
            mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
          } else {
            compileNode = beforeTemplateCompileNode;
            $compileNode.html(content);
          }

          directives.unshift(derivedSyncDirective);

          afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,
              childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,
              previousCompileContext);
          forEach($rootElement, function(node, i) {
            if (node == compileNode) {
              $rootElement[i] = $compileNode[0];
            }
          });
          afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);

          while (linkQueue.length) {
            var scope = linkQueue.shift(),
                beforeTemplateLinkNode = linkQueue.shift(),
                linkRootElement = linkQueue.shift(),
                boundTranscludeFn = linkQueue.shift(),
                linkNode = $compileNode[0];

            if (scope.$$destroyed) continue;

            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
              var oldClasses = beforeTemplateLinkNode.className;

              if (!(previousCompileContext.hasElementTranscludeDirective &&
                  origAsyncDirective.replace)) {
                // it was cloned therefore we have to clone as well.
                linkNode = jqLiteClone(compileNode);
              }
              replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);

              // Copy in CSS classes from original node
              safeAddClass(jqLite(linkNode), oldClasses);
            }
            if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
              childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
            } else {
              childBoundTranscludeFn = boundTranscludeFn;
            }
            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,
              childBoundTranscludeFn);
          }
          linkQueue = null;
        });

      return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
        var childBoundTranscludeFn = boundTranscludeFn;
        if (scope.$$destroyed) return;
        if (linkQueue) {
          linkQueue.push(scope,
                         node,
                         rootElement,
                         childBoundTranscludeFn);
        } else {
          if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
            childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
          }
          afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn);
        }
      };
    }


    /**
     * Sorting function for bound directives.
     */
    function byPriority(a, b) {
      var diff = b.priority - a.priority;
      if (diff !== 0) return diff;
      if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;
      return a.index - b.index;
    }

    function assertNoDuplicate(what, previousDirective, directive, element) {

      function wrapModuleNameIfDefined(moduleName) {
        return moduleName ?
          (' (module: ' + moduleName + ')') :
          '';
      }

      if (previousDirective) {
        throw $compileMinErr('multidir', 'Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}',
            previousDirective.name, wrapModuleNameIfDefined(previousDirective.$$moduleName),
            directive.name, wrapModuleNameIfDefined(directive.$$moduleName), what, startingTag(element));
      }
    }


    function addTextInterpolateDirective(directives, text) {
      var interpolateFn = $interpolate(text, true);
      if (interpolateFn) {
        directives.push({
          priority: 0,
          compile: function textInterpolateCompileFn(templateNode) {
            var templateNodeParent = templateNode.parent(),
                hasCompileParent = !!templateNodeParent.length;

            // When transcluding a template that has bindings in the root
            // we don't have a parent and thus need to add the class during linking fn.
            if (hasCompileParent) compile.$$addBindingClass(templateNodeParent);

            return function textInterpolateLinkFn(scope, node) {
              var parent = node.parent();
              if (!hasCompileParent) compile.$$addBindingClass(parent);
              compile.$$addBindingInfo(parent, interpolateFn.expressions);
              scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
                node[0].nodeValue = value;
              });
            };
          }
        });
      }
    }


    function wrapTemplate(type, template) {
      type = lowercase(type || 'html');
      switch (type) {
      case 'svg':
      case 'math':
        var wrapper = document.createElement('div');
        wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';
        return wrapper.childNodes[0].childNodes;
      default:
        return template;
      }
    }


    function getTrustedContext(node, attrNormalizedName) {
      if (attrNormalizedName == "srcdoc") {
        return $sce.HTML;
      }
      var tag = nodeName_(node);
      // maction[xlink:href] can source SVG.  It's not limited to <maction>.
      if (attrNormalizedName == "xlinkHref" ||
          (tag == "form" && attrNormalizedName == "action") ||
          (tag != "img" && (attrNormalizedName == "src" ||
                            attrNormalizedName == "ngSrc"))) {
        return $sce.RESOURCE_URL;
      }
    }


    function addAttrInterpolateDirective(node, directives, value, name, allOrNothing) {
      var trustedContext = getTrustedContext(node, name);
      allOrNothing = ALL_OR_NOTHING_ATTRS[name] || allOrNothing;

      var interpolateFn = $interpolate(value, true, trustedContext, allOrNothing);

      // no interpolation found -> ignore
      if (!interpolateFn) return;


      if (name === "multiple" && nodeName_(node) === "select") {
        throw $compileMinErr("selmulti",
            "Binding to the 'multiple' attribute is not supported. Element: {0}",
            startingTag(node));
      }

      directives.push({
        priority: 100,
        compile: function() {
            return {
              pre: function attrInterpolatePreLinkFn(scope, element, attr) {
                var $$observers = (attr.$$observers || (attr.$$observers = createMap()));

                if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
                  throw $compileMinErr('nodomevents',
                      "Interpolations for HTML DOM event attributes are disallowed.  Please use the " +
                          "ng- versions (such as ng-click instead of onclick) instead.");
                }

                // If the attribute has changed since last $interpolate()ed
                var newValue = attr[name];
                if (newValue !== value) {
                  // we need to interpolate again since the attribute value has been updated
                  // (e.g. by another directive's compile function)
                  // ensure unset/empty values make interpolateFn falsy
                  interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);
                  value = newValue;
                }

                // if attribute was updated so that there is no interpolation going on we don't want to
                // register any observers
                if (!interpolateFn) return;

                // initialize attr object so that it's ready in case we need the value for isolate
                // scope initialization, otherwise the value would not be available from isolate
                // directive's linking fn during linking phase
                attr[name] = interpolateFn(scope);

                ($$observers[name] || ($$observers[name] = [])).$$inter = true;
                (attr.$$observers && attr.$$observers[name].$$scope || scope).
                  $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
                    //special case for class attribute addition + removal
                    //so that class changes can tap into the animation
                    //hooks provided by the $animate service. Be sure to
                    //skip animations when the first digest occurs (when
                    //both the new and the old values are the same) since
                    //the CSS classes are the non-interpolated values
                    if (name === 'class' && newValue != oldValue) {
                      attr.$updateClass(newValue, oldValue);
                    } else {
                      attr.$set(name, newValue);
                    }
                  });
              }
            };
          }
      });
    }


    /**
     * This is a special jqLite.replaceWith, which can replace items which
     * have no parents, provided that the containing jqLite collection is provided.
     *
     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
     *                               in the root of the tree.
     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
     *                                  the shell, but replace its DOM node reference.
     * @param {Node} newNode The new DOM node.
     */
    function replaceWith($rootElement, elementsToRemove, newNode) {
      var firstElementToRemove = elementsToRemove[0],
          removeCount = elementsToRemove.length,
          parent = firstElementToRemove.parentNode,
          i, ii;

      if ($rootElement) {
        for (i = 0, ii = $rootElement.length; i < ii; i++) {
          if ($rootElement[i] == firstElementToRemove) {
            $rootElement[i++] = newNode;
            for (var j = i, j2 = j + removeCount - 1,
                     jj = $rootElement.length;
                 j < jj; j++, j2++) {
              if (j2 < jj) {
                $rootElement[j] = $rootElement[j2];
              } else {
                delete $rootElement[j];
              }
            }
            $rootElement.length -= removeCount - 1;

            // If the replaced element is also the jQuery .context then replace it
            // .context is a deprecated jQuery api, so we should set it only when jQuery set it
            // http://api.jquery.com/context/
            if ($rootElement.context === firstElementToRemove) {
              $rootElement.context = newNode;
            }
            break;
          }
        }
      }

      if (parent) {
        parent.replaceChild(newNode, firstElementToRemove);
      }

      // Append all the `elementsToRemove` to a fragment. This will...
      // - remove them from the DOM
      // - allow them to still be traversed with .nextSibling
      // - allow a single fragment.qSA to fetch all elements being removed
      var fragment = document.createDocumentFragment();
      for (i = 0; i < removeCount; i++) {
        fragment.appendChild(elementsToRemove[i]);
      }

      if (jqLite.hasData(firstElementToRemove)) {
        // Copy over user data (that includes Angular's $scope etc.). Don't copy private
        // data here because there's no public interface in jQuery to do that and copying over
        // event listeners (which is the main use of private data) wouldn't work anyway.
        jqLite.data(newNode, jqLite.data(firstElementToRemove));

        // Remove $destroy event listeners from `firstElementToRemove`
        jqLite(firstElementToRemove).off('$destroy');
      }

      // Cleanup any data/listeners on the elements and children.
      // This includes invoking the $destroy event on any elements with listeners.
      jqLite.cleanData(fragment.querySelectorAll('*'));

      // Update the jqLite collection to only contain the `newNode`
      for (i = 1; i < removeCount; i++) {
        delete elementsToRemove[i];
      }
      elementsToRemove[0] = newNode;
      elementsToRemove.length = 1;
    }


    function cloneAndAnnotateFn(fn, annotation) {
      return extend(function() { return fn.apply(null, arguments); }, fn, annotation);
    }


    function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {
      try {
        linkFn(scope, $element, attrs, controllers, transcludeFn);
      } catch (e) {
        $exceptionHandler(e, startingTag($element));
      }
    }


    // Set up $watches for isolate scope and controller bindings. This process
    // only occurs for isolate scopes and new scopes with controllerAs.
    function initializeDirectiveBindings(scope, attrs, destination, bindings, directive) {
      var removeWatchCollection = [];
      forEach(bindings, function(definition, scopeName) {
        var attrName = definition.attrName,
        optional = definition.optional,
        mode = definition.mode, // @, =, or &
        lastValue,
        parentGet, parentSet, compare, removeWatch;

        switch (mode) {

          case '@':
            if (!optional && !hasOwnProperty.call(attrs, attrName)) {
              destination[scopeName] = attrs[attrName] = void 0;
            }
            attrs.$observe(attrName, function(value) {
              if (isString(value)) {
                destination[scopeName] = value;
              }
            });
            attrs.$$observers[attrName].$$scope = scope;
            lastValue = attrs[attrName];
            if (isString(lastValue)) {
              // If the attribute has been provided then we trigger an interpolation to ensure
              // the value is there for use in the link fn
              destination[scopeName] = $interpolate(lastValue)(scope);
            } else if (isBoolean(lastValue)) {
              // If the attributes is one of the BOOLEAN_ATTR then Angular will have converted
              // the value to boolean rather than a string, so we special case this situation
              destination[scopeName] = lastValue;
            }
            break;

          case '=':
            if (!hasOwnProperty.call(attrs, attrName)) {
              if (optional) break;
              attrs[attrName] = void 0;
            }
            if (optional && !attrs[attrName]) break;

            parentGet = $parse(attrs[attrName]);
            if (parentGet.literal) {
              compare = equals;
            } else {
              compare = function(a, b) { return a === b || (a !== a && b !== b); };
            }
            parentSet = parentGet.assign || function() {
              // reset the change, or we will throw this exception on every $digest
              lastValue = destination[scopeName] = parentGet(scope);
              throw $compileMinErr('nonassign',
                  "Expression '{0}' in attribute '{1}' used with directive '{2}' is non-assignable!",
                  attrs[attrName], attrName, directive.name);
            };
            lastValue = destination[scopeName] = parentGet(scope);
            var parentValueWatch = function parentValueWatch(parentValue) {
              if (!compare(parentValue, destination[scopeName])) {
                // we are out of sync and need to copy
                if (!compare(parentValue, lastValue)) {
                  // parent changed and it has precedence
                  destination[scopeName] = parentValue;
                } else {
                  // if the parent can be assigned then do so
                  parentSet(scope, parentValue = destination[scopeName]);
                }
              }
              return lastValue = parentValue;
            };
            parentValueWatch.$stateful = true;
            if (definition.collection) {
              removeWatch = scope.$watchCollection(attrs[attrName], parentValueWatch);
            } else {
              removeWatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);
            }
            removeWatchCollection.push(removeWatch);
            break;

          case '<':
            if (!hasOwnProperty.call(attrs, attrName)) {
              if (optional) break;
              attrs[attrName] = void 0;
            }
            if (optional && !attrs[attrName]) break;

            parentGet = $parse(attrs[attrName]);

            destination[scopeName] = parentGet(scope);

            removeWatch = scope.$watch(parentGet, function parentValueWatchAction(newParentValue) {
              destination[scopeName] = newParentValue;
            }, parentGet.literal);

            removeWatchCollection.push(removeWatch);
            break;

          case '&':
            // Don't assign Object.prototype method to scope
            parentGet = attrs.hasOwnProperty(attrName) ? $parse(attrs[attrName]) : noop;

            // Don't assign noop to destination if expression is not valid
            if (parentGet === noop && optional) break;

            destination[scopeName] = function(locals) {
              return parentGet(scope, locals);
            };
            break;
        }
      });

      return removeWatchCollection.length && function removeWatches() {
        for (var i = 0, ii = removeWatchCollection.length; i < ii; ++i) {
          removeWatchCollection[i]();
        }
      };
    }
  }];
}

var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i;
/**
 * Converts all accepted directives format into proper directive name.
 * @param name Name to normalize
 */
function directiveNormalize(name) {
  return camelCase(name.replace(PREFIX_REGEXP, ''));
}

/**
 * @ngdoc type
 * @name $compile.directive.Attributes
 *
 * @description
 * A shared object between directive compile / linking functions which contains normalized DOM
 * element attributes. The values reflect current binding state `{{ }}`. The normalization is
 * needed since all of these are treated as equivalent in Angular:
 *
 * ```
 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
 * ```
 */

/**
 * @ngdoc property
 * @name $compile.directive.Attributes#$attr
 *
 * @description
 * A map of DOM element attribute names to the normalized name. This is
 * needed to do reverse lookup from normalized name back to actual name.
 */


/**
 * @ngdoc method
 * @name $compile.directive.Attributes#$set
 * @kind function
 *
 * @description
 * Set DOM element attribute value.
 *
 *
 * @param {string} name Normalized element attribute name of the property to modify. The name is
 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
 *          property to the original name.
 * @param {string} value Value to set the attribute to. The value can be an interpolated string.
 */



/**
 * Closure compiler type information
 */

function nodesetLinkingFn(
  /* angular.Scope */ scope,
  /* NodeList */ nodeList,
  /* Element */ rootElement,
  /* function(Function) */ boundTranscludeFn
) {}

function directiveLinkingFn(
  /* nodesetLinkingFn */ nodesetLinkingFn,
  /* angular.Scope */ scope,
  /* Node */ node,
  /* Element */ rootElement,
  /* function(Function) */ boundTranscludeFn
) {}

function tokenDifference(str1, str2) {
  var values = '',
      tokens1 = str1.split(/\s+/),
      tokens2 = str2.split(/\s+/);

  outer:
  for (var i = 0; i < tokens1.length; i++) {
    var token = tokens1[i];
    for (var j = 0; j < tokens2.length; j++) {
      if (token == tokens2[j]) continue outer;
    }
    values += (values.length > 0 ? ' ' : '') + token;
  }
  return values;
}

function removeComments(jqNodes) {
  jqNodes = jqLite(jqNodes);
  var i = jqNodes.length;

  if (i <= 1) {
    return jqNodes;
  }

  while (i--) {
    var node = jqNodes[i];
    if (node.nodeType === NODE_TYPE_COMMENT) {
      splice.call(jqNodes, i, 1);
    }
  }
  return jqNodes;
}

var $controllerMinErr = minErr('$controller');


var CNTRL_REG = /^(\S+)(\s+as\s+([\w$]+))?$/;
function identifierForController(controller, ident) {
  if (ident && isString(ident)) return ident;
  if (isString(controller)) {
    var match = CNTRL_REG.exec(controller);
    if (match) return match[3];
  }
}


/**
 * @ngdoc provider
 * @name $controllerProvider
 * @description
 * The {@link ng.$controller $controller service} is used by Angular to create new
 * controllers.
 *
 * This provider allows controller registration via the
 * {@link ng.$controllerProvider#register register} method.
 */
function $ControllerProvider() {
  var controllers = {},
      globals = false;

  /**
   * @ngdoc method
   * @name $controllerProvider#register
   * @param {string|Object} name Controller name, or an object map of controllers where the keys are
   *    the names and the values are the constructors.
   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
   *    annotations in the array notation).
   */
  this.register = function(name, constructor) {
    assertNotHasOwnProperty(name, 'controller');
    if (isObject(name)) {
      extend(controllers, name);
    } else {
      controllers[name] = constructor;
    }
  };

  /**
   * @ngdoc method
   * @name $controllerProvider#allowGlobals
   * @description If called, allows `$controller` to find controller constructors on `window`
   */
  this.allowGlobals = function() {
    globals = true;
  };


  this.$get = ['$injector', '$window', function($injector, $window) {

    /**
     * @ngdoc service
     * @name $controller
     * @requires $injector
     *
     * @param {Function|string} constructor If called with a function then it's considered to be the
     *    controller constructor function. Otherwise it's considered to be a string which is used
     *    to retrieve the controller constructor using the following steps:
     *
     *    * check if a controller with given name is registered via `$controllerProvider`
     *    * check if evaluating the string on the current scope returns a constructor
     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global
     *      `window` object (not recommended)
     *
     *    The string can use the `controller as property` syntax, where the controller instance is published
     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this
     *    to work correctly.
     *
     * @param {Object} locals Injection locals for Controller.
     * @return {Object} Instance of given controller.
     *
     * @description
     * `$controller` service is responsible for instantiating controllers.
     *
     * It's just a simple call to {@link auto.$injector $injector}, but extracted into
     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
     */
    return function(expression, locals, later, ident) {
      // PRIVATE API:
      //   param `later` --- indicates that the controller's constructor is invoked at a later time.
      //                     If true, $controller will allocate the object with the correct
      //                     prototype chain, but will not invoke the controller until a returned
      //                     callback is invoked.
      //   param `ident` --- An optional label which overrides the label parsed from the controller
      //                     expression, if any.
      var instance, match, constructor, identifier;
      later = later === true;
      if (ident && isString(ident)) {
        identifier = ident;
      }

      if (isString(expression)) {
        match = expression.match(CNTRL_REG);
        if (!match) {
          throw $controllerMinErr('ctrlfmt',
            "Badly formed controller string '{0}'. " +
            "Must match `__name__ as __id__` or `__name__`.", expression);
        }
        constructor = match[1],
        identifier = identifier || match[3];
        expression = controllers.hasOwnProperty(constructor)
            ? controllers[constructor]
            : getter(locals.$scope, constructor, true) ||
                (globals ? getter($window, constructor, true) : undefined);

        assertArgFn(expression, constructor, true);
      }

      if (later) {
        // Instantiate controller later:
        // This machinery is used to create an instance of the object before calling the
        // controller's constructor itself.
        //
        // This allows properties to be added to the controller before the constructor is
        // invoked. Primarily, this is used for isolate scope bindings in $compile.
        //
        // This feature is not intended for use by applications, and is thus not documented
        // publicly.
        // Object creation: http://jsperf.com/create-constructor/2
        var controllerPrototype = (isArray(expression) ?
          expression[expression.length - 1] : expression).prototype;
        instance = Object.create(controllerPrototype || null);

        if (identifier) {
          addIdentifier(locals, identifier, instance, constructor || expression.name);
        }

        var instantiate;
        return instantiate = extend(function() {
          var result = $injector.invoke(expression, instance, locals, constructor);
          if (result !== instance && (isObject(result) || isFunction(result))) {
            instance = result;
            if (identifier) {
              // If result changed, re-assign controllerAs value to scope.
              addIdentifier(locals, identifier, instance, constructor || expression.name);
            }
          }
          return instance;
        }, {
          instance: instance,
          identifier: identifier
        });
      }

      instance = $injector.instantiate(expression, locals, constructor);

      if (identifier) {
        addIdentifier(locals, identifier, instance, constructor || expression.name);
      }

      return instance;
    };

    function addIdentifier(locals, identifier, instance, name) {
      if (!(locals && isObject(locals.$scope))) {
        throw minErr('$controller')('noscp',
          "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",
          name, identifier);
      }

      locals.$scope[identifier] = instance;
    }
  }];
}

/**
 * @ngdoc service
 * @name $document
 * @requires $window
 *
 * @description
 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
 *
 * @example
   <example module="documentExample">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <p>$document title: <b ng-bind="title"></b></p>
         <p>window.document title: <b ng-bind="windowTitle"></b></p>
       </div>
     </file>
     <file name="script.js">
       angular.module('documentExample', [])
         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {
           $scope.title = $document[0].title;
           $scope.windowTitle = angular.element(window.document)[0].title;
         }]);
     </file>
   </example>
 */
function $DocumentProvider() {
  this.$get = ['$window', function(window) {
    return jqLite(window.document);
  }];
}

/**
 * @ngdoc service
 * @name $exceptionHandler
 * @requires ng.$log
 *
 * @description
 * Any uncaught exception in angular expressions is delegated to this service.
 * The default implementation simply delegates to `$log.error` which logs it into
 * the browser console.
 *
 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
 *
 * ## Example:
 *
 * ```js
 *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function() {
 *     return function(exception, cause) {
 *       exception.message += ' (caused by "' + cause + '")';
 *       throw exception;
 *     };
 *   });
 * ```
 *
 * This example will override the normal action of `$exceptionHandler`, to make angular
 * exceptions fail hard when they happen, instead of just logging to the console.
 *
 * <hr />
 * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`
 * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}
 * (unless executed during a digest).
 *
 * If you wish, you can manually delegate exceptions, e.g.
 * `try { ... } catch(e) { $exceptionHandler(e); }`
 *
 * @param {Error} exception Exception associated with the error.
 * @param {string=} cause optional information about the context in which
 *       the error was thrown.
 *
 */
function $ExceptionHandlerProvider() {
  this.$get = ['$log', function($log) {
    return function(exception, cause) {
      $log.error.apply($log, arguments);
    };
  }];
}

var $$ForceReflowProvider = function() {
  this.$get = ['$document', function($document) {
    return function(domNode) {
      //the line below will force the browser to perform a repaint so
      //that all the animated elements within the animation frame will
      //be properly updated and drawn on screen. This is required to
      //ensure that the preparation animation is properly flushed so that
      //the active state picks up from there. DO NOT REMOVE THIS LINE.
      //DO NOT OPTIMIZE THIS LINE. THE MINIFIER WILL REMOVE IT OTHERWISE WHICH
      //WILL RESULT IN AN UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND
      //WILL TAKE YEARS AWAY FROM YOUR LIFE.
      if (domNode) {
        if (!domNode.nodeType && domNode instanceof jqLite) {
          domNode = domNode[0];
        }
      } else {
        domNode = $document[0].body;
      }
      return domNode.offsetWidth + 1;
    };
  }];
};

var APPLICATION_JSON = 'application/json';
var CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': APPLICATION_JSON + ';charset=utf-8'};
var JSON_START = /^\[|^\{(?!\{)/;
var JSON_ENDS = {
  '[': /]$/,
  '{': /}$/
};
var JSON_PROTECTION_PREFIX = /^\)\]\}',?\n/;
var $httpMinErr = minErr('$http');
var $httpMinErrLegacyFn = function(method) {
  return function() {
    throw $httpMinErr('legacy', 'The method `{0}` on the promise returned from `$http` has been disabled.', method);
  };
};

function serializeValue(v) {
  if (isObject(v)) {
    return isDate(v) ? v.toISOString() : toJson(v);
  }
  return v;
}


function $HttpParamSerializerProvider() {
  /**
   * @ngdoc service
   * @name $httpParamSerializer
   * @description
   *
   * Default {@link $http `$http`} params serializer that converts objects to strings
   * according to the following rules:
   *
   * * `{'foo': 'bar'}` results in `foo=bar`
   * * `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)
   * * `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)
   * * `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D"` (stringified and encoded representation of an object)
   *
   * Note that serializer will sort the request parameters alphabetically.
   * */

  this.$get = function() {
    return function ngParamSerializer(params) {
      if (!params) return '';
      var parts = [];
      forEachSorted(params, function(value, key) {
        if (value === null || isUndefined(value)) return;
        if (isArray(value)) {
          forEach(value, function(v, k) {
            parts.push(encodeUriQuery(key)  + '=' + encodeUriQuery(serializeValue(v)));
          });
        } else {
          parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(serializeValue(value)));
        }
      });

      return parts.join('&');
    };
  };
}

function $HttpParamSerializerJQLikeProvider() {
  /**
   * @ngdoc service
   * @name $httpParamSerializerJQLike
   * @description
   *
   * Alternative {@link $http `$http`} params serializer that follows
   * jQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.
   * The serializer will also sort the params alphabetically.
   *
   * To use it for serializing `$http` request parameters, set it as the `paramSerializer` property:
   *
   * ```js
   * $http({
   *   url: myUrl,
   *   method: 'GET',
   *   params: myParams,
   *   paramSerializer: '$httpParamSerializerJQLike'
   * });
   * ```
   *
   * It is also possible to set it as the default `paramSerializer` in the
   * {@link $httpProvider#defaults `$httpProvider`}.
   *
   * Additionally, you can inject the serializer and use it explicitly, for example to serialize
   * form data for submission:
   *
   * ```js
   * .controller(function($http, $httpParamSerializerJQLike) {
   *   //...
   *
   *   $http({
   *     url: myUrl,
   *     method: 'POST',
   *     data: $httpParamSerializerJQLike(myData),
   *     headers: {
   *       'Content-Type': 'application/x-www-form-urlencoded'
   *     }
   *   });
   *
   * });
   * ```
   *
   * */
  this.$get = function() {
    return function jQueryLikeParamSerializer(params) {
      if (!params) return '';
      var parts = [];
      serialize(params, '', true);
      return parts.join('&');

      function serialize(toSerialize, prefix, topLevel) {
        if (toSerialize === null || isUndefined(toSerialize)) return;
        if (isArray(toSerialize)) {
          forEach(toSerialize, function(value, index) {
            serialize(value, prefix + '[' + (isObject(value) ? index : '') + ']');
          });
        } else if (isObject(toSerialize) && !isDate(toSerialize)) {
          forEachSorted(toSerialize, function(value, key) {
            serialize(value, prefix +
                (topLevel ? '' : '[') +
                key +
                (topLevel ? '' : ']'));
          });
        } else {
          parts.push(encodeUriQuery(prefix) + '=' + encodeUriQuery(serializeValue(toSerialize)));
        }
      }
    };
  };
}

function defaultHttpResponseTransform(data, headers) {
  if (isString(data)) {
    // Strip json vulnerability protection prefix and trim whitespace
    var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim();

    if (tempData) {
      var contentType = headers('Content-Type');
      if ((contentType && (contentType.indexOf(APPLICATION_JSON) === 0)) || isJsonLike(tempData)) {
        data = fromJson(tempData);
      }
    }
  }

  return data;
}

function isJsonLike(str) {
    var jsonStart = str.match(JSON_START);
    return jsonStart && JSON_ENDS[jsonStart[0]].test(str);
}

/**
 * Parse headers into key value object
 *
 * @param {string} headers Raw headers as a string
 * @returns {Object} Parsed headers as key value object
 */
function parseHeaders(headers) {
  var parsed = createMap(), i;

  function fillInParsed(key, val) {
    if (key) {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  }

  if (isString(headers)) {
    forEach(headers.split('\n'), function(line) {
      i = line.indexOf(':');
      fillInParsed(lowercase(trim(line.substr(0, i))), trim(line.substr(i + 1)));
    });
  } else if (isObject(headers)) {
    forEach(headers, function(headerVal, headerKey) {
      fillInParsed(lowercase(headerKey), trim(headerVal));
    });
  }

  return parsed;
}


/**
 * Returns a function that provides access to parsed headers.
 *
 * Headers are lazy parsed when first requested.
 * @see parseHeaders
 *
 * @param {(string|Object)} headers Headers to provide access to.
 * @returns {function(string=)} Returns a getter function which if called with:
 *
 *   - if called with single an argument returns a single header value or null
 *   - if called with no arguments returns an object containing all headers.
 */
function headersGetter(headers) {
  var headersObj;

  return function(name) {
    if (!headersObj) headersObj =  parseHeaders(headers);

    if (name) {
      var value = headersObj[lowercase(name)];
      if (value === void 0) {
        value = null;
      }
      return value;
    }

    return headersObj;
  };
}


/**
 * Chain all given functions
 *
 * This function is used for both request and response transforming
 *
 * @param {*} data Data to transform.
 * @param {function(string=)} headers HTTP headers getter fn.
 * @param {number} status HTTP status code of the response.
 * @param {(Function|Array.<Function>)} fns Function or an array of functions.
 * @returns {*} Transformed data.
 */
function transformData(data, headers, status, fns) {
  if (isFunction(fns)) {
    return fns(data, headers, status);
  }

  forEach(fns, function(fn) {
    data = fn(data, headers, status);
  });

  return data;
}


function isSuccess(status) {
  return 200 <= status && status < 300;
}


/**
 * @ngdoc provider
 * @name $httpProvider
 * @description
 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.
 * */
function $HttpProvider() {
  /**
   * @ngdoc property
   * @name $httpProvider#defaults
   * @description
   *
   * Object containing default values for all {@link ng.$http $http} requests.
   *
   * - **`defaults.cache`** - {Object} - an object built with {@link ng.$cacheFactory `$cacheFactory`}
   * that will provide the cache for all requests who set their `cache` property to `true`.
   * If you set the `defaults.cache = false` then only requests that specify their own custom
   * cache object will be cached. See {@link $http#caching $http Caching} for more information.
   *
   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.
   * Defaults value is `'XSRF-TOKEN'`.
   *
   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the
   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.
   *
   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.
   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on
   * setting default headers.
   *     - **`defaults.headers.common`**
   *     - **`defaults.headers.post`**
   *     - **`defaults.headers.put`**
   *     - **`defaults.headers.patch`**
   *
   *
   * - **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function
   *  used to the prepare string representation of request parameters (specified as an object).
   *  If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.
   *  Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.
   *
   **/
  var defaults = this.defaults = {
    // transform incoming response data
    transformResponse: [defaultHttpResponseTransform],

    // transform outgoing request data
    transformRequest: [function(d) {
      return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;
    }],

    // default headers
    headers: {
      common: {
        'Accept': 'application/json, text/plain, */*'
      },
      post:   shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
      put:    shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
      patch:  shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
    },

    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',

    paramSerializer: '$httpParamSerializer'
  };

  var useApplyAsync = false;
  /**
   * @ngdoc method
   * @name $httpProvider#useApplyAsync
   * @description
   *
   * Configure $http service to combine processing of multiple http responses received at around
   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in
   * significant performance improvement for bigger applications that make many HTTP requests
   * concurrently (common during application bootstrap).
   *
   * Defaults to false. If no value is specified, returns the current configured value.
   *
   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred
   *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window
   *    to load and share the same digest cycle.
   *
   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
   *    otherwise, returns the current configured value.
   **/
  this.useApplyAsync = function(value) {
    if (isDefined(value)) {
      useApplyAsync = !!value;
      return this;
    }
    return useApplyAsync;
  };

  var useLegacyPromise = true;
  /**
   * @ngdoc method
   * @name $httpProvider#useLegacyPromiseExtensions
   * @description
   *
   * Configure `$http` service to return promises without the shorthand methods `success` and `error`.
   * This should be used to make sure that applications work without these methods.
   *
   * Defaults to true. If no value is specified, returns the current configured value.
   *
   * @param {boolean=} value If true, `$http` will return a promise with the deprecated legacy `success` and `error` methods.
   *
   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
   *    otherwise, returns the current configured value.
   **/
  this.useLegacyPromiseExtensions = function(value) {
    if (isDefined(value)) {
      useLegacyPromise = !!value;
      return this;
    }
    return useLegacyPromise;
  };

  /**
   * @ngdoc property
   * @name $httpProvider#interceptors
   * @description
   *
   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}
   * pre-processing of request or postprocessing of responses.
   *
   * These service factories are ordered by request, i.e. they are applied in the same order as the
   * array, on request, but reverse order, on response.
   *
   * {@link ng.$http#interceptors Interceptors detailed info}
   **/
  var interceptorFactories = this.interceptors = [];

  this.$get = ['$httpBackend', '$$cookieReader', '$cacheFactory', '$rootScope', '$q', '$injector',
      function($httpBackend, $$cookieReader, $cacheFactory, $rootScope, $q, $injector) {

    var defaultCache = $cacheFactory('$http');

    /**
     * Make sure that default param serializer is exposed as a function
     */
    defaults.paramSerializer = isString(defaults.paramSerializer) ?
      $injector.get(defaults.paramSerializer) : defaults.paramSerializer;

    /**
     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
     * The reversal is needed so that we can build up the interception chain around the
     * server request.
     */
    var reversedInterceptors = [];

    forEach(interceptorFactories, function(interceptorFactory) {
      reversedInterceptors.unshift(isString(interceptorFactory)
          ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
    });

    /**
     * @ngdoc service
     * @kind function
     * @name $http
     * @requires ng.$httpBackend
     * @requires $cacheFactory
     * @requires $rootScope
     * @requires $q
     * @requires $injector
     *
     * @description
     * The `$http` service is a core Angular service that facilitates communication with the remote
     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
     *
     * For unit testing applications that use `$http` service, see
     * {@link ngMock.$httpBackend $httpBackend mock}.
     *
     * For a higher level of abstraction, please check out the {@link ngResource.$resource
     * $resource} service.
     *
     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
     * it is important to familiarize yourself with these APIs and the guarantees they provide.
     *
     *
     * ## General usage
     * The `$http` service is a function which takes a single argument — a {@link $http#usage configuration object} —
     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}.
     *
     * ```js
     *   // Simple GET request example:
     *   $http({
     *     method: 'GET',
     *     url: '/someUrl'
     *   }).then(function successCallback(response) {
     *       // this callback will be called asynchronously
     *       // when the response is available
     *     }, function errorCallback(response) {
     *       // called asynchronously if an error occurs
     *       // or server returns response with an error status.
     *     });
     * ```
     *
     * The response object has these properties:
     *
     *   - **data** – `{string|Object}` – The response body transformed with the transform
     *     functions.
     *   - **status** – `{number}` – HTTP status code of the response.
     *   - **headers** – `{function([headerName])}` – Header getter function.
     *   - **config** – `{Object}` – The configuration object that was used to generate the request.
     *   - **statusText** – `{string}` – HTTP status text of the response.
     *
     * A response status code between 200 and 299 is considered a success status and
     * will result in the success callback being called. Note that if the response is a redirect,
     * XMLHttpRequest will transparently follow it, meaning that the error callback will not be
     * called for such responses.
     *
     *
     * ## Shortcut methods
     *
     * Shortcut methods are also available. All shortcut methods require passing in the URL, and
     * request data must be passed in for POST/PUT requests. An optional config can be passed as the
     * last argument.
     *
     * ```js
     *   $http.get('/someUrl', config).then(successCallback, errorCallback);
     *   $http.post('/someUrl', data, config).then(successCallback, errorCallback);
     * ```
     *
     * Complete list of shortcut methods:
     *
     * - {@link ng.$http#get $http.get}
     * - {@link ng.$http#head $http.head}
     * - {@link ng.$http#post $http.post}
     * - {@link ng.$http#put $http.put}
     * - {@link ng.$http#delete $http.delete}
     * - {@link ng.$http#jsonp $http.jsonp}
     * - {@link ng.$http#patch $http.patch}
     *
     *
     * ## Writing Unit Tests that use $http
     * When unit testing (using {@link ngMock ngMock}), it is necessary to call
     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
     * request using trained responses.
     *
     * ```
     * $httpBackend.expectGET(...);
     * $http.get(...);
     * $httpBackend.flush();
     * ```
     *
     * ## Deprecation Notice
     * <div class="alert alert-danger">
     *   The `$http` legacy promise methods `success` and `error` have been deprecated.
     *   Use the standard `then` method instead.
     *   If {@link $httpProvider#useLegacyPromiseExtensions `$httpProvider.useLegacyPromiseExtensions`} is set to
     *   `false` then these methods will throw {@link $http:legacy `$http/legacy`} error.
     * </div>
     *
     * ## Setting HTTP Headers
     *
     * The $http service will automatically add certain HTTP headers to all requests. These defaults
     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
     * object, which currently contains this default configuration:
     *
     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
     *   - `Accept: application/json, text/plain, * / *`
     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
     *   - `Content-Type: application/json`
     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
     *   - `Content-Type: application/json`
     *
     * To add or overwrite these defaults, simply add or remove a property from these configuration
     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
     * with the lowercased HTTP method name as the key, e.g.
     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.
     *
     * The defaults can also be set at runtime via the `$http.defaults` object in the same
     * fashion. For example:
     *
     * ```
     * module.run(function($http) {
     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w';
     * });
     * ```
     *
     * In addition, you can supply a `headers` property in the config object passed when
     * calling `$http(config)`, which overrides the defaults without changing them globally.
     *
     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,
     * Use the `headers` property, setting the desired header to `undefined`. For example:
     *
     * ```js
     * var req = {
     *  method: 'POST',
     *  url: 'http://example.com',
     *  headers: {
     *    'Content-Type': undefined
     *  },
     *  data: { test: 'test' }
     * }
     *
     * $http(req).then(function(){...}, function(){...});
     * ```
     *
     * ## Transforming Requests and Responses
     *
     * Both requests and responses can be transformed using transformation functions: `transformRequest`
     * and `transformResponse`. These properties can be a single function that returns
     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,
     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.
     *
     * ### Default Transformations
     *
     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and
     * `defaults.transformResponse` properties. If a request does not provide its own transformations
     * then these will be applied.
     *
     * You can augment or replace the default transformations by modifying these properties by adding to or
     * replacing the array.
     *
     * Angular provides the following default transformations:
     *
     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):
     *
     * - If the `data` property of the request configuration object contains an object, serialize it
     *   into JSON format.
     *
     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):
     *
     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
     *  - If JSON response is detected, deserialize it using a JSON parser.
     *
     *
     * ### Overriding the Default Transformations Per Request
     *
     * If you wish override the request/response transformations only for a single request then provide
     * `transformRequest` and/or `transformResponse` properties on the configuration object passed
     * into `$http`.
     *
     * Note that if you provide these properties on the config object the default transformations will be
     * overwritten. If you wish to augment the default transformations then you must include them in your
     * local transformation array.
     *
     * The following code demonstrates adding a new response transformation to be run after the default response
     * transformations have been run.
     *
     * ```js
     * function appendTransform(defaults, transform) {
     *
     *   // We can't guarantee that the default transformation is an array
     *   defaults = angular.isArray(defaults) ? defaults : [defaults];
     *
     *   // Append the new transformation to the defaults
     *   return defaults.concat(transform);
     * }
     *
     * $http({
     *   url: '...',
     *   method: 'GET',
     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {
     *     return doTransform(value);
     *   })
     * });
     * ```
     *
     *
     * ## Caching
     *
     * To enable caching, set the request configuration `cache` property to `true` (to use default
     * cache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).
     * When the cache is enabled, `$http` stores the response from the server in the specified
     * cache. The next time the same request is made, the response is served from the cache without
     * sending a request to the server.
     *
     * Note that even if the response is served from cache, delivery of the data is asynchronous in
     * the same way that real requests are.
     *
     * If there are multiple GET requests for the same URL that should be cached using the same
     * cache, but the cache is not populated yet, only one request to the server will be made and
     * the remaining requests will be fulfilled using the response from the first request.
     *
     * You can change the default cache to a new object (built with
     * {@link ng.$cacheFactory `$cacheFactory`}) by updating the
     * {@link ng.$http#defaults `$http.defaults.cache`} property. All requests who set
     * their `cache` property to `true` will now use this cache object.
     *
     * If you set the default cache to `false` then only requests that specify their own custom
     * cache object will be cached.
     *
     * ## Interceptors
     *
     * Before you start creating interceptors, be sure to understand the
     * {@link ng.$q $q and deferred/promise APIs}.
     *
     * For purposes of global error handling, authentication, or any kind of synchronous or
     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
     * able to intercept requests before they are handed to the server and
     * responses before they are handed over to the application code that
     * initiated these requests. The interceptors leverage the {@link ng.$q
     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
     *
     * The interceptors are service factories that are registered with the `$httpProvider` by
     * adding them to the `$httpProvider.interceptors` array. The factory is called and
     * injected with dependencies (if specified) and returns the interceptor.
     *
     * There are two kinds of interceptors (and two kinds of rejection interceptors):
     *
     *   * `request`: interceptors get called with a http {@link $http#usage config} object. The function is free to
     *     modify the `config` object or create a new one. The function needs to return the `config`
     *     object directly, or a promise containing the `config` or a new `config` object.
     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
     *     resolved with a rejection.
     *   * `response`: interceptors get called with http `response` object. The function is free to
     *     modify the `response` object or create a new one. The function needs to return the `response`
     *     object directly, or as a promise containing the `response` or a new `response` object.
     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
     *     resolved with a rejection.
     *
     *
     * ```js
     *   // register the interceptor as a service
     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
     *     return {
     *       // optional method
     *       'request': function(config) {
     *         // do something on success
     *         return config;
     *       },
     *
     *       // optional method
     *      'requestError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       },
     *
     *
     *
     *       // optional method
     *       'response': function(response) {
     *         // do something on success
     *         return response;
     *       },
     *
     *       // optional method
     *      'responseError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       }
     *     };
     *   });
     *
     *   $httpProvider.interceptors.push('myHttpInterceptor');
     *
     *
     *   // alternatively, register the interceptor via an anonymous factory
     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
     *     return {
     *      'request': function(config) {
     *          // same as above
     *       },
     *
     *       'response': function(response) {
     *          // same as above
     *       }
     *     };
     *   });
     * ```
     *
     * ## Security Considerations
     *
     * When designing web applications, consider security threats from:
     *
     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
     *
     * Both server and the client must cooperate in order to eliminate these threats. Angular comes
     * pre-configured with strategies that address these issues, but for this to work backend server
     * cooperation is required.
     *
     * ### JSON Vulnerability Protection
     *
     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
     * allows third party website to turn your JSON resource URL into
     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
     * Angular will automatically strip the prefix before processing it as JSON.
     *
     * For example if your server needs to return:
     * ```js
     * ['one','two']
     * ```
     *
     * which is vulnerable to attack, your server can return:
     * ```js
     * )]}',
     * ['one','two']
     * ```
     *
     * Angular will strip the prefix, before processing the JSON.
     *
     *
     * ### Cross Site Request Forgery (XSRF) Protection
     *
     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is an attack technique by
     * which the attacker can trick an authenticated user into unknowingly executing actions on your
     * website. Angular provides a mechanism to counter XSRF. When performing XHR requests, the
     * $http service reads a token from a cookie (by default, `XSRF-TOKEN`) and sets it as an HTTP
     * header (`X-XSRF-TOKEN`). Since only JavaScript that runs on your domain could read the
     * cookie, your server can be assured that the XHR came from JavaScript running on your domain.
     * The header will not be set for cross-domain requests.
     *
     * To take advantage of this, your server needs to set a token in a JavaScript readable session
     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
     * that only JavaScript running on your domain could have sent the request. The token must be
     * unique for each user and must be verifiable by the server (to prevent the JavaScript from
     * making up its own tokens). We recommend that the token is a digest of your site's
     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)
     * for added security.
     *
     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
     * or the per-request config object.
     *
     * In order to prevent collisions in environments where multiple Angular apps share the
     * same domain or subdomain, we recommend that each application uses unique cookie name.
     *
     * @param {object} config Object describing the request to be made and how it should be
     *    processed. The object has following properties:
     *
     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
     *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.
     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be serialized
     *      with the `paramSerializer` and appended as GET parameters.
     *    - **data** – `{string|Object}` – Data to be sent as the request message data.
     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
     *      HTTP headers to send to the server. If the return value of a function is null, the
     *      header will not be sent. Functions accept a config object as an argument.
     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
     *    - **transformRequest** –
     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
     *      transform function or an array of such functions. The transform function takes the http
     *      request body and headers and returns its transformed (typically serialized) version.
     *      See {@link ng.$http#overriding-the-default-transformations-per-request
     *      Overriding the Default Transformations}
     *    - **transformResponse** –
     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –
     *      transform function or an array of such functions. The transform function takes the http
     *      response body, headers and status and returns its transformed (typically deserialized) version.
     *      See {@link ng.$http#overriding-the-default-transformations-per-request
     *      Overriding the Default TransformationjqLiks}
     *    - **paramSerializer** - `{string|function(Object<string,string>):string}` - A function used to
     *      prepare the string representation of request parameters (specified as an object).
     *      If specified as string, it is interpreted as function registered with the
     *      {@link $injector $injector}, which means you can create your own serializer
     *      by registering it as a {@link auto.$provide#service service}.
     *      The default serializer is the {@link $httpParamSerializer $httpParamSerializer};
     *      alternatively, you can use the {@link $httpParamSerializerJQLike $httpParamSerializerJQLike}
     *    - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the
     *      GET request, otherwise if a cache instance built with
     *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for
     *      caching.
     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
     *      that should abort the request when resolved.
     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
     *      for more information.
     *    - **responseType** - `{string}` - see
     *      [XMLHttpRequest.responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype).
     *
     * @returns {HttpPromise} Returns a {@link ng.$q `Promise}` that will be resolved to a response object
     *                        when the request succeeds or fails.
     *
     *
     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
     *   requests. This is primarily meant to be used for debugging purposes.
     *
     *
     * @example
<example module="httpExample">
<file name="index.html">
  <div ng-controller="FetchController">
    <select ng-model="method" aria-label="Request method">
      <option>GET</option>
      <option>JSONP</option>
    </select>
    <input type="text" ng-model="url" size="80" aria-label="URL" />
    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
    <button id="samplejsonpbtn"
      ng-click="updateModel('JSONP',
                    'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">
      Sample JSONP
    </button>
    <button id="invalidjsonpbtn"
      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">
        Invalid JSONP
      </button>
    <pre>http status code: {{status}}</pre>
    <pre>http response data: {{data}}</pre>
  </div>
</file>
<file name="script.js">
  angular.module('httpExample', [])
    .controller('FetchController', ['$scope', '$http', '$templateCache',
      function($scope, $http, $templateCache) {
        $scope.method = 'GET';
        $scope.url = 'http-hello.html';

        $scope.fetch = function() {
          $scope.code = null;
          $scope.response = null;

          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
            then(function(response) {
              $scope.status = response.status;
              $scope.data = response.data;
            }, function(response) {
              $scope.data = response.data || "Request failed";
              $scope.status = response.status;
          });
        };

        $scope.updateModel = function(method, url) {
          $scope.method = method;
          $scope.url = url;
        };
      }]);
</file>
<file name="http-hello.html">
  Hello, $http!
</file>
<file name="protractor.js" type="protractor">
  var status = element(by.binding('status'));
  var data = element(by.binding('data'));
  var fetchBtn = element(by.id('fetchbtn'));
  var sampleGetBtn = element(by.id('samplegetbtn'));
  var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));

  it('should make an xhr GET request', function() {
    sampleGetBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('200');
    expect(data.getText()).toMatch(/Hello, \$http!/);
  });

// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185
// it('should make a JSONP request to angularjs.org', function() {
//   sampleJsonpBtn.click();
//   fetchBtn.click();
//   expect(status.getText()).toMatch('200');
//   expect(data.getText()).toMatch(/Super Hero!/);
// });

  it('should make JSONP request to invalid URL and invoke the error handler',
      function() {
    invalidJsonpBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('0');
    expect(data.getText()).toMatch('Request failed');
  });
</file>
</example>
     */
    function $http(requestConfig) {

      if (!isObject(requestConfig)) {
        throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);
      }

      if (!isString(requestConfig.url)) {
        throw minErr('$http')('badreq', 'Http request configuration url must be a string.  Received: {0}', requestConfig.url);
      }

      var config = extend({
        method: 'get',
        transformRequest: defaults.transformRequest,
        transformResponse: defaults.transformResponse,
        paramSerializer: defaults.paramSerializer
      }, requestConfig);

      config.headers = mergeHeaders(requestConfig);
      config.method = uppercase(config.method);
      config.paramSerializer = isString(config.paramSerializer) ?
        $injector.get(config.paramSerializer) : config.paramSerializer;

      var serverRequest = function(config) {
        var headers = config.headers;
        var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);

        // strip content-type if data is undefined
        if (isUndefined(reqData)) {
          forEach(headers, function(value, header) {
            if (lowercase(header) === 'content-type') {
                delete headers[header];
            }
          });
        }

        if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
          config.withCredentials = defaults.withCredentials;
        }

        // send request
        return sendReq(config, reqData).then(transformResponse, transformResponse);
      };

      var chain = [serverRequest, undefined];
      var promise = $q.when(config);

      // apply interceptors
      forEach(reversedInterceptors, function(interceptor) {
        if (interceptor.request || interceptor.requestError) {
          chain.unshift(interceptor.request, interceptor.requestError);
        }
        if (interceptor.response || interceptor.responseError) {
          chain.push(interceptor.response, interceptor.responseError);
        }
      });

      while (chain.length) {
        var thenFn = chain.shift();
        var rejectFn = chain.shift();

        promise = promise.then(thenFn, rejectFn);
      }

      if (useLegacyPromise) {
        promise.success = function(fn) {
          assertArgFn(fn, 'fn');

          promise.then(function(response) {
            fn(response.data, response.status, response.headers, config);
          });
          return promise;
        };

        promise.error = function(fn) {
          assertArgFn(fn, 'fn');

          promise.then(null, function(response) {
            fn(response.data, response.status, response.headers, config);
          });
          return promise;
        };
      } else {
        promise.success = $httpMinErrLegacyFn('success');
        promise.error = $httpMinErrLegacyFn('error');
      }

      return promise;

      function transformResponse(response) {
        // make a copy since the response must be cacheable
        var resp = extend({}, response);
        resp.data = transformData(response.data, response.headers, response.status,
                                  config.transformResponse);
        return (isSuccess(response.status))
          ? resp
          : $q.reject(resp);
      }

      function executeHeaderFns(headers, config) {
        var headerContent, processedHeaders = {};

        forEach(headers, function(headerFn, header) {
          if (isFunction(headerFn)) {
            headerContent = headerFn(config);
            if (headerContent != null) {
              processedHeaders[header] = headerContent;
            }
          } else {
            processedHeaders[header] = headerFn;
          }
        });

        return processedHeaders;
      }

      function mergeHeaders(config) {
        var defHeaders = defaults.headers,
            reqHeaders = extend({}, config.headers),
            defHeaderName, lowercaseDefHeaderName, reqHeaderName;

        defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);

        // using for-in instead of forEach to avoid unnecessary iteration after header has been found
        defaultHeadersIteration:
        for (defHeaderName in defHeaders) {
          lowercaseDefHeaderName = lowercase(defHeaderName);

          for (reqHeaderName in reqHeaders) {
            if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
              continue defaultHeadersIteration;
            }
          }

          reqHeaders[defHeaderName] = defHeaders[defHeaderName];
        }

        // execute if header value is a function for merged headers
        return executeHeaderFns(reqHeaders, shallowCopy(config));
      }
    }

    $http.pendingRequests = [];

    /**
     * @ngdoc method
     * @name $http#get
     *
     * @description
     * Shortcut method to perform `GET` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#delete
     *
     * @description
     * Shortcut method to perform `DELETE` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#head
     *
     * @description
     * Shortcut method to perform `HEAD` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#jsonp
     *
     * @description
     * Shortcut method to perform `JSONP` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request.
     *                     The name of the callback should be the string `JSON_CALLBACK`.
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
    createShortMethods('get', 'delete', 'head', 'jsonp');

    /**
     * @ngdoc method
     * @name $http#post
     *
     * @description
     * Shortcut method to perform `POST` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {*} data Request content
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#put
     *
     * @description
     * Shortcut method to perform `PUT` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {*} data Request content
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

     /**
      * @ngdoc method
      * @name $http#patch
      *
      * @description
      * Shortcut method to perform `PATCH` request.
      *
      * @param {string} url Relative or absolute URL specifying the destination of the request
      * @param {*} data Request content
      * @param {Object=} config Optional configuration object
      * @returns {HttpPromise} Future object
      */
    createShortMethodsWithData('post', 'put', 'patch');

        /**
         * @ngdoc property
         * @name $http#defaults
         *
         * @description
         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
         * default headers, withCredentials as well as request and response transformations.
         *
         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
         */
    $http.defaults = defaults;


    return $http;


    function createShortMethods(names) {
      forEach(arguments, function(name) {
        $http[name] = function(url, config) {
          return $http(extend({}, config || {}, {
            method: name,
            url: url
          }));
        };
      });
    }


    function createShortMethodsWithData(name) {
      forEach(arguments, function(name) {
        $http[name] = function(url, data, config) {
          return $http(extend({}, config || {}, {
            method: name,
            url: url,
            data: data
          }));
        };
      });
    }


    /**
     * Makes the request.
     *
     * !!! ACCESSES CLOSURE VARS:
     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
     */
    function sendReq(config, reqData) {
      var deferred = $q.defer(),
          promise = deferred.promise,
          cache,
          cachedResp,
          reqHeaders = config.headers,
          url = buildUrl(config.url, config.paramSerializer(config.params));

      $http.pendingRequests.push(config);
      promise.then(removePendingReq, removePendingReq);


      if ((config.cache || defaults.cache) && config.cache !== false &&
          (config.method === 'GET' || config.method === 'JSONP')) {
        cache = isObject(config.cache) ? config.cache
              : isObject(defaults.cache) ? defaults.cache
              : defaultCache;
      }

      if (cache) {
        cachedResp = cache.get(url);
        if (isDefined(cachedResp)) {
          if (isPromiseLike(cachedResp)) {
            // cached request has already been sent, but there is no response yet
            cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);
          } else {
            // serving from cache
            if (isArray(cachedResp)) {
              resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);
            } else {
              resolvePromise(cachedResp, 200, {}, 'OK');
            }
          }
        } else {
          // put the promise for the non-transformed response into cache as a placeholder
          cache.put(url, promise);
        }
      }


      // if we won't have the response in cache, set the xsrf headers and
      // send the request to the backend
      if (isUndefined(cachedResp)) {
        var xsrfValue = urlIsSameOrigin(config.url)
            ? $$cookieReader()[config.xsrfCookieName || defaults.xsrfCookieName]
            : undefined;
        if (xsrfValue) {
          reqHeaders[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;
        }

        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,
            config.withCredentials, config.responseType);
      }

      return promise;


      /**
       * Callback registered to $httpBackend():
       *  - caches the response if desired
       *  - resolves the raw $http promise
       *  - calls $apply
       */
      function done(status, response, headersString, statusText) {
        if (cache) {
          if (isSuccess(status)) {
            cache.put(url, [status, response, parseHeaders(headersString), statusText]);
          } else {
            // remove promise from the cache
            cache.remove(url);
          }
        }

        function resolveHttpPromise() {
          resolvePromise(response, status, headersString, statusText);
        }

        if (useApplyAsync) {
          $rootScope.$applyAsync(resolveHttpPromise);
        } else {
          resolveHttpPromise();
          if (!$rootScope.$$phase) $rootScope.$apply();
        }
      }


      /**
       * Resolves the raw $http promise.
       */
      function resolvePromise(response, status, headers, statusText) {
        //status: HTTP response status code, 0, -1 (aborted by timeout / promise)
        status = status >= -1 ? status : 0;

        (isSuccess(status) ? deferred.resolve : deferred.reject)({
          data: response,
          status: status,
          headers: headersGetter(headers),
          config: config,
          statusText: statusText
        });
      }

      function resolvePromiseWithResult(result) {
        resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);
      }

      function removePendingReq() {
        var idx = $http.pendingRequests.indexOf(config);
        if (idx !== -1) $http.pendingRequests.splice(idx, 1);
      }
    }


    function buildUrl(url, serializedParams) {
      if (serializedParams.length > 0) {
        url += ((url.indexOf('?') == -1) ? '?' : '&') + serializedParams;
      }
      return url;
    }
  }];
}

/**
 * @ngdoc service
 * @name $xhrFactory
 *
 * @description
 * Factory function used to create XMLHttpRequest objects.
 *
 * Replace or decorate this service to create your own custom XMLHttpRequest objects.
 *
 * ```
 * angular.module('myApp', [])
 * .factory('$xhrFactory', function() {
 *   return function createXhr(method, url) {
 *     return new window.XMLHttpRequest({mozSystem: true});
 *   };
 * });
 * ```
 *
 * @param {string} method HTTP method of the request (GET, POST, PUT, ..)
 * @param {string} url URL of the request.
 */
function $xhrFactoryProvider() {
  this.$get = function() {
    return function createXhr() {
      return new window.XMLHttpRequest();
    };
  };
}

/**
 * @ngdoc service
 * @name $httpBackend
 * @requires $window
 * @requires $document
 * @requires $xhrFactory
 *
 * @description
 * HTTP backend used by the {@link ng.$http service} that delegates to
 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
 *
 * You should never need to use this service directly, instead use the higher-level abstractions:
 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
 *
 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
 * $httpBackend} which can be trained with responses.
 */
function $HttpBackendProvider() {
  this.$get = ['$browser', '$window', '$document', '$xhrFactory', function($browser, $window, $document, $xhrFactory) {
    return createHttpBackend($browser, $xhrFactory, $browser.defer, $window.angular.callbacks, $document[0]);
  }];
}

function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
  // TODO(vojta): fix the signature
  return function(method, url, post, callback, headers, timeout, withCredentials, responseType) {
    $browser.$$incOutstandingRequestCount();
    url = url || $browser.url();

    if (lowercase(method) == 'jsonp') {
      var callbackId = '_' + (callbacks.counter++).toString(36);
      callbacks[callbackId] = function(data) {
        callbacks[callbackId].data = data;
        callbacks[callbackId].called = true;
      };

      var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId),
          callbackId, function(status, text) {
        completeRequest(callback, status, callbacks[callbackId].data, "", text);
        callbacks[callbackId] = noop;
      });
    } else {

      var xhr = createXhr(method, url);

      xhr.open(method, url, true);
      forEach(headers, function(value, key) {
        if (isDefined(value)) {
            xhr.setRequestHeader(key, value);
        }
      });

      xhr.onload = function requestLoaded() {
        var statusText = xhr.statusText || '';

        // responseText is the old-school way of retrieving response (supported by IE9)
        // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
        var response = ('response' in xhr) ? xhr.response : xhr.responseText;

        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
        var status = xhr.status === 1223 ? 204 : xhr.status;

        // fix status code when it is 0 (0 status is undocumented).
        // Occurs when accessing file resources or on Android 4.1 stock browser
        // while retrieving files from application cache.
        if (status === 0) {
          status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;
        }

        completeRequest(callback,
            status,
            response,
            xhr.getAllResponseHeaders(),
            statusText);
      };

      var requestError = function() {
        // The response is always empty
        // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
        completeRequest(callback, -1, null, null, '');
      };

      xhr.onerror = requestError;
      xhr.onabort = requestError;

      if (withCredentials) {
        xhr.withCredentials = true;
      }

      if (responseType) {
        try {
          xhr.responseType = responseType;
        } catch (e) {
          // WebKit added support for the json responseType value on 09/03/2013
          // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
          // known to throw when setting the value "json" as the response type. Other older
          // browsers implementing the responseType
          //
          // The json response type can be ignored if not supported, because JSON payloads are
          // parsed on the client-side regardless.
          if (responseType !== 'json') {
            throw e;
          }
        }
      }

      xhr.send(isUndefined(post) ? null : post);
    }

    if (timeout > 0) {
      var timeoutId = $browserDefer(timeoutRequest, timeout);
    } else if (isPromiseLike(timeout)) {
      timeout.then(timeoutRequest);
    }


    function timeoutRequest() {
      jsonpDone && jsonpDone();
      xhr && xhr.abort();
    }

    function completeRequest(callback, status, response, headersString, statusText) {
      // cancel timeout and subsequent timeout promise resolution
      if (isDefined(timeoutId)) {
        $browserDefer.cancel(timeoutId);
      }
      jsonpDone = xhr = null;

      callback(status, response, headersString, statusText);
      $browser.$$completeOutstandingRequest(noop);
    }
  };

  function jsonpReq(url, callbackId, done) {
    // we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:
    // - fetches local scripts via XHR and evals them
    // - adds and immediately removes script elements from the document
    var script = rawDocument.createElement('script'), callback = null;
    script.type = "text/javascript";
    script.src = url;
    script.async = true;

    callback = function(event) {
      removeEventListenerFn(script, "load", callback);
      removeEventListenerFn(script, "error", callback);
      rawDocument.body.removeChild(script);
      script = null;
      var status = -1;
      var text = "unknown";

      if (event) {
        if (event.type === "load" && !callbacks[callbackId].called) {
          event = { type: "error" };
        }
        text = event.type;
        status = event.type === "error" ? 404 : 200;
      }

      if (done) {
        done(status, text);
      }
    };

    addEventListenerFn(script, "load", callback);
    addEventListenerFn(script, "error", callback);
    rawDocument.body.appendChild(script);
    return callback;
  }
}

var $interpolateMinErr = angular.$interpolateMinErr = minErr('$interpolate');
$interpolateMinErr.throwNoconcat = function(text) {
  throw $interpolateMinErr('noconcat',
      "Error while interpolating: {0}\nStrict Contextual Escaping disallows " +
      "interpolations that concatenate multiple expressions when a trusted value is " +
      "required.  See http://docs.angularjs.org/api/ng.$sce", text);
};

$interpolateMinErr.interr = function(text, err) {
  return $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text, err.toString());
};

/**
 * @ngdoc provider
 * @name $interpolateProvider
 *
 * @description
 *
 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
 *
 * <div class="alert alert-danger">
 * This feature is sometimes used to mix different markup languages, e.g. to wrap an Angular
 * template within a Python Jinja template (or any other template language). Mixing templating
 * languages is **very dangerous**. The embedding template language will not safely escape Angular
 * expressions, so any user-controlled values in the template will cause Cross Site Scripting (XSS)
 * security bugs!
 * </div>
 *
 * @example
<example name="custom-interpolation-markup" module="customInterpolationApp">
<file name="index.html">
<script>
  var customInterpolationApp = angular.module('customInterpolationApp', []);

  customInterpolationApp.config(function($interpolateProvider) {
    $interpolateProvider.startSymbol('//');
    $interpolateProvider.endSymbol('//');
  });


  customInterpolationApp.controller('DemoController', function() {
      this.label = "This binding is brought you by // interpolation symbols.";
  });
</script>
<div ng-controller="DemoController as demo">
    //demo.label//
</div>
</file>
<file name="protractor.js" type="protractor">
  it('should interpolate binding with custom symbols', function() {
    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
  });
</file>
</example>
 */
function $InterpolateProvider() {
  var startSymbol = '{{';
  var endSymbol = '}}';

  /**
   * @ngdoc method
   * @name $interpolateProvider#startSymbol
   * @description
   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
   *
   * @param {string=} value new value to set the starting symbol to.
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
   */
  this.startSymbol = function(value) {
    if (value) {
      startSymbol = value;
      return this;
    } else {
      return startSymbol;
    }
  };

  /**
   * @ngdoc method
   * @name $interpolateProvider#endSymbol
   * @description
   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
   *
   * @param {string=} value new value to set the ending symbol to.
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
   */
  this.endSymbol = function(value) {
    if (value) {
      endSymbol = value;
      return this;
    } else {
      return endSymbol;
    }
  };


  this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {
    var startSymbolLength = startSymbol.length,
        endSymbolLength = endSymbol.length,
        escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'),
        escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');

    function escape(ch) {
      return '\\\\\\' + ch;
    }

    function unescapeText(text) {
      return text.replace(escapedStartRegexp, startSymbol).
        replace(escapedEndRegexp, endSymbol);
    }

    function stringify(value) {
      if (value == null) { // null || undefined
        return '';
      }
      switch (typeof value) {
        case 'string':
          break;
        case 'number':
          value = '' + value;
          break;
        default:
          value = toJson(value);
      }

      return value;
    }

    //TODO: this is the same as the constantWatchDelegate in parse.js
    function constantWatchDelegate(scope, listener, objectEquality, constantInterp) {
      var unwatch;
      return unwatch = scope.$watch(function constantInterpolateWatch(scope) {
        unwatch();
        return constantInterp(scope);
      }, listener, objectEquality);
    }

    /**
     * @ngdoc service
     * @name $interpolate
     * @kind function
     *
     * @requires $parse
     * @requires $sce
     *
     * @description
     *
     * Compiles a string with markup into an interpolation function. This service is used by the
     * HTML {@link ng.$compile $compile} service for data binding. See
     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
     * interpolation markup.
     *
     *
     * ```js
     *   var $interpolate = ...; // injected
     *   var exp = $interpolate('Hello {{name | uppercase}}!');
     *   expect(exp({name:'Angular'})).toEqual('Hello ANGULAR!');
     * ```
     *
     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is
     * `true`, the interpolation function will return `undefined` unless all embedded expressions
     * evaluate to a value other than `undefined`.
     *
     * ```js
     *   var $interpolate = ...; // injected
     *   var context = {greeting: 'Hello', name: undefined };
     *
     *   // default "forgiving" mode
     *   var exp = $interpolate('{{greeting}} {{name}}!');
     *   expect(exp(context)).toEqual('Hello !');
     *
     *   // "allOrNothing" mode
     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);
     *   expect(exp(context)).toBeUndefined();
     *   context.name = 'Angular';
     *   expect(exp(context)).toEqual('Hello Angular!');
     * ```
     *
     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.
     *
     * ####Escaped Interpolation
     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers
     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).
     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression
     * or binding.
     *
     * This enables web-servers to prevent script injection attacks and defacing attacks, to some
     * degree, while also enabling code examples to work without relying on the
     * {@link ng.directive:ngNonBindable ngNonBindable} directive.
     *
     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,
     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all
     * interpolation start/end markers with their escaped counterparts.**
     *
     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered
     * output when the $interpolate service processes the text. So, for HTML elements interpolated
     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter
     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,
     * this is typically useful only when user-data is used in rendering a template from the server, or
     * when otherwise untrusted data is used by a directive.
     *
     * <example>
     *  <file name="index.html">
     *    <div ng-init="username='A user'">
     *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}
     *        </p>
     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the
     *        application, but fails to accomplish their task, because the server has correctly
     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)
     *        characters.</p>
     *      <p>Instead, the result of the attempted script injection is visible, and can be removed
     *        from the database by an administrator.</p>
     *    </div>
     *  </file>
     * </example>
     *
     * @param {string} text The text with markup to interpolate.
     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
     *    embedded expression in order to return an interpolation function. Strings with no
     *    embedded expression will return null for the interpolation function.
     * @param {string=} trustedContext when provided, the returned function passes the interpolated
     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
     *    provides Strict Contextual Escaping for details.
     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined
     *    unless all embedded expressions evaluate to a value other than `undefined`.
     * @returns {function(context)} an interpolation function which is used to compute the
     *    interpolated string. The function has these parameters:
     *
     * - `context`: evaluation context for all expressions embedded in the interpolated text
     */
    function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {
      // Provide a quick exit and simplified result function for text with no interpolation
      if (!text.length || text.indexOf(startSymbol) === -1) {
        var constantInterp;
        if (!mustHaveExpression) {
          var unescapedText = unescapeText(text);
          constantInterp = valueFn(unescapedText);
          constantInterp.exp = text;
          constantInterp.expressions = [];
          constantInterp.$$watchDelegate = constantWatchDelegate;
        }
        return constantInterp;
      }

      allOrNothing = !!allOrNothing;
      var startIndex,
          endIndex,
          index = 0,
          expressions = [],
          parseFns = [],
          textLength = text.length,
          exp,
          concat = [],
          expressionPositions = [];

      while (index < textLength) {
        if (((startIndex = text.indexOf(startSymbol, index)) != -1) &&
             ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1)) {
          if (index !== startIndex) {
            concat.push(unescapeText(text.substring(index, startIndex)));
          }
          exp = text.substring(startIndex + startSymbolLength, endIndex);
          expressions.push(exp);
          parseFns.push($parse(exp, parseStringifyInterceptor));
          index = endIndex + endSymbolLength;
          expressionPositions.push(concat.length);
          concat.push('');
        } else {
          // we did not find an interpolation, so we have to add the remainder to the separators array
          if (index !== textLength) {
            concat.push(unescapeText(text.substring(index)));
          }
          break;
        }
      }

      // Concatenating expressions makes it hard to reason about whether some combination of
      // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
      // single expression be used for iframe[src], object[src], etc., we ensure that the value
      // that's used is assigned or constructed by some JS code somewhere that is more testable or
      // make it obvious that you bound the value to some user controlled value.  This helps reduce
      // the load when auditing for XSS issues.
      if (trustedContext && concat.length > 1) {
          $interpolateMinErr.throwNoconcat(text);
      }

      if (!mustHaveExpression || expressions.length) {
        var compute = function(values) {
          for (var i = 0, ii = expressions.length; i < ii; i++) {
            if (allOrNothing && isUndefined(values[i])) return;
            concat[expressionPositions[i]] = values[i];
          }
          return concat.join('');
        };

        var getValue = function(value) {
          return trustedContext ?
            $sce.getTrusted(trustedContext, value) :
            $sce.valueOf(value);
        };

        return extend(function interpolationFn(context) {
            var i = 0;
            var ii = expressions.length;
            var values = new Array(ii);

            try {
              for (; i < ii; i++) {
                values[i] = parseFns[i](context);
              }

              return compute(values);
            } catch (err) {
              $exceptionHandler($interpolateMinErr.interr(text, err));
            }

          }, {
          // all of these properties are undocumented for now
          exp: text, //just for compatibility with regular watchers created via $watch
          expressions: expressions,
          $$watchDelegate: function(scope, listener) {
            var lastValue;
            return scope.$watchGroup(parseFns, function interpolateFnWatcher(values, oldValues) {
              var currValue = compute(values);
              if (isFunction(listener)) {
                listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);
              }
              lastValue = currValue;
            });
          }
        });
      }

      function parseStringifyInterceptor(value) {
        try {
          value = getValue(value);
          return allOrNothing && !isDefined(value) ? value : stringify(value);
        } catch (err) {
          $exceptionHandler($interpolateMinErr.interr(text, err));
        }
      }
    }


    /**
     * @ngdoc method
     * @name $interpolate#startSymbol
     * @description
     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
     *
     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change
     * the symbol.
     *
     * @returns {string} start symbol.
     */
    $interpolate.startSymbol = function() {
      return startSymbol;
    };


    /**
     * @ngdoc method
     * @name $interpolate#endSymbol
     * @description
     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
     *
     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change
     * the symbol.
     *
     * @returns {string} end symbol.
     */
    $interpolate.endSymbol = function() {
      return endSymbol;
    };

    return $interpolate;
  }];
}

function $IntervalProvider() {
  this.$get = ['$rootScope', '$window', '$q', '$$q', '$browser',
       function($rootScope,   $window,   $q,   $$q,   $browser) {
    var intervals = {};


     /**
      * @ngdoc service
      * @name $interval
      *
      * @description
      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
      * milliseconds.
      *
      * The return value of registering an interval function is a promise. This promise will be
      * notified upon each tick of the interval, and will be resolved after `count` iterations, or
      * run indefinitely if `count` is not defined. The value of the notification will be the
      * number of iterations that have run.
      * To cancel an interval, call `$interval.cancel(promise)`.
      *
      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
      * time.
      *
      * <div class="alert alert-warning">
      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
      * with them.  In particular they are not automatically destroyed when a controller's scope or a
      * directive's element are destroyed.
      * You should take this into consideration and make sure to always cancel the interval at the
      * appropriate moment.  See the example below for more details on how and when to do this.
      * </div>
      *
      * @param {function()} fn A function that should be called repeatedly.
      * @param {number} delay Number of milliseconds between each function call.
      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
      *   indefinitely.
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
      * @param {...*=} Pass additional parameters to the executed function.
      * @returns {promise} A promise which will be notified on each iteration.
      *
      * @example
      * <example module="intervalExample">
      * <file name="index.html">
      *   <script>
      *     angular.module('intervalExample', [])
      *       .controller('ExampleController', ['$scope', '$interval',
      *         function($scope, $interval) {
      *           $scope.format = 'M/d/yy h:mm:ss a';
      *           $scope.blood_1 = 100;
      *           $scope.blood_2 = 120;
      *
      *           var stop;
      *           $scope.fight = function() {
      *             // Don't start a new fight if we are already fighting
      *             if ( angular.isDefined(stop) ) return;
      *
      *             stop = $interval(function() {
      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
      *                 $scope.blood_1 = $scope.blood_1 - 3;
      *                 $scope.blood_2 = $scope.blood_2 - 4;
      *               } else {
      *                 $scope.stopFight();
      *               }
      *             }, 100);
      *           };
      *
      *           $scope.stopFight = function() {
      *             if (angular.isDefined(stop)) {
      *               $interval.cancel(stop);
      *               stop = undefined;
      *             }
      *           };
      *
      *           $scope.resetFight = function() {
      *             $scope.blood_1 = 100;
      *             $scope.blood_2 = 120;
      *           };
      *
      *           $scope.$on('$destroy', function() {
      *             // Make sure that the interval is destroyed too
      *             $scope.stopFight();
      *           });
      *         }])
      *       // Register the 'myCurrentTime' directive factory method.
      *       // We inject $interval and dateFilter service since the factory method is DI.
      *       .directive('myCurrentTime', ['$interval', 'dateFilter',
      *         function($interval, dateFilter) {
      *           // return the directive link function. (compile function not needed)
      *           return function(scope, element, attrs) {
      *             var format,  // date format
      *                 stopTime; // so that we can cancel the time updates
      *
      *             // used to update the UI
      *             function updateTime() {
      *               element.text(dateFilter(new Date(), format));
      *             }
      *
      *             // watch the expression, and update the UI on change.
      *             scope.$watch(attrs.myCurrentTime, function(value) {
      *               format = value;
      *               updateTime();
      *             });
      *
      *             stopTime = $interval(updateTime, 1000);
      *
      *             // listen on DOM destroy (removal) event, and cancel the next UI update
      *             // to prevent updating time after the DOM element was removed.
      *             element.on('$destroy', function() {
      *               $interval.cancel(stopTime);
      *             });
      *           }
      *         }]);
      *   </script>
      *
      *   <div>
      *     <div ng-controller="ExampleController">
      *       <label>Date format: <input ng-model="format"></label> <hr/>
      *       Current time is: <span my-current-time="format"></span>
      *       <hr/>
      *       Blood 1 : <font color='red'>{{blood_1}}</font>
      *       Blood 2 : <font color='red'>{{blood_2}}</font>
      *       <button type="button" data-ng-click="fight()">Fight</button>
      *       <button type="button" data-ng-click="stopFight()">StopFight</button>
      *       <button type="button" data-ng-click="resetFight()">resetFight</button>
      *     </div>
      *   </div>
      *
      * </file>
      * </example>
      */
    function interval(fn, delay, count, invokeApply) {
      var hasParams = arguments.length > 4,
          args = hasParams ? sliceArgs(arguments, 4) : [],
          setInterval = $window.setInterval,
          clearInterval = $window.clearInterval,
          iteration = 0,
          skipApply = (isDefined(invokeApply) && !invokeApply),
          deferred = (skipApply ? $$q : $q).defer(),
          promise = deferred.promise;

      count = isDefined(count) ? count : 0;

      promise.$$intervalId = setInterval(function tick() {
        if (skipApply) {
          $browser.defer(callback);
        } else {
          $rootScope.$evalAsync(callback);
        }
        deferred.notify(iteration++);

        if (count > 0 && iteration >= count) {
          deferred.resolve(iteration);
          clearInterval(promise.$$intervalId);
          delete intervals[promise.$$intervalId];
        }

        if (!skipApply) $rootScope.$apply();

      }, delay);

      intervals[promise.$$intervalId] = deferred;

      return promise;

      function callback() {
        if (!hasParams) {
          fn(iteration);
        } else {
          fn.apply(null, args);
        }
      }
    }


     /**
      * @ngdoc method
      * @name $interval#cancel
      *
      * @description
      * Cancels a task associated with the `promise`.
      *
      * @param {Promise=} promise returned by the `$interval` function.
      * @returns {boolean} Returns `true` if the task was successfully canceled.
      */
    interval.cancel = function(promise) {
      if (promise && promise.$$intervalId in intervals) {
        intervals[promise.$$intervalId].reject('canceled');
        $window.clearInterval(promise.$$intervalId);
        delete intervals[promise.$$intervalId];
        return true;
      }
      return false;
    };

    return interval;
  }];
}

/**
 * @ngdoc service
 * @name $locale
 *
 * @description
 * $locale service provides localization rules for various Angular components. As of right now the
 * only public api is:
 *
 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
 */

var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/,
    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};
var $locationMinErr = minErr('$location');


/**
 * Encode path using encodeUriSegment, ignoring forward slashes
 *
 * @param {string} path Path to encode
 * @returns {string}
 */
function encodePath(path) {
  var segments = path.split('/'),
      i = segments.length;

  while (i--) {
    segments[i] = encodeUriSegment(segments[i]);
  }

  return segments.join('/');
}

function parseAbsoluteUrl(absoluteUrl, locationObj) {
  var parsedUrl = urlResolve(absoluteUrl);

  locationObj.$$protocol = parsedUrl.protocol;
  locationObj.$$host = parsedUrl.hostname;
  locationObj.$$port = toInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
}


function parseAppUrl(relativeUrl, locationObj) {
  var prefixed = (relativeUrl.charAt(0) !== '/');
  if (prefixed) {
    relativeUrl = '/' + relativeUrl;
  }
  var match = urlResolve(relativeUrl);
  locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?
      match.pathname.substring(1) : match.pathname);
  locationObj.$$search = parseKeyValue(match.search);
  locationObj.$$hash = decodeURIComponent(match.hash);

  // make sure path starts with '/';
  if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {
    locationObj.$$path = '/' + locationObj.$$path;
  }
}


/**
 *
 * @param {string} begin
 * @param {string} whole
 * @returns {string} returns text from whole after begin or undefined if it does not begin with
 *                   expected string.
 */
function beginsWith(begin, whole) {
  if (whole.indexOf(begin) === 0) {
    return whole.substr(begin.length);
  }
}


function stripHash(url) {
  var index = url.indexOf('#');
  return index == -1 ? url : url.substr(0, index);
}

function trimEmptyHash(url) {
  return url.replace(/(#.+)|#$/, '$1');
}


function stripFile(url) {
  return url.substr(0, stripHash(url).lastIndexOf('/') + 1);
}

/* return the server only (scheme://host:port) */
function serverBase(url) {
  return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));
}


/**
 * LocationHtml5Url represents an url
 * This object is exposed as $location service when HTML5 mode is enabled and supported
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} appBaseNoFile application base URL stripped of any filename
 * @param {string} basePrefix url path prefix
 */
function LocationHtml5Url(appBase, appBaseNoFile, basePrefix) {
  this.$$html5 = true;
  basePrefix = basePrefix || '';
  parseAbsoluteUrl(appBase, this);


  /**
   * Parse given html5 (regular) url string into properties
   * @param {string} url HTML5 url
   * @private
   */
  this.$$parse = function(url) {
    var pathUrl = beginsWith(appBaseNoFile, url);
    if (!isString(pathUrl)) {
      throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url,
          appBaseNoFile);
    }

    parseAppUrl(pathUrl, this);

    if (!this.$$path) {
      this.$$path = '/';
    }

    this.$$compose();
  };

  /**
   * Compose url and update `absUrl` property
   * @private
   */
  this.$$compose = function() {
    var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
    this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'
  };

  this.$$parseLinkUrl = function(url, relHref) {
    if (relHref && relHref[0] === '#') {
      // special case for links to hash fragments:
      // keep the old url and only replace the hash fragment
      this.hash(relHref.slice(1));
      return true;
    }
    var appUrl, prevAppUrl;
    var rewrittenUrl;

    if (isDefined(appUrl = beginsWith(appBase, url))) {
      prevAppUrl = appUrl;
      if (isDefined(appUrl = beginsWith(basePrefix, appUrl))) {
        rewrittenUrl = appBaseNoFile + (beginsWith('/', appUrl) || appUrl);
      } else {
        rewrittenUrl = appBase + prevAppUrl;
      }
    } else if (isDefined(appUrl = beginsWith(appBaseNoFile, url))) {
      rewrittenUrl = appBaseNoFile + appUrl;
    } else if (appBaseNoFile == url + '/') {
      rewrittenUrl = appBaseNoFile;
    }
    if (rewrittenUrl) {
      this.$$parse(rewrittenUrl);
    }
    return !!rewrittenUrl;
  };
}


/**
 * LocationHashbangUrl represents url
 * This object is exposed as $location service when developer doesn't opt into html5 mode.
 * It also serves as the base class for html5 mode fallback on legacy browsers.
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} appBaseNoFile application base URL stripped of any filename
 * @param {string} hashPrefix hashbang prefix
 */
function LocationHashbangUrl(appBase, appBaseNoFile, hashPrefix) {

  parseAbsoluteUrl(appBase, this);


  /**
   * Parse given hashbang url into properties
   * @param {string} url Hashbang url
   * @private
   */
  this.$$parse = function(url) {
    var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);
    var withoutHashUrl;

    if (!isUndefined(withoutBaseUrl) && withoutBaseUrl.charAt(0) === '#') {

      // The rest of the url starts with a hash so we have
      // got either a hashbang path or a plain hash fragment
      withoutHashUrl = beginsWith(hashPrefix, withoutBaseUrl);
      if (isUndefined(withoutHashUrl)) {
        // There was no hashbang prefix so we just have a hash fragment
        withoutHashUrl = withoutBaseUrl;
      }

    } else {
      // There was no hashbang path nor hash fragment:
      // If we are in HTML5 mode we use what is left as the path;
      // Otherwise we ignore what is left
      if (this.$$html5) {
        withoutHashUrl = withoutBaseUrl;
      } else {
        withoutHashUrl = '';
        if (isUndefined(withoutBaseUrl)) {
          appBase = url;
          this.replace();
        }
      }
    }

    parseAppUrl(withoutHashUrl, this);

    this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);

    this.$$compose();

    /*
     * In Windows, on an anchor node on documents loaded from
     * the filesystem, the browser will return a pathname
     * prefixed with the drive name ('/C:/path') when a
     * pathname without a drive is set:
     *  * a.setAttribute('href', '/foo')
     *   * a.pathname === '/C:/foo' //true
     *
     * Inside of Angular, we're always using pathnames that
     * do not include drive names for routing.
     */
    function removeWindowsDriveName(path, url, base) {
      /*
      Matches paths for file protocol on windows,
      such as /C:/foo/bar, and captures only /foo/bar.
      */
      var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;

      var firstPathSegmentMatch;

      //Get the relative path from the input URL.
      if (url.indexOf(base) === 0) {
        url = url.replace(base, '');
      }

      // The input URL intentionally contains a first path segment that ends with a colon.
      if (windowsFilePathExp.exec(url)) {
        return path;
      }

      firstPathSegmentMatch = windowsFilePathExp.exec(path);
      return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
    }
  };

  /**
   * Compose hashbang url and update `absUrl` property
   * @private
   */
  this.$$compose = function() {
    var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
    this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');
  };

  this.$$parseLinkUrl = function(url, relHref) {
    if (stripHash(appBase) == stripHash(url)) {
      this.$$parse(url);
      return true;
    }
    return false;
  };
}


/**
 * LocationHashbangUrl represents url
 * This object is exposed as $location service when html5 history api is enabled but the browser
 * does not support it.
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} appBaseNoFile application base URL stripped of any filename
 * @param {string} hashPrefix hashbang prefix
 */
function LocationHashbangInHtml5Url(appBase, appBaseNoFile, hashPrefix) {
  this.$$html5 = true;
  LocationHashbangUrl.apply(this, arguments);

  this.$$parseLinkUrl = function(url, relHref) {
    if (relHref && relHref[0] === '#') {
      // special case for links to hash fragments:
      // keep the old url and only replace the hash fragment
      this.hash(relHref.slice(1));
      return true;
    }

    var rewrittenUrl;
    var appUrl;

    if (appBase == stripHash(url)) {
      rewrittenUrl = url;
    } else if ((appUrl = beginsWith(appBaseNoFile, url))) {
      rewrittenUrl = appBase + hashPrefix + appUrl;
    } else if (appBaseNoFile === url + '/') {
      rewrittenUrl = appBaseNoFile;
    }
    if (rewrittenUrl) {
      this.$$parse(rewrittenUrl);
    }
    return !!rewrittenUrl;
  };

  this.$$compose = function() {
    var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
    // include hashPrefix in $$absUrl when $$url is empty so IE9 does not reload page because of removal of '#'
    this.$$absUrl = appBase + hashPrefix + this.$$url;
  };

}


var locationPrototype = {

  /**
   * Are we in html5 mode?
   * @private
   */
  $$html5: false,

  /**
   * Has any change been replacing?
   * @private
   */
  $$replace: false,

  /**
   * @ngdoc method
   * @name $location#absUrl
   *
   * @description
   * This method is getter only.
   *
   * Return full url representation with all segments encoded according to rules specified in
   * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var absUrl = $location.absUrl();
   * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"
   * ```
   *
   * @return {string} full url
   */
  absUrl: locationGetter('$$absUrl'),

  /**
   * @ngdoc method
   * @name $location#url
   *
   * @description
   * This method is getter / setter.
   *
   * Return url (e.g. `/path?a=b#hash`) when called without any parameter.
   *
   * Change path, search and hash, when called with parameter and return `$location`.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var url = $location.url();
   * // => "/some/path?foo=bar&baz=xoxo"
   * ```
   *
   * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)
   * @return {string} url
   */
  url: function(url) {
    if (isUndefined(url)) {
      return this.$$url;
    }

    var match = PATH_MATCH.exec(url);
    if (match[1] || url === '') this.path(decodeURIComponent(match[1]));
    if (match[2] || match[1] || url === '') this.search(match[3] || '');
    this.hash(match[5] || '');

    return this;
  },

  /**
   * @ngdoc method
   * @name $location#protocol
   *
   * @description
   * This method is getter only.
   *
   * Return protocol of current url.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var protocol = $location.protocol();
   * // => "http"
   * ```
   *
   * @return {string} protocol of current url
   */
  protocol: locationGetter('$$protocol'),

  /**
   * @ngdoc method
   * @name $location#host
   *
   * @description
   * This method is getter only.
   *
   * Return host of current url.
   *
   * Note: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var host = $location.host();
   * // => "example.com"
   *
   * // given url http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo
   * host = $location.host();
   * // => "example.com"
   * host = location.host;
   * // => "example.com:8080"
   * ```
   *
   * @return {string} host of current url.
   */
  host: locationGetter('$$host'),

  /**
   * @ngdoc method
   * @name $location#port
   *
   * @description
   * This method is getter only.
   *
   * Return port of current url.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var port = $location.port();
   * // => 80
   * ```
   *
   * @return {Number} port
   */
  port: locationGetter('$$port'),

  /**
   * @ngdoc method
   * @name $location#path
   *
   * @description
   * This method is getter / setter.
   *
   * Return path of current url when called without any parameter.
   *
   * Change path when called with parameter and return `$location`.
   *
   * Note: Path should always begin with forward slash (/), this method will add the forward slash
   * if it is missing.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var path = $location.path();
   * // => "/some/path"
   * ```
   *
   * @param {(string|number)=} path New path
   * @return {string} path
   */
  path: locationGetterSetter('$$path', function(path) {
    path = path !== null ? path.toString() : '';
    return path.charAt(0) == '/' ? path : '/' + path;
  }),

  /**
   * @ngdoc method
   * @name $location#search
   *
   * @description
   * This method is getter / setter.
   *
   * Return search part (as object) of current url when called without any parameter.
   *
   * Change search part when called with parameter and return `$location`.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var searchObject = $location.search();
   * // => {foo: 'bar', baz: 'xoxo'}
   *
   * // set foo to 'yipee'
   * $location.search('foo', 'yipee');
   * // $location.search() => {foo: 'yipee', baz: 'xoxo'}
   * ```
   *
   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or
   * hash object.
   *
   * When called with a single argument the method acts as a setter, setting the `search` component
   * of `$location` to the specified value.
   *
   * If the argument is a hash object containing an array of values, these values will be encoded
   * as duplicate search parameters in the url.
   *
   * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`
   * will override only a single search property.
   *
   * If `paramValue` is an array, it will override the property of the `search` component of
   * `$location` specified via the first argument.
   *
   * If `paramValue` is `null`, the property specified via the first argument will be deleted.
   *
   * If `paramValue` is `true`, the property specified via the first argument will be added with no
   * value nor trailing equal sign.
   *
   * @return {Object} If called with no arguments returns the parsed `search` object. If called with
   * one or more arguments returns `$location` object itself.
   */
  search: function(search, paramValue) {
    switch (arguments.length) {
      case 0:
        return this.$$search;
      case 1:
        if (isString(search) || isNumber(search)) {
          search = search.toString();
          this.$$search = parseKeyValue(search);
        } else if (isObject(search)) {
          search = copy(search, {});
          // remove object undefined or null properties
          forEach(search, function(value, key) {
            if (value == null) delete search[key];
          });

          this.$$search = search;
        } else {
          throw $locationMinErr('isrcharg',
              'The first argument of the `$location#search()` call must be a string or an object.');
        }
        break;
      default:
        if (isUndefined(paramValue) || paramValue === null) {
          delete this.$$search[search];
        } else {
          this.$$search[search] = paramValue;
        }
    }

    this.$$compose();
    return this;
  },

  /**
   * @ngdoc method
   * @name $location#hash
   *
   * @description
   * This method is getter / setter.
   *
   * Returns the hash fragment when called without any parameters.
   *
   * Changes the hash fragment when called with a parameter and returns `$location`.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue
   * var hash = $location.hash();
   * // => "hashValue"
   * ```
   *
   * @param {(string|number)=} hash New hash fragment
   * @return {string} hash
   */
  hash: locationGetterSetter('$$hash', function(hash) {
    return hash !== null ? hash.toString() : '';
  }),

  /**
   * @ngdoc method
   * @name $location#replace
   *
   * @description
   * If called, all changes to $location during the current `$digest` will replace the current history
   * record, instead of adding a new one.
   */
  replace: function() {
    this.$$replace = true;
    return this;
  }
};

forEach([LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url], function(Location) {
  Location.prototype = Object.create(locationPrototype);

  /**
   * @ngdoc method
   * @name $location#state
   *
   * @description
   * This method is getter / setter.
   *
   * Return the history state object when called without any parameter.
   *
   * Change the history state object when called with one parameter and return `$location`.
   * The state object is later passed to `pushState` or `replaceState`.
   *
   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting
   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support
   * older browsers (like IE9 or Android < 4.0), don't use this method.
   *
   * @param {object=} state State object for pushState or replaceState
   * @return {object} state
   */
  Location.prototype.state = function(state) {
    if (!arguments.length) {
      return this.$$state;
    }

    if (Location !== LocationHtml5Url || !this.$$html5) {
      throw $locationMinErr('nostate', 'History API state support is available only ' +
        'in HTML5 mode and only in browsers supporting HTML5 History API');
    }
    // The user might modify `stateObject` after invoking `$location.state(stateObject)`
    // but we're changing the $$state reference to $browser.state() during the $digest
    // so the modification window is narrow.
    this.$$state = isUndefined(state) ? null : state;

    return this;
  };
});


function locationGetter(property) {
  return function() {
    return this[property];
  };
}


function locationGetterSetter(property, preprocess) {
  return function(value) {
    if (isUndefined(value)) {
      return this[property];
    }

    this[property] = preprocess(value);
    this.$$compose();

    return this;
  };
}


/**
 * @ngdoc service
 * @name $location
 *
 * @requires $rootElement
 *
 * @description
 * The $location service parses the URL in the browser address bar (based on the
 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
 * available to your application. Changes to the URL in the address bar are reflected into
 * $location service and changes to $location are reflected into the browser address bar.
 *
 * **The $location service:**
 *
 * - Exposes the current URL in the browser address bar, so you can
 *   - Watch and observe the URL.
 *   - Change the URL.
 * - Synchronizes the URL with the browser when the user
 *   - Changes the address bar.
 *   - Clicks the back or forward button (or clicks a History link).
 *   - Clicks on a link.
 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
 *
 * For more information see {@link guide/$location Developer Guide: Using $location}
 */

/**
 * @ngdoc provider
 * @name $locationProvider
 * @description
 * Use the `$locationProvider` to configure how the application deep linking paths are stored.
 */
function $LocationProvider() {
  var hashPrefix = '',
      html5Mode = {
        enabled: false,
        requireBase: true,
        rewriteLinks: true
      };

  /**
   * @ngdoc method
   * @name $locationProvider#hashPrefix
   * @description
   * @param {string=} prefix Prefix for hash part (containing path and search)
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
  this.hashPrefix = function(prefix) {
    if (isDefined(prefix)) {
      hashPrefix = prefix;
      return this;
    } else {
      return hashPrefix;
    }
  };

  /**
   * @ngdoc method
   * @name $locationProvider#html5Mode
   * @description
   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.
   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported
   *   properties:
   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to
   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not
   *     support `pushState`.
   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies
   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are
   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.
   *     See the {@link guide/$location $location guide for more information}
   *   - **rewriteLinks** - `{boolean}` - (default: `true`) When html5Mode is enabled,
   *     enables/disables url rewriting for relative links.
   *
   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter
   */
  this.html5Mode = function(mode) {
    if (isBoolean(mode)) {
      html5Mode.enabled = mode;
      return this;
    } else if (isObject(mode)) {

      if (isBoolean(mode.enabled)) {
        html5Mode.enabled = mode.enabled;
      }

      if (isBoolean(mode.requireBase)) {
        html5Mode.requireBase = mode.requireBase;
      }

      if (isBoolean(mode.rewriteLinks)) {
        html5Mode.rewriteLinks = mode.rewriteLinks;
      }

      return this;
    } else {
      return html5Mode;
    }
  };

  /**
   * @ngdoc event
   * @name $location#$locationChangeStart
   * @eventType broadcast on root scope
   * @description
   * Broadcasted before a URL will change.
   *
   * This change can be prevented by calling
   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
   * details about event object. Upon successful change
   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.
   *
   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
   * the browser supports the HTML5 History API.
   *
   * @param {Object} angularEvent Synthetic event object.
   * @param {string} newUrl New URL
   * @param {string=} oldUrl URL that was before it was changed.
   * @param {string=} newState New history state object
   * @param {string=} oldState History state object that was before it was changed.
   */

  /**
   * @ngdoc event
   * @name $location#$locationChangeSuccess
   * @eventType broadcast on root scope
   * @description
   * Broadcasted after a URL was changed.
   *
   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
   * the browser supports the HTML5 History API.
   *
   * @param {Object} angularEvent Synthetic event object.
   * @param {string} newUrl New URL
   * @param {string=} oldUrl URL that was before it was changed.
   * @param {string=} newState New history state object
   * @param {string=} oldState History state object that was before it was changed.
   */

  this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement', '$window',
      function($rootScope, $browser, $sniffer, $rootElement, $window) {
    var $location,
        LocationMode,
        baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''
        initialUrl = $browser.url(),
        appBase;

    if (html5Mode.enabled) {
      if (!baseHref && html5Mode.requireBase) {
        throw $locationMinErr('nobase',
          "$location in HTML5 mode requires a <base> tag to be present!");
      }
      appBase = serverBase(initialUrl) + (baseHref || '/');
      LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
    } else {
      appBase = stripHash(initialUrl);
      LocationMode = LocationHashbangUrl;
    }
    var appBaseNoFile = stripFile(appBase);

    $location = new LocationMode(appBase, appBaseNoFile, '#' + hashPrefix);
    $location.$$parseLinkUrl(initialUrl, initialUrl);

    $location.$$state = $browser.state();

    var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;

    function setBrowserUrlWithFallback(url, replace, state) {
      var oldUrl = $location.url();
      var oldState = $location.$$state;
      try {
        $browser.url(url, replace, state);

        // Make sure $location.state() returns referentially identical (not just deeply equal)
        // state object; this makes possible quick checking if the state changed in the digest
        // loop. Checking deep equality would be too expensive.
        $location.$$state = $browser.state();
      } catch (e) {
        // Restore old values if pushState fails
        $location.url(oldUrl);
        $location.$$state = oldState;

        throw e;
      }
    }

    $rootElement.on('click', function(event) {
      // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
      // currently we open nice url link and redirect then

      if (!html5Mode.rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which == 2 || event.button == 2) return;

      var elm = jqLite(event.target);

      // traverse the DOM up to find first A tag
      while (nodeName_(elm[0]) !== 'a') {
        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)
        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;
      }

      var absHref = elm.prop('href');
      // get the actual href attribute - see
      // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
      var relHref = elm.attr('href') || elm.attr('xlink:href');

      if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {
        // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
        // an animation.
        absHref = urlResolve(absHref.animVal).href;
      }

      // Ignore when url is started with javascript: or mailto:
      if (IGNORE_URI_REGEXP.test(absHref)) return;

      if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {
        if ($location.$$parseLinkUrl(absHref, relHref)) {
          // We do a preventDefault for all urls that are part of the angular application,
          // in html5mode and also without, so that we are able to abort navigation without
          // getting double entries in the location history.
          event.preventDefault();
          // update location manually
          if ($location.absUrl() != $browser.url()) {
            $rootScope.$apply();
            // hack to work around FF6 bug 684208 when scenario runner clicks on links
            $window.angular['ff-684208-preventDefault'] = true;
          }
        }
      }
    });


    // rewrite hashbang url <> html5 url
    if (trimEmptyHash($location.absUrl()) != trimEmptyHash(initialUrl)) {
      $browser.url($location.absUrl(), true);
    }

    var initializing = true;

    // update $location when $browser url changes
    $browser.onUrlChange(function(newUrl, newState) {

      if (isUndefined(beginsWith(appBaseNoFile, newUrl))) {
        // If we are navigating outside of the app then force a reload
        $window.location.href = newUrl;
        return;
      }

      $rootScope.$evalAsync(function() {
        var oldUrl = $location.absUrl();
        var oldState = $location.$$state;
        var defaultPrevented;
        newUrl = trimEmptyHash(newUrl);
        $location.$$parse(newUrl);
        $location.$$state = newState;

        defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
            newState, oldState).defaultPrevented;

        // if the location was changed by a `$locationChangeStart` handler then stop
        // processing this location change
        if ($location.absUrl() !== newUrl) return;

        if (defaultPrevented) {
          $location.$$parse(oldUrl);
          $location.$$state = oldState;
          setBrowserUrlWithFallback(oldUrl, false, oldState);
        } else {
          initializing = false;
          afterLocationChange(oldUrl, oldState);
        }
      });
      if (!$rootScope.$$phase) $rootScope.$digest();
    });

    // update browser
    $rootScope.$watch(function $locationWatch() {
      var oldUrl = trimEmptyHash($browser.url());
      var newUrl = trimEmptyHash($location.absUrl());
      var oldState = $browser.state();
      var currentReplace = $location.$$replace;
      var urlOrStateChanged = oldUrl !== newUrl ||
        ($location.$$html5 && $sniffer.history && oldState !== $location.$$state);

      if (initializing || urlOrStateChanged) {
        initializing = false;

        $rootScope.$evalAsync(function() {
          var newUrl = $location.absUrl();
          var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
              $location.$$state, oldState).defaultPrevented;

          // if the location was changed by a `$locationChangeStart` handler then stop
          // processing this location change
          if ($location.absUrl() !== newUrl) return;

          if (defaultPrevented) {
            $location.$$parse(oldUrl);
            $location.$$state = oldState;
          } else {
            if (urlOrStateChanged) {
              setBrowserUrlWithFallback(newUrl, currentReplace,
                                        oldState === $location.$$state ? null : $location.$$state);
            }
            afterLocationChange(oldUrl, oldState);
          }
        });
      }

      $location.$$replace = false;

      // we don't need to return anything because $evalAsync will make the digest loop dirty when
      // there is a change
    });

    return $location;

    function afterLocationChange(oldUrl, oldState) {
      $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl,
        $location.$$state, oldState);
    }
}];
}

/**
 * @ngdoc service
 * @name $log
 * @requires $window
 *
 * @description
 * Simple service for logging. Default implementation safely writes the message
 * into the browser's console (if present).
 *
 * The main purpose of this service is to simplify debugging and troubleshooting.
 *
 * The default is to log `debug` messages. You can use
 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
 *
 * @example
   <example module="logExample">
     <file name="script.js">
       angular.module('logExample', [])
         .controller('LogController', ['$scope', '$log', function($scope, $log) {
           $scope.$log = $log;
           $scope.message = 'Hello World!';
         }]);
     </file>
     <file name="index.html">
       <div ng-controller="LogController">
         <p>Reload this page with open console, enter text and hit the log button...</p>
         <label>Message:
         <input type="text" ng-model="message" /></label>
         <button ng-click="$log.log(message)">log</button>
         <button ng-click="$log.warn(message)">warn</button>
         <button ng-click="$log.info(message)">info</button>
         <button ng-click="$log.error(message)">error</button>
         <button ng-click="$log.debug(message)">debug</button>
       </div>
     </file>
   </example>
 */

/**
 * @ngdoc provider
 * @name $logProvider
 * @description
 * Use the `$logProvider` to configure how the application logs messages
 */
function $LogProvider() {
  var debug = true,
      self = this;

  /**
   * @ngdoc method
   * @name $logProvider#debugEnabled
   * @description
   * @param {boolean=} flag enable or disable debug level messages
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
  this.debugEnabled = function(flag) {
    if (isDefined(flag)) {
      debug = flag;
    return this;
    } else {
      return debug;
    }
  };

  this.$get = ['$window', function($window) {
    return {
      /**
       * @ngdoc method
       * @name $log#log
       *
       * @description
       * Write a log message
       */
      log: consoleLog('log'),

      /**
       * @ngdoc method
       * @name $log#info
       *
       * @description
       * Write an information message
       */
      info: consoleLog('info'),

      /**
       * @ngdoc method
       * @name $log#warn
       *
       * @description
       * Write a warning message
       */
      warn: consoleLog('warn'),

      /**
       * @ngdoc method
       * @name $log#error
       *
       * @description
       * Write an error message
       */
      error: consoleLog('error'),

      /**
       * @ngdoc method
       * @name $log#debug
       *
       * @description
       * Write a debug message
       */
      debug: (function() {
        var fn = consoleLog('debug');

        return function() {
          if (debug) {
            fn.apply(self, arguments);
          }
        };
      }())
    };

    function formatError(arg) {
      if (arg instanceof Error) {
        if (arg.stack) {
          arg = (arg.message && arg.stack.indexOf(arg.message) === -1)
              ? 'Error: ' + arg.message + '\n' + arg.stack
              : arg.stack;
        } else if (arg.sourceURL) {
          arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;
        }
      }
      return arg;
    }

    function consoleLog(type) {
      var console = $window.console || {},
          logFn = console[type] || console.log || noop,
          hasApply = false;

      // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
      // The reason behind this is that console.log has type "object" in IE8...
      try {
        hasApply = !!logFn.apply;
      } catch (e) {}

      if (hasApply) {
        return function() {
          var args = [];
          forEach(arguments, function(arg) {
            args.push(formatError(arg));
          });
          return logFn.apply(console, args);
        };
      }

      // we are IE which either doesn't have window.console => this is noop and we do nothing,
      // or we are IE where console.log doesn't have apply so we log at least first 2 args
      return function(arg1, arg2) {
        logFn(arg1, arg2 == null ? '' : arg2);
      };
    }
  }];
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *     Any commits to this file should be reviewed with security in mind.  *
 *   Changes to this file can potentially create security vulnerabilities. *
 *          An approval from 2 Core members with history of modifying      *
 *                         this file is required.                          *
 *                                                                         *
 *  Does the change somehow allow for arbitrary javascript to be executed? *
 *    Or allows for someone to change the prototype of built-in objects?   *
 *     Or gives undesired access to variables likes document or window?    *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

var $parseMinErr = minErr('$parse');

// Sandboxing Angular Expressions
// ------------------------------
// Angular expressions are generally considered safe because these expressions only have direct
// access to `$scope` and locals. However, one can obtain the ability to execute arbitrary JS code by
// obtaining a reference to native JS functions such as the Function constructor.
//
// As an example, consider the following Angular expression:
//
//   {}.toString.constructor('alert("evil JS code")')
//
// This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits
// against the expression language, but not to prevent exploits that were enabled by exposing
// sensitive JavaScript or browser APIs on Scope. Exposing such objects on a Scope is never a good
// practice and therefore we are not even trying to protect against interaction with an object
// explicitly exposed in this way.
//
// In general, it is not possible to access a Window object from an angular expression unless a
// window or some DOM object that has a reference to window is published onto a Scope.
// Similarly we prevent invocations of function known to be dangerous, as well as assignments to
// native objects.
//
// See https://docs.angularjs.org/guide/security


function ensureSafeMemberName(name, fullExpression) {
  if (name === "__defineGetter__" || name === "__defineSetter__"
      || name === "__lookupGetter__" || name === "__lookupSetter__"
      || name === "__proto__") {
    throw $parseMinErr('isecfld',
        'Attempting to access a disallowed field in Angular expressions! '
        + 'Expression: {0}', fullExpression);
  }
  return name;
}

function getStringValue(name) {
  // Property names must be strings. This means that non-string objects cannot be used
  // as keys in an object. Any non-string object, including a number, is typecasted
  // into a string via the toString method.
  // -- MDN, https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Property_accessors#Property_names
  //
  // So, to ensure that we are checking the same `name` that JavaScript would use, we cast it
  // to a string. It's not always possible. If `name` is an object and its `toString` method is
  // 'broken' (doesn't return a string, isn't a function, etc.), an error will be thrown:
  //
  // TypeError: Cannot convert object to primitive value
  //
  // For performance reasons, we don't catch this error here and allow it to propagate up the call
  // stack. Note that you'll get the same error in JavaScript if you try to access a property using
  // such a 'broken' object as a key.
  return name + '';
}

function ensureSafeObject(obj, fullExpression) {
  // nifty check if obj is Function that is fast and works across iframes and other contexts
  if (obj) {
    if (obj.constructor === obj) {
      throw $parseMinErr('isecfn',
          'Referencing Function in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
    } else if (// isWindow(obj)
        obj.window === obj) {
      throw $parseMinErr('isecwindow',
          'Referencing the Window in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
    } else if (// isElement(obj)
        obj.children && (obj.nodeName || (obj.prop && obj.attr && obj.find))) {
      throw $parseMinErr('isecdom',
          'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
    } else if (// block Object so that we can't get hold of dangerous Object.* methods
        obj === Object) {
      throw $parseMinErr('isecobj',
          'Referencing Object in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
    }
  }
  return obj;
}

var CALL = Function.prototype.call;
var APPLY = Function.prototype.apply;
var BIND = Function.prototype.bind;

function ensureSafeFunction(obj, fullExpression) {
  if (obj) {
    if (obj.constructor === obj) {
      throw $parseMinErr('isecfn',
        'Referencing Function in Angular expressions is disallowed! Expression: {0}',
        fullExpression);
    } else if (obj === CALL || obj === APPLY || obj === BIND) {
      throw $parseMinErr('isecff',
        'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}',
        fullExpression);
    }
  }
}

function ensureSafeAssignContext(obj, fullExpression) {
  if (obj) {
    if (obj === (0).constructor || obj === (false).constructor || obj === ''.constructor ||
        obj === {}.constructor || obj === [].constructor || obj === Function.constructor) {
      throw $parseMinErr('isecaf',
        'Assigning to a constructor is disallowed! Expression: {0}', fullExpression);
    }
  }
}

var OPERATORS = createMap();
forEach('+ - * / % === !== == != < > <= >= && || ! = |'.split(' '), function(operator) { OPERATORS[operator] = true; });
var ESCAPE = {"n":"\n", "f":"\f", "r":"\r", "t":"\t", "v":"\v", "'":"'", '"':'"'};


/////////////////////////////////////////


/**
 * @constructor
 */
var Lexer = function(options) {
  this.options = options;
};

Lexer.prototype = {
  constructor: Lexer,

  lex: function(text) {
    this.text = text;
    this.index = 0;
    this.tokens = [];

    while (this.index < this.text.length) {
      var ch = this.text.charAt(this.index);
      if (ch === '"' || ch === "'") {
        this.readString(ch);
      } else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {
        this.readNumber();
      } else if (this.isIdent(ch)) {
        this.readIdent();
      } else if (this.is(ch, '(){}[].,;:?')) {
        this.tokens.push({index: this.index, text: ch});
        this.index++;
      } else if (this.isWhitespace(ch)) {
        this.index++;
      } else {
        var ch2 = ch + this.peek();
        var ch3 = ch2 + this.peek(2);
        var op1 = OPERATORS[ch];
        var op2 = OPERATORS[ch2];
        var op3 = OPERATORS[ch3];
        if (op1 || op2 || op3) {
          var token = op3 ? ch3 : (op2 ? ch2 : ch);
          this.tokens.push({index: this.index, text: token, operator: true});
          this.index += token.length;
        } else {
          this.throwError('Unexpected next character ', this.index, this.index + 1);
        }
      }
    }
    return this.tokens;
  },

  is: function(ch, chars) {
    return chars.indexOf(ch) !== -1;
  },

  peek: function(i) {
    var num = i || 1;
    return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;
  },

  isNumber: function(ch) {
    return ('0' <= ch && ch <= '9') && typeof ch === "string";
  },

  isWhitespace: function(ch) {
    // IE treats non-breaking space as \u00A0
    return (ch === ' ' || ch === '\r' || ch === '\t' ||
            ch === '\n' || ch === '\v' || ch === '\u00A0');
  },

  isIdent: function(ch) {
    return ('a' <= ch && ch <= 'z' ||
            'A' <= ch && ch <= 'Z' ||
            '_' === ch || ch === '$');
  },

  isExpOperator: function(ch) {
    return (ch === '-' || ch === '+' || this.isNumber(ch));
  },

  throwError: function(error, start, end) {
    end = end || this.index;
    var colStr = (isDefined(start)
            ? 's ' + start +  '-' + this.index + ' [' + this.text.substring(start, end) + ']'
            : ' ' + end);
    throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',
        error, colStr, this.text);
  },

  readNumber: function() {
    var number = '';
    var start = this.index;
    while (this.index < this.text.length) {
      var ch = lowercase(this.text.charAt(this.index));
      if (ch == '.' || this.isNumber(ch)) {
        number += ch;
      } else {
        var peekCh = this.peek();
        if (ch == 'e' && this.isExpOperator(peekCh)) {
          number += ch;
        } else if (this.isExpOperator(ch) &&
            peekCh && this.isNumber(peekCh) &&
            number.charAt(number.length - 1) == 'e') {
          number += ch;
        } else if (this.isExpOperator(ch) &&
            (!peekCh || !this.isNumber(peekCh)) &&
            number.charAt(number.length - 1) == 'e') {
          this.throwError('Invalid exponent');
        } else {
          break;
        }
      }
      this.index++;
    }
    this.tokens.push({
      index: start,
      text: number,
      constant: true,
      value: Number(number)
    });
  },

  readIdent: function() {
    var start = this.index;
    while (this.index < this.text.length) {
      var ch = this.text.charAt(this.index);
      if (!(this.isIdent(ch) || this.isNumber(ch))) {
        break;
      }
      this.index++;
    }
    this.tokens.push({
      index: start,
      text: this.text.slice(start, this.index),
      identifier: true
    });
  },

  readString: function(quote) {
    var start = this.index;
    this.index++;
    var string = '';
    var rawString = quote;
    var escape = false;
    while (this.index < this.text.length) {
      var ch = this.text.charAt(this.index);
      rawString += ch;
      if (escape) {
        if (ch === 'u') {
          var hex = this.text.substring(this.index + 1, this.index + 5);
          if (!hex.match(/[\da-f]{4}/i)) {
            this.throwError('Invalid unicode escape [\\u' + hex + ']');
          }
          this.index += 4;
          string += String.fromCharCode(parseInt(hex, 16));
        } else {
          var rep = ESCAPE[ch];
          string = string + (rep || ch);
        }
        escape = false;
      } else if (ch === '\\') {
        escape = true;
      } else if (ch === quote) {
        this.index++;
        this.tokens.push({
          index: start,
          text: rawString,
          constant: true,
          value: string
        });
        return;
      } else {
        string += ch;
      }
      this.index++;
    }
    this.throwError('Unterminated quote', start);
  }
};

var AST = function(lexer, options) {
  this.lexer = lexer;
  this.options = options;
};

AST.Program = 'Program';
AST.ExpressionStatement = 'ExpressionStatement';
AST.AssignmentExpression = 'AssignmentExpression';
AST.ConditionalExpression = 'ConditionalExpression';
AST.LogicalExpression = 'LogicalExpression';
AST.BinaryExpression = 'BinaryExpression';
AST.UnaryExpression = 'UnaryExpression';
AST.CallExpression = 'CallExpression';
AST.MemberExpression = 'MemberExpression';
AST.Identifier = 'Identifier';
AST.Literal = 'Literal';
AST.ArrayExpression = 'ArrayExpression';
AST.Property = 'Property';
AST.ObjectExpression = 'ObjectExpression';
AST.ThisExpression = 'ThisExpression';
AST.LocalsExpression = 'LocalsExpression';

// Internal use only
AST.NGValueParameter = 'NGValueParameter';

AST.prototype = {
  ast: function(text) {
    this.text = text;
    this.tokens = this.lexer.lex(text);

    var value = this.program();

    if (this.tokens.length !== 0) {
      this.throwError('is an unexpected token', this.tokens[0]);
    }

    return value;
  },

  program: function() {
    var body = [];
    while (true) {
      if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))
        body.push(this.expressionStatement());
      if (!this.expect(';')) {
        return { type: AST.Program, body: body};
      }
    }
  },

  expressionStatement: function() {
    return { type: AST.ExpressionStatement, expression: this.filterChain() };
  },

  filterChain: function() {
    var left = this.expression();
    var token;
    while ((token = this.expect('|'))) {
      left = this.filter(left);
    }
    return left;
  },

  expression: function() {
    return this.assignment();
  },

  assignment: function() {
    var result = this.ternary();
    if (this.expect('=')) {
      result = { type: AST.AssignmentExpression, left: result, right: this.assignment(), operator: '='};
    }
    return result;
  },

  ternary: function() {
    var test = this.logicalOR();
    var alternate;
    var consequent;
    if (this.expect('?')) {
      alternate = this.expression();
      if (this.consume(':')) {
        consequent = this.expression();
        return { type: AST.ConditionalExpression, test: test, alternate: alternate, consequent: consequent};
      }
    }
    return test;
  },

  logicalOR: function() {
    var left = this.logicalAND();
    while (this.expect('||')) {
      left = { type: AST.LogicalExpression, operator: '||', left: left, right: this.logicalAND() };
    }
    return left;
  },

  logicalAND: function() {
    var left = this.equality();
    while (this.expect('&&')) {
      left = { type: AST.LogicalExpression, operator: '&&', left: left, right: this.equality()};
    }
    return left;
  },

  equality: function() {
    var left = this.relational();
    var token;
    while ((token = this.expect('==','!=','===','!=='))) {
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.relational() };
    }
    return left;
  },

  relational: function() {
    var left = this.additive();
    var token;
    while ((token = this.expect('<', '>', '<=', '>='))) {
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.additive() };
    }
    return left;
  },

  additive: function() {
    var left = this.multiplicative();
    var token;
    while ((token = this.expect('+','-'))) {
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.multiplicative() };
    }
    return left;
  },

  multiplicative: function() {
    var left = this.unary();
    var token;
    while ((token = this.expect('*','/','%'))) {
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.unary() };
    }
    return left;
  },

  unary: function() {
    var token;
    if ((token = this.expect('+', '-', '!'))) {
      return { type: AST.UnaryExpression, operator: token.text, prefix: true, argument: this.unary() };
    } else {
      return this.primary();
    }
  },

  primary: function() {
    var primary;
    if (this.expect('(')) {
      primary = this.filterChain();
      this.consume(')');
    } else if (this.expect('[')) {
      primary = this.arrayDeclaration();
    } else if (this.expect('{')) {
      primary = this.object();
    } else if (this.constants.hasOwnProperty(this.peek().text)) {
      primary = copy(this.constants[this.consume().text]);
    } else if (this.peek().identifier) {
      primary = this.identifier();
    } else if (this.peek().constant) {
      primary = this.constant();
    } else {
      this.throwError('not a primary expression', this.peek());
    }

    var next;
    while ((next = this.expect('(', '[', '.'))) {
      if (next.text === '(') {
        primary = {type: AST.CallExpression, callee: primary, arguments: this.parseArguments() };
        this.consume(')');
      } else if (next.text === '[') {
        primary = { type: AST.MemberExpression, object: primary, property: this.expression(), computed: true };
        this.consume(']');
      } else if (next.text === '.') {
        primary = { type: AST.MemberExpression, object: primary, property: this.identifier(), computed: false };
      } else {
        this.throwError('IMPOSSIBLE');
      }
    }
    return primary;
  },

  filter: function(baseExpression) {
    var args = [baseExpression];
    var result = {type: AST.CallExpression, callee: this.identifier(), arguments: args, filter: true};

    while (this.expect(':')) {
      args.push(this.expression());
    }

    return result;
  },

  parseArguments: function() {
    var args = [];
    if (this.peekToken().text !== ')') {
      do {
        args.push(this.expression());
      } while (this.expect(','));
    }
    return args;
  },

  identifier: function() {
    var token = this.consume();
    if (!token.identifier) {
      this.throwError('is not a valid identifier', token);
    }
    return { type: AST.Identifier, name: token.text };
  },

  constant: function() {
    // TODO check that it is a constant
    return { type: AST.Literal, value: this.consume().value };
  },

  arrayDeclaration: function() {
    var elements = [];
    if (this.peekToken().text !== ']') {
      do {
        if (this.peek(']')) {
          // Support trailing commas per ES5.1.
          break;
        }
        elements.push(this.expression());
      } while (this.expect(','));
    }
    this.consume(']');

    return { type: AST.ArrayExpression, elements: elements };
  },

  object: function() {
    var properties = [], property;
    if (this.peekToken().text !== '}') {
      do {
        if (this.peek('}')) {
          // Support trailing commas per ES5.1.
          break;
        }
        property = {type: AST.Property, kind: 'init'};
        if (this.peek().constant) {
          property.key = this.constant();
        } else if (this.peek().identifier) {
          property.key = this.identifier();
        } else {
          this.throwError("invalid key", this.peek());
        }
        this.consume(':');
        property.value = this.expression();
        properties.push(property);
      } while (this.expect(','));
    }
    this.consume('}');

    return {type: AST.ObjectExpression, properties: properties };
  },

  throwError: function(msg, token) {
    throw $parseMinErr('syntax',
        'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',
          token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));
  },

  consume: function(e1) {
    if (this.tokens.length === 0) {
      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
    }

    var token = this.expect(e1);
    if (!token) {
      this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());
    }
    return token;
  },

  peekToken: function() {
    if (this.tokens.length === 0) {
      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
    }
    return this.tokens[0];
  },

  peek: function(e1, e2, e3, e4) {
    return this.peekAhead(0, e1, e2, e3, e4);
  },

  peekAhead: function(i, e1, e2, e3, e4) {
    if (this.tokens.length > i) {
      var token = this.tokens[i];
      var t = token.text;
      if (t === e1 || t === e2 || t === e3 || t === e4 ||
          (!e1 && !e2 && !e3 && !e4)) {
        return token;
      }
    }
    return false;
  },

  expect: function(e1, e2, e3, e4) {
    var token = this.peek(e1, e2, e3, e4);
    if (token) {
      this.tokens.shift();
      return token;
    }
    return false;
  },


  /* `undefined` is not a constant, it is an identifier,
   * but using it as an identifier is not supported
   */
  constants: {
    'true': { type: AST.Literal, value: true },
    'false': { type: AST.Literal, value: false },
    'null': { type: AST.Literal, value: null },
    'undefined': {type: AST.Literal, value: undefined },
    'this': {type: AST.ThisExpression },
    '$locals': {type: AST.LocalsExpression }
  }
};

function ifDefined(v, d) {
  return typeof v !== 'undefined' ? v : d;
}

function plusFn(l, r) {
  if (typeof l === 'undefined') return r;
  if (typeof r === 'undefined') return l;
  return l + r;
}

function isStateless($filter, filterName) {
  var fn = $filter(filterName);
  return !fn.$stateful;
}

function findConstantAndWatchExpressions(ast, $filter) {
  var allConstants;
  var argsToWatch;
  switch (ast.type) {
  case AST.Program:
    allConstants = true;
    forEach(ast.body, function(expr) {
      findConstantAndWatchExpressions(expr.expression, $filter);
      allConstants = allConstants && expr.expression.constant;
    });
    ast.constant = allConstants;
    break;
  case AST.Literal:
    ast.constant = true;
    ast.toWatch = [];
    break;
  case AST.UnaryExpression:
    findConstantAndWatchExpressions(ast.argument, $filter);
    ast.constant = ast.argument.constant;
    ast.toWatch = ast.argument.toWatch;
    break;
  case AST.BinaryExpression:
    findConstantAndWatchExpressions(ast.left, $filter);
    findConstantAndWatchExpressions(ast.right, $filter);
    ast.constant = ast.left.constant && ast.right.constant;
    ast.toWatch = ast.left.toWatch.concat(ast.right.toWatch);
    break;
  case AST.LogicalExpression:
    findConstantAndWatchExpressions(ast.left, $filter);
    findConstantAndWatchExpressions(ast.right, $filter);
    ast.constant = ast.left.constant && ast.right.constant;
    ast.toWatch = ast.constant ? [] : [ast];
    break;
  case AST.ConditionalExpression:
    findConstantAndWatchExpressions(ast.test, $filter);
    findConstantAndWatchExpressions(ast.alternate, $filter);
    findConstantAndWatchExpressions(ast.consequent, $filter);
    ast.constant = ast.test.constant && ast.alternate.constant && ast.consequent.constant;
    ast.toWatch = ast.constant ? [] : [ast];
    break;
  case AST.Identifier:
    ast.constant = false;
    ast.toWatch = [ast];
    break;
  case AST.MemberExpression:
    findConstantAndWatchExpressions(ast.object, $filter);
    if (ast.computed) {
      findConstantAndWatchExpressions(ast.property, $filter);
    }
    ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);
    ast.toWatch = [ast];
    break;
  case AST.CallExpression:
    allConstants = ast.filter ? isStateless($filter, ast.callee.name) : false;
    argsToWatch = [];
    forEach(ast.arguments, function(expr) {
      findConstantAndWatchExpressions(expr, $filter);
      allConstants = allConstants && expr.constant;
      if (!expr.constant) {
        argsToWatch.push.apply(argsToWatch, expr.toWatch);
      }
    });
    ast.constant = allConstants;
    ast.toWatch = ast.filter && isStateless($filter, ast.callee.name) ? argsToWatch : [ast];
    break;
  case AST.AssignmentExpression:
    findConstantAndWatchExpressions(ast.left, $filter);
    findConstantAndWatchExpressions(ast.right, $filter);
    ast.constant = ast.left.constant && ast.right.constant;
    ast.toWatch = [ast];
    break;
  case AST.ArrayExpression:
    allConstants = true;
    argsToWatch = [];
    forEach(ast.elements, function(expr) {
      findConstantAndWatchExpressions(expr, $filter);
      allConstants = allConstants && expr.constant;
      if (!expr.constant) {
        argsToWatch.push.apply(argsToWatch, expr.toWatch);
      }
    });
    ast.constant = allConstants;
    ast.toWatch = argsToWatch;
    break;
  case AST.ObjectExpression:
    allConstants = true;
    argsToWatch = [];
    forEach(ast.properties, function(property) {
      findConstantAndWatchExpressions(property.value, $filter);
      allConstants = allConstants && property.value.constant;
      if (!property.value.constant) {
        argsToWatch.push.apply(argsToWatch, property.value.toWatch);
      }
    });
    ast.constant = allConstants;
    ast.toWatch = argsToWatch;
    break;
  case AST.ThisExpression:
    ast.constant = false;
    ast.toWatch = [];
    break;
  case AST.LocalsExpression:
    ast.constant = false;
    ast.toWatch = [];
    break;
  }
}

function getInputs(body) {
  if (body.length != 1) return;
  var lastExpression = body[0].expression;
  var candidate = lastExpression.toWatch;
  if (candidate.length !== 1) return candidate;
  return candidate[0] !== lastExpression ? candidate : undefined;
}

function isAssignable(ast) {
  return ast.type === AST.Identifier || ast.type === AST.MemberExpression;
}

function assignableAST(ast) {
  if (ast.body.length === 1 && isAssignable(ast.body[0].expression)) {
    return {type: AST.AssignmentExpression, left: ast.body[0].expression, right: {type: AST.NGValueParameter}, operator: '='};
  }
}

function isLiteral(ast) {
  return ast.body.length === 0 ||
      ast.body.length === 1 && (
      ast.body[0].expression.type === AST.Literal ||
      ast.body[0].expression.type === AST.ArrayExpression ||
      ast.body[0].expression.type === AST.ObjectExpression);
}

function isConstant(ast) {
  return ast.constant;
}

function ASTCompiler(astBuilder, $filter) {
  this.astBuilder = astBuilder;
  this.$filter = $filter;
}

ASTCompiler.prototype = {
  compile: function(expression, expensiveChecks) {
    var self = this;
    var ast = this.astBuilder.ast(expression);
    this.state = {
      nextId: 0,
      filters: {},
      expensiveChecks: expensiveChecks,
      fn: {vars: [], body: [], own: {}},
      assign: {vars: [], body: [], own: {}},
      inputs: []
    };
    findConstantAndWatchExpressions(ast, self.$filter);
    var extra = '';
    var assignable;
    this.stage = 'assign';
    if ((assignable = assignableAST(ast))) {
      this.state.computing = 'assign';
      var result = this.nextId();
      this.recurse(assignable, result);
      this.return_(result);
      extra = 'fn.assign=' + this.generateFunction('assign', 's,v,l');
    }
    var toWatch = getInputs(ast.body);
    self.stage = 'inputs';
    forEach(toWatch, function(watch, key) {
      var fnKey = 'fn' + key;
      self.state[fnKey] = {vars: [], body: [], own: {}};
      self.state.computing = fnKey;
      var intoId = self.nextId();
      self.recurse(watch, intoId);
      self.return_(intoId);
      self.state.inputs.push(fnKey);
      watch.watchId = key;
    });
    this.state.computing = 'fn';
    this.stage = 'main';
    this.recurse(ast);
    var fnString =
      // The build and minification steps remove the string "use strict" from the code, but this is done using a regex.
      // This is a workaround for this until we do a better job at only removing the prefix only when we should.
      '"' + this.USE + ' ' + this.STRICT + '";\n' +
      this.filterPrefix() +
      'var fn=' + this.generateFunction('fn', 's,l,a,i') +
      extra +
      this.watchFns() +
      'return fn;';

    /* jshint -W054 */
    var fn = (new Function('$filter',
        'ensureSafeMemberName',
        'ensureSafeObject',
        'ensureSafeFunction',
        'getStringValue',
        'ensureSafeAssignContext',
        'ifDefined',
        'plus',
        'text',
        fnString))(
          this.$filter,
          ensureSafeMemberName,
          ensureSafeObject,
          ensureSafeFunction,
          getStringValue,
          ensureSafeAssignContext,
          ifDefined,
          plusFn,
          expression);
    /* jshint +W054 */
    this.state = this.stage = undefined;
    fn.literal = isLiteral(ast);
    fn.constant = isConstant(ast);
    return fn;
  },

  USE: 'use',

  STRICT: 'strict',

  watchFns: function() {
    var result = [];
    var fns = this.state.inputs;
    var self = this;
    forEach(fns, function(name) {
      result.push('var ' + name + '=' + self.generateFunction(name, 's'));
    });
    if (fns.length) {
      result.push('fn.inputs=[' + fns.join(',') + '];');
    }
    return result.join('');
  },

  generateFunction: function(name, params) {
    return 'function(' + params + '){' +
        this.varsPrefix(name) +
        this.body(name) +
        '};';
  },

  filterPrefix: function() {
    var parts = [];
    var self = this;
    forEach(this.state.filters, function(id, filter) {
      parts.push(id + '=$filter(' + self.escape(filter) + ')');
    });
    if (parts.length) return 'var ' + parts.join(',') + ';';
    return '';
  },

  varsPrefix: function(section) {
    return this.state[section].vars.length ? 'var ' + this.state[section].vars.join(',') + ';' : '';
  },

  body: function(section) {
    return this.state[section].body.join('');
  },

  recurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
    var left, right, self = this, args, expression;
    recursionFn = recursionFn || noop;
    if (!skipWatchIdCheck && isDefined(ast.watchId)) {
      intoId = intoId || this.nextId();
      this.if_('i',
        this.lazyAssign(intoId, this.computedMember('i', ast.watchId)),
        this.lazyRecurse(ast, intoId, nameId, recursionFn, create, true)
      );
      return;
    }
    switch (ast.type) {
    case AST.Program:
      forEach(ast.body, function(expression, pos) {
        self.recurse(expression.expression, undefined, undefined, function(expr) { right = expr; });
        if (pos !== ast.body.length - 1) {
          self.current().body.push(right, ';');
        } else {
          self.return_(right);
        }
      });
      break;
    case AST.Literal:
      expression = this.escape(ast.value);
      this.assign(intoId, expression);
      recursionFn(expression);
      break;
    case AST.UnaryExpression:
      this.recurse(ast.argument, undefined, undefined, function(expr) { right = expr; });
      expression = ast.operator + '(' + this.ifDefined(right, 0) + ')';
      this.assign(intoId, expression);
      recursionFn(expression);
      break;
    case AST.BinaryExpression:
      this.recurse(ast.left, undefined, undefined, function(expr) { left = expr; });
      this.recurse(ast.right, undefined, undefined, function(expr) { right = expr; });
      if (ast.operator === '+') {
        expression = this.plus(left, right);
      } else if (ast.operator === '-') {
        expression = this.ifDefined(left, 0) + ast.operator + this.ifDefined(right, 0);
      } else {
        expression = '(' + left + ')' + ast.operator + '(' + right + ')';
      }
      this.assign(intoId, expression);
      recursionFn(expression);
      break;
    case AST.LogicalExpression:
      intoId = intoId || this.nextId();
      self.recurse(ast.left, intoId);
      self.if_(ast.operator === '&&' ? intoId : self.not(intoId), self.lazyRecurse(ast.right, intoId));
      recursionFn(intoId);
      break;
    case AST.ConditionalExpression:
      intoId = intoId || this.nextId();
      self.recurse(ast.test, intoId);
      self.if_(intoId, self.lazyRecurse(ast.alternate, intoId), self.lazyRecurse(ast.consequent, intoId));
      recursionFn(intoId);
      break;
    case AST.Identifier:
      intoId = intoId || this.nextId();
      if (nameId) {
        nameId.context = self.stage === 'inputs' ? 's' : this.assign(this.nextId(), this.getHasOwnProperty('l', ast.name) + '?l:s');
        nameId.computed = false;
        nameId.name = ast.name;
      }
      ensureSafeMemberName(ast.name);
      self.if_(self.stage === 'inputs' || self.not(self.getHasOwnProperty('l', ast.name)),
        function() {
          self.if_(self.stage === 'inputs' || 's', function() {
            if (create && create !== 1) {
              self.if_(
                self.not(self.nonComputedMember('s', ast.name)),
                self.lazyAssign(self.nonComputedMember('s', ast.name), '{}'));
            }
            self.assign(intoId, self.nonComputedMember('s', ast.name));
          });
        }, intoId && self.lazyAssign(intoId, self.nonComputedMember('l', ast.name))
        );
      if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.name)) {
        self.addEnsureSafeObject(intoId);
      }
      recursionFn(intoId);
      break;
    case AST.MemberExpression:
      left = nameId && (nameId.context = this.nextId()) || this.nextId();
      intoId = intoId || this.nextId();
      self.recurse(ast.object, left, undefined, function() {
        self.if_(self.notNull(left), function() {
          if (create && create !== 1) {
            self.addEnsureSafeAssignContext(left);
          }
          if (ast.computed) {
            right = self.nextId();
            self.recurse(ast.property, right);
            self.getStringValue(right);
            self.addEnsureSafeMemberName(right);
            if (create && create !== 1) {
              self.if_(self.not(self.computedMember(left, right)), self.lazyAssign(self.computedMember(left, right), '{}'));
            }
            expression = self.ensureSafeObject(self.computedMember(left, right));
            self.assign(intoId, expression);
            if (nameId) {
              nameId.computed = true;
              nameId.name = right;
            }
          } else {
            ensureSafeMemberName(ast.property.name);
            if (create && create !== 1) {
              self.if_(self.not(self.nonComputedMember(left, ast.property.name)), self.lazyAssign(self.nonComputedMember(left, ast.property.name), '{}'));
            }
            expression = self.nonComputedMember(left, ast.property.name);
            if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.property.name)) {
              expression = self.ensureSafeObject(expression);
            }
            self.assign(intoId, expression);
            if (nameId) {
              nameId.computed = false;
              nameId.name = ast.property.name;
            }
          }
        }, function() {
          self.assign(intoId, 'undefined');
        });
        recursionFn(intoId);
      }, !!create);
      break;
    case AST.CallExpression:
      intoId = intoId || this.nextId();
      if (ast.filter) {
        right = self.filter(ast.callee.name);
        args = [];
        forEach(ast.arguments, function(expr) {
          var argument = self.nextId();
          self.recurse(expr, argument);
          args.push(argument);
        });
        expression = right + '(' + args.join(',') + ')';
        self.assign(intoId, expression);
        recursionFn(intoId);
      } else {
        right = self.nextId();
        left = {};
        args = [];
        self.recurse(ast.callee, right, left, function() {
          self.if_(self.notNull(right), function() {
            self.addEnsureSafeFunction(right);
            forEach(ast.arguments, function(expr) {
              self.recurse(expr, self.nextId(), undefined, function(argument) {
                args.push(self.ensureSafeObject(argument));
              });
            });
            if (left.name) {
              if (!self.state.expensiveChecks) {
                self.addEnsureSafeObject(left.context);
              }
              expression = self.member(left.context, left.name, left.computed) + '(' + args.join(',') + ')';
            } else {
              expression = right + '(' + args.join(',') + ')';
            }
            expression = self.ensureSafeObject(expression);
            self.assign(intoId, expression);
          }, function() {
            self.assign(intoId, 'undefined');
          });
          recursionFn(intoId);
        });
      }
      break;
    case AST.AssignmentExpression:
      right = this.nextId();
      left = {};
      if (!isAssignable(ast.left)) {
        throw $parseMinErr('lval', 'Trying to assign a value to a non l-value');
      }
      this.recurse(ast.left, undefined, left, function() {
        self.if_(self.notNull(left.context), function() {
          self.recurse(ast.right, right);
          self.addEnsureSafeObject(self.member(left.context, left.name, left.computed));
          self.addEnsureSafeAssignContext(left.context);
          expression = self.member(left.context, left.name, left.computed) + ast.operator + right;
          self.assign(intoId, expression);
          recursionFn(intoId || expression);
        });
      }, 1);
      break;
    case AST.ArrayExpression:
      args = [];
      forEach(ast.elements, function(expr) {
        self.recurse(expr, self.nextId(), undefined, function(argument) {
          args.push(argument);
        });
      });
      expression = '[' + args.join(',') + ']';
      this.assign(intoId, expression);
      recursionFn(expression);
      break;
    case AST.ObjectExpression:
      args = [];
      forEach(ast.properties, function(property) {
        self.recurse(property.value, self.nextId(), undefined, function(expr) {
          args.push(self.escape(
              property.key.type === AST.Identifier ? property.key.name :
                ('' + property.key.value)) +
              ':' + expr);
        });
      });
      expression = '{' + args.join(',') + '}';
      this.assign(intoId, expression);
      recursionFn(expression);
      break;
    case AST.ThisExpression:
      this.assign(intoId, 's');
      recursionFn('s');
      break;
    case AST.LocalsExpression:
      this.assign(intoId, 'l');
      recursionFn('l');
      break;
    case AST.NGValueParameter:
      this.assign(intoId, 'v');
      recursionFn('v');
      break;
    }
  },

  getHasOwnProperty: function(element, property) {
    var key = element + '.' + property;
    var own = this.current().own;
    if (!own.hasOwnProperty(key)) {
      own[key] = this.nextId(false, element + '&&(' + this.escape(property) + ' in ' + element + ')');
    }
    return own[key];
  },

  assign: function(id, value) {
    if (!id) return;
    this.current().body.push(id, '=', value, ';');
    return id;
  },

  filter: function(filterName) {
    if (!this.state.filters.hasOwnProperty(filterName)) {
      this.state.filters[filterName] = this.nextId(true);
    }
    return this.state.filters[filterName];
  },

  ifDefined: function(id, defaultValue) {
    return 'ifDefined(' + id + ',' + this.escape(defaultValue) + ')';
  },

  plus: function(left, right) {
    return 'plus(' + left + ',' + right + ')';
  },

  return_: function(id) {
    this.current().body.push('return ', id, ';');
  },

  if_: function(test, alternate, consequent) {
    if (test === true) {
      alternate();
    } else {
      var body = this.current().body;
      body.push('if(', test, '){');
      alternate();
      body.push('}');
      if (consequent) {
        body.push('else{');
        consequent();
        body.push('}');
      }
    }
  },

  not: function(expression) {
    return '!(' + expression + ')';
  },

  notNull: function(expression) {
    return expression + '!=null';
  },

  nonComputedMember: function(left, right) {
    return left + '.' + right;
  },

  computedMember: function(left, right) {
    return left + '[' + right + ']';
  },

  member: function(left, right, computed) {
    if (computed) return this.computedMember(left, right);
    return this.nonComputedMember(left, right);
  },

  addEnsureSafeObject: function(item) {
    this.current().body.push(this.ensureSafeObject(item), ';');
  },

  addEnsureSafeMemberName: function(item) {
    this.current().body.push(this.ensureSafeMemberName(item), ';');
  },

  addEnsureSafeFunction: function(item) {
    this.current().body.push(this.ensureSafeFunction(item), ';');
  },

  addEnsureSafeAssignContext: function(item) {
    this.current().body.push(this.ensureSafeAssignContext(item), ';');
  },

  ensureSafeObject: function(item) {
    return 'ensureSafeObject(' + item + ',text)';
  },

  ensureSafeMemberName: function(item) {
    return 'ensureSafeMemberName(' + item + ',text)';
  },

  ensureSafeFunction: function(item) {
    return 'ensureSafeFunction(' + item + ',text)';
  },

  getStringValue: function(item) {
    this.assign(item, 'getStringValue(' + item + ')');
  },

  ensureSafeAssignContext: function(item) {
    return 'ensureSafeAssignContext(' + item + ',text)';
  },

  lazyRecurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
    var self = this;
    return function() {
      self.recurse(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck);
    };
  },

  lazyAssign: function(id, value) {
    var self = this;
    return function() {
      self.assign(id, value);
    };
  },

  stringEscapeRegex: /[^ a-zA-Z0-9]/g,

  stringEscapeFn: function(c) {
    return '\\u' + ('0000' + c.charCodeAt(0).toString(16)).slice(-4);
  },

  escape: function(value) {
    if (isString(value)) return "'" + value.replace(this.stringEscapeRegex, this.stringEscapeFn) + "'";
    if (isNumber(value)) return value.toString();
    if (value === true) return 'true';
    if (value === false) return 'false';
    if (value === null) return 'null';
    if (typeof value === 'undefined') return 'undefined';

    throw $parseMinErr('esc', 'IMPOSSIBLE');
  },

  nextId: function(skip, init) {
    var id = 'v' + (this.state.nextId++);
    if (!skip) {
      this.current().vars.push(id + (init ? '=' + init : ''));
    }
    return id;
  },

  current: function() {
    return this.state[this.state.computing];
  }
};


function ASTInterpreter(astBuilder, $filter) {
  this.astBuilder = astBuilder;
  this.$filter = $filter;
}

ASTInterpreter.prototype = {
  compile: function(expression, expensiveChecks) {
    var self = this;
    var ast = this.astBuilder.ast(expression);
    this.expression = expression;
    this.expensiveChecks = expensiveChecks;
    findConstantAndWatchExpressions(ast, self.$filter);
    var assignable;
    var assign;
    if ((assignable = assignableAST(ast))) {
      assign = this.recurse(assignable);
    }
    var toWatch = getInputs(ast.body);
    var inputs;
    if (toWatch) {
      inputs = [];
      forEach(toWatch, function(watch, key) {
        var input = self.recurse(watch);
        watch.input = input;
        inputs.push(input);
        watch.watchId = key;
      });
    }
    var expressions = [];
    forEach(ast.body, function(expression) {
      expressions.push(self.recurse(expression.expression));
    });
    var fn = ast.body.length === 0 ? function() {} :
             ast.body.length === 1 ? expressions[0] :
             function(scope, locals) {
               var lastValue;
               forEach(expressions, function(exp) {
                 lastValue = exp(scope, locals);
               });
               return lastValue;
             };
    if (assign) {
      fn.assign = function(scope, value, locals) {
        return assign(scope, locals, value);
      };
    }
    if (inputs) {
      fn.inputs = inputs;
    }
    fn.literal = isLiteral(ast);
    fn.constant = isConstant(ast);
    return fn;
  },

  recurse: function(ast, context, create) {
    var left, right, self = this, args, expression;
    if (ast.input) {
      return this.inputs(ast.input, ast.watchId);
    }
    switch (ast.type) {
    case AST.Literal:
      return this.value(ast.value, context);
    case AST.UnaryExpression:
      right = this.recurse(ast.argument);
      return this['unary' + ast.operator](right, context);
    case AST.BinaryExpression:
      left = this.recurse(ast.left);
      right = this.recurse(ast.right);
      return this['binary' + ast.operator](left, right, context);
    case AST.LogicalExpression:
      left = this.recurse(ast.left);
      right = this.recurse(ast.right);
      return this['binary' + ast.operator](left, right, context);
    case AST.ConditionalExpression:
      return this['ternary?:'](
        this.recurse(ast.test),
        this.recurse(ast.alternate),
        this.recurse(ast.consequent),
        context
      );
    case AST.Identifier:
      ensureSafeMemberName(ast.name, self.expression);
      return self.identifier(ast.name,
                             self.expensiveChecks || isPossiblyDangerousMemberName(ast.name),
                             context, create, self.expression);
    case AST.MemberExpression:
      left = this.recurse(ast.object, false, !!create);
      if (!ast.computed) {
        ensureSafeMemberName(ast.property.name, self.expression);
        right = ast.property.name;
      }
      if (ast.computed) right = this.recurse(ast.property);
      return ast.computed ?
        this.computedMember(left, right, context, create, self.expression) :
        this.nonComputedMember(left, right, self.expensiveChecks, context, create, self.expression);
    case AST.CallExpression:
      args = [];
      forEach(ast.arguments, function(expr) {
        args.push(self.recurse(expr));
      });
      if (ast.filter) right = this.$filter(ast.callee.name);
      if (!ast.filter) right = this.recurse(ast.callee, true);
      return ast.filter ?
        function(scope, locals, assign, inputs) {
          var values = [];
          for (var i = 0; i < args.length; ++i) {
            values.push(args[i](scope, locals, assign, inputs));
          }
          var value = right.apply(undefined, values, inputs);
          return context ? {context: undefined, name: undefined, value: value} : value;
        } :
        function(scope, locals, assign, inputs) {
          var rhs = right(scope, locals, assign, inputs);
          var value;
          if (rhs.value != null) {
            ensureSafeObject(rhs.context, self.expression);
            ensureSafeFunction(rhs.value, self.expression);
            var values = [];
            for (var i = 0; i < args.length; ++i) {
              values.push(ensureSafeObject(args[i](scope, locals, assign, inputs), self.expression));
            }
            value = ensureSafeObject(rhs.value.apply(rhs.context, values), self.expression);
          }
          return context ? {value: value} : value;
        };
    case AST.AssignmentExpression:
      left = this.recurse(ast.left, true, 1);
      right = this.recurse(ast.right);
      return function(scope, locals, assign, inputs) {
        var lhs = left(scope, locals, assign, inputs);
        var rhs = right(scope, locals, assign, inputs);
        ensureSafeObject(lhs.value, self.expression);
        ensureSafeAssignContext(lhs.context);
        lhs.context[lhs.name] = rhs;
        return context ? {value: rhs} : rhs;
      };
    case AST.ArrayExpression:
      args = [];
      forEach(ast.elements, function(expr) {
        args.push(self.recurse(expr));
      });
      return function(scope, locals, assign, inputs) {
        var value = [];
        for (var i = 0; i < args.length; ++i) {
          value.push(args[i](scope, locals, assign, inputs));
        }
        return context ? {value: value} : value;
      };
    case AST.ObjectExpression:
      args = [];
      forEach(ast.properties, function(property) {
        args.push({key: property.key.type === AST.Identifier ?
                        property.key.name :
                        ('' + property.key.value),
                   value: self.recurse(property.value)
        });
      });
      return function(scope, locals, assign, inputs) {
        var value = {};
        for (var i = 0; i < args.length; ++i) {
          value[args[i].key] = args[i].value(scope, locals, assign, inputs);
        }
        return context ? {value: value} : value;
      };
    case AST.ThisExpression:
      return function(scope) {
        return context ? {value: scope} : scope;
      };
    case AST.LocalsExpression:
      return function(scope, locals) {
        return context ? {value: locals} : locals;
      };
    case AST.NGValueParameter:
      return function(scope, locals, assign, inputs) {
        return context ? {value: assign} : assign;
      };
    }
  },

  'unary+': function(argument, context) {
    return function(scope, locals, assign, inputs) {
      var arg = argument(scope, locals, assign, inputs);
      if (isDefined(arg)) {
        arg = +arg;
      } else {
        arg = 0;
      }
      return context ? {value: arg} : arg;
    };
  },
  'unary-': function(argument, context) {
    return function(scope, locals, assign, inputs) {
      var arg = argument(scope, locals, assign, inputs);
      if (isDefined(arg)) {
        arg = -arg;
      } else {
        arg = 0;
      }
      return context ? {value: arg} : arg;
    };
  },
  'unary!': function(argument, context) {
    return function(scope, locals, assign, inputs) {
      var arg = !argument(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary+': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var lhs = left(scope, locals, assign, inputs);
      var rhs = right(scope, locals, assign, inputs);
      var arg = plusFn(lhs, rhs);
      return context ? {value: arg} : arg;
    };
  },
  'binary-': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var lhs = left(scope, locals, assign, inputs);
      var rhs = right(scope, locals, assign, inputs);
      var arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0);
      return context ? {value: arg} : arg;
    };
  },
  'binary*': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) * right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary/': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) / right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary%': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) % right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary===': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) === right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary!==': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) !== right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary==': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) == right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary!=': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) != right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary<': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) < right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary>': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) > right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary<=': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) <= right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary>=': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) >= right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary&&': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) && right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'binary||': function(left, right, context) {
    return function(scope, locals, assign, inputs) {
      var arg = left(scope, locals, assign, inputs) || right(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  'ternary?:': function(test, alternate, consequent, context) {
    return function(scope, locals, assign, inputs) {
      var arg = test(scope, locals, assign, inputs) ? alternate(scope, locals, assign, inputs) : consequent(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;
    };
  },
  value: function(value, context) {
    return function() { return context ? {context: undefined, name: undefined, value: value} : value; };
  },
  identifier: function(name, expensiveChecks, context, create, expression) {
    return function(scope, locals, assign, inputs) {
      var base = locals && (name in locals) ? locals : scope;
      if (create && create !== 1 && base && !(base[name])) {
        base[name] = {};
      }
      var value = base ? base[name] : undefined;
      if (expensiveChecks) {
        ensureSafeObject(value, expression);
      }
      if (context) {
        return {context: base, name: name, value: value};
      } else {
        return value;
      }
    };
  },
  computedMember: function(left, right, context, create, expression) {
    return function(scope, locals, assign, inputs) {
      var lhs = left(scope, locals, assign, inputs);
      var rhs;
      var value;
      if (lhs != null) {
        rhs = right(scope, locals, assign, inputs);
        rhs = getStringValue(rhs);
        ensureSafeMemberName(rhs, expression);
        if (create && create !== 1) {
          ensureSafeAssignContext(lhs);
          if (lhs && !(lhs[rhs])) {
            lhs[rhs] = {};
          }
        }
        value = lhs[rhs];
        ensureSafeObject(value, expression);
      }
      if (context) {
        return {context: lhs, name: rhs, value: value};
      } else {
        return value;
      }
    };
  },
  nonComputedMember: function(left, right, expensiveChecks, context, create, expression) {
    return function(scope, locals, assign, inputs) {
      var lhs = left(scope, locals, assign, inputs);
      if (create && create !== 1) {
        ensureSafeAssignContext(lhs);
        if (lhs && !(lhs[right])) {
          lhs[right] = {};
        }
      }
      var value = lhs != null ? lhs[right] : undefined;
      if (expensiveChecks || isPossiblyDangerousMemberName(right)) {
        ensureSafeObject(value, expression);
      }
      if (context) {
        return {context: lhs, name: right, value: value};
      } else {
        return value;
      }
    };
  },
  inputs: function(input, watchId) {
    return function(scope, value, locals, inputs) {
      if (inputs) return inputs[watchId];
      return input(scope, value, locals);
    };
  }
};

/**
 * @constructor
 */
var Parser = function(lexer, $filter, options) {
  this.lexer = lexer;
  this.$filter = $filter;
  this.options = options;
  this.ast = new AST(this.lexer);
  this.astCompiler = options.csp ? new ASTInterpreter(this.ast, $filter) :
                                   new ASTCompiler(this.ast, $filter);
};

Parser.prototype = {
  constructor: Parser,

  parse: function(text) {
    return this.astCompiler.compile(text, this.options.expensiveChecks);
  }
};

function isPossiblyDangerousMemberName(name) {
  return name == 'constructor';
}

var objectValueOf = Object.prototype.valueOf;

function getValueOf(value) {
  return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);
}

///////////////////////////////////

/**
 * @ngdoc service
 * @name $parse
 * @kind function
 *
 * @description
 *
 * Converts Angular {@link guide/expression expression} into a function.
 *
 * ```js
 *   var getter = $parse('user.name');
 *   var setter = getter.assign;
 *   var context = {user:{name:'angular'}};
 *   var locals = {user:{name:'local'}};
 *
 *   expect(getter(context)).toEqual('angular');
 *   setter(context, 'newValue');
 *   expect(context.user.name).toEqual('newValue');
 *   expect(getter(context, locals)).toEqual('local');
 * ```
 *
 *
 * @param {string} expression String expression to compile.
 * @returns {function(context, locals)} a function which represents the compiled expression:
 *
 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
 *      are evaluated against (typically a scope object).
 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
 *      `context`.
 *
 *    The returned function also has the following properties:
 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
 *        literal.
 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
 *        constant literals.
 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
 *        set to a function to change its value on the given context.
 *
 */


/**
 * @ngdoc provider
 * @name $parseProvider
 *
 * @description
 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
 *  service.
 */
function $ParseProvider() {
  var cacheDefault = createMap();
  var cacheExpensive = createMap();

  this.$get = ['$filter', function($filter) {
    var noUnsafeEval = csp().noUnsafeEval;
    var $parseOptions = {
          csp: noUnsafeEval,
          expensiveChecks: false
        },
        $parseOptionsExpensive = {
          csp: noUnsafeEval,
          expensiveChecks: true
        };
    var runningChecksEnabled = false;

    $parse.$$runningExpensiveChecks = function() {
      return runningChecksEnabled;
    };

    return $parse;

    function $parse(exp, interceptorFn, expensiveChecks) {
      var parsedExpression, oneTime, cacheKey;

      expensiveChecks = expensiveChecks || runningChecksEnabled;

      switch (typeof exp) {
        case 'string':
          exp = exp.trim();
          cacheKey = exp;

          var cache = (expensiveChecks ? cacheExpensive : cacheDefault);
          parsedExpression = cache[cacheKey];

          if (!parsedExpression) {
            if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {
              oneTime = true;
              exp = exp.substring(2);
            }
            var parseOptions = expensiveChecks ? $parseOptionsExpensive : $parseOptions;
            var lexer = new Lexer(parseOptions);
            var parser = new Parser(lexer, $filter, parseOptions);
            parsedExpression = parser.parse(exp);
            if (parsedExpression.constant) {
              parsedExpression.$$watchDelegate = constantWatchDelegate;
            } else if (oneTime) {
              parsedExpression.$$watchDelegate = parsedExpression.literal ?
                  oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;
            } else if (parsedExpression.inputs) {
              parsedExpression.$$watchDelegate = inputsWatchDelegate;
            }
            if (expensiveChecks) {
              parsedExpression = expensiveChecksInterceptor(parsedExpression);
            }
            cache[cacheKey] = parsedExpression;
          }
          return addInterceptor(parsedExpression, interceptorFn);

        case 'function':
          return addInterceptor(exp, interceptorFn);

        default:
          return addInterceptor(noop, interceptorFn);
      }
    }

    function expensiveChecksInterceptor(fn) {
      if (!fn) return fn;
      expensiveCheckFn.$$watchDelegate = fn.$$watchDelegate;
      expensiveCheckFn.assign = expensiveChecksInterceptor(fn.assign);
      expensiveCheckFn.constant = fn.constant;
      expensiveCheckFn.literal = fn.literal;
      for (var i = 0; fn.inputs && i < fn.inputs.length; ++i) {
        fn.inputs[i] = expensiveChecksInterceptor(fn.inputs[i]);
      }
      expensiveCheckFn.inputs = fn.inputs;

      return expensiveCheckFn;

      function expensiveCheckFn(scope, locals, assign, inputs) {
        var expensiveCheckOldValue = runningChecksEnabled;
        runningChecksEnabled = true;
        try {
          return fn(scope, locals, assign, inputs);
        } finally {
          runningChecksEnabled = expensiveCheckOldValue;
        }
      }
    }

    function expressionInputDirtyCheck(newValue, oldValueOfValue) {

      if (newValue == null || oldValueOfValue == null) { // null/undefined
        return newValue === oldValueOfValue;
      }

      if (typeof newValue === 'object') {

        // attempt to convert the value to a primitive type
        // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can
        //             be cheaply dirty-checked
        newValue = getValueOf(newValue);

        if (typeof newValue === 'object') {
          // objects/arrays are not supported - deep-watching them would be too expensive
          return false;
        }

        // fall-through to the primitive equality check
      }

      //Primitive or NaN
      return newValue === oldValueOfValue || (newValue !== newValue && oldValueOfValue !== oldValueOfValue);
    }

    function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {
      var inputExpressions = parsedExpression.inputs;
      var lastResult;

      if (inputExpressions.length === 1) {
        var oldInputValueOf = expressionInputDirtyCheck; // init to something unique so that equals check fails
        inputExpressions = inputExpressions[0];
        return scope.$watch(function expressionInputWatch(scope) {
          var newInputValue = inputExpressions(scope);
          if (!expressionInputDirtyCheck(newInputValue, oldInputValueOf)) {
            lastResult = parsedExpression(scope, undefined, undefined, [newInputValue]);
            oldInputValueOf = newInputValue && getValueOf(newInputValue);
          }
          return lastResult;
        }, listener, objectEquality, prettyPrintExpression);
      }

      var oldInputValueOfValues = [];
      var oldInputValues = [];
      for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
        oldInputValueOfValues[i] = expressionInputDirtyCheck; // init to something unique so that equals check fails
        oldInputValues[i] = null;
      }

      return scope.$watch(function expressionInputsWatch(scope) {
        var changed = false;

        for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
          var newInputValue = inputExpressions[i](scope);
          if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i]))) {
            oldInputValues[i] = newInputValue;
            oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);
          }
        }

        if (changed) {
          lastResult = parsedExpression(scope, undefined, undefined, oldInputValues);
        }

        return lastResult;
      }, listener, objectEquality, prettyPrintExpression);
    }

    function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression) {
      var unwatch, lastValue;
      return unwatch = scope.$watch(function oneTimeWatch(scope) {
        return parsedExpression(scope);
      }, function oneTimeListener(value, old, scope) {
        lastValue = value;
        if (isFunction(listener)) {
          listener.apply(this, arguments);
        }
        if (isDefined(value)) {
          scope.$$postDigest(function() {
            if (isDefined(lastValue)) {
              unwatch();
            }
          });
        }
      }, objectEquality);
    }

    function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {
      var unwatch, lastValue;
      return unwatch = scope.$watch(function oneTimeWatch(scope) {
        return parsedExpression(scope);
      }, function oneTimeListener(value, old, scope) {
        lastValue = value;
        if (isFunction(listener)) {
          listener.call(this, value, old, scope);
        }
        if (isAllDefined(value)) {
          scope.$$postDigest(function() {
            if (isAllDefined(lastValue)) unwatch();
          });
        }
      }, objectEquality);

      function isAllDefined(value) {
        var allDefined = true;
        forEach(value, function(val) {
          if (!isDefined(val)) allDefined = false;
        });
        return allDefined;
      }
    }

    function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {
      var unwatch;
      return unwatch = scope.$watch(function constantWatch(scope) {
        unwatch();
        return parsedExpression(scope);
      }, listener, objectEquality);
    }

    function addInterceptor(parsedExpression, interceptorFn) {
      if (!interceptorFn) return parsedExpression;
      var watchDelegate = parsedExpression.$$watchDelegate;
      var useInputs = false;

      var regularWatch =
          watchDelegate !== oneTimeLiteralWatchDelegate &&
          watchDelegate !== oneTimeWatchDelegate;

      var fn = regularWatch ? function regularInterceptedExpression(scope, locals, assign, inputs) {
        var value = useInputs && inputs ? inputs[0] : parsedExpression(scope, locals, assign, inputs);
        return interceptorFn(value, scope, locals);
      } : function oneTimeInterceptedExpression(scope, locals, assign, inputs) {
        var value = parsedExpression(scope, locals, assign, inputs);
        var result = interceptorFn(value, scope, locals);
        // we only return the interceptor's result if the
        // initial value is defined (for bind-once)
        return isDefined(value) ? result : value;
      };

      // Propagate $$watchDelegates other then inputsWatchDelegate
      if (parsedExpression.$$watchDelegate &&
          parsedExpression.$$watchDelegate !== inputsWatchDelegate) {
        fn.$$watchDelegate = parsedExpression.$$watchDelegate;
      } else if (!interceptorFn.$stateful) {
        // If there is an interceptor, but no watchDelegate then treat the interceptor like
        // we treat filters - it is assumed to be a pure function unless flagged with $stateful
        fn.$$watchDelegate = inputsWatchDelegate;
        useInputs = !parsedExpression.inputs;
        fn.inputs = parsedExpression.inputs ? parsedExpression.inputs : [parsedExpression];
      }

      return fn;
    }
  }];
}

/**
 * @ngdoc service
 * @name $q
 * @requires $rootScope
 *
 * @description
 * A service that helps you run functions asynchronously, and use their return values (or exceptions)
 * when they are done processing.
 *
 * This is an implementation of promises/deferred objects inspired by
 * [Kris Kowal's Q](https://github.com/kriskowal/q).
 *
 * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred
 * implementations, and the other which resembles ES6 promises to some degree.
 *
 * # $q constructor
 *
 * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`
 * function as the first argument. This is similar to the native Promise implementation from ES6 Harmony,
 * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).
 *
 * While the constructor-style use is supported, not all of the supporting methods from ES6 Harmony promises are
 * available yet.
 *
 * It can be used like so:
 *
 * ```js
 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
 *   // are available in the current lexical scope (they could have been injected or passed in).
 *
 *   function asyncGreet(name) {
 *     // perform some asynchronous operation, resolve or reject the promise when appropriate.
 *     return $q(function(resolve, reject) {
 *       setTimeout(function() {
 *         if (okToGreet(name)) {
 *           resolve('Hello, ' + name + '!');
 *         } else {
 *           reject('Greeting ' + name + ' is not allowed.');
 *         }
 *       }, 1000);
 *     });
 *   }
 *
 *   var promise = asyncGreet('Robin Hood');
 *   promise.then(function(greeting) {
 *     alert('Success: ' + greeting);
 *   }, function(reason) {
 *     alert('Failed: ' + reason);
 *   });
 * ```
 *
 * Note: progress/notify callbacks are not currently supported via the ES6-style interface.
 *
 * Note: unlike ES6 behavior, an exception thrown in the constructor function will NOT implicitly reject the promise.
 *
 * However, the more traditional CommonJS-style usage is still available, and documented below.
 *
 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
 * interface for interacting with an object that represents the result of an action that is
 * performed asynchronously, and may or may not be finished at any given point in time.
 *
 * From the perspective of dealing with error handling, deferred and promise APIs are to
 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
 *
 * ```js
 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
 *   // are available in the current lexical scope (they could have been injected or passed in).
 *
 *   function asyncGreet(name) {
 *     var deferred = $q.defer();
 *
 *     setTimeout(function() {
 *       deferred.notify('About to greet ' + name + '.');
 *
 *       if (okToGreet(name)) {
 *         deferred.resolve('Hello, ' + name + '!');
 *       } else {
 *         deferred.reject('Greeting ' + name + ' is not allowed.');
 *       }
 *     }, 1000);
 *
 *     return deferred.promise;
 *   }
 *
 *   var promise = asyncGreet('Robin Hood');
 *   promise.then(function(greeting) {
 *     alert('Success: ' + greeting);
 *   }, function(reason) {
 *     alert('Failed: ' + reason);
 *   }, function(update) {
 *     alert('Got notification: ' + update);
 *   });
 * ```
 *
 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
 * comes in the way of guarantees that promise and deferred APIs make, see
 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
 *
 * Additionally the promise api allows for composition that is very hard to do with the
 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
 * section on serial or parallel joining of promises.
 *
 * # The Deferred API
 *
 * A new instance of deferred is constructed by calling `$q.defer()`.
 *
 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
 * that can be used for signaling the successful or unsuccessful completion, as well as the status
 * of the task.
 *
 * **Methods**
 *
 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
 *   constructed via `$q.reject`, the promise will be rejected instead.
 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
 *   resolving it with a rejection constructed via `$q.reject`.
 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
 *   multiple times before the promise is either resolved or rejected.
 *
 * **Properties**
 *
 * - promise – `{Promise}` – promise object associated with this deferred.
 *
 *
 * # The Promise API
 *
 * A new promise instance is created when a deferred instance is created and can be retrieved by
 * calling `deferred.promise`.
 *
 * The purpose of the promise object is to allow for interested parties to get access to the result
 * of the deferred task when it completes.
 *
 * **Methods**
 *
 * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or
 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
 *   as soon as the result is available. The callbacks are called with a single argument: the result
 *   or rejection reason. Additionally, the notify callback may be called zero or more times to
 *   provide a progress indication, before the promise is resolved or rejected.
 *
 *   This method *returns a new promise* which is resolved or rejected via the return value of the
 *   `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved
 *   with the value which is resolved in that promise using
 *   [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).
 *   It also notifies via the return value of the `notifyCallback` method. The promise cannot be
 *   resolved or rejected from the notifyCallback method.
 *
 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
 *
 * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,
 *   but to do so without modifying the final value. This is useful to release resources or do some
 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
 *   more information.
 *
 * # Chaining promises
 *
 * Because calling the `then` method of a promise returns a new derived promise, it is easily
 * possible to create a chain of promises:
 *
 * ```js
 *   promiseB = promiseA.then(function(result) {
 *     return result + 1;
 *   });
 *
 *   // promiseB will be resolved immediately after promiseA is resolved and its value
 *   // will be the result of promiseA incremented by 1
 * ```
 *
 * It is possible to create chains of any length and since a promise can be resolved with another
 * promise (which will defer its resolution further), it is possible to pause/defer resolution of
 * the promises at any point in the chain. This makes it possible to implement powerful APIs like
 * $http's response interceptors.
 *
 *
 * # Differences between Kris Kowal's Q and $q
 *
 *  There are two main differences:
 *
 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
 *   mechanism in angular, which means faster propagation of resolution or rejection into your
 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
 *   all the important functionality needed for common async tasks.
 *
 *  # Testing
 *
 *  ```js
 *    it('should simulate promise', inject(function($q, $rootScope) {
 *      var deferred = $q.defer();
 *      var promise = deferred.promise;
 *      var resolvedValue;
 *
 *      promise.then(function(value) { resolvedValue = value; });
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Simulate resolving of promise
 *      deferred.resolve(123);
 *      // Note that the 'then' function does not get called synchronously.
 *      // This is because we want the promise API to always be async, whether or not
 *      // it got called synchronously or asynchronously.
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Propagate promise resolution to 'then' functions using $apply().
 *      $rootScope.$apply();
 *      expect(resolvedValue).toEqual(123);
 *    }));
 *  ```
 *
 * @param {function(function, function)} resolver Function which is responsible for resolving or
 *   rejecting the newly created promise. The first parameter is a function which resolves the
 *   promise, the second parameter is a function which rejects the promise.
 *
 * @returns {Promise} The newly created promise.
 */
function $QProvider() {

  this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {
    return qFactory(function(callback) {
      $rootScope.$evalAsync(callback);
    }, $exceptionHandler);
  }];
}

function $$QProvider() {
  this.$get = ['$browser', '$exceptionHandler', function($browser, $exceptionHandler) {
    return qFactory(function(callback) {
      $browser.defer(callback);
    }, $exceptionHandler);
  }];
}

/**
 * Constructs a promise manager.
 *
 * @param {function(function)} nextTick Function for executing functions in the next turn.
 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
 *     debugging purposes.
 * @returns {object} Promise manager.
 */
function qFactory(nextTick, exceptionHandler) {
  var $qMinErr = minErr('$q', TypeError);

  /**
   * @ngdoc method
   * @name ng.$q#defer
   * @kind function
   *
   * @description
   * Creates a `Deferred` object which represents a task which will finish in the future.
   *
   * @returns {Deferred} Returns a new instance of deferred.
   */
  var defer = function() {
    var d = new Deferred();
    //Necessary to support unbound execution :/
    d.resolve = simpleBind(d, d.resolve);
    d.reject = simpleBind(d, d.reject);
    d.notify = simpleBind(d, d.notify);
    return d;
  };

  function Promise() {
    this.$$state = { status: 0 };
  }

  extend(Promise.prototype, {
    then: function(onFulfilled, onRejected, progressBack) {
      if (isUndefined(onFulfilled) && isUndefined(onRejected) && isUndefined(progressBack)) {
        return this;
      }
      var result = new Deferred();

      this.$$state.pending = this.$$state.pending || [];
      this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);
      if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);

      return result.promise;
    },

    "catch": function(callback) {
      return this.then(null, callback);
    },

    "finally": function(callback, progressBack) {
      return this.then(function(value) {
        return handleCallback(value, true, callback);
      }, function(error) {
        return handleCallback(error, false, callback);
      }, progressBack);
    }
  });

  //Faster, more basic than angular.bind http://jsperf.com/angular-bind-vs-custom-vs-native
  function simpleBind(context, fn) {
    return function(value) {
      fn.call(context, value);
    };
  }

  function processQueue(state) {
    var fn, deferred, pending;

    pending = state.pending;
    state.processScheduled = false;
    state.pending = undefined;
    for (var i = 0, ii = pending.length; i < ii; ++i) {
      deferred = pending[i][0];
      fn = pending[i][state.status];
      try {
        if (isFunction(fn)) {
          deferred.resolve(fn(state.value));
        } else if (state.status === 1) {
          deferred.resolve(state.value);
        } else {
          deferred.reject(state.value);
        }
      } catch (e) {
        deferred.reject(e);
        exceptionHandler(e);
      }
    }
  }

  function scheduleProcessQueue(state) {
    if (state.processScheduled || !state.pending) return;
    state.processScheduled = true;
    nextTick(function() { processQueue(state); });
  }

  function Deferred() {
    this.promise = new Promise();
  }

  extend(Deferred.prototype, {
    resolve: function(val) {
      if (this.promise.$$state.status) return;
      if (val === this.promise) {
        this.$$reject($qMinErr(
          'qcycle',
          "Expected promise to be resolved with value other than itself '{0}'",
          val));
      } else {
        this.$$resolve(val);
      }

    },

    $$resolve: function(val) {
      var then;
      var that = this;
      var done = false;
      try {
        if ((isObject(val) || isFunction(val))) then = val && val.then;
        if (isFunction(then)) {
          this.promise.$$state.status = -1;
          then.call(val, resolvePromise, rejectPromise, simpleBind(this, this.notify));
        } else {
          this.promise.$$state.value = val;
          this.promise.$$state.status = 1;
          scheduleProcessQueue(this.promise.$$state);
        }
      } catch (e) {
        rejectPromise(e);
        exceptionHandler(e);
      }

      function resolvePromise(val) {
        if (done) return;
        done = true;
        that.$$resolve(val);
      }
      function rejectPromise(val) {
        if (done) return;
        done = true;
        that.$$reject(val);
      }
    },

    reject: function(reason) {
      if (this.promise.$$state.status) return;
      this.$$reject(reason);
    },

    $$reject: function(reason) {
      this.promise.$$state.value = reason;
      this.promise.$$state.status = 2;
      scheduleProcessQueue(this.promise.$$state);
    },

    notify: function(progress) {
      var callbacks = this.promise.$$state.pending;

      if ((this.promise.$$state.status <= 0) && callbacks && callbacks.length) {
        nextTick(function() {
          var callback, result;
          for (var i = 0, ii = callbacks.length; i < ii; i++) {
            result = callbacks[i][0];
            callback = callbacks[i][3];
            try {
              result.notify(isFunction(callback) ? callback(progress) : progress);
            } catch (e) {
              exceptionHandler(e);
            }
          }
        });
      }
    }
  });

  /**
   * @ngdoc method
   * @name $q#reject
   * @kind function
   *
   * @description
   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
   * used to forward rejection in a chain of promises. If you are dealing with the last promise in
   * a promise chain, you don't need to worry about it.
   *
   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
   * a promise error callback and you want to forward the error to the promise derived from the
   * current promise, you have to "rethrow" the error by returning a rejection constructed via
   * `reject`.
   *
   * ```js
   *   promiseB = promiseA.then(function(result) {
   *     // success: do something and resolve promiseB
   *     //          with the old or a new result
   *     return result;
   *   }, function(reason) {
   *     // error: handle the error if possible and
   *     //        resolve promiseB with newPromiseOrValue,
   *     //        otherwise forward the rejection to promiseB
   *     if (canHandle(reason)) {
   *      // handle the error and recover
   *      return newPromiseOrValue;
   *     }
   *     return $q.reject(reason);
   *   });
   * ```
   *
   * @param {*} reason Constant, message, exception or an object representing the rejection reason.
   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
   */
  var reject = function(reason) {
    var result = new Deferred();
    result.reject(reason);
    return result.promise;
  };

  var makePromise = function makePromise(value, resolved) {
    var result = new Deferred();
    if (resolved) {
      result.resolve(value);
    } else {
      result.reject(value);
    }
    return result.promise;
  };

  var handleCallback = function handleCallback(value, isResolved, callback) {
    var callbackOutput = null;
    try {
      if (isFunction(callback)) callbackOutput = callback();
    } catch (e) {
      return makePromise(e, false);
    }
    if (isPromiseLike(callbackOutput)) {
      return callbackOutput.then(function() {
        return makePromise(value, isResolved);
      }, function(error) {
        return makePromise(error, false);
      });
    } else {
      return makePromise(value, isResolved);
    }
  };

  /**
   * @ngdoc method
   * @name $q#when
   * @kind function
   *
   * @description
   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
   * This is useful when you are dealing with an object that might or might not be a promise, or if
   * the promise comes from a source that can't be trusted.
   *
   * @param {*} value Value or a promise
   * @param {Function=} successCallback
   * @param {Function=} errorCallback
   * @param {Function=} progressCallback
   * @returns {Promise} Returns a promise of the passed value or promise
   */


  var when = function(value, callback, errback, progressBack) {
    var result = new Deferred();
    result.resolve(value);
    return result.promise.then(callback, errback, progressBack);
  };

  /**
   * @ngdoc method
   * @name $q#resolve
   * @kind function
   *
   * @description
   * Alias of {@link ng.$q#when when} to maintain naming consistency with ES6.
   *
   * @param {*} value Value or a promise
   * @param {Function=} successCallback
   * @param {Function=} errorCallback
   * @param {Function=} progressCallback
   * @returns {Promise} Returns a promise of the passed value or promise
   */
  var resolve = when;

  /**
   * @ngdoc method
   * @name $q#all
   * @kind function
   *
   * @description
   * Combines multiple promises into a single promise that is resolved when all of the input
   * promises are resolved.
   *
   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
   *   with the same rejection value.
   */

  function all(promises) {
    var deferred = new Deferred(),
        counter = 0,
        results = isArray(promises) ? [] : {};

    forEach(promises, function(promise, key) {
      counter++;
      when(promise).then(function(value) {
        if (results.hasOwnProperty(key)) return;
        results[key] = value;
        if (!(--counter)) deferred.resolve(results);
      }, function(reason) {
        if (results.hasOwnProperty(key)) return;
        deferred.reject(reason);
      });
    });

    if (counter === 0) {
      deferred.resolve(results);
    }

    return deferred.promise;
  }

  var $Q = function Q(resolver) {
    if (!isFunction(resolver)) {
      throw $qMinErr('norslvr', "Expected resolverFn, got '{0}'", resolver);
    }

    var deferred = new Deferred();

    function resolveFn(value) {
      deferred.resolve(value);
    }

    function rejectFn(reason) {
      deferred.reject(reason);
    }

    resolver(resolveFn, rejectFn);

    return deferred.promise;
  };

  // Let's make the instanceof operator work for promises, so that
  // `new $q(fn) instanceof $q` would evaluate to true.
  $Q.prototype = Promise.prototype;

  $Q.defer = defer;
  $Q.reject = reject;
  $Q.when = when;
  $Q.resolve = resolve;
  $Q.all = all;

  return $Q;
}

function $$RAFProvider() { //rAF
  this.$get = ['$window', '$timeout', function($window, $timeout) {
    var requestAnimationFrame = $window.requestAnimationFrame ||
                                $window.webkitRequestAnimationFrame;

    var cancelAnimationFrame = $window.cancelAnimationFrame ||
                               $window.webkitCancelAnimationFrame ||
                               $window.webkitCancelRequestAnimationFrame;

    var rafSupported = !!requestAnimationFrame;
    var raf = rafSupported
      ? function(fn) {
          var id = requestAnimationFrame(fn);
          return function() {
            cancelAnimationFrame(id);
          };
        }
      : function(fn) {
          var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666
          return function() {
            $timeout.cancel(timer);
          };
        };

    raf.supported = rafSupported;

    return raf;
  }];
}

/**
 * DESIGN NOTES
 *
 * The design decisions behind the scope are heavily favored for speed and memory consumption.
 *
 * The typical use of scope is to watch the expressions, which most of the time return the same
 * value as last time so we optimize the operation.
 *
 * Closures construction is expensive in terms of speed as well as memory:
 *   - No closures, instead use prototypical inheritance for API
 *   - Internal state needs to be stored on scope directly, which means that private state is
 *     exposed as $$____ properties
 *
 * Loop operations are optimized by using while(count--) { ... }
 *   - This means that in order to keep the same order of execution as addition we have to add
 *     items to the array at the beginning (unshift) instead of at the end (push)
 *
 * Child scopes are created and removed often
 *   - Using an array would be slow since inserts in the middle are expensive; so we use linked lists
 *
 * There are fewer watches than observers. This is why you don't want the observer to be implemented
 * in the same way as watch. Watch requires return of the initialization function which is expensive
 * to construct.
 */


/**
 * @ngdoc provider
 * @name $rootScopeProvider
 * @description
 *
 * Provider for the $rootScope service.
 */

/**
 * @ngdoc method
 * @name $rootScopeProvider#digestTtl
 * @description
 *
 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
 * assuming that the model is unstable.
 *
 * The current default is 10 iterations.
 *
 * In complex applications it's possible that the dependencies between `$watch`s will result in
 * several digest iterations. However if an application needs more than the default 10 digest
 * iterations for its model to stabilize then you should investigate what is causing the model to
 * continuously change during the digest.
 *
 * Increasing the TTL could have performance implications, so you should not change it without
 * proper justification.
 *
 * @param {number} limit The number of digest iterations.
 */


/**
 * @ngdoc service
 * @name $rootScope
 * @description
 *
 * Every application has a single root {@link ng.$rootScope.Scope scope}.
 * All other scopes are descendant scopes of the root scope. Scopes provide separation
 * between the model and the view, via a mechanism for watching the model for changes.
 * They also provide event emission/broadcast and subscription facility. See the
 * {@link guide/scope developer guide on scopes}.
 */
function $RootScopeProvider() {
  var TTL = 10;
  var $rootScopeMinErr = minErr('$rootScope');
  var lastDirtyWatch = null;
  var applyAsyncId = null;

  this.digestTtl = function(value) {
    if (arguments.length) {
      TTL = value;
    }
    return TTL;
  };

  function createChildScopeClass(parent) {
    function ChildScope() {
      this.$$watchers = this.$$nextSibling =
          this.$$childHead = this.$$childTail = null;
      this.$$listeners = {};
      this.$$listenerCount = {};
      this.$$watchersCount = 0;
      this.$id = nextUid();
      this.$$ChildScope = null;
    }
    ChildScope.prototype = parent;
    return ChildScope;
  }

  this.$get = ['$exceptionHandler', '$parse', '$browser',
      function($exceptionHandler, $parse, $browser) {

    function destroyChildScope($event) {
        $event.currentScope.$$destroyed = true;
    }

    function cleanUpScope($scope) {

      if (msie === 9) {
        // There is a memory leak in IE9 if all child scopes are not disconnected
        // completely when a scope is destroyed. So this code will recurse up through
        // all this scopes children
        //
        // See issue https://github.com/angular/angular.js/issues/10706
        $scope.$$childHead && cleanUpScope($scope.$$childHead);
        $scope.$$nextSibling && cleanUpScope($scope.$$nextSibling);
      }

      // The code below works around IE9 and V8's memory leaks
      //
      // See:
      // - https://code.google.com/p/v8/issues/detail?id=2073#c26
      // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
      // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451

      $scope.$parent = $scope.$$nextSibling = $scope.$$prevSibling = $scope.$$childHead =
          $scope.$$childTail = $scope.$root = $scope.$$watchers = null;
    }

    /**
     * @ngdoc type
     * @name $rootScope.Scope
     *
     * @description
     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
     * {@link auto.$injector $injector}. Child scopes are created using the
     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
     * compiled HTML template is executed.) See also the {@link guide/scope Scopes guide} for
     * an in-depth introduction and usage examples.
     *
     *
     * # Inheritance
     * A scope can inherit from a parent scope, as in this example:
     * ```js
         var parent = $rootScope;
         var child = parent.$new();

         parent.salutation = "Hello";
         expect(child.salutation).toEqual('Hello');

         child.salutation = "Welcome";
         expect(child.salutation).toEqual('Welcome');
         expect(parent.salutation).toEqual('Hello');
     * ```
     *
     * When interacting with `Scope` in tests, additional helper methods are available on the
     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional
     * details.
     *
     *
     * @param {Object.<string, function()>=} providers Map of service factory which need to be
     *                                       provided for the current scope. Defaults to {@link ng}.
     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
     *                              append/override services provided by `providers`. This is handy
     *                              when unit-testing and having the need to override a default
     *                              service.
     * @returns {Object} Newly created scope.
     *
     */
    function Scope() {
      this.$id = nextUid();
      this.$$phase = this.$parent = this.$$watchers =
                     this.$$nextSibling = this.$$prevSibling =
                     this.$$childHead = this.$$childTail = null;
      this.$root = this;
      this.$$destroyed = false;
      this.$$listeners = {};
      this.$$listenerCount = {};
      this.$$watchersCount = 0;
      this.$$isolateBindings = null;
    }

    /**
     * @ngdoc property
     * @name $rootScope.Scope#$id
     *
     * @description
     * Unique scope ID (monotonically increasing) useful for debugging.
     */

     /**
      * @ngdoc property
      * @name $rootScope.Scope#$parent
      *
      * @description
      * Reference to the parent scope.
      */

      /**
       * @ngdoc property
       * @name $rootScope.Scope#$root
       *
       * @description
       * Reference to the root scope.
       */

    Scope.prototype = {
      constructor: Scope,
      /**
       * @ngdoc method
       * @name $rootScope.Scope#$new
       * @kind function
       *
       * @description
       * Creates a new child {@link ng.$rootScope.Scope scope}.
       *
       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.
       * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.
       *
       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is
       * desired for the scope and its child scopes to be permanently detached from the parent and
       * thus stop participating in model change detection and listener notification by invoking.
       *
       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the
       *         parent scope. The scope is isolated, as it can not see parent scope properties.
       *         When creating widgets, it is useful for the widget to not accidentally read parent
       *         state.
       *
       * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`
       *                              of the newly created scope. Defaults to `this` scope if not provided.
       *                              This is used when creating a transclude scope to correctly place it
       *                              in the scope hierarchy while maintaining the correct prototypical
       *                              inheritance.
       *
       * @returns {Object} The newly created child scope.
       *
       */
      $new: function(isolate, parent) {
        var child;

        parent = parent || this;

        if (isolate) {
          child = new Scope();
          child.$root = this.$root;
        } else {
          // Only create a child scope class if somebody asks for one,
          // but cache it to allow the VM to optimize lookups.
          if (!this.$$ChildScope) {
            this.$$ChildScope = createChildScopeClass(this);
          }
          child = new this.$$ChildScope();
        }
        child.$parent = parent;
        child.$$prevSibling = parent.$$childTail;
        if (parent.$$childHead) {
          parent.$$childTail.$$nextSibling = child;
          parent.$$childTail = child;
        } else {
          parent.$$childHead = parent.$$childTail = child;
        }

        // When the new scope is not isolated or we inherit from `this`, and
        // the parent scope is destroyed, the property `$$destroyed` is inherited
        // prototypically. In all other cases, this property needs to be set
        // when the parent scope is destroyed.
        // The listener needs to be added after the parent is set
        if (isolate || parent != this) child.$on('$destroy', destroyChildScope);

        return child;
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$watch
       * @kind function
       *
       * @description
       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.
       *
       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest
       *   $digest()} and should return the value that will be watched. (`watchExpression` should not change
       *   its value when executed multiple times with the same input because it may be executed multiple
       *   times by {@link ng.$rootScope.Scope#$digest $digest()}. That is, `watchExpression` should be
       *   [idempotent](http://en.wikipedia.org/wiki/Idempotence).
       * - The `listener` is called only when the value from the current `watchExpression` and the
       *   previous call to `watchExpression` are not equal (with the exception of the initial run,
       *   see below). Inequality is determined according to reference inequality,
       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
       *    via the `!==` Javascript operator, unless `objectEquality == true`
       *   (see next point)
       * - When `objectEquality == true`, inequality of the `watchExpression` is determined
       *   according to the {@link angular.equals} function. To save the value of the object for
       *   later comparison, the {@link angular.copy} function is used. This therefore means that
       *   watching complex objects will have adverse memory and performance implications.
       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.
       *   This is achieved by rerunning the watchers until no changes are detected. The rerun
       *   iteration limit is 10 to prevent an infinite loop deadlock.
       *
       *
       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,
       * you can register a `watchExpression` function with no `listener`. (Be prepared for
       * multiple calls to your `watchExpression` because it will execute multiple times in a
       * single {@link ng.$rootScope.Scope#$digest $digest} cycle if a change is detected.)
       *
       * After a watcher is registered with the scope, the `listener` fn is called asynchronously
       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the
       * watcher. In rare cases, this is undesirable because the listener is called when the result
       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you
       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the
       * listener was called due to initialization.
       *
       *
       *
       * # Example
       * ```js
           // let's assume that scope was dependency injected as the $rootScope
           var scope = $rootScope;
           scope.name = 'misko';
           scope.counter = 0;

           expect(scope.counter).toEqual(0);
           scope.$watch('name', function(newValue, oldValue) {
             scope.counter = scope.counter + 1;
           });
           expect(scope.counter).toEqual(0);

           scope.$digest();
           // the listener is always called during the first $digest loop after it was registered
           expect(scope.counter).toEqual(1);

           scope.$digest();
           // but now it will not be called unless the value changes
           expect(scope.counter).toEqual(1);

           scope.name = 'adam';
           scope.$digest();
           expect(scope.counter).toEqual(2);



           // Using a function as a watchExpression
           var food;
           scope.foodCounter = 0;
           expect(scope.foodCounter).toEqual(0);
           scope.$watch(
             // This function returns the value being watched. It is called for each turn of the $digest loop
             function() { return food; },
             // This is the change listener, called when the value returned from the above function changes
             function(newValue, oldValue) {
               if ( newValue !== oldValue ) {
                 // Only increment the counter if the value changed
                 scope.foodCounter = scope.foodCounter + 1;
               }
             }
           );
           // No digest has been run so the counter will be zero
           expect(scope.foodCounter).toEqual(0);

           // Run the digest but since food has not changed count will still be zero
           scope.$digest();
           expect(scope.foodCounter).toEqual(0);

           // Update food and run digest.  Now the counter will increment
           food = 'cheeseburger';
           scope.$digest();
           expect(scope.foodCounter).toEqual(1);

       * ```
       *
       *
       *
       * @param {(function()|string)} watchExpression Expression that is evaluated on each
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers
       *    a call to the `listener`.
       *
       *    - `string`: Evaluated as {@link guide/expression expression}
       *    - `function(scope)`: called with current `scope` as a parameter.
       * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value
       *    of `watchExpression` changes.
       *
       *    - `newVal` contains the current value of the `watchExpression`
       *    - `oldVal` contains the previous value of the `watchExpression`
       *    - `scope` refers to the current scope
       * @param {boolean=} [objectEquality=false] Compare for object equality using {@link angular.equals} instead of
       *     comparing for reference equality.
       * @returns {function()} Returns a deregistration function for this listener.
       */
      $watch: function(watchExp, listener, objectEquality, prettyPrintExpression) {
        var get = $parse(watchExp);

        if (get.$$watchDelegate) {
          return get.$$watchDelegate(this, listener, objectEquality, get, watchExp);
        }
        var scope = this,
            array = scope.$$watchers,
            watcher = {
              fn: listener,
              last: initWatchVal,
              get: get,
              exp: prettyPrintExpression || watchExp,
              eq: !!objectEquality
            };

        lastDirtyWatch = null;

        if (!isFunction(listener)) {
          watcher.fn = noop;
        }

        if (!array) {
          array = scope.$$watchers = [];
        }
        // we use unshift since we use a while loop in $digest for speed.
        // the while loop reads in reverse order.
        array.unshift(watcher);
        incrementWatchersCount(this, 1);

        return function deregisterWatch() {
          if (arrayRemove(array, watcher) >= 0) {
            incrementWatchersCount(scope, -1);
          }
          lastDirtyWatch = null;
        };
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$watchGroup
       * @kind function
       *
       * @description
       * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.
       * If any one expression in the collection changes the `listener` is executed.
       *
       * - The items in the `watchExpressions` array are observed via standard $watch operation and are examined on every
       *   call to $digest() to see if any items changes.
       * - The `listener` is called whenever any expression in the `watchExpressions` array changes.
       *
       * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually
       * watched using {@link ng.$rootScope.Scope#$watch $watch()}
       *
       * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any
       *    expression in `watchExpressions` changes
       *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching
       *    those of `watchExpression`
       *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
       *    those of `watchExpression`
       *    The `scope` refers to the current scope.
       * @returns {function()} Returns a de-registration function for all listeners.
       */
      $watchGroup: function(watchExpressions, listener) {
        var oldValues = new Array(watchExpressions.length);
        var newValues = new Array(watchExpressions.length);
        var deregisterFns = [];
        var self = this;
        var changeReactionScheduled = false;
        var firstRun = true;

        if (!watchExpressions.length) {
          // No expressions means we call the listener ASAP
          var shouldCall = true;
          self.$evalAsync(function() {
            if (shouldCall) listener(newValues, newValues, self);
          });
          return function deregisterWatchGroup() {
            shouldCall = false;
          };
        }

        if (watchExpressions.length === 1) {
          // Special case size of one
          return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {
            newValues[0] = value;
            oldValues[0] = oldValue;
            listener(newValues, (value === oldValue) ? newValues : oldValues, scope);
          });
        }

        forEach(watchExpressions, function(expr, i) {
          var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {
            newValues[i] = value;
            oldValues[i] = oldValue;
            if (!changeReactionScheduled) {
              changeReactionScheduled = true;
              self.$evalAsync(watchGroupAction);
            }
          });
          deregisterFns.push(unwatchFn);
        });

        function watchGroupAction() {
          changeReactionScheduled = false;

          if (firstRun) {
            firstRun = false;
            listener(newValues, newValues, self);
          } else {
            listener(newValues, oldValues, self);
          }
        }

        return function deregisterWatchGroup() {
          while (deregisterFns.length) {
            deregisterFns.shift()();
          }
        };
      },


      /**
       * @ngdoc method
       * @name $rootScope.Scope#$watchCollection
       * @kind function
       *
       * @description
       * Shallow watches the properties of an object and fires whenever any of the properties change
       * (for arrays, this implies watching the array items; for object maps, this implies watching
       * the properties). If a change is detected, the `listener` callback is fired.
       *
       * - The `obj` collection is observed via standard $watch operation and is examined on every
       *   call to $digest() to see if any items have been added, removed, or moved.
       * - The `listener` is called whenever anything within the `obj` has changed. Examples include
       *   adding, removing, and moving items belonging to an object or array.
       *
       *
       * # Example
       * ```js
          $scope.names = ['igor', 'matias', 'misko', 'james'];
          $scope.dataCount = 4;

          $scope.$watchCollection('names', function(newNames, oldNames) {
            $scope.dataCount = newNames.length;
          });

          expect($scope.dataCount).toEqual(4);
          $scope.$digest();

          //still at 4 ... no changes
          expect($scope.dataCount).toEqual(4);

          $scope.names.pop();
          $scope.$digest();

          //now there's been a change
          expect($scope.dataCount).toEqual(3);
       * ```
       *
       *
       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The
       *    expression value should evaluate to an object or an array which is observed on each
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the
       *    collection will trigger a call to the `listener`.
       *
       * @param {function(newCollection, oldCollection, scope)} listener a callback function called
       *    when a change is detected.
       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression
       *    - The `oldCollection` object is a copy of the former collection data.
       *      Due to performance considerations, the`oldCollection` value is computed only if the
       *      `listener` function declares two or more arguments.
       *    - The `scope` argument refers to the current scope.
       *
       * @returns {function()} Returns a de-registration function for this listener. When the
       *    de-registration function is executed, the internal watch operation is terminated.
       */
      $watchCollection: function(obj, listener) {
        $watchCollectionInterceptor.$stateful = true;

        var self = this;
        // the current value, updated on each dirty-check run
        var newValue;
        // a shallow copy of the newValue from the last dirty-check run,
        // updated to match newValue during dirty-check run
        var oldValue;
        // a shallow copy of the newValue from when the last change happened
        var veryOldValue;
        // only track veryOldValue if the listener is asking for it
        var trackVeryOldValue = (listener.length > 1);
        var changeDetected = 0;
        var changeDetector = $parse(obj, $watchCollectionInterceptor);
        var internalArray = [];
        var internalObject = {};
        var initRun = true;
        var oldLength = 0;

        function $watchCollectionInterceptor(_value) {
          newValue = _value;
          var newLength, key, bothNaN, newItem, oldItem;

          // If the new value is undefined, then return undefined as the watch may be a one-time watch
          if (isUndefined(newValue)) return;

          if (!isObject(newValue)) { // if primitive
            if (oldValue !== newValue) {
              oldValue = newValue;
              changeDetected++;
            }
          } else if (isArrayLike(newValue)) {
            if (oldValue !== internalArray) {
              // we are transitioning from something which was not an array into array.
              oldValue = internalArray;
              oldLength = oldValue.length = 0;
              changeDetected++;
            }

            newLength = newValue.length;

            if (oldLength !== newLength) {
              // if lengths do not match we need to trigger change notification
              changeDetected++;
              oldValue.length = oldLength = newLength;
            }
            // copy the items to oldValue and look for changes.
            for (var i = 0; i < newLength; i++) {
              oldItem = oldValue[i];
              newItem = newValue[i];

              bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
              if (!bothNaN && (oldItem !== newItem)) {
                changeDetected++;
                oldValue[i] = newItem;
              }
            }
          } else {
            if (oldValue !== internalObject) {
              // we are transitioning from something which was not an object into object.
              oldValue = internalObject = {};
              oldLength = 0;
              changeDetected++;
            }
            // copy the items to oldValue and look for changes.
            newLength = 0;
            for (key in newValue) {
              if (hasOwnProperty.call(newValue, key)) {
                newLength++;
                newItem = newValue[key];
                oldItem = oldValue[key];

                if (key in oldValue) {
                  bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
                  if (!bothNaN && (oldItem !== newItem)) {
                    changeDetected++;
                    oldValue[key] = newItem;
                  }
                } else {
                  oldLength++;
                  oldValue[key] = newItem;
                  changeDetected++;
                }
              }
            }
            if (oldLength > newLength) {
              // we used to have more keys, need to find them and destroy them.
              changeDetected++;
              for (key in oldValue) {
                if (!hasOwnProperty.call(newValue, key)) {
                  oldLength--;
                  delete oldValue[key];
                }
              }
            }
          }
          return changeDetected;
        }

        function $watchCollectionAction() {
          if (initRun) {
            initRun = false;
            listener(newValue, newValue, self);
          } else {
            listener(newValue, veryOldValue, self);
          }

          // make a copy for the next time a collection is changed
          if (trackVeryOldValue) {
            if (!isObject(newValue)) {
              //primitive
              veryOldValue = newValue;
            } else if (isArrayLike(newValue)) {
              veryOldValue = new Array(newValue.length);
              for (var i = 0; i < newValue.length; i++) {
                veryOldValue[i] = newValue[i];
              }
            } else { // if object
              veryOldValue = {};
              for (var key in newValue) {
                if (hasOwnProperty.call(newValue, key)) {
                  veryOldValue[key] = newValue[key];
                }
              }
            }
          }
        }

        return this.$watch(changeDetector, $watchCollectionAction);
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$digest
       * @kind function
       *
       * @description
       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and
       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change
       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}
       * until no more listeners are firing. This means that it is possible to get into an infinite
       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of
       * iterations exceeds 10.
       *
       * Usually, you don't call `$digest()` directly in
       * {@link ng.directive:ngController controllers} or in
       * {@link ng.$compileProvider#directive directives}.
       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within
       * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.
       *
       * If you want to be notified whenever `$digest()` is called,
       * you can register a `watchExpression` function with
       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.
       *
       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.
       *
       * # Example
       * ```js
           var scope = ...;
           scope.name = 'misko';
           scope.counter = 0;

           expect(scope.counter).toEqual(0);
           scope.$watch('name', function(newValue, oldValue) {
             scope.counter = scope.counter + 1;
           });
           expect(scope.counter).toEqual(0);

           scope.$digest();
           // the listener is always called during the first $digest loop after it was registered
           expect(scope.counter).toEqual(1);

           scope.$digest();
           // but now it will not be called unless the value changes
           expect(scope.counter).toEqual(1);

           scope.name = 'adam';
           scope.$digest();
           expect(scope.counter).toEqual(2);
       * ```
       *
       */
      $digest: function() {
        var watch, value, last, fn, get,
            watchers,
            length,
            dirty, ttl = TTL,
            next, current, target = this,
            watchLog = [],
            logIdx, logMsg, asyncTask;

        beginPhase('$digest');
        // Check for changes to browser url that happened in sync before the call to $digest
        $browser.$$checkUrlChange();

        if (this === $rootScope && applyAsyncId !== null) {
          // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then
          // cancel the scheduled $apply and flush the queue of expressions to be evaluated.
          $browser.defer.cancel(applyAsyncId);
          flushApplyAsync();
        }

        lastDirtyWatch = null;

        do { // "while dirty" loop
          dirty = false;
          current = target;

          while (asyncQueue.length) {
            try {
              asyncTask = asyncQueue.shift();
              asyncTask.scope.$eval(asyncTask.expression, asyncTask.locals);
            } catch (e) {
              $exceptionHandler(e);
            }
            lastDirtyWatch = null;
          }

          traverseScopesLoop:
          do { // "traverse the scopes" loop
            if ((watchers = current.$$watchers)) {
              // process our watches
              length = watchers.length;
              while (length--) {
                try {
                  watch = watchers[length];
                  // Most common watches are on primitives, in which case we can short
                  // circuit it with === operator, only when === fails do we use .equals
                  if (watch) {
                    get = watch.get;
                    if ((value = get(current)) !== (last = watch.last) &&
                        !(watch.eq
                            ? equals(value, last)
                            : (typeof value === 'number' && typeof last === 'number'
                               && isNaN(value) && isNaN(last)))) {
                      dirty = true;
                      lastDirtyWatch = watch;
                      watch.last = watch.eq ? copy(value, null) : value;
                      fn = watch.fn;
                      fn(value, ((last === initWatchVal) ? value : last), current);
                      if (ttl < 5) {
                        logIdx = 4 - ttl;
                        if (!watchLog[logIdx]) watchLog[logIdx] = [];
                        watchLog[logIdx].push({
                          msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,
                          newVal: value,
                          oldVal: last
                        });
                      }
                    } else if (watch === lastDirtyWatch) {
                      // If the most recently dirty watcher is now clean, short circuit since the remaining watchers
                      // have already been tested.
                      dirty = false;
                      break traverseScopesLoop;
                    }
                  }
                } catch (e) {
                  $exceptionHandler(e);
                }
              }
            }

            // Insanity Warning: scope depth-first traversal
            // yes, this code is a bit crazy, but it works and we have tests to prove it!
            // this piece should be kept in sync with the traversal in $broadcast
            if (!(next = ((current.$$watchersCount && current.$$childHead) ||
                (current !== target && current.$$nextSibling)))) {
              while (current !== target && !(next = current.$$nextSibling)) {
                current = current.$parent;
              }
            }
          } while ((current = next));

          // `break traverseScopesLoop;` takes us to here

          if ((dirty || asyncQueue.length) && !(ttl--)) {
            clearPhase();
            throw $rootScopeMinErr('infdig',
                '{0} $digest() iterations reached. Aborting!\n' +
                'Watchers fired in the last 5 iterations: {1}',
                TTL, watchLog);
          }

        } while (dirty || asyncQueue.length);

        clearPhase();

        while (postDigestQueue.length) {
          try {
            postDigestQueue.shift()();
          } catch (e) {
            $exceptionHandler(e);
          }
        }
      },


      /**
       * @ngdoc event
       * @name $rootScope.Scope#$destroy
       * @eventType broadcast on scope being destroyed
       *
       * @description
       * Broadcasted when a scope and its children are being destroyed.
       *
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
       * clean up DOM bindings before an element is removed from the DOM.
       */

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$destroy
       * @kind function
       *
       * @description
       * Removes the current scope (and all of its children) from the parent scope. Removal implies
       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer
       * propagate to the current scope and its children. Removal also implies that the current
       * scope is eligible for garbage collection.
       *
       * The `$destroy()` is usually used by directives such as
       * {@link ng.directive:ngRepeat ngRepeat} for managing the
       * unrolling of the loop.
       *
       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.
       * Application code can register a `$destroy` event handler that will give it a chance to
       * perform any necessary cleanup.
       *
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
       * clean up DOM bindings before an element is removed from the DOM.
       */
      $destroy: function() {
        // We can't destroy a scope that has been already destroyed.
        if (this.$$destroyed) return;
        var parent = this.$parent;

        this.$broadcast('$destroy');
        this.$$destroyed = true;

        if (this === $rootScope) {
          //Remove handlers attached to window when $rootScope is removed
          $browser.$$applicationDestroyed();
        }

        incrementWatchersCount(this, -this.$$watchersCount);
        for (var eventName in this.$$listenerCount) {
          decrementListenerCount(this, this.$$listenerCount[eventName], eventName);
        }

        // sever all the references to parent scopes (after this cleanup, the current scope should
        // not be retained by any of our references and should be eligible for garbage collection)
        if (parent && parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;
        if (parent && parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;
        if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;
        if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;

        // Disable listeners, watchers and apply/digest methods
        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;
        this.$on = this.$watch = this.$watchGroup = function() { return noop; };
        this.$$listeners = {};

        // Disconnect the next sibling to prevent `cleanUpScope` destroying those too
        this.$$nextSibling = null;
        cleanUpScope(this);
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$eval
       * @kind function
       *
       * @description
       * Executes the `expression` on the current scope and returns the result. Any exceptions in
       * the expression are propagated (uncaught). This is useful when evaluating Angular
       * expressions.
       *
       * # Example
       * ```js
           var scope = ng.$rootScope.Scope();
           scope.a = 1;
           scope.b = 2;

           expect(scope.$eval('a+b')).toEqual(3);
           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);
       * ```
       *
       * @param {(string|function())=} expression An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with the current `scope` parameter.
       *
       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
       * @returns {*} The result of evaluating the expression.
       */
      $eval: function(expr, locals) {
        return $parse(expr)(this, locals);
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$evalAsync
       * @kind function
       *
       * @description
       * Executes the expression on the current scope at a later point in time.
       *
       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only
       * that:
       *
       *   - it will execute after the function that scheduled the evaluation (preferably before DOM
       *     rendering).
       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after
       *     `expression` execution.
       *
       * Any exceptions from the execution of the expression are forwarded to the
       * {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle
       * will be scheduled. However, it is encouraged to always call code that changes the model
       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.
       *
       * @param {(string|function())=} expression An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with the current `scope` parameter.
       *
       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
       */
      $evalAsync: function(expr, locals) {
        // if we are outside of an $digest loop and this is the first time we are scheduling async
        // task also schedule async auto-flush
        if (!$rootScope.$$phase && !asyncQueue.length) {
          $browser.defer(function() {
            if (asyncQueue.length) {
              $rootScope.$digest();
            }
          });
        }

        asyncQueue.push({scope: this, expression: $parse(expr), locals: locals});
      },

      $$postDigest: function(fn) {
        postDigestQueue.push(fn);
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$apply
       * @kind function
       *
       * @description
       * `$apply()` is used to execute an expression in angular from outside of the angular
       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).
       * Because we are calling into the angular framework we need to perform proper scope life
       * cycle of {@link ng.$exceptionHandler exception handling},
       * {@link ng.$rootScope.Scope#$digest executing watches}.
       *
       * ## Life cycle
       *
       * # Pseudo-Code of `$apply()`
       * ```js
           function $apply(expr) {
             try {
               return $eval(expr);
             } catch (e) {
               $exceptionHandler(e);
             } finally {
               $root.$digest();
             }
           }
       * ```
       *
       *
       * Scope's `$apply()` method transitions through the following stages:
       *
       * 1. The {@link guide/expression expression} is executed using the
       *    {@link ng.$rootScope.Scope#$eval $eval()} method.
       * 2. Any exceptions from the execution of the expression are forwarded to the
       *    {@link ng.$exceptionHandler $exceptionHandler} service.
       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the
       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.
       *
       *
       * @param {(string|function())=} exp An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with current `scope` parameter.
       *
       * @returns {*} The result of evaluating the expression.
       */
      $apply: function(expr) {
        try {
          beginPhase('$apply');
          try {
            return this.$eval(expr);
          } finally {
            clearPhase();
          }
        } catch (e) {
          $exceptionHandler(e);
        } finally {
          try {
            $rootScope.$digest();
          } catch (e) {
            $exceptionHandler(e);
            throw e;
          }
        }
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$applyAsync
       * @kind function
       *
       * @description
       * Schedule the invocation of $apply to occur at a later time. The actual time difference
       * varies across browsers, but is typically around ~10 milliseconds.
       *
       * This can be used to queue up multiple expressions which need to be evaluated in the same
       * digest.
       *
       * @param {(string|function())=} exp An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with current `scope` parameter.
       */
      $applyAsync: function(expr) {
        var scope = this;
        expr && applyAsyncQueue.push($applyAsyncExpression);
        expr = $parse(expr);
        scheduleApplyAsync();

        function $applyAsyncExpression() {
          scope.$eval(expr);
        }
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$on
       * @kind function
       *
       * @description
       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for
       * discussion of event life cycle.
       *
       * The event listener function format is: `function(event, args...)`. The `event` object
       * passed into the listener has the following attributes:
       *
       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or
       *     `$broadcast`-ed.
       *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the
       *     event propagates through the scope hierarchy, this property is set to null.
       *   - `name` - `{string}`: name of the event.
       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel
       *     further event propagation (available only for events that were `$emit`-ed).
       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag
       *     to true.
       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
       *
       * @param {string} name Event name to listen on.
       * @param {function(event, ...args)} listener Function to call when the event is emitted.
       * @returns {function()} Returns a deregistration function for this listener.
       */
      $on: function(name, listener) {
        var namedListeners = this.$$listeners[name];
        if (!namedListeners) {
          this.$$listeners[name] = namedListeners = [];
        }
        namedListeners.push(listener);

        var current = this;
        do {
          if (!current.$$listenerCount[name]) {
            current.$$listenerCount[name] = 0;
          }
          current.$$listenerCount[name]++;
        } while ((current = current.$parent));

        var self = this;
        return function() {
          var indexOfListener = namedListeners.indexOf(listener);
          if (indexOfListener !== -1) {
            namedListeners[indexOfListener] = null;
            decrementListenerCount(self, 1, name);
          }
        };
      },


      /**
       * @ngdoc method
       * @name $rootScope.Scope#$emit
       * @kind function
       *
       * @description
       * Dispatches an event `name` upwards through the scope hierarchy notifying the
       * registered {@link ng.$rootScope.Scope#$on} listeners.
       *
       * The event life cycle starts at the scope on which `$emit` was called. All
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
       * notified. Afterwards, the event traverses upwards toward the root scope and calls all
       * registered listeners along the way. The event will stop propagating if one of the listeners
       * cancels it.
       *
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * @param {string} name Event name to emit.
       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
       * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).
       */
      $emit: function(name, args) {
        var empty = [],
            namedListeners,
            scope = this,
            stopPropagation = false,
            event = {
              name: name,
              targetScope: scope,
              stopPropagation: function() {stopPropagation = true;},
              preventDefault: function() {
                event.defaultPrevented = true;
              },
              defaultPrevented: false
            },
            listenerArgs = concat([event], arguments, 1),
            i, length;

        do {
          namedListeners = scope.$$listeners[name] || empty;
          event.currentScope = scope;
          for (i = 0, length = namedListeners.length; i < length; i++) {

            // if listeners were deregistered, defragment the array
            if (!namedListeners[i]) {
              namedListeners.splice(i, 1);
              i--;
              length--;
              continue;
            }
            try {
              //allow all listeners attached to the current scope to run
              namedListeners[i].apply(null, listenerArgs);
            } catch (e) {
              $exceptionHandler(e);
            }
          }
          //if any listener on the current scope stops propagation, prevent bubbling
          if (stopPropagation) {
            event.currentScope = null;
            return event;
          }
          //traverse upwards
          scope = scope.$parent;
        } while (scope);

        event.currentScope = null;

        return event;
      },


      /**
       * @ngdoc method
       * @name $rootScope.Scope#$broadcast
       * @kind function
       *
       * @description
       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the
       * registered {@link ng.$rootScope.Scope#$on} listeners.
       *
       * The event life cycle starts at the scope on which `$broadcast` was called. All
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current
       * scope and calls all registered listeners along the way. The event cannot be canceled.
       *
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * @param {string} name Event name to broadcast.
       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
       */
      $broadcast: function(name, args) {
        var target = this,
            current = target,
            next = target,
            event = {
              name: name,
              targetScope: target,
              preventDefault: function() {
                event.defaultPrevented = true;
              },
              defaultPrevented: false
            };

        if (!target.$$listenerCount[name]) return event;

        var listenerArgs = concat([event], arguments, 1),
            listeners, i, length;

        //down while you can, then up and next sibling or up and next sibling until back at root
        while ((current = next)) {
          event.currentScope = current;
          listeners = current.$$listeners[name] || [];
          for (i = 0, length = listeners.length; i < length; i++) {
            // if listeners were deregistered, defragment the array
            if (!listeners[i]) {
              listeners.splice(i, 1);
              i--;
              length--;
              continue;
            }

            try {
              listeners[i].apply(null, listenerArgs);
            } catch (e) {
              $exceptionHandler(e);
            }
          }

          // Insanity Warning: scope depth-first traversal
          // yes, this code is a bit crazy, but it works and we have tests to prove it!
          // this piece should be kept in sync with the traversal in $digest
          // (though it differs due to having the extra check for $$listenerCount)
          if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||
              (current !== target && current.$$nextSibling)))) {
            while (current !== target && !(next = current.$$nextSibling)) {
              current = current.$parent;
            }
          }
        }

        event.currentScope = null;
        return event;
      }
    };

    var $rootScope = new Scope();

    //The internal queues. Expose them on the $rootScope for debugging/testing purposes.
    var asyncQueue = $rootScope.$$asyncQueue = [];
    var postDigestQueue = $rootScope.$$postDigestQueue = [];
    var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];

    return $rootScope;


    function beginPhase(phase) {
      if ($rootScope.$$phase) {
        throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);
      }

      $rootScope.$$phase = phase;
    }

    function clearPhase() {
      $rootScope.$$phase = null;
    }

    function incrementWatchersCount(current, count) {
      do {
        current.$$watchersCount += count;
      } while ((current = current.$parent));
    }

    function decrementListenerCount(current, count, name) {
      do {
        current.$$listenerCount[name] -= count;

        if (current.$$listenerCount[name] === 0) {
          delete current.$$listenerCount[name];
        }
      } while ((current = current.$parent));
    }

    /**
     * function used as an initial value for watchers.
     * because it's unique we can easily tell it apart from other values
     */
    function initWatchVal() {}

    function flushApplyAsync() {
      while (applyAsyncQueue.length) {
        try {
          applyAsyncQueue.shift()();
        } catch (e) {
          $exceptionHandler(e);
        }
      }
      applyAsyncId = null;
    }

    function scheduleApplyAsync() {
      if (applyAsyncId === null) {
        applyAsyncId = $browser.defer(function() {
          $rootScope.$apply(flushApplyAsync);
        });
      }
    }
  }];
}

/**
 * @ngdoc service
 * @name $rootElement
 *
 * @description
 * The root element of Angular application. This is either the element where {@link
 * ng.directive:ngApp ngApp} was declared or the element passed into
 * {@link angular.bootstrap}. The element represents the root element of application. It is also the
 * location where the application's {@link auto.$injector $injector} service gets
 * published, and can be retrieved using `$rootElement.injector()`.
 */


// the implementation is in angular.bootstrap

/**
 * @description
 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
 */
function $$SanitizeUriProvider() {
  var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/,
    imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;

  /**
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during a[href] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.aHrefSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      aHrefSanitizationWhitelist = regexp;
      return this;
    }
    return aHrefSanitizationWhitelist;
  };


  /**
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during img[src] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.imgSrcSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      imgSrcSanitizationWhitelist = regexp;
      return this;
    }
    return imgSrcSanitizationWhitelist;
  };

  this.$get = function() {
    return function sanitizeUri(uri, isImage) {
      var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
      var normalizedVal;
      normalizedVal = urlResolve(uri).href;
      if (normalizedVal !== '' && !normalizedVal.match(regex)) {
        return 'unsafe:' + normalizedVal;
      }
      return uri;
    };
  };
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *     Any commits to this file should be reviewed with security in mind.  *
 *   Changes to this file can potentially create security vulnerabilities. *
 *          An approval from 2 Core members with history of modifying      *
 *                         this file is required.                          *
 *                                                                         *
 *  Does the change somehow allow for arbitrary javascript to be executed? *
 *    Or allows for someone to change the prototype of built-in objects?   *
 *     Or gives undesired access to variables likes document or window?    *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

var $sceMinErr = minErr('$sce');

var SCE_CONTEXTS = {
  HTML: 'html',
  CSS: 'css',
  URL: 'url',
  // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a
  // url.  (e.g. ng-include, script src, templateUrl)
  RESOURCE_URL: 'resourceUrl',
  JS: 'js'
};

// Helper functions follow.

function adjustMatcher(matcher) {
  if (matcher === 'self') {
    return matcher;
  } else if (isString(matcher)) {
    // Strings match exactly except for 2 wildcards - '*' and '**'.
    // '*' matches any character except those from the set ':/.?&'.
    // '**' matches any character (like .* in a RegExp).
    // More than 2 *'s raises an error as it's ill defined.
    if (matcher.indexOf('***') > -1) {
      throw $sceMinErr('iwcard',
          'Illegal sequence *** in string matcher.  String: {0}', matcher);
    }
    matcher = escapeForRegexp(matcher).
                  replace('\\*\\*', '.*').
                  replace('\\*', '[^:/.?&;]*');
    return new RegExp('^' + matcher + '$');
  } else if (isRegExp(matcher)) {
    // The only other type of matcher allowed is a Regexp.
    // Match entire URL / disallow partial matches.
    // Flags are reset (i.e. no global, ignoreCase or multiline)
    return new RegExp('^' + matcher.source + '$');
  } else {
    throw $sceMinErr('imatcher',
        'Matchers may only be "self", string patterns or RegExp objects');
  }
}


function adjustMatchers(matchers) {
  var adjustedMatchers = [];
  if (isDefined(matchers)) {
    forEach(matchers, function(matcher) {
      adjustedMatchers.push(adjustMatcher(matcher));
    });
  }
  return adjustedMatchers;
}


/**
 * @ngdoc service
 * @name $sceDelegate
 * @kind function
 *
 * @description
 *
 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
 * Contextual Escaping (SCE)} services to AngularJS.
 *
 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
 * work because `$sce` delegates to `$sceDelegate` for these operations.
 *
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
 *
 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
 * can override it completely to change the behavior of `$sce`, the common case would
 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
 * $sceDelegateProvider.resourceUrlWhitelist} and {@link
 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
 */

/**
 * @ngdoc provider
 * @name $sceDelegateProvider
 * @description
 *
 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
 * that the URLs used for sourcing Angular templates are safe.  Refer {@link
 * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
 *
 * For the general details about this service in Angular, read the main page for {@link ng.$sce
 * Strict Contextual Escaping (SCE)}.
 *
 * **Example**:  Consider the following case. <a name="example"></a>
 *
 * - your app is hosted at url `http://myapp.example.com/`
 * - but some of your templates are hosted on other domains you control such as
 *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.
 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
 *
 * Here is what a secure configuration for this scenario might look like:
 *
 * ```
 *  angular.module('myApp', []).config(function($sceDelegateProvider) {
 *    $sceDelegateProvider.resourceUrlWhitelist([
 *      // Allow same origin resource loads.
 *      'self',
 *      // Allow loading from our assets domain.  Notice the difference between * and **.
 *      'http://srv*.assets.example.com/**'
 *    ]);
 *
 *    // The blacklist overrides the whitelist so the open redirect here is blocked.
 *    $sceDelegateProvider.resourceUrlBlacklist([
 *      'http://myapp.example.com/clickThru**'
 *    ]);
 *  });
 * ```
 */

function $SceDelegateProvider() {
  this.SCE_CONTEXTS = SCE_CONTEXTS;

  // Resource URLs can also be trusted by policy.
  var resourceUrlWhitelist = ['self'],
      resourceUrlBlacklist = [];

  /**
   * @ngdoc method
   * @name $sceDelegateProvider#resourceUrlWhitelist
   * @kind function
   *
   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
   *    provided.  This must be an array or null.  A snapshot of this array is used so further
   *    changes to the array are ignored.
   *
   *    Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
   *    allowed in this array.
   *
   *    <div class="alert alert-warning">
   *    **Note:** an empty whitelist array will block all URLs!
   *    </div>
   *
   * @return {Array} the currently set whitelist array.
   *
   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
   * same origin resource requests.
   *
   * @description
   * Sets/Gets the whitelist of trusted resource URLs.
   */
  this.resourceUrlWhitelist = function(value) {
    if (arguments.length) {
      resourceUrlWhitelist = adjustMatchers(value);
    }
    return resourceUrlWhitelist;
  };

  /**
   * @ngdoc method
   * @name $sceDelegateProvider#resourceUrlBlacklist
   * @kind function
   *
   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
   *    provided.  This must be an array or null.  A snapshot of this array is used so further
   *    changes to the array are ignored.
   *
   *    Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
   *    allowed in this array.
   *
   *    The typical usage for the blacklist is to **block
   *    [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
   *    these would otherwise be trusted but actually return content from the redirected domain.
   *
   *    Finally, **the blacklist overrides the whitelist** and has the final say.
   *
   * @return {Array} the currently set blacklist array.
   *
   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
   * is no blacklist.)
   *
   * @description
   * Sets/Gets the blacklist of trusted resource URLs.
   */

  this.resourceUrlBlacklist = function(value) {
    if (arguments.length) {
      resourceUrlBlacklist = adjustMatchers(value);
    }
    return resourceUrlBlacklist;
  };

  this.$get = ['$injector', function($injector) {

    var htmlSanitizer = function htmlSanitizer(html) {
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
    };

    if ($injector.has('$sanitize')) {
      htmlSanitizer = $injector.get('$sanitize');
    }


    function matchUrl(matcher, parsedUrl) {
      if (matcher === 'self') {
        return urlIsSameOrigin(parsedUrl);
      } else {
        // definitely a regex.  See adjustMatchers()
        return !!matcher.exec(parsedUrl.href);
      }
    }

    function isResourceUrlAllowedByPolicy(url) {
      var parsedUrl = urlResolve(url.toString());
      var i, n, allowed = false;
      // Ensure that at least one item from the whitelist allows this url.
      for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
        if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
          allowed = true;
          break;
        }
      }
      if (allowed) {
        // Ensure that no item from the blacklist blocked this url.
        for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
          if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
            allowed = false;
            break;
          }
        }
      }
      return allowed;
    }

    function generateHolderType(Base) {
      var holderType = function TrustedValueHolderType(trustedValue) {
        this.$$unwrapTrustedValue = function() {
          return trustedValue;
        };
      };
      if (Base) {
        holderType.prototype = new Base();
      }
      holderType.prototype.valueOf = function sceValueOf() {
        return this.$$unwrapTrustedValue();
      };
      holderType.prototype.toString = function sceToString() {
        return this.$$unwrapTrustedValue().toString();
      };
      return holderType;
    }

    var trustedValueHolderBase = generateHolderType(),
        byType = {};

    byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);

    /**
     * @ngdoc method
     * @name $sceDelegate#trustAs
     *
     * @description
     * Returns an object that is trusted by angular for use in specified strict
     * contextual escaping contexts (such as ng-bind-html, ng-include, any src
     * attribute interpolation, any dom event binding attribute interpolation
     * such as for onclick,  etc.) that uses the provided value.
     * See {@link ng.$sce $sce} for enabling strict contextual escaping.
     *
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
     *   resourceUrl, html, js and css.
     * @param {*} value The value that that should be considered trusted/safe.
     * @returns {*} A value that can be used to stand in for the provided `value` in places
     * where Angular expects a $sce.trustAs() return value.
     */
    function trustAs(type, trustedValue) {
      var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
      if (!Constructor) {
        throw $sceMinErr('icontext',
            'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',
            type, trustedValue);
      }
      if (trustedValue === null || isUndefined(trustedValue) || trustedValue === '') {
        return trustedValue;
      }
      // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
      // mutable objects, we ensure here that the value passed in is actually a string.
      if (typeof trustedValue !== 'string') {
        throw $sceMinErr('itype',
            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',
            type);
      }
      return new Constructor(trustedValue);
    }

    /**
     * @ngdoc method
     * @name $sceDelegate#valueOf
     *
     * @description
     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
     *
     * If the passed parameter is not a value that had been returned by {@link
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.
     *
     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
     *      call or anything else.
     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
     *     `value` unchanged.
     */
    function valueOf(maybeTrusted) {
      if (maybeTrusted instanceof trustedValueHolderBase) {
        return maybeTrusted.$$unwrapTrustedValue();
      } else {
        return maybeTrusted;
      }
    }

    /**
     * @ngdoc method
     * @name $sceDelegate#getTrusted
     *
     * @description
     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and
     * returns the originally supplied value if the queried context type is a supertype of the
     * created type.  If this condition isn't satisfied, throws an exception.
     *
     * <div class="alert alert-danger">
     * Disabling auto-escaping is extremely dangerous, it usually creates a Cross Site Scripting
     * (XSS) vulnerability in your application.
     * </div>
     *
     * @param {string} type The kind of context in which this value is to be used.
     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} call.
     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
     */
    function getTrusted(type, maybeTrusted) {
      if (maybeTrusted === null || isUndefined(maybeTrusted) || maybeTrusted === '') {
        return maybeTrusted;
      }
      var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
      if (constructor && maybeTrusted instanceof constructor) {
        return maybeTrusted.$$unwrapTrustedValue();
      }
      // If we get here, then we may only take one of two actions.
      // 1. sanitize the value for the requested type, or
      // 2. throw an exception.
      if (type === SCE_CONTEXTS.RESOURCE_URL) {
        if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
          return maybeTrusted;
        } else {
          throw $sceMinErr('insecurl',
              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',
              maybeTrusted.toString());
        }
      } else if (type === SCE_CONTEXTS.HTML) {
        return htmlSanitizer(maybeTrusted);
      }
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
    }

    return { trustAs: trustAs,
             getTrusted: getTrusted,
             valueOf: valueOf };
  }];
}


/**
 * @ngdoc provider
 * @name $sceProvider
 * @description
 *
 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
 * -   enable/disable Strict Contextual Escaping (SCE) in a module
 * -   override the default implementation with a custom delegate
 *
 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
 */

/* jshint maxlen: false*/

/**
 * @ngdoc service
 * @name $sce
 * @kind function
 *
 * @description
 *
 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
 *
 * # Strict Contextual Escaping
 *
 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
 * contexts to result in a value that is marked as safe to use for that context.  One example of
 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer
 * to these contexts as privileged or SCE contexts.
 *
 * As of version 1.2, Angular ships with SCE enabled by default.
 *
 * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow
 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
 * to the top of your HTML document.
 *
 * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for
 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
 *
 * Here's an example of a binding in a privileged context:
 *
 * ```
 * <input ng-model="userHtml" aria-label="User input">
 * <div ng-bind-html="userHtml"></div>
 * ```
 *
 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
 * disabled, this application allows the user to render arbitrary HTML into the DIV.
 * In a more realistic example, one may be rendering user comments, blog articles, etc. via
 * bindings.  (HTML is just one example of a context where rendering user controlled input creates
 * security vulnerabilities.)
 *
 * For the case of HTML, you might use a library, either on the client side, or on the server side,
 * to sanitize unsafe HTML before binding to the value and rendering it in the document.
 *
 * How would you ensure that every place that used these types of bindings was bound to a value that
 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
 * properties/fields and forgot to update the binding to the sanitized value?
 *
 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
 * determine that something explicitly says it's safe to use a value for binding in that
 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
 * for those values that you can easily tell are safe - because they were received from your server,
 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
 * allowing only the files in a specific directory to do this.  Ensuring that the internal API
 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
 *
 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
 * obtain values that will be accepted by SCE / privileged contexts.
 *
 *
 * ## How does it work?
 *
 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
 * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
 *
 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
 * simplified):
 *
 * ```
 * var ngBindHtmlDirective = ['$sce', function($sce) {
 *   return function(scope, element, attr) {
 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
 *       element.html(value || '');
 *     });
 *   };
 * }];
 * ```
 *
 * ## Impact on loading templates
 *
 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
 * `templateUrl`'s specified by {@link guide/directive directives}.
 *
 * By default, Angular only loads templates from the same domain and protocol as the application
 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
 * protocols, you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
 *
 * *Please note*:
 * The browser's
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
 * policy apply in addition to this and may further restrict whether the template is successfully
 * loaded.  This means that without the right CORS policy, loading templates from a different domain
 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
 * browsers.
 *
 * ## This feels like too much overhead
 *
 * It's important to remember that SCE only applies to interpolation expressions.
 *
 * If your expressions are constant literals, they're automatically trusted and you don't need to
 * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.
 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.
 *
 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
 *
 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
 * templates in `ng-include` from your application's domain without having to even know about SCE.
 * It blocks loading templates from other domains or loading templates over http from an https
 * served document.  You can change these by setting your own custom {@link
 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
 *
 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
 * application that's secure and can be audited to verify that with much more ease than bolting
 * security onto an application later.
 *
 * <a name="contexts"></a>
 * ## What trusted context types are supported?
 *
 * | Context             | Notes          |
 * |---------------------|----------------|
 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
 *
 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
 *
 *  Each element in these arrays must be one of the following:
 *
 *  - **'self'**
 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
 *      domain** as the application document using the **same protocol**.
 *  - **String** (except the special value `'self'`)
 *    - The string is matched against the full *normalized / absolute URL* of the resource
 *      being tested (substring matches are not good enough.)
 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
 *      match themselves.
 *    - `*`: matches zero or more occurrences of any character other than one of the following 6
 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and '`;`'.  It's a useful wildcard for use
 *      in a whitelist.
 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
 *      appropriate for use in a scheme, domain, etc. as it would match too much.  (e.g.
 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
 *      http://foo.example.com/templates/**).
 *  - **RegExp** (*see caveat below*)
 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
 *      have good test coverage).  For instance, the use of `.` in the regex is correct only in a
 *      small number of cases.  A `.` character in the regex used when matching the scheme or a
 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
 *      is highly recommended to use the string patterns and only fall back to regular expressions
 *      as a last resort.
 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
 *      matched against the **entire** *normalized / absolute URL* of the resource being tested
 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
 *    - If you are generating your JavaScript from some other templating engine (not
 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
 *      remember to escape your regular expression (and be aware that you might need more than
 *      one level of escaping depending on your templating engine and the way you interpolated
 *      the value.)  Do make use of your platform's escaping mechanism as it might be good
 *      enough before coding your own.  E.g. Ruby has
 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
 *      Javascript lacks a similar built in function for escaping.  Take a look at Google
 *      Closure library's [goog.string.regExpEscape(s)](
 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
 *
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
 *
 * ## Show me an example using SCE.
 *
 * <example module="mySceApp" deps="angular-sanitize.js">
 * <file name="index.html">
 *   <div ng-controller="AppController as myCtrl">
 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
 *     <b>User comments</b><br>
 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
 *     exploit.
 *     <div class="well">
 *       <div ng-repeat="userComment in myCtrl.userComments">
 *         <b>{{userComment.name}}</b>:
 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
 *         <br>
 *       </div>
 *     </div>
 *   </div>
 * </file>
 *
 * <file name="script.js">
 *   angular.module('mySceApp', ['ngSanitize'])
 *     .controller('AppController', ['$http', '$templateCache', '$sce',
 *       function($http, $templateCache, $sce) {
 *         var self = this;
 *         $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {
 *           self.userComments = userComments;
 *         });
 *         self.explicitlyTrustedHtml = $sce.trustAsHtml(
 *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
 *             'sanitization.&quot;">Hover over this text.</span>');
 *       }]);
 * </file>
 *
 * <file name="test_data.json">
 * [
 *   { "name": "Alice",
 *     "htmlComment":
 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
 *   },
 *   { "name": "Bob",
 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"
 *   }
 * ]
 * </file>
 *
 * <file name="protractor.js" type="protractor">
 *   describe('SCE doc demo', function() {
 *     it('should sanitize untrusted values', function() {
 *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())
 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');
 *     });
 *
 *     it('should NOT sanitize explicitly trusted values', function() {
 *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(
 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
 *           'sanitization.&quot;">Hover over this text.</span>');
 *     });
 *   });
 * </file>
 * </example>
 *
 *
 *
 * ## Can I disable SCE completely?
 *
 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
 * for little coding overhead.  It will be much harder to take an SCE disabled application and
 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
 * for cases where you have a lot of existing code that was written before SCE was introduced and
 * you're migrating them a module at a time.
 *
 * That said, here's how you can completely disable SCE:
 *
 * ```
 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
 *   // Completely disable SCE.  For demonstration purposes only!
 *   // Do not use in new projects.
 *   $sceProvider.enabled(false);
 * });
 * ```
 *
 */
/* jshint maxlen: 100 */

function $SceProvider() {
  var enabled = true;

  /**
   * @ngdoc method
   * @name $sceProvider#enabled
   * @kind function
   *
   * @param {boolean=} value If provided, then enables/disables SCE.
   * @return {boolean} true if SCE is enabled, false otherwise.
   *
   * @description
   * Enables/disables SCE and returns the current value.
   */
  this.enabled = function(value) {
    if (arguments.length) {
      enabled = !!value;
    }
    return enabled;
  };


  /* Design notes on the default implementation for SCE.
   *
   * The API contract for the SCE delegate
   * -------------------------------------
   * The SCE delegate object must provide the following 3 methods:
   *
   * - trustAs(contextEnum, value)
   *     This method is used to tell the SCE service that the provided value is OK to use in the
   *     contexts specified by contextEnum.  It must return an object that will be accepted by
   *     getTrusted() for a compatible contextEnum and return this value.
   *
   * - valueOf(value)
   *     For values that were not produced by trustAs(), return them as is.  For values that were
   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
   *     trustAs is wrapping the given values into some type, this operation unwraps it when given
   *     such a value.
   *
   * - getTrusted(contextEnum, value)
   *     This function should return the a value that is safe to use in the context specified by
   *     contextEnum or throw and exception otherwise.
   *
   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
   * instance, an implementation could maintain a registry of all trusted objects by context.  In
   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
   * return the same object passed in if it was found in the registry under a compatible context or
   * throw an exception otherwise.  An implementation might only wrap values some of the time based
   * on some criteria.  getTrusted() might return a value and not throw an exception for special
   * constants or objects even if not wrapped.  All such implementations fulfill this contract.
   *
   *
   * A note on the inheritance model for SCE contexts
   * ------------------------------------------------
   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
   * is purely an implementation details.
   *
   * The contract is simply this:
   *
   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
   *     will also succeed.
   *
   * Inheritance happens to capture this in a natural way.  In some future, we
   * may not use inheritance anymore.  That is OK because no code outside of
   * sce.js and sceSpecs.js would need to be aware of this detail.
   */

  this.$get = ['$parse', '$sceDelegate', function(
                $parse,   $sceDelegate) {
    // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow
    // the "expression(javascript expression)" syntax which is insecure.
    if (enabled && msie < 8) {
      throw $sceMinErr('iequirks',
        'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' +
        'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +
        'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');
    }

    var sce = shallowCopy(SCE_CONTEXTS);

    /**
     * @ngdoc method
     * @name $sce#isEnabled
     * @kind function
     *
     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
     *
     * @description
     * Returns a boolean indicating if SCE is enabled.
     */
    sce.isEnabled = function() {
      return enabled;
    };
    sce.trustAs = $sceDelegate.trustAs;
    sce.getTrusted = $sceDelegate.getTrusted;
    sce.valueOf = $sceDelegate.valueOf;

    if (!enabled) {
      sce.trustAs = sce.getTrusted = function(type, value) { return value; };
      sce.valueOf = identity;
    }

    /**
     * @ngdoc method
     * @name $sce#parseAs
     *
     * @description
     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
     * *result*)}
     *
     * @param {string} type The kind of SCE context in which this result will be used.
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */
    sce.parseAs = function sceParseAs(type, expr) {
      var parsed = $parse(expr);
      if (parsed.literal && parsed.constant) {
        return parsed;
      } else {
        return $parse(expr, function(value) {
          return sce.getTrusted(type, value);
        });
      }
    };

    /**
     * @ngdoc method
     * @name $sce#trustAs
     *
     * @description
     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,
     * returns an object that is trusted by angular for use in specified strict contextual
     * escaping contexts (such as ng-bind-html, ng-include, any src attribute
     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)
     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual
     * escaping.
     *
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
     *   resourceUrl, html, js and css.
     * @param {*} value The value that that should be considered trusted/safe.
     * @returns {*} A value that can be used to stand in for the provided `value` in places
     * where Angular expects a $sce.trustAs() return value.
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsHtml
     *
     * @description
     * Shorthand method.  `$sce.trustAsHtml(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml
     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsUrl
     *
     * @description
     * Shorthand method.  `$sce.trustAsUrl(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl
     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl
     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the return
     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsJs
     *
     * @description
     * Shorthand method.  `$sce.trustAsJs(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs
     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#getTrusted
     *
     * @description
     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the
     * originally supplied value if the queried context type is a supertype of the created type.
     * If this condition isn't satisfied, throws an exception.
     *
     * @param {string} type The kind of context in which this value is to be used.
     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}
     *                         call.
     * @returns {*} The value the was originally provided to
     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.
     *              Otherwise, throws an exception.
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedHtml
     *
     * @description
     * Shorthand method.  `$sce.getTrustedHtml(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedCss
     *
     * @description
     * Shorthand method.  `$sce.getTrustedCss(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedUrl
     *
     * @description
     * Shorthand method.  `$sce.getTrustedUrl(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
     *
     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedJs
     *
     * @description
     * Shorthand method.  `$sce.getTrustedJs(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsHtml
     *
     * @description
     * Shorthand method.  `$sce.parseAsHtml(expression string)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsCss
     *
     * @description
     * Shorthand method.  `$sce.parseAsCss(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsUrl
     *
     * @description
     * Shorthand method.  `$sce.parseAsUrl(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsJs
     *
     * @description
     * Shorthand method.  `$sce.parseAsJs(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    // Shorthand delegations.
    var parse = sce.parseAs,
        getTrusted = sce.getTrusted,
        trustAs = sce.trustAs;

    forEach(SCE_CONTEXTS, function(enumValue, name) {
      var lName = lowercase(name);
      sce[camelCase("parse_as_" + lName)] = function(expr) {
        return parse(enumValue, expr);
      };
      sce[camelCase("get_trusted_" + lName)] = function(value) {
        return getTrusted(enumValue, value);
      };
      sce[camelCase("trust_as_" + lName)] = function(value) {
        return trustAs(enumValue, value);
      };
    });

    return sce;
  }];
}

/**
 * !!! This is an undocumented "private" service !!!
 *
 * @name $sniffer
 * @requires $window
 * @requires $document
 *
 * @property {boolean} history Does the browser support html5 history api ?
 * @property {boolean} transitions Does the browser support CSS transition events ?
 * @property {boolean} animations Does the browser support CSS animation events ?
 *
 * @description
 * This is very simple implementation of testing browser's features.
 */
function $SnifferProvider() {
  this.$get = ['$window', '$document', function($window, $document) {
    var eventSupport = {},
        android =
          toInt((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),
        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),
        document = $document[0] || {},
        vendorPrefix,
        vendorRegex = /^(Moz|webkit|ms)(?=[A-Z])/,
        bodyStyle = document.body && document.body.style,
        transitions = false,
        animations = false,
        match;

    if (bodyStyle) {
      for (var prop in bodyStyle) {
        if (match = vendorRegex.exec(prop)) {
          vendorPrefix = match[0];
          vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);
          break;
        }
      }

      if (!vendorPrefix) {
        vendorPrefix = ('WebkitOpacity' in bodyStyle) && 'webkit';
      }

      transitions = !!(('transition' in bodyStyle) || (vendorPrefix + 'Transition' in bodyStyle));
      animations  = !!(('animation' in bodyStyle) || (vendorPrefix + 'Animation' in bodyStyle));

      if (android && (!transitions ||  !animations)) {
        transitions = isString(bodyStyle.webkitTransition);
        animations = isString(bodyStyle.webkitAnimation);
      }
    }


    return {
      // Android has history.pushState, but it does not update location correctly
      // so let's not use the history API at all.
      // http://code.google.com/p/android/issues/detail?id=17471
      // https://github.com/angular/angular.js/issues/904

      // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has
      // so let's not use the history API also
      // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined
      // jshint -W018
      history: !!($window.history && $window.history.pushState && !(android < 4) && !boxee),
      // jshint +W018
      hasEvent: function(event) {
        // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
        // it. In particular the event is not fired when backspace or delete key are pressed or
        // when cut operation is performed.
        // IE10+ implements 'input' event but it erroneously fires under various situations,
        // e.g. when placeholder changes, or a form is focused.
        if (event === 'input' && msie <= 11) return false;

        if (isUndefined(eventSupport[event])) {
          var divElm = document.createElement('div');
          eventSupport[event] = 'on' + event in divElm;
        }

        return eventSupport[event];
      },
      csp: csp(),
      vendorPrefix: vendorPrefix,
      transitions: transitions,
      animations: animations,
      android: android
    };
  }];
}

var $compileMinErr = minErr('$compile');

/**
 * @ngdoc provider
 * @name $templateRequestProvider
 * @description
 * Used to configure the options passed to the {@link $http} service when making a template request.
 *
 * For example, it can be used for specifying the "Accept" header that is sent to the server, when
 * requesting a template.
 */
function $TemplateRequestProvider() {

  var httpOptions;

  /**
   * @ngdoc method
   * @name $templateRequestProvider#httpOptions
   * @description
   * The options to be passed to the {@link $http} service when making the request.
   * You can use this to override options such as the "Accept" header for template requests.
   *
   * The {@link $templateRequest} will set the `cache` and the `transformResponse` properties of the
   * options if not overridden here.
   *
   * @param {string=} value new value for the {@link $http} options.
   * @returns {string|self} Returns the {@link $http} options when used as getter and self if used as setter.
   */
  this.httpOptions = function(val) {
    if (val) {
      httpOptions = val;
      return this;
    }
    return httpOptions;
  };

  /**
   * @ngdoc service
   * @name $templateRequest
   *
   * @description
   * The `$templateRequest` service runs security checks then downloads the provided template using
   * `$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request
   * fails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the
   * exception can be thwarted by setting the 2nd parameter of the function to true). Note that the
   * contents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted
   * when `tpl` is of type string and `$templateCache` has the matching entry.
   *
   * If you want to pass custom options to the `$http` service, such as setting the Accept header you
   * can configure this via {@link $templateRequestProvider#httpOptions}.
   *
   * @param {string|TrustedResourceUrl} tpl The HTTP request template URL
   * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
   *
   * @return {Promise} a promise for the HTTP response data of the given URL.
   *
   * @property {number} totalPendingRequests total amount of pending template requests being downloaded.
   */
  this.$get = ['$templateCache', '$http', '$q', '$sce', function($templateCache, $http, $q, $sce) {

    function handleRequestFn(tpl, ignoreRequestError) {
      handleRequestFn.totalPendingRequests++;

      // We consider the template cache holds only trusted templates, so
      // there's no need to go through whitelisting again for keys that already
      // are included in there. This also makes Angular accept any script
      // directive, no matter its name. However, we still need to unwrap trusted
      // types.
      if (!isString(tpl) || !$templateCache.get(tpl)) {
        tpl = $sce.getTrustedResourceUrl(tpl);
      }

      var transformResponse = $http.defaults && $http.defaults.transformResponse;

      if (isArray(transformResponse)) {
        transformResponse = transformResponse.filter(function(transformer) {
          return transformer !== defaultHttpResponseTransform;
        });
      } else if (transformResponse === defaultHttpResponseTransform) {
        transformResponse = null;
      }

      return $http.get(tpl, extend({
          cache: $templateCache,
          transformResponse: transformResponse
        }, httpOptions))
        ['finally'](function() {
          handleRequestFn.totalPendingRequests--;
        })
        .then(function(response) {
          $templateCache.put(tpl, response.data);
          return response.data;
        }, handleError);

      function handleError(resp) {
        if (!ignoreRequestError) {
          throw $compileMinErr('tpload', 'Failed to load template: {0} (HTTP status: {1} {2})',
            tpl, resp.status, resp.statusText);
        }
        return $q.reject(resp);
      }
    }

    handleRequestFn.totalPendingRequests = 0;

    return handleRequestFn;
  }];
}

function $$TestabilityProvider() {
  this.$get = ['$rootScope', '$browser', '$location',
       function($rootScope,   $browser,   $location) {

    /**
     * @name $testability
     *
     * @description
     * The private $$testability service provides a collection of methods for use when debugging
     * or by automated test and debugging tools.
     */
    var testability = {};

    /**
     * @name $$testability#findBindings
     *
     * @description
     * Returns an array of elements that are bound (via ng-bind or {{}})
     * to expressions matching the input.
     *
     * @param {Element} element The element root to search from.
     * @param {string} expression The binding expression to match.
     * @param {boolean} opt_exactMatch If true, only returns exact matches
     *     for the expression. Filters and whitespace are ignored.
     */
    testability.findBindings = function(element, expression, opt_exactMatch) {
      var bindings = element.getElementsByClassName('ng-binding');
      var matches = [];
      forEach(bindings, function(binding) {
        var dataBinding = angular.element(binding).data('$binding');
        if (dataBinding) {
          forEach(dataBinding, function(bindingName) {
            if (opt_exactMatch) {
              var matcher = new RegExp('(^|\\s)' + escapeForRegexp(expression) + '(\\s|\\||$)');
              if (matcher.test(bindingName)) {
                matches.push(binding);
              }
            } else {
              if (bindingName.indexOf(expression) != -1) {
                matches.push(binding);
              }
            }
          });
        }
      });
      return matches;
    };

    /**
     * @name $$testability#findModels
     *
     * @description
     * Returns an array of elements that are two-way found via ng-model to
     * expressions matching the input.
     *
     * @param {Element} element The element root to search from.
     * @param {string} expression The model expression to match.
     * @param {boolean} opt_exactMatch If true, only returns exact matches
     *     for the expression.
     */
    testability.findModels = function(element, expression, opt_exactMatch) {
      var prefixes = ['ng-', 'data-ng-', 'ng\\:'];
      for (var p = 0; p < prefixes.length; ++p) {
        var attributeEquals = opt_exactMatch ? '=' : '*=';
        var selector = '[' + prefixes[p] + 'model' + attributeEquals + '"' + expression + '"]';
        var elements = element.querySelectorAll(selector);
        if (elements.length) {
          return elements;
        }
      }
    };

    /**
     * @name $$testability#getLocation
     *
     * @description
     * Shortcut for getting the location in a browser agnostic way. Returns
     *     the path, search, and hash. (e.g. /path?a=b#hash)
     */
    testability.getLocation = function() {
      return $location.url();
    };

    /**
     * @name $$testability#setLocation
     *
     * @description
     * Shortcut for navigating to a location without doing a full page reload.
     *
     * @param {string} url The location url (path, search and hash,
     *     e.g. /path?a=b#hash) to go to.
     */
    testability.setLocation = function(url) {
      if (url !== $location.url()) {
        $location.url(url);
        $rootScope.$digest();
      }
    };

    /**
     * @name $$testability#whenStable
     *
     * @description
     * Calls the callback when $timeout and $http requests are completed.
     *
     * @param {function} callback
     */
    testability.whenStable = function(callback) {
      $browser.notifyWhenNoOutstandingRequests(callback);
    };

    return testability;
  }];
}

function $TimeoutProvider() {
  this.$get = ['$rootScope', '$browser', '$q', '$$q', '$exceptionHandler',
       function($rootScope,   $browser,   $q,   $$q,   $exceptionHandler) {

    var deferreds = {};


     /**
      * @ngdoc service
      * @name $timeout
      *
      * @description
      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
      * block and delegates any exceptions to
      * {@link ng.$exceptionHandler $exceptionHandler} service.
      *
      * The return value of calling `$timeout` is a promise, which will be resolved when
      * the delay has passed and the timeout function, if provided, is executed.
      *
      * To cancel a timeout request, call `$timeout.cancel(promise)`.
      *
      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
      * synchronously flush the queue of deferred functions.
      *
      * If you only want a promise that will be resolved after some specified delay
      * then you can call `$timeout` without the `fn` function.
      *
      * @param {function()=} fn A function, whose execution should be delayed.
      * @param {number=} [delay=0] Delay in milliseconds.
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
      * @param {...*=} Pass additional parameters to the executed function.
      * @returns {Promise} Promise that will be resolved when the timeout is reached. The promise
      *   will be resolved with the return value of the `fn` function.
      *
      */
    function timeout(fn, delay, invokeApply) {
      if (!isFunction(fn)) {
        invokeApply = delay;
        delay = fn;
        fn = noop;
      }

      var args = sliceArgs(arguments, 3),
          skipApply = (isDefined(invokeApply) && !invokeApply),
          deferred = (skipApply ? $$q : $q).defer(),
          promise = deferred.promise,
          timeoutId;

      timeoutId = $browser.defer(function() {
        try {
          deferred.resolve(fn.apply(null, args));
        } catch (e) {
          deferred.reject(e);
          $exceptionHandler(e);
        }
        finally {
          delete deferreds[promise.$$timeoutId];
        }

        if (!skipApply) $rootScope.$apply();
      }, delay);

      promise.$$timeoutId = timeoutId;
      deferreds[timeoutId] = deferred;

      return promise;
    }


     /**
      * @ngdoc method
      * @name $timeout#cancel
      *
      * @description
      * Cancels a task associated with the `promise`. As a result of this, the promise will be
      * resolved with a rejection.
      *
      * @param {Promise=} promise Promise returned by the `$timeout` function.
      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
      *   canceled.
      */
    timeout.cancel = function(promise) {
      if (promise && promise.$$timeoutId in deferreds) {
        deferreds[promise.$$timeoutId].reject('canceled');
        delete deferreds[promise.$$timeoutId];
        return $browser.defer.cancel(promise.$$timeoutId);
      }
      return false;
    };

    return timeout;
  }];
}

// NOTE:  The usage of window and document instead of $window and $document here is
// deliberate.  This service depends on the specific behavior of anchor nodes created by the
// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
// doesn't know about mocked locations and resolves URLs to the real document - which is
// exactly the behavior needed here.  There is little value is mocking these out for this
// service.
var urlParsingNode = document.createElement("a");
var originUrl = urlResolve(window.location.href);


/**
 *
 * Implementation Notes for non-IE browsers
 * ----------------------------------------
 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
 * URL will be resolved into an absolute URL in the context of the application document.
 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
 * properties are all populated to reflect the normalized URL.  This approach has wide
 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
 *
 * Implementation Notes for IE
 * ---------------------------
 * IE <= 10 normalizes the URL when assigned to the anchor node similar to the other
 * browsers.  However, the parsed components will not be set if the URL assigned did not specify
 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
 * work around that by performing the parsing in a 2nd step by taking a previously normalized
 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
 * properties such as protocol, hostname, port, etc.
 *
 * References:
 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
 *   http://url.spec.whatwg.org/#urlutils
 *   https://github.com/angular/angular.js/pull/2902
 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
 *
 * @kind function
 * @param {string} url The URL to be parsed.
 * @description Normalizes and parses a URL.
 * @returns {object} Returns the normalized URL as a dictionary.
 *
 *   | member name   | Description    |
 *   |---------------|----------------|
 *   | href          | A normalized version of the provided URL if it was not an absolute URL |
 *   | protocol      | The protocol including the trailing colon                              |
 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
 *   | search        | The search params, minus the question mark                             |
 *   | hash          | The hash string, minus the hash symbol
 *   | hostname      | The hostname
 *   | port          | The port, without ":"
 *   | pathname      | The pathname, beginning with "/"
 *
 */
function urlResolve(url) {
  var href = url;

  if (msie) {
    // Normalize before parse.  Refer Implementation Notes on why this is
    // done in two steps on IE.
    urlParsingNode.setAttribute("href", href);
    href = urlParsingNode.href;
  }

  urlParsingNode.setAttribute('href', href);

  // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
  return {
    href: urlParsingNode.href,
    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
    host: urlParsingNode.host,
    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
    hostname: urlParsingNode.hostname,
    port: urlParsingNode.port,
    pathname: (urlParsingNode.pathname.charAt(0) === '/')
      ? urlParsingNode.pathname
      : '/' + urlParsingNode.pathname
  };
}

/**
 * Parse a request URL and determine whether this is a same-origin request as the application document.
 *
 * @param {string|object} requestUrl The url of the request as a string that will be resolved
 * or a parsed URL object.
 * @returns {boolean} Whether the request is for the same origin as the application document.
 */
function urlIsSameOrigin(requestUrl) {
  var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;
  return (parsed.protocol === originUrl.protocol &&
          parsed.host === originUrl.host);
}

/**
 * @ngdoc service
 * @name $window
 *
 * @description
 * A reference to the browser's `window` object. While `window`
 * is globally available in JavaScript, it causes testability problems, because
 * it is a global variable. In angular we always refer to it through the
 * `$window` service, so it may be overridden, removed or mocked for testing.
 *
 * Expressions, like the one defined for the `ngClick` directive in the example
 * below, are evaluated with respect to the current scope.  Therefore, there is
 * no risk of inadvertently coding in a dependency on a global value in such an
 * expression.
 *
 * @example
   <example module="windowExample">
     <file name="index.html">
       <script>
         angular.module('windowExample', [])
           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {
             $scope.greeting = 'Hello, World!';
             $scope.doGreeting = function(greeting) {
               $window.alert(greeting);
             };
           }]);
       </script>
       <div ng-controller="ExampleController">
         <input type="text" ng-model="greeting" aria-label="greeting" />
         <button ng-click="doGreeting(greeting)">ALERT</button>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
      it('should display the greeting in the input box', function() {
       element(by.model('greeting')).sendKeys('Hello, E2E Tests');
       // If we click the button it will block the test runner
       // element(':button').click();
      });
     </file>
   </example>
 */
function $WindowProvider() {
  this.$get = valueFn(window);
}

/**
 * @name $$cookieReader
 * @requires $document
 *
 * @description
 * This is a private service for reading cookies used by $http and ngCookies
 *
 * @return {Object} a key/value map of the current cookies
 */
function $$CookieReader($document) {
  var rawDocument = $document[0] || {};
  var lastCookies = {};
  var lastCookieString = '';

  function safeDecodeURIComponent(str) {
    try {
      return decodeURIComponent(str);
    } catch (e) {
      return str;
    }
  }

  return function() {
    var cookieArray, cookie, i, index, name;
    var currentCookieString = rawDocument.cookie || '';

    if (currentCookieString !== lastCookieString) {
      lastCookieString = currentCookieString;
      cookieArray = lastCookieString.split('; ');
      lastCookies = {};

      for (i = 0; i < cookieArray.length; i++) {
        cookie = cookieArray[i];
        index = cookie.indexOf('=');
        if (index > 0) { //ignore nameless cookies
          name = safeDecodeURIComponent(cookie.substring(0, index));
          // the first value that is seen for a cookie is the most
          // specific one.  values for the same cookie name that
          // follow are for less specific paths.
          if (isUndefined(lastCookies[name])) {
            lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));
          }
        }
      }
    }
    return lastCookies;
  };
}

$$CookieReader.$inject = ['$document'];

function $$CookieReaderProvider() {
  this.$get = $$CookieReader;
}

/* global currencyFilter: true,
 dateFilter: true,
 filterFilter: true,
 jsonFilter: true,
 limitToFilter: true,
 lowercaseFilter: true,
 numberFilter: true,
 orderByFilter: true,
 uppercaseFilter: true,
 */

/**
 * @ngdoc provider
 * @name $filterProvider
 * @description
 *
 * Filters are just functions which transform input to an output. However filters need to be
 * Dependency Injected. To achieve this a filter definition consists of a factory function which is
 * annotated with dependencies and is responsible for creating a filter function.
 *
 * <div class="alert alert-warning">
 * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
 * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
 * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
 * (`myapp_subsection_filterx`).
 * </div>
 *
 * ```js
 *   // Filter registration
 *   function MyModule($provide, $filterProvider) {
 *     // create a service to demonstrate injection (not always needed)
 *     $provide.value('greet', function(name){
 *       return 'Hello ' + name + '!';
 *     });
 *
 *     // register a filter factory which uses the
 *     // greet service to demonstrate DI.
 *     $filterProvider.register('greet', function(greet){
 *       // return the filter function which uses the greet service
 *       // to generate salutation
 *       return function(text) {
 *         // filters need to be forgiving so check input validity
 *         return text && greet(text) || text;
 *       };
 *     });
 *   }
 * ```
 *
 * The filter function is registered with the `$injector` under the filter name suffix with
 * `Filter`.
 *
 * ```js
 *   it('should be the same instance', inject(
 *     function($filterProvider) {
 *       $filterProvider.register('reverse', function(){
 *         return ...;
 *       });
 *     },
 *     function($filter, reverseFilter) {
 *       expect($filter('reverse')).toBe(reverseFilter);
 *     });
 * ```
 *
 *
 * For more information about how angular filters work, and how to create your own filters, see
 * {@link guide/filter Filters} in the Angular Developer Guide.
 */

/**
 * @ngdoc service
 * @name $filter
 * @kind function
 * @description
 * Filters are used for formatting data displayed to the user.
 *
 * The general syntax in templates is as follows:
 *
 *         {{ expression [| filter_name[:parameter_value] ... ] }}
 *
 * @param {String} name Name of the filter function to retrieve
 * @return {Function} the filter function
 * @example
   <example name="$filter" module="filterExample">
     <file name="index.html">
       <div ng-controller="MainCtrl">
        <h3>{{ originalText }}</h3>
        <h3>{{ filteredText }}</h3>
       </div>
     </file>

     <file name="script.js">
      angular.module('filterExample', [])
      .controller('MainCtrl', function($scope, $filter) {
        $scope.originalText = 'hello';
        $scope.filteredText = $filter('uppercase')($scope.originalText);
      });
     </file>
   </example>
  */
$FilterProvider.$inject = ['$provide'];
function $FilterProvider($provide) {
  var suffix = 'Filter';

  /**
   * @ngdoc method
   * @name $filterProvider#register
   * @param {string|Object} name Name of the filter function, or an object map of filters where
   *    the keys are the filter names and the values are the filter factories.
   *
   *    <div class="alert alert-warning">
   *    **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
   *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
   *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
   *    (`myapp_subsection_filterx`).
   *    </div>
    * @param {Function} factory If the first argument was a string, a factory function for the filter to be registered.
   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
   *    of the registered filter instances.
   */
  function register(name, factory) {
    if (isObject(name)) {
      var filters = {};
      forEach(name, function(filter, key) {
        filters[key] = register(key, filter);
      });
      return filters;
    } else {
      return $provide.factory(name + suffix, factory);
    }
  }
  this.register = register;

  this.$get = ['$injector', function($injector) {
    return function(name) {
      return $injector.get(name + suffix);
    };
  }];

  ////////////////////////////////////////

  /* global
    currencyFilter: false,
    dateFilter: false,
    filterFilter: false,
    jsonFilter: false,
    limitToFilter: false,
    lowercaseFilter: false,
    numberFilter: false,
    orderByFilter: false,
    uppercaseFilter: false,
  */

  register('currency', currencyFilter);
  register('date', dateFilter);
  register('filter', filterFilter);
  register('json', jsonFilter);
  register('limitTo', limitToFilter);
  register('lowercase', lowercaseFilter);
  register('number', numberFilter);
  register('orderBy', orderByFilter);
  register('uppercase', uppercaseFilter);
}

/**
 * @ngdoc filter
 * @name filter
 * @kind function
 *
 * @description
 * Selects a subset of items from `array` and returns it as a new array.
 *
 * @param {Array} array The source array.
 * @param {string|Object|function()} expression The predicate to be used for selecting items from
 *   `array`.
 *
 *   Can be one of:
 *
 *   - `string`: The string is used for matching against the contents of the `array`. All strings or
 *     objects with string properties in `array` that match this string will be returned. This also
 *     applies to nested object properties.
 *     The predicate can be negated by prefixing the string with `!`.
 *
 *   - `Object`: A pattern object can be used to filter specific properties on objects contained
 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
 *     which have property `name` containing "M" and property `phone` containing "1". A special
 *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any
 *     property of the object or its nested object properties. That's equivalent to the simple
 *     substring match with a `string` as described above. The predicate can be negated by prefixing
 *     the string with `!`.
 *     For example `{name: "!M"}` predicate will return an array of items which have property `name`
 *     not containing "M".
 *
 *     Note that a named property will match properties on the same level only, while the special
 *     `$` property will match properties on the same level or deeper. E.g. an array item like
 *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but
 *     **will** be matched by `{$: 'John'}`.
 *
 *   - `function(value, index, array)`: A predicate function can be used to write arbitrary filters.
 *     The function is called for each element of the array, with the element, its index, and
 *     the entire array itself as arguments.
 *
 *     The final result is an array of those elements that the predicate returned true for.
 *
 * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in
 *     determining if the expected value (from the filter expression) and actual value (from
 *     the object in the array) should be considered a match.
 *
 *   Can be one of:
 *
 *   - `function(actual, expected)`:
 *     The function will be given the object value and the predicate value to compare and
 *     should return true if both values should be considered equal.
 *
 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.
 *     This is essentially strict comparison of expected and actual.
 *
 *   - `false|undefined`: A short hand for a function which will look for a substring match in case
 *     insensitive way.
 *
 *     Primitive values are converted to strings. Objects are not compared against primitives,
 *     unless they have a custom `toString` method (e.g. `Date` objects).
 *
 * @example
   <example>
     <file name="index.html">
       <div ng-init="friends = [{name:'John', phone:'555-1276'},
                                {name:'Mary', phone:'800-BIG-MARY'},
                                {name:'Mike', phone:'555-4321'},
                                {name:'Adam', phone:'555-5678'},
                                {name:'Julie', phone:'555-8765'},
                                {name:'Juliette', phone:'555-5678'}]"></div>

       <label>Search: <input ng-model="searchText"></label>
       <table id="searchTextResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friend in friends | filter:searchText">
           <td>{{friend.name}}</td>
           <td>{{friend.phone}}</td>
         </tr>
       </table>
       <hr>
       <label>Any: <input ng-model="search.$"></label> <br>
       <label>Name only <input ng-model="search.name"></label><br>
       <label>Phone only <input ng-model="search.phone"></label><br>
       <label>Equality <input type="checkbox" ng-model="strict"></label><br>
       <table id="searchObjResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friendObj in friends | filter:search:strict">
           <td>{{friendObj.name}}</td>
           <td>{{friendObj.phone}}</td>
         </tr>
       </table>
     </file>
     <file name="protractor.js" type="protractor">
       var expectFriendNames = function(expectedNames, key) {
         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
           arr.forEach(function(wd, i) {
             expect(wd.getText()).toMatch(expectedNames[i]);
           });
         });
       };

       it('should search across all fields when filtering with a string', function() {
         var searchText = element(by.model('searchText'));
         searchText.clear();
         searchText.sendKeys('m');
         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');

         searchText.clear();
         searchText.sendKeys('76');
         expectFriendNames(['John', 'Julie'], 'friend');
       });

       it('should search in specific fields when filtering with a predicate object', function() {
         var searchAny = element(by.model('search.$'));
         searchAny.clear();
         searchAny.sendKeys('i');
         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
       });
       it('should use a equal comparison when comparator is true', function() {
         var searchName = element(by.model('search.name'));
         var strict = element(by.model('strict'));
         searchName.clear();
         searchName.sendKeys('Julie');
         strict.click();
         expectFriendNames(['Julie'], 'friendObj');
       });
     </file>
   </example>
 */
function filterFilter() {
  return function(array, expression, comparator) {
    if (!isArrayLike(array)) {
      if (array == null) {
        return array;
      } else {
        throw minErr('filter')('notarray', 'Expected array but received: {0}', array);
      }
    }

    var expressionType = getTypeForFilter(expression);
    var predicateFn;
    var matchAgainstAnyProp;

    switch (expressionType) {
      case 'function':
        predicateFn = expression;
        break;
      case 'boolean':
      case 'null':
      case 'number':
      case 'string':
        matchAgainstAnyProp = true;
        //jshint -W086
      case 'object':
        //jshint +W086
        predicateFn = createPredicateFn(expression, comparator, matchAgainstAnyProp);
        break;
      default:
        return array;
    }

    return Array.prototype.filter.call(array, predicateFn);
  };
}

// Helper functions for `filterFilter`
function createPredicateFn(expression, comparator, matchAgainstAnyProp) {
  var shouldMatchPrimitives = isObject(expression) && ('$' in expression);
  var predicateFn;

  if (comparator === true) {
    comparator = equals;
  } else if (!isFunction(comparator)) {
    comparator = function(actual, expected) {
      if (isUndefined(actual)) {
        // No substring matching against `undefined`
        return false;
      }
      if ((actual === null) || (expected === null)) {
        // No substring matching against `null`; only match against `null`
        return actual === expected;
      }
      if (isObject(expected) || (isObject(actual) && !hasCustomToString(actual))) {
        // Should not compare primitives against objects, unless they have custom `toString` method
        return false;
      }

      actual = lowercase('' + actual);
      expected = lowercase('' + expected);
      return actual.indexOf(expected) !== -1;
    };
  }

  predicateFn = function(item) {
    if (shouldMatchPrimitives && !isObject(item)) {
      return deepCompare(item, expression.$, comparator, false);
    }
    return deepCompare(item, expression, comparator, matchAgainstAnyProp);
  };

  return predicateFn;
}

function deepCompare(actual, expected, comparator, matchAgainstAnyProp, dontMatchWholeObject) {
  var actualType = getTypeForFilter(actual);
  var expectedType = getTypeForFilter(expected);

  if ((expectedType === 'string') && (expected.charAt(0) === '!')) {
    return !deepCompare(actual, expected.substring(1), comparator, matchAgainstAnyProp);
  } else if (isArray(actual)) {
    // In case `actual` is an array, consider it a match
    // if ANY of it's items matches `expected`
    return actual.some(function(item) {
      return deepCompare(item, expected, comparator, matchAgainstAnyProp);
    });
  }

  switch (actualType) {
    case 'object':
      var key;
      if (matchAgainstAnyProp) {
        for (key in actual) {
          if ((key.charAt(0) !== '$') && deepCompare(actual[key], expected, comparator, true)) {
            return true;
          }
        }
        return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, false);
      } else if (expectedType === 'object') {
        for (key in expected) {
          var expectedVal = expected[key];
          if (isFunction(expectedVal) || isUndefined(expectedVal)) {
            continue;
          }

          var matchAnyProperty = key === '$';
          var actualVal = matchAnyProperty ? actual : actual[key];
          if (!deepCompare(actualVal, expectedVal, comparator, matchAnyProperty, matchAnyProperty)) {
            return false;
          }
        }
        return true;
      } else {
        return comparator(actual, expected);
      }
      break;
    case 'function':
      return false;
    default:
      return comparator(actual, expected);
  }
}

// Used for easily differentiating between `null` and actual `object`
function getTypeForFilter(val) {
  return (val === null) ? 'null' : typeof val;
}

var MAX_DIGITS = 22;
var DECIMAL_SEP = '.';
var ZERO_CHAR = '0';

/**
 * @ngdoc filter
 * @name currency
 * @kind function
 *
 * @description
 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
 * symbol for current locale is used.
 *
 * @param {number} amount Input to filter.
 * @param {string=} symbol Currency symbol or identifier to be displayed.
 * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
 * @returns {string} Formatted number.
 *
 *
 * @example
   <example module="currencyExample">
     <file name="index.html">
       <script>
         angular.module('currencyExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.amount = 1234.56;
           }]);
       </script>
       <div ng-controller="ExampleController">
         <input type="number" ng-model="amount" aria-label="amount"> <br>
         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
         custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span>
         no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should init with 1234.56', function() {
         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');
         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');
       });
       it('should update', function() {
         if (browser.params.browser == 'safari') {
           // Safari does not understand the minus key. See
           // https://github.com/angular/protractor/issues/481
           return;
         }
         element(by.model('amount')).clear();
         element(by.model('amount')).sendKeys('-1234');
         expect(element(by.id('currency-default')).getText()).toBe('-$1,234.00');
         expect(element(by.id('currency-custom')).getText()).toBe('-USD$1,234.00');
         expect(element(by.id('currency-no-fractions')).getText()).toBe('-USD$1,234');
       });
     </file>
   </example>
 */
currencyFilter.$inject = ['$locale'];
function currencyFilter($locale) {
  var formats = $locale.NUMBER_FORMATS;
  return function(amount, currencySymbol, fractionSize) {
    if (isUndefined(currencySymbol)) {
      currencySymbol = formats.CURRENCY_SYM;
    }

    if (isUndefined(fractionSize)) {
      fractionSize = formats.PATTERNS[1].maxFrac;
    }

    // if null or undefined pass it through
    return (amount == null)
        ? amount
        : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).
            replace(/\u00A4/g, currencySymbol);
  };
}

/**
 * @ngdoc filter
 * @name number
 * @kind function
 *
 * @description
 * Formats a number as text.
 *
 * If the input is null or undefined, it will just be returned.
 * If the input is infinite (Infinity/-Infinity) the Infinity symbol '∞' is returned.
 * If the input is not a number an empty string is returned.
 *
 *
 * @param {number|string} number Number to format.
 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
 * If this is not provided then the fraction size is computed from the current locale's number
 * formatting pattern. In the case of the default locale, it will be 3.
 * @returns {string} Number rounded to fractionSize and places a “,” after each third digit.
 *
 * @example
   <example module="numberFilterExample">
     <file name="index.html">
       <script>
         angular.module('numberFilterExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.val = 1234.56789;
           }]);
       </script>
       <div ng-controller="ExampleController">
         <label>Enter number: <input ng-model='val'></label><br>
         Default formatting: <span id='number-default'>{{val | number}}</span><br>
         No fractions: <span>{{val | number:0}}</span><br>
         Negative number: <span>{{-val | number:4}}</span>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should format numbers', function() {
         expect(element(by.id('number-default')).getText()).toBe('1,234.568');
         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
       });

       it('should update', function() {
         element(by.model('val')).clear();
         element(by.model('val')).sendKeys('3374.333');
         expect(element(by.id('number-default')).getText()).toBe('3,374.333');
         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
      });
     </file>
   </example>
 */
numberFilter.$inject = ['$locale'];
function numberFilter($locale) {
  var formats = $locale.NUMBER_FORMATS;
  return function(number, fractionSize) {

    // if null or undefined pass it through
    return (number == null)
        ? number
        : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,
                       fractionSize);
  };
}

/**
 * Parse a number (as a string) into three components that can be used
 * for formatting the number.
 *
 * (Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/)
 *
 * @param  {string} numStr The number to parse
 * @return {object} An object describing this number, containing the following keys:
 *  - d : an array of digits containing leading zeros as necessary
 *  - i : the number of the digits in `d` that are to the left of the decimal point
 *  - e : the exponent for numbers that would need more than `MAX_DIGITS` digits in `d`
 *
 */
function parse(numStr) {
  var exponent = 0, digits, numberOfIntegerDigits;
  var i, j, zeros;

  // Decimal point?
  if ((numberOfIntegerDigits = numStr.indexOf(DECIMAL_SEP)) > -1) {
    numStr = numStr.replace(DECIMAL_SEP, '');
  }

  // Exponential form?
  if ((i = numStr.search(/e/i)) > 0) {
    // Work out the exponent.
    if (numberOfIntegerDigits < 0) numberOfIntegerDigits = i;
    numberOfIntegerDigits += +numStr.slice(i + 1);
    numStr = numStr.substring(0, i);
  } else if (numberOfIntegerDigits < 0) {
    // There was no decimal point or exponent so it is an integer.
    numberOfIntegerDigits = numStr.length;
  }

  // Count the number of leading zeros.
  for (i = 0; numStr.charAt(i) == ZERO_CHAR; i++);

  if (i == (zeros = numStr.length)) {
    // The digits are all zero.
    digits = [0];
    numberOfIntegerDigits = 1;
  } else {
    // Count the number of trailing zeros
    zeros--;
    while (numStr.charAt(zeros) == ZERO_CHAR) zeros--;

    // Trailing zeros are insignificant so ignore them
    numberOfIntegerDigits -= i;
    digits = [];
    // Convert string to array of digits without leading/trailing zeros.
    for (j = 0; i <= zeros; i++, j++) {
      digits[j] = +numStr.charAt(i);
    }
  }

  // If the number overflows the maximum allowed digits then use an exponent.
  if (numberOfIntegerDigits > MAX_DIGITS) {
    digits = digits.splice(0, MAX_DIGITS - 1);
    exponent = numberOfIntegerDigits - 1;
    numberOfIntegerDigits = 1;
  }

  return { d: digits, e: exponent, i: numberOfIntegerDigits };
}

/**
 * Round the parsed number to the specified number of decimal places
 * This function changed the parsedNumber in-place
 */
function roundNumber(parsedNumber, fractionSize, minFrac, maxFrac) {
    var digits = parsedNumber.d;
    var fractionLen = digits.length - parsedNumber.i;

    // determine fractionSize if it is not specified; `+fractionSize` converts it to a number
    fractionSize = (isUndefined(fractionSize)) ? Math.min(Math.max(minFrac, fractionLen), maxFrac) : +fractionSize;

    // The index of the digit to where rounding is to occur
    var roundAt = fractionSize + parsedNumber.i;
    var digit = digits[roundAt];

    if (roundAt > 0) {
      digits.splice(roundAt);
    } else {
      // We rounded to zero so reset the parsedNumber
      parsedNumber.i = 1;
      digits.length = roundAt = fractionSize + 1;
      for (var i=0; i < roundAt; i++) digits[i] = 0;
    }

    if (digit >= 5) digits[roundAt - 1]++;

    // Pad out with zeros to get the required fraction length
    for (; fractionLen < fractionSize; fractionLen++) digits.push(0);


    // Do any carrying, e.g. a digit was rounded up to 10
    var carry = digits.reduceRight(function(carry, d, i, digits) {
      d = d + carry;
      digits[i] = d % 10;
      return Math.floor(d / 10);
    }, 0);
    if (carry) {
      digits.unshift(carry);
      parsedNumber.i++;
    }
}

/**
 * Format a number into a string
 * @param  {number} number       The number to format
 * @param  {{
 *           minFrac, // the minimum number of digits required in the fraction part of the number
 *           maxFrac, // the maximum number of digits required in the fraction part of the number
 *           gSize,   // number of digits in each group of separated digits
 *           lgSize,  // number of digits in the last group of digits before the decimal separator
 *           negPre,  // the string to go in front of a negative number (e.g. `-` or `(`))
 *           posPre,  // the string to go in front of a positive number
 *           negSuf,  // the string to go after a negative number (e.g. `)`)
 *           posSuf   // the string to go after a positive number
 *         }} pattern
 * @param  {string} groupSep     The string to separate groups of number (e.g. `,`)
 * @param  {string} decimalSep   The string to act as the decimal separator (e.g. `.`)
 * @param  {[type]} fractionSize The size of the fractional part of the number
 * @return {string}              The number formatted as a string
 */
function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {

  if (!(isString(number) || isNumber(number)) || isNaN(number)) return '';

  var isInfinity = !isFinite(number);
  var isZero = false;
  var numStr = Math.abs(number) + '',
      formattedText = '',
      parsedNumber;

  if (isInfinity) {
    formattedText = '\u221e';
  } else {
    parsedNumber = parse(numStr);

    roundNumber(parsedNumber, fractionSize, pattern.minFrac, pattern.maxFrac);

    var digits = parsedNumber.d;
    var integerLen = parsedNumber.i;
    var exponent = parsedNumber.e;
    var decimals = [];
    isZero = digits.reduce(function(isZero, d) { return isZero && !d; }, true);

    // pad zeros for small numbers
    while (integerLen < 0) {
      digits.unshift(0);
      integerLen++;
    }

    // extract decimals digits
    if (integerLen > 0) {
      decimals = digits.splice(integerLen);
    } else {
      decimals = digits;
      digits = [0];
    }

    // format the integer digits with grouping separators
    var groups = [];
    if (digits.length > pattern.lgSize) {
      groups.unshift(digits.splice(-pattern.lgSize).join(''));
    }
    while (digits.length > pattern.gSize) {
      groups.unshift(digits.splice(-pattern.gSize).join(''));
    }
    if (digits.length) {
      groups.unshift(digits.join(''));
    }
    formattedText = groups.join(groupSep);

    // append the decimal digits
    if (decimals.length) {
      formattedText += decimalSep + decimals.join('');
    }

    if (exponent) {
      formattedText += 'e+' + exponent;
    }
  }
  if (number < 0 && !isZero) {
    return pattern.negPre + formattedText + pattern.negSuf;
  } else {
    return pattern.posPre + formattedText + pattern.posSuf;
  }
}

function padNumber(num, digits, trim) {
  var neg = '';
  if (num < 0) {
    neg =  '-';
    num = -num;
  }
  num = '' + num;
  while (num.length < digits) num = ZERO_CHAR + num;
  if (trim) {
    num = num.substr(num.length - digits);
  }
  return neg + num;
}


function dateGetter(name, size, offset, trim) {
  offset = offset || 0;
  return function(date) {
    var value = date['get' + name]();
    if (offset > 0 || value > -offset) {
      value += offset;
    }
    if (value === 0 && offset == -12) value = 12;
    return padNumber(value, size, trim);
  };
}

function dateStrGetter(name, shortForm) {
  return function(date, formats) {
    var value = date['get' + name]();
    var get = uppercase(shortForm ? ('SHORT' + name) : name);

    return formats[get][value];
  };
}

function timeZoneGetter(date, formats, offset) {
  var zone = -1 * offset;
  var paddedZone = (zone >= 0) ? "+" : "";

  paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +
                padNumber(Math.abs(zone % 60), 2);

  return paddedZone;
}

function getFirstThursdayOfYear(year) {
    // 0 = index of January
    var dayOfWeekOnFirst = (new Date(year, 0, 1)).getDay();
    // 4 = index of Thursday (+1 to account for 1st = 5)
    // 11 = index of *next* Thursday (+1 account for 1st = 12)
    return new Date(year, 0, ((dayOfWeekOnFirst <= 4) ? 5 : 12) - dayOfWeekOnFirst);
}

function getThursdayThisWeek(datetime) {
    return new Date(datetime.getFullYear(), datetime.getMonth(),
      // 4 = index of Thursday
      datetime.getDate() + (4 - datetime.getDay()));
}

function weekGetter(size) {
   return function(date) {
      var firstThurs = getFirstThursdayOfYear(date.getFullYear()),
         thisThurs = getThursdayThisWeek(date);

      var diff = +thisThurs - +firstThurs,
         result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week

      return padNumber(result, size);
   };
}

function ampmGetter(date, formats) {
  return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
}

function eraGetter(date, formats) {
  return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];
}

function longEraGetter(date, formats) {
  return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];
}

var DATE_FORMATS = {
  yyyy: dateGetter('FullYear', 4),
    yy: dateGetter('FullYear', 2, 0, true),
     y: dateGetter('FullYear', 1),
  MMMM: dateStrGetter('Month'),
   MMM: dateStrGetter('Month', true),
    MM: dateGetter('Month', 2, 1),
     M: dateGetter('Month', 1, 1),
    dd: dateGetter('Date', 2),
     d: dateGetter('Date', 1),
    HH: dateGetter('Hours', 2),
     H: dateGetter('Hours', 1),
    hh: dateGetter('Hours', 2, -12),
     h: dateGetter('Hours', 1, -12),
    mm: dateGetter('Minutes', 2),
     m: dateGetter('Minutes', 1),
    ss: dateGetter('Seconds', 2),
     s: dateGetter('Seconds', 1),
     // while ISO 8601 requires fractions to be prefixed with `.` or `,`
     // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions
   sss: dateGetter('Milliseconds', 3),
  EEEE: dateStrGetter('Day'),
   EEE: dateStrGetter('Day', true),
     a: ampmGetter,
     Z: timeZoneGetter,
    ww: weekGetter(2),
     w: weekGetter(1),
     G: eraGetter,
     GG: eraGetter,
     GGG: eraGetter,
     GGGG: longEraGetter
};

var DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,
    NUMBER_STRING = /^\-?\d+$/;

/**
 * @ngdoc filter
 * @name date
 * @kind function
 *
 * @description
 *   Formats `date` to a string based on the requested `format`.
 *
 *   `format` string can be composed of the following elements:
 *
 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
 *   * `'MMMM'`: Month in year (January-December)
 *   * `'MMM'`: Month in year (Jan-Dec)
 *   * `'MM'`: Month in year, padded (01-12)
 *   * `'M'`: Month in year (1-12)
 *   * `'dd'`: Day in month, padded (01-31)
 *   * `'d'`: Day in month (1-31)
 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
 *   * `'EEE'`: Day in Week, (Sun-Sat)
 *   * `'HH'`: Hour in day, padded (00-23)
 *   * `'H'`: Hour in day (0-23)
 *   * `'hh'`: Hour in AM/PM, padded (01-12)
 *   * `'h'`: Hour in AM/PM, (1-12)
 *   * `'mm'`: Minute in hour, padded (00-59)
 *   * `'m'`: Minute in hour (0-59)
 *   * `'ss'`: Second in minute, padded (00-59)
 *   * `'s'`: Second in minute (0-59)
 *   * `'sss'`: Millisecond in second, padded (000-999)
 *   * `'a'`: AM/PM marker
 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
 *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year
 *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year
 *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')
 *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')
 *
 *   `format` string can also be one of the following predefined
 *   {@link guide/i18n localizable formats}:
 *
 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
 *     (e.g. Sep 3, 2010 12:05:08 PM)
 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)
 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale
 *     (e.g. Friday, September 3, 2010)
 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)
 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)
 *
 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.
 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence
 *   (e.g. `"h 'o''clock'"`).
 *
 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its
 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
 *    specified in the string input, the time is considered to be in the local timezone.
 * @param {string=} format Formatting rules (see Description). If not specified,
 *    `mediumDate` is used.
 * @param {string=} timezone Timezone to be used for formatting. It understands UTC/GMT and the
 *    continental US time zone abbreviations, but for general use, use a time zone offset, for
 *    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
 *    If not specified, the timezone of the browser will be used.
 * @returns {string} Formatted string or the input if input is not recognized as date/millis.
 *
 * @example
   <example>
     <file name="index.html">
       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
           <span>{{1288323623006 | date:'medium'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:
          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>
     </file>
     <file name="protractor.js" type="protractor">
       it('should format date', function() {
         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);
         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).
            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);
       });
     </file>
   </example>
 */
dateFilter.$inject = ['$locale'];
function dateFilter($locale) {


  var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
                     // 1        2       3         4          5          6          7          8  9     10      11
  function jsonStringToDate(string) {
    var match;
    if (match = string.match(R_ISO8601_STR)) {
      var date = new Date(0),
          tzHour = 0,
          tzMin  = 0,
          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,
          timeSetter = match[8] ? date.setUTCHours : date.setHours;

      if (match[9]) {
        tzHour = toInt(match[9] + match[10]);
        tzMin = toInt(match[9] + match[11]);
      }
      dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
      var h = toInt(match[4] || 0) - tzHour;
      var m = toInt(match[5] || 0) - tzMin;
      var s = toInt(match[6] || 0);
      var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
      timeSetter.call(date, h, m, s, ms);
      return date;
    }
    return string;
  }


  return function(date, format, timezone) {
    var text = '',
        parts = [],
        fn, match;

    format = format || 'mediumDate';
    format = $locale.DATETIME_FORMATS[format] || format;
    if (isString(date)) {
      date = NUMBER_STRING.test(date) ? toInt(date) : jsonStringToDate(date);
    }

    if (isNumber(date)) {
      date = new Date(date);
    }

    if (!isDate(date) || !isFinite(date.getTime())) {
      return date;
    }

    while (format) {
      match = DATE_FORMATS_SPLIT.exec(format);
      if (match) {
        parts = concat(parts, match, 1);
        format = parts.pop();
      } else {
        parts.push(format);
        format = null;
      }
    }

    var dateTimezoneOffset = date.getTimezoneOffset();
    if (timezone) {
      dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
      date = convertTimezoneToLocal(date, timezone, true);
    }
    forEach(parts, function(value) {
      fn = DATE_FORMATS[value];
      text += fn ? fn(date, $locale.DATETIME_FORMATS, dateTimezoneOffset)
                 : value === "''" ? "'" : value.replace(/(^'|'$)/g, '').replace(/''/g, "'");
    });

    return text;
  };
}


/**
 * @ngdoc filter
 * @name json
 * @kind function
 *
 * @description
 *   Allows you to convert a JavaScript object into JSON string.
 *
 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
 *   the binding is automatically converted to JSON.
 *
 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
 * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.
 * @returns {string} JSON string.
 *
 *
 * @example
   <example>
     <file name="index.html">
       <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>
       <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>
     </file>
     <file name="protractor.js" type="protractor">
       it('should jsonify filtered objects', function() {
         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n  "name": ?"value"\n}/);
         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n    "name": ?"value"\n}/);
       });
     </file>
   </example>
 *
 */
function jsonFilter() {
  return function(object, spacing) {
    if (isUndefined(spacing)) {
        spacing = 2;
    }
    return toJson(object, spacing);
  };
}


/**
 * @ngdoc filter
 * @name lowercase
 * @kind function
 * @description
 * Converts string to lowercase.
 * @see angular.lowercase
 */
var lowercaseFilter = valueFn(lowercase);


/**
 * @ngdoc filter
 * @name uppercase
 * @kind function
 * @description
 * Converts string to uppercase.
 * @see angular.uppercase
 */
var uppercaseFilter = valueFn(uppercase);

/**
 * @ngdoc filter
 * @name limitTo
 * @kind function
 *
 * @description
 * Creates a new array or string containing only a specified number of elements. The elements
 * are taken from either the beginning or the end of the source array, string or number, as specified by
 * the value and sign (positive or negative) of `limit`. If a number is used as input, it is
 * converted to a string.
 *
 * @param {Array|string|number} input Source array, string or number to be limited.
 * @param {string|number} limit The length of the returned array or string. If the `limit` number
 *     is positive, `limit` number of items from the beginning of the source array/string are copied.
 *     If the number is negative, `limit` number  of items from the end of the source array/string
 *     are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,
 *     the input will be returned unchanged.
 * @param {(string|number)=} begin Index at which to begin limitation. As a negative index, `begin`
 *     indicates an offset from the end of `input`. Defaults to `0`.
 * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array
 *     had less than `limit` elements.
 *
 * @example
   <example module="limitToExample">
     <file name="index.html">
       <script>
         angular.module('limitToExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.numbers = [1,2,3,4,5,6,7,8,9];
             $scope.letters = "abcdefghi";
             $scope.longNumber = 2345432342;
             $scope.numLimit = 3;
             $scope.letterLimit = 3;
             $scope.longNumberLimit = 3;
           }]);
       </script>
       <div ng-controller="ExampleController">
         <label>
            Limit {{numbers}} to:
            <input type="number" step="1" ng-model="numLimit">
         </label>
         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
         <label>
            Limit {{letters}} to:
            <input type="number" step="1" ng-model="letterLimit">
         </label>
         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
         <label>
            Limit {{longNumber}} to:
            <input type="number" step="1" ng-model="longNumberLimit">
         </label>
         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       var numLimitInput = element(by.model('numLimit'));
       var letterLimitInput = element(by.model('letterLimit'));
       var longNumberLimitInput = element(by.model('longNumberLimit'));
       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));
       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));

       it('should limit the number array to first three items', function() {
         expect(numLimitInput.getAttribute('value')).toBe('3');
         expect(letterLimitInput.getAttribute('value')).toBe('3');
         expect(longNumberLimitInput.getAttribute('value')).toBe('3');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
         expect(limitedLetters.getText()).toEqual('Output letters: abc');
         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');
       });

       // There is a bug in safari and protractor that doesn't like the minus key
       // it('should update the output when -3 is entered', function() {
       //   numLimitInput.clear();
       //   numLimitInput.sendKeys('-3');
       //   letterLimitInput.clear();
       //   letterLimitInput.sendKeys('-3');
       //   longNumberLimitInput.clear();
       //   longNumberLimitInput.sendKeys('-3');
       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');
       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');
       // });

       it('should not exceed the maximum size of input array', function() {
         numLimitInput.clear();
         numLimitInput.sendKeys('100');
         letterLimitInput.clear();
         letterLimitInput.sendKeys('100');
         longNumberLimitInput.clear();
         longNumberLimitInput.sendKeys('100');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');
       });
     </file>
   </example>
*/
function limitToFilter() {
  return function(input, limit, begin) {
    if (Math.abs(Number(limit)) === Infinity) {
      limit = Number(limit);
    } else {
      limit = toInt(limit);
    }
    if (isNaN(limit)) return input;

    if (isNumber(input)) input = input.toString();
    if (!isArray(input) && !isString(input)) return input;

    begin = (!begin || isNaN(begin)) ? 0 : toInt(begin);
    begin = (begin < 0) ? Math.max(0, input.length + begin) : begin;

    if (limit >= 0) {
      return input.slice(begin, begin + limit);
    } else {
      if (begin === 0) {
        return input.slice(limit, input.length);
      } else {
        return input.slice(Math.max(0, begin + limit), begin);
      }
    }
  };
}

/**
 * @ngdoc filter
 * @name orderBy
 * @kind function
 *
 * @description
 * Orders a specified `array` by the `expression` predicate. It is ordered alphabetically
 * for strings and numerically for numbers. Note: if you notice numbers are not being sorted
 * as expected, make sure they are actually being saved as numbers and not strings.
 * Array-like values (e.g. NodeLists, jQuery objects, TypedArrays, Strings, etc) are also supported.
 *
 * @param {Array} array The array (or array-like object) to sort.
 * @param {function(*)|string|Array.<(function(*)|string)>=} expression A predicate to be
 *    used by the comparator to determine the order of elements.
 *
 *    Can be one of:
 *
 *    - `function`: Getter function. The result of this function will be sorted using the
 *      `<`, `===`, `>` operator.
 *    - `string`: An Angular expression. The result of this expression is used to compare elements
 *      (for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by
 *      3 first characters of a property called `name`). The result of a constant expression
 *      is interpreted as a property name to be used in comparisons (for example `"special name"`
 *      to sort object by the value of their `special name` property). An expression can be
 *      optionally prefixed with `+` or `-` to control ascending or descending sort order
 *      (for example, `+name` or `-name`). If no property is provided, (e.g. `'+'`) then the array
 *      element itself is used to compare where sorting.
 *    - `Array`: An array of function or string predicates. The first predicate in the array
 *      is used for sorting, but when two items are equivalent, the next predicate is used.
 *
 *    If the predicate is missing or empty then it defaults to `'+'`.
 *
 * @param {boolean=} reverse Reverse the order of the array.
 * @returns {Array} Sorted copy of the source array.
 *
 *
 * @example
 * The example below demonstrates a simple ngRepeat, where the data is sorted
 * by age in descending order (predicate is set to `'-age'`).
 * `reverse` is not set, which means it defaults to `false`.
   <example module="orderByExample">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <table class="friend">
           <tr>
             <th>Name</th>
             <th>Phone Number</th>
             <th>Age</th>
           </tr>
           <tr ng-repeat="friend in friends | orderBy:'-age'">
             <td>{{friend.name}}</td>
             <td>{{friend.phone}}</td>
             <td>{{friend.age}}</td>
           </tr>
         </table>
       </div>
     </file>
     <file name="script.js">
       angular.module('orderByExample', [])
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.friends =
               [{name:'John', phone:'555-1212', age:10},
                {name:'Mary', phone:'555-9876', age:19},
                {name:'Mike', phone:'555-4321', age:21},
                {name:'Adam', phone:'555-5678', age:35},
                {name:'Julie', phone:'555-8765', age:29}];
         }]);
     </file>
   </example>
 *
 * The predicate and reverse parameters can be controlled dynamically through scope properties,
 * as shown in the next example.
 * @example
   <example module="orderByExample">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>
         <hr/>
         <button ng-click="predicate=''">Set to unsorted</button>
         <table class="friend">
           <tr>
            <th>
                <button ng-click="order('name')">Name</button>
                <span class="sortorder" ng-show="predicate === 'name'" ng-class="{reverse:reverse}"></span>
            </th>
            <th>
                <button ng-click="order('phone')">Phone Number</button>
                <span class="sortorder" ng-show="predicate === 'phone'" ng-class="{reverse:reverse}"></span>
            </th>
            <th>
                <button ng-click="order('age')">Age</button>
                <span class="sortorder" ng-show="predicate === 'age'" ng-class="{reverse:reverse}"></span>
            </th>
           </tr>
           <tr ng-repeat="friend in friends | orderBy:predicate:reverse">
             <td>{{friend.name}}</td>
             <td>{{friend.phone}}</td>
             <td>{{friend.age}}</td>
           </tr>
         </table>
       </div>
     </file>
     <file name="script.js">
       angular.module('orderByExample', [])
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.friends =
               [{name:'John', phone:'555-1212', age:10},
                {name:'Mary', phone:'555-9876', age:19},
                {name:'Mike', phone:'555-4321', age:21},
                {name:'Adam', phone:'555-5678', age:35},
                {name:'Julie', phone:'555-8765', age:29}];
           $scope.predicate = 'age';
           $scope.reverse = true;
           $scope.order = function(predicate) {
             $scope.reverse = ($scope.predicate === predicate) ? !$scope.reverse : false;
             $scope.predicate = predicate;
           };
         }]);
      </file>
     <file name="style.css">
       .sortorder:after {
         content: '\25b2';
       }
       .sortorder.reverse:after {
         content: '\25bc';
       }
     </file>
   </example>
 *
 * It's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the
 * filter routine with `$filter('orderBy')`, and calling the returned filter routine with the
 * desired parameters.
 *
 * Example:
 *
 * @example
  <example module="orderByExample">
    <file name="index.html">
    <div ng-controller="ExampleController">
      <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>
      <table class="friend">
        <tr>
          <th>
              <button ng-click="order('name')">Name</button>
              <span class="sortorder" ng-show="predicate === 'name'" ng-class="{reverse:reverse}"></span>
          </th>
          <th>
              <button ng-click="order('phone')">Phone Number</button>
              <span class="sortorder" ng-show="predicate === 'phone'" ng-class="{reverse:reverse}"></span>
          </th>
          <th>
              <button ng-click="order('age')">Age</button>
              <span class="sortorder" ng-show="predicate === 'age'" ng-class="{reverse:reverse}"></span>
          </th>
        </tr>
        <tr ng-repeat="friend in friends">
          <td>{{friend.name}}</td>
          <td>{{friend.phone}}</td>
          <td>{{friend.age}}</td>
        </tr>
      </table>
    </div>
    </file>

    <file name="script.js">
      angular.module('orderByExample', [])
        .controller('ExampleController', ['$scope', '$filter', function($scope, $filter) {
          var orderBy = $filter('orderBy');
          $scope.friends = [
            { name: 'John',    phone: '555-1212',    age: 10 },
            { name: 'Mary',    phone: '555-9876',    age: 19 },
            { name: 'Mike',    phone: '555-4321',    age: 21 },
            { name: 'Adam',    phone: '555-5678',    age: 35 },
            { name: 'Julie',   phone: '555-8765',    age: 29 }
          ];
          $scope.order = function(predicate) {
            $scope.predicate = predicate;
            $scope.reverse = ($scope.predicate === predicate) ? !$scope.reverse : false;
            $scope.friends = orderBy($scope.friends, predicate, $scope.reverse);
          };
          $scope.order('age', true);
        }]);
    </file>

    <file name="style.css">
       .sortorder:after {
         content: '\25b2';
       }
       .sortorder.reverse:after {
         content: '\25bc';
       }
    </file>
</example>
 */
orderByFilter.$inject = ['$parse'];
function orderByFilter($parse) {
  return function(array, sortPredicate, reverseOrder) {

    if (array == null) return array;
    if (!isArrayLike(array)) {
      throw minErr('orderBy')('notarray', 'Expected array but received: {0}', array);
    }

    if (!isArray(sortPredicate)) { sortPredicate = [sortPredicate]; }
    if (sortPredicate.length === 0) { sortPredicate = ['+']; }

    var predicates = processPredicates(sortPredicate, reverseOrder);
    // Add a predicate at the end that evaluates to the element index. This makes the
    // sort stable as it works as a tie-breaker when all the input predicates cannot
    // distiClientsh between two elements.
    predicates.push({ get: function() { return {}; }, descending: reverseOrder ? -1 : 1});

    // The next three lines are a version of a Swartzian Transform idiom from Perl
    // (sometimes called the Decorate-Sort-Undecorate idiom)
    // See https://en.wikipedia.org/wiki/Schwartzian_transform
    var compareValues = Array.prototype.map.call(array, getComparisonObject);
    compareValues.sort(doComparison);
    array = compareValues.map(function(item) { return item.value; });

    return array;

    function getComparisonObject(value, index) {
      return {
        value: value,
        predicateValues: predicates.map(function(predicate) {
          return getPredicateValue(predicate.get(value), index);
        })
      };
    }

    function doComparison(v1, v2) {
      var result = 0;
      for (var index=0, length = predicates.length; index < length; ++index) {
        result = compare(v1.predicateValues[index], v2.predicateValues[index]) * predicates[index].descending;
        if (result) break;
      }
      return result;
    }
  };

  function processPredicates(sortPredicate, reverseOrder) {
    reverseOrder = reverseOrder ? -1 : 1;
    return sortPredicate.map(function(predicate) {
      var descending = 1, get = identity;

      if (isFunction(predicate)) {
        get = predicate;
      } else if (isString(predicate)) {
        if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {
          descending = predicate.charAt(0) == '-' ? -1 : 1;
          predicate = predicate.substring(1);
        }
        if (predicate !== '') {
          get = $parse(predicate);
          if (get.constant) {
            var key = get();
            get = function(value) { return value[key]; };
          }
        }
      }
      return { get: get, descending: descending * reverseOrder };
    });
  }

  function isPrimitive(value) {
    switch (typeof value) {
      case 'number': /* falls through */
      case 'boolean': /* falls through */
      case 'string':
        return true;
      default:
        return false;
    }
  }

  function objectValue(value, index) {
    // If `valueOf` is a valid function use that
    if (typeof value.valueOf === 'function') {
      value = value.valueOf();
      if (isPrimitive(value)) return value;
    }
    // If `toString` is a valid function and not the one from `Object.prototype` use that
    if (hasCustomToString(value)) {
      value = value.toString();
      if (isPrimitive(value)) return value;
    }
    // We have a basic object so we use the position of the object in the collection
    return index;
  }

  function getPredicateValue(value, index) {
    var type = typeof value;
    if (value === null) {
      type = 'string';
      value = 'null';
    } else if (type === 'string') {
      value = value.toLowerCase();
    } else if (type === 'object') {
      value = objectValue(value, index);
    }
    return { value: value, type: type };
  }

  function compare(v1, v2) {
    var result = 0;
    if (v1.type === v2.type) {
      if (v1.value !== v2.value) {
        result = v1.value < v2.value ? -1 : 1;
      }
    } else {
      result = v1.type < v2.type ? -1 : 1;
    }
    return result;
  }
}

function ngDirective(directive) {
  if (isFunction(directive)) {
    directive = {
      link: directive
    };
  }
  directive.restrict = directive.restrict || 'AC';
  return valueFn(directive);
}

/**
 * @ngdoc directive
 * @name a
 * @restrict E
 *
 * @description
 * Modifies the default behavior of the html A tag so that the default action is prevented when
 * the href attribute is empty.
 *
 * This change permits the easy creation of action links with the `ngClick` directive
 * without changing the location or causing page reloads, e.g.:
 * `<a href="" ng-click="list.addItem()">Add Item</a>`
 */
var htmlAnchorDirective = valueFn({
  restrict: 'E',
  compile: function(element, attr) {
    if (!attr.href && !attr.xlinkHref) {
      return function(scope, element) {
        // If the linked element is not an anchor tag anymore, do nothing
        if (element[0].nodeName.toLowerCase() !== 'a') return;

        // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
        var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?
                   'xlink:href' : 'href';
        element.on('click', function(event) {
          // if we have no href url, then don't navigate anywhere.
          if (!element.attr(href)) {
            event.preventDefault();
          }
        });
      };
    }
  }
});

/**
 * @ngdoc directive
 * @name ngHref
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in an href attribute will
 * make the link go to the wrong URL if the user clicks it before
 * Angular has a chance to replace the `{{hash}}` markup with its
 * value. Until Angular replaces the markup the link will be broken
 * and will most likely return a 404 error. The `ngHref` directive
 * solves this problem.
 *
 * The wrong way to write it:
 * ```html
 * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
 * ```
 *
 * @element A
 * @param {template} ngHref any string which can contain `{{}}` markup.
 *
 * @example
 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
 * in links and their different behaviors:
    <example>
      <file name="index.html">
        <input ng-model="value" /><br />
        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
      </file>
      <file name="protractor.js" type="protractor">
        it('should execute ng-click but not reload when href without value', function() {
          element(by.id('link-1')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('1');
          expect(element(by.id('link-1')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click but not reload when href empty string', function() {
          element(by.id('link-2')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('2');
          expect(element(by.id('link-2')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click and change url when ng-href specified', function() {
          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);

          element(by.id('link-3')).click();

          // At this point, we navigate away from an Angular page, so we need
          // to use browser.driver to get the base webdriver.

          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/123$/);
            });
          }, 5000, 'page should navigate to /123');
        });

        it('should execute ng-click but not reload when href empty string and name specified', function() {
          element(by.id('link-4')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('4');
          expect(element(by.id('link-4')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click but not reload when no href but name specified', function() {
          element(by.id('link-5')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('5');
          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
        });

        it('should only change url when only ng-href', function() {
          element(by.model('value')).clear();
          element(by.model('value')).sendKeys('6');
          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);

          element(by.id('link-6')).click();

          // At this point, we navigate away from an Angular page, so we need
          // to use browser.driver to get the base webdriver.
          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/6$/);
            });
          }, 5000, 'page should navigate to /6');
        });
      </file>
    </example>
 */

/**
 * @ngdoc directive
 * @name ngSrc
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
 * work right: The browser will fetch from the URL with the literal
 * text `{{hash}}` until Angular replaces the expression inside
 * `{{hash}}`. The `ngSrc` directive solves this problem.
 *
 * The buggy way to write it:
 * ```html
 * <img src="http://www.gravatar.com/avatar/{{hash}}" alt="Description"/>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}" alt="Description" />
 * ```
 *
 * @element IMG
 * @param {template} ngSrc any string which can contain `{{}}` markup.
 */

/**
 * @ngdoc directive
 * @name ngSrcset
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
 * work right: The browser will fetch from the URL with the literal
 * text `{{hash}}` until Angular replaces the expression inside
 * `{{hash}}`. The `ngSrcset` directive solves this problem.
 *
 * The buggy way to write it:
 * ```html
 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description"/>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description" />
 * ```
 *
 * @element IMG
 * @param {template} ngSrcset any string which can contain `{{}}` markup.
 */

/**
 * @ngdoc directive
 * @name ngDisabled
 * @restrict A
 * @priority 100
 *
 * @description
 *
 * This directive sets the `disabled` attribute on the element if the
 * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.
 *
 * A special directive is necessary because we cannot use interpolation inside the `disabled`
 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
 *
 * @example
    <example>
      <file name="index.html">
        <label>Click me to toggle: <input type="checkbox" ng-model="checked"></label><br/>
        <button ng-model="button" ng-disabled="checked">Button</button>
      </file>
      <file name="protractor.js" type="protractor">
        it('should toggle button', function() {
          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
 *     then the `disabled` attribute will be set on the element
 */


/**
 * @ngdoc directive
 * @name ngChecked
 * @restrict A
 * @priority 100
 *
 * @description
 * Sets the `checked` attribute on the element, if the expression inside `ngChecked` is truthy.
 *
 * Note that this directive should not be used together with {@link ngModel `ngModel`},
 * as this can lead to unexpected behavior.
 *
 * A special directive is necessary because we cannot use interpolation inside the `checked`
 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
 *
 * @example
    <example>
      <file name="index.html">
        <label>Check me to check both: <input type="checkbox" ng-model="master"></label><br/>
        <input id="checkSlave" type="checkbox" ng-checked="master" aria-label="Slave input">
      </file>
      <file name="protractor.js" type="protractor">
        it('should check both checkBoxes', function() {
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();
          element(by.model('master')).click();
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
 *     then the `checked` attribute will be set on the element
 */


/**
 * @ngdoc directive
 * @name ngReadonly
 * @restrict A
 * @priority 100
 *
 * @description
 *
 * Sets the `readOnly` attribute on the element, if the expression inside `ngReadonly` is truthy.
 *
 * A special directive is necessary because we cannot use interpolation inside the `readOnly`
 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
 *
 * @example
    <example>
      <file name="index.html">
        <label>Check me to make text readonly: <input type="checkbox" ng-model="checked"></label><br/>
        <input type="text" ng-readonly="checked" value="I'm Angular" aria-label="Readonly field" />
      </file>
      <file name="protractor.js" type="protractor">
        it('should toggle readonly attr', function() {
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
 *     then special attribute "readonly" will be set on the element
 */


/**
 * @ngdoc directive
 * @name ngSelected
 * @restrict A
 * @priority 100
 *
 * @description
 *
 * Sets the `selected` attribute on the element, if the expression inside `ngSelected` is truthy.
 *
 * A special directive is necessary because we cannot use interpolation inside the `selected`
 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
 *
 * @example
    <example>
      <file name="index.html">
        <label>Check me to select: <input type="checkbox" ng-model="selected"></label><br/>
        <select aria-label="ngSelected demo">
          <option>Hello!</option>
          <option id="greet" ng-selected="selected">Greetings!</option>
        </select>
      </file>
      <file name="protractor.js" type="protractor">
        it('should select Greetings!', function() {
          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
          element(by.model('selected')).click();
          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element OPTION
 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
 *     then special attribute "selected" will be set on the element
 */

/**
 * @ngdoc directive
 * @name ngOpen
 * @restrict A
 * @priority 100
 *
 * @description
 *
 * Sets the `open` attribute on the element, if the expression inside `ngOpen` is truthy.
 *
 * A special directive is necessary because we cannot use interpolation inside the `open`
 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
 *
 * @example
     <example>
       <file name="index.html">
         <label>Check me check multiple: <input type="checkbox" ng-model="open"></label><br/>
         <details id="details" ng-open="open">
            <summary>Show/Hide me</summary>
         </details>
       </file>
       <file name="protractor.js" type="protractor">
         it('should toggle open', function() {
           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
           element(by.model('open')).click();
           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
         });
       </file>
     </example>
 *
 * @element DETAILS
 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
 *     then special attribute "open" will be set on the element
 */

var ngAttributeAliasDirectives = {};

// boolean attrs are evaluated
forEach(BOOLEAN_ATTR, function(propName, attrName) {
  // binding to multiple is not supported
  if (propName == "multiple") return;

  function defaultLinkFn(scope, element, attr) {
    scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
      attr.$set(attrName, !!value);
    });
  }

  var normalized = directiveNormalize('ng-' + attrName);
  var linkFn = defaultLinkFn;

  if (propName === 'checked') {
    linkFn = function(scope, element, attr) {
      // ensuring ngChecked doesn't interfere with ngModel when both are set on the same input
      if (attr.ngModel !== attr[normalized]) {
        defaultLinkFn(scope, element, attr);
      }
    };
  }

  ngAttributeAliasDirectives[normalized] = function() {
    return {
      restrict: 'A',
      priority: 100,
      link: linkFn
    };
  };
});

// aliased input attrs are evaluated
forEach(ALIASED_ATTR, function(htmlAttr, ngAttr) {
  ngAttributeAliasDirectives[ngAttr] = function() {
    return {
      priority: 100,
      link: function(scope, element, attr) {
        //special case ngPattern when a literal regular expression value
        //is used as the expression (this way we don't have to watch anything).
        if (ngAttr === "ngPattern" && attr.ngPattern.charAt(0) == "/") {
          var match = attr.ngPattern.match(REGEX_STRING_REGEXP);
          if (match) {
            attr.$set("ngPattern", new RegExp(match[1], match[2]));
            return;
          }
        }

        scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {
          attr.$set(ngAttr, value);
        });
      }
    };
  };
});

// ng-src, ng-srcset, ng-href are interpolated
forEach(['src', 'srcset', 'href'], function(attrName) {
  var normalized = directiveNormalize('ng-' + attrName);
  ngAttributeAliasDirectives[normalized] = function() {
    return {
      priority: 99, // it needs to run after the attributes are interpolated
      link: function(scope, element, attr) {
        var propName = attrName,
            name = attrName;

        if (attrName === 'href' &&
            toString.call(element.prop('href')) === '[object SVGAnimatedString]') {
          name = 'xlinkHref';
          attr.$attr[name] = 'xlink:href';
          propName = null;
        }

        attr.$observe(normalized, function(value) {
          if (!value) {
            if (attrName === 'href') {
              attr.$set(name, null);
            }
            return;
          }

          attr.$set(name, value);

          // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
          // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
          // to set the property as well to achieve the desired effect.
          // we use attr[attrName] value since $set can sanitize the url.
          if (msie && propName) element.prop(propName, attr[name]);
        });
      }
    };
  };
});

/* global -nullFormCtrl, -SUBMITTED_CLASS, addSetValidityMethod: true
 */
var nullFormCtrl = {
  $addControl: noop,
  $$renameControl: nullFormRenameControl,
  $removeControl: noop,
  $setValidity: noop,
  $setDirty: noop,
  $setPristine: noop,
  $setSubmitted: noop
},
SUBMITTED_CLASS = 'ng-submitted';

function nullFormRenameControl(control, name) {
  control.$name = name;
}

/**
 * @ngdoc type
 * @name form.FormController
 *
 * @property {boolean} $pristine True if user has not interacted with the form yet.
 * @property {boolean} $dirty True if user has already interacted with the form.
 * @property {boolean} $valid True if all of the containing forms and controls are valid.
 * @property {boolean} $invalid True if at least one containing control or form is invalid.
 * @property {boolean} $pending True if at least one containing control or form is pending.
 * @property {boolean} $submitted True if user has submitted the form even if its invalid.
 *
 * @property {Object} $error Is an object hash, containing references to controls or
 *  forms with failing validators, where:
 *
 *  - keys are validation tokens (error names),
 *  - values are arrays of controls or forms that have a failing validator for given error name.
 *
 *  Built-in validation tokens:
 *
 *  - `email`
 *  - `max`
 *  - `maxlength`
 *  - `min`
 *  - `minlength`
 *  - `number`
 *  - `pattern`
 *  - `required`
 *  - `url`
 *  - `date`
 *  - `datetimelocal`
 *  - `time`
 *  - `week`
 *  - `month`
 *
 * @description
 * `FormController` keeps track of all its controls and nested forms as well as the state of them,
 * such as being valid/invalid or dirty/pristine.
 *
 * Each {@link ng.directive:form form} directive creates an instance
 * of `FormController`.
 *
 */
//asks for $scope to fool the BC controller module
FormController.$inject = ['$element', '$attrs', '$scope', '$animate', '$interpolate'];
function FormController(element, attrs, $scope, $animate, $interpolate) {
  var form = this,
      controls = [];

  // init state
  form.$error = {};
  form.$$success = {};
  form.$pending = undefined;
  form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);
  form.$dirty = false;
  form.$pristine = true;
  form.$valid = true;
  form.$invalid = false;
  form.$submitted = false;
  form.$$parentForm = nullFormCtrl;

  /**
   * @ngdoc method
   * @name form.FormController#$rollbackViewValue
   *
   * @description
   * Rollback all form controls pending updates to the `$modelValue`.
   *
   * Updates may be pending by a debounced event or because the input is waiting for a some future
   * event defined in `ng-model-options`. This method is typically needed by the reset button of
   * a form that uses `ng-model-options` to pend updates.
   */
  form.$rollbackViewValue = function() {
    forEach(controls, function(control) {
      control.$rollbackViewValue();
    });
  };

  /**
   * @ngdoc method
   * @name form.FormController#$commitViewValue
   *
   * @description
   * Commit all form controls pending updates to the `$modelValue`.
   *
   * Updates may be pending by a debounced event or because the input is waiting for a some future
   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`
   * usually handles calling this in response to input events.
   */
  form.$commitViewValue = function() {
    forEach(controls, function(control) {
      control.$commitViewValue();
    });
  };

  /**
   * @ngdoc method
   * @name form.FormController#$addControl
   * @param {object} control control object, either a {@link form.FormController} or an
   * {@link ngModel.NgModelController}
   *
   * @description
   * Register a control with the form. Input elements using ngModelController do this automatically
   * when they are linked.
   *
   * Note that the current state of the control will not be reflected on the new parent form. This
   * is not an issue with normal use, as freshly compiled and linked controls are in a `$pristine`
   * state.
   *
   * However, if the method is used programmatically, for example by adding dynamically created controls,
   * or controls that have been previously removed without destroying their corresponding DOM element,
   * it's the developers responsibility to make sure the current state propagates to the parent form.
   *
   * For example, if an input control is added that is already `$dirty` and has `$error` properties,
   * calling `$setDirty()` and `$validate()` afterwards will propagate the state to the parent form.
   */
  form.$addControl = function(control) {
    // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
    // and not added to the scope.  Now we throw an error.
    assertNotHasOwnProperty(control.$name, 'input');
    controls.push(control);

    if (control.$name) {
      form[control.$name] = control;
    }

    control.$$parentForm = form;
  };

  // Private API: rename a form control
  form.$$renameControl = function(control, newName) {
    var oldName = control.$name;

    if (form[oldName] === control) {
      delete form[oldName];
    }
    form[newName] = control;
    control.$name = newName;
  };

  /**
   * @ngdoc method
   * @name form.FormController#$removeControl
   * @param {object} control control object, either a {@link form.FormController} or an
   * {@link ngModel.NgModelController}
   *
   * @description
   * Deregister a control from the form.
   *
   * Input elements using ngModelController do this automatically when they are destroyed.
   *
   * Note that only the removed control's validation state (`$errors`etc.) will be removed from the
   * form. `$dirty`, `$submitted` states will not be changed, because the expected behavior can be
   * different from case to case. For example, removing the only `$dirty` control from a form may or
   * may not mean that the form is still `$dirty`.
   */
  form.$removeControl = function(control) {
    if (control.$name && form[control.$name] === control) {
      delete form[control.$name];
    }
    forEach(form.$pending, function(value, name) {
      form.$setValidity(name, null, control);
    });
    forEach(form.$error, function(value, name) {
      form.$setValidity(name, null, control);
    });
    forEach(form.$$success, function(value, name) {
      form.$setValidity(name, null, control);
    });

    arrayRemove(controls, control);
    control.$$parentForm = nullFormCtrl;
  };


  /**
   * @ngdoc method
   * @name form.FormController#$setValidity
   *
   * @description
   * Sets the validity of a form control.
   *
   * This method will also propagate to parent forms.
   */
  addSetValidityMethod({
    ctrl: this,
    $element: element,
    set: function(object, property, controller) {
      var list = object[property];
      if (!list) {
        object[property] = [controller];
      } else {
        var index = list.indexOf(controller);
        if (index === -1) {
          list.push(controller);
        }
      }
    },
    unset: function(object, property, controller) {
      var list = object[property];
      if (!list) {
        return;
      }
      arrayRemove(list, controller);
      if (list.length === 0) {
        delete object[property];
      }
    },
    $animate: $animate
  });

  /**
   * @ngdoc method
   * @name form.FormController#$setDirty
   *
   * @description
   * Sets the form to a dirty state.
   *
   * This method can be called to add the 'ng-dirty' class and set the form to a dirty
   * state (ng-dirty class). This method will also propagate to parent forms.
   */
  form.$setDirty = function() {
    $animate.removeClass(element, PRISTINE_CLASS);
    $animate.addClass(element, DIRTY_CLASS);
    form.$dirty = true;
    form.$pristine = false;
    form.$$parentForm.$setDirty();
  };

  /**
   * @ngdoc method
   * @name form.FormController#$setPristine
   *
   * @description
   * Sets the form to its pristine state.
   *
   * This method can be called to remove the 'ng-dirty' class and set the form to its pristine
   * state (ng-pristine class). This method will also propagate to all the controls contained
   * in this form.
   *
   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
   * saving or resetting it.
   */
  form.$setPristine = function() {
    $animate.setClass(element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);
    form.$dirty = false;
    form.$pristine = true;
    form.$submitted = false;
    forEach(controls, function(control) {
      control.$setPristine();
    });
  };

  /**
   * @ngdoc method
   * @name form.FormController#$setUntouched
   *
   * @description
   * Sets the form to its untouched state.
   *
   * This method can be called to remove the 'ng-touched' class and set the form controls to their
   * untouched state (ng-untouched class).
   *
   * Setting a form controls back to their untouched state is often useful when setting the form
   * back to its pristine state.
   */
  form.$setUntouched = function() {
    forEach(controls, function(control) {
      control.$setUntouched();
    });
  };

  /**
   * @ngdoc method
   * @name form.FormController#$setSubmitted
   *
   * @description
   * Sets the form to its submitted state.
   */
  form.$setSubmitted = function() {
    $animate.addClass(element, SUBMITTED_CLASS);
    form.$submitted = true;
    form.$$parentForm.$setSubmitted();
  };
}

/**
 * @ngdoc directive
 * @name ngForm
 * @restrict EAC
 *
 * @description
 * Nestable alias of {@link ng.directive:form `form`} directive. HTML
 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
 * sub-group of controls needs to be determined.
 *
 * Note: the purpose of `ngForm` is to group controls,
 * but not to be a replacement for the `<form>` tag with all of its capabilities
 * (e.g. posting to the server, ...).
 *
 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
 *                       related scope, under this name.
 *
 */

 /**
 * @ngdoc directive
 * @name form
 * @restrict E
 *
 * @description
 * Directive that instantiates
 * {@link form.FormController FormController}.
 *
 * If the `name` attribute is specified, the form controller is published onto the current scope under
 * this name.
 *
 * # Alias: {@link ng.directive:ngForm `ngForm`}
 *
 * In Angular, forms can be nested. This means that the outer form is valid when all of the child
 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive, which behaves identically to
 * `form` but can be nested. Nested forms can be useful, for example, if the validity of a sub-group
 * of controls needs to be determined.
 *
 * # CSS classes
 *  - `ng-valid` is set if the form is valid.
 *  - `ng-invalid` is set if the form is invalid.
 *  - `ng-pending` is set if the form is pending.
 *  - `ng-pristine` is set if the form is pristine.
 *  - `ng-dirty` is set if the form is dirty.
 *  - `ng-submitted` is set if the form was submitted.
 *
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
 *
 *
 * # Submitting a form and preventing the default action
 *
 * Since the role of forms in client-side Angular applications is different than in classical
 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
 * page reload that sends the data to the server. Instead some javascript logic should be triggered
 * to handle the form submission in an application-specific way.
 *
 * For this reason, Angular prevents the default action (form submission to the server) unless the
 * `<form>` element has an `action` attribute specified.
 *
 * You can use one of the following two ways to specify what javascript method should be called when
 * a form is submitted:
 *
 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
 * - {@link ng.directive:ngClick ngClick} directive on the first
  *  button or input field of type submit (input[type=submit])
 *
 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
 * or {@link ng.directive:ngClick ngClick} directives.
 * This is because of the following form submission rules in the HTML specification:
 *
 * - If a form has only one input field then hitting enter in this field triggers form submit
 * (`ngSubmit`)
 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
 * doesn't trigger submit
 * - if a form has one or more input fields and one or more buttons or input[type=submit] then
 * hitting enter in any of the input fields will trigger the click handler on the *first* button or
 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
 *
 * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is
 * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
 * to have access to the updated model.
 *
 * ## Animation Hooks
 *
 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
 * other validations that are performed within the form. Animations in ngForm are similar to how
 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
 * as JS animations.
 *
 * The following example shows a simple way to utilize CSS transitions to style a form element
 * that has been rendered as invalid after it has been validated:
 *
 * <pre>
 * //be sure to include ngAnimate as a module to hook into more
 * //advanced animations
 * .my-form {
 *   transition:0.5s linear all;
 *   background: white;
 * }
 * .my-form.ng-invalid {
 *   background: red;
 *   color:white;
 * }
 * </pre>
 *
 * @example
    <example deps="angular-animate.js" animations="true" fixBase="true" module="formExample">
      <file name="index.html">
       <script>
         angular.module('formExample', [])
           .controller('FormController', ['$scope', function($scope) {
             $scope.userType = 'guest';
           }]);
       </script>
       <style>
        .my-form {
          transition:all linear 0.5s;
          background: transparent;
        }
        .my-form.ng-invalid {
          background: red;
        }
       </style>
       <form name="myForm" ng-controller="FormController" class="my-form">
         userType: <input name="input" ng-model="userType" required>
         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
         <code>userType = {{userType}}</code><br>
         <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>
         <code>myForm.input.$error = {{myForm.input.$error}}</code><br>
         <code>myForm.$valid = {{myForm.$valid}}</code><br>
         <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>
        </form>
      </file>
      <file name="protractor.js" type="protractor">
        it('should initialize to model', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));

          expect(userType.getText()).toContain('guest');
          expect(valid.getText()).toContain('true');
        });

        it('should be invalid if empty', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));
          var userInput = element(by.model('userType'));

          userInput.clear();
          userInput.sendKeys('');

          expect(userType.getText()).toEqual('userType =');
          expect(valid.getText()).toContain('false');
        });
      </file>
    </example>
 *
 * @param {string=} name Name of the form. If specified, the form controller will be published into
 *                       related scope, under this name.
 */
var formDirectiveFactory = function(isNgForm) {
  return ['$timeout', '$parse', function($timeout, $parse) {
    var formDirective = {
      name: 'form',
      restrict: isNgForm ? 'EAC' : 'E',
      require: ['form', '^^?form'], //first is the form's own ctrl, second is an optional parent form
      controller: FormController,
      compile: function ngFormCompile(formElement, attr) {
        // Setup initial state of the control
        formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);

        var nameAttr = attr.name ? 'name' : (isNgForm && attr.ngForm ? 'ngForm' : false);

        return {
          pre: function ngFormPreLink(scope, formElement, attr, ctrls) {
            var controller = ctrls[0];

            // if `action` attr is not present on the form, prevent the default action (submission)
            if (!('action' in attr)) {
              // we can't use jq events because if a form is destroyed during submission the default
              // action is not prevented. see #1238
              //
              // IE 9 is not affected because it doesn't fire a submit event and try to do a full
              // page reload if the form was destroyed by submission of the form via a click handler
              // on a button in the form. Looks like an IE9 specific bug.
              var handleFormSubmission = function(event) {
                scope.$apply(function() {
                  controller.$commitViewValue();
                  controller.$setSubmitted();
                });

                event.preventDefault();
              };

              addEventListenerFn(formElement[0], 'submit', handleFormSubmission);

              // unregister the preventDefault listener so that we don't not leak memory but in a
              // way that will achieve the prevention of the default action.
              formElement.on('$destroy', function() {
                $timeout(function() {
                  removeEventListenerFn(formElement[0], 'submit', handleFormSubmission);
                }, 0, false);
              });
            }

            var parentFormCtrl = ctrls[1] || controller.$$parentForm;
            parentFormCtrl.$addControl(controller);

            var setter = nameAttr ? getSetter(controller.$name) : noop;

            if (nameAttr) {
              setter(scope, controller);
              attr.$observe(nameAttr, function(newValue) {
                if (controller.$name === newValue) return;
                setter(scope, undefined);
                controller.$$parentForm.$$renameControl(controller, newValue);
                setter = getSetter(controller.$name);
                setter(scope, controller);
              });
            }
            formElement.on('$destroy', function() {
              controller.$$parentForm.$removeControl(controller);
              setter(scope, undefined);
              extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards
            });
          }
        };
      }
    };

    return formDirective;

    function getSetter(expression) {
      if (expression === '') {
        //create an assignable expression, so forms with an empty name can be renamed later
        return $parse('this[""]').assign;
      }
      return $parse(expression).assign || noop;
    }
  }];
};

var formDirective = formDirectiveFactory();
var ngFormDirective = formDirectiveFactory(true);

/* global VALID_CLASS: false,
  INVALID_CLASS: false,
  PRISTINE_CLASS: false,
  DIRTY_CLASS: false,
  UNTOUCHED_CLASS: false,
  TOUCHED_CLASS: false,
  ngModelMinErr: false,
*/

// Regex code is obtained from SO: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
var ISO_DATE_REGEXP = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/;
// See valid URLs in RFC3987 (http://tools.ietf.org/html/rfc3987)
// Note: We are being more lenient, because browsers are too.
//   1. Scheme
//   2. Slashes
//   3. Username
//   4. Password
//   5. Hostname
//   6. Port
//   7. Path
//   8. Query
//   9. Fragment
//                 1111111111111111 222   333333    44444        555555555555555555555555    666     77777777     8888888     999
var URL_REGEXP = /^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:/?#]+|\[[a-f\d:]+\])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i;
var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/;
var DATE_REGEXP = /^(\d{4})-(\d{2})-(\d{2})$/;
var DATETIMELOCAL_REGEXP = /^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
var WEEK_REGEXP = /^(\d{4})-W(\d\d)$/;
var MONTH_REGEXP = /^(\d{4})-(\d\d)$/;
var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;

var inputType = {

  /**
   * @ngdoc input
   * @name input[text]
   *
   * @description
   * Standard HTML text input with angular data binding, inherited by most of the `input` elements.
   *
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Adds `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object, then this is used directly.
   *    If the expression evaluates to a string, then it will be converted to a RegExp
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
   *    `new RegExp('^abc$')`.<br />
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
   *    start at the index of the last search's match, thus not taking the whole input value into
   *    account.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
   *    This parameter is ignored for input[type=password] controls, which will never trim the
   *    input.
   *
   * @example
      <example name="text-input-directive" module="textInputExample">
        <file name="index.html">
         <script>
           angular.module('textInputExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.example = {
                 text: 'guest',
                 word: /^\s*\w*\s*$/
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <label>Single word:
             <input type="text" name="input" ng-model="example.text"
                    ng-pattern="example.word" required ng-trim="false">
           </label>
           <div role="alert">
             <span class="error" ng-show="myForm.input.$error.required">
               Required!</span>
             <span class="error" ng-show="myForm.input.$error.pattern">
               Single word only!</span>
           </div>
           <tt>text = {{example.text}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          var text = element(by.binding('example.text'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('example.text'));

          it('should initialize to model', function() {
            expect(text.getText()).toContain('guest');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');

            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if multi word', function() {
            input.clear();
            input.sendKeys('hello world');

            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'text': textInputType,

    /**
     * @ngdoc input
     * @name input[date]
     *
     * @description
     * Input with date validation and transformation. In browsers that do not yet support
     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601
     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many
     * modern browsers do not yet support this input type, it is important to provide cues to users on the
     * expected input format via a placeholder or label.
     *
     * The model must always be a Date object, otherwise Angular will throw an error.
     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
     *
     * The timezone to be used to read/write the `Date` instance in the model can be defined using
     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
     *
     * @param {string} ngModel Assignable angular expression to data-bind to.
     * @param {string=} name Property name of the form under which the control is published.
     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
     *   valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
     *   (e.g. `min="{{minDate | date:'yyyy-MM-dd'}}"`). Note that `min` will also add native HTML5
     *   constraint validation.
     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
     *   a valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
     *   (e.g. `max="{{maxDate | date:'yyyy-MM-dd'}}"`). Note that `max` will also add native HTML5
     *   constraint validation.
     * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO date string
     *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
     * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO date string
     *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
     * @param {string=} required Sets `required` validation error key if the value is not entered.
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
     *    `required` when you want to data-bind to the `required` attribute.
     * @param {string=} ngChange Angular expression to be executed when input changes due to user
     *    interaction with the input element.
     *
     * @example
     <example name="date-input-directive" module="dateInputExample">
     <file name="index.html">
       <script>
          angular.module('dateInputExample', [])
            .controller('DateController', ['$scope', function($scope) {
              $scope.example = {
                value: new Date(2013, 9, 22)
              };
            }]);
       </script>
       <form name="myForm" ng-controller="DateController as dateCtrl">
          <label for="exampleInput">Pick a date in 2013:</label>
          <input type="date" id="exampleInput" name="input" ng-model="example.value"
              placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />
          <div role="alert">
            <span class="error" ng-show="myForm.input.$error.required">
                Required!</span>
            <span class="error" ng-show="myForm.input.$error.date">
                Not a valid date!</span>
           </div>
           <tt>value = {{example.value | date: "yyyy-MM-dd"}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
       </form>
     </file>
     <file name="protractor.js" type="protractor">
        var value = element(by.binding('example.value | date: "yyyy-MM-dd"'));
        var valid = element(by.binding('myForm.input.$valid'));
        var input = element(by.model('example.value'));

        // currently protractor/webdriver does not support
        // sending keys to all known HTML5 input controls
        // for various browsers (see https://github.com/angular/protractor/issues/562).
        function setInput(val) {
          // set the value of the element and force validation.
          var scr = "var ipt = document.getElementById('exampleInput'); " +
          "ipt.value = '" + val + "';" +
          "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
          browser.executeScript(scr);
        }

        it('should initialize to model', function() {
          expect(value.getText()).toContain('2013-10-22');
          expect(valid.getText()).toContain('myForm.input.$valid = true');
        });

        it('should be invalid if empty', function() {
          setInput('');
          expect(value.getText()).toEqual('value =');
          expect(valid.getText()).toContain('myForm.input.$valid = false');
        });

        it('should be invalid if over max', function() {
          setInput('2015-01-01');
          expect(value.getText()).toContain('');
          expect(valid.getText()).toContain('myForm.input.$valid = false');
        });
     </file>
     </example>
     */
  'date': createDateInputType('date', DATE_REGEXP,
         createDateParser(DATE_REGEXP, ['yyyy', 'MM', 'dd']),
         'yyyy-MM-dd'),

   /**
    * @ngdoc input
    * @name input[datetime-local]
    *
    * @description
    * Input with datetime validation and transformation. In browsers that do not yet support
    * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
    * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.
    *
    * The model must always be a Date object, otherwise Angular will throw an error.
    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
    *
    * The timezone to be used to read/write the `Date` instance in the model can be defined using
    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
    *
    * @param {string} ngModel Assignable angular expression to data-bind to.
    * @param {string=} name Property name of the form under which the control is published.
    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
    *   inside this attribute (e.g. `min="{{minDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
    *   Note that `min` will also add native HTML5 constraint validation.
    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
    *   inside this attribute (e.g. `max="{{maxDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
    *   Note that `max` will also add native HTML5 constraint validation.
    * @param {(date|string)=} ngMin Sets the `min` validation error key to the Date / ISO datetime string
    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
    * @param {(date|string)=} ngMax Sets the `max` validation error key to the Date / ISO datetime string
    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
    * @param {string=} required Sets `required` validation error key if the value is not entered.
    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
    *    `required` when you want to data-bind to the `required` attribute.
    * @param {string=} ngChange Angular expression to be executed when input changes due to user
    *    interaction with the input element.
    *
    * @example
    <example name="datetimelocal-input-directive" module="dateExample">
    <file name="index.html">
      <script>
        angular.module('dateExample', [])
          .controller('DateController', ['$scope', function($scope) {
            $scope.example = {
              value: new Date(2010, 11, 28, 14, 57)
            };
          }]);
      </script>
      <form name="myForm" ng-controller="DateController as dateCtrl">
        <label for="exampleInput">Pick a date between in 2013:</label>
        <input type="datetime-local" id="exampleInput" name="input" ng-model="example.value"
            placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />
        <div role="alert">
          <span class="error" ng-show="myForm.input.$error.required">
              Required!</span>
          <span class="error" ng-show="myForm.input.$error.datetimelocal">
              Not a valid date!</span>
        </div>
        <tt>value = {{example.value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "yyyy-MM-ddTHH:mm:ss"'));
      var valid = element(by.binding('myForm.input.$valid'));
      var input = element(by.model('example.value'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('2010-12-28T14:57:00');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('2015-01-01T23:59:00');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
    </file>
    </example>
    */
  'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP,
      createDateParser(DATETIMELOCAL_REGEXP, ['yyyy', 'MM', 'dd', 'HH', 'mm', 'ss', 'sss']),
      'yyyy-MM-ddTHH:mm:ss.sss'),

  /**
   * @ngdoc input
   * @name input[time]
   *
   * @description
   * Input with time validation and transformation. In browsers that do not yet support
   * the HTML5 time input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
   * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
   * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.
   *
   * The model must always be a Date object, otherwise Angular will throw an error.
   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
   *
   * The timezone to be used to read/write the `Date` instance in the model can be defined using
   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
   *   attribute (e.g. `min="{{minTime | date:'HH:mm:ss'}}"`). Note that `min` will also add
   *   native HTML5 constraint validation.
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
   *   attribute (e.g. `max="{{maxTime | date:'HH:mm:ss'}}"`). Note that `max` will also add
   *   native HTML5 constraint validation.
   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO time string the
   *   `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO time string the
   *   `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
   <example name="time-input-directive" module="timeExample">
   <file name="index.html">
     <script>
      angular.module('timeExample', [])
        .controller('DateController', ['$scope', function($scope) {
          $scope.example = {
            value: new Date(1970, 0, 1, 14, 57, 0)
          };
        }]);
     </script>
     <form name="myForm" ng-controller="DateController as dateCtrl">
        <label for="exampleInput">Pick a between 8am and 5pm:</label>
        <input type="time" id="exampleInput" name="input" ng-model="example.value"
            placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />
        <div role="alert">
          <span class="error" ng-show="myForm.input.$error.required">
              Required!</span>
          <span class="error" ng-show="myForm.input.$error.time">
              Not a valid date!</span>
        </div>
        <tt>value = {{example.value | date: "HH:mm:ss"}}</tt><br/>
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
     </form>
   </file>
   <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "HH:mm:ss"'));
      var valid = element(by.binding('myForm.input.$valid'));
      var input = element(by.model('example.value'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('14:57:00');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('23:59:00');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
   </file>
   </example>
   */
  'time': createDateInputType('time', TIME_REGEXP,
      createDateParser(TIME_REGEXP, ['HH', 'mm', 'ss', 'sss']),
     'HH:mm:ss.sss'),

   /**
    * @ngdoc input
    * @name input[week]
    *
    * @description
    * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support
    * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
    * week format (yyyy-W##), for example: `2013-W02`.
    *
    * The model must always be a Date object, otherwise Angular will throw an error.
    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
    *
    * The timezone to be used to read/write the `Date` instance in the model can be defined using
    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
    *
    * @param {string} ngModel Assignable angular expression to data-bind to.
    * @param {string=} name Property name of the form under which the control is published.
    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
    *   attribute (e.g. `min="{{minWeek | date:'yyyy-Www'}}"`). Note that `min` will also add
    *   native HTML5 constraint validation.
    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
    *   attribute (e.g. `max="{{maxWeek | date:'yyyy-Www'}}"`). Note that `max` will also add
    *   native HTML5 constraint validation.
    * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
    * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
    * @param {string=} required Sets `required` validation error key if the value is not entered.
    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
    *    `required` when you want to data-bind to the `required` attribute.
    * @param {string=} ngChange Angular expression to be executed when input changes due to user
    *    interaction with the input element.
    *
    * @example
    <example name="week-input-directive" module="weekExample">
    <file name="index.html">
      <script>
      angular.module('weekExample', [])
        .controller('DateController', ['$scope', function($scope) {
          $scope.example = {
            value: new Date(2013, 0, 3)
          };
        }]);
      </script>
      <form name="myForm" ng-controller="DateController as dateCtrl">
        <label>Pick a date between in 2013:
          <input id="exampleInput" type="week" name="input" ng-model="example.value"
                 placeholder="YYYY-W##" min="2012-W32"
                 max="2013-W52" required />
        </label>
        <div role="alert">
          <span class="error" ng-show="myForm.input.$error.required">
              Required!</span>
          <span class="error" ng-show="myForm.input.$error.week">
              Not a valid date!</span>
        </div>
        <tt>value = {{example.value | date: "yyyy-Www"}}</tt><br/>
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "yyyy-Www"'));
      var valid = element(by.binding('myForm.input.$valid'));
      var input = element(by.model('example.value'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('2013-W01');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('2015-W01');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
    </file>
    </example>
    */
  'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),

  /**
   * @ngdoc input
   * @name input[month]
   *
   * @description
   * Input with month validation and transformation. In browsers that do not yet support
   * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
   * month format (yyyy-MM), for example: `2009-01`.
   *
   * The model must always be a Date object, otherwise Angular will throw an error.
   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
   * If the model is not set to the first of the month, the next view to model update will set it
   * to the first of the month.
   *
   * The timezone to be used to read/write the `Date` instance in the model can be defined using
   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
   *   attribute (e.g. `min="{{minMonth | date:'yyyy-MM'}}"`). Note that `min` will also add
   *   native HTML5 constraint validation.
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
   *   attribute (e.g. `max="{{maxMonth | date:'yyyy-MM'}}"`). Note that `max` will also add
   *   native HTML5 constraint validation.
   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
   *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
   *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.

   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
   <example name="month-input-directive" module="monthExample">
   <file name="index.html">
     <script>
      angular.module('monthExample', [])
        .controller('DateController', ['$scope', function($scope) {
          $scope.example = {
            value: new Date(2013, 9, 1)
          };
        }]);
     </script>
     <form name="myForm" ng-controller="DateController as dateCtrl">
       <label for="exampleInput">Pick a month in 2013:</label>
       <input id="exampleInput" type="month" name="input" ng-model="example.value"
          placeholder="yyyy-MM" min="2013-01" max="2013-12" required />
       <div role="alert">
         <span class="error" ng-show="myForm.input.$error.required">
            Required!</span>
         <span class="error" ng-show="myForm.input.$error.month">
            Not a valid month!</span>
       </div>
       <tt>value = {{example.value | date: "yyyy-MM"}}</tt><br/>
       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
     </form>
   </file>
   <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "yyyy-MM"'));
      var valid = element(by.binding('myForm.input.$valid'));
      var input = element(by.model('example.value'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('2013-10');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('2015-01');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
   </file>
   </example>
   */
  'month': createDateInputType('month', MONTH_REGEXP,
     createDateParser(MONTH_REGEXP, ['yyyy', 'MM']),
     'yyyy-MM'),

  /**
   * @ngdoc input
   * @name input[number]
   *
   * @description
   * Text input with number validation and transformation. Sets the `number` validation
   * error if not a valid number.
   *
   * <div class="alert alert-warning">
   * The model must always be of type `number` otherwise Angular will throw an error.
   * Be aware that a string containing a number is not enough. See the {@link ngModel:numfmt}
   * error docs for more information and an example of how to convert your model if necessary.
   * </div>
   *
   * ## Issues with HTML5 constraint validation
   *
   * In browsers that follow the
   * [HTML5 specification](https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29),
   * `input[number]` does not work as expected with {@link ngModelOptions `ngModelOptions.allowInvalid`}.
   * If a non-number is entered in the input, the browser will report the value as an empty string,
   * which means the view / model values in `ngModel` and subsequently the scope value
   * will also be an empty string.
   *
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object, then this is used directly.
   *    If the expression evaluates to a string, then it will be converted to a RegExp
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
   *    `new RegExp('^abc$')`.<br />
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
   *    start at the index of the last search's match, thus not taking the whole input value into
   *    account.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="number-input-directive" module="numberExample">
        <file name="index.html">
         <script>
           angular.module('numberExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.example = {
                 value: 12
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <label>Number:
             <input type="number" name="input" ng-model="example.value"
                    min="0" max="99" required>
          </label>
           <div role="alert">
             <span class="error" ng-show="myForm.input.$error.required">
               Required!</span>
             <span class="error" ng-show="myForm.input.$error.number">
               Not valid number!</span>
           </div>
           <tt>value = {{example.value}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          var value = element(by.binding('example.value'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('example.value'));

          it('should initialize to model', function() {
            expect(value.getText()).toContain('12');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');
            expect(value.getText()).toEqual('value =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if over max', function() {
            input.clear();
            input.sendKeys('123');
            expect(value.getText()).toEqual('value =');
            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'number': numberInputType,


  /**
   * @ngdoc input
   * @name input[url]
   *
   * @description
   * Text input with URL validation. Sets the `url` validation error key if the content is not a
   * valid URL.
   *
   * <div class="alert alert-warning">
   * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex
   * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify
   * the built-in validators (see the {@link guide/forms Forms guide})
   * </div>
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object, then this is used directly.
   *    If the expression evaluates to a string, then it will be converted to a RegExp
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
   *    `new RegExp('^abc$')`.<br />
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
   *    start at the index of the last search's match, thus not taking the whole input value into
   *    account.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="url-input-directive" module="urlExample">
        <file name="index.html">
         <script>
           angular.module('urlExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.url = {
                 text: 'http://google.com'
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <label>URL:
             <input type="url" name="input" ng-model="url.text" required>
           <label>
           <div role="alert">
             <span class="error" ng-show="myForm.input.$error.required">
               Required!</span>
             <span class="error" ng-show="myForm.input.$error.url">
               Not valid url!</span>
           </div>
           <tt>text = {{url.text}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          var text = element(by.binding('url.text'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('url.text'));

          it('should initialize to model', function() {
            expect(text.getText()).toContain('http://google.com');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');

            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if not url', function() {
            input.clear();
            input.sendKeys('box');

            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'url': urlInputType,


  /**
   * @ngdoc input
   * @name input[email]
   *
   * @description
   * Text input with email validation. Sets the `email` validation error key if not a valid email
   * address.
   *
   * <div class="alert alert-warning">
   * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex
   * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can
   * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})
   * </div>
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object, then this is used directly.
   *    If the expression evaluates to a string, then it will be converted to a RegExp
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
   *    `new RegExp('^abc$')`.<br />
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
   *    start at the index of the last search's match, thus not taking the whole input value into
   *    account.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="email-input-directive" module="emailExample">
        <file name="index.html">
         <script>
           angular.module('emailExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.email = {
                 text: 'me@example.com'
               };
             }]);
         </script>
           <form name="myForm" ng-controller="ExampleController">
             <label>Email:
               <input type="email" name="input" ng-model="email.text" required>
             </label>
             <div role="alert">
               <span class="error" ng-show="myForm.input.$error.required">
                 Required!</span>
               <span class="error" ng-show="myForm.input.$error.email">
                 Not valid email!</span>
             </div>
             <tt>text = {{email.text}}</tt><br/>
             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>
           </form>
         </file>
        <file name="protractor.js" type="protractor">
          var text = element(by.binding('email.text'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('email.text'));

          it('should initialize to model', function() {
            expect(text.getText()).toContain('me@example.com');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');
            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if not email', function() {
            input.clear();
            input.sendKeys('xxx');

            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'email': emailInputType,


  /**
   * @ngdoc input
   * @name input[radio]
   *
   * @description
   * HTML radio button.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string} value The value to which the `ngModel` expression should be set when selected.
   *    Note that `value` only supports `string` values, i.e. the scope model needs to be a string,
   *    too. Use `ngValue` if you need complex models (`number`, `object`, ...).
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   * @param {string} ngValue Angular expression to which `ngModel` will be be set when the radio
   *    is selected. Should be used instead of the `value` attribute if you need
   *    a non-string `ngModel` (`boolean`, `array`, ...).
   *
   * @example
      <example name="radio-input-directive" module="radioExample">
        <file name="index.html">
         <script>
           angular.module('radioExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.color = {
                 name: 'blue'
               };
               $scope.specialValue = {
                 "id": "12345",
                 "value": "green"
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <label>
             <input type="radio" ng-model="color.name" value="red">
             Red
           </label><br/>
           <label>
             <input type="radio" ng-model="color.name" ng-value="specialValue">
             Green
           </label><br/>
           <label>
             <input type="radio" ng-model="color.name" value="blue">
             Blue
           </label><br/>
           <tt>color = {{color.name | json}}</tt><br/>
          </form>
          Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.
        </file>
        <file name="protractor.js" type="protractor">
          it('should change state', function() {
            var color = element(by.binding('color.name'));

            expect(color.getText()).toContain('blue');

            element.all(by.model('color.name')).get(0).click();

            expect(color.getText()).toContain('red');
          });
        </file>
      </example>
   */
  'radio': radioInputType,


  /**
   * @ngdoc input
   * @name input[checkbox]
   *
   * @description
   * HTML checkbox.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {expression=} ngTrueValue The value to which the expression should be set when selected.
   * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="checkbox-input-directive" module="checkboxExample">
        <file name="index.html">
         <script>
           angular.module('checkboxExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.checkboxModel = {
                value1 : true,
                value2 : 'YES'
              };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <label>Value1:
             <input type="checkbox" ng-model="checkboxModel.value1">
           </label><br/>
           <label>Value2:
             <input type="checkbox" ng-model="checkboxModel.value2"
                    ng-true-value="'YES'" ng-false-value="'NO'">
            </label><br/>
           <tt>value1 = {{checkboxModel.value1}}</tt><br/>
           <tt>value2 = {{checkboxModel.value2}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          it('should change state', function() {
            var value1 = element(by.binding('checkboxModel.value1'));
            var value2 = element(by.binding('checkboxModel.value2'));

            expect(value1.getText()).toContain('true');
            expect(value2.getText()).toContain('YES');

            element(by.model('checkboxModel.value1')).click();
            element(by.model('checkboxModel.value2')).click();

            expect(value1.getText()).toContain('false');
            expect(value2.getText()).toContain('NO');
          });
        </file>
      </example>
   */
  'checkbox': checkboxInputType,

  'hidden': noop,
  'button': noop,
  'submit': noop,
  'reset': noop,
  'file': noop
};

function stringBasedInputType(ctrl) {
  ctrl.$formatters.push(function(value) {
    return ctrl.$isEmpty(value) ? value : value.toString();
  });
}

function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
  stringBasedInputType(ctrl);
}

function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  var type = lowercase(element[0].type);

  // In composition mode, users are still inputing intermediate text buffer,
  // hold the listener until composition is done.
  // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
  if (!$sniffer.android) {
    var composing = false;

    element.on('compositionstart', function(data) {
      composing = true;
    });

    element.on('compositionend', function() {
      composing = false;
      listener();
    });
  }

  var listener = function(ev) {
    if (timeout) {
      $browser.defer.cancel(timeout);
      timeout = null;
    }
    if (composing) return;
    var value = element.val(),
        event = ev && ev.type;

    // By default we will trim the value
    // If the attribute ng-trim exists we will avoid trimming
    // If input type is 'password', the value is never trimmed
    if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {
      value = trim(value);
    }

    // If a control is suffering from bad input (due to native validators), browsers discard its
    // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the
    // control's value is the same empty value twice in a row.
    if (ctrl.$viewValue !== value || (value === '' && ctrl.$$hasNativeValidators)) {
      ctrl.$setViewValue(value, event);
    }
  };

  // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
  // input event on backspace, delete or cut
  if ($sniffer.hasEvent('input')) {
    element.on('input', listener);
  } else {
    var timeout;

    var deferListener = function(ev, input, origValue) {
      if (!timeout) {
        timeout = $browser.defer(function() {
          timeout = null;
          if (!input || input.value !== origValue) {
            listener(ev);
          }
        });
      }
    };

    element.on('keydown', function(event) {
      var key = event.keyCode;

      // ignore
      //    command            modifiers                   arrows
      if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;

      deferListener(event, this, this.value);
    });

    // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
    if ($sniffer.hasEvent('paste')) {
      element.on('paste cut', deferListener);
    }
  }

  // if user paste into input using mouse on older browser
  // or form autocomplete on newer browser, we need "change" event to catch it
  element.on('change', listener);

  ctrl.$render = function() {
    // Workaround for Firefox validation #12102.
    var value = ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue;
    if (element.val() !== value) {
      element.val(value);
    }
  };
}

function weekParser(isoWeek, existingDate) {
  if (isDate(isoWeek)) {
    return isoWeek;
  }

  if (isString(isoWeek)) {
    WEEK_REGEXP.lastIndex = 0;
    var parts = WEEK_REGEXP.exec(isoWeek);
    if (parts) {
      var year = +parts[1],
          week = +parts[2],
          hours = 0,
          minutes = 0,
          seconds = 0,
          milliseconds = 0,
          firstThurs = getFirstThursdayOfYear(year),
          addDays = (week - 1) * 7;

      if (existingDate) {
        hours = existingDate.getHours();
        minutes = existingDate.getMinutes();
        seconds = existingDate.getSeconds();
        milliseconds = existingDate.getMilliseconds();
      }

      return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);
    }
  }

  return NaN;
}

function createDateParser(regexp, mapping) {
  return function(iso, date) {
    var parts, map;

    if (isDate(iso)) {
      return iso;
    }

    if (isString(iso)) {
      // When a date is JSON'ified to wraps itself inside of an extra
      // set of double quotes. This makes the date parsing code unable
      // to match the date string and parse it as a date.
      if (iso.charAt(0) == '"' && iso.charAt(iso.length - 1) == '"') {
        iso = iso.substring(1, iso.length - 1);
      }
      if (ISO_DATE_REGEXP.test(iso)) {
        return new Date(iso);
      }
      regexp.lastIndex = 0;
      parts = regexp.exec(iso);

      if (parts) {
        parts.shift();
        if (date) {
          map = {
            yyyy: date.getFullYear(),
            MM: date.getMonth() + 1,
            dd: date.getDate(),
            HH: date.getHours(),
            mm: date.getMinutes(),
            ss: date.getSeconds(),
            sss: date.getMilliseconds() / 1000
          };
        } else {
          map = { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 };
        }

        forEach(parts, function(part, index) {
          if (index < mapping.length) {
            map[mapping[index]] = +part;
          }
        });
        return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);
      }
    }

    return NaN;
  };
}

function createDateInputType(type, regexp, parseDate, format) {
  return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {
    badInputChecker(scope, element, attr, ctrl);
    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
    var timezone = ctrl && ctrl.$options && ctrl.$options.timezone;
    var previousDate;

    ctrl.$$parserName = type;
    ctrl.$parsers.push(function(value) {
      if (ctrl.$isEmpty(value)) return null;
      if (regexp.test(value)) {
        // Note: We cannot read ctrl.$modelValue, as there might be a different
        // parser/formatter in the processing chain so that the model
        // contains some different data format!
        var parsedDate = parseDate(value, previousDate);
        if (timezone) {
          parsedDate = convertTimezoneToLocal(parsedDate, timezone);
        }
        return parsedDate;
      }
      return undefined;
    });

    ctrl.$formatters.push(function(value) {
      if (value && !isDate(value)) {
        throw ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);
      }
      if (isValidDate(value)) {
        previousDate = value;
        if (previousDate && timezone) {
          previousDate = convertTimezoneToLocal(previousDate, timezone, true);
        }
        return $filter('date')(value, format, timezone);
      } else {
        previousDate = null;
        return '';
      }
    });

    if (isDefined(attr.min) || attr.ngMin) {
      var minVal;
      ctrl.$validators.min = function(value) {
        return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;
      };
      attr.$observe('min', function(val) {
        minVal = parseObservedDateValue(val);
        ctrl.$validate();
      });
    }

    if (isDefined(attr.max) || attr.ngMax) {
      var maxVal;
      ctrl.$validators.max = function(value) {
        return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;
      };
      attr.$observe('max', function(val) {
        maxVal = parseObservedDateValue(val);
        ctrl.$validate();
      });
    }

    function isValidDate(value) {
      // Invalid Date: getTime() returns NaN
      return value && !(value.getTime && value.getTime() !== value.getTime());
    }

    function parseObservedDateValue(val) {
      return isDefined(val) && !isDate(val) ? parseDate(val) || undefined : val;
    }
  };
}

function badInputChecker(scope, element, attr, ctrl) {
  var node = element[0];
  var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);
  if (nativeValidation) {
    ctrl.$parsers.push(function(value) {
      var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};
      return validity.badInput || validity.typeMismatch ? undefined : value;
    });
  }
}

function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  badInputChecker(scope, element, attr, ctrl);
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);

  ctrl.$$parserName = 'number';
  ctrl.$parsers.push(function(value) {
    if (ctrl.$isEmpty(value))      return null;
    if (NUMBER_REGEXP.test(value)) return parseFloat(value);
    return undefined;
  });

  ctrl.$formatters.push(function(value) {
    if (!ctrl.$isEmpty(value)) {
      if (!isNumber(value)) {
        throw ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);
      }
      value = value.toString();
    }
    return value;
  });

  if (isDefined(attr.min) || attr.ngMin) {
    var minVal;
    ctrl.$validators.min = function(value) {
      return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;
    };

    attr.$observe('min', function(val) {
      if (isDefined(val) && !isNumber(val)) {
        val = parseFloat(val, 10);
      }
      minVal = isNumber(val) && !isNaN(val) ? val : undefined;
      // TODO(matsko): implement validateLater to reduce number of validations
      ctrl.$validate();
    });
  }

  if (isDefined(attr.max) || attr.ngMax) {
    var maxVal;
    ctrl.$validators.max = function(value) {
      return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;
    };

    attr.$observe('max', function(val) {
      if (isDefined(val) && !isNumber(val)) {
        val = parseFloat(val, 10);
      }
      maxVal = isNumber(val) && !isNaN(val) ? val : undefined;
      // TODO(matsko): implement validateLater to reduce number of validations
      ctrl.$validate();
    });
  }
}

function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  // Note: no badInputChecker here by purpose as `url` is only a validation
  // in browsers, i.e. we can always read out input.value even if it is not valid!
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
  stringBasedInputType(ctrl);

  ctrl.$$parserName = 'url';
  ctrl.$validators.url = function(modelValue, viewValue) {
    var value = modelValue || viewValue;
    return ctrl.$isEmpty(value) || URL_REGEXP.test(value);
  };
}

function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  // Note: no badInputChecker here by purpose as `url` is only a validation
  // in browsers, i.e. we can always read out input.value even if it is not valid!
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
  stringBasedInputType(ctrl);

  ctrl.$$parserName = 'email';
  ctrl.$validators.email = function(modelValue, viewValue) {
    var value = modelValue || viewValue;
    return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);
  };
}

function radioInputType(scope, element, attr, ctrl) {
  // make the name unique, if not defined
  if (isUndefined(attr.name)) {
    element.attr('name', nextUid());
  }

  var listener = function(ev) {
    if (element[0].checked) {
      ctrl.$setViewValue(attr.value, ev && ev.type);
    }
  };

  element.on('click', listener);

  ctrl.$render = function() {
    var value = attr.value;
    element[0].checked = (value == ctrl.$viewValue);
  };

  attr.$observe('value', ctrl.$render);
}

function parseConstantExpr($parse, context, name, expression, fallback) {
  var parseFn;
  if (isDefined(expression)) {
    parseFn = $parse(expression);
    if (!parseFn.constant) {
      throw ngModelMinErr('constexpr', 'Expected constant expression for `{0}`, but saw ' +
                                   '`{1}`.', name, expression);
    }
    return parseFn(context);
  }
  return fallback;
}

function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {
  var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);
  var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);

  var listener = function(ev) {
    ctrl.$setViewValue(element[0].checked, ev && ev.type);
  };

  element.on('click', listener);

  ctrl.$render = function() {
    element[0].checked = ctrl.$viewValue;
  };

  // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`
  // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert
  // it to a boolean.
  ctrl.$isEmpty = function(value) {
    return value === false;
  };

  ctrl.$formatters.push(function(value) {
    return equals(value, trueValue);
  });

  ctrl.$parsers.push(function(value) {
    return value ? trueValue : falseValue;
  });
}


/**
 * @ngdoc directive
 * @name textarea
 * @restrict E
 *
 * @description
 * HTML textarea element control with angular data-binding. The data-binding and validation
 * properties of this element are exactly the same as those of the
 * {@link ng.directive:input input element}.
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
 *    `required` when you want to data-bind to the `required` attribute.
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
 *    minlength.
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
 *    length.
 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
 *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
 *    If the expression evaluates to a RegExp object, then this is used directly.
 *    If the expression evaluates to a string, then it will be converted to a RegExp
 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
 *    `new RegExp('^abc$')`.<br />
 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
 *    start at the index of the last search's match, thus not taking the whole input value into
 *    account.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
 */


/**
 * @ngdoc directive
 * @name input
 * @restrict E
 *
 * @description
 * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,
 * input state control, and validation.
 * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.
 *
 * <div class="alert alert-warning">
 * **Note:** Not every feature offered is available for all input types.
 * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.
 * </div>
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {boolean=} ngRequired Sets `required` attribute if set to true
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
 *    minlength.
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
 *    length.
 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
 *    value does not match a RegExp found by evaluating the Angular expression given in the attribute value.
 *    If the expression evaluates to a RegExp object, then this is used directly.
 *    If the expression evaluates to a string, then it will be converted to a RegExp
 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
 *    `new RegExp('^abc$')`.<br />
 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
 *    start at the index of the last search's match, thus not taking the whole input value into
 *    account.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
 *    This parameter is ignored for input[type=password] controls, which will never trim the
 *    input.
 *
 * @example
    <example name="input-directive" module="inputExample">
      <file name="index.html">
       <script>
          angular.module('inputExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.user = {name: 'guest', last: 'visitor'};
            }]);
       </script>
       <div ng-controller="ExampleController">
         <form name="myForm">
           <label>
              User name:
              <input type="text" name="userName" ng-model="user.name" required>
           </label>
           <div role="alert">
             <span class="error" ng-show="myForm.userName.$error.required">
              Required!</span>
           </div>
           <label>
              Last name:
              <input type="text" name="lastName" ng-model="user.last"
              ng-minlength="3" ng-maxlength="10">
           </label>
           <div role="alert">
             <span class="error" ng-show="myForm.lastName.$error.minlength">
               Too short!</span>
             <span class="error" ng-show="myForm.lastName.$error.maxlength">
               Too long!</span>
           </div>
         </form>
         <hr>
         <tt>user = {{user}}</tt><br/>
         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br/>
         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br/>
         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br/>
         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br/>
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br/>
         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br/>
       </div>
      </file>
      <file name="protractor.js" type="protractor">
        var user = element(by.exactBinding('user'));
        var userNameValid = element(by.binding('myForm.userName.$valid'));
        var lastNameValid = element(by.binding('myForm.lastName.$valid'));
        var lastNameError = element(by.binding('myForm.lastName.$error'));
        var formValid = element(by.binding('myForm.$valid'));
        var userNameInput = element(by.model('user.name'));
        var userLastInput = element(by.model('user.last'));

        it('should initialize to model', function() {
          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
          expect(userNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

        it('should be invalid if empty when required', function() {
          userNameInput.clear();
          userNameInput.sendKeys('');

          expect(user.getText()).toContain('{"last":"visitor"}');
          expect(userNameValid.getText()).toContain('false');
          expect(formValid.getText()).toContain('false');
        });

        it('should be valid if empty when min length is set', function() {
          userLastInput.clear();
          userLastInput.sendKeys('');

          expect(user.getText()).toContain('{"name":"guest","last":""}');
          expect(lastNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

        it('should be invalid if less than required min length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('xx');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('minlength');
          expect(formValid.getText()).toContain('false');
        });

        it('should be invalid if longer than max length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('some ridiculously long name');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('maxlength');
          expect(formValid.getText()).toContain('false');
        });
      </file>
    </example>
 */
var inputDirective = ['$browser', '$sniffer', '$filter', '$parse',
    function($browser, $sniffer, $filter, $parse) {
  return {
    restrict: 'E',
    require: ['?ngModel'],
    link: {
      pre: function(scope, element, attr, ctrls) {
        if (ctrls[0]) {
          (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer,
                                                              $browser, $filter, $parse);
        }
      }
    }
  };
}];



var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
/**
 * @ngdoc directive
 * @name ngValue
 *
 * @description
 * Binds the given expression to the value of `<option>` or {@link input[radio] `input[radio]`},
 * so that when the element is selected, the {@link ngModel `ngModel`} of that element is set to
 * the bound value.
 *
 * `ngValue` is useful when dynamically generating lists of radio buttons using
 * {@link ngRepeat `ngRepeat`}, as shown below.
 *
 * Likewise, `ngValue` can be used to generate `<option>` elements for
 * the {@link select `select`} element. In that case however, only strings are supported
 * for the `value `attribute, so the resulting `ngModel` will always be a string.
 * Support for `select` models with non-string values is available via `ngOptions`.
 *
 * @element input
 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
 *   of the `input` element
 *
 * @example
    <example name="ngValue-directive" module="valueExample">
      <file name="index.html">
       <script>
          angular.module('valueExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.names = ['pizza', 'unicorns', 'robots'];
              $scope.my = { favorite: 'unicorns' };
            }]);
       </script>
        <form ng-controller="ExampleController">
          <h2>Which is your favorite?</h2>
            <label ng-repeat="name in names" for="{{name}}">
              {{name}}
              <input type="radio"
                     ng-model="my.favorite"
                     ng-value="name"
                     id="{{name}}"
                     name="favorite">
            </label>
          <div>You chose {{my.favorite}}</div>
        </form>
      </file>
      <file name="protractor.js" type="protractor">
        var favorite = element(by.binding('my.favorite'));

        it('should initialize to model', function() {
          expect(favorite.getText()).toContain('unicorns');
        });
        it('should bind the values to the inputs', function() {
          element.all(by.model('my.favorite')).get(0).click();
          expect(favorite.getText()).toContain('pizza');
        });
      </file>
    </example>
 */
var ngValueDirective = function() {
  return {
    restrict: 'A',
    priority: 100,
    compile: function(tpl, tplAttr) {
      if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
        return function ngValueConstantLink(scope, elm, attr) {
          attr.$set('value', scope.$eval(attr.ngValue));
        };
      } else {
        return function ngValueLink(scope, elm, attr) {
          scope.$watch(attr.ngValue, function valueWatchAction(value) {
            attr.$set('value', value);
          });
        };
      }
    }
  };
};

/**
 * @ngdoc directive
 * @name ngBind
 * @restrict AC
 *
 * @description
 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
 * with the value of a given expression, and to update the text content when the value of that
 * expression changes.
 *
 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
 * `{{ expression }}` which is similar but less verbose.
 *
 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily
 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
 * element attribute, it makes the bindings invisible to the user while the page is loading.
 *
 * An alternative solution to this problem would be using the
 * {@link ng.directive:ngCloak ngCloak} directive.
 *
 *
 * @element ANY
 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
 *
 * @example
 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
   <example module="bindExample">
     <file name="index.html">
       <script>
         angular.module('bindExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.name = 'Whirled';
           }]);
       </script>
       <div ng-controller="ExampleController">
         <label>Enter name: <input type="text" ng-model="name"></label><br>
         Hello <span ng-bind="name"></span>!
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-bind', function() {
         var nameInput = element(by.model('name'));

         expect(element(by.binding('name')).getText()).toBe('Whirled');
         nameInput.clear();
         nameInput.sendKeys('world');
         expect(element(by.binding('name')).getText()).toBe('world');
       });
     </file>
   </example>
 */
var ngBindDirective = ['$compile', function($compile) {
  return {
    restrict: 'AC',
    compile: function ngBindCompile(templateElement) {
      $compile.$$addBindingClass(templateElement);
      return function ngBindLink(scope, element, attr) {
        $compile.$$addBindingInfo(element, attr.ngBind);
        element = element[0];
        scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
          element.textContent = isUndefined(value) ? '' : value;
        });
      };
    }
  };
}];


/**
 * @ngdoc directive
 * @name ngBindTemplate
 *
 * @description
 * The `ngBindTemplate` directive specifies that the element
 * text content should be replaced with the interpolation of the template
 * in the `ngBindTemplate` attribute.
 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
 * expressions. This directive is needed since some HTML elements
 * (such as TITLE and OPTION) cannot contain SPAN elements.
 *
 * @element ANY
 * @param {string} ngBindTemplate template of form
 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
 *
 * @example
 * Try it here: enter text in text box and watch the greeting change.
   <example module="bindExample">
     <file name="index.html">
       <script>
         angular.module('bindExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.salutation = 'Hello';
             $scope.name = 'World';
           }]);
       </script>
       <div ng-controller="ExampleController">
        <label>Salutation: <input type="text" ng-model="salutation"></label><br>
        <label>Name: <input type="text" ng-model="name"></label><br>
        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-bind', function() {
         var salutationElem = element(by.binding('salutation'));
         var salutationInput = element(by.model('salutation'));
         var nameInput = element(by.model('name'));

         expect(salutationElem.getText()).toBe('Hello World!');

         salutationInput.clear();
         salutationInput.sendKeys('Greetings');
         nameInput.clear();
         nameInput.sendKeys('user');

         expect(salutationElem.getText()).toBe('Greetings user!');
       });
     </file>
   </example>
 */
var ngBindTemplateDirective = ['$interpolate', '$compile', function($interpolate, $compile) {
  return {
    compile: function ngBindTemplateCompile(templateElement) {
      $compile.$$addBindingClass(templateElement);
      return function ngBindTemplateLink(scope, element, attr) {
        var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
        $compile.$$addBindingInfo(element, interpolateFn.expressions);
        element = element[0];
        attr.$observe('ngBindTemplate', function(value) {
          element.textContent = isUndefined(value) ? '' : value;
        });
      };
    }
  };
}];


/**
 * @ngdoc directive
 * @name ngBindHtml
 *
 * @description
 * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,
 * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.
 * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link
 * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}
 * in your module's dependencies, you need to include "angular-sanitize.js" in your application.
 *
 * You may also bypass sanitization for values you know are safe. To do so, bind to
 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
 * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.
 *
 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
 * will have an exception (instead of an exploit.)
 *
 * @element ANY
 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
 *
 * @example

   <example module="bindHtmlExample" deps="angular-sanitize.js">
     <file name="index.html">
       <div ng-controller="ExampleController">
        <p ng-bind-html="myHTML"></p>
       </div>
     </file>

     <file name="script.js">
       angular.module('bindHtmlExample', ['ngSanitize'])
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.myHTML =
              'I am an <code>HTML</code>string with ' +
              '<a href="#">links!</a> and other <em>stuff</em>';
         }]);
     </file>

     <file name="protractor.js" type="protractor">
       it('should check ng-bind-html', function() {
         expect(element(by.binding('myHTML')).getText()).toBe(
             'I am an HTMLstring with links! and other stuff');
       });
     </file>
   </example>
 */
var ngBindHtmlDirective = ['$sce', '$parse', '$compile', function($sce, $parse, $compile) {
  return {
    restrict: 'A',
    compile: function ngBindHtmlCompile(tElement, tAttrs) {
      var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);
      var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function getStringValue(value) {
        return (value || '').toString();
      });
      $compile.$$addBindingClass(tElement);

      return function ngBindHtmlLink(scope, element, attr) {
        $compile.$$addBindingInfo(element, attr.ngBindHtml);

        scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {
          // we re-evaluate the expr because we want a TrustedValueHolderType
          // for $sce, not a string
          element.html($sce.getTrustedHtml(ngBindHtmlGetter(scope)) || '');
        });
      };
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngChange
 *
 * @description
 * Evaluate the given expression when the user changes the input.
 * The expression is evaluated immediately, unlike the JavaScript onchange event
 * which only triggers at the end of a change (usually, when the user leaves the
 * form element or presses the return key).
 *
 * The `ngChange` expression is only evaluated when a change in the input value causes
 * a new value to be committed to the model.
 *
 * It will not be evaluated:
 * * if the value returned from the `$parsers` transformation pipeline has not changed
 * * if the input has continued to be invalid since the model will stay `null`
 * * if the model is changed programmatically and not by a change to the input value
 *
 *
 * Note, this directive requires `ngModel` to be present.
 *
 * @element input
 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
 * in input value.
 *
 * @example
 * <example name="ngChange-directive" module="changeExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('changeExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.counter = 0;
 *           $scope.change = function() {
 *             $scope.counter++;
 *           };
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
 *       <label for="ng-change-example2">Confirmed</label><br />
 *       <tt>debug = {{confirmed}}</tt><br/>
 *       <tt>counter = {{counter}}</tt><br/>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     var counter = element(by.binding('counter'));
 *     var debug = element(by.binding('confirmed'));
 *
 *     it('should evaluate the expression if changing from view', function() {
 *       expect(counter.getText()).toContain('0');
 *
 *       element(by.id('ng-change-example1')).click();
 *
 *       expect(counter.getText()).toContain('1');
 *       expect(debug.getText()).toContain('true');
 *     });
 *
 *     it('should not evaluate the expression if changing from model', function() {
 *       element(by.id('ng-change-example2')).click();

 *       expect(counter.getText()).toContain('0');
 *       expect(debug.getText()).toContain('true');
 *     });
 *   </file>
 * </example>
 */
var ngChangeDirective = valueFn({
  restrict: 'A',
  require: 'ngModel',
  link: function(scope, element, attr, ctrl) {
    ctrl.$viewChangeListeners.push(function() {
      scope.$eval(attr.ngChange);
    });
  }
});

function classDirective(name, selector) {
  name = 'ngClass' + name;
  return ['$animate', function($animate) {
    return {
      restrict: 'AC',
      link: function(scope, element, attr) {
        var oldVal;

        scope.$watch(attr[name], ngClassWatchAction, true);

        attr.$observe('class', function(value) {
          ngClassWatchAction(scope.$eval(attr[name]));
        });


        if (name !== 'ngClass') {
          scope.$watch('$index', function($index, old$index) {
            // jshint bitwise: false
            var mod = $index & 1;
            if (mod !== (old$index & 1)) {
              var classes = arrayClasses(scope.$eval(attr[name]));
              mod === selector ?
                addClasses(classes) :
                removeClasses(classes);
            }
          });
        }

        function addClasses(classes) {
          var newClasses = digestClassCounts(classes, 1);
          attr.$addClass(newClasses);
        }

        function removeClasses(classes) {
          var newClasses = digestClassCounts(classes, -1);
          attr.$removeClass(newClasses);
        }

        function digestClassCounts(classes, count) {
          // Use createMap() to prevent class assumptions involving property
          // names in Object.prototype
          var classCounts = element.data('$classCounts') || createMap();
          var classesToUpdate = [];
          forEach(classes, function(className) {
            if (count > 0 || classCounts[className]) {
              classCounts[className] = (classCounts[className] || 0) + count;
              if (classCounts[className] === +(count > 0)) {
                classesToUpdate.push(className);
              }
            }
          });
          element.data('$classCounts', classCounts);
          return classesToUpdate.join(' ');
        }

        function updateClasses(oldClasses, newClasses) {
          var toAdd = arrayDifference(newClasses, oldClasses);
          var toRemove = arrayDifference(oldClasses, newClasses);
          toAdd = digestClassCounts(toAdd, 1);
          toRemove = digestClassCounts(toRemove, -1);
          if (toAdd && toAdd.length) {
            $animate.addClass(element, toAdd);
          }
          if (toRemove && toRemove.length) {
            $animate.removeClass(element, toRemove);
          }
        }

        function ngClassWatchAction(newVal) {
          if (selector === true || scope.$index % 2 === selector) {
            var newClasses = arrayClasses(newVal || []);
            if (!oldVal) {
              addClasses(newClasses);
            } else if (!equals(newVal,oldVal)) {
              var oldClasses = arrayClasses(oldVal);
              updateClasses(oldClasses, newClasses);
            }
          }
          oldVal = shallowCopy(newVal);
        }
      }
    };

    function arrayDifference(tokens1, tokens2) {
      var values = [];

      outer:
      for (var i = 0; i < tokens1.length; i++) {
        var token = tokens1[i];
        for (var j = 0; j < tokens2.length; j++) {
          if (token == tokens2[j]) continue outer;
        }
        values.push(token);
      }
      return values;
    }

    function arrayClasses(classVal) {
      var classes = [];
      if (isArray(classVal)) {
        forEach(classVal, function(v) {
          classes = classes.concat(arrayClasses(v));
        });
        return classes;
      } else if (isString(classVal)) {
        return classVal.split(' ');
      } else if (isObject(classVal)) {
        forEach(classVal, function(v, k) {
          if (v) {
            classes = classes.concat(k.split(' '));
          }
        });
        return classes;
      }
      return classVal;
    }
  }];
}

/**
 * @ngdoc directive
 * @name ngClass
 * @restrict AC
 *
 * @description
 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
 * an expression that represents all classes to be added.
 *
 * The directive operates in three different ways, depending on which of three types the expression
 * evaluates to:
 *
 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
 * names.
 *
 * 2. If the expression evaluates to an object, then for each key-value pair of the
 * object with a truthy value the corresponding key is used as a class name.
 *
 * 3. If the expression evaluates to an array, each element of the array should either be a string as in
 * type 1 or an object as in type 2. This means that you can mix strings and objects together in an array
 * to give you more control over what CSS classes appear. See the code below for an example of this.
 *
 *
 * The directive won't add duplicate classes if a particular class was already set.
 *
 * When the expression changes, the previously added classes are removed and only then are the
 * new classes added.
 *
 * @animations
 * **add** - happens just before the class is applied to the elements
 *
 * **remove** - happens just before the class is removed from the element
 *
 * @element ANY
 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class
 *   names, an array, or a map of class names to boolean values. In the case of a map, the
 *   names of the properties whose values are truthy will be added as css classes to the
 *   element.
 *
 * @example Example that demonstrates basic bindings via ngClass directive.
   <example>
     <file name="index.html">
       <p ng-class="{strike: deleted, bold: important, 'has-error': error}">Map Syntax Example</p>
       <label>
          <input type="checkbox" ng-model="deleted">
          deleted (apply "strike" class)
       </label><br>
       <label>
          <input type="checkbox" ng-model="important">
          important (apply "bold" class)
       </label><br>
       <label>
          <input type="checkbox" ng-model="error">
          error (apply "has-error" class)
       </label>
       <hr>
       <p ng-class="style">Using String Syntax</p>
       <input type="text" ng-model="style"
              placeholder="Type: bold strike red" aria-label="Type: bold strike red">
       <hr>
       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
       <input ng-model="style1"
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red"><br>
       <input ng-model="style2"
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 2"><br>
       <input ng-model="style3"
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 3"><br>
       <hr>
       <p ng-class="[style4, {orange: warning}]">Using Array and Map Syntax</p>
       <input ng-model="style4" placeholder="Type: bold, strike" aria-label="Type: bold, strike"><br>
       <label><input type="checkbox" ng-model="warning"> warning (apply "orange" class)</label>
     </file>
     <file name="style.css">
       .strike {
           text-decoration: line-through;
       }
       .bold {
           font-weight: bold;
       }
       .red {
           color: red;
       }
       .has-error {
           color: red;
           background-color: yellow;
       }
       .orange {
           color: orange;
       }
     </file>
     <file name="protractor.js" type="protractor">
       var ps = element.all(by.css('p'));

       it('should let you toggle the class', function() {

         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
         expect(ps.first().getAttribute('class')).not.toMatch(/has-error/);

         element(by.model('important')).click();
         expect(ps.first().getAttribute('class')).toMatch(/bold/);

         element(by.model('error')).click();
         expect(ps.first().getAttribute('class')).toMatch(/has-error/);
       });

       it('should let you toggle string example', function() {
         expect(ps.get(1).getAttribute('class')).toBe('');
         element(by.model('style')).clear();
         element(by.model('style')).sendKeys('red');
         expect(ps.get(1).getAttribute('class')).toBe('red');
       });

       it('array example should have 3 classes', function() {
         expect(ps.get(2).getAttribute('class')).toBe('');
         element(by.model('style1')).sendKeys('bold');
         element(by.model('style2')).sendKeys('strike');
         element(by.model('style3')).sendKeys('red');
         expect(ps.get(2).getAttribute('class')).toBe('bold strike red');
       });

       it('array with map example should have 2 classes', function() {
         expect(ps.last().getAttribute('class')).toBe('');
         element(by.model('style4')).sendKeys('bold');
         element(by.model('warning')).click();
         expect(ps.last().getAttribute('class')).toBe('bold orange');
       });
     </file>
   </example>

   ## Animations

   The example below demonstrates how to perform animations using ngClass.

   <example module="ngAnimate" deps="angular-animate.js" animations="true">
     <file name="index.html">
      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
      <br>
      <span class="base-class" ng-class="myVar">Sample Text</span>
     </file>
     <file name="style.css">
       .base-class {
         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
       }

       .base-class.my-class {
         color: red;
         font-size:3em;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class', function() {
         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);

         element(by.id('setbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).
           toMatch(/my-class/);

         element(by.id('clearbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);
       });
     </file>
   </example>


   ## ngClass and pre-existing CSS3 Transitions/Animations
   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
   to view the step by step details of {@link $animate#addClass $animate.addClass} and
   {@link $animate#removeClass $animate.removeClass}.
 */
var ngClassDirective = classDirective('', true);

/**
 * @ngdoc directive
 * @name ngClassOdd
 * @restrict AC
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except they work in
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
 *
 * This directive can be applied only within the scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @element ANY
 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example>
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}}
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
     </file>
   </example>
 */
var ngClassOddDirective = classDirective('Odd', 0);

/**
 * @ngdoc directive
 * @name ngClassEven
 * @restrict AC
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except they work in
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
 *
 * This directive can be applied only within the scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @element ANY
 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
 *   result of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example>
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}} &nbsp; &nbsp; &nbsp;
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
     </file>
   </example>
 */
var ngClassEvenDirective = classDirective('Even', 1);

/**
 * @ngdoc directive
 * @name ngCloak
 * @restrict AC
 *
 * @description
 * The `ngCloak` directive is used to prevent the Angular html template from being briefly
 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
 * directive to avoid the undesirable flicker effect caused by the html template display.
 *
 * The directive can be applied to the `<body>` element, but the preferred usage is to apply
 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
 * of the browser view.
 *
 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
 * `angular.min.js`.
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```css
 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
 *   display: none !important;
 * }
 * ```
 *
 * When this css rule is loaded by the browser, all html elements (including their children) that
 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
 * during the compilation of the template it deletes the `ngCloak` element attribute, making
 * the compiled element visible.
 *
 * For the best result, the `angular.js` script must be loaded in the head section of the html
 * document; alternatively, the css rule above must be included in the external stylesheet of the
 * application.
 *
 * @element ANY
 *
 * @example
   <example>
     <file name="index.html">
        <div id="template1" ng-cloak>{{ 'hello' }}</div>
        <div id="template2" class="ng-cloak">{{ 'world' }}</div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should remove the template directive and css class', function() {
         expect($('#template1').getAttribute('ng-cloak')).
           toBeNull();
         expect($('#template2').getAttribute('ng-cloak')).
           toBeNull();
       });
     </file>
   </example>
 *
 */
var ngCloakDirective = ngDirective({
  compile: function(element, attr) {
    attr.$set('ngCloak', undefined);
    element.removeClass('ng-cloak');
  }
});

/**
 * @ngdoc directive
 * @name ngController
 *
 * @description
 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
 * supports the principles behind the Model-View-Controller design pattern.
 *
 * MVC components in angular:
 *
 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties
 *   are accessed through bindings.
 * * View — The template (HTML with data bindings) that is rendered into the View.
 * * Controller — The `ngController` directive specifies a Controller class; the class contains business
 *   logic behind the application to decorate the scope with functions and values
 *
 * Note that you can also attach controllers to the DOM by declaring it in a route definition
 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
 * again using `ng-controller` in the template itself.  This will cause the controller to be attached
 * and executed twice.
 *
 * @element ANY
 * @scope
 * @priority 500
 * @param {expression} ngController Name of a constructor function registered with the current
 * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}
 * that on the current scope evaluates to a constructor function.
 *
 * The controller instance can be published into a scope property by specifying
 * `ng-controller="as propertyName"`.
 *
 * If the current `$controllerProvider` is configured to use globals (via
 * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may
 * also be the name of a globally accessible constructor function (not recommended).
 *
 * @example
 * Here is a simple form for editing user contact information. Adding, removing, clearing, and
 * greeting are methods declared on the controller (see source tab). These methods can
 * easily be called from the angular markup. Any changes to the data are automatically reflected
 * in the View without the need for a manual update.
 *
 * Two different declaration styles are included below:
 *
 * * one binds methods and properties directly onto the controller using `this`:
 * `ng-controller="SettingsController1 as settings"`
 * * one injects `$scope` into the controller:
 * `ng-controller="SettingsController2"`
 *
 * The second option is more common in the Angular community, and is generally used in boilerplates
 * and in this guide. However, there are advantages to binding properties directly to the controller
 * and avoiding scope.
 *
 * * Using `controller as` makes it obvious which controller you are accessing in the template when
 * multiple controllers apply to an element.
 * * If you are writing your controllers as classes you have easier access to the properties and
 * methods, which will appear on the scope, from inside the controller code.
 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
 * inheritance masking primitives.
 *
 * This example demonstrates the `controller as` syntax.
 *
 * <example name="ngControllerAs" module="controllerAsExample">
 *   <file name="index.html">
 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
 *      <label>Name: <input type="text" ng-model="settings.name"/></label>
 *      <button ng-click="settings.greet()">greet</button><br/>
 *      Contact:
 *      <ul>
 *        <li ng-repeat="contact in settings.contacts">
 *          <select ng-model="contact.type" aria-label="Contact method" id="select_{{$index}}">
 *             <option>phone</option>
 *             <option>email</option>
 *          </select>
 *          <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
 *          <button ng-click="settings.clearContact(contact)">clear</button>
 *          <button ng-click="settings.removeContact(contact)" aria-label="Remove">X</button>
 *        </li>
 *        <li><button ng-click="settings.addContact()">add</button></li>
 *     </ul>
 *    </div>
 *   </file>
 *   <file name="app.js">
 *    angular.module('controllerAsExample', [])
 *      .controller('SettingsController1', SettingsController1);
 *
 *    function SettingsController1() {
 *      this.name = "John Smith";
 *      this.contacts = [
 *        {type: 'phone', value: '408 555 1212'},
 *        {type: 'email', value: 'john.smith@example.org'} ];
 *    }
 *
 *    SettingsController1.prototype.greet = function() {
 *      alert(this.name);
 *    };
 *
 *    SettingsController1.prototype.addContact = function() {
 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
 *    };
 *
 *    SettingsController1.prototype.removeContact = function(contactToRemove) {
 *     var index = this.contacts.indexOf(contactToRemove);
 *      this.contacts.splice(index, 1);
 *    };
 *
 *    SettingsController1.prototype.clearContact = function(contact) {
 *      contact.type = 'phone';
 *      contact.value = '';
 *    };
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     it('should check controller as', function() {
 *       var container = element(by.id('ctrl-as-exmpl'));
 *         expect(container.element(by.model('settings.name'))
 *           .getAttribute('value')).toBe('John Smith');
 *
 *       var firstRepeat =
 *           container.element(by.repeater('contact in settings.contacts').row(0));
 *       var secondRepeat =
 *           container.element(by.repeater('contact in settings.contacts').row(1));
 *
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('408 555 1212');
 *
 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('john.smith@example.org');
 *
 *       firstRepeat.element(by.buttonText('clear')).click();
 *
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('');
 *
 *       container.element(by.buttonText('add')).click();
 *
 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))
 *           .element(by.model('contact.value'))
 *           .getAttribute('value'))
 *           .toBe('yourname@example.org');
 *     });
 *   </file>
 * </example>
 *
 * This example demonstrates the "attach to `$scope`" style of controller.
 *
 * <example name="ngController" module="controllerExample">
 *  <file name="index.html">
 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
 *     <label>Name: <input type="text" ng-model="name"/></label>
 *     <button ng-click="greet()">greet</button><br/>
 *     Contact:
 *     <ul>
 *       <li ng-repeat="contact in contacts">
 *         <select ng-model="contact.type" id="select_{{$index}}">
 *            <option>phone</option>
 *            <option>email</option>
 *         </select>
 *         <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
 *         <button ng-click="clearContact(contact)">clear</button>
 *         <button ng-click="removeContact(contact)">X</button>
 *       </li>
 *       <li>[ <button ng-click="addContact()">add</button> ]</li>
 *    </ul>
 *   </div>
 *  </file>
 *  <file name="app.js">
 *   angular.module('controllerExample', [])
 *     .controller('SettingsController2', ['$scope', SettingsController2]);
 *
 *   function SettingsController2($scope) {
 *     $scope.name = "John Smith";
 *     $scope.contacts = [
 *       {type:'phone', value:'408 555 1212'},
 *       {type:'email', value:'john.smith@example.org'} ];
 *
 *     $scope.greet = function() {
 *       alert($scope.name);
 *     };
 *
 *     $scope.addContact = function() {
 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
 *     };
 *
 *     $scope.removeContact = function(contactToRemove) {
 *       var index = $scope.contacts.indexOf(contactToRemove);
 *       $scope.contacts.splice(index, 1);
 *     };
 *
 *     $scope.clearContact = function(contact) {
 *       contact.type = 'phone';
 *       contact.value = '';
 *     };
 *   }
 *  </file>
 *  <file name="protractor.js" type="protractor">
 *    it('should check controller', function() {
 *      var container = element(by.id('ctrl-exmpl'));
 *
 *      expect(container.element(by.model('name'))
 *          .getAttribute('value')).toBe('John Smith');
 *
 *      var firstRepeat =
 *          container.element(by.repeater('contact in contacts').row(0));
 *      var secondRepeat =
 *          container.element(by.repeater('contact in contacts').row(1));
 *
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('408 555 1212');
 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('john.smith@example.org');
 *
 *      firstRepeat.element(by.buttonText('clear')).click();
 *
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('');
 *
 *      container.element(by.buttonText('add')).click();
 *
 *      expect(container.element(by.repeater('contact in contacts').row(2))
 *          .element(by.model('contact.value'))
 *          .getAttribute('value'))
 *          .toBe('yourname@example.org');
 *    });
 *  </file>
 *</example>

 */
var ngControllerDirective = [function() {
  return {
    restrict: 'A',
    scope: true,
    controller: '@',
    priority: 500
  };
}];

/**
 * @ngdoc directive
 * @name ngCsp
 *
 * @element html
 * @description
 *
 * Angular has some features that can break certain
 * [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) rules.
 *
 * If you intend to implement these rules then you must tell Angular not to use these features.
 *
 * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.
 *
 *
 * The following rules affect Angular:
 *
 * * `unsafe-eval`: this rule forbids apps to use `eval` or `Function(string)` generated functions
 * (among other things). Angular makes use of this in the {@link $parse} service to provide a 30%
 * increase in the speed of evaluating Angular expressions.
 *
 * * `unsafe-inline`: this rule forbids apps from inject custom styles into the document. Angular
 * makes use of this to include some CSS rules (e.g. {@link ngCloak} and {@link ngHide}).
 * To make these directives work when a CSP rule is blocking inline styles, you must link to the
 * `angular-csp.css` in your HTML manually.
 *
 * If you do not provide `ngCsp` then Angular tries to autodetect if CSP is blocking unsafe-eval
 * and automatically deactivates this feature in the {@link $parse} service. This autodetection,
 * however, triggers a CSP error to be logged in the console:
 *
 * ```
 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of
 * script in the following Content Security Policy directive: "default-src 'self'". Note that
 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.
 * ```
 *
 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`
 * directive on an element of the HTML document that appears before the `<script>` tag that loads
 * the `angular.js` file.
 *
 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
 *
 * You can specify which of the CSP related Angular features should be deactivated by providing
 * a value for the `ng-csp` attribute. The options are as follows:
 *
 * * no-inline-style: this stops Angular from injecting CSS styles into the DOM
 *
 * * no-unsafe-eval: this stops Angular from optimizing $parse with unsafe eval of strings
 *
 * You can use these values in the following combinations:
 *
 *
 * * No declaration means that Angular will assume that you can do inline styles, but it will do
 * a runtime check for unsafe-eval. E.g. `<body>`. This is backwardly compatible with previous versions
 * of Angular.
 *
 * * A simple `ng-csp` (or `data-ng-csp`) attribute will tell Angular to deactivate both inline
 * styles and unsafe eval. E.g. `<body ng-csp>`. This is backwardly compatible with previous versions
 * of Angular.
 *
 * * Specifying only `no-unsafe-eval` tells Angular that we must not use eval, but that we can inject
 * inline styles. E.g. `<body ng-csp="no-unsafe-eval">`.
 *
 * * Specifying only `no-inline-style` tells Angular that we must not inject styles, but that we can
 * run eval - no automatic check for unsafe eval will occur. E.g. `<body ng-csp="no-inline-style">`
 *
 * * Specifying both `no-unsafe-eval` and `no-inline-style` tells Angular that we must not inject
 * styles nor use eval, which is the same as an empty: ng-csp.
 * E.g.`<body ng-csp="no-inline-style;no-unsafe-eval">`
 *
 * @example
 * This example shows how to apply the `ngCsp` directive to the `html` tag.
   ```html
     <!doctype html>
     <html ng-app ng-csp>
     ...
     ...
     </html>
   ```
  * @example
      // Note: the suffix `.csp` in the example name triggers
      // csp mode in our http server!
      <example name="example.csp" module="cspExample" ng-csp="true">
        <file name="index.html">
          <div ng-controller="MainController as ctrl">
            <div>
              <button ng-click="ctrl.inc()" id="inc">Increment</button>
              <span id="counter">
                {{ctrl.counter}}
              </span>
            </div>

            <div>
              <button ng-click="ctrl.evil()" id="evil">Evil</button>
              <span id="evilError">
                {{ctrl.evilError}}
              </span>
            </div>
          </div>
        </file>
        <file name="script.js">
           angular.module('cspExample', [])
             .controller('MainController', function() {
                this.counter = 0;
                this.inc = function() {
                  this.counter++;
                };
                this.evil = function() {
                  // jshint evil:true
                  try {
                    eval('1+2');
                  } catch (e) {
                    this.evilError = e.message;
                  }
                };
              });
        </file>
        <file name="protractor.js" type="protractor">
          var util, webdriver;

          var incBtn = element(by.id('inc'));
          var counter = element(by.id('counter'));
          var evilBtn = element(by.id('evil'));
          var evilError = element(by.id('evilError'));

          function getAndClearSevereErrors() {
            return browser.manage().logs().get('browser').then(function(browserLog) {
              return browserLog.filter(function(logEntry) {
                return logEntry.level.value > webdriver.logging.Level.WARNING.value;
              });
            });
          }

          function clearErrors() {
            getAndClearSevereErrors();
          }

          function expectNoErrors() {
            getAndClearSevereErrors().then(function(filteredLog) {
              expect(filteredLog.length).toEqual(0);
              if (filteredLog.length) {
                console.log('browser console errors: ' + util.inspect(filteredLog));
              }
            });
          }

          function expectError(regex) {
            getAndClearSevereErrors().then(function(filteredLog) {
              var found = false;
              filteredLog.forEach(function(log) {
                if (log.message.match(regex)) {
                  found = true;
                }
              });
              if (!found) {
                throw new Error('expected an error that matches ' + regex);
              }
            });
          }

          beforeEach(function() {
            util = require('util');
            webdriver = require('protractor/node_modules/selenium-webdriver');
          });

          // For now, we only test on Chrome,
          // as Safari does not load the page with Protractor's injected scripts,
          // and Firefox webdriver always disables content security policy (#6358)
          if (browser.params.browser !== 'chrome') {
            return;
          }

          it('should not report errors when the page is loaded', function() {
            // clear errors so we are not dependent on previous tests
            clearErrors();
            // Need to reload the page as the page is already loaded when
            // we come here
            browser.driver.getCurrentUrl().then(function(url) {
              browser.get(url);
            });
            expectNoErrors();
          });

          it('should evaluate expressions', function() {
            expect(counter.getText()).toEqual('0');
            incBtn.click();
            expect(counter.getText()).toEqual('1');
            expectNoErrors();
          });

          it('should throw and report an error when using "eval"', function() {
            evilBtn.click();
            expect(evilError.getText()).toMatch(/Content Security Policy/);
            expectError(/Content Security Policy/);
          });
        </file>
      </example>
  */

// ngCsp is not implemented as a proper directive any more, because we need it be processed while we
// bootstrap the system (before $parse is instantiated), for this reason we just have
// the csp() fn that looks for the `ng-csp` attribute anywhere in the current doc

/**
 * @ngdoc directive
 * @name ngClick
 *
 * @description
 * The ngClick directive allows you to specify custom behavior when
 * an element is clicked.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
 * click. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-click="count = count + 1" ng-init="count=0">
        Increment
      </button>
      <span>
        count: {{count}}
      </span>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-click', function() {
         expect(element(by.binding('count')).getText()).toMatch('0');
         element(by.css('button')).click();
         expect(element(by.binding('count')).getText()).toMatch('1');
       });
     </file>
   </example>
 */
/*
 * A collection of directives that allows creation of custom event handlers that are defined as
 * angular expressions and are compiled and executed within the current scope.
 */
var ngEventDirectives = {};

// For events that might fire synchronously during DOM manipulation
// we need to execute their event handlers asynchronously using $evalAsync,
// so that they are not executed in an inconsistent state.
var forceAsyncEvents = {
  'blur': true,
  'focus': true
};
forEach(
  'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),
  function(eventName) {
    var directiveName = directiveNormalize('ng-' + eventName);
    ngEventDirectives[directiveName] = ['$parse', '$rootScope', function($parse, $rootScope) {
      return {
        restrict: 'A',
        compile: function($element, attr) {
          // We expose the powerful $event object on the scope that provides access to the Window,
          // etc. that isn't protected by the fast paths in $parse.  We explicitly request better
          // checks at the cost of speed since event handler expressions are not executed as
          // frequently as regular change detection.
          var fn = $parse(attr[directiveName], /* interceptorFn */ null, /* expensiveChecks */ true);
          return function ngEventHandler(scope, element) {
            element.on(eventName, function(event) {
              var callback = function() {
                fn(scope, {$event:event});
              };
              if (forceAsyncEvents[eventName] && $rootScope.$$phase) {
                scope.$evalAsync(callback);
              } else {
                scope.$apply(callback);
              }
            });
          };
        }
      };
    }];
  }
);

/**
 * @ngdoc directive
 * @name ngDblclick
 *
 * @description
 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
 * a dblclick. (The Event object is available as `$event`)
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-dblclick="count = count + 1" ng-init="count=0">
        Increment (on double click)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMousedown
 *
 * @description
 * The ngMousedown directive allows you to specify custom behavior on mousedown event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mousedown="count = count + 1" ng-init="count=0">
        Increment (on mouse down)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMouseup
 *
 * @description
 * Specify custom behavior on mouseup event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseup="count = count + 1" ng-init="count=0">
        Increment (on mouse up)
      </button>
      count: {{count}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngMouseover
 *
 * @description
 * Specify custom behavior on mouseover event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseover="count = count + 1" ng-init="count=0">
        Increment (when mouse is over)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMouseenter
 *
 * @description
 * Specify custom behavior on mouseenter event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseenter="count = count + 1" ng-init="count=0">
        Increment (when mouse enters)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMouseleave
 *
 * @description
 * Specify custom behavior on mouseleave event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseleave="count = count + 1" ng-init="count=0">
        Increment (when mouse leaves)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMousemove
 *
 * @description
 * Specify custom behavior on mousemove event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mousemove="count = count + 1" ng-init="count=0">
        Increment (when mouse moves)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngKeydown
 *
 * @description
 * Specify custom behavior on keydown event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-keydown="count = count + 1" ng-init="count=0">
      key down count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngKeyup
 *
 * @description
 * Specify custom behavior on keyup event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example>
     <file name="index.html">
       <p>Typing in the input box below updates the key count</p>
       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}

       <p>Typing in the input box below updates the keycode</p>
       <input ng-keyup="event=$event">
       <p>event keyCode: {{ event.keyCode }}</p>
       <p>event altKey: {{ event.altKey }}</p>
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngKeypress
 *
 * @description
 * Specify custom behavior on keypress event.
 *
 * @element ANY
 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
 * and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-keypress="count = count + 1" ng-init="count=0">
      key press count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngSubmit
 *
 * @description
 * Enables binding angular expressions to onsubmit events.
 *
 * Additionally it prevents the default action (which for form means sending the request to the
 * server and reloading the current page), but only if the form does not contain `action`,
 * `data-action`, or `x-action` attributes.
 *
 * <div class="alert alert-warning">
 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and
 * `ngSubmit` handlers together. See the
 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}
 * for a detailed discussion of when `ngSubmit` may be triggered.
 * </div>
 *
 * @element form
 * @priority 0
 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
 * ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example module="submitExample">
     <file name="index.html">
      <script>
        angular.module('submitExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.list = [];
            $scope.text = 'hello';
            $scope.submit = function() {
              if ($scope.text) {
                $scope.list.push(this.text);
                $scope.text = '';
              }
            };
          }]);
      </script>
      <form ng-submit="submit()" ng-controller="ExampleController">
        Enter text and hit enter:
        <input type="text" ng-model="text" name="text" />
        <input type="submit" id="submit" value="Submit" />
        <pre>list={{list}}</pre>
      </form>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-submit', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
         expect(element(by.model('text')).getAttribute('value')).toBe('');
       });
       it('should ignore empty strings', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
        });
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngFocus
 *
 * @description
 * Specify custom behavior on focus event.
 *
 * Note: As the `focus` event is executed synchronously when calling `input.focus()`
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
 * during an `$apply` to ensure a consistent state.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
 * focus. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */

/**
 * @ngdoc directive
 * @name ngBlur
 *
 * @description
 * Specify custom behavior on blur event.
 *
 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when
 * an element has lost focus.
 *
 * Note: As the `blur` event is executed synchronously also during DOM manipulations
 * (e.g. removing a focussed input),
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
 * during an `$apply` to ensure a consistent state.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
 * blur. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */

/**
 * @ngdoc directive
 * @name ngCopy
 *
 * @description
 * Specify custom behavior on copy event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
 * copy. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
      copied: {{copied}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngCut
 *
 * @description
 * Specify custom behavior on cut event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
 * cut. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
      cut: {{cut}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngPaste
 *
 * @description
 * Specify custom behavior on paste event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
 * paste. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
      pasted: {{paste}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngIf
 * @restrict A
 * @multiElement
 *
 * @description
 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
 * {expression}. If the expression assigned to `ngIf` evaluates to a false
 * value then the element is removed from the DOM, otherwise a clone of the
 * element is reinserted into the DOM.
 *
 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
 * element in the DOM rather than changing its visibility via the `display` css property.  A common
 * case when this difference is significant is when using css selectors that rely on an element's
 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
 *
 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
 * is created when the element is restored.  The scope created within `ngIf` inherits from
 * its parent scope using
 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
 * An important implication of this is if `ngModel` is used within `ngIf` to bind to
 * a javascript primitive defined in the parent scope. In this case any modifications made to the
 * variable within the child scope will override (hide) the value in the parent scope.
 *
 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
 * is if an element's class attribute is directly modified after it's compiled, using something like
 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
 * the added class will be lost because the original compiled state is used to regenerate the element.
 *
 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
 * and `leave` effects.
 *
 * @animations
 * enter - happens just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container
 * leave - happens just before the `ngIf` contents are removed from the DOM
 *
 * @element ANY
 * @scope
 * @priority 600
 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
 *     element is added to the DOM tree.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      <label>Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /></label><br/>
      Show when checked:
      <span ng-if="checked" class="animate-if">
        This is removed when the checkbox is unchecked.
      </span>
    </file>
    <file name="animations.css">
      .animate-if {
        background:white;
        border:1px solid black;
        padding:10px;
      }

      .animate-if.ng-enter, .animate-if.ng-leave {
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
      }

      .animate-if.ng-enter,
      .animate-if.ng-leave.ng-leave-active {
        opacity:0;
      }

      .animate-if.ng-leave,
      .animate-if.ng-enter.ng-enter-active {
        opacity:1;
      }
    </file>
  </example>
 */
var ngIfDirective = ['$animate', function($animate) {
  return {
    multiElement: true,
    transclude: 'element',
    priority: 600,
    terminal: true,
    restrict: 'A',
    $$tlb: true,
    link: function($scope, $element, $attr, ctrl, $transclude) {
        var block, childScope, previousElements;
        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {

          if (value) {
            if (!childScope) {
              $transclude(function(clone, newScope) {
                childScope = newScope;
                clone[clone.length++] = document.createComment(' end ngIf: ' + $attr.ngIf + ' ');
                // Note: We only need the first/last node of the cloned nodes.
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                // by a directive with templateUrl when its template arrives.
                block = {
                  clone: clone
                };
                $animate.enter(clone, $element.parent(), $element);
              });
            }
          } else {
            if (previousElements) {
              previousElements.remove();
              previousElements = null;
            }
            if (childScope) {
              childScope.$destroy();
              childScope = null;
            }
            if (block) {
              previousElements = getBlockNodes(block.clone);
              $animate.leave(previousElements).then(function() {
                previousElements = null;
              });
              block = null;
            }
          }
        });
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngInclude
 * @restrict ECA
 *
 * @description
 * Fetches, compiles and includes an external HTML fragment.
 *
 * By default, the template URL is restricted to the same domain and protocol as the
 * application document. This is done by calling {@link $sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
 * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link
 * ng.$sce Strict Contextual Escaping}.
 *
 * In addition, the browser's
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
 * policy may further restrict whether the template is successfully loaded.
 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
 * access on some browsers.
 *
 * @animations
 * enter - animation is used to bring new content into the browser.
 * leave - animation is used to animate existing content away.
 *
 * The enter and leave animation occur concurrently.
 *
 * @scope
 * @priority 400
 *
 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
 * @param {string=} onload Expression to evaluate when a new partial is loaded.
 *                  <div class="alert alert-warning">
 *                  **Note:** When using onload on SVG elements in IE11, the browser will try to call
 *                  a function with the name on the window element, which will usually throw a
 *                  "function is undefined" error. To fix this, you can instead use `data-onload` or a
 *                  different form that {@link guide/directive#normalization matches} `onload`.
 *                  </div>
   *
 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
 *                  $anchorScroll} to scroll the viewport after the content is loaded.
 *
 *                  - If the attribute is not set, disable scrolling.
 *                  - If the attribute is set without value, enable scrolling.
 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
 *
 * @example
  <example module="includeExample" deps="angular-animate.js" animations="true">
    <file name="index.html">
     <div ng-controller="ExampleController">
       <select ng-model="template" ng-options="t.name for t in templates">
        <option value="">(blank)</option>
       </select>
       url of the template: <code>{{template.url}}</code>
       <hr/>
       <div class="slide-animate-container">
         <div class="slide-animate" ng-include="template.url"></div>
       </div>
     </div>
    </file>
    <file name="script.js">
      angular.module('includeExample', ['ngAnimate'])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.templates =
            [ { name: 'template1.html', url: 'template1.html'},
              { name: 'template2.html', url: 'template2.html'} ];
          $scope.template = $scope.templates[0];
        }]);
     </file>
    <file name="template1.html">
      Content of template1.html
    </file>
    <file name="template2.html">
      Content of template2.html
    </file>
    <file name="animations.css">
      .slide-animate-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .slide-animate {
        padding:10px;
      }

      .slide-animate.ng-enter, .slide-animate.ng-leave {
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
        display:block;
        padding:10px;
      }

      .slide-animate.ng-enter {
        top:-50px;
      }
      .slide-animate.ng-enter.ng-enter-active {
        top:0;
      }

      .slide-animate.ng-leave {
        top:0;
      }
      .slide-animate.ng-leave.ng-leave-active {
        top:50px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var templateSelect = element(by.model('template'));
      var includeElem = element(by.css('[ng-include]'));

      it('should load template1.html', function() {
        expect(includeElem.getText()).toMatch(/Content of template1.html/);
      });

      it('should load template2.html', function() {
        if (browser.params.browser == 'firefox') {
          // Firefox can't handle using selects
          // See https://github.com/angular/protractor/issues/480
          return;
        }
        templateSelect.click();
        templateSelect.all(by.css('option')).get(2).click();
        expect(includeElem.getText()).toMatch(/Content of template2.html/);
      });

      it('should change to blank', function() {
        if (browser.params.browser == 'firefox') {
          // Firefox can't handle using selects
          return;
        }
        templateSelect.click();
        templateSelect.all(by.css('option')).get(0).click();
        expect(includeElem.isPresent()).toBe(false);
      });
    </file>
  </example>
 */


/**
 * @ngdoc event
 * @name ngInclude#$includeContentRequested
 * @eventType emit on the scope ngInclude was declared in
 * @description
 * Emitted every time the ngInclude content is requested.
 *
 * @param {Object} angularEvent Synthetic event object.
 * @param {String} src URL of content to load.
 */


/**
 * @ngdoc event
 * @name ngInclude#$includeContentLoaded
 * @eventType emit on the current ngInclude scope
 * @description
 * Emitted every time the ngInclude content is reloaded.
 *
 * @param {Object} angularEvent Synthetic event object.
 * @param {String} src URL of content to load.
 */


/**
 * @ngdoc event
 * @name ngInclude#$includeContentError
 * @eventType emit on the scope ngInclude was declared in
 * @description
 * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)
 *
 * @param {Object} angularEvent Synthetic event object.
 * @param {String} src URL of content to load.
 */
var ngIncludeDirective = ['$templateRequest', '$anchorScroll', '$animate',
                  function($templateRequest,   $anchorScroll,   $animate) {
  return {
    restrict: 'ECA',
    priority: 400,
    terminal: true,
    transclude: 'element',
    controller: angular.noop,
    compile: function(element, attr) {
      var srcExp = attr.ngInclude || attr.src,
          onloadExp = attr.onload || '',
          autoScrollExp = attr.autoscroll;

      return function(scope, $element, $attr, ctrl, $transclude) {
        var changeCounter = 0,
            currentScope,
            previousElement,
            currentElement;

        var cleanupLastIncludeContent = function() {
          if (previousElement) {
            previousElement.remove();
            previousElement = null;
          }
          if (currentScope) {
            currentScope.$destroy();
            currentScope = null;
          }
          if (currentElement) {
            $animate.leave(currentElement).then(function() {
              previousElement = null;
            });
            previousElement = currentElement;
            currentElement = null;
          }
        };

        scope.$watch(srcExp, function ngIncludeWatchAction(src) {
          var afterAnimation = function() {
            if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
              $anchorScroll();
            }
          };
          var thisChangeId = ++changeCounter;

          if (src) {
            //set the 2nd param to true to ignore the template request error so that the inner
            //contents and scope can be cleaned up.
            $templateRequest(src, true).then(function(response) {
              if (scope.$$destroyed) return;

              if (thisChangeId !== changeCounter) return;
              var newScope = scope.$new();
              ctrl.template = response;

              // Note: This will also link all children of ng-include that were contained in the original
              // html. If that content contains controllers, ... they could pollute/change the scope.
              // However, using ng-include on an element with additional content does not make sense...
              // Note: We can't remove them in the cloneAttchFn of $transclude as that
              // function is called before linking the content, which would apply child
              // directives to non existing elements.
              var clone = $transclude(newScope, function(clone) {
                cleanupLastIncludeContent();
                $animate.enter(clone, null, $element).then(afterAnimation);
              });

              currentScope = newScope;
              currentElement = clone;

              currentScope.$emit('$includeContentLoaded', src);
              scope.$eval(onloadExp);
            }, function() {
              if (scope.$$destroyed) return;

              if (thisChangeId === changeCounter) {
                cleanupLastIncludeContent();
                scope.$emit('$includeContentError', src);
              }
            });
            scope.$emit('$includeContentRequested', src);
          } else {
            cleanupLastIncludeContent();
            ctrl.template = null;
          }
        });
      };
    }
  };
}];

// This directive is called during the $transclude call of the first `ngInclude` directive.
// It will replace and compile the content of the element with the loaded template.
// We need this directive so that the element content is already filled when
// the link function of another directive on the same element as ngInclude
// is called.
var ngIncludeFillContentDirective = ['$compile',
  function($compile) {
    return {
      restrict: 'ECA',
      priority: -400,
      require: 'ngInclude',
      link: function(scope, $element, $attr, ctrl) {
        if (toString.call($element[0]).match(/SVG/)) {
          // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not
          // support innerHTML, so detect this here and try to generate the contents
          // specially.
          $element.empty();
          $compile(jqLiteBuildFragment(ctrl.template, document).childNodes)(scope,
              function namespaceAdaptedClone(clone) {
            $element.append(clone);
          }, {futureParentElement: $element});
          return;
        }

        $element.html(ctrl.template);
        $compile($element.contents())(scope);
      }
    };
  }];

/**
 * @ngdoc directive
 * @name ngInit
 * @restrict AC
 *
 * @description
 * The `ngInit` directive allows you to evaluate an expression in the
 * current scope.
 *
 * <div class="alert alert-danger">
 * This directive can be abused to add unnecessary amounts of logic into your templates.
 * There are only a few appropriate uses of `ngInit`, such as for aliasing special properties of
 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below; and for injecting data via
 * server side scripting. Besides these few cases, you should use {@link guide/controller controllers}
 * rather than `ngInit` to initialize values on a scope.
 * </div>
 *
 * <div class="alert alert-warning">
 * **Note**: If you have assignment in `ngInit` along with a {@link ng.$filter `filter`}, make
 * sure you have parentheses to ensure correct operator precedence:
 * <pre class="prettyprint">
 * `<div ng-init="test1 = ($index | toString)"></div>`
 * </pre>
 * </div>
 *
 * @priority 450
 *
 * @element ANY
 * @param {expression} ngInit {@link guide/expression Expression} to eval.
 *
 * @example
   <example module="initExample">
     <file name="index.html">
   <script>
     angular.module('initExample', [])
       .controller('ExampleController', ['$scope', function($scope) {
         $scope.list = [['a', 'b'], ['c', 'd']];
       }]);
   </script>
   <div ng-controller="ExampleController">
     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
       </div>
     </div>
   </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should alias index positions', function() {
         var elements = element.all(by.css('.example-init'));
         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
       });
     </file>
   </example>
 */
var ngInitDirective = ngDirective({
  priority: 450,
  compile: function() {
    return {
      pre: function(scope, element, attrs) {
        scope.$eval(attrs.ngInit);
      }
    };
  }
});

/**
 * @ngdoc directive
 * @name ngList
 *
 * @description
 * Text input that converts between a delimited string and an array of strings. The default
 * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom
 * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.
 *
 * The behaviour of the directive is affected by the use of the `ngTrim` attribute.
 * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each
 *   list item is respected. This implies that the user of the directive is responsible for
 *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a
 *   tab or newline character.
 * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected
 *   when joining the list items back together) and whitespace around each list item is stripped
 *   before it is added to the model.
 *
 * ### Example with Validation
 *
 * <example name="ngList-directive" module="listExample">
 *   <file name="app.js">
 *      angular.module('listExample', [])
 *        .controller('ExampleController', ['$scope', function($scope) {
 *          $scope.names = ['morpheus', 'neo', 'trinity'];
 *        }]);
 *   </file>
 *   <file name="index.html">
 *    <form name="myForm" ng-controller="ExampleController">
 *      <label>List: <input name="namesInput" ng-model="names" ng-list required></label>
 *      <span role="alert">
 *        <span class="error" ng-show="myForm.namesInput.$error.required">
 *        Required!</span>
 *      </span>
 *      <br>
 *      <tt>names = {{names}}</tt><br/>
 *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
 *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
 *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
 *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
 *     </form>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     var listInput = element(by.model('names'));
 *     var names = element(by.exactBinding('names'));
 *     var valid = element(by.binding('myForm.namesInput.$valid'));
 *     var error = element(by.css('span.error'));
 *
 *     it('should initialize to model', function() {
 *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');
 *       expect(valid.getText()).toContain('true');
 *       expect(error.getCssValue('display')).toBe('none');
 *     });
 *
 *     it('should be invalid if empty', function() {
 *       listInput.clear();
 *       listInput.sendKeys('');
 *
 *       expect(names.getText()).toContain('');
 *       expect(valid.getText()).toContain('false');
 *       expect(error.getCssValue('display')).not.toBe('none');
 *     });
 *   </file>
 * </example>
 *
 * ### Example - splitting on newline
 * <example name="ngList-directive-newlines">
 *   <file name="index.html">
 *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>
 *    <pre>{{ list | json }}</pre>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     it("should split the text by newlines", function() {
 *       var listInput = element(by.model('list'));
 *       var output = element(by.binding('list | json'));
 *       listInput.sendKeys('abc\ndef\nghi');
 *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');
 *     });
 *   </file>
 * </example>
 *
 * @element input
 * @param {string=} ngList optional delimiter that should be used to split the value.
 */
var ngListDirective = function() {
  return {
    restrict: 'A',
    priority: 100,
    require: 'ngModel',
    link: function(scope, element, attr, ctrl) {
      // We want to control whitespace trimming so we use this convoluted approach
      // to access the ngList attribute, which doesn't pre-trim the attribute
      var ngList = element.attr(attr.$attr.ngList) || ', ';
      var trimValues = attr.ngTrim !== 'false';
      var separator = trimValues ? trim(ngList) : ngList;

      var parse = function(viewValue) {
        // If the viewValue is invalid (say required but empty) it will be `undefined`
        if (isUndefined(viewValue)) return;

        var list = [];

        if (viewValue) {
          forEach(viewValue.split(separator), function(value) {
            if (value) list.push(trimValues ? trim(value) : value);
          });
        }

        return list;
      };

      ctrl.$parsers.push(parse);
      ctrl.$formatters.push(function(value) {
        if (isArray(value)) {
          return value.join(ngList);
        }

        return undefined;
      });

      // Override the standard $isEmpty because an empty array means the input is empty.
      ctrl.$isEmpty = function(value) {
        return !value || !value.length;
      };
    }
  };
};

/* global VALID_CLASS: true,
  INVALID_CLASS: true,
  PRISTINE_CLASS: true,
  DIRTY_CLASS: true,
  UNTOUCHED_CLASS: true,
  TOUCHED_CLASS: true,
*/

var VALID_CLASS = 'ng-valid',
    INVALID_CLASS = 'ng-invalid',
    PRISTINE_CLASS = 'ng-pristine',
    DIRTY_CLASS = 'ng-dirty',
    UNTOUCHED_CLASS = 'ng-untouched',
    TOUCHED_CLASS = 'ng-touched',
    PENDING_CLASS = 'ng-pending',
    EMPTY_CLASS = 'ng-empty',
    NOT_EMPTY_CLASS = 'ng-not-empty';

var ngModelMinErr = minErr('ngModel');

/**
 * @ngdoc type
 * @name ngModel.NgModelController
 *
 * @property {*} $viewValue The actual value from the control's view. For `input` elements, this is a
 * String. See {@link ngModel.NgModelController#$setViewValue} for information about when the $viewValue
 * is set.
 * @property {*} $modelValue The value in the model that the control is bound to.
 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
       the control reads value from the DOM. The functions are called in array order, each passing
       its return value through to the next. The last return value is forwarded to the
       {@link ngModel.NgModelController#$validators `$validators`} collection.

Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue
`$viewValue`}.

Returning `undefined` from a parser means a parse error occurred. In that case,
no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`
will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}
is set to `true`. The parse error is stored in `ngModel.$error.parse`.

 *
 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
       the model value changes. The functions are called in reverse array order, each passing the value through to the
       next. The last return value is used as the actual DOM value.
       Used to format / convert values for display in the control.
 * ```js
 * function formatter(value) {
 *   if (value) {
 *     return value.toUpperCase();
 *   }
 * }
 * ngModel.$formatters.push(formatter);
 * ```
 *
 * @property {Object.<string, function>} $validators A collection of validators that are applied
 *      whenever the model value changes. The key value within the object refers to the name of the
 *      validator while the function refers to the validation operation. The validation operation is
 *      provided with the model value as an argument and must return a true or false value depending
 *      on the response of that validation.
 *
 * ```js
 * ngModel.$validators.validCharacters = function(modelValue, viewValue) {
 *   var value = modelValue || viewValue;
 *   return /[0-9]+/.test(value) &&
 *          /[a-z]+/.test(value) &&
 *          /[A-Z]+/.test(value) &&
 *          /\W+/.test(value);
 * };
 * ```
 *
 * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to
 *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided
 *      is expected to return a promise when it is run during the model validation process. Once the promise
 *      is delivered then the validation status will be set to true when fulfilled and false when rejected.
 *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model
 *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator
 *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
 *      will only run once all synchronous validators have passed.
 *
 * Please note that if $http is used then it is important that the server returns a success HTTP response code
 * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.
 *
 * ```js
 * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {
 *   var value = modelValue || viewValue;
 *
 *   // Lookup user by username
 *   return $http.get('/api/users/' + value).
 *      then(function resolved() {
 *        //username exists, this means validation fails
 *        return $q.reject('exists');
 *      }, function rejected() {
 *        //username does not exist, therefore this validation passes
 *        return true;
 *      });
 * };
 * ```
 *
 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
 *     view value has changed. It is called with no arguments, and its return value is ignored.
 *     This can be used in place of additional $watches against the model value.
 *
 * @property {Object} $error An object hash with all failing validator ids as keys.
 * @property {Object} $pending An object hash with all pending validator ids as keys.
 *
 * @property {boolean} $untouched True if control has not lost focus yet.
 * @property {boolean} $touched True if control has lost focus.
 * @property {boolean} $pristine True if user has not interacted with the control yet.
 * @property {boolean} $dirty True if user has already interacted with the control.
 * @property {boolean} $valid True if there is no error.
 * @property {boolean} $invalid True if at least one error on the control.
 * @property {string} $name The name attribute of the control.
 *
 * @description
 *
 * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.
 * The controller contains services for data-binding, validation, CSS updates, and value formatting
 * and parsing. It purposefully does not contain any logic which deals with DOM rendering or
 * listening to DOM events.
 * Such DOM related logic should be provided by other directives which make use of
 * `NgModelController` for data-binding to control elements.
 * Angular provides this DOM logic for most {@link input `input`} elements.
 * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example
 * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.
 *
 * @example
 * ### Custom Control Example
 * This example shows how to use `NgModelController` with a custom control to achieve
 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
 * collaborate together to achieve the desired result.
 *
 * `contenteditable` is an HTML5 attribute, which tells the browser to let the element
 * contents be edited in place by the user.
 *
 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
 * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks
 * that content using the `$sce` service.
 *
 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
    <file name="style.css">
      [contenteditable] {
        border: 1px solid black;
        background-color: white;
        min-height: 20px;
      }

      .ng-invalid {
        border: 1px solid red;
      }

    </file>
    <file name="script.js">
      angular.module('customControl', ['ngSanitize']).
        directive('contenteditable', ['$sce', function($sce) {
          return {
            restrict: 'A', // only activate on element attribute
            require: '?ngModel', // get a hold of NgModelController
            link: function(scope, element, attrs, ngModel) {
              if (!ngModel) return; // do nothing if no ng-model

              // Specify how UI should be updated
              ngModel.$render = function() {
                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
              };

              // Listen for change events to enable binding
              element.on('blur keyup change', function() {
                scope.$evalAsync(read);
              });
              read(); // initialize

              // Write data to the model
              function read() {
                var html = element.html();
                // When we clear the content editable the browser leaves a <br> behind
                // If strip-br attribute is provided then we strip this out
                if ( attrs.stripBr && html == '<br>' ) {
                  html = '';
                }
                ngModel.$setViewValue(html);
              }
            }
          };
        }]);
    </file>
    <file name="index.html">
      <form name="myForm">
       <div contenteditable
            name="myWidget" ng-model="userContent"
            strip-br="true"
            required>Change me!</div>
        <span ng-show="myForm.myWidget.$error.required">Required!</span>
       <hr>
       <textarea ng-model="userContent" aria-label="Dynamic textarea"></textarea>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
    it('should data-bind and become invalid', function() {
      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {
        // SafariDriver can't handle contenteditable
        // and Firefox driver can't clear contenteditables very well
        return;
      }
      var contentEditable = element(by.css('[contenteditable]'));
      var content = 'Change me!';

      expect(contentEditable.getText()).toEqual(content);

      contentEditable.clear();
      contentEditable.sendKeys(protractor.Key.BACK_SPACE);
      expect(contentEditable.getText()).toEqual('');
      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
    });
    </file>
 * </example>
 *
 *
 */
var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate', '$timeout', '$rootScope', '$q', '$interpolate',
    function($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $rootScope, $q, $interpolate) {
  this.$viewValue = Number.NaN;
  this.$modelValue = Number.NaN;
  this.$$rawModelValue = undefined; // stores the parsed modelValue / model set from scope regardless of validity.
  this.$validators = {};
  this.$asyncValidators = {};
  this.$parsers = [];
  this.$formatters = [];
  this.$viewChangeListeners = [];
  this.$untouched = true;
  this.$touched = false;
  this.$pristine = true;
  this.$dirty = false;
  this.$valid = true;
  this.$invalid = false;
  this.$error = {}; // keep invalid keys here
  this.$$success = {}; // keep valid keys here
  this.$pending = undefined; // keep pending keys here
  this.$name = $interpolate($attr.name || '', false)($scope);
  this.$$parentForm = nullFormCtrl;

  var parsedNgModel = $parse($attr.ngModel),
      parsedNgModelAssign = parsedNgModel.assign,
      ngModelGet = parsedNgModel,
      ngModelSet = parsedNgModelAssign,
      pendingDebounce = null,
      parserValid,
      ctrl = this;

  this.$$setOptions = function(options) {
    ctrl.$options = options;
    if (options && options.getterSetter) {
      var invokeModelGetter = $parse($attr.ngModel + '()'),
          invokeModelSetter = $parse($attr.ngModel + '($$$p)');

      ngModelGet = function($scope) {
        var modelValue = parsedNgModel($scope);
        if (isFunction(modelValue)) {
          modelValue = invokeModelGetter($scope);
        }
        return modelValue;
      };
      ngModelSet = function($scope, newValue) {
        if (isFunction(parsedNgModel($scope))) {
          invokeModelSetter($scope, {$$$p: ctrl.$modelValue});
        } else {
          parsedNgModelAssign($scope, ctrl.$modelValue);
        }
      };
    } else if (!parsedNgModel.assign) {
      throw ngModelMinErr('nonassign', "Expression '{0}' is non-assignable. Element: {1}",
          $attr.ngModel, startingTag($element));
    }
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$render
   *
   * @description
   * Called when the view needs to be updated. It is expected that the user of the ng-model
   * directive will implement this method.
   *
   * The `$render()` method is invoked in the following situations:
   *
   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last
   *   committed value then `$render()` is called to update the input control.
   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and
   *   the `$viewValue` are different from last time.
   *
   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of
   * `$modelValue` and `$viewValue` are actually different from their previous value. If `$modelValue`
   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be
   * invoked if you only change a property on the objects.
   */
  this.$render = noop;

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$isEmpty
   *
   * @description
   * This is called when we need to determine if the value of an input is empty.
   *
   * For instance, the required directive does this to work out if the input has data or not.
   *
   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
   *
   * You can override this for input directives whose concept of being empty is different from the
   * default. The `checkboxInputType` directive does this because in its case a value of `false`
   * implies empty.
   *
   * @param {*} value The value of the input to check for emptiness.
   * @returns {boolean} True if `value` is "empty".
   */
  this.$isEmpty = function(value) {
    return isUndefined(value) || value === '' || value === null || value !== value;
  };

  this.$$updateEmptyClasses = function(value) {
    if (ctrl.$isEmpty(value)) {
      $animate.removeClass($element, NOT_EMPTY_CLASS);
      $animate.addClass($element, EMPTY_CLASS);
    } else {
      $animate.removeClass($element, EMPTY_CLASS);
      $animate.addClass($element, NOT_EMPTY_CLASS);
    }
  };


  var currentValidationRunId = 0;

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setValidity
   *
   * @description
   * Change the validity state, and notify the form.
   *
   * This method can be called within $parsers/$formatters or a custom validation implementation.
   * However, in most cases it should be sufficient to use the `ngModel.$validators` and
   * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.
   *
   * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned
   *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`
   *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.
   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
   * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),
   *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.
   *                          Skipped is used by Angular when validators do not run because of parse errors and
   *                          when `$asyncValidators` do not run because any of the `$validators` failed.
   */
  addSetValidityMethod({
    ctrl: this,
    $element: $element,
    set: function(object, property) {
      object[property] = true;
    },
    unset: function(object, property) {
      delete object[property];
    },
    $animate: $animate
  });

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setPristine
   *
   * @description
   * Sets the control to its pristine state.
   *
   * This method can be called to remove the `ng-dirty` class and set the control to its pristine
   * state (`ng-pristine` class). A model is considered to be pristine when the control
   * has not been changed from when first compiled.
   */
  this.$setPristine = function() {
    ctrl.$dirty = false;
    ctrl.$pristine = true;
    $animate.removeClass($element, DIRTY_CLASS);
    $animate.addClass($element, PRISTINE_CLASS);
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setDirty
   *
   * @description
   * Sets the control to its dirty state.
   *
   * This method can be called to remove the `ng-pristine` class and set the control to its dirty
   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed
   * from when first compiled.
   */
  this.$setDirty = function() {
    ctrl.$dirty = true;
    ctrl.$pristine = false;
    $animate.removeClass($element, PRISTINE_CLASS);
    $animate.addClass($element, DIRTY_CLASS);
    ctrl.$$parentForm.$setDirty();
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setUntouched
   *
   * @description
   * Sets the control to its untouched state.
   *
   * This method can be called to remove the `ng-touched` class and set the control to its
   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched
   * by default, however this function can be used to restore that state if the model has
   * already been touched by the user.
   */
  this.$setUntouched = function() {
    ctrl.$touched = false;
    ctrl.$untouched = true;
    $animate.setClass($element, UNTOUCHED_CLASS, TOUCHED_CLASS);
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setTouched
   *
   * @description
   * Sets the control to its touched state.
   *
   * This method can be called to remove the `ng-untouched` class and set the control to its
   * touched state (`ng-touched` class). A model is considered to be touched when the user has
   * first focused the control element and then shifted focus away from the control (blur event).
   */
  this.$setTouched = function() {
    ctrl.$touched = true;
    ctrl.$untouched = false;
    $animate.setClass($element, TOUCHED_CLASS, UNTOUCHED_CLASS);
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$rollbackViewValue
   *
   * @description
   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,
   * which may be caused by a pending debounced event or because the input is waiting for a some
   * future event.
   *
   * If you have an input that uses `ng-model-options` to set up debounced updates or updates that
   * depend on special events such as blur, you can have a situation where there is a period when
   * the `$viewValue` is out of sync with the ngModel's `$modelValue`.
   *
   * In this case, you can use `$rollbackViewValue()` to manually cancel the debounced / future update
   * and reset the input to the last committed view value.
   *
   * It is also possible that you run into difficulties if you try to update the ngModel's `$modelValue`
   * programmatically before these debounced/future events have resolved/occurred, because Angular's
   * dirty checking mechanism is not able to tell whether the model has actually changed or not.
   *
   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an
   * input which may have such events pending. This is important in order to make sure that the
   * input field will be updated with the new model value and any pending operations are cancelled.
   *
   * <example name="ng-model-cancel-update" module="cancel-update-example">
   *   <file name="app.js">
   *     angular.module('cancel-update-example', [])
   *
   *     .controller('CancelUpdateController', ['$scope', function($scope) {
   *       $scope.model = {};
   *
   *       $scope.setEmpty = function(e, value, rollback) {
   *         if (e.keyCode == 27) {
   *           e.preventDefault();
   *           if (rollback) {
   *             $scope.myForm[value].$rollbackViewValue();
   *           }
   *           $scope.model[value] = '';
   *         }
   *       };
   *     }]);
   *   </file>
   *   <file name="index.html">
   *     <div ng-controller="CancelUpdateController">
   *        <p>Both of these inputs are only updated if they are blurred. Hitting escape should
   *        empty them. Follow these steps and observe the difference:</p>
   *       <ol>
   *         <li>Type something in the input. You will see that the model is not yet updated</li>
   *         <li>Press the Escape key.
   *           <ol>
   *             <li> In the first example, nothing happens, because the model is already '', and no
   *             update is detected. If you blur the input, the model will be set to the current view.
   *             </li>
   *             <li> In the second example, the pending update is cancelled, and the input is set back
   *             to the last committed view value (''). Blurring the input does nothing.
   *             </li>
   *           </ol>
   *         </li>
   *       </ol>
   *
   *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">
   *         <div>
   *        <p id="inputDescription1">Without $rollbackViewValue():</p>
   *         <input name="value1" aria-describedby="inputDescription1" ng-model="model.value1"
   *                ng-keydown="setEmpty($event, 'value1')">
   *         value1: "{{ model.value1 }}"
   *         </div>
   *
   *         <div>
   *        <p id="inputDescription2">With $rollbackViewValue():</p>
   *         <input name="value2" aria-describedby="inputDescription2" ng-model="model.value2"
   *                ng-keydown="setEmpty($event, 'value2', true)">
   *         value2: "{{ model.value2 }}"
   *         </div>
   *       </form>
   *     </div>
   *   </file>
       <file name="style.css">
          div {
            display: table-cell;
          }
          div:nth-child(1) {
            padding-right: 30px;
          }

        </file>
   * </example>
   */
  this.$rollbackViewValue = function() {
    $timeout.cancel(pendingDebounce);
    ctrl.$viewValue = ctrl.$$lastCommittedViewValue;
    ctrl.$render();
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$validate
   *
   * @description
   * Runs each of the registered validators (first synchronous validators and then
   * asynchronous validators).
   * If the validity changes to invalid, the model will be set to `undefined`,
   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.
   * If the validity changes to valid, it will set the model to the last available valid
   * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.
   */
  this.$validate = function() {
    // ignore $validate before model is initialized
    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
      return;
    }

    var viewValue = ctrl.$$lastCommittedViewValue;
    // Note: we use the $$rawModelValue as $modelValue might have been
    // set to undefined during a view -> model update that found validation
    // errors. We can't parse the view here, since that could change
    // the model although neither viewValue nor the model on the scope changed
    var modelValue = ctrl.$$rawModelValue;

    var prevValid = ctrl.$valid;
    var prevModelValue = ctrl.$modelValue;

    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;

    ctrl.$$runValidators(modelValue, viewValue, function(allValid) {
      // If there was no change in validity, don't update the model
      // This prevents changing an invalid modelValue to undefined
      if (!allowInvalid && prevValid !== allValid) {
        // Note: Don't check ctrl.$valid here, as we could have
        // external validators (e.g. calculated on the server),
        // that just call $setValidity and need the model value
        // to calculate their validity.
        ctrl.$modelValue = allValid ? modelValue : undefined;

        if (ctrl.$modelValue !== prevModelValue) {
          ctrl.$$writeModelToScope();
        }
      }
    });

  };

  this.$$runValidators = function(modelValue, viewValue, doneCallback) {
    currentValidationRunId++;
    var localValidationRunId = currentValidationRunId;

    // check parser error
    if (!processParseErrors()) {
      validationDone(false);
      return;
    }
    if (!processSyncValidators()) {
      validationDone(false);
      return;
    }
    processAsyncValidators();

    function processParseErrors() {
      var errorKey = ctrl.$$parserName || 'parse';
      if (isUndefined(parserValid)) {
        setValidity(errorKey, null);
      } else {
        if (!parserValid) {
          forEach(ctrl.$validators, function(v, name) {
            setValidity(name, null);
          });
          forEach(ctrl.$asyncValidators, function(v, name) {
            setValidity(name, null);
          });
        }
        // Set the parse error last, to prevent unsetting it, should a $validators key == parserName
        setValidity(errorKey, parserValid);
        return parserValid;
      }
      return true;
    }

    function processSyncValidators() {
      var syncValidatorsValid = true;
      forEach(ctrl.$validators, function(validator, name) {
        var result = validator(modelValue, viewValue);
        syncValidatorsValid = syncValidatorsValid && result;
        setValidity(name, result);
      });
      if (!syncValidatorsValid) {
        forEach(ctrl.$asyncValidators, function(v, name) {
          setValidity(name, null);
        });
        return false;
      }
      return true;
    }

    function processAsyncValidators() {
      var validatorPromises = [];
      var allValid = true;
      forEach(ctrl.$asyncValidators, function(validator, name) {
        var promise = validator(modelValue, viewValue);
        if (!isPromiseLike(promise)) {
          throw ngModelMinErr('nopromise',
            "Expected asynchronous validator to return a promise but got '{0}' instead.", promise);
        }
        setValidity(name, undefined);
        validatorPromises.push(promise.then(function() {
          setValidity(name, true);
        }, function(error) {
          allValid = false;
          setValidity(name, false);
        }));
      });
      if (!validatorPromises.length) {
        validationDone(true);
      } else {
        $q.all(validatorPromises).then(function() {
          validationDone(allValid);
        }, noop);
      }
    }

    function setValidity(name, isValid) {
      if (localValidationRunId === currentValidationRunId) {
        ctrl.$setValidity(name, isValid);
      }
    }

    function validationDone(allValid) {
      if (localValidationRunId === currentValidationRunId) {

        doneCallback(allValid);
      }
    }
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$commitViewValue
   *
   * @description
   * Commit a pending update to the `$modelValue`.
   *
   * Updates may be pending by a debounced event or because the input is waiting for a some future
   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`
   * usually handles calling this in response to input events.
   */
  this.$commitViewValue = function() {
    var viewValue = ctrl.$viewValue;

    $timeout.cancel(pendingDebounce);

    // If the view value has not changed then we should just exit, except in the case where there is
    // a native validator on the element. In this case the validation state may have changed even though
    // the viewValue has stayed empty.
    if (ctrl.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !ctrl.$$hasNativeValidators)) {
      return;
    }
    ctrl.$$updateEmptyClasses(viewValue);
    ctrl.$$lastCommittedViewValue = viewValue;

    // change to dirty
    if (ctrl.$pristine) {
      this.$setDirty();
    }
    this.$$parseAndValidate();
  };

  this.$$parseAndValidate = function() {
    var viewValue = ctrl.$$lastCommittedViewValue;
    var modelValue = viewValue;
    parserValid = isUndefined(modelValue) ? undefined : true;

    if (parserValid) {
      for (var i = 0; i < ctrl.$parsers.length; i++) {
        modelValue = ctrl.$parsers[i](modelValue);
        if (isUndefined(modelValue)) {
          parserValid = false;
          break;
        }
      }
    }
    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
      // ctrl.$modelValue has not been touched yet...
      ctrl.$modelValue = ngModelGet($scope);
    }
    var prevModelValue = ctrl.$modelValue;
    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;
    ctrl.$$rawModelValue = modelValue;

    if (allowInvalid) {
      ctrl.$modelValue = modelValue;
      writeToModelIfNeeded();
    }

    // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.
    // This can happen if e.g. $setViewValue is called from inside a parser
    ctrl.$$runValidators(modelValue, ctrl.$$lastCommittedViewValue, function(allValid) {
      if (!allowInvalid) {
        // Note: Don't check ctrl.$valid here, as we could have
        // external validators (e.g. calculated on the server),
        // that just call $setValidity and need the model value
        // to calculate their validity.
        ctrl.$modelValue = allValid ? modelValue : undefined;
        writeToModelIfNeeded();
      }
    });

    function writeToModelIfNeeded() {
      if (ctrl.$modelValue !== prevModelValue) {
        ctrl.$$writeModelToScope();
      }
    }
  };

  this.$$writeModelToScope = function() {
    ngModelSet($scope, ctrl.$modelValue);
    forEach(ctrl.$viewChangeListeners, function(listener) {
      try {
        listener();
      } catch (e) {
        $exceptionHandler(e);
      }
    });
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setViewValue
   *
   * @description
   * Update the view value.
   *
   * This method should be called when a control wants to change the view value; typically,
   * this is done from within a DOM event handler. For example, the {@link ng.directive:input input}
   * directive calls it when the value of the input changes and {@link ng.directive:select select}
   * calls it when an option is selected.
   *
   * When `$setViewValue` is called, the new `value` will be staged for committing through the `$parsers`
   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged
   * value sent directly for processing, finally to be applied to `$modelValue` and then the
   * **expression** specified in the `ng-model` attribute. Lastly, all the registered change listeners,
   * in the `$viewChangeListeners` list, are called.
   *
   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`
   * and the `default` trigger is not listed, all those actions will remain pending until one of the
   * `updateOn` events is triggered on the DOM element.
   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}
   * directive is used with a custom debounce for this particular event.
   * Note that a `$digest` is only triggered once the `updateOn` events are fired, or if `debounce`
   * is specified, once the timer runs out.
   *
   * When used with standard inputs, the view value will always be a string (which is in some cases
   * parsed into another type, such as a `Date` object for `input[date]`.)
   * However, custom controls might also pass objects to this method. In this case, we should make
   * a copy of the object before passing it to `$setViewValue`. This is because `ngModel` does not
   * perform a deep watch of objects, it only looks for a change of identity. If you only change
   * the property of the object then ngModel will not realize that the object has changed and
   * will not invoke the `$parsers` and `$validators` pipelines. For this reason, you should
   * not change properties of the copy once it has been passed to `$setViewValue`.
   * Otherwise you may cause the model value on the scope to change incorrectly.
   *
   * <div class="alert alert-info">
   * In any case, the value passed to the method should always reflect the current value
   * of the control. For example, if you are calling `$setViewValue` for an input element,
   * you should pass the input DOM value. Otherwise, the control and the scope model become
   * out of sync. It's also important to note that `$setViewValue` does not call `$render` or change
   * the control's DOM value in any way. If we want to change the control's DOM value
   * programmatically, we should update the `ngModel` scope expression. Its new value will be
   * picked up by the model controller, which will run it through the `$formatters`, `$render` it
   * to update the DOM, and finally call `$validate` on it.
   * </div>
   *
   * @param {*} value value from the view.
   * @param {string} trigger Event that triggered the update.
   */
  this.$setViewValue = function(value, trigger) {
    ctrl.$viewValue = value;
    if (!ctrl.$options || ctrl.$options.updateOnDefault) {
      ctrl.$$debounceViewValueCommit(trigger);
    }
  };

  this.$$debounceViewValueCommit = function(trigger) {
    var debounceDelay = 0,
        options = ctrl.$options,
        debounce;

    if (options && isDefined(options.debounce)) {
      debounce = options.debounce;
      if (isNumber(debounce)) {
        debounceDelay = debounce;
      } else if (isNumber(debounce[trigger])) {
        debounceDelay = debounce[trigger];
      } else if (isNumber(debounce['default'])) {
        debounceDelay = debounce['default'];
      }
    }

    $timeout.cancel(pendingDebounce);
    if (debounceDelay) {
      pendingDebounce = $timeout(function() {
        ctrl.$commitViewValue();
      }, debounceDelay);
    } else if ($rootScope.$$phase) {
      ctrl.$commitViewValue();
    } else {
      $scope.$apply(function() {
        ctrl.$commitViewValue();
      });
    }
  };

  // model -> value
  // Note: we cannot use a normal scope.$watch as we want to detect the following:
  // 1. scope value is 'a'
  // 2. user enters 'b'
  // 3. ng-change kicks in and reverts scope value to 'a'
  //    -> scope value did not change since the last digest as
  //       ng-change executes in apply phase
  // 4. view should be changed back to 'a'
  $scope.$watch(function ngModelWatch() {
    var modelValue = ngModelGet($scope);

    // if scope model value and ngModel value are out of sync
    // TODO(perf): why not move this to the action fn?
    if (modelValue !== ctrl.$modelValue &&
       // checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator
       (ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)
    ) {
      ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;
      parserValid = undefined;

      var formatters = ctrl.$formatters,
          idx = formatters.length;

      var viewValue = modelValue;
      while (idx--) {
        viewValue = formatters[idx](viewValue);
      }
      if (ctrl.$viewValue !== viewValue) {
        ctrl.$$updateEmptyClasses(viewValue);
        ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;
        ctrl.$render();

        ctrl.$$runValidators(modelValue, viewValue, noop);
      }
    }

    return modelValue;
  });
}];


/**
 * @ngdoc directive
 * @name ngModel
 *
 * @element input
 * @priority 1
 *
 * @description
 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
 * property on the scope using {@link ngModel.NgModelController NgModelController},
 * which is created and exposed by this directive.
 *
 * `ngModel` is responsible for:
 *
 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
 *   require.
 * - Providing validation behavior (i.e. required, number, email, url).
 * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).
 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`,
 *   `ng-untouched`, `ng-empty`, `ng-not-empty`) including animations.
 * - Registering the control with its parent {@link ng.directive:form form}.
 *
 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
 * current scope. If the property doesn't already exist on this scope, it will be created
 * implicitly and added to the scope.
 *
 * For best practices on using `ngModel`, see:
 *
 *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)
 *
 * For basic examples, how to use `ngModel`, see:
 *
 *  - {@link ng.directive:input input}
 *    - {@link input[text] text}
 *    - {@link input[checkbox] checkbox}
 *    - {@link input[radio] radio}
 *    - {@link input[number] number}
 *    - {@link input[email] email}
 *    - {@link input[url] url}
 *    - {@link input[date] date}
 *    - {@link input[datetime-local] datetime-local}
 *    - {@link input[time] time}
 *    - {@link input[month] month}
 *    - {@link input[week] week}
 *  - {@link ng.directive:select select}
 *  - {@link ng.directive:textarea textarea}
 *
 * # Complex Models (objects or collections)
 *
 * By default, `ngModel` watches the model by reference, not value. This is important to know when
 * binding inputs to models that are objects (e.g. `Date`) or collections (e.g. arrays). If only properties of the
 * object or collection change, `ngModel` will not be notified and so the input will not be  re-rendered.
 *
 * The model must be assigned an entirely new object or collection before a re-rendering will occur.
 *
 * Some directives have options that will cause them to use a custom `$watchCollection` on the model expression
 * - for example, `ngOptions` will do so when a `track by` clause is included in the comprehension expression or
 * if the select is given the `multiple` attribute.
 *
 * The `$watchCollection()` method only does a shallow comparison, meaning that changing properties deeper than the
 * first level of the object (or only changing the properties of an item in the collection if it's an array) will still
 * not trigger a re-rendering of the model.
 *
 * # CSS classes
 * The following CSS classes are added and removed on the associated input/select/textarea element
 * depending on the validity of the model.
 *
 *  - `ng-valid`: the model is valid
 *  - `ng-invalid`: the model is invalid
 *  - `ng-valid-[key]`: for each valid key added by `$setValidity`
 *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`
 *  - `ng-pristine`: the control hasn't been interacted with yet
 *  - `ng-dirty`: the control has been interacted with
 *  - `ng-touched`: the control has been blurred
 *  - `ng-untouched`: the control hasn't been blurred
 *  - `ng-pending`: any `$asyncValidators` are unfulfilled
 *  - `ng-empty`: the view does not contain a value or the value is deemed "empty", as defined
 *     by the {@link ngModel.NgModelController#$isEmpty} method
 *  - `ng-not-empty`: the view contains a non-empty value
 *
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
 *
 * ## Animation Hooks
 *
 * Animations within models are triggered when any of the associated CSS classes are added and removed
 * on the input element which is attached to the model. These classes include: `.ng-pristine`, `.ng-dirty`,
 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
 * The animations that are triggered within ngModel are similar to how they work in ngClass and
 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
 *
 * The following example shows a simple way to utilize CSS transitions to style an input element
 * that has been rendered as invalid after it has been validated:
 *
 * <pre>
 * //be sure to include ngAnimate as a module to hook into more
 * //advanced animations
 * .my-input {
 *   transition:0.5s linear all;
 *   background: white;
 * }
 * .my-input.ng-invalid {
 *   background: red;
 *   color:white;
 * }
 * </pre>
 *
 * @example
 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample">
     <file name="index.html">
       <script>
        angular.module('inputExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.val = '1';
          }]);
       </script>
       <style>
         .my-input {
           transition:all linear 0.5s;
           background: transparent;
         }
         .my-input.ng-invalid {
           color:white;
           background: red;
         }
       </style>
       <p id="inputDescription">
        Update input to see transitions when valid/invalid.
        Integer is a valid value.
       </p>
       <form name="testForm" ng-controller="ExampleController">
         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input"
                aria-describedby="inputDescription" />
       </form>
     </file>
 * </example>
 *
 * ## Binding to a getter/setter
 *
 * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a
 * function that returns a representation of the model when called with zero arguments, and sets
 * the internal state of a model when called with an argument. It's sometimes useful to use this
 * for models that have an internal representation that's different from what the model exposes
 * to the view.
 *
 * <div class="alert alert-success">
 * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more
 * frequently than other parts of your code.
 * </div>
 *
 * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that
 * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to
 * a `<form>`, which will enable this behavior for all `<input>`s within it. See
 * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.
 *
 * The following example shows how to use `ngModel` with a getter/setter:
 *
 * @example
 * <example name="ngModel-getter-setter" module="getterSetterExample">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <form name="userForm">
           <label>Name:
             <input type="text" name="userName"
                    ng-model="user.name"
                    ng-model-options="{ getterSetter: true }" />
           </label>
         </form>
         <pre>user.name = <span ng-bind="user.name()"></span></pre>
       </div>
     </file>
     <file name="app.js">
       angular.module('getterSetterExample', [])
         .controller('ExampleController', ['$scope', function($scope) {
           var _name = 'Brian';
           $scope.user = {
             name: function(newName) {
              // Note that newName can be undefined for two reasons:
              // 1. Because it is called as a getter and thus called with no arguments
              // 2. Because the property should actually be set to undefined. This happens e.g. if the
              //    input is invalid
              return arguments.length ? (_name = newName) : _name;
             }
           };
         }]);
     </file>
 * </example>
 */
var ngModelDirective = ['$rootScope', function($rootScope) {
  return {
    restrict: 'A',
    require: ['ngModel', '^?form', '^?ngModelOptions'],
    controller: NgModelController,
    // Prelink needs to run before any input directive
    // so that we can set the NgModelOptions in NgModelController
    // before anyone else uses it.
    priority: 1,
    compile: function ngModelCompile(element) {
      // Setup initial state of the control
      element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);

      return {
        pre: function ngModelPreLink(scope, element, attr, ctrls) {
          var modelCtrl = ctrls[0],
              formCtrl = ctrls[1] || modelCtrl.$$parentForm;

          modelCtrl.$$setOptions(ctrls[2] && ctrls[2].$options);

          // notify others, especially parent forms
          formCtrl.$addControl(modelCtrl);

          attr.$observe('name', function(newValue) {
            if (modelCtrl.$name !== newValue) {
              modelCtrl.$$parentForm.$$renameControl(modelCtrl, newValue);
            }
          });

          scope.$on('$destroy', function() {
            modelCtrl.$$parentForm.$removeControl(modelCtrl);
          });
        },
        post: function ngModelPostLink(scope, element, attr, ctrls) {
          var modelCtrl = ctrls[0];
          if (modelCtrl.$options && modelCtrl.$options.updateOn) {
            element.on(modelCtrl.$options.updateOn, function(ev) {
              modelCtrl.$$debounceViewValueCommit(ev && ev.type);
            });
          }

          element.on('blur', function(ev) {
            if (modelCtrl.$touched) return;

            if ($rootScope.$$phase) {
              scope.$evalAsync(modelCtrl.$setTouched);
            } else {
              scope.$apply(modelCtrl.$setTouched);
            }
          });
        }
      };
    }
  };
}];

var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;

/**
 * @ngdoc directive
 * @name ngModelOptions
 *
 * @description
 * Allows tuning how model updates are done. Using `ngModelOptions` you can specify a custom list of
 * events that will trigger a model update and/or a debouncing delay so that the actual update only
 * takes place when a timer expires; this timer will be reset after another change takes place.
 *
 * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might
 * be different from the value in the actual model. This means that if you update the model you
 * should also invoke {@link ngModel.NgModelController `$rollbackViewValue`} on the relevant input field in
 * order to make sure it is synchronized with the model and that any debounced action is canceled.
 *
 * The easiest way to reference the control's {@link ngModel.NgModelController `$rollbackViewValue`}
 * method is by making sure the input is placed inside a form that has a `name` attribute. This is
 * important because `form` controllers are published to the related scope under the name in their
 * `name` attribute.
 *
 * Any pending changes will take place immediately when an enclosing form is submitted via the
 * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
 * to have access to the updated model.
 *
 * `ngModelOptions` has an effect on the element it's declared on and its descendants.
 *
 * @param {Object} ngModelOptions options to apply to the current model. Valid keys are:
 *   - `updateOn`: string specifying which event should the input be bound to. You can set several
 *     events using an space delimited list. There is a special event called `default` that
 *     matches the default events belonging of the control.
 *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A
 *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a
 *     custom value for each event. For example:
 *     `ng-model-options="{ updateOn: 'default blur', debounce: { 'default': 500, 'blur': 0 } }"`
 *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did
 *     not validate correctly instead of the default behavior of setting the model to undefined.
 *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to
       `ngModel` as getters/setters.
 *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for
 *     `<input type="date">`, `<input type="time">`, ... . It understands UTC/GMT and the
 *     continental US time zone abbreviations, but for general use, use a time zone offset, for
 *     example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
 *     If not specified, the timezone of the browser will be used.
 *
 * @example

  The following example shows how to override immediate updates. Changes on the inputs within the
  form will update the model only when the control loses focus (blur event). If `escape` key is
  pressed while the input field is focused, the value is reset to the value in the current model.

  <example name="ngModelOptions-directive-blur" module="optionsExample">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <form name="userForm">
          <label>Name:
            <input type="text" name="userName"
                   ng-model="user.name"
                   ng-model-options="{ updateOn: 'blur' }"
                   ng-keyup="cancel($event)" />
          </label><br />
          <label>Other data:
            <input type="text" ng-model="user.data" />
          </label><br />
        </form>
        <pre>user.name = <span ng-bind="user.name"></span></pre>
        <pre>user.data = <span ng-bind="user.data"></span></pre>
      </div>
    </file>
    <file name="app.js">
      angular.module('optionsExample', [])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.user = { name: 'John', data: '' };

          $scope.cancel = function(e) {
            if (e.keyCode == 27) {
              $scope.userForm.userName.$rollbackViewValue();
            }
          };
        }]);
    </file>
    <file name="protractor.js" type="protractor">
      var model = element(by.binding('user.name'));
      var input = element(by.model('user.name'));
      var other = element(by.model('user.data'));

      it('should allow custom events', function() {
        input.sendKeys(' Doe');
        input.click();
        expect(model.getText()).toEqual('John');
        other.click();
        expect(model.getText()).toEqual('John Doe');
      });

      it('should $rollbackViewValue when model changes', function() {
        input.sendKeys(' Doe');
        expect(input.getAttribute('value')).toEqual('John Doe');
        input.sendKeys(protractor.Key.ESCAPE);
        expect(input.getAttribute('value')).toEqual('John');
        other.click();
        expect(model.getText()).toEqual('John');
      });
    </file>
  </example>

  This one shows how to debounce model changes. Model will be updated only 1 sec after last change.
  If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.

  <example name="ngModelOptions-directive-debounce" module="optionsExample">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <form name="userForm">
          <label>Name:
            <input type="text" name="userName"
                   ng-model="user.name"
                   ng-model-options="{ debounce: 1000 }" />
          </label>
          <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button>
          <br />
        </form>
        <pre>user.name = <span ng-bind="user.name"></span></pre>
      </div>
    </file>
    <file name="app.js">
      angular.module('optionsExample', [])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.user = { name: 'Igor' };
        }]);
    </file>
  </example>

  This one shows how to bind to getter/setters:

  <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <form name="userForm">
          <label>Name:
            <input type="text" name="userName"
                   ng-model="user.name"
                   ng-model-options="{ getterSetter: true }" />
          </label>
        </form>
        <pre>user.name = <span ng-bind="user.name()"></span></pre>
      </div>
    </file>
    <file name="app.js">
      angular.module('getterSetterExample', [])
        .controller('ExampleController', ['$scope', function($scope) {
          var _name = 'Brian';
          $scope.user = {
            name: function(newName) {
              // Note that newName can be undefined for two reasons:
              // 1. Because it is called as a getter and thus called with no arguments
              // 2. Because the property should actually be set to undefined. This happens e.g. if the
              //    input is invalid
              return arguments.length ? (_name = newName) : _name;
            }
          };
        }]);
    </file>
  </example>
 */
var ngModelOptionsDirective = function() {
  return {
    restrict: 'A',
    controller: ['$scope', '$attrs', function($scope, $attrs) {
      var that = this;
      this.$options = copy($scope.$eval($attrs.ngModelOptions));
      // Allow adding/overriding bound events
      if (isDefined(this.$options.updateOn)) {
        this.$options.updateOnDefault = false;
        // extract "default" pseudo-event from list of events that can trigger a model update
        this.$options.updateOn = trim(this.$options.updateOn.replace(DEFAULT_REGEXP, function() {
          that.$options.updateOnDefault = true;
          return ' ';
        }));
      } else {
        this.$options.updateOnDefault = true;
      }
    }]
  };
};



// helper methods
function addSetValidityMethod(context) {
  var ctrl = context.ctrl,
      $element = context.$element,
      classCache = {},
      set = context.set,
      unset = context.unset,
      $animate = context.$animate;

  classCache[INVALID_CLASS] = !(classCache[VALID_CLASS] = $element.hasClass(VALID_CLASS));

  ctrl.$setValidity = setValidity;

  function setValidity(validationErrorKey, state, controller) {
    if (isUndefined(state)) {
      createAndSet('$pending', validationErrorKey, controller);
    } else {
      unsetAndCleanup('$pending', validationErrorKey, controller);
    }
    if (!isBoolean(state)) {
      unset(ctrl.$error, validationErrorKey, controller);
      unset(ctrl.$$success, validationErrorKey, controller);
    } else {
      if (state) {
        unset(ctrl.$error, validationErrorKey, controller);
        set(ctrl.$$success, validationErrorKey, controller);
      } else {
        set(ctrl.$error, validationErrorKey, controller);
        unset(ctrl.$$success, validationErrorKey, controller);
      }
    }
    if (ctrl.$pending) {
      cachedToggleClass(PENDING_CLASS, true);
      ctrl.$valid = ctrl.$invalid = undefined;
      toggleValidationCss('', null);
    } else {
      cachedToggleClass(PENDING_CLASS, false);
      ctrl.$valid = isObjectEmpty(ctrl.$error);
      ctrl.$invalid = !ctrl.$valid;
      toggleValidationCss('', ctrl.$valid);
    }

    // re-read the state as the set/unset methods could have
    // combined state in ctrl.$error[validationError] (used for forms),
    // where setting/unsetting only increments/decrements the value,
    // and does not replace it.
    var combinedState;
    if (ctrl.$pending && ctrl.$pending[validationErrorKey]) {
      combinedState = undefined;
    } else if (ctrl.$error[validationErrorKey]) {
      combinedState = false;
    } else if (ctrl.$$success[validationErrorKey]) {
      combinedState = true;
    } else {
      combinedState = null;
    }

    toggleValidationCss(validationErrorKey, combinedState);
    ctrl.$$parentForm.$setValidity(validationErrorKey, combinedState, ctrl);
  }

  function createAndSet(name, value, controller) {
    if (!ctrl[name]) {
      ctrl[name] = {};
    }
    set(ctrl[name], value, controller);
  }

  function unsetAndCleanup(name, value, controller) {
    if (ctrl[name]) {
      unset(ctrl[name], value, controller);
    }
    if (isObjectEmpty(ctrl[name])) {
      ctrl[name] = undefined;
    }
  }

  function cachedToggleClass(className, switchValue) {
    if (switchValue && !classCache[className]) {
      $animate.addClass($element, className);
      classCache[className] = true;
    } else if (!switchValue && classCache[className]) {
      $animate.removeClass($element, className);
      classCache[className] = false;
    }
  }

  function toggleValidationCss(validationErrorKey, isValid) {
    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';

    cachedToggleClass(VALID_CLASS + validationErrorKey, isValid === true);
    cachedToggleClass(INVALID_CLASS + validationErrorKey, isValid === false);
  }
}

function isObjectEmpty(obj) {
  if (obj) {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop)) {
        return false;
      }
    }
  }
  return true;
}

/**
 * @ngdoc directive
 * @name ngNonBindable
 * @restrict AC
 * @priority 1000
 *
 * @description
 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
 * DOM element. This is useful if the element contains what appears to be Angular directives and
 * bindings but which should be ignored by Angular. This could be the case if you have a site that
 * displays snippets of code, for instance.
 *
 * @element ANY
 *
 * @example
 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
 * but the one wrapped in `ngNonBindable` is left alone.
 *
 * @example
    <example>
      <file name="index.html">
        <div>Normal: {{1 + 2}}</div>
        <div ng-non-bindable>Ignored: {{1 + 2}}</div>
      </file>
      <file name="protractor.js" type="protractor">
       it('should check ng-non-bindable', function() {
         expect(element(by.binding('1 + 2')).getText()).toContain('3');
         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
       });
      </file>
    </example>
 */
var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });

/* global jqLiteRemove */

var ngOptionsMinErr = minErr('ngOptions');

/**
 * @ngdoc directive
 * @name ngOptions
 * @restrict A
 *
 * @description
 *
 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
 * elements for the `<select>` element using the array or object obtained by evaluating the
 * `ngOptions` comprehension expression.
 *
 * In many cases, `ngRepeat` can be used on `<option>` elements instead of `ngOptions` to achieve a
 * similar result. However, `ngOptions` provides some benefits such as reducing memory and
 * increasing speed by not creating a new scope for each repeated instance, as well as providing
 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
 * comprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound
 *  to a non-string value. This is because an option element can only be bound to string values at
 * present.
 *
 * When an item in the `<select>` menu is selected, the array element or object property
 * represented by the selected option will be bound to the model identified by the `ngModel`
 * directive.
 *
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
 * option. See example below for demonstration.
 *
 * ## Complex Models (objects or collections)
 *
 * By default, `ngModel` watches the model by reference, not value. This is important to know when
 * binding the select to a model that is an object or a collection.
 *
 * One issue occurs if you want to preselect an option. For example, if you set
 * the model to an object that is equal to an object in your collection, `ngOptions` won't be able to set the selection,
 * because the objects are not identical. So by default, you should always reference the item in your collection
 * for preselections, e.g.: `$scope.selected = $scope.collection[3]`.
 *
 * Another solution is to use a `track by` clause, because then `ngOptions` will track the identity
 * of the item not by reference, but by the result of the `track by` expression. For example, if your
 * collection items have an id property, you would `track by item.id`.
 *
 * A different issue with objects or collections is that ngModel won't detect if an object property or
 * a collection item changes. For that reason, `ngOptions` additionally watches the model using
 * `$watchCollection`, when the expression contains a `track by` clause or the the select has the `multiple` attribute.
 * This allows ngOptions to trigger a re-rendering of the options even if the actual object/collection
 * has not changed identity, but only a property on the object or an item in the collection changes.
 *
 * Note that `$watchCollection` does a shallow comparison of the properties of the object (or the items in the collection
 * if the model is an array). This means that changing a property deeper than the first level inside the
 * object/collection will not trigger a re-rendering.
 *
 * ## `select` **`as`**
 *
 * Using `select` **`as`** will bind the result of the `select` expression to the model, but
 * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)
 * or property name (for object data sources) of the value within the collection. If a **`track by`** expression
 * is used, the result of that expression will be set as the value of the `option` and `select` elements.
 *
 *
 * ### `select` **`as`** and **`track by`**
 *
 * <div class="alert alert-warning">
 * Be careful when using `select` **`as`** and **`track by`** in the same expression.
 * </div>
 *
 * Given this array of items on the $scope:
 *
 * ```js
 * $scope.items = [{
 *   id: 1,
 *   label: 'aLabel',
 *   subItem: { name: 'aSubItem' }
 * }, {
 *   id: 2,
 *   label: 'bLabel',
 *   subItem: { name: 'bSubItem' }
 * }];
 * ```
 *
 * This will work:
 *
 * ```html
 * <select ng-options="item as item.label for item in items track by item.id" ng-model="selected"></select>
 * ```
 * ```js
 * $scope.selected = $scope.items[0];
 * ```
 *
 * but this will not work:
 *
 * ```html
 * <select ng-options="item.subItem as item.label for item in items track by item.id" ng-model="selected"></select>
 * ```
 * ```js
 * $scope.selected = $scope.items[0].subItem;
 * ```
 *
 * In both examples, the **`track by`** expression is applied successfully to each `item` in the
 * `items` array. Because the selected option has been set programmatically in the controller, the
 * **`track by`** expression is also applied to the `ngModel` value. In the first example, the
 * `ngModel` value is `items[0]` and the **`track by`** expression evaluates to `items[0].id` with
 * no issue. In the second example, the `ngModel` value is `items[0].subItem` and the **`track by`**
 * expression evaluates to `items[0].subItem.id` (which is undefined). As a result, the model value
 * is not matched against any `<option>` and the `<select>` appears as having no selected value.
 *
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required The control is considered valid only if value is entered.
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
 *    `required` when you want to data-bind to the `required` attribute.
 * @param {comprehension_expression=} ngOptions in one of the following forms:
 *
 *   * for array data sources:
 *     * `label` **`for`** `value` **`in`** `array`
 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`
 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array`
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
 *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`
 *        (for including a filter with `track by`)
 *   * for object data sources:
 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
 *     * `label` **`disable when`** `disable` **`for (`**`key`**`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`group by`** `group`
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`disable when`** `disable`
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
 *
 * Where:
 *
 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
 *   * `value`: local variable which will refer to each item in the `array` or each property value
 *      of `object` during iteration.
 *   * `key`: local variable which will refer to a property name in `object` during iteration.
 *   * `label`: The result of this expression will be the label for `<option>` element. The
 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
 *      element. If not specified, `select` expression will default to `value`.
 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
 *      DOM element.
 *   * `disable`: The result of this expression will be used to disable the rendered `<option>`
 *      element. Return `true` to disable.
 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
 *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved
 *      even when the options are recreated (e.g. reloaded from the server).
 *
 * @example
    <example module="selectExample">
      <file name="index.html">
        <script>
        angular.module('selectExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.colors = [
              {name:'black', shade:'dark'},
              {name:'white', shade:'light', notAnOption: true},
              {name:'red', shade:'dark'},
              {name:'blue', shade:'dark', notAnOption: true},
              {name:'yellow', shade:'light', notAnOption: false}
            ];
            $scope.myColor = $scope.colors[2]; // red
          }]);
        </script>
        <div ng-controller="ExampleController">
          <ul>
            <li ng-repeat="color in colors">
              <label>Name: <input ng-model="color.name"></label>
              <label><input type="checkbox" ng-model="color.notAnOption"> Disabled?</label>
              <button ng-click="colors.splice($index, 1)" aria-label="Remove">X</button>
            </li>
            <li>
              <button ng-click="colors.push({})">add</button>
            </li>
          </ul>
          <hr/>
          <label>Color (null not allowed):
            <select ng-model="myColor" ng-options="color.name for color in colors"></select>
          </label><br/>
          <label>Color (null allowed):
          <span  class="nullable">
            <select ng-model="myColor" ng-options="color.name for color in colors">
              <option value="">-- choose color --</option>
            </select>
          </span></label><br/>

          <label>Color grouped by shade:
            <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
            </select>
          </label><br/>

          <label>Color grouped by shade, with some disabled:
            <select ng-model="myColor"
                  ng-options="color.name group by color.shade disable when color.notAnOption for color in colors">
            </select>
          </label><br/>



          Select <button ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</button>.
          <br/>
          <hr/>
          Currently selected: {{ {selected_color:myColor} }}
          <div style="border:solid 1px black; height:20px"
               ng-style="{'background-color':myColor.name}">
          </div>
        </div>
      </file>
      <file name="protractor.js" type="protractor">
         it('should check ng-options', function() {
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
           element.all(by.model('myColor')).first().click();
           element.all(by.css('select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
           element(by.css('.nullable select[ng-model="myColor"]')).click();
           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
         });
      </file>
    </example>
 */

// jshint maxlen: false
//                     //00001111111111000000000002222222222000000000000000000000333333333300000000000000000000000004444444444400000000000005555555555555550000000006666666666666660000000777777777777777000000000000000888888888800000000000000000009999999999
var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;
                        // 1: value expression (valueFn)
                        // 2: label expression (displayFn)
                        // 3: group by expression (groupByFn)
                        // 4: disable when expression (disableWhenFn)
                        // 5: array item variable name
                        // 6: object item key variable name
                        // 7: object item value variable name
                        // 8: collection expression
                        // 9: track by expression
// jshint maxlen: 100


var ngOptionsDirective = ['$compile', '$parse', function($compile, $parse) {

  function parseOptionsExpression(optionsExp, selectElement, scope) {

    var match = optionsExp.match(NG_OPTIONS_REGEXP);
    if (!(match)) {
      throw ngOptionsMinErr('iexp',
        "Expected expression in form of " +
        "'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'" +
        " but got '{0}'. Element: {1}",
        optionsExp, startingTag(selectElement));
    }

    // Extract the parts from the ngOptions expression

    // The variable name for the value of the item in the collection
    var valueName = match[5] || match[7];
    // The variable name for the key of the item in the collection
    var keyName = match[6];

    // An expression that generates the viewValue for an option if there is a label expression
    var selectAs = / as /.test(match[0]) && match[1];
    // An expression that is used to track the id of each object in the options collection
    var trackBy = match[9];
    // An expression that generates the viewValue for an option if there is no label expression
    var valueFn = $parse(match[2] ? match[1] : valueName);
    var selectAsFn = selectAs && $parse(selectAs);
    var viewValueFn = selectAsFn || valueFn;
    var trackByFn = trackBy && $parse(trackBy);

    // Get the value by which we are going to track the option
    // if we have a trackFn then use that (passing scope and locals)
    // otherwise just hash the given viewValue
    var getTrackByValueFn = trackBy ?
                              function(value, locals) { return trackByFn(scope, locals); } :
                              function getHashOfValue(value) { return hashKey(value); };
    var getTrackByValue = function(value, key) {
      return getTrackByValueFn(value, getLocals(value, key));
    };

    var displayFn = $parse(match[2] || match[1]);
    var groupByFn = $parse(match[3] || '');
    var disableWhenFn = $parse(match[4] || '');
    var valuesFn = $parse(match[8]);

    var locals = {};
    var getLocals = keyName ? function(value, key) {
      locals[keyName] = key;
      locals[valueName] = value;
      return locals;
    } : function(value) {
      locals[valueName] = value;
      return locals;
    };


    function Option(selectValue, viewValue, label, group, disabled) {
      this.selectValue = selectValue;
      this.viewValue = viewValue;
      this.label = label;
      this.group = group;
      this.disabled = disabled;
    }

    function getOptionValuesKeys(optionValues) {
      var optionValuesKeys;

      if (!keyName && isArrayLike(optionValues)) {
        optionValuesKeys = optionValues;
      } else {
        // if object, extract keys, in enumeration order, unsorted
        optionValuesKeys = [];
        for (var itemKey in optionValues) {
          if (optionValues.hasOwnProperty(itemKey) && itemKey.charAt(0) !== '$') {
            optionValuesKeys.push(itemKey);
          }
        }
      }
      return optionValuesKeys;
    }

    return {
      trackBy: trackBy,
      getTrackByValue: getTrackByValue,
      getWatchables: $parse(valuesFn, function(optionValues) {
        // Create a collection of things that we would like to watch (watchedArray)
        // so that they can all be watched using a single $watchCollection
        // that only runs the handler once if anything changes
        var watchedArray = [];
        optionValues = optionValues || [];

        var optionValuesKeys = getOptionValuesKeys(optionValues);
        var optionValuesLength = optionValuesKeys.length;
        for (var index = 0; index < optionValuesLength; index++) {
          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];
          var value = optionValues[key];

          var locals = getLocals(optionValues[key], key);
          var selectValue = getTrackByValueFn(optionValues[key], locals);
          watchedArray.push(selectValue);

          // Only need to watch the displayFn if there is a specific label expression
          if (match[2] || match[1]) {
            var label = displayFn(scope, locals);
            watchedArray.push(label);
          }

          // Only need to watch the disableWhenFn if there is a specific disable expression
          if (match[4]) {
            var disableWhen = disableWhenFn(scope, locals);
            watchedArray.push(disableWhen);
          }
        }
        return watchedArray;
      }),

      getOptions: function() {

        var optionItems = [];
        var selectValueMap = {};

        // The option values were already computed in the `getWatchables` fn,
        // which must have been called to trigger `getOptions`
        var optionValues = valuesFn(scope) || [];
        var optionValuesKeys = getOptionValuesKeys(optionValues);
        var optionValuesLength = optionValuesKeys.length;

        for (var index = 0; index < optionValuesLength; index++) {
          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];
          var value = optionValues[key];
          var locals = getLocals(value, key);
          var viewValue = viewValueFn(scope, locals);
          var selectValue = getTrackByValueFn(viewValue, locals);
          var label = displayFn(scope, locals);
          var group = groupByFn(scope, locals);
          var disabled = disableWhenFn(scope, locals);
          var optionItem = new Option(selectValue, viewValue, label, group, disabled);

          optionItems.push(optionItem);
          selectValueMap[selectValue] = optionItem;
        }

        return {
          items: optionItems,
          selectValueMap: selectValueMap,
          getOptionFromViewValue: function(value) {
            return selectValueMap[getTrackByValue(value)];
          },
          getViewValueFromOption: function(option) {
            // If the viewValue could be an object that may be mutated by the application,
            // we need to make a copy and not return the reference to the value on the option.
            return trackBy ? angular.copy(option.viewValue) : option.viewValue;
          }
        };
      }
    };
  }


  // we can't just jqLite('<option>') since jqLite is not smart enough
  // to create it in <select> and IE barfs otherwise.
  var optionTemplate = document.createElement('option'),
      optGroupTemplate = document.createElement('optgroup');

    function ngOptionsPostLink(scope, selectElement, attr, ctrls) {

      var selectCtrl = ctrls[0];
      var ngModelCtrl = ctrls[1];
      var multiple = attr.multiple;

      // The emptyOption allows the application developer to provide their own custom "empty"
      // option when the viewValue does not match any of the option values.
      var emptyOption;
      for (var i = 0, children = selectElement.children(), ii = children.length; i < ii; i++) {
        if (children[i].value === '') {
          emptyOption = children.eq(i);
          break;
        }
      }

      var providedEmptyOption = !!emptyOption;

      var unknownOption = jqLite(optionTemplate.cloneNode(false));
      unknownOption.val('?');

      var options;
      var ngOptions = parseOptionsExpression(attr.ngOptions, selectElement, scope);


      var renderEmptyOption = function() {
        if (!providedEmptyOption) {
          selectElement.prepend(emptyOption);
        }
        selectElement.val('');
        emptyOption.prop('selected', true); // needed for IE
        emptyOption.attr('selected', true);
      };

      var removeEmptyOption = function() {
        if (!providedEmptyOption) {
          emptyOption.remove();
        }
      };


      var renderUnknownOption = function() {
        selectElement.prepend(unknownOption);
        selectElement.val('?');
        unknownOption.prop('selected', true); // needed for IE
        unknownOption.attr('selected', true);
      };

      var removeUnknownOption = function() {
        unknownOption.remove();
      };

      // Update the controller methods for multiple selectable options
      if (!multiple) {

        selectCtrl.writeValue = function writeNgOptionsValue(value) {
          var option = options.getOptionFromViewValue(value);

          if (option && !option.disabled) {
            if (selectElement[0].value !== option.selectValue) {
              removeUnknownOption();
              removeEmptyOption();

              selectElement[0].value = option.selectValue;
              option.element.selected = true;
              option.element.setAttribute('selected', 'selected');
            }
          } else {
            if (value === null || providedEmptyOption) {
              removeUnknownOption();
              renderEmptyOption();
            } else {
              removeEmptyOption();
              renderUnknownOption();
            }
          }
        };

        selectCtrl.readValue = function readNgOptionsValue() {

          var selectedOption = options.selectValueMap[selectElement.val()];

          if (selectedOption && !selectedOption.disabled) {
            removeEmptyOption();
            removeUnknownOption();
            return options.getViewValueFromOption(selectedOption);
          }
          return null;
        };

        // If we are using `track by` then we must watch the tracked value on the model
        // since ngModel only watches for object identity change
        if (ngOptions.trackBy) {
          scope.$watch(
            function() { return ngOptions.getTrackByValue(ngModelCtrl.$viewValue); },
            function() { ngModelCtrl.$render(); }
          );
        }

      } else {

        ngModelCtrl.$isEmpty = function(value) {
          return !value || value.length === 0;
        };


        selectCtrl.writeValue = function writeNgOptionsMultiple(value) {
          options.items.forEach(function(option) {
            option.element.selected = false;
          });

          if (value) {
            value.forEach(function(item) {
              var option = options.getOptionFromViewValue(item);
              if (option && !option.disabled) option.element.selected = true;
            });
          }
        };


        selectCtrl.readValue = function readNgOptionsMultiple() {
          var selectedValues = selectElement.val() || [],
              selections = [];

          forEach(selectedValues, function(value) {
            var option = options.selectValueMap[value];
            if (option && !option.disabled) selections.push(options.getViewValueFromOption(option));
          });

          return selections;
        };

        // If we are using `track by` then we must watch these tracked values on the model
        // since ngModel only watches for object identity change
        if (ngOptions.trackBy) {

          scope.$watchCollection(function() {
            if (isArray(ngModelCtrl.$viewValue)) {
              return ngModelCtrl.$viewValue.map(function(value) {
                return ngOptions.getTrackByValue(value);
              });
            }
          }, function() {
            ngModelCtrl.$render();
          });

        }
      }


      if (providedEmptyOption) {

        // we need to remove it before calling selectElement.empty() because otherwise IE will
        // remove the label from the element. wtf?
        emptyOption.remove();

        // compile the element since there might be bindings in it
        $compile(emptyOption)(scope);

        // remove the class, which is added automatically because we recompile the element and it
        // becomes the compilation root
        emptyOption.removeClass('ng-scope');
      } else {
        emptyOption = jqLite(optionTemplate.cloneNode(false));
      }

      // We need to do this here to ensure that the options object is defined
      // when we first hit it in writeNgOptionsValue
      updateOptions();

      // We will re-render the option elements if the option values or labels change
      scope.$watchCollection(ngOptions.getWatchables, updateOptions);

      // ------------------------------------------------------------------ //


      function updateOptionElement(option, element) {
        option.element = element;
        element.disabled = option.disabled;
        // NOTE: The label must be set before the value, otherwise IE10/11/EDGE create unresponsive
        // selects in certain circumstances when multiple selects are next to each other and display
        // the option list in listbox style, i.e. the select is [multiple], or specifies a [size].
        // See https://github.com/angular/angular.js/issues/11314 for more info.
        // This is unfortunately untestable with unit / e2e tests
        if (option.label !== element.label) {
          element.label = option.label;
          element.textContent = option.label;
        }
        if (option.value !== element.value) element.value = option.selectValue;
      }

      function addOrReuseElement(parent, current, type, templateElement) {
        var element;
        // Check whether we can reuse the next element
        if (current && lowercase(current.nodeName) === type) {
          // The next element is the right type so reuse it
          element = current;
        } else {
          // The next element is not the right type so create a new one
          element = templateElement.cloneNode(false);
          if (!current) {
            // There are no more elements so just append it to the select
            parent.appendChild(element);
          } else {
            // The next element is not a group so insert the new one
            parent.insertBefore(element, current);
          }
        }
        return element;
      }


      function removeExcessElements(current) {
        var next;
        while (current) {
          next = current.nextSibling;
          jqLiteRemove(current);
          current = next;
        }
      }


      function skipEmptyAndUnknownOptions(current) {
        var emptyOption_ = emptyOption && emptyOption[0];
        var unknownOption_ = unknownOption && unknownOption[0];

        // We cannot rely on the extracted empty option being the same as the compiled empty option,
        // because the compiled empty option might have been replaced by a comment because
        // it had an "element" transclusion directive on it (such as ngIf)
        if (emptyOption_ || unknownOption_) {
          while (current &&
                (current === emptyOption_ ||
                current === unknownOption_ ||
                current.nodeType === NODE_TYPE_COMMENT ||
                (nodeName_(current) === 'option' && current.value === ''))) {
            current = current.nextSibling;
          }
        }
        return current;
      }


      function updateOptions() {

        var previousValue = options && selectCtrl.readValue();

        options = ngOptions.getOptions();

        var groupMap = {};
        var currentElement = selectElement[0].firstChild;

        // Ensure that the empty option is always there if it was explicitly provided
        if (providedEmptyOption) {
          selectElement.prepend(emptyOption);
        }

        currentElement = skipEmptyAndUnknownOptions(currentElement);

        options.items.forEach(function updateOption(option) {
          var group;
          var groupElement;
          var optionElement;

          if (isDefined(option.group)) {

            // This option is to live in a group
            // See if we have already created this group
            group = groupMap[option.group];

            if (!group) {

              // We have not already created this group
              groupElement = addOrReuseElement(selectElement[0],
                                               currentElement,
                                               'optgroup',
                                               optGroupTemplate);
              // Move to the next element
              currentElement = groupElement.nextSibling;

              // Update the label on the group element
              groupElement.label = option.group;

              // Store it for use later
              group = groupMap[option.group] = {
                groupElement: groupElement,
                currentOptionElement: groupElement.firstChild
              };

            }

            // So now we have a group for this option we add the option to the group
            optionElement = addOrReuseElement(group.groupElement,
                                              group.currentOptionElement,
                                              'option',
                                              optionTemplate);
            updateOptionElement(option, optionElement);
            // Move to the next element
            group.currentOptionElement = optionElement.nextSibling;

          } else {

            // This option is not in a group
            optionElement = addOrReuseElement(selectElement[0],
                                              currentElement,
                                              'option',
                                              optionTemplate);
            updateOptionElement(option, optionElement);
            // Move to the next element
            currentElement = optionElement.nextSibling;
          }
        });


        // Now remove all excess options and group
        Object.keys(groupMap).forEach(function(key) {
          removeExcessElements(groupMap[key].currentOptionElement);
        });
        removeExcessElements(currentElement);

        ngModelCtrl.$render();

        // Check to see if the value has changed due to the update to the options
        if (!ngModelCtrl.$isEmpty(previousValue)) {
          var nextValue = selectCtrl.readValue();
          var isNotPrimitive = ngOptions.trackBy || multiple;
          if (isNotPrimitive ? !equals(previousValue, nextValue) : previousValue !== nextValue) {
            ngModelCtrl.$setViewValue(nextValue);
            ngModelCtrl.$render();
          }
        }

      }
  }

  return {
    restrict: 'A',
    terminal: true,
    require: ['select', 'ngModel'],
    link: {
      pre: function ngOptionsPreLink(scope, selectElement, attr, ctrls) {
        // Deactivate the SelectController.register method to prevent
        // option directives from accidentally registering themselves
        // (and unwanted $destroy handlers etc.)
        ctrls[0].registerOption = noop;
      },
      post: ngOptionsPostLink
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngPluralize
 * @restrict EA
 *
 * @description
 * `ngPluralize` is a directive that displays messages according to en-US localization rules.
 * These rules are bundled with angular.js, but can be overridden
 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
 * by specifying the mappings between
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
 * and the strings to be displayed.
 *
 * # Plural categories and explicit number rules
 * There are two
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
 * in Angular's default en-US locale: "one" and "other".
 *
 * While a plural category may match many numbers (for example, in en-US locale, "other" can match
 * any number that is not 1), an explicit number rule can only match one number. For example, the
 * explicit number rule for "3" matches the number 3. There are examples of plural categories
 * and explicit number rules throughout the rest of this documentation.
 *
 * # Configuring ngPluralize
 * You configure ngPluralize by providing 2 attributes: `count` and `when`.
 * You can also provide an optional attribute, `offset`.
 *
 * The value of the `count` attribute can be either a string or an {@link guide/expression
 * Angular expression}; these are evaluated on the current scope for its bound value.
 *
 * The `when` attribute specifies the mappings between plural categories and the actual
 * string to be displayed. The value of the attribute should be a JSON object.
 *
 * The following example shows how to configure ngPluralize:
 *
 * ```html
 * <ng-pluralize count="personCount"
                 when="{'0': 'Nobody is viewing.',
 *                      'one': '1 person is viewing.',
 *                      'other': '{} people are viewing.'}">
 * </ng-pluralize>
 *```
 *
 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
 * show "a dozen people are viewing".
 *
 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
 * into pluralized strings. In the previous example, Angular will replace `{}` with
 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
 * for <span ng-non-bindable>{{numberExpression}}</span>.
 *
 * If no rule is defined for a category, then an empty string is displayed and a warning is generated.
 * Note that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.
 *
 * # Configuring ngPluralize with offset
 * The `offset` attribute allows further customization of pluralized text, which can result in
 * a better user experience. For example, instead of the message "4 people are viewing this document",
 * you might display "John, Kate and 2 others are viewing this document".
 * The offset attribute allows you to offset a number by any desired value.
 * Let's take a look at an example:
 *
 * ```html
 * <ng-pluralize count="personCount" offset=2
 *               when="{'0': 'Nobody is viewing.',
 *                      '1': '{{person1}} is viewing.',
 *                      '2': '{{person1}} and {{person2}} are viewing.',
 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
 * </ng-pluralize>
 * ```
 *
 * Notice that we are still using two plural categories(one, other), but we added
 * three explicit number rules 0, 1 and 2.
 * When one person, perhaps John, views the document, "John is viewing" will be shown.
 * When three people view the document, no explicit number rule is found, so
 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"
 * is shown.
 *
 * Note that when you specify offsets, you must provide explicit number rules for
 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
 * plural categories "one" and "other".
 *
 * @param {string|expression} count The variable to be bound to.
 * @param {string} when The mapping between plural category to its corresponding strings.
 * @param {number=} offset Offset to deduct from the total number.
 *
 * @example
    <example module="pluralizeExample">
      <file name="index.html">
        <script>
          angular.module('pluralizeExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.person1 = 'Igor';
              $scope.person2 = 'Misko';
              $scope.personCount = 1;
            }]);
        </script>
        <div ng-controller="ExampleController">
          <label>Person 1:<input type="text" ng-model="person1" value="Igor" /></label><br/>
          <label>Person 2:<input type="text" ng-model="person2" value="Misko" /></label><br/>
          <label>Number of People:<input type="text" ng-model="personCount" value="1" /></label><br/>

          <!--- Example with simple pluralization rules for en locale --->
          Without Offset:
          <ng-pluralize count="personCount"
                        when="{'0': 'Nobody is viewing.',
                               'one': '1 person is viewing.',
                               'other': '{} people are viewing.'}">
          </ng-pluralize><br>

          <!--- Example with offset --->
          With Offset(2):
          <ng-pluralize count="personCount" offset=2
                        when="{'0': 'Nobody is viewing.',
                               '1': '{{person1}} is viewing.',
                               '2': '{{person1}} and {{person2}} are viewing.',
                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
          </ng-pluralize>
        </div>
      </file>
      <file name="protractor.js" type="protractor">
        it('should show correct pluralized string', function() {
          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var countInput = element(by.model('personCount'));

          expect(withoutOffset.getText()).toEqual('1 person is viewing.');
          expect(withOffset.getText()).toEqual('Igor is viewing.');

          countInput.clear();
          countInput.sendKeys('0');

          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
          expect(withOffset.getText()).toEqual('Nobody is viewing.');

          countInput.clear();
          countInput.sendKeys('2');

          expect(withoutOffset.getText()).toEqual('2 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');

          countInput.clear();
          countInput.sendKeys('3');

          expect(withoutOffset.getText()).toEqual('3 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');

          countInput.clear();
          countInput.sendKeys('4');

          expect(withoutOffset.getText()).toEqual('4 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
        });
        it('should show data-bound names', function() {
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var personCount = element(by.model('personCount'));
          var person1 = element(by.model('person1'));
          var person2 = element(by.model('person2'));
          personCount.clear();
          personCount.sendKeys('4');
          person1.clear();
          person1.sendKeys('Di');
          person2.clear();
          person2.sendKeys('Vojta');
          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
        });
      </file>
    </example>
 */
var ngPluralizeDirective = ['$locale', '$interpolate', '$log', function($locale, $interpolate, $log) {
  var BRACE = /{}/g,
      IS_WHEN = /^when(Minus)?(.+)$/;

  return {
    link: function(scope, element, attr) {
      var numberExp = attr.count,
          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs
          offset = attr.offset || 0,
          whens = scope.$eval(whenExp) || {},
          whensExpFns = {},
          startSymbol = $interpolate.startSymbol(),
          endSymbol = $interpolate.endSymbol(),
          braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol,
          watchRemover = angular.noop,
          lastCount;

      forEach(attr, function(expression, attributeName) {
        var tmpMatch = IS_WHEN.exec(attributeName);
        if (tmpMatch) {
          var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);
          whens[whenKey] = element.attr(attr.$attr[attributeName]);
        }
      });
      forEach(whens, function(expression, key) {
        whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));

      });

      scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {
        var count = parseFloat(newVal);
        var countIsNaN = isNaN(count);

        if (!countIsNaN && !(count in whens)) {
          // If an explicit number rule such as 1, 2, 3... is defined, just use it.
          // Otherwise, check it against pluralization rules in $locale service.
          count = $locale.pluralCat(count - offset);
        }

        // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.
        // In JS `NaN !== NaN`, so we have to explicitly check.
        if ((count !== lastCount) && !(countIsNaN && isNumber(lastCount) && isNaN(lastCount))) {
          watchRemover();
          var whenExpFn = whensExpFns[count];
          if (isUndefined(whenExpFn)) {
            if (newVal != null) {
              $log.debug("ngPluralize: no rule defined for '" + count + "' in " + whenExp);
            }
            watchRemover = noop;
            updateElementText();
          } else {
            watchRemover = scope.$watch(whenExpFn, updateElementText);
          }
          lastCount = count;
        }
      });

      function updateElementText(newText) {
        element.text(newText || '');
      }
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngRepeat
 * @multiElement
 *
 * @description
 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
 * instance gets its own scope, where the given loop variable is set to the current collection item,
 * and `$index` is set to the item index or key.
 *
 * Special properties are exposed on the local scope of each template instance, including:
 *
 * | Variable  | Type            | Details                                                                     |
 * |-----------|-----------------|-----------------------------------------------------------------------------|
 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
 *
 * <div class="alert alert-info">
 *   Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
 *   This may be useful when, for instance, nesting ngRepeats.
 * </div>
 *
 *
 * # Iterating over object properties
 *
 * It is possible to get `ngRepeat` to iterate over the properties of an object using the following
 * syntax:
 *
 * ```js
 * <div ng-repeat="(key, value) in myObj"> ... </div>
 * ```
 *
 * You need to be aware that the JavaScript specification does not define the order of keys
 * returned for an object. (To mitigate this in Angular 1.3 the `ngRepeat` directive
 * used to sort the keys alphabetically.)
 *
 * Version 1.4 removed the alphabetic sorting. We now rely on the order returned by the browser
 * when running `for key in myObj`. It seems that browsers generally follow the strategy of providing
 * keys in the order in which they were defined, although there are exceptions when keys are deleted
 * and reinstated. See the [MDN page on `delete` for more info](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_notes).
 *
 * If this is not desired, the recommended workaround is to convert your object into an array
 * that is sorted into the order that you prefer before providing it to `ngRepeat`.  You could
 * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)
 * or implement a `$watch` on the object yourself.
 *
 *
 * # Tracking and Duplicates
 *
 * `ngRepeat` uses {@link $rootScope.Scope#$watchCollection $watchCollection} to detect changes in
 * the collection. When a change happens, ngRepeat then makes the corresponding changes to the DOM:
 *
 * * When an item is added, a new instance of the template is added to the DOM.
 * * When an item is removed, its template instance is removed from the DOM.
 * * When items are reordered, their respective templates are reordered in the DOM.
 *
 * To minimize creation of DOM elements, `ngRepeat` uses a function
 * to "keep track" of all items in the collection and their corresponding DOM elements.
 * For example, if an item is added to the collection, ngRepeat will know that all other items
 * already have DOM elements, and will not re-render them.
 *
 * The default tracking function (which tracks items by their identity) does not allow
 * duplicate items in arrays. This is because when there are duplicates, it is not possible
 * to maintain a one-to-one mapping between collection items and DOM elements.
 *
 * If you do need to repeat duplicate items, you can substitute the default tracking behavior
 * with your own using the `track by` expression.
 *
 * For example, you may track items by the index of each item in the collection, using the
 * special scope property `$index`:
 * ```html
 *    <div ng-repeat="n in [42, 42, 43, 43] track by $index">
 *      {{n}}
 *    </div>
 * ```
 *
 * You may also use arbitrary expressions in `track by`, including references to custom functions
 * on the scope:
 * ```html
 *    <div ng-repeat="n in [42, 42, 43, 43] track by myTrackingFunction(n)">
 *      {{n}}
 *    </div>
 * ```
 *
 * <div class="alert alert-success">
 * If you are working with objects that have an identifier property, you should track
 * by the identifier instead of the whole object. Should you reload your data later, `ngRepeat`
 * will not have to rebuild the DOM elements for items it has already rendered, even if the
 * JavaScript objects in the collection have been substituted for new ones. For large collections,
 * this significantly improves rendering performance. If you don't have a unique identifier,
 * `track by $index` can also provide a performance boost.
 * </div>
 * ```html
 *    <div ng-repeat="model in collection track by model.id">
 *      {{model.name}}
 *    </div>
 * ```
 *
 * When no `track by` expression is provided, it is equivalent to tracking by the built-in
 * `$id` function, which tracks items by their identity:
 * ```html
 *    <div ng-repeat="obj in collection track by $id(obj)">
 *      {{obj.prop}}
 *    </div>
 * ```
 *
 * <div class="alert alert-warning">
 * **Note:** `track by` must always be the last expression:
 * </div>
 * ```
 * <div ng-repeat="model in collection | orderBy: 'id' as filtered_result track by model.id">
 *     {{model.name}}
 * </div>
 * ```
 *
 * # Special repeat start and end points
 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
 * up to and including the ending HTML tag where **ng-repeat-end** is placed.
 *
 * The example below makes use of this feature:
 * ```html
 *   <header ng-repeat-start="item in items">
 *     Header {{ item }}
 *   </header>
 *   <div class="body">
 *     Body {{ item }}
 *   </div>
 *   <footer ng-repeat-end>
 *     Footer {{ item }}
 *   </footer>
 * ```
 *
 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
 * ```html
 *   <header>
 *     Header A
 *   </header>
 *   <div class="body">
 *     Body A
 *   </div>
 *   <footer>
 *     Footer A
 *   </footer>
 *   <header>
 *     Header B
 *   </header>
 *   <div class="body">
 *     Body B
 *   </div>
 *   <footer>
 *     Footer B
 *   </footer>
 * ```
 *
 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
 *
 * @animations
 * **.enter** - when a new item is added to the list or when an item is revealed after a filter
 *
 * **.leave** - when an item is removed from the list or when an item is filtered out
 *
 * **.move** - when an adjacent item is filtered out causing a reorder or when the item contents are reordered
 *
 * See the example below for defining CSS animations with ngRepeat.
 *
 * @element ANY
 * @scope
 * @priority 1000
 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
 *   formats are currently supported:
 *
 *   * `variable in expression` – where variable is the user defined loop variable and `expression`
 *     is a scope expression giving the collection to enumerate.
 *
 *     For example: `album in artist.albums`.
 *
 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
 *     and `expression` is the scope expression giving the collection to enumerate.
 *
 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
 *
 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression
 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression
 *     is specified, ng-repeat associates elements by identity. It is an error to have
 *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are
 *     mapped to the same DOM element, which is not possible.)
 *
 *     Note that the tracking expression must come last, after any filters, and the alias expression.
 *
 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
 *     will be associated by item identity in the array.
 *
 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
 *     element in the same way in the DOM.
 *
 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
 *     property is same.
 *
 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
 *     to items in conjunction with a tracking expression.
 *
 *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
 *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
 *     when a filter is active on the repeater, but the filtered result set is empty.
 *
 *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
 *     the items have been processed through the filter.
 *
 *     Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only at the end
 *     (and not as operator, inside an expression).
 *
 *     For example: `item in items | filter : x | orderBy : order | limitTo : limit as results` .
 *
 * @example
 * This example uses `ngRepeat` to display a list of people. A filter is used to restrict the displayed
 * results by name. New (entering) and removed (leaving) items are animated.
  <example module="ngRepeat" name="ngRepeat" deps="angular-animate.js" animations="true">
    <file name="index.html">
      <div ng-controller="repeatController">
        I have {{friends.length}} friends. They are:
        <input type="search" ng-model="q" placeholder="filter friends..." aria-label="filter friends" />
        <ul class="example-animate-container">
          <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">
            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
          </li>
          <li class="animate-repeat" ng-if="results.length == 0">
            <strong>No results found...</strong>
          </li>
        </ul>
      </div>
    </file>
    <file name="script.js">
      angular.module('ngRepeat', ['ngAnimate']).controller('repeatController', function($scope) {
        $scope.friends = [
          {name:'John', age:25, gender:'boy'},
          {name:'Jessie', age:30, gender:'girl'},
          {name:'Johanna', age:28, gender:'girl'},
          {name:'Joy', age:15, gender:'girl'},
          {name:'Mary', age:28, gender:'girl'},
          {name:'Peter', age:95, gender:'boy'},
          {name:'Sebastian', age:50, gender:'boy'},
          {name:'Erika', age:27, gender:'girl'},
          {name:'Patrick', age:40, gender:'boy'},
          {name:'Samantha', age:60, gender:'girl'}
        ];
      });
    </file>
    <file name="animations.css">
      .example-animate-container {
        background:white;
        border:1px solid black;
        list-style:none;
        margin:0;
        padding:0 10px;
      }

      .animate-repeat {
        line-height:30px;
        list-style:none;
        box-sizing:border-box;
      }

      .animate-repeat.ng-move,
      .animate-repeat.ng-enter,
      .animate-repeat.ng-leave {
        transition:all linear 0.5s;
      }

      .animate-repeat.ng-leave.ng-leave-active,
      .animate-repeat.ng-move,
      .animate-repeat.ng-enter {
        opacity:0;
        max-height:0;
      }

      .animate-repeat.ng-leave,
      .animate-repeat.ng-move.ng-move-active,
      .animate-repeat.ng-enter.ng-enter-active {
        opacity:1;
        max-height:30px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var friends = element.all(by.repeater('friend in friends'));

      it('should render initial data set', function() {
        expect(friends.count()).toBe(10);
        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
        expect(element(by.binding('friends.length')).getText())
            .toMatch("I have 10 friends. They are:");
      });

       it('should update repeater when filter predicate changes', function() {
         expect(friends.count()).toBe(10);

         element(by.model('q')).sendKeys('ma');

         expect(friends.count()).toBe(2);
         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
       });
      </file>
    </example>
 */
var ngRepeatDirective = ['$parse', '$animate', function($parse, $animate) {
  var NG_REMOVED = '$$NG_REMOVED';
  var ngRepeatMinErr = minErr('ngRepeat');

  var updateScope = function(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {
    // TODO(perf): generate setters to shave off ~40ms or 1-1.5%
    scope[valueIdentifier] = value;
    if (keyIdentifier) scope[keyIdentifier] = key;
    scope.$index = index;
    scope.$first = (index === 0);
    scope.$last = (index === (arrayLength - 1));
    scope.$middle = !(scope.$first || scope.$last);
    // jshint bitwise: false
    scope.$odd = !(scope.$even = (index&1) === 0);
    // jshint bitwise: true
  };

  var getBlockStart = function(block) {
    return block.clone[0];
  };

  var getBlockEnd = function(block) {
    return block.clone[block.clone.length - 1];
  };


  return {
    restrict: 'A',
    multiElement: true,
    transclude: 'element',
    priority: 1000,
    terminal: true,
    $$tlb: true,
    compile: function ngRepeatCompile($element, $attr) {
      var expression = $attr.ngRepeat;
      var ngRepeatEndComment = document.createComment(' end ngRepeat: ' + expression + ' ');

      var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);

      if (!match) {
        throw ngRepeatMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
            expression);
      }

      var lhs = match[1];
      var rhs = match[2];
      var aliasAs = match[3];
      var trackByExp = match[4];

      match = lhs.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);

      if (!match) {
        throw ngRepeatMinErr('iidexp', "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",
            lhs);
      }
      var valueIdentifier = match[3] || match[1];
      var keyIdentifier = match[2];

      if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) ||
          /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) {
        throw ngRepeatMinErr('badident', "alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",
          aliasAs);
      }

      var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;
      var hashFnLocals = {$id: hashKey};

      if (trackByExp) {
        trackByExpGetter = $parse(trackByExp);
      } else {
        trackByIdArrayFn = function(key, value) {
          return hashKey(value);
        };
        trackByIdObjFn = function(key) {
          return key;
        };
      }

      return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {

        if (trackByExpGetter) {
          trackByIdExpFn = function(key, value, index) {
            // assign key, value, and $index to the locals so that they can be used in hash functions
            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;
            hashFnLocals[valueIdentifier] = value;
            hashFnLocals.$index = index;
            return trackByExpGetter($scope, hashFnLocals);
          };
        }

        // Store a list of elements from previous run. This is a hash where key is the item from the
        // iterator, and the value is objects with following properties.
        //   - scope: bound scope
        //   - element: previous element.
        //   - index: position
        //
        // We are using no-proto object so that we don't need to guard against inherited props via
        // hasOwnProperty.
        var lastBlockMap = createMap();

        //watch props
        $scope.$watchCollection(rhs, function ngRepeatAction(collection) {
          var index, length,
              previousNode = $element[0],     // node that cloned nodes should be inserted after
                                              // initialized to the comment node anchor
              nextNode,
              // Same as lastBlockMap but it has the current state. It will become the
              // lastBlockMap on the next iteration.
              nextBlockMap = createMap(),
              collectionLength,
              key, value, // key/value of iteration
              trackById,
              trackByIdFn,
              collectionKeys,
              block,       // last object information {scope, element, id}
              nextBlockOrder,
              elementsToRemove;

          if (aliasAs) {
            $scope[aliasAs] = collection;
          }

          if (isArrayLike(collection)) {
            collectionKeys = collection;
            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
          } else {
            trackByIdFn = trackByIdExpFn || trackByIdObjFn;
            // if object, extract keys, in enumeration order, unsorted
            collectionKeys = [];
            for (var itemKey in collection) {
              if (hasOwnProperty.call(collection, itemKey) && itemKey.charAt(0) !== '$') {
                collectionKeys.push(itemKey);
              }
            }
          }

          collectionLength = collectionKeys.length;
          nextBlockOrder = new Array(collectionLength);

          // locate existing items
          for (index = 0; index < collectionLength; index++) {
            key = (collection === collectionKeys) ? index : collectionKeys[index];
            value = collection[key];
            trackById = trackByIdFn(key, value, index);
            if (lastBlockMap[trackById]) {
              // found previously seen block
              block = lastBlockMap[trackById];
              delete lastBlockMap[trackById];
              nextBlockMap[trackById] = block;
              nextBlockOrder[index] = block;
            } else if (nextBlockMap[trackById]) {
              // if collision detected. restore lastBlockMap and throw an error
              forEach(nextBlockOrder, function(block) {
                if (block && block.scope) lastBlockMap[block.id] = block;
              });
              throw ngRepeatMinErr('dupes',
                  "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",
                  expression, trackById, value);
            } else {
              // new never before seen block
              nextBlockOrder[index] = {id: trackById, scope: undefined, clone: undefined};
              nextBlockMap[trackById] = true;
            }
          }

          // remove leftover items
          for (var blockKey in lastBlockMap) {
            block = lastBlockMap[blockKey];
            elementsToRemove = getBlockNodes(block.clone);
            $animate.leave(elementsToRemove);
            if (elementsToRemove[0].parentNode) {
              // if the element was not removed yet because of pending animation, mark it as deleted
              // so that we can ignore it later
              for (index = 0, length = elementsToRemove.length; index < length; index++) {
                elementsToRemove[index][NG_REMOVED] = true;
              }
            }
            block.scope.$destroy();
          }

          // we are not using forEach for perf reasons (trying to avoid #call)
          for (index = 0; index < collectionLength; index++) {
            key = (collection === collectionKeys) ? index : collectionKeys[index];
            value = collection[key];
            block = nextBlockOrder[index];

            if (block.scope) {
              // if we have already seen this object, then we need to reuse the
              // associated scope/element

              nextNode = previousNode;

              // skip nodes that are already pending removal via leave animation
              do {
                nextNode = nextNode.nextSibling;
              } while (nextNode && nextNode[NG_REMOVED]);

              if (getBlockStart(block) != nextNode) {
                // existing item which got moved
                $animate.move(getBlockNodes(block.clone), null, jqLite(previousNode));
              }
              previousNode = getBlockEnd(block);
              updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
            } else {
              // new item which we don't know about
              $transclude(function ngRepeatTransclude(clone, scope) {
                block.scope = scope;
                // http://jsperf.com/clone-vs-createcomment
                var endNode = ngRepeatEndComment.cloneNode(false);
                clone[clone.length++] = endNode;

                // TODO(perf): support naked previousNode in `enter` to avoid creation of jqLite wrapper?
                $animate.enter(clone, null, jqLite(previousNode));
                previousNode = endNode;
                // Note: We only need the first/last node of the cloned nodes.
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                // by a directive with templateUrl when its template arrives.
                block.clone = clone;
                nextBlockMap[block.id] = block;
                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
              });
            }
          }
          lastBlockMap = nextBlockMap;
        });
      };
    }
  };
}];

var NG_HIDE_CLASS = 'ng-hide';
var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';
/**
 * @ngdoc directive
 * @name ngShow
 * @multiElement
 *
 * @description
 * The `ngShow` directive shows or hides the given HTML element based on the expression
 * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding
 * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
 * in AngularJS and sets the display style to none (using an !important flag).
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```html
 * <!-- when $scope.myValue is truthy (element is visible) -->
 * <div ng-show="myValue"></div>
 *
 * <!-- when $scope.myValue is falsy (element is hidden) -->
 * <div ng-show="myValue" class="ng-hide"></div>
 * ```
 *
 * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class
 * attribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed
 * from the element causing the element not to appear hidden.
 *
 * ## Why is !important used?
 *
 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
 * can be easily overridden by heavier selectors. For example, something as simple
 * as changing the display style on a HTML list item would make hidden elements appear visible.
 * This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
 *
 * ### Overriding `.ng-hide`
 *
 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
 * class CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope
 * with extra animation classes that can be added.
 *
 * ```css
 * .ng-hide:not(.ng-hide-animate) {
 *   /&#42; this is just another form of hiding an element &#42;/
 *   display: block!important;
 *   position: absolute;
 *   top: -9999px;
 *   left: -9999px;
 * }
 * ```
 *
 * By default you don't need to override in CSS anything and the animations will work around the display style.
 *
 * ## A note about animations with `ngShow`
 *
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
 * is true and false. This system works like the animation system present with ngClass except that
 * you must also include the !important flag to override the display property
 * so that you can perform an animation when the element is hidden during the time of the animation.
 *
 * ```css
 * //
 * //a working example can be found at the bottom of this page
 * //
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   /&#42; this is required as of 1.3x to properly
 *      apply all styling in a show/hide animation &#42;/
 *   transition: 0s linear all;
 * }
 *
 * .my-element.ng-hide-add-active,
 * .my-element.ng-hide-remove-active {
 *   /&#42; the transition is defined in the active class &#42;/
 *   transition: 1s linear all;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * ```
 *
 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
 *
 * @animations
 * addClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a truthy value and the just before contents are set to visible
 * removeClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden
 *
 * @element ANY
 * @param {expression} ngShow If the {@link guide/expression expression} is truthy
 *     then the element is shown or hidden respectively.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngHide"><br/>
      <div>
        Show:
        <div class="check-element animate-show" ng-show="checked">
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
        </div>
      </div>
      <div>
        Hide:
        <div class="check-element animate-show" ng-hide="checked">
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
        </div>
      </div>
    </file>
    <file name="glyphicons.css">
      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
    </file>
    <file name="animations.css">
      .animate-show {
        line-height: 20px;
        opacity: 1;
        padding: 10px;
        border: 1px solid black;
        background: white;
      }

      .animate-show.ng-hide-add, .animate-show.ng-hide-remove {
        transition: all linear 0.5s;
      }

      .animate-show.ng-hide {
        line-height: 0;
        opacity: 0;
        padding: 0 10px;
      }

      .check-element {
        padding: 10px;
        border: 1px solid black;
        background: white;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

      it('should check ng-show / ng-hide', function() {
        expect(thumbsUp.isDisplayed()).toBeFalsy();
        expect(thumbsDown.isDisplayed()).toBeTruthy();

        element(by.model('checked')).click();

        expect(thumbsUp.isDisplayed()).toBeTruthy();
        expect(thumbsDown.isDisplayed()).toBeFalsy();
      });
    </file>
  </example>
 */
var ngShowDirective = ['$animate', function($animate) {
  return {
    restrict: 'A',
    multiElement: true,
    link: function(scope, element, attr) {
      scope.$watch(attr.ngShow, function ngShowWatchAction(value) {
        // we're adding a temporary, animation-specific class for ng-hide since this way
        // we can control when the element is actually displayed on screen without having
        // to have a global/greedy CSS selector that breaks when other animations are run.
        // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845
        $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {
          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
        });
      });
    }
  };
}];


/**
 * @ngdoc directive
 * @name ngHide
 * @multiElement
 *
 * @description
 * The `ngHide` directive shows or hides the given HTML element based on the expression
 * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding
 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
 * in AngularJS and sets the display style to none (using an !important flag).
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```html
 * <!-- when $scope.myValue is truthy (element is hidden) -->
 * <div ng-hide="myValue" class="ng-hide"></div>
 *
 * <!-- when $scope.myValue is falsy (element is visible) -->
 * <div ng-hide="myValue"></div>
 * ```
 *
 * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class
 * attribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed
 * from the element causing the element not to appear hidden.
 *
 * ## Why is !important used?
 *
 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
 * can be easily overridden by heavier selectors. For example, something as simple
 * as changing the display style on a HTML list item would make hidden elements appear visible.
 * This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
 *
 * ### Overriding `.ng-hide`
 *
 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
 * class in CSS:
 *
 * ```css
 * .ng-hide {
 *   /&#42; this is just another form of hiding an element &#42;/
 *   display: block!important;
 *   position: absolute;
 *   top: -9999px;
 *   left: -9999px;
 * }
 * ```
 *
 * By default you don't need to override in CSS anything and the animations will work around the display style.
 *
 * ## A note about animations with `ngHide`
 *
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
 * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`
 * CSS class is added and removed for you instead of your own CSS class.
 *
 * ```css
 * //
 * //a working example can be found at the bottom of this page
 * //
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   transition: 0.5s linear all;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * ```
 *
 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
 *
 * @animations
 * removeClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden
 * addClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a non truthy value and just before the contents are set to visible
 *
 * @element ANY
 * @param {expression} ngHide If the {@link guide/expression expression} is truthy then
 *     the element is shown or hidden respectively.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngShow"><br/>
      <div>
        Show:
        <div class="check-element animate-hide" ng-show="checked">
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
        </div>
      </div>
      <div>
        Hide:
        <div class="check-element animate-hide" ng-hide="checked">
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
        </div>
      </div>
    </file>
    <file name="glyphicons.css">
      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
    </file>
    <file name="animations.css">
      .animate-hide {
        transition: all linear 0.5s;
        line-height: 20px;
        opacity: 1;
        padding: 10px;
        border: 1px solid black;
        background: white;
      }

      .animate-hide.ng-hide {
        line-height: 0;
        opacity: 0;
        padding: 0 10px;
      }

      .check-element {
        padding: 10px;
        border: 1px solid black;
        background: white;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

      it('should check ng-show / ng-hide', function() {
        expect(thumbsUp.isDisplayed()).toBeFalsy();
        expect(thumbsDown.isDisplayed()).toBeTruthy();

        element(by.model('checked')).click();

        expect(thumbsUp.isDisplayed()).toBeTruthy();
        expect(thumbsDown.isDisplayed()).toBeFalsy();
      });
    </file>
  </example>
 */
var ngHideDirective = ['$animate', function($animate) {
  return {
    restrict: 'A',
    multiElement: true,
    link: function(scope, element, attr) {
      scope.$watch(attr.ngHide, function ngHideWatchAction(value) {
        // The comment inside of the ngShowDirective explains why we add and
        // remove a temporary class for the show/hide animation
        $animate[value ? 'addClass' : 'removeClass'](element,NG_HIDE_CLASS, {
          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
        });
      });
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngStyle
 * @restrict AC
 *
 * @description
 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
 *
 * @element ANY
 * @param {expression} ngStyle
 *
 * {@link guide/expression Expression} which evals to an
 * object whose keys are CSS style names and values are corresponding values for those CSS
 * keys.
 *
 * Since some CSS style names are not valid keys for an object, they must be quoted.
 * See the 'background-color' style in the example below.
 *
 * @example
   <example>
     <file name="index.html">
        <input type="button" value="set color" ng-click="myStyle={color:'red'}">
        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
        <input type="button" value="clear" ng-click="myStyle={}">
        <br/>
        <span ng-style="myStyle">Sample Text</span>
        <pre>myStyle={{myStyle}}</pre>
     </file>
     <file name="style.css">
       span {
         color: black;
       }
     </file>
     <file name="protractor.js" type="protractor">
       var colorSpan = element(by.css('span'));

       it('should check ng-style', function() {
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
         element(by.css('input[value=\'set color\']')).click();
         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');
         element(by.css('input[value=clear]')).click();
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
       });
     </file>
   </example>
 */
var ngStyleDirective = ngDirective(function(scope, element, attr) {
  scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
    if (oldStyles && (newStyles !== oldStyles)) {
      forEach(oldStyles, function(val, style) { element.css(style, '');});
    }
    if (newStyles) element.css(newStyles);
  }, true);
});

/**
 * @ngdoc directive
 * @name ngSwitch
 * @restrict EA
 *
 * @description
 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
 * as specified in the template.
 *
 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
 * matches the value obtained from the evaluated expression. In other words, you define a container element
 * (where you place the directive), place an expression on the **`on="..."` attribute**
 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
 * attribute is displayed.
 *
 * <div class="alert alert-info">
 * Be aware that the attribute values to match against cannot be expressions. They are interpreted
 * as literal string values to match against.
 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
 * value of the expression `$scope.someVal`.
 * </div>

 * @animations
 * enter - happens after the ngSwitch contents change and the matched child element is placed inside the container
 * leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM
 *
 * @usage
 *
 * ```
 * <ANY ng-switch="expression">
 *   <ANY ng-switch-when="matchValue1">...</ANY>
 *   <ANY ng-switch-when="matchValue2">...</ANY>
 *   <ANY ng-switch-default>...</ANY>
 * </ANY>
 * ```
 *
 *
 * @scope
 * @priority 1200
 * @param {*} ngSwitch|on expression to match against <code>ng-switch-when</code>.
 * On child elements add:
 *
 * * `ngSwitchWhen`: the case statement to match against. If match then this
 *   case will be displayed. If the same match appears multiple times, all the
 *   elements will be displayed.
 * * `ngSwitchDefault`: the default case when no other case match. If there
 *   are multiple default cases, all of them will be displayed when no other
 *   case match.
 *
 *
 * @example
  <example module="switchExample" deps="angular-animate.js" animations="true">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <select ng-model="selection" ng-options="item for item in items">
        </select>
        <code>selection={{selection}}</code>
        <hr/>
        <div class="animate-switch-container"
          ng-switch on="selection">
            <div class="animate-switch" ng-switch-when="settings">Settings Div</div>
            <div class="animate-switch" ng-switch-when="home">Home Span</div>
            <div class="animate-switch" ng-switch-default>default</div>
        </div>
      </div>
    </file>
    <file name="script.js">
      angular.module('switchExample', ['ngAnimate'])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.items = ['settings', 'home', 'other'];
          $scope.selection = $scope.items[0];
        }]);
    </file>
    <file name="animations.css">
      .animate-switch-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .animate-switch {
        padding:10px;
      }

      .animate-switch.ng-animate {
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
      }

      .animate-switch.ng-leave.ng-leave-active,
      .animate-switch.ng-enter {
        top:-50px;
      }
      .animate-switch.ng-leave,
      .animate-switch.ng-enter.ng-enter-active {
        top:0;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var switchElem = element(by.css('[ng-switch]'));
      var select = element(by.model('selection'));

      it('should start in settings', function() {
        expect(switchElem.getText()).toMatch(/Settings Div/);
      });
      it('should change to home', function() {
        select.all(by.css('option')).get(1).click();
        expect(switchElem.getText()).toMatch(/Home Span/);
      });
      it('should select default', function() {
        select.all(by.css('option')).get(2).click();
        expect(switchElem.getText()).toMatch(/default/);
      });
    </file>
  </example>
 */
var ngSwitchDirective = ['$animate', function($animate) {
  return {
    require: 'ngSwitch',

    // asks for $scope to fool the BC controller module
    controller: ['$scope', function ngSwitchController() {
     this.cases = {};
    }],
    link: function(scope, element, attr, ngSwitchController) {
      var watchExpr = attr.ngSwitch || attr.on,
          selectedTranscludes = [],
          selectedElements = [],
          previousLeaveAnimations = [],
          selectedScopes = [];

      var spliceFactory = function(array, index) {
          return function() { array.splice(index, 1); };
      };

      scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
        var i, ii;
        for (i = 0, ii = previousLeaveAnimations.length; i < ii; ++i) {
          $animate.cancel(previousLeaveAnimations[i]);
        }
        previousLeaveAnimations.length = 0;

        for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
          var selected = getBlockNodes(selectedElements[i].clone);
          selectedScopes[i].$destroy();
          var promise = previousLeaveAnimations[i] = $animate.leave(selected);
          promise.then(spliceFactory(previousLeaveAnimations, i));
        }

        selectedElements.length = 0;
        selectedScopes.length = 0;

        if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {
          forEach(selectedTranscludes, function(selectedTransclude) {
            selectedTransclude.transclude(function(caseElement, selectedScope) {
              selectedScopes.push(selectedScope);
              var anchor = selectedTransclude.element;
              caseElement[caseElement.length++] = document.createComment(' end ngSwitchWhen: ');
              var block = { clone: caseElement };

              selectedElements.push(block);
              $animate.enter(caseElement, anchor.parent(), anchor);
            });
          });
        }
      });
    }
  };
}];

var ngSwitchWhenDirective = ngDirective({
  transclude: 'element',
  priority: 1200,
  require: '^ngSwitch',
  multiElement: true,
  link: function(scope, element, attrs, ctrl, $transclude) {
    ctrl.cases['!' + attrs.ngSwitchWhen] = (ctrl.cases['!' + attrs.ngSwitchWhen] || []);
    ctrl.cases['!' + attrs.ngSwitchWhen].push({ transclude: $transclude, element: element });
  }
});

var ngSwitchDefaultDirective = ngDirective({
  transclude: 'element',
  priority: 1200,
  require: '^ngSwitch',
  multiElement: true,
  link: function(scope, element, attr, ctrl, $transclude) {
    ctrl.cases['?'] = (ctrl.cases['?'] || []);
    ctrl.cases['?'].push({ transclude: $transclude, element: element });
   }
});

/**
 * @ngdoc directive
 * @name ngTransclude
 * @restrict EAC
 *
 * @description
 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
 *
 * You can specify that you want to insert a named transclusion slot, instead of the default slot, by providing the slot name
 * as the value of the `ng-transclude` or `ng-transclude-slot` attribute.
 *
 * If the transcluded content is not empty (i.e. contains one or more DOM nodes, including whitespace text nodes), any existing
 * content of this element will be removed before the transcluded content is inserted.
 * If the transcluded content is empty, the existing content is left intact. This lets you provide fallback content in the case
 * that no transcluded content is provided.
 *
 * @element ANY
 *
 * @param {string} ngTransclude|ngTranscludeSlot the name of the slot to insert at this point. If this is not provided, is empty
 *                                               or its value is the same as the name of the attribute then the default slot is used.
 *
 * @example
 * ### Basic transclusion
 * This example demonstrates basic transclusion of content into a component directive.
 * <example name="simpleTranscludeExample" module="transcludeExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('transcludeExample', [])
 *        .directive('pane', function(){
 *           return {
 *             restrict: 'E',
 *             transclude: true,
 *             scope: { title:'@' },
 *             template: '<div style="border: 1px solid black;">' +
 *                         '<div style="background-color: gray">{{title}}</div>' +
 *                         '<ng-transclude></ng-transclude>' +
 *                       '</div>'
 *           };
 *       })
 *       .controller('ExampleController', ['$scope', function($scope) {
 *         $scope.title = 'Lorem Ipsum';
 *         $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
 *       }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <input ng-model="title" aria-label="title"> <br/>
 *       <textarea ng-model="text" aria-label="text"></textarea> <br/>
 *       <pane title="{{title}}">{{text}}</pane>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *      it('should have transcluded', function() {
 *        var titleElement = element(by.model('title'));
 *        titleElement.clear();
 *        titleElement.sendKeys('TITLE');
 *        var textElement = element(by.model('text'));
 *        textElement.clear();
 *        textElement.sendKeys('TEXT');
 *        expect(element(by.binding('title')).getText()).toEqual('TITLE');
 *        expect(element(by.binding('text')).getText()).toEqual('TEXT');
 *      });
 *   </file>
 * </example>
 *
 * @example
 * ### Transclude fallback content
 * This example shows how to use `NgTransclude` with fallback content, that
 * is displayed if no transcluded content is provided.
 *
 * <example module="transcludeFallbackContentExample">
 * <file name="index.html">
 * <script>
 * angular.module('transcludeFallbackContentExample', [])
 * .directive('myButton', function(){
 *             return {
 *               restrict: 'E',
 *               transclude: true,
 *               scope: true,
 *               template: '<button style="cursor: pointer;">' +
 *                           '<ng-transclude>' +
 *                             '<b style="color: red;">Button1</b>' +
 *                           '</ng-transclude>' +
 *                         '</button>'
 *             };
 *         });
 * </script>
 * <!-- fallback button content -->
 * <my-button id="fallback"></my-button>
 * <!-- modified button content -->
 * <my-button id="modified">
 *   <i style="color: green;">Button2</i>
 * </my-button>
 * </file>
 * <file name="protractor.js" type="protractor">
 * it('should have different transclude element content', function() {
 *          expect(element(by.id('fallback')).getText()).toBe('Button1');
 *          expect(element(by.id('modified')).getText()).toBe('Button2');
 *        });
 * </file>
 * </example>
 *
 * @example
 * ### Multi-slot transclusion
 * This example demonstrates using multi-slot transclusion in a component directive.
 * <example name="multiSlotTranscludeExample" module="multiSlotTranscludeExample">
 *   <file name="index.html">
 *    <style>
 *      .title, .footer {
 *        background-color: gray
 *      }
 *    </style>
 *    <div ng-controller="ExampleController">
 *      <input ng-model="title" aria-label="title"> <br/>
 *      <textarea ng-model="text" aria-label="text"></textarea> <br/>
 *      <pane>
 *        <pane-title><a ng-href="{{link}}">{{title}}</a></pane-title>
 *        <pane-body><p>{{text}}</p></pane-body>
 *      </pane>
 *    </div>
 *   </file>
 *   <file name="app.js">
 *    angular.module('multiSlotTranscludeExample', [])
 *     .directive('pane', function(){
 *        return {
 *          restrict: 'E',
 *          transclude: {
 *            'title': '?paneTitle',
 *            'body': 'paneBody',
 *            'footer': '?paneFooter'
 *          },
 *          template: '<div style="border: 1px solid black;">' +
 *                      '<div class="title" ng-transclude="title">Fallback Title</div>' +
 *                      '<div ng-transclude="body"></div>' +
 *                      '<div class="footer" ng-transclude="footer">Fallback Footer</div>' +
 *                    '</div>'
 *        };
 *    })
 *    .controller('ExampleController', ['$scope', function($scope) {
 *      $scope.title = 'Lorem Ipsum';
 *      $scope.link = "https://google.com";
 *      $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
 *    }]);
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *      it('should have transcluded the title and the body', function() {
 *        var titleElement = element(by.model('title'));
 *        titleElement.clear();
 *        titleElement.sendKeys('TITLE');
 *        var textElement = element(by.model('text'));
 *        textElement.clear();
 *        textElement.sendKeys('TEXT');
 *        expect(element(by.css('.title')).getText()).toEqual('TITLE');
 *        expect(element(by.binding('text')).getText()).toEqual('TEXT');
 *        expect(element(by.css('.footer')).getText()).toEqual('Fallback Footer');
 *      });
 *   </file>
 * </example>
 */
var ngTranscludeMinErr = minErr('ngTransclude');
var ngTranscludeDirective = ngDirective({
  restrict: 'EAC',
  link: function($scope, $element, $attrs, controller, $transclude) {

    if ($attrs.ngTransclude === $attrs.$attr.ngTransclude) {
      // If the attribute is of the form: `ng-transclude="ng-transclude"`
      // then treat it like the default
      $attrs.ngTransclude = '';
    }

    function ngTranscludeCloneAttachFn(clone) {
      if (clone.length) {
        $element.empty();
        $element.append(clone);
      }
    }

    if (!$transclude) {
      throw ngTranscludeMinErr('orphan',
       'Illegal use of ngTransclude directive in the template! ' +
       'No parent directive that requires a transclusion found. ' +
       'Element: {0}',
       startingTag($element));
    }

    // If there is no slot name defined or the slot name is not optional
    // then transclude the slot
    var slotName = $attrs.ngTransclude || $attrs.ngTranscludeSlot;
    $transclude(ngTranscludeCloneAttachFn, null, slotName);
  }
});

/**
 * @ngdoc directive
 * @name script
 * @restrict E
 *
 * @description
 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
 * template can be used by {@link ng.directive:ngInclude `ngInclude`},
 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
 *
 * @param {string} type Must be set to `'text/ng-template'`.
 * @param {string} id Cache name of the template.
 *
 * @example
  <example>
    <file name="index.html">
      <script type="text/ng-template" id="/tpl.html">
        Content of the template.
      </script>

      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
      <div id="tpl-content" ng-include src="currentTpl"></div>
    </file>
    <file name="protractor.js" type="protractor">
      it('should load template defined inside script tag', function() {
        element(by.css('#tpl-link')).click();
        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
      });
    </file>
  </example>
 */
var scriptDirective = ['$templateCache', function($templateCache) {
  return {
    restrict: 'E',
    terminal: true,
    compile: function(element, attr) {
      if (attr.type == 'text/ng-template') {
        var templateUrl = attr.id,
            text = element[0].text;

        $templateCache.put(templateUrl, text);
      }
    }
  };
}];

var noopNgModelController = { $setViewValue: noop, $render: noop };

function chromeHack(optionElement) {
  // Workaround for https://code.google.com/p/chromium/issues/detail?id=381459
  // Adding an <option selected="selected"> element to a <select required="required"> should
  // automatically select the new element
  if (optionElement[0].hasAttribute('selected')) {
    optionElement[0].selected = true;
  }
}

/**
 * @ngdoc type
 * @name  select.SelectController
 * @description
 * The controller for the `<select>` directive. This provides support for reading
 * and writing the selected value(s) of the control and also coordinates dynamically
 * added `<option>` elements, perhaps by an `ngRepeat` directive.
 */
var SelectController =
        ['$element', '$scope', '$attrs', function($element, $scope, $attrs) {

  var self = this,
      optionsMap = new HashMap();

  // If the ngModel doesn't get provided then provide a dummy noop version to prevent errors
  self.ngModelCtrl = noopNgModelController;

  // The "unknown" option is one that is prepended to the list if the viewValue
  // does not match any of the options. When it is rendered the value of the unknown
  // option is '? XXX ?' where XXX is the hashKey of the value that is not known.
  //
  // We can't just jqLite('<option>') since jqLite is not smart enough
  // to create it in <select> and IE barfs otherwise.
  self.unknownOption = jqLite(document.createElement('option'));
  self.renderUnknownOption = function(val) {
    var unknownVal = '? ' + hashKey(val) + ' ?';
    self.unknownOption.val(unknownVal);
    $element.prepend(self.unknownOption);
    $element.val(unknownVal);
  };

  $scope.$on('$destroy', function() {
    // disable unknown option so that we don't do work when the whole select is being destroyed
    self.renderUnknownOption = noop;
  });

  self.removeUnknownOption = function() {
    if (self.unknownOption.parent()) self.unknownOption.remove();
  };


  // Read the value of the select control, the implementation of this changes depending
  // upon whether the select can have multiple values and whether ngOptions is at work.
  self.readValue = function readSingleValue() {
    self.removeUnknownOption();
    return $element.val();
  };


  // Write the value to the select control, the implementation of this changes depending
  // upon whether the select can have multiple values and whether ngOptions is at work.
  self.writeValue = function writeSingleValue(value) {
    if (self.hasOption(value)) {
      self.removeUnknownOption();
      $element.val(value);
      if (value === '') self.emptyOption.prop('selected', true); // to make IE9 happy
    } else {
      if (value == null && self.emptyOption) {
        self.removeUnknownOption();
        $element.val('');
      } else {
        self.renderUnknownOption(value);
      }
    }
  };


  // Tell the select control that an option, with the given value, has been added
  self.addOption = function(value, element) {
    // Skip comment nodes, as they only pollute the `optionsMap`
    if (element[0].nodeType === NODE_TYPE_COMMENT) return;

    assertNotHasOwnProperty(value, '"option value"');
    if (value === '') {
      self.emptyOption = element;
    }
    var count = optionsMap.get(value) || 0;
    optionsMap.put(value, count + 1);
    self.ngModelCtrl.$render();
    chromeHack(element);
  };

  // Tell the select control that an option, with the given value, has been removed
  self.removeOption = function(value) {
    var count = optionsMap.get(value);
    if (count) {
      if (count === 1) {
        optionsMap.remove(value);
        if (value === '') {
          self.emptyOption = undefined;
        }
      } else {
        optionsMap.put(value, count - 1);
      }
    }
  };

  // Check whether the select control has an option matching the given value
  self.hasOption = function(value) {
    return !!optionsMap.get(value);
  };


  self.registerOption = function(optionScope, optionElement, optionAttrs, interpolateValueFn, interpolateTextFn) {

    if (interpolateValueFn) {
      // The value attribute is interpolated
      var oldVal;
      optionAttrs.$observe('value', function valueAttributeObserveAction(newVal) {
        if (isDefined(oldVal)) {
          self.removeOption(oldVal);
        }
        oldVal = newVal;
        self.addOption(newVal, optionElement);
      });
    } else if (interpolateTextFn) {
      // The text content is interpolated
      optionScope.$watch(interpolateTextFn, function interpolateWatchAction(newVal, oldVal) {
        optionAttrs.$set('value', newVal);
        if (oldVal !== newVal) {
          self.removeOption(oldVal);
        }
        self.addOption(newVal, optionElement);
      });
    } else {
      // The value attribute is static
      self.addOption(optionAttrs.value, optionElement);
    }

    optionElement.on('$destroy', function() {
      self.removeOption(optionAttrs.value);
      self.ngModelCtrl.$render();
    });
  };
}];

/**
 * @ngdoc directive
 * @name select
 * @restrict E
 *
 * @description
 * HTML `SELECT` element with angular data-binding.
 *
 * The `select` directive is used together with {@link ngModel `ngModel`} to provide data-binding
 * between the scope and the `<select>` control (including setting default values).
 * It also handles dynamic `<option>` elements, which can be added using the {@link ngRepeat `ngRepeat}` or
 * {@link ngOptions `ngOptions`} directives.
 *
 * When an item in the `<select>` menu is selected, the value of the selected option will be bound
 * to the model identified by the `ngModel` directive. With static or repeated options, this is
 * the content of the `value` attribute or the textContent of the `<option>`, if the value attribute is missing.
 * If you want dynamic value attributes, you can use interpolation inside the value attribute.
 *
 * <div class="alert alert-warning">
 * Note that the value of a `select` directive used without `ngOptions` is always a string.
 * When the model needs to be bound to a non-string value, you must either explicitly convert it
 * using a directive (see example below) or use `ngOptions` to specify the set of options.
 * This is because an option element can only be bound to string values at present.
 * </div>
 *
 * If the viewValue of `ngModel` does not match any of the options, then the control
 * will automatically add an "unknown" option, which it then removes when the mismatch is resolved.
 *
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
 * option. See example below for demonstration.
 *
 * <div class="alert alert-info">
 * In many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions
 * ngOptions} to achieve a similar result. However, `ngOptions` provides some benefits, such as
 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
 * comprehension expression, and additionally in reducing memory and increasing speed by not creating
 * a new scope for each repeated instance.
 * </div>
 *
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} multiple Allows multiple options to be selected. The selected values will be
 *     bound to the model as an array.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {string=} ngRequired Adds required attribute and required validation constraint to
 * the element when the ngRequired expression evaluates to true. Use ngRequired instead of required
 * when you want to data-bind to the required attribute.
 * @param {string=} ngChange Angular expression to be executed when selected option(s) changes due to user
 *    interaction with the select element.
 * @param {string=} ngOptions sets the options that the select is populated with and defines what is
 * set on the model on selection. See {@link ngOptions `ngOptions`}.
 *
 * @example
 * ### Simple `select` elements with static options
 *
 * <example name="static-select" module="staticSelect">
 * <file name="index.html">
 * <div ng-controller="ExampleController">
 *   <form name="myForm">
 *     <label for="singleSelect"> Single select: </label><br>
 *     <select name="singleSelect" ng-model="data.singleSelect">
 *       <option value="option-1">Option 1</option>
 *       <option value="option-2">Option 2</option>
 *     </select><br>
 *
 *     <label for="singleSelect"> Single select with "not selected" option and dynamic option values: </label><br>
 *     <select name="singleSelect" id="singleSelect" ng-model="data.singleSelect">
 *       <option value="">---Please select---</option> <!-- not selected / blank option -->
 *       <option value="{{data.option1}}">Option 1</option> <!-- interpolation -->
 *       <option value="option-2">Option 2</option>
 *     </select><br>
 *     <button ng-click="forceUnknownOption()">Force unknown option</button><br>
 *     <tt>singleSelect = {{data.singleSelect}}</tt>
 *
 *     <hr>
 *     <label for="multipleSelect"> Multiple select: </label><br>
 *     <select name="multipleSelect" id="multipleSelect" ng-model="data.multipleSelect" multiple>
 *       <option value="option-1">Option 1</option>
 *       <option value="option-2">Option 2</option>
 *       <option value="option-3">Option 3</option>
 *     </select><br>
 *     <tt>multipleSelect = {{data.multipleSelect}}</tt><br/>
 *   </form>
 * </div>
 * </file>
 * <file name="app.js">
 *  angular.module('staticSelect', [])
 *    .controller('ExampleController', ['$scope', function($scope) {
 *      $scope.data = {
 *       singleSelect: null,
 *       multipleSelect: [],
 *       option1: 'option-1',
 *      };
 *
 *      $scope.forceUnknownOption = function() {
 *        $scope.data.singleSelect = 'nonsense';
 *      };
 *   }]);
 * </file>
 *</example>
 *
 * ### Using `ngRepeat` to generate `select` options
 * <example name="ngrepeat-select" module="ngrepeatSelect">
 * <file name="index.html">
 * <div ng-controller="ExampleController">
 *   <form name="myForm">
 *     <label for="repeatSelect"> Repeat select: </label>
 *     <select name="repeatSelect" id="repeatSelect" ng-model="data.repeatSelect">
 *       <option ng-repeat="option in data.availableOptions" value="{{option.id}}">{{option.name}}</option>
 *     </select>
 *   </form>
 *   <hr>
 *   <tt>repeatSelect = {{data.repeatSelect}}</tt><br/>
 * </div>
 * </file>
 * <file name="app.js">
 *  angular.module('ngrepeatSelect', [])
 *    .controller('ExampleController', ['$scope', function($scope) {
 *      $scope.data = {
 *       repeatSelect: null,
 *       availableOptions: [
 *         {id: '1', name: 'Option A'},
 *         {id: '2', name: 'Option B'},
 *         {id: '3', name: 'Option C'}
 *       ],
 *      };
 *   }]);
 * </file>
 *</example>
 *
 *
 * ### Using `select` with `ngOptions` and setting a default value
 * See the {@link ngOptions ngOptions documentation} for more `ngOptions` usage examples.
 *
 * <example name="select-with-default-values" module="defaultValueSelect">
 * <file name="index.html">
 * <div ng-controller="ExampleController">
 *   <form name="myForm">
 *     <label for="mySelect">Make a choice:</label>
 *     <select name="mySelect" id="mySelect"
 *       ng-options="option.name for option in data.availableOptions track by option.id"
 *       ng-model="data.selectedOption"></select>
 *   </form>
 *   <hr>
 *   <tt>option = {{data.selectedOption}}</tt><br/>
 * </div>
 * </file>
 * <file name="app.js">
 *  angular.module('defaultValueSelect', [])
 *    .controller('ExampleController', ['$scope', function($scope) {
 *      $scope.data = {
 *       availableOptions: [
 *         {id: '1', name: 'Option A'},
 *         {id: '2', name: 'Option B'},
 *         {id: '3', name: 'Option C'}
 *       ],
 *       selectedOption: {id: '3', name: 'Option C'} //This sets the default value of the select in the ui
 *       };
 *   }]);
 * </file>
 *</example>
 *
 *
 * ### Binding `select` to a non-string value via `ngModel` parsing / formatting
 *
 * <example name="select-with-non-string-options" module="nonStringSelect">
 *   <file name="index.html">
 *     <select ng-model="model.id" convert-to-number>
 *       <option value="0">Zero</option>
 *       <option value="1">One</option>
 *       <option value="2">Two</option>
 *     </select>
 *     {{ model }}
 *   </file>
 *   <file name="app.js">
 *     angular.module('nonStringSelect', [])
 *       .run(function($rootScope) {
 *         $rootScope.model = { id: 2 };
 *       })
 *       .directive('convertToNumber', function() {
 *         return {
 *           require: 'ngModel',
 *           link: function(scope, element, attrs, ngModel) {
 *             ngModel.$parsers.push(function(val) {
 *               return parseInt(val, 10);
 *             });
 *             ngModel.$formatters.push(function(val) {
 *               return '' + val;
 *             });
 *           }
 *         };
 *       });
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     it('should initialize to model', function() {
 *       var select = element(by.css('select'));
 *       expect(element(by.model('model.id')).$('option:checked').getText()).toEqual('Two');
 *     });
 *   </file>
 * </example>
 *
 */
var selectDirective = function() {

  return {
    restrict: 'E',
    require: ['select', '?ngModel'],
    controller: SelectController,
    priority: 1,
    link: {
      pre: selectPreLink,
      post: selectPostLink
    }
  };

  function selectPreLink(scope, element, attr, ctrls) {

      // if ngModel is not defined, we don't need to do anything
      var ngModelCtrl = ctrls[1];
      if (!ngModelCtrl) return;

      var selectCtrl = ctrls[0];

      selectCtrl.ngModelCtrl = ngModelCtrl;

      // When the selected item(s) changes we delegate getting the value of the select control
      // to the `readValue` method, which can be changed if the select can have multiple
      // selected values or if the options are being generated by `ngOptions`
      element.on('change', function() {
        scope.$apply(function() {
          ngModelCtrl.$setViewValue(selectCtrl.readValue());
        });
      });

      // If the select allows multiple values then we need to modify how we read and write
      // values from and to the control; also what it means for the value to be empty and
      // we have to add an extra watch since ngModel doesn't work well with arrays - it
      // doesn't trigger rendering if only an item in the array changes.
      if (attr.multiple) {

        // Read value now needs to check each option to see if it is selected
        selectCtrl.readValue = function readMultipleValue() {
          var array = [];
          forEach(element.find('option'), function(option) {
            if (option.selected) {
              array.push(option.value);
            }
          });
          return array;
        };

        // Write value now needs to set the selected property of each matching option
        selectCtrl.writeValue = function writeMultipleValue(value) {
          var items = new HashMap(value);
          forEach(element.find('option'), function(option) {
            option.selected = isDefined(items.get(option.value));
          });
        };

        // we have to do it on each watch since ngModel watches reference, but
        // we need to work of an array, so we need to see if anything was inserted/removed
        var lastView, lastViewRef = NaN;
        scope.$watch(function selectMultipleWatch() {
          if (lastViewRef === ngModelCtrl.$viewValue && !equals(lastView, ngModelCtrl.$viewValue)) {
            lastView = shallowCopy(ngModelCtrl.$viewValue);
            ngModelCtrl.$render();
          }
          lastViewRef = ngModelCtrl.$viewValue;
        });

        // If we are a multiple select then value is now a collection
        // so the meaning of $isEmpty changes
        ngModelCtrl.$isEmpty = function(value) {
          return !value || value.length === 0;
        };

      }
    }

    function selectPostLink(scope, element, attrs, ctrls) {
      // if ngModel is not defined, we don't need to do anything
      var ngModelCtrl = ctrls[1];
      if (!ngModelCtrl) return;

      var selectCtrl = ctrls[0];

      // We delegate rendering to the `writeValue` method, which can be changed
      // if the select can have multiple selected values or if the options are being
      // generated by `ngOptions`.
      // This must be done in the postLink fn to prevent $render to be called before
      // all nodes have been linked correctly.
      ngModelCtrl.$render = function() {
        selectCtrl.writeValue(ngModelCtrl.$viewValue);
      };
    }
};


// The option directive is purely designed to communicate the existence (or lack of)
// of dynamically created (and destroyed) option elements to their containing select
// directive via its controller.
var optionDirective = ['$interpolate', function($interpolate) {
  return {
    restrict: 'E',
    priority: 100,
    compile: function(element, attr) {
      if (isDefined(attr.value)) {
        // If the value attribute is defined, check if it contains an interpolation
        var interpolateValueFn = $interpolate(attr.value, true);
      } else {
        // If the value attribute is not defined then we fall back to the
        // text content of the option element, which may be interpolated
        var interpolateTextFn = $interpolate(element.text(), true);
        if (!interpolateTextFn) {
          attr.$set('value', element.text());
        }
      }

      return function(scope, element, attr) {
        // This is an optimization over using ^^ since we don't want to have to search
        // all the way to the root of the DOM for every single option element
        var selectCtrlName = '$selectController',
            parent = element.parent(),
            selectCtrl = parent.data(selectCtrlName) ||
              parent.parent().data(selectCtrlName); // in case we are in optgroup

        if (selectCtrl) {
          selectCtrl.registerOption(scope, element, attr, interpolateValueFn, interpolateTextFn);
        }
      };
    }
  };
}];

var styleDirective = valueFn({
  restrict: 'E',
  terminal: false
});

/**
 * @ngdoc directive
 * @name ngRequired
 *
 * @description
 *
 * ngRequired adds the required {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
 * It is most often used for {@link input `input`} and {@link select `select`} controls, but can also be
 * applied to custom controls.
 *
 * The directive sets the `required` attribute on the element if the Angular expression inside
 * `ngRequired` evaluates to true. A special directive for setting `required` is necessary because we
 * cannot use interpolation inside `required`. See the {@link guide/interpolation interpolation guide}
 * for more info.
 *
 * The validator will set the `required` error key to true if the `required` attribute is set and
 * calling {@link ngModel.NgModelController#$isEmpty `NgModelController.$isEmpty`} with the
 * {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`} returns `true`. For example, the
 * `$isEmpty()` implementation for `input[text]` checks the length of the `$viewValue`. When developing
 * custom controls, `$isEmpty()` can be overwritten to account for a $viewValue that is not string-based.
 *
 * @example
 * <example name="ngRequiredDirective" module="ngRequiredExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('ngRequiredExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.required = true;
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <form name="form">
 *         <label for="required">Toggle required: </label>
 *         <input type="checkbox" ng-model="required" id="required" />
 *         <br>
 *         <label for="input">This input must be filled if `required` is true: </label>
 *         <input type="text" ng-model="model" id="input" name="input" ng-required="required" /><br>
 *         <hr>
 *         required error set? = <code>{{form.input.$error.required}}</code><br>
 *         model = <code>{{model}}</code>
 *       </form>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
       var required = element(by.binding('form.input.$error.required'));
       var model = element(by.binding('model'));
       var input = element(by.id('input'));

       it('should set the required error', function() {
         expect(required.getText()).toContain('true');

         input.sendKeys('123');
         expect(required.getText()).not.toContain('true');
         expect(model.getText()).toContain('123');
       });
 *   </file>
 * </example>
 */
var requiredDirective = function() {
  return {
    restrict: 'A',
    require: '?ngModel',
    link: function(scope, elm, attr, ctrl) {
      if (!ctrl) return;
      attr.required = true; // force truthy in case we are on non input element

      ctrl.$validators.required = function(modelValue, viewValue) {
        return !attr.required || !ctrl.$isEmpty(viewValue);
      };

      attr.$observe('required', function() {
        ctrl.$validate();
      });
    }
  };
};

/**
 * @ngdoc directive
 * @name ngPattern
 *
 * @description
 *
 * ngPattern adds the pattern {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
 *
 * The validator sets the `pattern` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
 * does not match a RegExp which is obtained by evaluating the Angular expression given in the
 * `ngPattern` attribute value:
 * * If the expression evaluates to a RegExp object, then this is used directly.
 * * If the expression evaluates to a string, then it will be converted to a RegExp after wrapping it
 * in `^` and `$` characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
 *
 * <div class="alert alert-info">
 * **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
 * start at the index of the last search's match, thus not taking the whole input value into
 * account.
 * </div>
 *
 * <div class="alert alert-info">
 * **Note:** This directive is also added when the plain `pattern` attribute is used, with two
 * differences:
 * <ol>
 *   <li>
 *     `ngPattern` does not set the `pattern` attribute and therefore HTML5 constraint validation is
 *     not available.
 *   </li>
 *   <li>
 *     The `ngPattern` attribute must be an expression, while the `pattern` value must be
 *     interpolated.
 *   </li>
 * </ol>
 * </div>
 *
 * @example
 * <example name="ngPatternDirective" module="ngPatternExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('ngPatternExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.regex = '\\d+';
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <form name="form">
 *         <label for="regex">Set a pattern (regex string): </label>
 *         <input type="text" ng-model="regex" id="regex" />
 *         <br>
 *         <label for="input">This input is restricted by the current pattern: </label>
 *         <input type="text" ng-model="model" id="input" name="input" ng-pattern="regex" /><br>
 *         <hr>
 *         input valid? = <code>{{form.input.$valid}}</code><br>
 *         model = <code>{{model}}</code>
 *       </form>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
       var model = element(by.binding('model'));
       var input = element(by.id('input'));

       it('should validate the input with the default pattern', function() {
         input.sendKeys('aaa');
         expect(model.getText()).not.toContain('aaa');

         input.clear().then(function() {
           input.sendKeys('123');
           expect(model.getText()).toContain('123');
         });
       });
 *   </file>
 * </example>
 */
var patternDirective = function() {
  return {
    restrict: 'A',
    require: '?ngModel',
    link: function(scope, elm, attr, ctrl) {
      if (!ctrl) return;

      var regexp, patternExp = attr.ngPattern || attr.pattern;
      attr.$observe('pattern', function(regex) {
        if (isString(regex) && regex.length > 0) {
          regex = new RegExp('^' + regex + '$');
        }

        if (regex && !regex.test) {
          throw minErr('ngPattern')('noregexp',
            'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp,
            regex, startingTag(elm));
        }

        regexp = regex || undefined;
        ctrl.$validate();
      });

      ctrl.$validators.pattern = function(modelValue, viewValue) {
        // HTML5 pattern constraint validates the input value, so we validate the viewValue
        return ctrl.$isEmpty(viewValue) || isUndefined(regexp) || regexp.test(viewValue);
      };
    }
  };
};

/**
 * @ngdoc directive
 * @name ngMaxlength
 *
 * @description
 *
 * ngMaxlength adds the maxlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
 *
 * The validator sets the `maxlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
 * is longer than the integer obtained by evaluating the Angular expression given in the
 * `ngMaxlength` attribute value.
 *
 * <div class="alert alert-info">
 * **Note:** This directive is also added when the plain `maxlength` attribute is used, with two
 * differences:
 * <ol>
 *   <li>
 *     `ngMaxlength` does not set the `maxlength` attribute and therefore HTML5 constraint
 *     validation is not available.
 *   </li>
 *   <li>
 *     The `ngMaxlength` attribute must be an expression, while the `maxlength` value must be
 *     interpolated.
 *   </li>
 * </ol>
 * </div>
 *
 * @example
 * <example name="ngMaxlengthDirective" module="ngMaxlengthExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('ngMaxlengthExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.maxlength = 5;
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <form name="form">
 *         <label for="maxlength">Set a maxlength: </label>
 *         <input type="number" ng-model="maxlength" id="maxlength" />
 *         <br>
 *         <label for="input">This input is restricted by the current maxlength: </label>
 *         <input type="text" ng-model="model" id="input" name="input" ng-maxlength="maxlength" /><br>
 *         <hr>
 *         input valid? = <code>{{form.input.$valid}}</code><br>
 *         model = <code>{{model}}</code>
 *       </form>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
       var model = element(by.binding('model'));
       var input = element(by.id('input'));

       it('should validate the input with the default maxlength', function() {
         input.sendKeys('abcdef');
         expect(model.getText()).not.toContain('abcdef');

         input.clear().then(function() {
           input.sendKeys('abcde');
           expect(model.getText()).toContain('abcde');
         });
       });
 *   </file>
 * </example>
 */
var maxlengthDirective = function() {
  return {
    restrict: 'A',
    require: '?ngModel',
    link: function(scope, elm, attr, ctrl) {
      if (!ctrl) return;

      var maxlength = -1;
      attr.$observe('maxlength', function(value) {
        var intVal = toInt(value);
        maxlength = isNaN(intVal) ? -1 : intVal;
        ctrl.$validate();
      });
      ctrl.$validators.maxlength = function(modelValue, viewValue) {
        return (maxlength < 0) || ctrl.$isEmpty(viewValue) || (viewValue.length <= maxlength);
      };
    }
  };
};

/**
 * @ngdoc directive
 * @name ngMinlength
 *
 * @description
 *
 * ngMinlength adds the minlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
 *
 * The validator sets the `minlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
 * is shorter than the integer obtained by evaluating the Angular expression given in the
 * `ngMinlength` attribute value.
 *
 * <div class="alert alert-info">
 * **Note:** This directive is also added when the plain `minlength` attribute is used, with two
 * differences:
 * <ol>
 *   <li>
 *     `ngMinlength` does not set the `minlength` attribute and therefore HTML5 constraint
 *     validation is not available.
 *   </li>
 *   <li>
 *     The `ngMinlength` value must be an expression, while the `minlength` value must be
 *     interpolated.
 *   </li>
 * </ol>
 * </div>
 *
 * @example
 * <example name="ngMinlengthDirective" module="ngMinlengthExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('ngMinlengthExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.minlength = 3;
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <form name="form">
 *         <label for="minlength">Set a minlength: </label>
 *         <input type="number" ng-model="minlength" id="minlength" />
 *         <br>
 *         <label for="input">This input is restricted by the current minlength: </label>
 *         <input type="text" ng-model="model" id="input" name="input" ng-minlength="minlength" /><br>
 *         <hr>
 *         input valid? = <code>{{form.input.$valid}}</code><br>
 *         model = <code>{{model}}</code>
 *       </form>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
       var model = element(by.binding('model'));
       var input = element(by.id('input'));

       it('should validate the input with the default minlength', function() {
         input.sendKeys('ab');
         expect(model.getText()).not.toContain('ab');

         input.sendKeys('abc');
         expect(model.getText()).toContain('abc');
       });
 *   </file>
 * </example>
 */
var minlengthDirective = function() {
  return {
    restrict: 'A',
    require: '?ngModel',
    link: function(scope, elm, attr, ctrl) {
      if (!ctrl) return;

      var minlength = 0;
      attr.$observe('minlength', function(value) {
        minlength = toInt(value) || 0;
        ctrl.$validate();
      });
      ctrl.$validators.minlength = function(modelValue, viewValue) {
        return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;
      };
    }
  };
};

if (window.angular.bootstrap) {
  //AngularJS is already loaded, so we can return here...
  console.log('WARNING: Tried to load angular more than once.');
  return;
}

//try to bind to jquery now so that one can write jqLite(document).ready()
//but we will rebind on bootstrap again.
bindJQuery();

publishExternalAPI(angular);

angular.module("ngLocale", [], ["$provide", function($provide) {
var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
function getDecimals(n) {
  n = n + '';
  var i = n.indexOf('.');
  return (i == -1) ? 0 : n.length - i - 1;
}

function getVF(n, opt_precision) {
  var v = opt_precision;

  if (undefined === v) {
    v = Math.min(getDecimals(n), 3);
  }

  var base = Math.pow(10, v);
  var f = ((n * base) | 0) % base;
  return {v: v, f: f};
}

$provide.value("$locale", {
  "DATETIME_FORMATS": {
    "AMPMS": [
      "AM",
      "PM"
    ],
    "DAY": [
      "Sunday",
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday"
    ],
    "ERANAMES": [
      "Before Christ",
      "Anno Domini"
    ],
    "ERAS": [
      "BC",
      "AD"
    ],
    "FIRSTDAYOFWEEK": 6,
    "MONTH": [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December"
    ],
    "SHORTDAY": [
      "Sun",
      "Mon",
      "Tue",
      "Wed",
      "Thu",
      "Fri",
      "Sat"
    ],
    "SHORTMONTH": [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ],
    "STANDALONEMONTH": [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December"
    ],
    "WEEKENDRANGE": [
      5,
      6
    ],
    "fullDate": "EEEE, MMMM d, y",
    "longDate": "MMMM d, y",
    "medium": "MMM d, y h:mm:ss a",
    "mediumDate": "MMM d, y",
    "mediumTime": "h:mm:ss a",
    "short": "M/d/yy h:mm a",
    "shortDate": "M/d/yy",
    "shortTime": "h:mm a"
  },
  "NUMBER_FORMATS": {
    "CURRENCY_SYM": "$",
    "DECIMAL_SEP": ".",
    "GROUP_SEP": ",",
    "PATTERNS": [
      {
        "gSize": 3,
        "lgSize": 3,
        "maxFrac": 3,
        "minFrac": 0,
        "minInt": 1,
        "negPre": "-",
        "negSuf": "",
        "posPre": "",
        "posSuf": ""
      },
      {
        "gSize": 3,
        "lgSize": 3,
        "maxFrac": 2,
        "minFrac": 2,
        "minInt": 1,
        "negPre": "-\u00a4",
        "negSuf": "",
        "posPre": "\u00a4",
        "posSuf": ""
      }
    ]
  },
  "id": "en-us",
  "localeID": "en_US",
  "pluralCat": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (i == 1 && vf.v == 0) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
});
}]);

  jqLite(document).ready(function() {
    angularInit(document, bootstrap);
  });

})(window, document);

!window.angular.$$csp().noInlineStyle && window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');
/* @preserve
 * The MIT License (MIT)
 * 
 * Copyright (c) 2013-2017 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
/**
 * bluebird build version 3.5.0
 * Features enabled: core, race, call_get, generators, map, nodeify, promisify, props, reduce, settle, some, using, timers, filter, any, each
*/
!function (t) { if ("object" == typeof exports && "undefined" != typeof module) module.exports = t(); else if ("function" == typeof define && define.amd) define([], t); else { var e; "undefined" != typeof window ? e = window : "undefined" != typeof global ? e = global : "undefined" != typeof self && (e = self), e.Promise = t() } }(function () {
    var t, e, n; return function r(t, e, n) { function i(s, a) { if (!e[s]) { if (!t[s]) { var c = "function" == typeof _dereq_ && _dereq_; if (!a && c) return c(s, !0); if (o) return o(s, !0); var l = new Error("Cannot find module '" + s + "'"); throw l.code = "MODULE_NOT_FOUND", l } var u = e[s] = { exports: {} }; t[s][0].call(u.exports, function (e) { var n = t[s][1][e]; return i(n ? n : e) }, u, u.exports, r, t, e, n) } return e[s].exports } for (var o = "function" == typeof _dereq_ && _dereq_, s = 0; s < n.length; s++) i(n[s]); return i }({
        1: [function (t, e, n) { "use strict"; e.exports = function (t) { function e(t) { var e = new n(t), r = e.promise(); return e.setHowMany(1), e.setUnwrap(), e.init(), r } var n = t._SomePromiseArray; t.any = function (t) { return e(t) }, t.prototype.any = function () { return e(this) } } }, {}], 2: [function (t, e, n) { "use strict"; function r() { this._customScheduler = !1, this._isTickUsed = !1, this._lateQueue = new u(16), this._normalQueue = new u(16), this._haveDrainedQueues = !1, this._trampolineEnabled = !0; var t = this; this.drainQueues = function () { t._drainQueues() }, this._schedule = l } function i(t, e, n) { this._lateQueue.push(t, e, n), this._queueTick() } function o(t, e, n) { this._normalQueue.push(t, e, n), this._queueTick() } function s(t) { this._normalQueue._pushOne(t), this._queueTick() } var a; try { throw new Error } catch (c) { a = c } var l = t("./schedule"), u = t("./queue"), p = t("./util"); r.prototype.setScheduler = function (t) { var e = this._schedule; return this._schedule = t, this._customScheduler = !0, e }, r.prototype.hasCustomScheduler = function () { return this._customScheduler }, r.prototype.enableTrampoline = function () { this._trampolineEnabled = !0 }, r.prototype.disableTrampolineIfNecessary = function () { p.hasDevTools && (this._trampolineEnabled = !1) }, r.prototype.haveItemsQueued = function () { return this._isTickUsed || this._haveDrainedQueues }, r.prototype.fatalError = function (t, e) { e ? (process.stderr.write("Fatal " + (t instanceof Error ? t.stack : t) + "\n"), process.exit(2)) : this.throwLater(t) }, r.prototype.throwLater = function (t, e) { if (1 === arguments.length && (e = t, t = function () { throw e }), "undefined" != typeof setTimeout) setTimeout(function () { t(e) }, 0); else try { this._schedule(function () { t(e) }) } catch (n) { throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n") } }, p.hasDevTools ? (r.prototype.invokeLater = function (t, e, n) { this._trampolineEnabled ? i.call(this, t, e, n) : this._schedule(function () { setTimeout(function () { t.call(e, n) }, 100) }) }, r.prototype.invoke = function (t, e, n) { this._trampolineEnabled ? o.call(this, t, e, n) : this._schedule(function () { t.call(e, n) }) }, r.prototype.settlePromises = function (t) { this._trampolineEnabled ? s.call(this, t) : this._schedule(function () { t._settlePromises() }) }) : (r.prototype.invokeLater = i, r.prototype.invoke = o, r.prototype.settlePromises = s), r.prototype._drainQueue = function (t) { for (; t.length() > 0;) { var e = t.shift(); if ("function" == typeof e) { var n = t.shift(), r = t.shift(); e.call(n, r) } else e._settlePromises() } }, r.prototype._drainQueues = function () { this._drainQueue(this._normalQueue), this._reset(), this._haveDrainedQueues = !0, this._drainQueue(this._lateQueue) }, r.prototype._queueTick = function () { this._isTickUsed || (this._isTickUsed = !0, this._schedule(this.drainQueues)) }, r.prototype._reset = function () { this._isTickUsed = !1 }, e.exports = r, e.exports.firstLineError = a }, { "./queue": 26, "./schedule": 29, "./util": 36 }], 3: [function (t, e, n) { "use strict"; e.exports = function (t, e, n, r) { var i = !1, o = function (t, e) { this._reject(e) }, s = function (t, e) { e.promiseRejectionQueued = !0, e.bindingPromise._then(o, o, null, this, t) }, a = function (t, e) { 0 === (50397184 & this._bitField) && this._resolveCallback(e.target) }, c = function (t, e) { e.promiseRejectionQueued || this._reject(t) }; t.prototype.bind = function (o) { i || (i = !0, t.prototype._propagateFrom = r.propagateFromFunction(), t.prototype._boundValue = r.boundValueFunction()); var l = n(o), u = new t(e); u._propagateFrom(this, 1); var p = this._target(); if (u._setBoundTo(l), l instanceof t) { var h = { promiseRejectionQueued: !1, promise: u, target: p, bindingPromise: l }; p._then(e, s, void 0, u, h), l._then(a, c, void 0, u, h), u._setOnCancel(l) } else u._resolveCallback(p); return u }, t.prototype._setBoundTo = function (t) { void 0 !== t ? (this._bitField = 2097152 | this._bitField, this._boundTo = t) : this._bitField = -2097153 & this._bitField }, t.prototype._isBound = function () { return 2097152 === (2097152 & this._bitField) }, t.bind = function (e, n) { return t.resolve(n).bind(e) } } }, {}], 4: [function (t, e, n) { "use strict"; function r() { try { Promise === o && (Promise = i) } catch (t) { } return o } var i; "undefined" != typeof Promise && (i = Promise); var o = t("./promise")(); o.noConflict = r, e.exports = o }, { "./promise": 22 }], 5: [function (t, e, n) { "use strict"; var r = Object.create; if (r) { var i = r(null), o = r(null); i[" size"] = o[" size"] = 0 } e.exports = function (e) { function n(t, n) { var r; if (null != t && (r = t[n]), "function" != typeof r) { var i = "Object " + a.classString(t) + " has no method '" + a.toString(n) + "'"; throw new e.TypeError(i) } return r } function r(t) { var e = this.pop(), r = n(t, e); return r.apply(t, this) } function i(t) { return t[this] } function o(t) { var e = +this; return 0 > e && (e = Math.max(0, e + t.length)), t[e] } var s, a = t("./util"), c = a.canEvaluate; a.isIdentifier; e.prototype.call = function (t) { var e = [].slice.call(arguments, 1); return e.push(t), this._then(r, void 0, void 0, e, void 0) }, e.prototype.get = function (t) { var e, n = "number" == typeof t; if (n) e = o; else if (c) { var r = s(t); e = null !== r ? r : i } else e = i; return this._then(e, void 0, void 0, t, void 0) } } }, { "./util": 36 }], 6: [function (t, e, n) { "use strict"; e.exports = function (e, n, r, i) { var o = t("./util"), s = o.tryCatch, a = o.errorObj, c = e._async; e.prototype["break"] = e.prototype.cancel = function () { if (!i.cancellation()) return this._warn("cancellation is disabled"); for (var t = this, e = t; t._isCancellable() ;) { if (!t._cancelBy(e)) { e._isFollowing() ? e._followee().cancel() : e._cancelBranched(); break } var n = t._cancellationParent; if (null == n || !n._isCancellable()) { t._isFollowing() ? t._followee().cancel() : t._cancelBranched(); break } t._isFollowing() && t._followee().cancel(), t._setWillBeCancelled(), e = t, t = n } }, e.prototype._branchHasCancelled = function () { this._branchesRemainingToCancel-- }, e.prototype._enoughBranchesHaveCancelled = function () { return void 0 === this._branchesRemainingToCancel || this._branchesRemainingToCancel <= 0 }, e.prototype._cancelBy = function (t) { return t === this ? (this._branchesRemainingToCancel = 0, this._invokeOnCancel(), !0) : (this._branchHasCancelled(), this._enoughBranchesHaveCancelled() ? (this._invokeOnCancel(), !0) : !1) }, e.prototype._cancelBranched = function () { this._enoughBranchesHaveCancelled() && this._cancel() }, e.prototype._cancel = function () { this._isCancellable() && (this._setCancelled(), c.invoke(this._cancelPromises, this, void 0)) }, e.prototype._cancelPromises = function () { this._length() > 0 && this._settlePromises() }, e.prototype._unsetOnCancel = function () { this._onCancelField = void 0 }, e.prototype._isCancellable = function () { return this.isPending() && !this._isCancelled() }, e.prototype.isCancellable = function () { return this.isPending() && !this.isCancelled() }, e.prototype._doInvokeOnCancel = function (t, e) { if (o.isArray(t)) for (var n = 0; n < t.length; ++n) this._doInvokeOnCancel(t[n], e); else if (void 0 !== t) if ("function" == typeof t) { if (!e) { var r = s(t).call(this._boundValue()); r === a && (this._attachExtraTrace(r.e), c.throwLater(r.e)) } } else t._resultCancelled(this) }, e.prototype._invokeOnCancel = function () { var t = this._onCancel(); this._unsetOnCancel(), c.invoke(this._doInvokeOnCancel, this, t) }, e.prototype._invokeInternalOnCancel = function () { this._isCancellable() && (this._doInvokeOnCancel(this._onCancel(), !0), this._unsetOnCancel()) }, e.prototype._resultCancelled = function () { this.cancel() } } }, { "./util": 36 }], 7: [function (t, e, n) { "use strict"; e.exports = function (e) { function n(t, n, a) { return function (c) { var l = a._boundValue(); t: for (var u = 0; u < t.length; ++u) { var p = t[u]; if (p === Error || null != p && p.prototype instanceof Error) { if (c instanceof p) return o(n).call(l, c) } else if ("function" == typeof p) { var h = o(p).call(l, c); if (h === s) return h; if (h) return o(n).call(l, c) } else if (r.isObject(c)) { for (var f = i(p), _ = 0; _ < f.length; ++_) { var d = f[_]; if (p[d] != c[d]) continue t } return o(n).call(l, c) } } return e } } var r = t("./util"), i = t("./es5").keys, o = r.tryCatch, s = r.errorObj; return n } }, { "./es5": 13, "./util": 36 }], 8: [function (t, e, n) { "use strict"; e.exports = function (t) { function e() { this._trace = new e.CapturedTrace(r()) } function n() { return i ? new e : void 0 } function r() { var t = o.length - 1; return t >= 0 ? o[t] : void 0 } var i = !1, o = []; return t.prototype._promiseCreated = function () { }, t.prototype._pushContext = function () { }, t.prototype._popContext = function () { return null }, t._peekContext = t.prototype._peekContext = function () { }, e.prototype._pushContext = function () { void 0 !== this._trace && (this._trace._promiseCreated = null, o.push(this._trace)) }, e.prototype._popContext = function () { if (void 0 !== this._trace) { var t = o.pop(), e = t._promiseCreated; return t._promiseCreated = null, e } return null }, e.CapturedTrace = null, e.create = n, e.deactivateLongStackTraces = function () { }, e.activateLongStackTraces = function () { var n = t.prototype._pushContext, o = t.prototype._popContext, s = t._peekContext, a = t.prototype._peekContext, c = t.prototype._promiseCreated; e.deactivateLongStackTraces = function () { t.prototype._pushContext = n, t.prototype._popContext = o, t._peekContext = s, t.prototype._peekContext = a, t.prototype._promiseCreated = c, i = !1 }, i = !0, t.prototype._pushContext = e.prototype._pushContext, t.prototype._popContext = e.prototype._popContext, t._peekContext = t.prototype._peekContext = r, t.prototype._promiseCreated = function () { var t = this._peekContext(); t && null == t._promiseCreated && (t._promiseCreated = this) } }, e } }, {}], 9: [function (t, e, n) { "use strict"; e.exports = function (e, n) { function r(t, e) { return { promise: e } } function i() { return !1 } function o(t, e, n) { var r = this; try { t(e, n, function (t) { if ("function" != typeof t) throw new TypeError("onCancel must be a function, got: " + H.toString(t)); r._attachCancellationCallback(t) }) } catch (i) { return i } } function s(t) { if (!this._isCancellable()) return this; var e = this._onCancel(); void 0 !== e ? H.isArray(e) ? e.push(t) : this._setOnCancel([e, t]) : this._setOnCancel(t) } function a() { return this._onCancelField } function c(t) { this._onCancelField = t } function l() { this._cancellationParent = void 0, this._onCancelField = void 0 } function u(t, e) { if (0 !== (1 & e)) { this._cancellationParent = t; var n = t._branchesRemainingToCancel; void 0 === n && (n = 0), t._branchesRemainingToCancel = n + 1 } 0 !== (2 & e) && t._isBound() && this._setBoundTo(t._boundTo) } function p(t, e) { 0 !== (2 & e) && t._isBound() && this._setBoundTo(t._boundTo) } function h() { var t = this._boundTo; return void 0 !== t && t instanceof e ? t.isFulfilled() ? t.value() : void 0 : t } function f() { this._trace = new S(this._peekContext()) } function _(t, e) { if (N(t)) { var n = this._trace; if (void 0 !== n && e && (n = n._parent), void 0 !== n) n.attachExtraTrace(t); else if (!t.__stackCleaned__) { var r = j(t); H.notEnumerableProp(t, "stack", r.message + "\n" + r.stack.join("\n")), H.notEnumerableProp(t, "__stackCleaned__", !0) } } } function d(t, e, n, r, i) { if (void 0 === t && null !== e && W) { if (void 0 !== i && i._returnedNonUndefined()) return; if (0 === (65535 & r._bitField)) return; n && (n += " "); var o = "", s = ""; if (e._trace) { for (var a = e._trace.stack.split("\n"), c = w(a), l = c.length - 1; l >= 0; --l) { var u = c[l]; if (!U.test(u)) { var p = u.match(M); p && (o = "at " + p[1] + ":" + p[2] + ":" + p[3] + " "); break } } if (c.length > 0) for (var h = c[0], l = 0; l < a.length; ++l) if (a[l] === h) { l > 0 && (s = "\n" + a[l - 1]); break } } var f = "a promise was created in a " + n + "handler " + o + "but was not returned from it, see http://goo.gl/rRqMUw" + s; r._warn(f, !0, e) } } function v(t, e) { var n = t + " is deprecated and will be removed in a future version."; return e && (n += " Use " + e + " instead."), y(n) } function y(t, n, r) { if (ot.warnings) { var i, o = new L(t); if (n) r._attachExtraTrace(o); else if (ot.longStackTraces && (i = e._peekContext())) i.attachExtraTrace(o); else { var s = j(o); o.stack = s.message + "\n" + s.stack.join("\n") } tt("warning", o) || E(o, "", !0) } } function m(t, e) { for (var n = 0; n < e.length - 1; ++n) e[n].push("From previous event:"), e[n] = e[n].join("\n"); return n < e.length && (e[n] = e[n].join("\n")), t + "\n" + e.join("\n") } function g(t) { for (var e = 0; e < t.length; ++e) (0 === t[e].length || e + 1 < t.length && t[e][0] === t[e + 1][0]) && (t.splice(e, 1), e--) } function b(t) { for (var e = t[0], n = 1; n < t.length; ++n) { for (var r = t[n], i = e.length - 1, o = e[i], s = -1, a = r.length - 1; a >= 0; --a) if (r[a] === o) { s = a; break } for (var a = s; a >= 0; --a) { var c = r[a]; if (e[i] !== c) break; e.pop(), i-- } e = r } } function w(t) { for (var e = [], n = 0; n < t.length; ++n) { var r = t[n], i = "    (No stack trace)" === r || q.test(r), o = i && nt(r); i && !o && ($ && " " !== r.charAt(0) && (r = "    " + r), e.push(r)) } return e } function C(t) { for (var e = t.stack.replace(/\s+$/g, "").split("\n"), n = 0; n < e.length; ++n) { var r = e[n]; if ("    (No stack trace)" === r || q.test(r)) break } return n > 0 && "SyntaxError" != t.name && (e = e.slice(n)), e } function j(t) { var e = t.stack, n = t.toString(); return e = "string" == typeof e && e.length > 0 ? C(t) : ["    (No stack trace)"], { message: n, stack: "SyntaxError" == t.name ? e : w(e) } } function E(t, e, n) { if ("undefined" != typeof console) { var r; if (H.isObject(t)) { var i = t.stack; r = e + Q(i, t) } else r = e + String(t); "function" == typeof D ? D(r, n) : ("function" == typeof console.log || "object" == typeof console.log) && console.log(r) } } function k(t, e, n, r) { var i = !1; try { "function" == typeof e && (i = !0, "rejectionHandled" === t ? e(r) : e(n, r)) } catch (o) { I.throwLater(o) } "unhandledRejection" === t ? tt(t, n, r) || i || E(n, "Unhandled rejection ") : tt(t, r) } function F(t) { var e; if ("function" == typeof t) e = "[function " + (t.name || "anonymous") + "]"; else { e = t && "function" == typeof t.toString ? t.toString() : H.toString(t); var n = /\[object [a-zA-Z0-9$_]+\]/; if (n.test(e)) try { var r = JSON.stringify(t); e = r } catch (i) { } 0 === e.length && (e = "(empty array)") } return "(<" + x(e) + ">, no stack trace)" } function x(t) { var e = 41; return t.length < e ? t : t.substr(0, e - 3) + "..." } function T() { return "function" == typeof it } function P(t) { var e = t.match(rt); return e ? { fileName: e[1], line: parseInt(e[2], 10) } : void 0 } function R(t, e) { if (T()) { for (var n, r, i = t.stack.split("\n"), o = e.stack.split("\n"), s = -1, a = -1, c = 0; c < i.length; ++c) { var l = P(i[c]); if (l) { n = l.fileName, s = l.line; break } } for (var c = 0; c < o.length; ++c) { var l = P(o[c]); if (l) { r = l.fileName, a = l.line; break } } 0 > s || 0 > a || !n || !r || n !== r || s >= a || (nt = function (t) { if (B.test(t)) return !0; var e = P(t); return e && e.fileName === n && s <= e.line && e.line <= a ? !0 : !1 }) } } function S(t) { this._parent = t, this._promisesCreated = 0; var e = this._length = 1 + (void 0 === t ? 0 : t._length); it(this, S), e > 32 && this.uncycle() } var O, A, D, V = e._getDomain, I = e._async, L = t("./errors").Warning, H = t("./util"), N = H.canAttachTrace, B = /[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/, U = /\((?:timers\.js):\d+:\d+\)/, M = /[\/<\(](.+?):(\d+):(\d+)\)?\s*$/, q = null, Q = null, $ = !1, G = !(0 == H.env("BLUEBIRD_DEBUG") || !H.env("BLUEBIRD_DEBUG") && "development" !== H.env("NODE_ENV")), z = !(0 == H.env("BLUEBIRD_WARNINGS") || !G && !H.env("BLUEBIRD_WARNINGS")), X = !(0 == H.env("BLUEBIRD_LONG_STACK_TRACES") || !G && !H.env("BLUEBIRD_LONG_STACK_TRACES")), W = 0 != H.env("BLUEBIRD_W_FORGOTTEN_RETURN") && (z || !!H.env("BLUEBIRD_W_FORGOTTEN_RETURN")); e.prototype.suppressUnhandledRejections = function () { var t = this._target(); t._bitField = -1048577 & t._bitField | 524288 }, e.prototype._ensurePossibleRejectionHandled = function () { 0 === (524288 & this._bitField) && (this._setRejectionIsUnhandled(), I.invokeLater(this._notifyUnhandledRejection, this, void 0)) }, e.prototype._notifyUnhandledRejectionIsHandled = function () { k("rejectionHandled", O, void 0, this) }, e.prototype._setReturnedNonUndefined = function () { this._bitField = 268435456 | this._bitField }, e.prototype._returnedNonUndefined = function () { return 0 !== (268435456 & this._bitField) }, e.prototype._notifyUnhandledRejection = function () { if (this._isRejectionUnhandled()) { var t = this._settledValue(); this._setUnhandledRejectionIsNotified(), k("unhandledRejection", A, t, this) } }, e.prototype._setUnhandledRejectionIsNotified = function () { this._bitField = 262144 | this._bitField }, e.prototype._unsetUnhandledRejectionIsNotified = function () { this._bitField = -262145 & this._bitField }, e.prototype._isUnhandledRejectionNotified = function () { return (262144 & this._bitField) > 0 }, e.prototype._setRejectionIsUnhandled = function () { this._bitField = 1048576 | this._bitField }, e.prototype._unsetRejectionIsUnhandled = function () { this._bitField = -1048577 & this._bitField, this._isUnhandledRejectionNotified() && (this._unsetUnhandledRejectionIsNotified(), this._notifyUnhandledRejectionIsHandled()) }, e.prototype._isRejectionUnhandled = function () { return (1048576 & this._bitField) > 0 }, e.prototype._warn = function (t, e, n) { return y(t, e, n || this) }, e.onPossiblyUnhandledRejection = function (t) { var e = V(); A = "function" == typeof t ? null === e ? t : H.domainBind(e, t) : void 0 }, e.onUnhandledRejectionHandled = function (t) { var e = V(); O = "function" == typeof t ? null === e ? t : H.domainBind(e, t) : void 0 }; var K = function () { }; e.longStackTraces = function () { if (I.haveItemsQueued() && !ot.longStackTraces) throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n"); if (!ot.longStackTraces && T()) { var t = e.prototype._captureStackTrace, r = e.prototype._attachExtraTrace; ot.longStackTraces = !0, K = function () { if (I.haveItemsQueued() && !ot.longStackTraces) throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n"); e.prototype._captureStackTrace = t, e.prototype._attachExtraTrace = r, n.deactivateLongStackTraces(), I.enableTrampoline(), ot.longStackTraces = !1 }, e.prototype._captureStackTrace = f, e.prototype._attachExtraTrace = _, n.activateLongStackTraces(), I.disableTrampolineIfNecessary() } }, e.hasLongStackTraces = function () { return ot.longStackTraces && T() }; var J = function () { try { if ("function" == typeof CustomEvent) { var t = new CustomEvent("CustomEvent"); return H.global.dispatchEvent(t), function (t, e) { var n = new CustomEvent(t.toLowerCase(), { detail: e, cancelable: !0 }); return !H.global.dispatchEvent(n) } } if ("function" == typeof Event) { var t = new Event("CustomEvent"); return H.global.dispatchEvent(t), function (t, e) { var n = new Event(t.toLowerCase(), { cancelable: !0 }); return n.detail = e, !H.global.dispatchEvent(n) } } var t = document.createEvent("CustomEvent"); return t.initCustomEvent("testingtheevent", !1, !0, {}), H.global.dispatchEvent(t), function (t, e) { var n = document.createEvent("CustomEvent"); return n.initCustomEvent(t.toLowerCase(), !1, !0, e), !H.global.dispatchEvent(n) } } catch (e) { } return function () { return !1 } }(), Y = function () { return H.isNode ? function () { return process.emit.apply(process, arguments) } : H.global ? function (t) { var e = "on" + t.toLowerCase(), n = H.global[e]; return n ? (n.apply(H.global, [].slice.call(arguments, 1)), !0) : !1 } : function () { return !1 } }(), Z = { promiseCreated: r, promiseFulfilled: r, promiseRejected: r, promiseResolved: r, promiseCancelled: r, promiseChained: function (t, e, n) { return { promise: e, child: n } }, warning: function (t, e) { return { warning: e } }, unhandledRejection: function (t, e, n) { return { reason: e, promise: n } }, rejectionHandled: r }, tt = function (t) { var e = !1; try { e = Y.apply(null, arguments) } catch (n) { I.throwLater(n), e = !0 } var r = !1; try { r = J(t, Z[t].apply(null, arguments)) } catch (n) { I.throwLater(n), r = !0 } return r || e }; e.config = function (t) { if (t = Object(t), "longStackTraces" in t && (t.longStackTraces ? e.longStackTraces() : !t.longStackTraces && e.hasLongStackTraces() && K()), "warnings" in t) { var n = t.warnings; ot.warnings = !!n, W = ot.warnings, H.isObject(n) && "wForgottenReturn" in n && (W = !!n.wForgottenReturn) } if ("cancellation" in t && t.cancellation && !ot.cancellation) { if (I.haveItemsQueued()) throw new Error("cannot enable cancellation after promises are in use"); e.prototype._clearCancellationData = l, e.prototype._propagateFrom = u, e.prototype._onCancel = a, e.prototype._setOnCancel = c, e.prototype._attachCancellationCallback = s, e.prototype._execute = o, et = u, ot.cancellation = !0 } return "monitoring" in t && (t.monitoring && !ot.monitoring ? (ot.monitoring = !0, e.prototype._fireEvent = tt) : !t.monitoring && ot.monitoring && (ot.monitoring = !1, e.prototype._fireEvent = i)), e }, e.prototype._fireEvent = i, e.prototype._execute = function (t, e, n) { try { t(e, n) } catch (r) { return r } }, e.prototype._onCancel = function () { }, e.prototype._setOnCancel = function (t) { }, e.prototype._attachCancellationCallback = function (t) { }, e.prototype._captureStackTrace = function () { }, e.prototype._attachExtraTrace = function () { }, e.prototype._clearCancellationData = function () { }, e.prototype._propagateFrom = function (t, e) { }; var et = p, nt = function () { return !1 }, rt = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/; H.inherits(S, Error), n.CapturedTrace = S, S.prototype.uncycle = function () { var t = this._length; if (!(2 > t)) { for (var e = [], n = {}, r = 0, i = this; void 0 !== i; ++r) e.push(i), i = i._parent; t = this._length = r; for (var r = t - 1; r >= 0; --r) { var o = e[r].stack; void 0 === n[o] && (n[o] = r) } for (var r = 0; t > r; ++r) { var s = e[r].stack, a = n[s]; if (void 0 !== a && a !== r) { a > 0 && (e[a - 1]._parent = void 0, e[a - 1]._length = 1), e[r]._parent = void 0, e[r]._length = 1; var c = r > 0 ? e[r - 1] : this; t - 1 > a ? (c._parent = e[a + 1], c._parent.uncycle(), c._length = c._parent._length + 1) : (c._parent = void 0, c._length = 1); for (var l = c._length + 1, u = r - 2; u >= 0; --u) e[u]._length = l, l++; return } } } }, S.prototype.attachExtraTrace = function (t) { if (!t.__stackCleaned__) { this.uncycle(); for (var e = j(t), n = e.message, r = [e.stack], i = this; void 0 !== i;) r.push(w(i.stack.split("\n"))), i = i._parent; b(r), g(r), H.notEnumerableProp(t, "stack", m(n, r)), H.notEnumerableProp(t, "__stackCleaned__", !0) } }; var it = function () { var t = /^\s*at\s*/, e = function (t, e) { return "string" == typeof t ? t : void 0 !== e.name && void 0 !== e.message ? e.toString() : F(e) }; if ("number" == typeof Error.stackTraceLimit && "function" == typeof Error.captureStackTrace) { Error.stackTraceLimit += 6, q = t, Q = e; var n = Error.captureStackTrace; return nt = function (t) { return B.test(t) }, function (t, e) { Error.stackTraceLimit += 6, n(t, e), Error.stackTraceLimit -= 6 } } var r = new Error; if ("string" == typeof r.stack && r.stack.split("\n")[0].indexOf("stackDetection@") >= 0) return q = /@/, Q = e, $ = !0, function (t) { t.stack = (new Error).stack }; var i; try { throw new Error } catch (o) { i = "stack" in o } return "stack" in r || !i || "number" != typeof Error.stackTraceLimit ? (Q = function (t, e) { return "string" == typeof t ? t : "object" != typeof e && "function" != typeof e || void 0 === e.name || void 0 === e.message ? F(e) : e.toString() }, null) : (q = t, Q = e, function (t) { Error.stackTraceLimit += 6; try { throw new Error } catch (e) { t.stack = e.stack } Error.stackTraceLimit -= 6 }) }([]); "undefined" != typeof console && "undefined" != typeof console.warn && (D = function (t) { console.warn(t) }, H.isNode && process.stderr.isTTY ? D = function (t, e) { var n = e ? "[33m" : "[31m"; console.warn(n + t + "[0m\n") } : H.isNode || "string" != typeof (new Error).stack || (D = function (t, e) { console.warn("%c" + t, e ? "color: darkorange" : "color: red") })); var ot = { warnings: z, longStackTraces: !1, cancellation: !1, monitoring: !1 }; return X && e.longStackTraces(), { longStackTraces: function () { return ot.longStackTraces }, warnings: function () { return ot.warnings }, cancellation: function () { return ot.cancellation }, monitoring: function () { return ot.monitoring }, propagateFromFunction: function () { return et }, boundValueFunction: function () { return h }, checkForgottenReturns: d, setBounds: R, warn: y, deprecated: v, CapturedTrace: S, fireDomEvent: J, fireGlobalEvent: Y } } }, { "./errors": 12, "./util": 36 }], 10: [function (t, e, n) { "use strict"; e.exports = function (t) { function e() { return this.value } function n() { throw this.reason } t.prototype["return"] = t.prototype.thenReturn = function (n) { return n instanceof t && n.suppressUnhandledRejections(), this._then(e, void 0, void 0, { value: n }, void 0) }, t.prototype["throw"] = t.prototype.thenThrow = function (t) { return this._then(n, void 0, void 0, { reason: t }, void 0) }, t.prototype.catchThrow = function (t) { if (arguments.length <= 1) return this._then(void 0, n, void 0, { reason: t }, void 0); var e = arguments[1], r = function () { throw e }; return this.caught(t, r) }, t.prototype.catchReturn = function (n) { if (arguments.length <= 1) return n instanceof t && n.suppressUnhandledRejections(), this._then(void 0, e, void 0, { value: n }, void 0); var r = arguments[1]; r instanceof t && r.suppressUnhandledRejections(); var i = function () { return r }; return this.caught(n, i) } } }, {}], 11: [function (t, e, n) { "use strict"; e.exports = function (t, e) { function n() { return o(this) } function r(t, n) { return i(t, n, e, e) } var i = t.reduce, o = t.all; t.prototype.each = function (t) { return i(this, t, e, 0)._then(n, void 0, void 0, this, void 0) }, t.prototype.mapSeries = function (t) { return i(this, t, e, e) }, t.each = function (t, r) { return i(t, r, e, 0)._then(n, void 0, void 0, t, void 0) }, t.mapSeries = r } }, {}], 12: [function (t, e, n) { "use strict"; function r(t, e) { function n(r) { return this instanceof n ? (p(this, "message", "string" == typeof r ? r : e), p(this, "name", t), void (Error.captureStackTrace ? Error.captureStackTrace(this, this.constructor) : Error.call(this))) : new n(r) } return u(n, Error), n } function i(t) { return this instanceof i ? (p(this, "name", "OperationalError"), p(this, "message", t), this.cause = t, this.isOperational = !0, void (t instanceof Error ? (p(this, "message", t.message), p(this, "stack", t.stack)) : Error.captureStackTrace && Error.captureStackTrace(this, this.constructor))) : new i(t) } var o, s, a = t("./es5"), c = a.freeze, l = t("./util"), u = l.inherits, p = l.notEnumerableProp, h = r("Warning", "warning"), f = r("CancellationError", "cancellation error"), _ = r("TimeoutError", "timeout error"), d = r("AggregateError", "aggregate error"); try { o = TypeError, s = RangeError } catch (v) { o = r("TypeError", "type error"), s = r("RangeError", "range error") } for (var y = "join pop push shift unshift slice filter forEach some every map indexOf lastIndexOf reduce reduceRight sort reverse".split(" "), m = 0; m < y.length; ++m) "function" == typeof Array.prototype[y[m]] && (d.prototype[y[m]] = Array.prototype[y[m]]); a.defineProperty(d.prototype, "length", { value: 0, configurable: !1, writable: !0, enumerable: !0 }), d.prototype.isOperational = !0; var g = 0; d.prototype.toString = function () { var t = Array(4 * g + 1).join(" "), e = "\n" + t + "AggregateError of:\n"; g++, t = Array(4 * g + 1).join(" "); for (var n = 0; n < this.length; ++n) { for (var r = this[n] === this ? "[Circular AggregateError]" : this[n] + "", i = r.split("\n"), o = 0; o < i.length; ++o) i[o] = t + i[o]; r = i.join("\n"), e += r + "\n" } return g--, e }, u(i, Error); var b = Error.__BluebirdErrorTypes__; b || (b = c({ CancellationError: f, TimeoutError: _, OperationalError: i, RejectionError: i, AggregateError: d }), a.defineProperty(Error, "__BluebirdErrorTypes__", { value: b, writable: !1, enumerable: !1, configurable: !1 })), e.exports = { Error: Error, TypeError: o, RangeError: s, CancellationError: b.CancellationError, OperationalError: b.OperationalError, TimeoutError: b.TimeoutError, AggregateError: b.AggregateError, Warning: h } }, { "./es5": 13, "./util": 36 }], 13: [function (t, e, n) { var r = function () { "use strict"; return void 0 === this }(); if (r) e.exports = { freeze: Object.freeze, defineProperty: Object.defineProperty, getDescriptor: Object.getOwnPropertyDescriptor, keys: Object.keys, names: Object.getOwnPropertyNames, getPrototypeOf: Object.getPrototypeOf, isArray: Array.isArray, isES5: r, propertyIsWritable: function (t, e) { var n = Object.getOwnPropertyDescriptor(t, e); return !(n && !n.writable && !n.set) } }; else { var i = {}.hasOwnProperty, o = {}.toString, s = {}.constructor.prototype, a = function (t) { var e = []; for (var n in t) i.call(t, n) && e.push(n); return e }, c = function (t, e) { return { value: t[e] } }, l = function (t, e, n) { return t[e] = n.value, t }, u = function (t) { return t }, p = function (t) { try { return Object(t).constructor.prototype } catch (e) { return s } }, h = function (t) { try { return "[object Array]" === o.call(t) } catch (e) { return !1 } }; e.exports = { isArray: h, keys: a, names: a, defineProperty: l, getDescriptor: c, freeze: u, getPrototypeOf: p, isES5: r, propertyIsWritable: function () { return !0 } } } }, {}], 14: [function (t, e, n) { "use strict"; e.exports = function (t, e) { var n = t.map; t.prototype.filter = function (t, r) { return n(this, t, r, e) }, t.filter = function (t, r, i) { return n(t, r, i, e) } } }, {}], 15: [function (t, e, n) { "use strict"; e.exports = function (e, n, r) { function i(t, e, n) { this.promise = t, this.type = e, this.handler = n, this.called = !1, this.cancelPromise = null } function o(t) { this.finallyHandler = t } function s(t, e) { return null != t.cancelPromise ? (arguments.length > 1 ? t.cancelPromise._reject(e) : t.cancelPromise._cancel(), t.cancelPromise = null, !0) : !1 } function a() { return l.call(this, this.promise._target()._settledValue()) } function c(t) { return s(this, t) ? void 0 : (h.e = t, h) } function l(t) { var i = this.promise, l = this.handler; if (!this.called) { this.called = !0; var u = this.isFinallyHandler() ? l.call(i._boundValue()) : l.call(i._boundValue(), t); if (u === r) return u; if (void 0 !== u) { i._setReturnedNonUndefined(); var f = n(u, i); if (f instanceof e) { if (null != this.cancelPromise) { if (f._isCancelled()) { var _ = new p("late cancellation observer"); return i._attachExtraTrace(_), h.e = _, h } f.isPending() && f._attachCancellationCallback(new o(this)) } return f._then(a, c, void 0, this, void 0) } } } return i.isRejected() ? (s(this), h.e = t, h) : (s(this), t) } var u = t("./util"), p = e.CancellationError, h = u.errorObj, f = t("./catch_filter")(r); return i.prototype.isFinallyHandler = function () { return 0 === this.type }, o.prototype._resultCancelled = function () { s(this.finallyHandler) }, e.prototype._passThrough = function (t, e, n, r) { return "function" != typeof t ? this.then() : this._then(n, r, void 0, new i(this, e, t), void 0) }, e.prototype.lastly = e.prototype["finally"] = function (t) { return this._passThrough(t, 0, l, l) }, e.prototype.tap = function (t) { return this._passThrough(t, 1, l) }, e.prototype.tapCatch = function (t) { var n = arguments.length; if (1 === n) return this._passThrough(t, 1, void 0, l); var r, i = new Array(n - 1), o = 0; for (r = 0; n - 1 > r; ++r) { var s = arguments[r]; if (!u.isObject(s)) return e.reject(new TypeError("tapCatch statement predicate: expecting an object but got " + u.classString(s))); i[o++] = s } i.length = o; var a = arguments[r]; return this._passThrough(f(i, a, this), 1, void 0, l) }, i } }, { "./catch_filter": 7, "./util": 36 }], 16: [function (t, e, n) {
            "use strict"; e.exports = function (e, n, r, i, o, s) {
                function a(t, n, r) { for (var o = 0; o < n.length; ++o) { r._pushContext(); var s = f(n[o])(t); if (r._popContext(), s === h) { r._pushContext(); var a = e.reject(h.e); return r._popContext(), a } var c = i(s, r); if (c instanceof e) return c } return null } function c(t, n, i, o) { if (s.cancellation()) { var a = new e(r), c = this._finallyPromise = new e(r); this._promise = a.lastly(function () { return c }), a._captureStackTrace(), a._setOnCancel(this) } else { var l = this._promise = new e(r); l._captureStackTrace() } this._stack = o, this._generatorFunction = t, this._receiver = n, this._generator = void 0, this._yieldHandlers = "function" == typeof i ? [i].concat(_) : _, this._yieldedPromise = null, this._cancellationPhase = !1 } var l = t("./errors"), u = l.TypeError, p = t("./util"), h = p.errorObj, f = p.tryCatch, _ = []; p.inherits(c, o), c.prototype._isResolved = function () { return null === this._promise }, c.prototype._cleanup = function () { this._promise = this._generator = null, s.cancellation() && null !== this._finallyPromise && (this._finallyPromise._fulfill(), this._finallyPromise = null) }, c.prototype._promiseCancelled = function () { if (!this._isResolved()) { var t, n = "undefined" != typeof this._generator["return"]; if (n) this._promise._pushContext(), t = f(this._generator["return"]).call(this._generator, void 0), this._promise._popContext(); else { var r = new e.CancellationError("generator .return() sentinel"); e.coroutine.returnSentinel = r, this._promise._attachExtraTrace(r), this._promise._pushContext(), t = f(this._generator["throw"]).call(this._generator, r), this._promise._popContext() } this._cancellationPhase = !0, this._yieldedPromise = null, this._continue(t) } }, c.prototype._promiseFulfilled = function (t) { this._yieldedPromise = null, this._promise._pushContext(); var e = f(this._generator.next).call(this._generator, t); this._promise._popContext(), this._continue(e) }, c.prototype._promiseRejected = function (t) { this._yieldedPromise = null, this._promise._attachExtraTrace(t), this._promise._pushContext(); var e = f(this._generator["throw"]).call(this._generator, t); this._promise._popContext(), this._continue(e) }, c.prototype._resultCancelled = function () { if (this._yieldedPromise instanceof e) { var t = this._yieldedPromise; this._yieldedPromise = null, t.cancel() } }, c.prototype.promise = function () { return this._promise }, c.prototype._run = function () { this._generator = this._generatorFunction.call(this._receiver), this._receiver = this._generatorFunction = void 0, this._promiseFulfilled(void 0) }, c.prototype._continue = function (t) {
                    var n = this._promise; if (t === h) return this._cleanup(), this._cancellationPhase ? n.cancel() : n._rejectCallback(t.e, !1); var r = t.value; if (t.done === !0) return this._cleanup(), this._cancellationPhase ? n.cancel() : n._resolveCallback(r); var o = i(r, this._promise); if (!(o instanceof e) && (o = a(o, this._yieldHandlers, this._promise), null === o)) return void this._promiseRejected(new u("A value %s was yielded that could not be treated as a promise\n\n    See http://goo.gl/MqrFmX\n\n".replace("%s", String(r)) + "From coroutine:\n" + this._stack.split("\n").slice(1, -7).join("\n"))); o = o._target(); var s = o._bitField; 0 === (50397184 & s) ? (this._yieldedPromise = o, o._proxy(this, null)) : 0 !== (33554432 & s) ? e._async.invoke(this._promiseFulfilled, this, o._value()) : 0 !== (16777216 & s) ? e._async.invoke(this._promiseRejected, this, o._reason()) : this._promiseCancelled();
                }, e.coroutine = function (t, e) { if ("function" != typeof t) throw new u("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n"); var n = Object(e).yieldHandler, r = c, i = (new Error).stack; return function () { var e = t.apply(this, arguments), o = new r(void 0, void 0, n, i), s = o.promise(); return o._generator = e, o._promiseFulfilled(void 0), s } }, e.coroutine.addYieldHandler = function (t) { if ("function" != typeof t) throw new u("expecting a function but got " + p.classString(t)); _.push(t) }, e.spawn = function (t) { if (s.deprecated("Promise.spawn()", "Promise.coroutine()"), "function" != typeof t) return n("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n"); var r = new c(t, this), i = r.promise(); return r._run(e.spawn), i }
            }
        }, { "./errors": 12, "./util": 36 }], 17: [function (t, e, n) { "use strict"; e.exports = function (e, n, r, i, o, s) { var a = t("./util"); a.canEvaluate, a.tryCatch, a.errorObj; e.join = function () { var t, e = arguments.length - 1; if (e > 0 && "function" == typeof arguments[e]) { t = arguments[e]; var r } var i = [].slice.call(arguments); t && i.pop(); var r = new n(i).promise(); return void 0 !== t ? r.spread(t) : r } } }, { "./util": 36 }], 18: [function (t, e, n) { "use strict"; e.exports = function (e, n, r, i, o, s) { function a(t, e, n, r) { this.constructor$(t), this._promise._captureStackTrace(); var i = l(); this._callback = null === i ? e : u.domainBind(i, e), this._preservedValues = r === o ? new Array(this.length()) : null, this._limit = n, this._inFlight = 0, this._queue = [], f.invoke(this._asyncInit, this, void 0) } function c(t, n, i, o) { if ("function" != typeof n) return r("expecting a function but got " + u.classString(n)); var s = 0; if (void 0 !== i) { if ("object" != typeof i || null === i) return e.reject(new TypeError("options argument must be an object but it is " + u.classString(i))); if ("number" != typeof i.concurrency) return e.reject(new TypeError("'concurrency' must be a number but it is " + u.classString(i.concurrency))); s = i.concurrency } return s = "number" == typeof s && isFinite(s) && s >= 1 ? s : 0, new a(t, n, s, o).promise() } var l = e._getDomain, u = t("./util"), p = u.tryCatch, h = u.errorObj, f = e._async; u.inherits(a, n), a.prototype._asyncInit = function () { this._init$(void 0, -2) }, a.prototype._init = function () { }, a.prototype._promiseFulfilled = function (t, n) { var r = this._values, o = this.length(), a = this._preservedValues, c = this._limit; if (0 > n) { if (n = -1 * n - 1, r[n] = t, c >= 1 && (this._inFlight--, this._drainQueue(), this._isResolved())) return !0 } else { if (c >= 1 && this._inFlight >= c) return r[n] = t, this._queue.push(n), !1; null !== a && (a[n] = t); var l = this._promise, u = this._callback, f = l._boundValue(); l._pushContext(); var _ = p(u).call(f, t, n, o), d = l._popContext(); if (s.checkForgottenReturns(_, d, null !== a ? "Promise.filter" : "Promise.map", l), _ === h) return this._reject(_.e), !0; var v = i(_, this._promise); if (v instanceof e) { v = v._target(); var y = v._bitField; if (0 === (50397184 & y)) return c >= 1 && this._inFlight++, r[n] = v, v._proxy(this, -1 * (n + 1)), !1; if (0 === (33554432 & y)) return 0 !== (16777216 & y) ? (this._reject(v._reason()), !0) : (this._cancel(), !0); _ = v._value() } r[n] = _ } var m = ++this._totalResolved; return m >= o ? (null !== a ? this._filter(r, a) : this._resolve(r), !0) : !1 }, a.prototype._drainQueue = function () { for (var t = this._queue, e = this._limit, n = this._values; t.length > 0 && this._inFlight < e;) { if (this._isResolved()) return; var r = t.pop(); this._promiseFulfilled(n[r], r) } }, a.prototype._filter = function (t, e) { for (var n = e.length, r = new Array(n), i = 0, o = 0; n > o; ++o) t[o] && (r[i++] = e[o]); r.length = i, this._resolve(r) }, a.prototype.preservedValues = function () { return this._preservedValues }, e.prototype.map = function (t, e) { return c(this, t, e, null) }, e.map = function (t, e, n, r) { return c(t, e, n, r) } } }, { "./util": 36 }], 19: [function (t, e, n) { "use strict"; e.exports = function (e, n, r, i, o) { var s = t("./util"), a = s.tryCatch; e.method = function (t) { if ("function" != typeof t) throw new e.TypeError("expecting a function but got " + s.classString(t)); return function () { var r = new e(n); r._captureStackTrace(), r._pushContext(); var i = a(t).apply(this, arguments), s = r._popContext(); return o.checkForgottenReturns(i, s, "Promise.method", r), r._resolveFromSyncValue(i), r } }, e.attempt = e["try"] = function (t) { if ("function" != typeof t) return i("expecting a function but got " + s.classString(t)); var r = new e(n); r._captureStackTrace(), r._pushContext(); var c; if (arguments.length > 1) { o.deprecated("calling Promise.try with more than 1 argument"); var l = arguments[1], u = arguments[2]; c = s.isArray(l) ? a(t).apply(u, l) : a(t).call(u, l) } else c = a(t)(); var p = r._popContext(); return o.checkForgottenReturns(c, p, "Promise.try", r), r._resolveFromSyncValue(c), r }, e.prototype._resolveFromSyncValue = function (t) { t === s.errorObj ? this._rejectCallback(t.e, !1) : this._resolveCallback(t, !0) } } }, { "./util": 36 }], 20: [function (t, e, n) { "use strict"; function r(t) { return t instanceof Error && u.getPrototypeOf(t) === Error.prototype } function i(t) { var e; if (r(t)) { e = new l(t), e.name = t.name, e.message = t.message, e.stack = t.stack; for (var n = u.keys(t), i = 0; i < n.length; ++i) { var o = n[i]; p.test(o) || (e[o] = t[o]) } return e } return s.markAsOriginatingFromRejection(t), t } function o(t, e) { return function (n, r) { if (null !== t) { if (n) { var o = i(a(n)); t._attachExtraTrace(o), t._reject(o) } else if (e) { var s = [].slice.call(arguments, 1); t._fulfill(s) } else t._fulfill(r); t = null } } } var s = t("./util"), a = s.maybeWrapAsError, c = t("./errors"), l = c.OperationalError, u = t("./es5"), p = /^(?:name|message|stack|cause)$/; e.exports = o }, { "./errors": 12, "./es5": 13, "./util": 36 }], 21: [function (t, e, n) { "use strict"; e.exports = function (e) { function n(t, e) { var n = this; if (!o.isArray(t)) return r.call(n, t, e); var i = a(e).apply(n._boundValue(), [null].concat(t)); i === c && s.throwLater(i.e) } function r(t, e) { var n = this, r = n._boundValue(), i = void 0 === t ? a(e).call(r, null) : a(e).call(r, null, t); i === c && s.throwLater(i.e) } function i(t, e) { var n = this; if (!t) { var r = new Error(t + ""); r.cause = t, t = r } var i = a(e).call(n._boundValue(), t); i === c && s.throwLater(i.e) } var o = t("./util"), s = e._async, a = o.tryCatch, c = o.errorObj; e.prototype.asCallback = e.prototype.nodeify = function (t, e) { if ("function" == typeof t) { var o = r; void 0 !== e && Object(e).spread && (o = n), this._then(o, i, void 0, this, t) } return this } } }, { "./util": 36 }], 22: [function (t, e, n) { "use strict"; e.exports = function () { function n() { } function r(t, e) { if (null == t || t.constructor !== i) throw new m("the promise constructor cannot be invoked directly\n\n    See http://goo.gl/MqrFmX\n"); if ("function" != typeof e) throw new m("expecting a function but got " + f.classString(e)) } function i(t) { t !== b && r(this, t), this._bitField = 0, this._fulfillmentHandler0 = void 0, this._rejectionHandler0 = void 0, this._promise0 = void 0, this._receiver0 = void 0, this._resolveFromExecutor(t), this._promiseCreated(), this._fireEvent("promiseCreated", this) } function o(t) { this.promise._resolveCallback(t) } function s(t) { this.promise._rejectCallback(t, !1) } function a(t) { var e = new i(b); e._fulfillmentHandler0 = t, e._rejectionHandler0 = t, e._promise0 = t, e._receiver0 = t } var c, l = function () { return new m("circular promise resolution chain\n\n    See http://goo.gl/MqrFmX\n") }, u = function () { return new i.PromiseInspection(this._target()) }, p = function (t) { return i.reject(new m(t)) }, h = {}, f = t("./util"); c = f.isNode ? function () { var t = process.domain; return void 0 === t && (t = null), t } : function () { return null }, f.notEnumerableProp(i, "_getDomain", c); var _ = t("./es5"), d = t("./async"), v = new d; _.defineProperty(i, "_async", { value: v }); var y = t("./errors"), m = i.TypeError = y.TypeError; i.RangeError = y.RangeError; var g = i.CancellationError = y.CancellationError; i.TimeoutError = y.TimeoutError, i.OperationalError = y.OperationalError, i.RejectionError = y.OperationalError, i.AggregateError = y.AggregateError; var b = function () { }, w = {}, C = {}, j = t("./thenables")(i, b), E = t("./promise_array")(i, b, j, p, n), k = t("./context")(i), F = k.create, x = t("./debuggability")(i, k), T = (x.CapturedTrace, t("./finally")(i, j, C)), P = t("./catch_filter")(C), R = t("./nodeback"), S = f.errorObj, O = f.tryCatch; return i.prototype.toString = function () { return "[object Promise]" }, i.prototype.caught = i.prototype["catch"] = function (t) { var e = arguments.length; if (e > 1) { var n, r = new Array(e - 1), i = 0; for (n = 0; e - 1 > n; ++n) { var o = arguments[n]; if (!f.isObject(o)) return p("Catch statement predicate: expecting an object but got " + f.classString(o)); r[i++] = o } return r.length = i, t = arguments[n], this.then(void 0, P(r, t, this)) } return this.then(void 0, t) }, i.prototype.reflect = function () { return this._then(u, u, void 0, this, void 0) }, i.prototype.then = function (t, e) { if (x.warnings() && arguments.length > 0 && "function" != typeof t && "function" != typeof e) { var n = ".then() only accepts functions but was passed: " + f.classString(t); arguments.length > 1 && (n += ", " + f.classString(e)), this._warn(n) } return this._then(t, e, void 0, void 0, void 0) }, i.prototype.done = function (t, e) { var n = this._then(t, e, void 0, void 0, void 0); n._setIsFinal() }, i.prototype.spread = function (t) { return "function" != typeof t ? p("expecting a function but got " + f.classString(t)) : this.all()._then(t, void 0, void 0, w, void 0) }, i.prototype.toJSON = function () { var t = { isFulfilled: !1, isRejected: !1, fulfillmentValue: void 0, rejectionReason: void 0 }; return this.isFulfilled() ? (t.fulfillmentValue = this.value(), t.isFulfilled = !0) : this.isRejected() && (t.rejectionReason = this.reason(), t.isRejected = !0), t }, i.prototype.all = function () { return arguments.length > 0 && this._warn(".all() was passed arguments but it does not take any"), new E(this).promise() }, i.prototype.error = function (t) { return this.caught(f.originatesFromRejection, t) }, i.getNewLibraryCopy = e.exports, i.is = function (t) { return t instanceof i }, i.fromNode = i.fromCallback = function (t) { var e = new i(b); e._captureStackTrace(); var n = arguments.length > 1 ? !!Object(arguments[1]).multiArgs : !1, r = O(t)(R(e, n)); return r === S && e._rejectCallback(r.e, !0), e._isFateSealed() || e._setAsyncGuaranteed(), e }, i.all = function (t) { return new E(t).promise() }, i.cast = function (t) { var e = j(t); return e instanceof i || (e = new i(b), e._captureStackTrace(), e._setFulfilled(), e._rejectionHandler0 = t), e }, i.resolve = i.fulfilled = i.cast, i.reject = i.rejected = function (t) { var e = new i(b); return e._captureStackTrace(), e._rejectCallback(t, !0), e }, i.setScheduler = function (t) { if ("function" != typeof t) throw new m("expecting a function but got " + f.classString(t)); return v.setScheduler(t) }, i.prototype._then = function (t, e, n, r, o) { var s = void 0 !== o, a = s ? o : new i(b), l = this._target(), u = l._bitField; s || (a._propagateFrom(this, 3), a._captureStackTrace(), void 0 === r && 0 !== (2097152 & this._bitField) && (r = 0 !== (50397184 & u) ? this._boundValue() : l === this ? void 0 : this._boundTo), this._fireEvent("promiseChained", this, a)); var p = c(); if (0 !== (50397184 & u)) { var h, _, d = l._settlePromiseCtx; 0 !== (33554432 & u) ? (_ = l._rejectionHandler0, h = t) : 0 !== (16777216 & u) ? (_ = l._fulfillmentHandler0, h = e, l._unsetRejectionIsUnhandled()) : (d = l._settlePromiseLateCancellationObserver, _ = new g("late cancellation observer"), l._attachExtraTrace(_), h = e), v.invoke(d, l, { handler: null === p ? h : "function" == typeof h && f.domainBind(p, h), promise: a, receiver: r, value: _ }) } else l._addCallbacks(t, e, a, r, p); return a }, i.prototype._length = function () { return 65535 & this._bitField }, i.prototype._isFateSealed = function () { return 0 !== (117506048 & this._bitField) }, i.prototype._isFollowing = function () { return 67108864 === (67108864 & this._bitField) }, i.prototype._setLength = function (t) { this._bitField = -65536 & this._bitField | 65535 & t }, i.prototype._setFulfilled = function () { this._bitField = 33554432 | this._bitField, this._fireEvent("promiseFulfilled", this) }, i.prototype._setRejected = function () { this._bitField = 16777216 | this._bitField, this._fireEvent("promiseRejected", this) }, i.prototype._setFollowing = function () { this._bitField = 67108864 | this._bitField, this._fireEvent("promiseResolved", this) }, i.prototype._setIsFinal = function () { this._bitField = 4194304 | this._bitField }, i.prototype._isFinal = function () { return (4194304 & this._bitField) > 0 }, i.prototype._unsetCancelled = function () { this._bitField = -65537 & this._bitField }, i.prototype._setCancelled = function () { this._bitField = 65536 | this._bitField, this._fireEvent("promiseCancelled", this) }, i.prototype._setWillBeCancelled = function () { this._bitField = 8388608 | this._bitField }, i.prototype._setAsyncGuaranteed = function () { v.hasCustomScheduler() || (this._bitField = 134217728 | this._bitField) }, i.prototype._receiverAt = function (t) { var e = 0 === t ? this._receiver0 : this[4 * t - 4 + 3]; return e === h ? void 0 : void 0 === e && this._isBound() ? this._boundValue() : e }, i.prototype._promiseAt = function (t) { return this[4 * t - 4 + 2] }, i.prototype._fulfillmentHandlerAt = function (t) { return this[4 * t - 4 + 0] }, i.prototype._rejectionHandlerAt = function (t) { return this[4 * t - 4 + 1] }, i.prototype._boundValue = function () { }, i.prototype._migrateCallback0 = function (t) { var e = (t._bitField, t._fulfillmentHandler0), n = t._rejectionHandler0, r = t._promise0, i = t._receiverAt(0); void 0 === i && (i = h), this._addCallbacks(e, n, r, i, null) }, i.prototype._migrateCallbackAt = function (t, e) { var n = t._fulfillmentHandlerAt(e), r = t._rejectionHandlerAt(e), i = t._promiseAt(e), o = t._receiverAt(e); void 0 === o && (o = h), this._addCallbacks(n, r, i, o, null) }, i.prototype._addCallbacks = function (t, e, n, r, i) { var o = this._length(); if (o >= 65531 && (o = 0, this._setLength(0)), 0 === o) this._promise0 = n, this._receiver0 = r, "function" == typeof t && (this._fulfillmentHandler0 = null === i ? t : f.domainBind(i, t)), "function" == typeof e && (this._rejectionHandler0 = null === i ? e : f.domainBind(i, e)); else { var s = 4 * o - 4; this[s + 2] = n, this[s + 3] = r, "function" == typeof t && (this[s + 0] = null === i ? t : f.domainBind(i, t)), "function" == typeof e && (this[s + 1] = null === i ? e : f.domainBind(i, e)) } return this._setLength(o + 1), o }, i.prototype._proxy = function (t, e) { this._addCallbacks(void 0, void 0, e, t, null) }, i.prototype._resolveCallback = function (t, e) { if (0 === (117506048 & this._bitField)) { if (t === this) return this._rejectCallback(l(), !1); var n = j(t, this); if (!(n instanceof i)) return this._fulfill(t); e && this._propagateFrom(n, 2); var r = n._target(); if (r === this) return void this._reject(l()); var o = r._bitField; if (0 === (50397184 & o)) { var s = this._length(); s > 0 && r._migrateCallback0(this); for (var a = 1; s > a; ++a) r._migrateCallbackAt(this, a); this._setFollowing(), this._setLength(0), this._setFollowee(r) } else if (0 !== (33554432 & o)) this._fulfill(r._value()); else if (0 !== (16777216 & o)) this._reject(r._reason()); else { var c = new g("late cancellation observer"); r._attachExtraTrace(c), this._reject(c) } } }, i.prototype._rejectCallback = function (t, e, n) { var r = f.ensureErrorObject(t), i = r === t; if (!i && !n && x.warnings()) { var o = "a promise was rejected with a non-error: " + f.classString(t); this._warn(o, !0) } this._attachExtraTrace(r, e ? i : !1), this._reject(t) }, i.prototype._resolveFromExecutor = function (t) { if (t !== b) { var e = this; this._captureStackTrace(), this._pushContext(); var n = !0, r = this._execute(t, function (t) { e._resolveCallback(t) }, function (t) { e._rejectCallback(t, n) }); n = !1, this._popContext(), void 0 !== r && e._rejectCallback(r, !0) } }, i.prototype._settlePromiseFromHandler = function (t, e, n, r) { var i = r._bitField; if (0 === (65536 & i)) { r._pushContext(); var o; e === w ? n && "number" == typeof n.length ? o = O(t).apply(this._boundValue(), n) : (o = S, o.e = new m("cannot .spread() a non-array: " + f.classString(n))) : o = O(t).call(e, n); var s = r._popContext(); i = r._bitField, 0 === (65536 & i) && (o === C ? r._reject(n) : o === S ? r._rejectCallback(o.e, !1) : (x.checkForgottenReturns(o, s, "", r, this), r._resolveCallback(o))) } }, i.prototype._target = function () { for (var t = this; t._isFollowing() ;) t = t._followee(); return t }, i.prototype._followee = function () { return this._rejectionHandler0 }, i.prototype._setFollowee = function (t) { this._rejectionHandler0 = t }, i.prototype._settlePromise = function (t, e, r, o) { var s = t instanceof i, a = this._bitField, c = 0 !== (134217728 & a); 0 !== (65536 & a) ? (s && t._invokeInternalOnCancel(), r instanceof T && r.isFinallyHandler() ? (r.cancelPromise = t, O(e).call(r, o) === S && t._reject(S.e)) : e === u ? t._fulfill(u.call(r)) : r instanceof n ? r._promiseCancelled(t) : s || t instanceof E ? t._cancel() : r.cancel()) : "function" == typeof e ? s ? (c && t._setAsyncGuaranteed(), this._settlePromiseFromHandler(e, r, o, t)) : e.call(r, o, t) : r instanceof n ? r._isResolved() || (0 !== (33554432 & a) ? r._promiseFulfilled(o, t) : r._promiseRejected(o, t)) : s && (c && t._setAsyncGuaranteed(), 0 !== (33554432 & a) ? t._fulfill(o) : t._reject(o)) }, i.prototype._settlePromiseLateCancellationObserver = function (t) { var e = t.handler, n = t.promise, r = t.receiver, o = t.value; "function" == typeof e ? n instanceof i ? this._settlePromiseFromHandler(e, r, o, n) : e.call(r, o, n) : n instanceof i && n._reject(o) }, i.prototype._settlePromiseCtx = function (t) { this._settlePromise(t.promise, t.handler, t.receiver, t.value) }, i.prototype._settlePromise0 = function (t, e, n) { var r = this._promise0, i = this._receiverAt(0); this._promise0 = void 0, this._receiver0 = void 0, this._settlePromise(r, t, i, e) }, i.prototype._clearCallbackDataAtIndex = function (t) { var e = 4 * t - 4; this[e + 2] = this[e + 3] = this[e + 0] = this[e + 1] = void 0 }, i.prototype._fulfill = function (t) { var e = this._bitField; if (!((117506048 & e) >>> 16)) { if (t === this) { var n = l(); return this._attachExtraTrace(n), this._reject(n) } this._setFulfilled(), this._rejectionHandler0 = t, (65535 & e) > 0 && (0 !== (134217728 & e) ? this._settlePromises() : v.settlePromises(this)) } }, i.prototype._reject = function (t) { var e = this._bitField; if (!((117506048 & e) >>> 16)) return this._setRejected(), this._fulfillmentHandler0 = t, this._isFinal() ? v.fatalError(t, f.isNode) : void ((65535 & e) > 0 ? v.settlePromises(this) : this._ensurePossibleRejectionHandled()) }, i.prototype._fulfillPromises = function (t, e) { for (var n = 1; t > n; n++) { var r = this._fulfillmentHandlerAt(n), i = this._promiseAt(n), o = this._receiverAt(n); this._clearCallbackDataAtIndex(n), this._settlePromise(i, r, o, e) } }, i.prototype._rejectPromises = function (t, e) { for (var n = 1; t > n; n++) { var r = this._rejectionHandlerAt(n), i = this._promiseAt(n), o = this._receiverAt(n); this._clearCallbackDataAtIndex(n), this._settlePromise(i, r, o, e) } }, i.prototype._settlePromises = function () { var t = this._bitField, e = 65535 & t; if (e > 0) { if (0 !== (16842752 & t)) { var n = this._fulfillmentHandler0; this._settlePromise0(this._rejectionHandler0, n, t), this._rejectPromises(e, n) } else { var r = this._rejectionHandler0; this._settlePromise0(this._fulfillmentHandler0, r, t), this._fulfillPromises(e, r) } this._setLength(0) } this._clearCancellationData() }, i.prototype._settledValue = function () { var t = this._bitField; return 0 !== (33554432 & t) ? this._rejectionHandler0 : 0 !== (16777216 & t) ? this._fulfillmentHandler0 : void 0 }, i.defer = i.pending = function () { x.deprecated("Promise.defer", "new Promise"); var t = new i(b); return { promise: t, resolve: o, reject: s } }, f.notEnumerableProp(i, "_makeSelfResolutionError", l), t("./method")(i, b, j, p, x), t("./bind")(i, b, j, x), t("./cancel")(i, E, p, x), t("./direct_resolve")(i), t("./synchronous_inspection")(i), t("./join")(i, E, j, b, v, c), i.Promise = i, i.version = "3.5.0", t("./map.js")(i, E, p, j, b, x), t("./call_get.js")(i), t("./using.js")(i, p, j, F, b, x), t("./timers.js")(i, b, x), t("./generators.js")(i, p, b, j, n, x), t("./nodeify.js")(i), t("./promisify.js")(i, b), t("./props.js")(i, E, j, p), t("./race.js")(i, b, j, p), t("./reduce.js")(i, E, p, j, b, x), t("./settle.js")(i, E, x), t("./some.js")(i, E, p), t("./filter.js")(i, b), t("./each.js")(i, b), t("./any.js")(i), f.toFastProperties(i), f.toFastProperties(i.prototype), a({ a: 1 }), a({ b: 2 }), a({ c: 3 }), a(1), a(function () { }), a(void 0), a(!1), a(new i(b)), x.setBounds(d.firstLineError, f.lastLineError), i } }, { "./any.js": 1, "./async": 2, "./bind": 3, "./call_get.js": 5, "./cancel": 6, "./catch_filter": 7, "./context": 8, "./debuggability": 9, "./direct_resolve": 10, "./each.js": 11, "./errors": 12, "./es5": 13, "./filter.js": 14, "./finally": 15, "./generators.js": 16, "./join": 17, "./map.js": 18, "./method": 19, "./nodeback": 20, "./nodeify.js": 21, "./promise_array": 23, "./promisify.js": 24, "./props.js": 25, "./race.js": 27, "./reduce.js": 28, "./settle.js": 30, "./some.js": 31, "./synchronous_inspection": 32, "./thenables": 33, "./timers.js": 34, "./using.js": 35, "./util": 36 }], 23: [function (t, e, n) { "use strict"; e.exports = function (e, n, r, i, o) { function s(t) { switch (t) { case -2: return []; case -3: return {}; case -6: return new Map } } function a(t) { var r = this._promise = new e(n); t instanceof e && r._propagateFrom(t, 3), r._setOnCancel(this), this._values = t, this._length = 0, this._totalResolved = 0, this._init(void 0, -2) } var c = t("./util"); c.isArray; return c.inherits(a, o), a.prototype.length = function () { return this._length }, a.prototype.promise = function () { return this._promise }, a.prototype._init = function l(t, n) { var o = r(this._values, this._promise); if (o instanceof e) { o = o._target(); var a = o._bitField; if (this._values = o, 0 === (50397184 & a)) return this._promise._setAsyncGuaranteed(), o._then(l, this._reject, void 0, this, n); if (0 === (33554432 & a)) return 0 !== (16777216 & a) ? this._reject(o._reason()) : this._cancel(); o = o._value() } if (o = c.asArray(o), null === o) { var u = i("expecting an array or an iterable object but got " + c.classString(o)).reason(); return void this._promise._rejectCallback(u, !1) } return 0 === o.length ? void (-5 === n ? this._resolveEmptyArray() : this._resolve(s(n))) : void this._iterate(o) }, a.prototype._iterate = function (t) { var n = this.getActualLength(t.length); this._length = n, this._values = this.shouldCopyValues() ? new Array(n) : this._values; for (var i = this._promise, o = !1, s = null, a = 0; n > a; ++a) { var c = r(t[a], i); c instanceof e ? (c = c._target(), s = c._bitField) : s = null, o ? null !== s && c.suppressUnhandledRejections() : null !== s ? 0 === (50397184 & s) ? (c._proxy(this, a), this._values[a] = c) : o = 0 !== (33554432 & s) ? this._promiseFulfilled(c._value(), a) : 0 !== (16777216 & s) ? this._promiseRejected(c._reason(), a) : this._promiseCancelled(a) : o = this._promiseFulfilled(c, a) } o || i._setAsyncGuaranteed() }, a.prototype._isResolved = function () { return null === this._values }, a.prototype._resolve = function (t) { this._values = null, this._promise._fulfill(t) }, a.prototype._cancel = function () { !this._isResolved() && this._promise._isCancellable() && (this._values = null, this._promise._cancel()) }, a.prototype._reject = function (t) { this._values = null, this._promise._rejectCallback(t, !1) }, a.prototype._promiseFulfilled = function (t, e) { this._values[e] = t; var n = ++this._totalResolved; return n >= this._length ? (this._resolve(this._values), !0) : !1 }, a.prototype._promiseCancelled = function () { return this._cancel(), !0 }, a.prototype._promiseRejected = function (t) { return this._totalResolved++, this._reject(t), !0 }, a.prototype._resultCancelled = function () { if (!this._isResolved()) { var t = this._values; if (this._cancel(), t instanceof e) t.cancel(); else for (var n = 0; n < t.length; ++n) t[n] instanceof e && t[n].cancel() } }, a.prototype.shouldCopyValues = function () { return !0 }, a.prototype.getActualLength = function (t) { return t }, a } }, { "./util": 36 }], 24: [function (t, e, n) { "use strict"; e.exports = function (e, n) { function r(t) { return !C.test(t) } function i(t) { try { return t.__isPromisified__ === !0 } catch (e) { return !1 } } function o(t, e, n) { var r = f.getDataPropertyOrDefault(t, e + n, b); return r ? i(r) : !1 } function s(t, e, n) { for (var r = 0; r < t.length; r += 2) { var i = t[r]; if (n.test(i)) for (var o = i.replace(n, ""), s = 0; s < t.length; s += 2) if (t[s] === o) throw new m("Cannot promisify an API that has normal methods with '%s'-suffix\n\n    See http://goo.gl/MqrFmX\n".replace("%s", e)) } } function a(t, e, n, r) { for (var a = f.inheritedDataKeys(t), c = [], l = 0; l < a.length; ++l) { var u = a[l], p = t[u], h = r === j ? !0 : j(u, p, t); "function" != typeof p || i(p) || o(t, u, e) || !r(u, p, t, h) || c.push(u, p) } return s(c, e, n), c } function c(t, r, i, o, s, a) { function c() { var i = r; r === h && (i = this); var o = new e(n); o._captureStackTrace(); var s = "string" == typeof u && this !== l ? this[u] : t, c = _(o, a); try { s.apply(i, d(arguments, c)) } catch (p) { o._rejectCallback(v(p), !0, !0) } return o._isFateSealed() || o._setAsyncGuaranteed(), o } var l = function () { return this }(), u = t; return "string" == typeof u && (t = o), f.notEnumerableProp(c, "__isPromisified__", !0), c } function l(t, e, n, r, i) { for (var o = new RegExp(E(e) + "$"), s = a(t, e, o, n), c = 0, l = s.length; l > c; c += 2) { var u = s[c], p = s[c + 1], _ = u + e; if (r === k) t[_] = k(u, h, u, p, e, i); else { var d = r(p, function () { return k(u, h, u, p, e, i) }); f.notEnumerableProp(d, "__isPromisified__", !0), t[_] = d } } return f.toFastProperties(t), t } function u(t, e, n) { return k(t, e, void 0, t, null, n) } var p, h = {}, f = t("./util"), _ = t("./nodeback"), d = f.withAppended, v = f.maybeWrapAsError, y = f.canEvaluate, m = t("./errors").TypeError, g = "Async", b = { __isPromisified__: !0 }, w = ["arity", "length", "name", "arguments", "caller", "callee", "prototype", "__isPromisified__"], C = new RegExp("^(?:" + w.join("|") + ")$"), j = function (t) { return f.isIdentifier(t) && "_" !== t.charAt(0) && "constructor" !== t }, E = function (t) { return t.replace(/([$])/, "\\$") }, k = y ? p : c; e.promisify = function (t, e) { if ("function" != typeof t) throw new m("expecting a function but got " + f.classString(t)); if (i(t)) return t; e = Object(e); var n = void 0 === e.context ? h : e.context, o = !!e.multiArgs, s = u(t, n, o); return f.copyDescriptors(t, s, r), s }, e.promisifyAll = function (t, e) { if ("function" != typeof t && "object" != typeof t) throw new m("the target of promisifyAll must be an object or a function\n\n    See http://goo.gl/MqrFmX\n"); e = Object(e); var n = !!e.multiArgs, r = e.suffix; "string" != typeof r && (r = g); var i = e.filter; "function" != typeof i && (i = j); var o = e.promisifier; if ("function" != typeof o && (o = k), !f.isIdentifier(r)) throw new RangeError("suffix must be a valid identifier\n\n    See http://goo.gl/MqrFmX\n"); for (var s = f.inheritedDataKeys(t), a = 0; a < s.length; ++a) { var c = t[s[a]]; "constructor" !== s[a] && f.isClass(c) && (l(c.prototype, r, i, o, n), l(c, r, i, o, n)) } return l(t, r, i, o, n) } } }, { "./errors": 12, "./nodeback": 20, "./util": 36 }], 25: [function (t, e, n) { "use strict"; e.exports = function (e, n, r, i) { function o(t) { var e, n = !1; if (void 0 !== a && t instanceof a) e = p(t), n = !0; else { var r = u.keys(t), i = r.length; e = new Array(2 * i); for (var o = 0; i > o; ++o) { var s = r[o]; e[o] = t[s], e[o + i] = s } } this.constructor$(e), this._isMap = n, this._init$(void 0, n ? -6 : -3) } function s(t) { var n, s = r(t); return l(s) ? (n = s instanceof e ? s._then(e.props, void 0, void 0, void 0, void 0) : new o(s).promise(), s instanceof e && n._propagateFrom(s, 2), n) : i("cannot await properties of a non-object\n\n    See http://goo.gl/MqrFmX\n") } var a, c = t("./util"), l = c.isObject, u = t("./es5"); "function" == typeof Map && (a = Map); var p = function () { function t(t, r) { this[e] = t, this[e + n] = r, e++ } var e = 0, n = 0; return function (r) { n = r.size, e = 0; var i = new Array(2 * r.size); return r.forEach(t, i), i } }(), h = function (t) { for (var e = new a, n = t.length / 2 | 0, r = 0; n > r; ++r) { var i = t[n + r], o = t[r]; e.set(i, o) } return e }; c.inherits(o, n), o.prototype._init = function () { }, o.prototype._promiseFulfilled = function (t, e) { this._values[e] = t; var n = ++this._totalResolved; if (n >= this._length) { var r; if (this._isMap) r = h(this._values); else { r = {}; for (var i = this.length(), o = 0, s = this.length() ; s > o; ++o) r[this._values[o + i]] = this._values[o] } return this._resolve(r), !0 } return !1 }, o.prototype.shouldCopyValues = function () { return !1 }, o.prototype.getActualLength = function (t) { return t >> 1 }, e.prototype.props = function () { return s(this) }, e.props = function (t) { return s(t) } } }, { "./es5": 13, "./util": 36 }], 26: [function (t, e, n) { "use strict"; function r(t, e, n, r, i) { for (var o = 0; i > o; ++o) n[o + r] = t[o + e], t[o + e] = void 0 } function i(t) { this._capacity = t, this._length = 0, this._front = 0 } i.prototype._willBeOverCapacity = function (t) { return this._capacity < t }, i.prototype._pushOne = function (t) { var e = this.length(); this._checkCapacity(e + 1); var n = this._front + e & this._capacity - 1; this[n] = t, this._length = e + 1 }, i.prototype.push = function (t, e, n) { var r = this.length() + 3; if (this._willBeOverCapacity(r)) return this._pushOne(t), this._pushOne(e), void this._pushOne(n); var i = this._front + r - 3; this._checkCapacity(r); var o = this._capacity - 1; this[i + 0 & o] = t, this[i + 1 & o] = e, this[i + 2 & o] = n, this._length = r }, i.prototype.shift = function () { var t = this._front, e = this[t]; return this[t] = void 0, this._front = t + 1 & this._capacity - 1, this._length--, e }, i.prototype.length = function () { return this._length }, i.prototype._checkCapacity = function (t) { this._capacity < t && this._resizeTo(this._capacity << 1) }, i.prototype._resizeTo = function (t) { var e = this._capacity; this._capacity = t; var n = this._front, i = this._length, o = n + i & e - 1; r(this, 0, this, e, o) }, e.exports = i }, {}], 27: [function (t, e, n) { "use strict"; e.exports = function (e, n, r, i) { function o(t, o) { var c = r(t); if (c instanceof e) return a(c); if (t = s.asArray(t), null === t) return i("expecting an array or an iterable object but got " + s.classString(t)); var l = new e(n); void 0 !== o && l._propagateFrom(o, 3); for (var u = l._fulfill, p = l._reject, h = 0, f = t.length; f > h; ++h) { var _ = t[h]; (void 0 !== _ || h in t) && e.cast(_)._then(u, p, void 0, l, null) } return l } var s = t("./util"), a = function (t) { return t.then(function (e) { return o(e, t) }) }; e.race = function (t) { return o(t, void 0) }, e.prototype.race = function () { return o(this, void 0) } } }, { "./util": 36 }], 28: [function (t, e, n) { "use strict"; e.exports = function (e, n, r, i, o, s) { function a(t, n, r, i) { this.constructor$(t); var s = h(); this._fn = null === s ? n : f.domainBind(s, n), void 0 !== r && (r = e.resolve(r), r._attachCancellationCallback(this)), this._initialValue = r, this._currentCancellable = null, i === o ? this._eachValues = Array(this._length) : 0 === i ? this._eachValues = null : this._eachValues = void 0, this._promise._captureStackTrace(), this._init$(void 0, -5) } function c(t, e) { this.isFulfilled() ? e._resolve(t) : e._reject(t) } function l(t, e, n, i) { if ("function" != typeof e) return r("expecting a function but got " + f.classString(e)); var o = new a(t, e, n, i); return o.promise() } function u(t) { this.accum = t, this.array._gotAccum(t); var n = i(this.value, this.array._promise); return n instanceof e ? (this.array._currentCancellable = n, n._then(p, void 0, void 0, this, void 0)) : p.call(this, n) } function p(t) { var n = this.array, r = n._promise, i = _(n._fn); r._pushContext(); var o; o = void 0 !== n._eachValues ? i.call(r._boundValue(), t, this.index, this.length) : i.call(r._boundValue(), this.accum, t, this.index, this.length), o instanceof e && (n._currentCancellable = o); var a = r._popContext(); return s.checkForgottenReturns(o, a, void 0 !== n._eachValues ? "Promise.each" : "Promise.reduce", r), o } var h = e._getDomain, f = t("./util"), _ = f.tryCatch; f.inherits(a, n), a.prototype._gotAccum = function (t) { void 0 !== this._eachValues && null !== this._eachValues && t !== o && this._eachValues.push(t) }, a.prototype._eachComplete = function (t) { return null !== this._eachValues && this._eachValues.push(t), this._eachValues }, a.prototype._init = function () { }, a.prototype._resolveEmptyArray = function () { this._resolve(void 0 !== this._eachValues ? this._eachValues : this._initialValue) }, a.prototype.shouldCopyValues = function () { return !1 }, a.prototype._resolve = function (t) { this._promise._resolveCallback(t), this._values = null }, a.prototype._resultCancelled = function (t) { return t === this._initialValue ? this._cancel() : void (this._isResolved() || (this._resultCancelled$(), this._currentCancellable instanceof e && this._currentCancellable.cancel(), this._initialValue instanceof e && this._initialValue.cancel())) }, a.prototype._iterate = function (t) { this._values = t; var n, r, i = t.length; if (void 0 !== this._initialValue ? (n = this._initialValue, r = 0) : (n = e.resolve(t[0]), r = 1), this._currentCancellable = n, !n.isRejected()) for (; i > r; ++r) { var o = { accum: null, value: t[r], index: r, length: i, array: this }; n = n._then(u, void 0, void 0, o, void 0) } void 0 !== this._eachValues && (n = n._then(this._eachComplete, void 0, void 0, this, void 0)), n._then(c, c, void 0, n, this) }, e.prototype.reduce = function (t, e) { return l(this, t, e, null) }, e.reduce = function (t, e, n, r) { return l(t, e, n, r) } } }, { "./util": 36 }], 29: [function (t, e, n) { "use strict"; var r, i = t("./util"), o = function () { throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n") }, s = i.getNativePromise(); if (i.isNode && "undefined" == typeof MutationObserver) { var a = global.setImmediate, c = process.nextTick; r = i.isRecentNode ? function (t) { a.call(global, t) } : function (t) { c.call(process, t) } } else if ("function" == typeof s && "function" == typeof s.resolve) { var l = s.resolve(); r = function (t) { l.then(t) } } else r = "undefined" == typeof MutationObserver || "undefined" != typeof window && window.navigator && (window.navigator.standalone || window.cordova) ? "undefined" != typeof setImmediate ? function (t) { setImmediate(t) } : "undefined" != typeof setTimeout ? function (t) { setTimeout(t, 0) } : o : function () { var t = document.createElement("div"), e = { attributes: !0 }, n = !1, r = document.createElement("div"), i = new MutationObserver(function () { t.classList.toggle("foo"), n = !1 }); i.observe(r, e); var o = function () { n || (n = !0, r.classList.toggle("foo")) }; return function (n) { var r = new MutationObserver(function () { r.disconnect(), n() }); r.observe(t, e), o() } }(); e.exports = r }, { "./util": 36 }], 30: [function (t, e, n) { "use strict"; e.exports = function (e, n, r) { function i(t) { this.constructor$(t) } var o = e.PromiseInspection, s = t("./util"); s.inherits(i, n), i.prototype._promiseResolved = function (t, e) { this._values[t] = e; var n = ++this._totalResolved; return n >= this._length ? (this._resolve(this._values), !0) : !1 }, i.prototype._promiseFulfilled = function (t, e) { var n = new o; return n._bitField = 33554432, n._settledValueField = t, this._promiseResolved(e, n) }, i.prototype._promiseRejected = function (t, e) { var n = new o; return n._bitField = 16777216, n._settledValueField = t, this._promiseResolved(e, n) }, e.settle = function (t) { return r.deprecated(".settle()", ".reflect()"), new i(t).promise() }, e.prototype.settle = function () { return e.settle(this) } } }, { "./util": 36 }], 31: [function (t, e, n) {
            "use strict"; e.exports = function (e, n, r) {
                function i(t) {
                    this.constructor$(t),
                    this._howMany = 0, this._unwrap = !1, this._initialized = !1
                } function o(t, e) { if ((0 | e) !== e || 0 > e) return r("expecting a positive integer\n\n    See http://goo.gl/MqrFmX\n"); var n = new i(t), o = n.promise(); return n.setHowMany(e), n.init(), o } var s = t("./util"), a = t("./errors").RangeError, c = t("./errors").AggregateError, l = s.isArray, u = {}; s.inherits(i, n), i.prototype._init = function () { if (this._initialized) { if (0 === this._howMany) return void this._resolve([]); this._init$(void 0, -5); var t = l(this._values); !this._isResolved() && t && this._howMany > this._canPossiblyFulfill() && this._reject(this._getRangeError(this.length())) } }, i.prototype.init = function () { this._initialized = !0, this._init() }, i.prototype.setUnwrap = function () { this._unwrap = !0 }, i.prototype.howMany = function () { return this._howMany }, i.prototype.setHowMany = function (t) { this._howMany = t }, i.prototype._promiseFulfilled = function (t) { return this._addFulfilled(t), this._fulfilled() === this.howMany() ? (this._values.length = this.howMany(), 1 === this.howMany() && this._unwrap ? this._resolve(this._values[0]) : this._resolve(this._values), !0) : !1 }, i.prototype._promiseRejected = function (t) { return this._addRejected(t), this._checkOutcome() }, i.prototype._promiseCancelled = function () { return this._values instanceof e || null == this._values ? this._cancel() : (this._addRejected(u), this._checkOutcome()) }, i.prototype._checkOutcome = function () { if (this.howMany() > this._canPossiblyFulfill()) { for (var t = new c, e = this.length() ; e < this._values.length; ++e) this._values[e] !== u && t.push(this._values[e]); return t.length > 0 ? this._reject(t) : this._cancel(), !0 } return !1 }, i.prototype._fulfilled = function () { return this._totalResolved }, i.prototype._rejected = function () { return this._values.length - this.length() }, i.prototype._addRejected = function (t) { this._values.push(t) }, i.prototype._addFulfilled = function (t) { this._values[this._totalResolved++] = t }, i.prototype._canPossiblyFulfill = function () { return this.length() - this._rejected() }, i.prototype._getRangeError = function (t) { var e = "Input array must contain at least " + this._howMany + " items but contains only " + t + " items"; return new a(e) }, i.prototype._resolveEmptyArray = function () { this._reject(this._getRangeError(0)) }, e.some = function (t, e) { return o(t, e) }, e.prototype.some = function (t) { return o(this, t) }, e._SomePromiseArray = i
            }
        }, { "./errors": 12, "./util": 36 }], 32: [function (t, e, n) { "use strict"; e.exports = function (t) { function e(t) { void 0 !== t ? (t = t._target(), this._bitField = t._bitField, this._settledValueField = t._isFateSealed() ? t._settledValue() : void 0) : (this._bitField = 0, this._settledValueField = void 0) } e.prototype._settledValue = function () { return this._settledValueField }; var n = e.prototype.value = function () { if (!this.isFulfilled()) throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\n\n    See http://goo.gl/MqrFmX\n"); return this._settledValue() }, r = e.prototype.error = e.prototype.reason = function () { if (!this.isRejected()) throw new TypeError("cannot get rejection reason of a non-rejected promise\n\n    See http://goo.gl/MqrFmX\n"); return this._settledValue() }, i = e.prototype.isFulfilled = function () { return 0 !== (33554432 & this._bitField) }, o = e.prototype.isRejected = function () { return 0 !== (16777216 & this._bitField) }, s = e.prototype.isPending = function () { return 0 === (50397184 & this._bitField) }, a = e.prototype.isResolved = function () { return 0 !== (50331648 & this._bitField) }; e.prototype.isCancelled = function () { return 0 !== (8454144 & this._bitField) }, t.prototype.__isCancelled = function () { return 65536 === (65536 & this._bitField) }, t.prototype._isCancelled = function () { return this._target().__isCancelled() }, t.prototype.isCancelled = function () { return 0 !== (8454144 & this._target()._bitField) }, t.prototype.isPending = function () { return s.call(this._target()) }, t.prototype.isRejected = function () { return o.call(this._target()) }, t.prototype.isFulfilled = function () { return i.call(this._target()) }, t.prototype.isResolved = function () { return a.call(this._target()) }, t.prototype.value = function () { return n.call(this._target()) }, t.prototype.reason = function () { var t = this._target(); return t._unsetRejectionIsUnhandled(), r.call(t) }, t.prototype._value = function () { return this._settledValue() }, t.prototype._reason = function () { return this._unsetRejectionIsUnhandled(), this._settledValue() }, t.PromiseInspection = e } }, {}], 33: [function (t, e, n) { "use strict"; e.exports = function (e, n) { function r(t, r) { if (u(t)) { if (t instanceof e) return t; var i = o(t); if (i === l) { r && r._pushContext(); var c = e.reject(i.e); return r && r._popContext(), c } if ("function" == typeof i) { if (s(t)) { var c = new e(n); return t._then(c._fulfill, c._reject, void 0, c, null), c } return a(t, i, r) } } return t } function i(t) { return t.then } function o(t) { try { return i(t) } catch (e) { return l.e = e, l } } function s(t) { try { return p.call(t, "_promise0") } catch (e) { return !1 } } function a(t, r, i) { function o(t) { a && (a._resolveCallback(t), a = null) } function s(t) { a && (a._rejectCallback(t, p, !0), a = null) } var a = new e(n), u = a; i && i._pushContext(), a._captureStackTrace(), i && i._popContext(); var p = !0, h = c.tryCatch(r).call(t, o, s); return p = !1, a && h === l && (a._rejectCallback(h.e, !0, !0), a = null), u } var c = t("./util"), l = c.errorObj, u = c.isObject, p = {}.hasOwnProperty; return r } }, { "./util": 36 }], 34: [function (t, e, n) { "use strict"; e.exports = function (e, n, r) { function i(t) { this.handle = t } function o(t) { return clearTimeout(this.handle), t } function s(t) { throw clearTimeout(this.handle), t } var a = t("./util"), c = e.TimeoutError; i.prototype._resultCancelled = function () { clearTimeout(this.handle) }; var l = function (t) { return u(+this).thenReturn(t) }, u = e.delay = function (t, o) { var s, a; return void 0 !== o ? (s = e.resolve(o)._then(l, null, null, t, void 0), r.cancellation() && o instanceof e && s._setOnCancel(o)) : (s = new e(n), a = setTimeout(function () { s._fulfill() }, +t), r.cancellation() && s._setOnCancel(new i(a)), s._captureStackTrace()), s._setAsyncGuaranteed(), s }; e.prototype.delay = function (t) { return u(t, this) }; var p = function (t, e, n) { var r; r = "string" != typeof e ? e instanceof Error ? e : new c("operation timed out") : new c(e), a.markAsOriginatingFromRejection(r), t._attachExtraTrace(r), t._reject(r), null != n && n.cancel() }; e.prototype.timeout = function (t, e) { t = +t; var n, a, c = new i(setTimeout(function () { n.isPending() && p(n, e, a) }, t)); return r.cancellation() ? (a = this.then(), n = a._then(o, s, void 0, c, void 0), n._setOnCancel(c)) : n = this._then(o, s, void 0, c, void 0), n } } }, { "./util": 36 }], 35: [function (t, e, n) { "use strict"; e.exports = function (e, n, r, i, o, s) { function a(t) { setTimeout(function () { throw t }, 0) } function c(t) { var e = r(t); return e !== t && "function" == typeof t._isDisposable && "function" == typeof t._getDisposer && t._isDisposable() && e._setDisposable(t._getDisposer()), e } function l(t, n) { function i() { if (s >= l) return u._fulfill(); var o = c(t[s++]); if (o instanceof e && o._isDisposable()) { try { o = r(o._getDisposer().tryDispose(n), t.promise) } catch (p) { return a(p) } if (o instanceof e) return o._then(i, a, null, null, null) } i() } var s = 0, l = t.length, u = new e(o); return i(), u } function u(t, e, n) { this._data = t, this._promise = e, this._context = n } function p(t, e, n) { this.constructor$(t, e, n) } function h(t) { return u.isDisposer(t) ? (this.resources[this.index]._setDisposable(t), t.promise()) : t } function f(t) { this.length = t, this.promise = null, this[t - 1] = null } var _ = t("./util"), d = t("./errors").TypeError, v = t("./util").inherits, y = _.errorObj, m = _.tryCatch, g = {}; u.prototype.data = function () { return this._data }, u.prototype.promise = function () { return this._promise }, u.prototype.resource = function () { return this.promise().isFulfilled() ? this.promise().value() : g }, u.prototype.tryDispose = function (t) { var e = this.resource(), n = this._context; void 0 !== n && n._pushContext(); var r = e !== g ? this.doDispose(e, t) : null; return void 0 !== n && n._popContext(), this._promise._unsetDisposable(), this._data = null, r }, u.isDisposer = function (t) { return null != t && "function" == typeof t.resource && "function" == typeof t.tryDispose }, v(p, u), p.prototype.doDispose = function (t, e) { var n = this.data(); return n.call(t, t, e) }, f.prototype._resultCancelled = function () { for (var t = this.length, n = 0; t > n; ++n) { var r = this[n]; r instanceof e && r.cancel() } }, e.using = function () { var t = arguments.length; if (2 > t) return n("you must pass at least 2 arguments to Promise.using"); var i = arguments[t - 1]; if ("function" != typeof i) return n("expecting a function but got " + _.classString(i)); var o, a = !0; 2 === t && Array.isArray(arguments[0]) ? (o = arguments[0], t = o.length, a = !1) : (o = arguments, t--); for (var c = new f(t), p = 0; t > p; ++p) { var d = o[p]; if (u.isDisposer(d)) { var v = d; d = d.promise(), d._setDisposable(v) } else { var g = r(d); g instanceof e && (d = g._then(h, null, null, { resources: c, index: p }, void 0)) } c[p] = d } for (var b = new Array(c.length), p = 0; p < b.length; ++p) b[p] = e.resolve(c[p]).reflect(); var w = e.all(b).then(function (t) { for (var e = 0; e < t.length; ++e) { var n = t[e]; if (n.isRejected()) return y.e = n.error(), y; if (!n.isFulfilled()) return void w.cancel(); t[e] = n.value() } C._pushContext(), i = m(i); var r = a ? i.apply(void 0, t) : i(t), o = C._popContext(); return s.checkForgottenReturns(r, o, "Promise.using", C), r }), C = w.lastly(function () { var t = new e.PromiseInspection(w); return l(c, t) }); return c.promise = C, C._setOnCancel(c), C }, e.prototype._setDisposable = function (t) { this._bitField = 131072 | this._bitField, this._disposer = t }, e.prototype._isDisposable = function () { return (131072 & this._bitField) > 0 }, e.prototype._getDisposer = function () { return this._disposer }, e.prototype._unsetDisposable = function () { this._bitField = -131073 & this._bitField, this._disposer = void 0 }, e.prototype.disposer = function (t) { if ("function" == typeof t) return new p(t, this, i()); throw new d } } }, { "./errors": 12, "./util": 36 }], 36: [function (t, e, n) { "use strict"; function r() { try { var t = P; return P = null, t.apply(this, arguments) } catch (e) { return T.e = e, T } } function i(t) { return P = t, r } function o(t) { return null == t || t === !0 || t === !1 || "string" == typeof t || "number" == typeof t } function s(t) { return "function" == typeof t || "object" == typeof t && null !== t } function a(t) { return o(t) ? new Error(v(t)) : t } function c(t, e) { var n, r = t.length, i = new Array(r + 1); for (n = 0; r > n; ++n) i[n] = t[n]; return i[n] = e, i } function l(t, e, n) { if (!F.isES5) return {}.hasOwnProperty.call(t, e) ? t[e] : void 0; var r = Object.getOwnPropertyDescriptor(t, e); return null != r ? null == r.get && null == r.set ? r.value : n : void 0 } function u(t, e, n) { if (o(t)) return t; var r = { value: n, configurable: !0, enumerable: !1, writable: !0 }; return F.defineProperty(t, e, r), t } function p(t) { throw t } function h(t) { try { if ("function" == typeof t) { var e = F.names(t.prototype), n = F.isES5 && e.length > 1, r = e.length > 0 && !(1 === e.length && "constructor" === e[0]), i = A.test(t + "") && F.names(t).length > 0; if (n || r || i) return !0 } return !1 } catch (o) { return !1 } } function f(t) { function e() { } e.prototype = t; for (var n = 8; n--;) new e; return t } function _(t) { return D.test(t) } function d(t, e, n) { for (var r = new Array(t), i = 0; t > i; ++i) r[i] = e + i + n; return r } function v(t) { try { return t + "" } catch (e) { return "[no string representation]" } } function y(t) { return null !== t && "object" == typeof t && "string" == typeof t.message && "string" == typeof t.name } function m(t) { try { u(t, "isOperational", !0) } catch (e) { } } function g(t) { return null == t ? !1 : t instanceof Error.__BluebirdErrorTypes__.OperationalError || t.isOperational === !0 } function b(t) { return y(t) && F.propertyIsWritable(t, "stack") } function w(t) { return {}.toString.call(t) } function C(t, e, n) { for (var r = F.names(t), i = 0; i < r.length; ++i) { var o = r[i]; if (n(o)) try { F.defineProperty(e, o, F.getDescriptor(t, o)) } catch (s) { } } } function j(t) { return N ? process.env[t] : void 0 } function E() { if ("function" == typeof Promise) try { var t = new Promise(function () { }); if ("[object Promise]" === {}.toString.call(t)) return Promise } catch (e) { } } function k(t, e) { return t.bind(e) } var F = t("./es5"), x = "undefined" == typeof navigator, T = { e: {} }, P, R = "undefined" != typeof self ? self : "undefined" != typeof window ? window : "undefined" != typeof global ? global : void 0 !== this ? this : null, S = function (t, e) { function n() { this.constructor = t, this.constructor$ = e; for (var n in e.prototype) r.call(e.prototype, n) && "$" !== n.charAt(n.length - 1) && (this[n + "$"] = e.prototype[n]) } var r = {}.hasOwnProperty; return n.prototype = e.prototype, t.prototype = new n, t.prototype }, O = function () { var t = [Array.prototype, Object.prototype, Function.prototype], e = function (e) { for (var n = 0; n < t.length; ++n) if (t[n] === e) return !0; return !1 }; if (F.isES5) { var n = Object.getOwnPropertyNames; return function (t) { for (var r = [], i = Object.create(null) ; null != t && !e(t) ;) { var o; try { o = n(t) } catch (s) { return r } for (var a = 0; a < o.length; ++a) { var c = o[a]; if (!i[c]) { i[c] = !0; var l = Object.getOwnPropertyDescriptor(t, c); null != l && null == l.get && null == l.set && r.push(c) } } t = F.getPrototypeOf(t) } return r } } var r = {}.hasOwnProperty; return function (n) { if (e(n)) return []; var i = []; t: for (var o in n) if (r.call(n, o)) i.push(o); else { for (var s = 0; s < t.length; ++s) if (r.call(t[s], o)) continue t; i.push(o) } return i } }(), A = /this\s*\.\s*\S+\s*=/, D = /^[a-z$_][a-z$_0-9]*$/i, V = function () { return "stack" in new Error ? function (t) { return b(t) ? t : new Error(v(t)) } : function (t) { if (b(t)) return t; try { throw new Error(v(t)) } catch (e) { return e } } }(), I = function (t) { return F.isArray(t) ? t : null }; if ("undefined" != typeof Symbol && Symbol.iterator) { var L = "function" == typeof Array.from ? function (t) { return Array.from(t) } : function (t) { for (var e, n = [], r = t[Symbol.iterator]() ; !(e = r.next()).done;) n.push(e.value); return n }; I = function (t) { return F.isArray(t) ? t : null != t && "function" == typeof t[Symbol.iterator] ? L(t) : null } } var H = "undefined" != typeof process && "[object process]" === w(process).toLowerCase(), N = "undefined" != typeof process && "undefined" != typeof process.env, B = { isClass: h, isIdentifier: _, inheritedDataKeys: O, getDataPropertyOrDefault: l, thrower: p, isArray: F.isArray, asArray: I, notEnumerableProp: u, isPrimitive: o, isObject: s, isError: y, canEvaluate: x, errorObj: T, tryCatch: i, inherits: S, withAppended: c, maybeWrapAsError: a, toFastProperties: f, filledRange: d, toString: v, canAttachTrace: b, ensureErrorObject: V, originatesFromRejection: g, markAsOriginatingFromRejection: m, classString: w, copyDescriptors: C, hasDevTools: "undefined" != typeof chrome && chrome && "function" == typeof chrome.loadTimes, isNode: H, hasEnvVariables: N, env: j, global: R, getNativePromise: E, domainBind: k }; B.isRecentNode = B.isNode && function () { var t = process.versions.node.split(".").map(Number); return 0 === t[0] && t[1] > 10 || t[0] > 0 }(), B.isNode && B.toFastProperties(process); try { throw new Error } catch (U) { B.lastLineError = U } e.exports = B }, { "./es5": 13 }]
    }, {}, [4])(4)
}), "undefined" != typeof window && null !== window ? window.P = window.Promise : "undefined" != typeof self && null !== self && (self.P = self.Promise);
angular.module("uiSwitch",[]).directive("switch",function(){return{restrict:"AE",replace:!0,transclude:!0,template:function(n,e){var s="";return s+="<span",s+=' class="switch'+(e.class?" "+e.class:"")+'"',s+=e.ngModel?' ng-click="'+e.disabled+" ? "+e.ngModel+" : "+e.ngModel+"=!"+e.ngModel+(e.ngChange?"; "+e.ngChange+'()"':'"'):"",s+=' ng-class="{ checked:'+e.ngModel+", disabled:"+e.disabled+' }"',s+=">",s+="<small></small>",s+='<input type="checkbox"',s+=e.id?' id="'+e.id+'"':"",s+=e.name?' name="'+e.name+'"':"",s+=e.ngModel?' ng-model="'+e.ngModel+'"':"",s+=' style="display:none" />',s+='<span class="switch-text">',s+=e.on?'<span class="on">'+e.on+"</span>":"",s+=e.off?'<span class="off">'+e.off+"</span>":" ",s+="</span>"}}});
/**
 * @license AngularJS v1.5.0
 * (c) 2010-2016 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {'use strict';

/**
 * @ngdoc module
 * @name ngRoute
 * @description
 *
 * # ngRoute
 *
 * The `ngRoute` module provides routing and deeplinking services and directives for angular apps.
 *
 * ## Example
 * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.
 *
 *
 * <div doc-module-components="ngRoute"></div>
 */
 /* global -ngRouteModule */
var ngRouteModule = angular.module('ngRoute', ['ng']).
                        provider('$route', $RouteProvider),
    $routeMinErr = angular.$$minErr('ngRoute');

/**
 * @ngdoc provider
 * @name $routeProvider
 *
 * @description
 *
 * Used for configuring routes.
 *
 * ## Example
 * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.
 *
 * ## Dependencies
 * Requires the {@link ngRoute `ngRoute`} module to be installed.
 */
function $RouteProvider() {
  function inherit(parent, extra) {
    return angular.extend(Object.create(parent), extra);
  }

  var routes = {};

  /**
   * @ngdoc method
   * @name $routeProvider#when
   *
   * @param {string} path Route path (matched against `$location.path`). If `$location.path`
   *    contains redundant trailing slash or is missing one, the route will still match and the
   *    `$location.path` will be updated to add or drop the trailing slash to exactly match the
   *    route definition.
   *
   *    * `path` can contain named groups starting with a colon: e.g. `:name`. All characters up
   *        to the next slash are matched and stored in `$routeParams` under the given `name`
   *        when the route matches.
   *    * `path` can contain named groups starting with a colon and ending with a star:
   *        e.g.`:name*`. All characters are eagerly stored in `$routeParams` under the given `name`
   *        when the route matches.
   *    * `path` can contain optional named groups with a question mark: e.g.`:name?`.
   *
   *    For example, routes like `/color/:color/largecode/:largecode*\/edit` will match
   *    `/color/brown/largecode/code/with/slashes/edit` and extract:
   *
   *    * `color: brown`
   *    * `largecode: code/with/slashes`.
   *
   *
   * @param {Object} route Mapping information to be assigned to `$route.current` on route
   *    match.
   *
   *    Object properties:
   *
   *    - `controller` – `{(string|function()=}` – Controller fn that should be associated with
   *      newly created scope or the name of a {@link angular.Module#controller registered
   *      controller} if passed as a string.
   *    - `controllerAs` – `{string=}` – An identifier name for a reference to the controller.
   *      If present, the controller will be published to scope under the `controllerAs` name.
   *    - `template` – `{string=|function()=}` – html template as a string or a function that
   *      returns an html template as a string which should be used by {@link
   *      ngRoute.directive:ngView ngView} or {@link ng.directive:ngInclude ngInclude} directives.
   *      This property takes precedence over `templateUrl`.
   *
   *      If `template` is a function, it will be called with the following parameters:
   *
   *      - `{Array.<Object>}` - route parameters extracted from the current
   *        `$location.path()` by applying the current route
   *
   *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html
   *      template that should be used by {@link ngRoute.directive:ngView ngView}.
   *
   *      If `templateUrl` is a function, it will be called with the following parameters:
   *
   *      - `{Array.<Object>}` - route parameters extracted from the current
   *        `$location.path()` by applying the current route
   *
   *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should
   *      be injected into the controller. If any of these dependencies are promises, the router
   *      will wait for them all to be resolved or one to be rejected before the controller is
   *      instantiated.
   *      If all the promises are resolved successfully, the values of the resolved promises are
   *      injected and {@link ngRoute.$route#$routeChangeSuccess $routeChangeSuccess} event is
   *      fired. If any of the promises are rejected the
   *      {@link ngRoute.$route#$routeChangeError $routeChangeError} event is fired.
   *      For easier access to the resolved dependencies from the template, the `resolve` map will
   *      be available on the scope of the route, under `$resolve` (by default) or a custom name
   *      specified by the `resolveAs` property (see below). This can be particularly useful, when
   *      working with {@link angular.Module#component components} as route templates.<br />
   *      <div class="alert alert-warning">
   *        **Note:** If your scope already contains a property with this name, it will be hidden
   *        or overwritten. Make sure, you specify an appropriate name for this property, that
   *        does not collide with other properties on the scope.
   *      </div>
   *      The map object is:
   *
   *      - `key` – `{string}`: a name of a dependency to be injected into the controller.
   *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.
   *        Otherwise if function, then it is {@link auto.$injector#invoke injected}
   *        and the return value is treated as the dependency. If the result is a promise, it is
   *        resolved before its value is injected into the controller. Be aware that
   *        `ngRoute.$routeParams` will still refer to the previous route within these resolve
   *        functions.  Use `$route.current.params` to access the new route parameters, instead.
   *
   *    - `resolveAs` - `{string=}` - The name under which the `resolve` map will be available on
   *      the scope of the route. If omitted, defaults to `$resolve`.
   *
   *    - `redirectTo` – `{(string|function())=}` – value to update
   *      {@link ng.$location $location} path with and trigger route redirection.
   *
   *      If `redirectTo` is a function, it will be called with the following parameters:
   *
   *      - `{Object.<string>}` - route parameters extracted from the current
   *        `$location.path()` by applying the current route templateUrl.
   *      - `{string}` - current `$location.path()`
   *      - `{Object}` - current `$location.search()`
   *
   *      The custom `redirectTo` function is expected to return a string which will be used
   *      to update `$location.path()` and `$location.search()`.
   *
   *    - `[reloadOnSearch=true]` - `{boolean=}` - reload route when only `$location.search()`
   *      or `$location.hash()` changes.
   *
   *      If the option is set to `false` and url in the browser changes, then
   *      `$routeUpdate` event is broadcasted on the root scope.
   *
   *    - `[caseInsensitiveMatch=false]` - `{boolean=}` - match routes without being case sensitive
   *
   *      If the option is set to `true`, then the particular route can be matched without being
   *      case sensitive
   *
   * @returns {Object} self
   *
   * @description
   * Adds a new route definition to the `$route` service.
   */
  this.when = function(path, route) {
    //copy original route object to preserve params inherited from proto chain
    var routeCopy = angular.copy(route);
    if (angular.isUndefined(routeCopy.reloadOnSearch)) {
      routeCopy.reloadOnSearch = true;
    }
    if (angular.isUndefined(routeCopy.caseInsensitiveMatch)) {
      routeCopy.caseInsensitiveMatch = this.caseInsensitiveMatch;
    }
    routes[path] = angular.extend(
      routeCopy,
      path && pathRegExp(path, routeCopy)
    );

    // create redirection for trailing slashes
    if (path) {
      var redirectPath = (path[path.length - 1] == '/')
            ? path.substr(0, path.length - 1)
            : path + '/';

      routes[redirectPath] = angular.extend(
        {redirectTo: path},
        pathRegExp(redirectPath, routeCopy)
      );
    }

    return this;
  };

  /**
   * @ngdoc property
   * @name $routeProvider#caseInsensitiveMatch
   * @description
   *
   * A boolean property indicating if routes defined
   * using this provider should be matched using a case insensitive
   * algorithm. Defaults to `false`.
   */
  this.caseInsensitiveMatch = false;

   /**
    * @param path {string} path
    * @param opts {Object} options
    * @return {?Object}
    *
    * @description
    * Normalizes the given path, returning a regular expression
    * and the original path.
    *
    * Inspired by pathRexp in visionmedia/express/lib/utils.js.
    */
  function pathRegExp(path, opts) {
    var insensitive = opts.caseInsensitiveMatch,
        ret = {
          originalPath: path,
          regexp: path
        },
        keys = ret.keys = [];

    path = path
      .replace(/([().])/g, '\\$1')
      .replace(/(\/)?:(\w+)([\?\*])?/g, function(_, slash, key, option) {
        var optional = option === '?' ? option : null;
        var star = option === '*' ? option : null;
        keys.push({ name: key, optional: !!optional });
        slash = slash || '';
        return ''
          + (optional ? '' : slash)
          + '(?:'
          + (optional ? slash : '')
          + (star && '(.+?)' || '([^/]+)')
          + (optional || '')
          + ')'
          + (optional || '');
      })
      .replace(/([\/$\*])/g, '\\$1');

    ret.regexp = new RegExp('^' + path + '$', insensitive ? 'i' : '');
    return ret;
  }

  /**
   * @ngdoc method
   * @name $routeProvider#otherwise
   *
   * @description
   * Sets route definition that will be used on route change when no other route definition
   * is matched.
   *
   * @param {Object|string} params Mapping information to be assigned to `$route.current`.
   * If called with a string, the value maps to `redirectTo`.
   * @returns {Object} self
   */
  this.otherwise = function(params) {
    if (typeof params === 'string') {
      params = {redirectTo: params};
    }
    this.when(null, params);
    return this;
  };


  this.$get = ['$rootScope',
               '$location',
               '$routeParams',
               '$q',
               '$injector',
               '$templateRequest',
               '$sce',
      function($rootScope, $location, $routeParams, $q, $injector, $templateRequest, $sce) {

    /**
     * @ngdoc service
     * @name $route
     * @requires $location
     * @requires $routeParams
     *
     * @property {Object} current Reference to the current route definition.
     * The route definition contains:
     *
     *   - `controller`: The controller constructor as defined in the route definition.
     *   - `locals`: A map of locals which is used by {@link ng.$controller $controller} service for
     *     controller instantiation. The `locals` contain
     *     the resolved values of the `resolve` map. Additionally the `locals` also contain:
     *
     *     - `$scope` - The current route scope.
     *     - `$template` - The current route template HTML.
     *
     *     The `locals` will be assigned to the route scope's `$resolve` property. You can override
     *     the property name, using `resolveAs` in the route definition. See
     *     {@link ngRoute.$routeProvider $routeProvider} for more info.
     *
     * @property {Object} routes Object with all route configuration Objects as its properties.
     *
     * @description
     * `$route` is used for deep-linking URLs to controllers and views (HTML partials).
     * It watches `$location.url()` and tries to map the path to an existing route definition.
     *
     * Requires the {@link ngRoute `ngRoute`} module to be installed.
     *
     * You can define routes through {@link ngRoute.$routeProvider $routeProvider}'s API.
     *
     * The `$route` service is typically used in conjunction with the
     * {@link ngRoute.directive:ngView `ngView`} directive and the
     * {@link ngRoute.$routeParams `$routeParams`} service.
     *
     * @example
     * This example shows how changing the URL hash causes the `$route` to match a route against the
     * URL, and the `ngView` pulls in the partial.
     *
     * <example name="$route-service" module="ngRouteExample"
     *          deps="angular-route.js" fixBase="true">
     *   <file name="index.html">
     *     <div ng-controller="MainController">
     *       Choose:
     *       <a href="Book/Moby">Moby</a> |
     *       <a href="Book/Moby/ch/1">Moby: Ch1</a> |
     *       <a href="Book/Gatsby">Gatsby</a> |
     *       <a href="Book/Gatsby/ch/4?key=value">Gatsby: Ch4</a> |
     *       <a href="Book/Scarlet">Scarlet Letter</a><br/>
     *
     *       <div ng-view></div>
     *
     *       <hr />
     *
     *       <pre>$location.path() = {{$location.path()}}</pre>
     *       <pre>$route.current.templateUrl = {{$route.current.templateUrl}}</pre>
     *       <pre>$route.current.params = {{$route.current.params}}</pre>
     *       <pre>$route.current.scope.name = {{$route.current.scope.name}}</pre>
     *       <pre>$routeParams = {{$routeParams}}</pre>
     *     </div>
     *   </file>
     *
     *   <file name="book.html">
     *     controller: {{name}}<br />
     *     Book Id: {{params.bookId}}<br />
     *   </file>
     *
     *   <file name="chapter.html">
     *     controller: {{name}}<br />
     *     Book Id: {{params.bookId}}<br />
     *     Chapter Id: {{params.chapterId}}
     *   </file>
     *
     *   <file name="script.js">
     *     angular.module('ngRouteExample', ['ngRoute'])
     *
     *      .controller('MainController', function($scope, $route, $routeParams, $location) {
     *          $scope.$route = $route;
     *          $scope.$location = $location;
     *          $scope.$routeParams = $routeParams;
     *      })
     *
     *      .controller('BookController', function($scope, $routeParams) {
     *          $scope.name = "BookController";
     *          $scope.params = $routeParams;
     *      })
     *
     *      .controller('ChapterController', function($scope, $routeParams) {
     *          $scope.name = "ChapterController";
     *          $scope.params = $routeParams;
     *      })
     *
     *     .config(function($routeProvider, $locationProvider) {
     *       $routeProvider
     *        .when('/Book/:bookId', {
     *         templateUrl: 'book.html',
     *         controller: 'BookController',
     *         resolve: {
     *           // I will cause a 1 second delay
     *           delay: function($q, $timeout) {
     *             var delay = $q.defer();
     *             $timeout(delay.resolve, 1000);
     *             return delay.promise;
     *           }
     *         }
     *       })
     *       .when('/Book/:bookId/ch/:chapterId', {
     *         templateUrl: 'chapter.html',
     *         controller: 'ChapterController'
     *       });
     *
     *       // configure html5 to get links working on jsfiddle
     *       $locationProvider.html5Mode(true);
     *     });
     *
     *   </file>
     *
     *   <file name="protractor.js" type="protractor">
     *     it('should load and compile correct template', function() {
     *       element(by.linkText('Moby: Ch1')).click();
     *       var content = element(by.css('[ng-view]')).getText();
     *       expect(content).toMatch(/controller\: ChapterController/);
     *       expect(content).toMatch(/Book Id\: Moby/);
     *       expect(content).toMatch(/Chapter Id\: 1/);
     *
     *       element(by.partialLinkText('Scarlet')).click();
     *
     *       content = element(by.css('[ng-view]')).getText();
     *       expect(content).toMatch(/controller\: BookController/);
     *       expect(content).toMatch(/Book Id\: Scarlet/);
     *     });
     *   </file>
     * </example>
     */

    /**
     * @ngdoc event
     * @name $route#$routeChangeStart
     * @eventType broadcast on root scope
     * @description
     * Broadcasted before a route change. At this  point the route services starts
     * resolving all of the dependencies needed for the route change to occur.
     * Typically this involves fetching the view template as well as any dependencies
     * defined in `resolve` route property. Once  all of the dependencies are resolved
     * `$routeChangeSuccess` is fired.
     *
     * The route change (and the `$location` change that triggered it) can be prevented
     * by calling `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on}
     * for more details about event object.
     *
     * @param {Object} angularEvent Synthetic event object.
     * @param {Route} next Future route information.
     * @param {Route} current Current route information.
     */

    /**
     * @ngdoc event
     * @name $route#$routeChangeSuccess
     * @eventType broadcast on root scope
     * @description
     * Broadcasted after a route change has happened successfully.
     * The `resolve` dependencies are now available in the `current.locals` property.
     *
     * {@link ngRoute.directive:ngView ngView} listens for the directive
     * to instantiate the controller and render the view.
     *
     * @param {Object} angularEvent Synthetic event object.
     * @param {Route} current Current route information.
     * @param {Route|Undefined} previous Previous route information, or undefined if current is
     * first route entered.
     */

    /**
     * @ngdoc event
     * @name $route#$routeChangeError
     * @eventType broadcast on root scope
     * @description
     * Broadcasted if any of the resolve promises are rejected.
     *
     * @param {Object} angularEvent Synthetic event object
     * @param {Route} current Current route information.
     * @param {Route} previous Previous route information.
     * @param {Route} rejection Rejection of the promise. Usually the error of the failed promise.
     */

    /**
     * @ngdoc event
     * @name $route#$routeUpdate
     * @eventType broadcast on root scope
     * @description
     * The `reloadOnSearch` property has been set to false, and we are reusing the same
     * instance of the Controller.
     *
     * @param {Object} angularEvent Synthetic event object
     * @param {Route} current Current/previous route information.
     */

    var forceReload = false,
        preparedRoute,
        preparedRouteIsUpdateOnly,
        $route = {
          routes: routes,

          /**
           * @ngdoc method
           * @name $route#reload
           *
           * @description
           * Causes `$route` service to reload the current route even if
           * {@link ng.$location $location} hasn't changed.
           *
           * As a result of that, {@link ngRoute.directive:ngView ngView}
           * creates new scope and reinstantiates the controller.
           */
          reload: function() {
            forceReload = true;

            var fakeLocationEvent = {
              defaultPrevented: false,
              preventDefault: function fakePreventDefault() {
                this.defaultPrevented = true;
                forceReload = false;
              }
            };

            $rootScope.$evalAsync(function() {
              prepareRoute(fakeLocationEvent);
              if (!fakeLocationEvent.defaultPrevented) commitRoute();
            });
          },

          /**
           * @ngdoc method
           * @name $route#updateParams
           *
           * @description
           * Causes `$route` service to update the current URL, replacing
           * current route parameters with those specified in `newParams`.
           * Provided property names that match the route's path segment
           * definitions will be interpolated into the location's path, while
           * remaining properties will be treated as query params.
           *
           * @param {!Object<string, string>} newParams mapping of URL parameter names to values
           */
          updateParams: function(newParams) {
            if (this.current && this.current.$$route) {
              newParams = angular.extend({}, this.current.params, newParams);
              $location.path(interpolate(this.current.$$route.originalPath, newParams));
              // interpolate modifies newParams, only query params are left
              $location.search(newParams);
            } else {
              throw $routeMinErr('norout', 'Tried updating route when with no current route');
            }
          }
        };

    $rootScope.$on('$locationChangeStart', prepareRoute);
    $rootScope.$on('$locationChangeSuccess', commitRoute);

    return $route;

    /////////////////////////////////////////////////////

    /**
     * @param on {string} current url
     * @param route {Object} route regexp to match the url against
     * @return {?Object}
     *
     * @description
     * Check if the route matches the current url.
     *
     * Inspired by match in
     * visionmedia/express/lib/router/router.js.
     */
    function switchRouteMatcher(on, route) {
      var keys = route.keys,
          params = {};

      if (!route.regexp) return null;

      var m = route.regexp.exec(on);
      if (!m) return null;

      for (var i = 1, len = m.length; i < len; ++i) {
        var key = keys[i - 1];

        var val = m[i];

        if (key && val) {
          params[key.name] = val;
        }
      }
      return params;
    }

    function prepareRoute($locationEvent) {
      var lastRoute = $route.current;

      preparedRoute = parseRoute();
      preparedRouteIsUpdateOnly = preparedRoute && lastRoute && preparedRoute.$$route === lastRoute.$$route
          && angular.equals(preparedRoute.pathParams, lastRoute.pathParams)
          && !preparedRoute.reloadOnSearch && !forceReload;

      if (!preparedRouteIsUpdateOnly && (lastRoute || preparedRoute)) {
        if ($rootScope.$broadcast('$routeChangeStart', preparedRoute, lastRoute).defaultPrevented) {
          if ($locationEvent) {
            $locationEvent.preventDefault();
          }
        }
      }
    }

    function commitRoute() {
      var lastRoute = $route.current;
      var nextRoute = preparedRoute;

      if (preparedRouteIsUpdateOnly) {
        lastRoute.params = nextRoute.params;
        angular.copy(lastRoute.params, $routeParams);
        $rootScope.$broadcast('$routeUpdate', lastRoute);
      } else if (nextRoute || lastRoute) {
        forceReload = false;
        $route.current = nextRoute;
        if (nextRoute) {
          if (nextRoute.redirectTo) {
            if (angular.isString(nextRoute.redirectTo)) {
              $location.path(interpolate(nextRoute.redirectTo, nextRoute.params)).search(nextRoute.params)
                       .replace();
            } else {
              $location.url(nextRoute.redirectTo(nextRoute.pathParams, $location.path(), $location.search()))
                       .replace();
            }
          }
        }

        $q.when(nextRoute).
          then(function() {
            if (nextRoute) {
              var locals = angular.extend({}, nextRoute.resolve),
                  template, templateUrl;

              angular.forEach(locals, function(value, key) {
                locals[key] = angular.isString(value) ?
                    $injector.get(value) : $injector.invoke(value, null, null, key);
              });

              if (angular.isDefined(template = nextRoute.template)) {
                if (angular.isFunction(template)) {
                  template = template(nextRoute.params);
                }
              } else if (angular.isDefined(templateUrl = nextRoute.templateUrl)) {
                if (angular.isFunction(templateUrl)) {
                  templateUrl = templateUrl(nextRoute.params);
                }
                if (angular.isDefined(templateUrl)) {
                  nextRoute.loadedTemplateUrl = $sce.valueOf(templateUrl);
                  template = $templateRequest(templateUrl);
                }
              }
              if (angular.isDefined(template)) {
                locals['$template'] = template;
              }
              return $q.all(locals);
            }
          }).
          then(function(locals) {
            // after route change
            if (nextRoute == $route.current) {
              if (nextRoute) {
                nextRoute.locals = locals;
                angular.copy(nextRoute.params, $routeParams);
              }
              $rootScope.$broadcast('$routeChangeSuccess', nextRoute, lastRoute);
            }
          }, function(error) {
            if (nextRoute == $route.current) {
              $rootScope.$broadcast('$routeChangeError', nextRoute, lastRoute, error);
            }
          });
      }
    }


    /**
     * @returns {Object} the current active route, by matching it against the URL
     */
    function parseRoute() {
      // Match a route
      var params, match;
      angular.forEach(routes, function(route, path) {
        if (!match && (params = switchRouteMatcher($location.path(), route))) {
          match = inherit(route, {
            params: angular.extend({}, $location.search(), params),
            pathParams: params});
          match.$$route = route;
        }
      });
      // No route matched; fallback to "otherwise" route
      return match || routes[null] && inherit(routes[null], {params: {}, pathParams:{}});
    }

    /**
     * @returns {string} interpolation of the redirect path with the parameters
     */
    function interpolate(string, params) {
      var result = [];
      angular.forEach((string || '').split(':'), function(segment, i) {
        if (i === 0) {
          result.push(segment);
        } else {
          var segmentMatch = segment.match(/(\w+)(?:[?*])?(.*)/);
          var key = segmentMatch[1];
          result.push(params[key]);
          result.push(segmentMatch[2] || '');
          delete params[key];
        }
      });
      return result.join('');
    }
  }];
}

ngRouteModule.provider('$routeParams', $RouteParamsProvider);


/**
 * @ngdoc service
 * @name $routeParams
 * @requires $route
 *
 * @description
 * The `$routeParams` service allows you to retrieve the current set of route parameters.
 *
 * Requires the {@link ngRoute `ngRoute`} module to be installed.
 *
 * The route parameters are a combination of {@link ng.$location `$location`}'s
 * {@link ng.$location#search `search()`} and {@link ng.$location#path `path()`}.
 * The `path` parameters are extracted when the {@link ngRoute.$route `$route`} path is matched.
 *
 * In case of parameter name collision, `path` params take precedence over `search` params.
 *
 * The service guarantees that the identity of the `$routeParams` object will remain unchanged
 * (but its properties will likely change) even when a route change occurs.
 *
 * Note that the `$routeParams` are only updated *after* a route change completes successfully.
 * This means that you cannot rely on `$routeParams` being correct in route resolve functions.
 * Instead you can use `$route.current.params` to access the new route's parameters.
 *
 * @example
 * ```js
 *  // Given:
 *  // URL: http://server.com/index.html#/Chapter/1/Section/2?search=moby
 *  // Route: /Chapter/:chapterId/Section/:sectionId
 *  //
 *  // Then
 *  $routeParams ==> {chapterId:'1', sectionId:'2', search:'moby'}
 * ```
 */
function $RouteParamsProvider() {
  this.$get = function() { return {}; };
}

ngRouteModule.directive('ngView', ngViewFactory);
ngRouteModule.directive('ngView', ngViewFillContentFactory);


/**
 * @ngdoc directive
 * @name ngView
 * @restrict ECA
 *
 * @description
 * # Overview
 * `ngView` is a directive that complements the {@link ngRoute.$route $route} service by
 * including the rendered template of the current route into the main layout (`index.html`) file.
 * Every time the current route changes, the included view changes with it according to the
 * configuration of the `$route` service.
 *
 * Requires the {@link ngRoute `ngRoute`} module to be installed.
 *
 * @animations
 * enter - animation is used to bring new content into the browser.
 * leave - animation is used to animate existing content away.
 *
 * The enter and leave animation occur concurrently.
 *
 * @scope
 * @priority 400
 * @param {string=} onload Expression to evaluate whenever the view updates.
 *
 * @param {string=} autoscroll Whether `ngView` should call {@link ng.$anchorScroll
 *                  $anchorScroll} to scroll the viewport after the view is updated.
 *
 *                  - If the attribute is not set, disable scrolling.
 *                  - If the attribute is set without value, enable scrolling.
 *                  - Otherwise enable scrolling only if the `autoscroll` attribute value evaluated
 *                    as an expression yields a truthy value.
 * @example
    <example name="ngView-directive" module="ngViewExample"
             deps="angular-route.js;angular-animate.js"
             animations="true" fixBase="true">
      <file name="index.html">
        <div ng-controller="MainCtrl as main">
          Choose:
          <a href="Book/Moby">Moby</a> |
          <a href="Book/Moby/ch/1">Moby: Ch1</a> |
          <a href="Book/Gatsby">Gatsby</a> |
          <a href="Book/Gatsby/ch/4?key=value">Gatsby: Ch4</a> |
          <a href="Book/Scarlet">Scarlet Letter</a><br/>

          <div class="view-animate-container">
            <div ng-view class="view-animate"></div>
          </div>
          <hr />

          <pre>$location.path() = {{main.$location.path()}}</pre>
          <pre>$route.current.templateUrl = {{main.$route.current.templateUrl}}</pre>
          <pre>$route.current.params = {{main.$route.current.params}}</pre>
          <pre>$routeParams = {{main.$routeParams}}</pre>
        </div>
      </file>

      <file name="book.html">
        <div>
          controller: {{book.name}}<br />
          Book Id: {{book.params.bookId}}<br />
        </div>
      </file>

      <file name="chapter.html">
        <div>
          controller: {{chapter.name}}<br />
          Book Id: {{chapter.params.bookId}}<br />
          Chapter Id: {{chapter.params.chapterId}}
        </div>
      </file>

      <file name="animations.css">
        .view-animate-container {
          position:relative;
          height:100px!important;
          background:white;
          border:1px solid black;
          height:40px;
          overflow:hidden;
        }

        .view-animate {
          padding:10px;
        }

        .view-animate.ng-enter, .view-animate.ng-leave {
          transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;

          display:block;
          width:100%;
          border-left:1px solid black;

          position:absolute;
          top:0;
          left:0;
          right:0;
          bottom:0;
          padding:10px;
        }

        .view-animate.ng-enter {
          left:100%;
        }
        .view-animate.ng-enter.ng-enter-active {
          left:0;
        }
        .view-animate.ng-leave.ng-leave-active {
          left:-100%;
        }
      </file>

      <file name="script.js">
        angular.module('ngViewExample', ['ngRoute', 'ngAnimate'])
          .config(['$routeProvider', '$locationProvider',
            function($routeProvider, $locationProvider) {
              $routeProvider
                .when('/Book/:bookId', {
                  templateUrl: 'book.html',
                  controller: 'BookCtrl',
                  controllerAs: 'book'
                })
                .when('/Book/:bookId/ch/:chapterId', {
                  templateUrl: 'chapter.html',
                  controller: 'ChapterCtrl',
                  controllerAs: 'chapter'
                });

              $locationProvider.html5Mode(true);
          }])
          .controller('MainCtrl', ['$route', '$routeParams', '$location',
            function($route, $routeParams, $location) {
              this.$route = $route;
              this.$location = $location;
              this.$routeParams = $routeParams;
          }])
          .controller('BookCtrl', ['$routeParams', function($routeParams) {
            this.name = "BookCtrl";
            this.params = $routeParams;
          }])
          .controller('ChapterCtrl', ['$routeParams', function($routeParams) {
            this.name = "ChapterCtrl";
            this.params = $routeParams;
          }]);

      </file>

      <file name="protractor.js" type="protractor">
        it('should load and compile correct template', function() {
          element(by.linkText('Moby: Ch1')).click();
          var content = element(by.css('[ng-view]')).getText();
          expect(content).toMatch(/controller\: ChapterCtrl/);
          expect(content).toMatch(/Book Id\: Moby/);
          expect(content).toMatch(/Chapter Id\: 1/);

          element(by.partialLinkText('Scarlet')).click();

          content = element(by.css('[ng-view]')).getText();
          expect(content).toMatch(/controller\: BookCtrl/);
          expect(content).toMatch(/Book Id\: Scarlet/);
        });
      </file>
    </example>
 */


/**
 * @ngdoc event
 * @name ngView#$viewContentLoaded
 * @eventType emit on the current ngView scope
 * @description
 * Emitted every time the ngView content is reloaded.
 */
ngViewFactory.$inject = ['$route', '$anchorScroll', '$animate'];
function ngViewFactory($route, $anchorScroll, $animate) {
  return {
    restrict: 'ECA',
    terminal: true,
    priority: 400,
    transclude: 'element',
    link: function(scope, $element, attr, ctrl, $transclude) {
        var currentScope,
            currentElement,
            previousLeaveAnimation,
            autoScrollExp = attr.autoscroll,
            onloadExp = attr.onload || '';

        scope.$on('$routeChangeSuccess', update);
        update();

        function cleanupLastView() {
          if (previousLeaveAnimation) {
            $animate.cancel(previousLeaveAnimation);
            previousLeaveAnimation = null;
          }

          if (currentScope) {
            currentScope.$destroy();
            currentScope = null;
          }
          if (currentElement) {
            previousLeaveAnimation = $animate.leave(currentElement);
            previousLeaveAnimation.then(function() {
              previousLeaveAnimation = null;
            });
            currentElement = null;
          }
        }

        function update() {
          var locals = $route.current && $route.current.locals,
              template = locals && locals.$template;

          if (angular.isDefined(template)) {
            var newScope = scope.$new();
            var current = $route.current;

            // Note: This will also link all children of ng-view that were contained in the original
            // html. If that content contains controllers, ... they could pollute/change the scope.
            // However, using ng-view on an element with additional content does not make sense...
            // Note: We can't remove them in the cloneAttchFn of $transclude as that
            // function is called before linking the content, which would apply child
            // directives to non existing elements.
            var clone = $transclude(newScope, function(clone) {
              $animate.enter(clone, null, currentElement || $element).then(function onNgViewEnter() {
                if (angular.isDefined(autoScrollExp)
                  && (!autoScrollExp || scope.$eval(autoScrollExp))) {
                  $anchorScroll();
                }
              });
              cleanupLastView();
            });

            currentElement = clone;
            currentScope = current.scope = newScope;
            currentScope.$emit('$viewContentLoaded');
            currentScope.$eval(onloadExp);
          } else {
            cleanupLastView();
          }
        }
    }
  };
}

// This directive is called during the $transclude call of the first `ngView` directive.
// It will replace and compile the content of the element with the loaded template.
// We need this directive so that the element content is already filled when
// the link function of another directive on the same element as ngView
// is called.
ngViewFillContentFactory.$inject = ['$compile', '$controller', '$route'];
function ngViewFillContentFactory($compile, $controller, $route) {
  return {
    restrict: 'ECA',
    priority: -400,
    link: function(scope, $element) {
      var current = $route.current,
          locals = current.locals;

      $element.html(locals.$template);

      var link = $compile($element.contents());

      if (current.controller) {
        locals.$scope = scope;
        var controller = $controller(current.controller, locals);
        if (current.controllerAs) {
          scope[current.controllerAs] = controller;
        }
        $element.data('$ngControllerController', controller);
        $element.children().data('$ngControllerController', controller);
      }
      scope[current.resolveAs || '$resolve'] = locals;

      link(scope);
    }
  };
}


})(window, window.angular);

/**
 * @license AngularJS v1.5.0
 * (c) 2010-2016 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {'use strict';

/**
 * @ngdoc module
 * @name ngCookies
 * @description
 *
 * # ngCookies
 *
 * The `ngCookies` module provides a convenient wrapper for reading and writing browser cookies.
 *
 *
 * <div doc-module-components="ngCookies"></div>
 *
 * See {@link ngCookies.$cookies `$cookies`} for usage.
 */


angular.module('ngCookies', ['ng']).
  /**
   * @ngdoc provider
   * @name $cookiesProvider
   * @description
   * Use `$cookiesProvider` to change the default behavior of the {@link ngCookies.$cookies $cookies} service.
   * */
   provider('$cookies', [function $CookiesProvider() {
    /**
     * @ngdoc property
     * @name $cookiesProvider#defaults
     * @description
     *
     * Object containing default options to pass when setting cookies.
     *
     * The object may have following properties:
     *
     * - **path** - `{string}` - The cookie will be available only for this path and its
     *   sub-paths. By default, this is the URL that appears in your `<base>` tag.
     * - **domain** - `{string}` - The cookie will be available only for this domain and
     *   its sub-domains. For security reasons the user agent will not accept the cookie
     *   if the current domain is not a sub-domain of this domain or equal to it.
     * - **expires** - `{string|Date}` - String of the form "Wdy, DD Mon YYYY HH:MM:SS GMT"
     *   or a Date object indicating the exact date/time this cookie will expire.
     * - **secure** - `{boolean}` - If `true`, then the cookie will only be available through a
     *   secured connection.
     *
     * Note: By default, the address that appears in your `<base>` tag will be used as the path.
     * This is important so that cookies will be visible for all routes when html5mode is enabled.
     *
     **/
    var defaults = this.defaults = {};

    function calcOptions(options) {
      return options ? angular.extend({}, defaults, options) : defaults;
    }

    /**
     * @ngdoc service
     * @name $cookies
     *
     * @description
     * Provides read/write access to browser's cookies.
     *
     * <div class="alert alert-info">
     * Up until Angular 1.3, `$cookies` exposed properties that represented the
     * current browser cookie values. In version 1.4, this behavior has changed, and
     * `$cookies` now provides a standard api of getters, setters etc.
     * </div>
     *
     * Requires the {@link ngCookies `ngCookies`} module to be installed.
     *
     * @example
     *
     * ```js
     * angular.module('cookiesExample', ['ngCookies'])
     *   .controller('ExampleController', ['$cookies', function($cookies) {
     *     // Retrieving a cookie
     *     var favoriteCookie = $cookies.get('myFavorite');
     *     // Setting a cookie
     *     $cookies.put('myFavorite', 'oatmeal');
     *   }]);
     * ```
     */
    this.$get = ['$$cookieReader', '$$cookieWriter', function($$cookieReader, $$cookieWriter) {
      return {
        /**
         * @ngdoc method
         * @name $cookies#get
         *
         * @description
         * Returns the value of given cookie key
         *
         * @param {string} key Id to use for lookup.
         * @returns {string} Raw cookie value.
         */
        get: function(key) {
          return $$cookieReader()[key];
        },

        /**
         * @ngdoc method
         * @name $cookies#getObject
         *
         * @description
         * Returns the deserialized value of given cookie key
         *
         * @param {string} key Id to use for lookup.
         * @returns {Object} Deserialized cookie value.
         */
        getObject: function(key) {
          var value = this.get(key);
          return value ? angular.fromJson(value) : value;
        },

        /**
         * @ngdoc method
         * @name $cookies#getAll
         *
         * @description
         * Returns a key value object with all the cookies
         *
         * @returns {Object} All cookies
         */
        getAll: function() {
          return $$cookieReader();
        },

        /**
         * @ngdoc method
         * @name $cookies#put
         *
         * @description
         * Sets a value for given cookie key
         *
         * @param {string} key Id for the `value`.
         * @param {string} value Raw value to be stored.
         * @param {Object=} options Options object.
         *    See {@link ngCookies.$cookiesProvider#defaults $cookiesProvider.defaults}
         */
        put: function(key, value, options) {
          $$cookieWriter(key, value, calcOptions(options));
        },

        /**
         * @ngdoc method
         * @name $cookies#putObject
         *
         * @description
         * Serializes and sets a value for given cookie key
         *
         * @param {string} key Id for the `value`.
         * @param {Object} value Value to be stored.
         * @param {Object=} options Options object.
         *    See {@link ngCookies.$cookiesProvider#defaults $cookiesProvider.defaults}
         */
        putObject: function(key, value, options) {
          this.put(key, angular.toJson(value), options);
        },

        /**
         * @ngdoc method
         * @name $cookies#remove
         *
         * @description
         * Remove given cookie
         *
         * @param {string} key Id of the key-value pair to delete.
         * @param {Object=} options Options object.
         *    See {@link ngCookies.$cookiesProvider#defaults $cookiesProvider.defaults}
         */
        remove: function(key, options) {
          $$cookieWriter(key, undefined, calcOptions(options));
        }
      };
    }];
  }]);

angular.module('ngCookies').
/**
 * @ngdoc service
 * @name $cookieStore
 * @deprecated
 * @requires $cookies
 *
 * @description
 * Provides a key-value (string-object) storage, that is backed by session cookies.
 * Objects put or retrieved from this storage are automatically serialized or
 * deserialized by angular's toJson/fromJson.
 *
 * Requires the {@link ngCookies `ngCookies`} module to be installed.
 *
 * <div class="alert alert-danger">
 * **Note:** The $cookieStore service is **deprecated**.
 * Please use the {@link ngCookies.$cookies `$cookies`} service instead.
 * </div>
 *
 * @example
 *
 * ```js
 * angular.module('cookieStoreExample', ['ngCookies'])
 *   .controller('ExampleController', ['$cookieStore', function($cookieStore) {
 *     // Put cookie
 *     $cookieStore.put('myFavorite','oatmeal');
 *     // Get cookie
 *     var favoriteCookie = $cookieStore.get('myFavorite');
 *     // Removing a cookie
 *     $cookieStore.remove('myFavorite');
 *   }]);
 * ```
 */
 factory('$cookieStore', ['$cookies', function($cookies) {

    return {
      /**
       * @ngdoc method
       * @name $cookieStore#get
       *
       * @description
       * Returns the value of given cookie key
       *
       * @param {string} key Id to use for lookup.
       * @returns {Object} Deserialized cookie value, undefined if the cookie does not exist.
       */
      get: function(key) {
        return $cookies.getObject(key);
      },

      /**
       * @ngdoc method
       * @name $cookieStore#put
       *
       * @description
       * Sets a value for given cookie key
       *
       * @param {string} key Id for the `value`.
       * @param {Object} value Value to be stored.
       */
      put: function(key, value) {
        $cookies.putObject(key, value);
      },

      /**
       * @ngdoc method
       * @name $cookieStore#remove
       *
       * @description
       * Remove given cookie
       *
       * @param {string} key Id of the key-value pair to delete.
       */
      remove: function(key) {
        $cookies.remove(key);
      }
    };

  }]);

/**
 * @name $$cookieWriter
 * @requires $document
 *
 * @description
 * This is a private service for writing cookies
 *
 * @param {string} name Cookie name
 * @param {string=} value Cookie value (if undefined, cookie will be deleted)
 * @param {Object=} options Object with options that need to be stored for the cookie.
 */
function $$CookieWriter($document, $log, $browser) {
  var cookiePath = $browser.baseHref();
  var rawDocument = $document[0];

  function buildCookieString(name, value, options) {
    var path, expires;
    options = options || {};
    expires = options.expires;
    path = angular.isDefined(options.path) ? options.path : cookiePath;
    if (angular.isUndefined(value)) {
      expires = 'Thu, 01 Jan 1970 00:00:00 GMT';
      value = '';
    }
    if (angular.isString(expires)) {
      expires = new Date(expires);
    }

    var str = encodeURIComponent(name) + '=' + encodeURIComponent(value);
    str += path ? ';path=' + path : '';
    str += options.domain ? ';domain=' + options.domain : '';
    str += expires ? ';expires=' + expires.toUTCString() : '';
    str += options.secure ? ';secure' : '';

    // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:
    // - 300 cookies
    // - 20 cookies per unique domain
    // - 4096 bytes per cookie
    var cookieLength = str.length + 1;
    if (cookieLength > 4096) {
      $log.warn("Cookie '" + name +
        "' possibly not set or overflowed because it was too large (" +
        cookieLength + " > 4096 bytes)!");
    }

    return str;
  }

  return function(name, value, options) {
    rawDocument.cookie = buildCookieString(name, value, options);
  };
}

$$CookieWriter.$inject = ['$document', '$log', '$browser'];

angular.module('ngCookies').provider('$$cookieWriter', function $$CookieWriterProvider() {
  this.$get = $$CookieWriter;
});


})(window, window.angular);

/*
 * angular-ui-bootstrap
 * http://angular-ui.github.io/bootstrap/

 * Version: 1.1.2 - 2016-02-01
 * License: MIT
 */angular.module("ui.bootstrap", ["ui.bootstrap.tpls", "ui.bootstrap.collapse", "ui.bootstrap.accordion", "ui.bootstrap.alert", "ui.bootstrap.buttons", "ui.bootstrap.carousel", "ui.bootstrap.dateparser", "ui.bootstrap.isClass", "ui.bootstrap.position", "ui.bootstrap.datepicker", "ui.bootstrap.debounce", "ui.bootstrap.dropdown", "ui.bootstrap.stackedMap", "ui.bootstrap.modal", "ui.bootstrap.paging", "ui.bootstrap.pager", "ui.bootstrap.pagination", "ui.bootstrap.tooltip", "ui.bootstrap.popover", "ui.bootstrap.progressbar", "ui.bootstrap.rating", "ui.bootstrap.tabs", "ui.bootstrap.timepicker", "ui.bootstrap.typeahead"]), angular.module("ui.bootstrap.tpls", ["uib/template/accordion/accordion-group.html", "uib/template/accordion/accordion.html", "uib/template/alert/alert.html", "uib/template/carousel/carousel.html", "uib/template/carousel/slide.html", "uib/template/datepicker/datepicker.html", "uib/template/datepicker/day.html", "uib/template/datepicker/month.html", "uib/template/datepicker/popup.html", "uib/template/datepicker/year.html", "uib/template/modal/backdrop.html", "uib/template/modal/window.html", "uib/template/pager/pager.html", "uib/template/pagination/pagination.html", "uib/template/tooltip/tooltip-html-popup.html", "uib/template/tooltip/tooltip-popup.html", "uib/template/tooltip/tooltip-template-popup.html", "uib/template/popover/popover-html.html", "uib/template/popover/popover-template.html", "uib/template/popover/popover.html", "uib/template/progressbar/bar.html", "uib/template/progressbar/progress.html", "uib/template/progressbar/progressbar.html", "uib/template/rating/rating.html", "uib/template/tabs/tab.html", "uib/template/tabs/tabset.html", "uib/template/timepicker/timepicker.html", "uib/template/typeahead/typeahead-match.html", "uib/template/typeahead/typeahead-popup.html"]), angular.module("ui.bootstrap.collapse", []).directive("uibCollapse", ["$animate", "$q", "$parse", "$injector", function (a, b, c, d) { var e = d.has("$animateCss") ? d.get("$animateCss") : null; return { link: function (d, f, g) { function h() { f.hasClass("collapse") && f.hasClass("in") || b.resolve(l(d)).then(function () { f.removeClass("collapse").addClass("collapsing").attr("aria-expanded", !0).attr("aria-hidden", !1), e ? e(f, { addClass: "in", easing: "ease", to: { height: f[0].scrollHeight + "px" } }).start()["finally"](i) : a.addClass(f, "in", { to: { height: f[0].scrollHeight + "px" } }).then(i) }) } function i() { f.removeClass("collapsing").addClass("collapse").css({ height: "auto" }), m(d) } function j() { return f.hasClass("collapse") || f.hasClass("in") ? void b.resolve(n(d)).then(function () { f.css({ height: f[0].scrollHeight + "px" }).removeClass("collapse").addClass("collapsing").attr("aria-expanded", !1).attr("aria-hidden", !0), e ? e(f, { removeClass: "in", to: { height: "0" } }).start()["finally"](k) : a.removeClass(f, "in", { to: { height: "0" } }).then(k) }) : k() } function k() { f.css({ height: "0" }), f.removeClass("collapsing").addClass("collapse"), o(d) } var l = c(g.expanding), m = c(g.expanded), n = c(g.collapsing), o = c(g.collapsed); d.$eval(g.uibCollapse) || f.addClass("in").addClass("collapse").attr("aria-expanded", !0).attr("aria-hidden", !1).css({ height: "auto" }), d.$watch(g.uibCollapse, function (a) { a ? j() : h() }) } } }]), angular.module("ui.bootstrap.accordion", ["ui.bootstrap.collapse"]).constant("uibAccordionConfig", { closeOthers: !0 }).controller("UibAccordionController", ["$scope", "$attrs", "uibAccordionConfig", function (a, b, c) { this.groups = [], this.closeOthers = function (d) { var e = angular.isDefined(b.closeOthers) ? a.$eval(b.closeOthers) : c.closeOthers; e && angular.forEach(this.groups, function (a) { a !== d && (a.isOpen = !1) }) }, this.addGroup = function (a) { var b = this; this.groups.push(a), a.$on("$destroy", function (c) { b.removeGroup(a) }) }, this.removeGroup = function (a) { var b = this.groups.indexOf(a); -1 !== b && this.groups.splice(b, 1) } }]).directive("uibAccordion", function () { return { controller: "UibAccordionController", controllerAs: "accordion", transclude: !0, templateUrl: function (a, b) { return b.templateUrl || "uib/template/accordion/accordion.html" } } }).directive("uibAccordionGroup", function () { return { require: "^uibAccordion", transclude: !0, replace: !0, templateUrl: function (a, b) { return b.templateUrl || "uib/template/accordion/accordion-group.html" }, scope: { heading: "@", isOpen: "=?", isDisabled: "=?" }, controller: function () { this.setHeading = function (a) { this.heading = a } }, link: function (a, b, c, d) { d.addGroup(a), a.openClass = c.openClass || "panel-open", a.panelClass = c.panelClass || "panel-default", a.$watch("isOpen", function (c) { b.toggleClass(a.openClass, !!c), c && d.closeOthers(a) }), a.toggleOpen = function (b) { a.isDisabled || b && 32 !== b.which || (a.isOpen = !a.isOpen) }; var e = "accordiongroup-" + a.$id + "-" + Math.floor(1e4 * Math.random()); a.headingId = e + "-tab", a.panelId = e + "-panel" } } }).directive("uibAccordionHeading", function () { return { transclude: !0, template: "", replace: !0, require: "^uibAccordionGroup", link: function (a, b, c, d, e) { d.setHeading(e(a, angular.noop)) } } }).directive("uibAccordionTransclude", function () { return { require: "^uibAccordionGroup", link: function (a, b, c, d) { a.$watch(function () { return d[c.uibAccordionTransclude] }, function (a) { a && (b.find("span").html(""), b.find("span").append(a)) }) } } }), angular.module("ui.bootstrap.alert", []).controller("UibAlertController", ["$scope", "$attrs", "$interpolate", "$timeout", function (a, b, c, d) { a.closeable = !!b.close; var e = angular.isDefined(b.dismissOnTimeout) ? c(b.dismissOnTimeout)(a.$parent) : null; e && d(function () { a.close() }, parseInt(e, 10)) }]).directive("uibAlert", function () { return { controller: "UibAlertController", controllerAs: "alert", templateUrl: function (a, b) { return b.templateUrl || "uib/template/alert/alert.html" }, transclude: !0, replace: !0, scope: { type: "@", close: "&" } } }), angular.module("ui.bootstrap.buttons", []).constant("uibButtonConfig", { activeClass: "active", toggleEvent: "click" }).controller("UibButtonsController", ["uibButtonConfig", function (a) { this.activeClass = a.activeClass || "active", this.toggleEvent = a.toggleEvent || "click" }]).directive("uibBtnRadio", ["$parse", function (a) { return { require: ["uibBtnRadio", "ngModel"], controller: "UibButtonsController", controllerAs: "buttons", link: function (b, c, d, e) { var f = e[0], g = e[1], h = a(d.uibUncheckable); c.find("input").css({ display: "none" }), g.$render = function () { c.toggleClass(f.activeClass, angular.equals(g.$modelValue, b.$eval(d.uibBtnRadio))) }, c.on(f.toggleEvent, function () { if (!d.disabled) { var a = c.hasClass(f.activeClass); (!a || angular.isDefined(d.uncheckable)) && b.$apply(function () { g.$setViewValue(a ? null : b.$eval(d.uibBtnRadio)), g.$render() }) } }), d.uibUncheckable && b.$watch(h, function (a) { d.$set("uncheckable", a ? "" : null) }) } } }]).directive("uibBtnCheckbox", function () { return { require: ["uibBtnCheckbox", "ngModel"], controller: "UibButtonsController", controllerAs: "button", link: function (a, b, c, d) { function e() { return g(c.btnCheckboxTrue, !0) } function f() { return g(c.btnCheckboxFalse, !1) } function g(b, c) { return angular.isDefined(b) ? a.$eval(b) : c } var h = d[0], i = d[1]; b.find("input").css({ display: "none" }), i.$render = function () { b.toggleClass(h.activeClass, angular.equals(i.$modelValue, e())) }, b.on(h.toggleEvent, function () { c.disabled || a.$apply(function () { i.$setViewValue(b.hasClass(h.activeClass) ? f() : e()), i.$render() }) }) } } }), angular.module("ui.bootstrap.carousel", []).controller("UibCarouselController", ["$scope", "$element", "$interval", "$timeout", "$animate", function (a, b, c, d, e) { function f() { for (; s.length;) s.shift() } function g(a) { if (angular.isUndefined(p[a].index)) return p[a]; for (var b = 0, c = p.length; c > b; ++b) if (p[b].index === a) return p[b] } function h(c, d, g) { t || (angular.extend(c, { direction: g, active: !0 }), angular.extend(o.currentSlide || {}, { direction: g, active: !1 }), e.enabled(b) && !a.$currentTransition && c.$element && o.slides.length > 1 && (c.$element.data(q, c.direction), o.currentSlide && o.currentSlide.$element && o.currentSlide.$element.data(q, c.direction), a.$currentTransition = !0, e.on("addClass", c.$element, function (b, c) { if ("close" === c && (a.$currentTransition = null, e.off("addClass", b), s.length)) { var d = s.pop(), g = a.indexOfSlide(d), i = g > o.getCurrentIndex() ? "next" : "prev"; f(), h(d, g, i) } })), o.currentSlide = c, r = d, k()) } function i() { m && (c.cancel(m), m = null) } function j(b) { b.length || (a.$currentTransition = null, f()) } function k() { i(); var b = +a.interval; !isNaN(b) && b > 0 && (m = c(l, b)) } function l() { var b = +a.interval; n && !isNaN(b) && b > 0 && p.length ? a.next() : a.pause() } var m, n, o = this, p = o.slides = a.slides = [], q = "uib-slideDirection", r = -1, s = []; o.currentSlide = null; var t = !1; o.addSlide = function (b, c) { b.$element = c, p.push(b), 1 === p.length || b.active ? (a.$currentTransition && (a.$currentTransition = null), o.select(p[p.length - 1]), 1 === p.length && a.play()) : b.active = !1 }, o.getCurrentIndex = function () { return o.currentSlide && angular.isDefined(o.currentSlide.index) ? +o.currentSlide.index : r }, o.next = a.next = function () { var b = (o.getCurrentIndex() + 1) % p.length; return 0 === b && a.noWrap() ? void a.pause() : o.select(g(b), "next") }, o.prev = a.prev = function () { var b = o.getCurrentIndex() - 1 < 0 ? p.length - 1 : o.getCurrentIndex() - 1; return a.noWrap() && b === p.length - 1 ? void a.pause() : o.select(g(b), "prev") }, o.removeSlide = function (a) { angular.isDefined(a.index) && p.sort(function (a, b) { return +a.index > +b.index }); var b = s.indexOf(a); -1 !== b && s.splice(b, 1); var c = p.indexOf(a); p.splice(c, 1), d(function () { p.length > 0 && a.active ? c >= p.length ? o.select(p[c - 1]) : o.select(p[c]) : r > c && r-- }), 0 === p.length && (o.currentSlide = null, f()) }, o.select = a.select = function (b, c) { var d = a.indexOfSlide(b); void 0 === c && (c = d > o.getCurrentIndex() ? "next" : "prev"), b && b !== o.currentSlide && !a.$currentTransition ? h(b, d, c) : b && b !== o.currentSlide && a.$currentTransition && (s.push(b), b.active = !1) }, a.indexOfSlide = function (a) { return angular.isDefined(a.index) ? +a.index : p.indexOf(a) }, a.isActive = function (a) { return o.currentSlide === a }, a.pause = function () { a.noPause || (n = !1, i()) }, a.play = function () { n || (n = !0, k()) }, a.$on("$destroy", function () { t = !0, i() }), a.$watch("noTransition", function (a) { e.enabled(b, !a) }), a.$watch("interval", k), a.$watchCollection("slides", j) }]).directive("uibCarousel", function () { return { transclude: !0, replace: !0, controller: "UibCarouselController", controllerAs: "carousel", templateUrl: function (a, b) { return b.templateUrl || "uib/template/carousel/carousel.html" }, scope: { interval: "=", noTransition: "=", noPause: "=", noWrap: "&" } } }).directive("uibSlide", function () { return { require: "^uibCarousel", transclude: !0, replace: !0, templateUrl: function (a, b) { return b.templateUrl || "uib/template/carousel/slide.html" }, scope: { active: "=?", actual: "=?", index: "=?" }, link: function (a, b, c, d) { d.addSlide(a, b), a.$on("$destroy", function () { d.removeSlide(a) }), a.$watch("active", function (b) { b && d.select(a) }) } } }).animation(".item", ["$animateCss", function (a) { function b(a, b, c) { a.removeClass(b), c && c() } var c = "uib-slideDirection"; return { beforeAddClass: function (d, e, f) { if ("active" === e) { var g = !1, h = d.data(c), i = "next" === h ? "left" : "right", j = b.bind(this, d, i + " " + h, f); return d.addClass(h), a(d, { addClass: i }).start().done(j), function () { g = !0 } } f() }, beforeRemoveClass: function (d, e, f) { if ("active" === e) { var g = !1, h = d.data(c), i = "next" === h ? "left" : "right", j = b.bind(this, d, i, f); return a(d, { addClass: i }).start().done(j), function () { g = !0 } } f() } } }]), angular.module("ui.bootstrap.dateparser", []).service("uibDateParser", ["$log", "$locale", "dateFilter", "orderByFilter", function (a, b, c, d) { function e(a, b) { var c = [], e = a.split(""), f = a.indexOf("'"); if (f > -1) { var g = !1; a = a.split(""); for (var h = f; h < a.length; h++) g ? ("'" === a[h] && (h + 1 < a.length && "'" === a[h + 1] ? (a[h + 1] = "$", e[h + 1] = "") : (e[h] = "", g = !1)), a[h] = "$") : "'" === a[h] && (a[h] = "$", e[h] = "", g = !0); a = a.join("") } return angular.forEach(n, function (d) { var f = a.indexOf(d.key); if (f > -1) { a = a.split(""), e[f] = "(" + d.regex + ")", a[f] = "$"; for (var g = f + 1, h = f + d.key.length; h > g; g++) e[g] = "", a[g] = "$"; a = a.join(""), c.push({ index: f, key: d.key, apply: d[b], matcher: d.regex }) } }), { regex: new RegExp("^" + e.join("") + "$"), map: d(c, "index") } } function f(a, b, c) { return 1 > c ? !1 : 1 === b && c > 28 ? 29 === c && (a % 4 === 0 && a % 100 !== 0 || a % 400 === 0) : 3 === b || 5 === b || 8 === b || 10 === b ? 31 > c : !0 } function g(a) { return parseInt(a, 10) } function h(a, b) { return a && b ? l(a, b) : a } function i(a, b) { return a && b ? l(a, b, !0) : a } function j(a, b) { var c = Date.parse("Jan 01, 1970 00:00:00 " + a) / 6e4; return isNaN(c) ? b : c } function k(a, b) { return a = new Date(a.getTime()), a.setMinutes(a.getMinutes() + b), a } function l(a, b, c) { c = c ? -1 : 1; var d = j(b, a.getTimezoneOffset()); return k(a, c * (d - a.getTimezoneOffset())) } var m, n, o = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g; this.init = function () { m = b.id, this.parsers = {}, this.formatters = {}, n = [{ key: "yyyy", regex: "\\d{4}", apply: function (a) { this.year = +a }, formatter: function (a) { var b = new Date; return b.setFullYear(Math.abs(a.getFullYear())), c(b, "yyyy") } }, { key: "yy", regex: "\\d{2}", apply: function (a) { this.year = +a + 2e3 }, formatter: function (a) { var b = new Date; return b.setFullYear(Math.abs(a.getFullYear())), c(b, "yy") } }, { key: "y", regex: "\\d{1,4}", apply: function (a) { this.year = +a }, formatter: function (a) { var b = new Date; return b.setFullYear(Math.abs(a.getFullYear())), c(b, "y") } }, { key: "M!", regex: "0?[1-9]|1[0-2]", apply: function (a) { this.month = a - 1 }, formatter: function (a) { var b = a.getMonth(); return /^[0-9]$/.test(b) ? c(a, "MM") : c(a, "M") } }, { key: "MMMM", regex: b.DATETIME_FORMATS.MONTH.join("|"), apply: function (a) { this.month = b.DATETIME_FORMATS.MONTH.indexOf(a) }, formatter: function (a) { return c(a, "MMMM") } }, { key: "MMM", regex: b.DATETIME_FORMATS.SHORTMONTH.join("|"), apply: function (a) { this.month = b.DATETIME_FORMATS.SHORTMONTH.indexOf(a) }, formatter: function (a) { return c(a, "MMM") } }, { key: "MM", regex: "0[1-9]|1[0-2]", apply: function (a) { this.month = a - 1 }, formatter: function (a) { return c(a, "MM") } }, { key: "M", regex: "[1-9]|1[0-2]", apply: function (a) { this.month = a - 1 }, formatter: function (a) { return c(a, "M") } }, { key: "d!", regex: "[0-2]?[0-9]{1}|3[0-1]{1}", apply: function (a) { this.date = +a }, formatter: function (a) { var b = a.getDate(); return /^[1-9]$/.test(b) ? c(a, "dd") : c(a, "d") } }, { key: "dd", regex: "[0-2][0-9]{1}|3[0-1]{1}", apply: function (a) { this.date = +a }, formatter: function (a) { return c(a, "dd") } }, { key: "d", regex: "[1-2]?[0-9]{1}|3[0-1]{1}", apply: function (a) { this.date = +a }, formatter: function (a) { return c(a, "d") } }, { key: "EEEE", regex: b.DATETIME_FORMATS.DAY.join("|"), formatter: function (a) { return c(a, "EEEE") } }, { key: "EEE", regex: b.DATETIME_FORMATS.SHORTDAY.join("|"), formatter: function (a) { return c(a, "EEE") } }, { key: "HH", regex: "(?:0|1)[0-9]|2[0-3]", apply: function (a) { this.hours = +a }, formatter: function (a) { return c(a, "HH") } }, { key: "hh", regex: "0[0-9]|1[0-2]", apply: function (a) { this.hours = +a }, formatter: function (a) { return c(a, "hh") } }, { key: "H", regex: "1?[0-9]|2[0-3]", apply: function (a) { this.hours = +a }, formatter: function (a) { return c(a, "H") } }, { key: "h", regex: "[0-9]|1[0-2]", apply: function (a) { this.hours = +a }, formatter: function (a) { return c(a, "h") } }, { key: "mm", regex: "[0-5][0-9]", apply: function (a) { this.minutes = +a }, formatter: function (a) { return c(a, "mm") } }, { key: "m", regex: "[0-9]|[1-5][0-9]", apply: function (a) { this.minutes = +a }, formatter: function (a) { return c(a, "m") } }, { key: "sss", regex: "[0-9][0-9][0-9]", apply: function (a) { this.milliseconds = +a }, formatter: function (a) { return c(a, "sss") } }, { key: "ss", regex: "[0-5][0-9]", apply: function (a) { this.seconds = +a }, formatter: function (a) { return c(a, "ss") } }, { key: "s", regex: "[0-9]|[1-5][0-9]", apply: function (a) { this.seconds = +a }, formatter: function (a) { return c(a, "s") } }, { key: "a", regex: b.DATETIME_FORMATS.AMPMS.join("|"), apply: function (a) { 12 === this.hours && (this.hours = 0), "PM" === a && (this.hours += 12) }, formatter: function (a) { return c(a, "a") } }, { key: "Z", regex: "[+-]\\d{4}", apply: function (a) { var b = a.match(/([+-])(\d{2})(\d{2})/), c = b[1], d = b[2], e = b[3]; this.hours += g(c + d), this.minutes += g(c + e) }, formatter: function (a) { return c(a, "Z") } }, { key: "ww", regex: "[0-4][0-9]|5[0-3]", formatter: function (a) { return c(a, "ww") } }, { key: "w", regex: "[0-9]|[1-4][0-9]|5[0-3]", formatter: function (a) { return c(a, "w") } }, { key: "GGGG", regex: b.DATETIME_FORMATS.ERANAMES.join("|").replace(/\s/g, "\\s"), formatter: function (a) { return c(a, "GGGG") } }, { key: "GGG", regex: b.DATETIME_FORMATS.ERAS.join("|"), formatter: function (a) { return c(a, "GGG") } }, { key: "GG", regex: b.DATETIME_FORMATS.ERAS.join("|"), formatter: function (a) { return c(a, "GG") } }, { key: "G", regex: b.DATETIME_FORMATS.ERAS.join("|"), formatter: function (a) { return c(a, "G") } }] }, this.init(), this.filter = function (a, c) { if (!angular.isDate(a) || isNaN(a) || !c) return ""; c = b.DATETIME_FORMATS[c] || c, b.id !== m && this.init(), this.formatters[c] || (this.formatters[c] = e(c, "formatter")); var d = this.formatters[c], f = d.map, g = c; return f.reduce(function (b, c, d) { var e = g.match(new RegExp("(.*)" + c.key)); return e && angular.isString(e[1]) && (b += e[1], g = g.replace(e[1] + c.key, "")), c.apply ? b + c.apply.call(null, a) : b }, "") }, this.parse = function (c, d, g) { if (!angular.isString(c) || !d) return c; d = b.DATETIME_FORMATS[d] || d, d = d.replace(o, "\\$&"), b.id !== m && this.init(), this.parsers[d] || (this.parsers[d] = e(d, "apply")); var h = this.parsers[d], i = h.regex, j = h.map, k = c.match(i), l = !1; if (k && k.length) { var n, p; angular.isDate(g) && !isNaN(g.getTime()) ? n = { year: g.getFullYear(), month: g.getMonth(), date: g.getDate(), hours: g.getHours(), minutes: g.getMinutes(), seconds: g.getSeconds(), milliseconds: g.getMilliseconds() } : (g && a.warn("dateparser:", "baseDate is not a valid date"), n = { year: 1900, month: 0, date: 1, hours: 0, minutes: 0, seconds: 0, milliseconds: 0 }); for (var q = 1, r = k.length; r > q; q++) { var s = j[q - 1]; "Z" === s.matcher && (l = !0), s.apply && s.apply.call(n, k[q]) } var t = l ? Date.prototype.setUTCFullYear : Date.prototype.setFullYear, u = l ? Date.prototype.setUTCHours : Date.prototype.setHours; return f(n.year, n.month, n.date) && (!angular.isDate(g) || isNaN(g.getTime()) || l ? (p = new Date(0), t.call(p, n.year, n.month, n.date), u.call(p, n.hours || 0, n.minutes || 0, n.seconds || 0, n.milliseconds || 0)) : (p = new Date(g), t.call(p, n.year, n.month, n.date), u.call(p, n.hours, n.minutes, n.seconds, n.milliseconds))), p } }, this.toTimezone = h, this.fromTimezone = i, this.timezoneToOffset = j, this.addDateMinutes = k, this.convertTimezoneToLocal = l }]), angular.module("ui.bootstrap.isClass", []).directive("uibIsClass", ["$animate", function (a) { var b = /^\s*([\s\S]+?)\s+on\s+([\s\S]+?)\s*$/, c = /^\s*([\s\S]+?)\s+for\s+([\s\S]+?)\s*$/; return { restrict: "A", compile: function (d, e) { function f(a, b, c) { i.push(a), j.push({ scope: a, element: b }), o.forEach(function (b, c) { g(b, a) }), a.$on("$destroy", h) } function g(b, d) { var e = b.match(c), f = d.$eval(e[1]), g = e[2], h = k[b]; if (!h) { var i = function (b) { var c = null; j.some(function (a) { var d = a.scope.$eval(m); return d === b ? (c = a, !0) : void 0 }), h.lastActivated !== c && (h.lastActivated && a.removeClass(h.lastActivated.element, f), c && a.addClass(c.element, f), h.lastActivated = c) }; k[b] = h = { lastActivated: null, scope: d, watchFn: i, compareWithExp: g, watcher: d.$watch(g, i) } } h.watchFn(d.$eval(g)) } function h(a) { var b = a.targetScope, c = i.indexOf(b); if (i.splice(c, 1), j.splice(c, 1), i.length) { var d = i[0]; angular.forEach(k, function (a) { a.scope === b && (a.watcher = d.$watch(a.compareWithExp, a.watchFn), a.scope = d) }) } else k = {} } var i = [], j = [], k = {}, l = e.uibIsClass.match(b), m = l[2], n = l[1], o = n.split(","); return f } } }]), angular.module("ui.bootstrap.position", []).factory("$uibPosition", ["$document", "$window", function (a, b) { var c, d = { normal: /(auto|scroll)/, hidden: /(auto|scroll|hidden)/ }, e = { auto: /\s?auto?\s?/i, primary: /^(top|bottom|left|right)$/, secondary: /^(top|bottom|left|right|center)$/, vertical: /^(top|bottom)$/ }; return { getRawNode: function (a) { return a[0] || a }, parseStyle: function (a) { return a = parseFloat(a), isFinite(a) ? a : 0 }, offsetParent: function (c) { function d(a) { return "static" === (b.getComputedStyle(a).position || "static") } c = this.getRawNode(c); for (var e = c.offsetParent || a[0].documentElement; e && e !== a[0].documentElement && d(e) ;) e = e.offsetParent; return e || a[0].documentElement }, scrollbarWidth: function () { if (angular.isUndefined(c)) { var b = angular.element('<div style="position: absolute; top: -9999px; width: 50px; height: 50px; overflow: scroll;"></div>'); a.find("body").append(b), c = b[0].offsetWidth - b[0].clientWidth, c = isFinite(c) ? c : 0, b.remove() } return c }, scrollParent: function (c, e) { c = this.getRawNode(c); var f = e ? d.hidden : d.normal, g = a[0].documentElement, h = b.getComputedStyle(c), i = "absolute" === h.position, j = c.parentElement || g; if (j === g || "fixed" === h.position) return g; for (; j.parentElement && j !== g;) { var k = b.getComputedStyle(j); if (i && "static" !== k.position && (i = !1), !i && f.test(k.overflow + k.overflowY + k.overflowX)) break; j = j.parentElement } return j }, position: function (c, d) { c = this.getRawNode(c); var e = this.offset(c); if (d) { var f = b.getComputedStyle(c); e.top -= this.parseStyle(f.marginTop), e.left -= this.parseStyle(f.marginLeft) } var g = this.offsetParent(c), h = { top: 0, left: 0 }; return g !== a[0].documentElement && (h = this.offset(g), h.top += g.clientTop - g.scrollTop, h.left += g.clientLeft - g.scrollLeft), { width: Math.round(angular.isNumber(e.width) ? e.width : c.offsetWidth), height: Math.round(angular.isNumber(e.height) ? e.height : c.offsetHeight), top: Math.round(e.top - h.top), left: Math.round(e.left - h.left) } }, offset: function (c) { c = this.getRawNode(c); var d = c.getBoundingClientRect(); return { width: Math.round(angular.isNumber(d.width) ? d.width : c.offsetWidth), height: Math.round(angular.isNumber(d.height) ? d.height : c.offsetHeight), top: Math.round(d.top + (b.pageYOffset || a[0].documentElement.scrollTop)), left: Math.round(d.left + (b.pageXOffset || a[0].documentElement.scrollLeft)) } }, viewportOffset: function (c, d, e) { c = this.getRawNode(c), e = e !== !1 ? !0 : !1; var f = c.getBoundingClientRect(), g = { top: 0, left: 0, bottom: 0, right: 0 }, h = d ? a[0].documentElement : this.scrollParent(c), i = h.getBoundingClientRect(); if (g.top = i.top + h.clientTop, g.left = i.left + h.clientLeft, h === a[0].documentElement && (g.top += b.pageYOffset, g.left += b.pageXOffset), g.bottom = g.top + h.clientHeight, g.right = g.left + h.clientWidth, e) { var j = b.getComputedStyle(h); g.top += this.parseStyle(j.paddingTop), g.bottom -= this.parseStyle(j.paddingBottom), g.left += this.parseStyle(j.paddingLeft), g.right -= this.parseStyle(j.paddingRight) } return { top: Math.round(f.top - g.top), bottom: Math.round(g.bottom - f.bottom), left: Math.round(f.left - g.left), right: Math.round(g.right - f.right) } }, parsePlacement: function (a) { var b = e.auto.test(a); return b && (a = a.replace(e.auto, "")), a = a.split("-"), a[0] = a[0] || "top", e.primary.test(a[0]) || (a[0] = "top"), a[1] = a[1] || "center", e.secondary.test(a[1]) || (a[1] = "center"), b ? a[2] = !0 : a[2] = !1, a }, positionElements: function (a, c, d, f) { a = this.getRawNode(a), c = this.getRawNode(c); var g = angular.isDefined(c.offsetWidth) ? c.offsetWidth : c.prop("offsetWidth"), h = angular.isDefined(c.offsetHeight) ? c.offsetHeight : c.prop("offsetHeight"); d = this.parsePlacement(d); var i = f ? this.offset(a) : this.position(a), j = { top: 0, left: 0, placement: "" }; if (d[2]) { var k = this.viewportOffset(a), l = b.getComputedStyle(c), m = { width: g + Math.round(Math.abs(this.parseStyle(l.marginLeft) + this.parseStyle(l.marginRight))), height: h + Math.round(Math.abs(this.parseStyle(l.marginTop) + this.parseStyle(l.marginBottom))) }; if (d[0] = "top" === d[0] && m.height > k.top && m.height <= k.bottom ? "bottom" : "bottom" === d[0] && m.height > k.bottom && m.height <= k.top ? "top" : "left" === d[0] && m.width > k.left && m.width <= k.right ? "right" : "right" === d[0] && m.width > k.right && m.width <= k.left ? "left" : d[0], d[1] = "top" === d[1] && m.height - i.height > k.bottom && m.height - i.height <= k.top ? "bottom" : "bottom" === d[1] && m.height - i.height > k.top && m.height - i.height <= k.bottom ? "top" : "left" === d[1] && m.width - i.width > k.right && m.width - i.width <= k.left ? "right" : "right" === d[1] && m.width - i.width > k.left && m.width - i.width <= k.right ? "left" : d[1], "center" === d[1]) if (e.vertical.test(d[0])) { var n = i.width / 2 - g / 2; k.left + n < 0 && m.width - i.width <= k.right ? d[1] = "left" : k.right + n < 0 && m.width - i.width <= k.left && (d[1] = "right") } else { var o = i.height / 2 - m.height / 2; k.top + o < 0 && m.height - i.height <= k.bottom ? d[1] = "top" : k.bottom + o < 0 && m.height - i.height <= k.top && (d[1] = "bottom") } } switch (d[0]) { case "top": j.top = i.top - h; break; case "bottom": j.top = i.top + i.height; break; case "left": j.left = i.left - g; break; case "right": j.left = i.left + i.width } switch (d[1]) { case "top": j.top = i.top; break; case "bottom": j.top = i.top + i.height - h; break; case "left": j.left = i.left; break; case "right": j.left = i.left + i.width - g; break; case "center": e.vertical.test(d[0]) ? j.left = i.left + i.width / 2 - g / 2 : j.top = i.top + i.height / 2 - h / 2 } return j.top = Math.round(j.top), j.left = Math.round(j.left), j.placement = "center" === d[1] ? d[0] : d[0] + "-" + d[1], j }, positionArrow: function (a, c) { a = this.getRawNode(a); var d = a.querySelector(".tooltip-inner, .popover-inner"); if (d) { var f = angular.element(d).hasClass("tooltip-inner"), g = f ? a.querySelector(".tooltip-arrow") : a.querySelector(".arrow"); if (g) { if (c = this.parsePlacement(c), "center" === c[1]) return void angular.element(g).css({ top: "", bottom: "", right: "", left: "", margin: "" }); var h = "border-" + c[0] + "-width", i = b.getComputedStyle(g)[h], j = "border-"; j += e.vertical.test(c[0]) ? c[0] + "-" + c[1] : c[1] + "-" + c[0], j += "-radius"; var k = b.getComputedStyle(f ? d : a)[j], l = { top: "auto", bottom: "auto", left: "auto", right: "auto", margin: 0 }; switch (c[0]) { case "top": l.bottom = f ? "0" : "-" + i; break; case "bottom": l.top = f ? "0" : "-" + i; break; case "left": l.right = f ? "0" : "-" + i; break; case "right": l.left = f ? "0" : "-" + i } l[c[1]] = k, angular.element(g).css(l) } } } } }]), angular.module("ui.bootstrap.datepicker", ["ui.bootstrap.dateparser", "ui.bootstrap.isClass", "ui.bootstrap.position"]).value("$datepickerSuppressError", !1).constant("uibDatepickerConfig", { datepickerMode: "day", formatDay: "dd", formatMonth: "MMMM", formatYear: "yyyy", formatDayHeader: "EEE", formatDayTitle: "MMMM yyyy", formatMonthTitle: "yyyy", maxDate: null, maxMode: "year", minDate: null, minMode: "day", ngModelOptions: {}, shortcutPropagation: !1, showWeeks: !0, yearColumns: 5, yearRows: 4 }).controller("UibDatepickerController", ["$scope", "$attrs", "$parse", "$interpolate", "$locale", "$log", "dateFilter", "uibDatepickerConfig", "$datepickerSuppressError", "uibDateParser", function (a, b, c, d, e, f, g, h, i, j) { var k = this, l = { $setViewValue: angular.noop }, m = {}, n = []; this.modes = ["day", "month", "year"], b.datepickerOptions ? angular.forEach(["formatDay", "formatDayHeader", "formatDayTitle", "formatMonth", "formatMonthTitle", "formatYear", "initDate", "maxDate", "maxMode", "minDate", "minMode", "showWeeks", "shortcutPropagation", "startingDay", "yearColumns", "yearRows"], function (b) { switch (b) { case "formatDay": case "formatDayHeader": case "formatDayTitle": case "formatMonth": case "formatMonthTitle": case "formatYear": k[b] = angular.isDefined(a.datepickerOptions[b]) ? d(a.datepickerOptions[b])(a.$parent) : h[b]; break; case "showWeeks": case "shortcutPropagation": case "yearColumns": case "yearRows": k[b] = angular.isDefined(a.datepickerOptions[b]) ? a.datepickerOptions[b] : h[b]; break; case "startingDay": angular.isDefined(a.datepickerOptions.startingDay) ? k.startingDay = a.datepickerOptions.startingDay : angular.isNumber(h.startingDay) ? k.startingDay = h.startingDay : k.startingDay = (e.DATETIME_FORMATS.FIRSTDAYOFWEEK + 8) % 7; break; case "maxDate": case "minDate": a.datepickerOptions[b] ? a.$watch(function () { return a.datepickerOptions[b] }, function (a) { a ? angular.isDate(a) ? k[b] = j.fromTimezone(new Date(a), m.timezone) : k[b] = new Date(g(a, "medium")) : k[b] = null, k.refreshView() }) : k[b] = h[b] ? j.fromTimezone(new Date(h[b]), m.timezone) : null; break; case "maxMode": case "minMode": a.datepickerOptions[b] ? a.$watch(function () { return a.datepickerOptions[b] }, function (c) { k[b] = a[b] = angular.isDefined(c) ? c : datepickerOptions[b], ("minMode" === b && k.modes.indexOf(a.datepickerMode) < k.modes.indexOf(k[b]) || "maxMode" === b && k.modes.indexOf(a.datepickerMode) > k.modes.indexOf(k[b])) && (a.datepickerMode = k[b]) }) : k[b] = a[b] = h[b] || null; break; case "initDate": a.datepickerOptions.initDate ? (this.activeDate = j.fromTimezone(a.datepickerOptions.initDate, m.timezone) || new Date, a.$watch(function () { return a.datepickerOptions.initDate }, function (a) { a && (l.$isEmpty(l.$modelValue) || l.$invalid) && (k.activeDate = j.fromTimezone(a, m.timezone), k.refreshView()) })) : this.activeDate = new Date } }) : (angular.forEach(["formatDay", "formatMonth", "formatYear", "formatDayHeader", "formatDayTitle", "formatMonthTitle"], function (c) { k[c] = angular.isDefined(b[c]) ? d(b[c])(a.$parent) : h[c] }), angular.forEach(["showWeeks", "yearRows", "yearColumns", "shortcutPropagation"], function (c) { k[c] = angular.isDefined(b[c]) ? a.$parent.$eval(b[c]) : h[c] }), angular.isDefined(b.startingDay) ? k.startingDay = a.$parent.$eval(b.startingDay) : angular.isNumber(h.startingDay) ? k.startingDay = h.startingDay : k.startingDay = (e.DATETIME_FORMATS.FIRSTDAYOFWEEK + 8) % 7, angular.forEach(["minDate", "maxDate"], function (c) { b[c] ? n.push(a.$parent.$watch(b[c], function (a) { a ? angular.isDate(a) ? k[c] = j.fromTimezone(new Date(a), m.timezone) : k[c] = new Date(g(a, "medium")) : k[c] = null, k.refreshView() })) : k[c] = h[c] ? j.fromTimezone(new Date(h[c]), m.timezone) : null }), angular.forEach(["minMode", "maxMode"], function (c) { b[c] ? n.push(a.$parent.$watch(b[c], function (d) { k[c] = a[c] = angular.isDefined(d) ? d : b[c], ("minMode" === c && k.modes.indexOf(a.datepickerMode) < k.modes.indexOf(k[c]) || "maxMode" === c && k.modes.indexOf(a.datepickerMode) > k.modes.indexOf(k[c])) && (a.datepickerMode = k[c]) })) : k[c] = a[c] = h[c] || null }), angular.isDefined(b.initDate) ? (this.activeDate = j.fromTimezone(a.$parent.$eval(b.initDate), m.timezone) || new Date, n.push(a.$parent.$watch(b.initDate, function (a) { a && (l.$isEmpty(l.$modelValue) || l.$invalid) && (k.activeDate = j.fromTimezone(a, m.timezone), k.refreshView()) }))) : this.activeDate = new Date), a.datepickerMode = a.datepickerMode || h.datepickerMode, a.uniqueId = "datepicker-" + a.$id + "-" + Math.floor(1e4 * Math.random()), a.disabled = angular.isDefined(b.disabled) || !1, angular.isDefined(b.ngDisabled) && n.push(a.$parent.$watch(b.ngDisabled, function (b) { a.disabled = b, k.refreshView() })), a.isActive = function (b) { return 0 === k.compare(b.date, k.activeDate) ? (a.activeDateId = b.uid, !0) : !1 }, this.init = function (a) { l = a, m = a.$options || h.ngModelOptions, l.$modelValue && (this.activeDate = l.$modelValue), l.$render = function () { k.render() } }, this.render = function () { if (l.$viewValue) { var a = new Date(l.$viewValue), b = !isNaN(a); b ? this.activeDate = j.fromTimezone(a, m.timezone) : i || f.error('Datepicker directive: "ng-model" value must be a Date object') } this.refreshView() }, this.refreshView = function () { if (this.element) { a.selectedDt = null, this._refreshView(), a.activeDt && (a.activeDateId = a.activeDt.uid); var b = l.$viewValue ? new Date(l.$viewValue) : null; b = j.fromTimezone(b, m.timezone), l.$setValidity("dateDisabled", !b || this.element && !this.isDisabled(b)) } }, this.createDateObject = function (b, c) { var d = l.$viewValue ? new Date(l.$viewValue) : null; d = j.fromTimezone(d, m.timezone); var e = { date: b, label: j.filter(b, c), selected: d && 0 === this.compare(b, d), disabled: this.isDisabled(b), current: 0 === this.compare(b, new Date), customClass: this.customClass(b) || null }; return d && 0 === this.compare(b, d) && (a.selectedDt = e), k.activeDate && 0 === this.compare(e.date, k.activeDate) && (a.activeDt = e), e }, this.isDisabled = function (c) { return a.disabled || this.minDate && this.compare(c, this.minDate) < 0 || this.maxDate && this.compare(c, this.maxDate) > 0 || b.dateDisabled && a.dateDisabled({ date: c, mode: a.datepickerMode }) }, this.customClass = function (b) { return a.customClass({ date: b, mode: a.datepickerMode }) }, this.split = function (a, b) { for (var c = []; a.length > 0;) c.push(a.splice(0, b)); return c }, a.select = function (b) { if (a.datepickerMode === k.minMode) { var c = l.$viewValue ? j.fromTimezone(new Date(l.$viewValue), m.timezone) : new Date(0, 0, 0, 0, 0, 0, 0); c.setFullYear(b.getFullYear(), b.getMonth(), b.getDate()), c = j.toTimezone(c, m.timezone), l.$setViewValue(c), l.$render() } else k.activeDate = b, a.datepickerMode = k.modes[k.modes.indexOf(a.datepickerMode) - 1] }, a.move = function (a) { var b = k.activeDate.getFullYear() + a * (k.step.years || 0), c = k.activeDate.getMonth() + a * (k.step.months || 0); k.activeDate.setFullYear(b, c, 1), k.refreshView() }, a.toggleMode = function (b) { b = b || 1, a.datepickerMode === k.maxMode && 1 === b || a.datepickerMode === k.minMode && -1 === b || (a.datepickerMode = k.modes[k.modes.indexOf(a.datepickerMode) + b]) }, a.keys = { 13: "enter", 32: "space", 33: "pageup", 34: "pagedown", 35: "end", 36: "home", 37: "left", 38: "up", 39: "right", 40: "down" }; var o = function () { k.element[0].focus() }; a.$on("uib:datepicker.focus", o), a.keydown = function (b) { var c = a.keys[b.which]; if (c && !b.shiftKey && !b.altKey && !a.disabled) if (b.preventDefault(), k.shortcutPropagation || b.stopPropagation(), "enter" === c || "space" === c) { if (k.isDisabled(k.activeDate)) return; a.select(k.activeDate) } else !b.ctrlKey || "up" !== c && "down" !== c ? (k.handleKeyDown(c, b), k.refreshView()) : a.toggleMode("up" === c ? 1 : -1) }, a.$on("$destroy", function () { for (; n.length;) n.shift()() }) }]).controller("UibDaypickerController", ["$scope", "$element", "dateFilter", function (a, b, c) {
     function d(a, b) { return 1 !== b || a % 4 !== 0 || a % 100 === 0 && a % 400 !== 0 ? f[b] : 29 } function e(a) { var b = new Date(a); b.setDate(b.getDate() + 4 - (b.getDay() || 7)); var c = b.getTime(); return b.setMonth(0), b.setDate(1), Math.floor(Math.round((c - b) / 864e5) / 7) + 1 } var f = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; this.step = { months: 1 }, this.element = b, this.init = function (b) { angular.extend(b, this), a.showWeeks = b.showWeeks, b.refreshView() }, this.getDates = function (a, b) {
         for (var c, d = new Array(b), e = new Date(a), f = 0; b > f;) c = new Date(e), d[f++] = c, e.setDate(e.getDate() + 1); return d;
     }, this._refreshView = function () { var b = this.activeDate.getFullYear(), d = this.activeDate.getMonth(), f = new Date(this.activeDate); f.setFullYear(b, d, 1); var g = this.startingDay - f.getDay(), h = g > 0 ? 7 - g : -g, i = new Date(f); h > 0 && i.setDate(-h + 1); for (var j = this.getDates(i, 42), k = 0; 42 > k; k++) j[k] = angular.extend(this.createDateObject(j[k], this.formatDay), { secondary: j[k].getMonth() !== d, uid: a.uniqueId + "-" + k }); a.labels = new Array(7); for (var l = 0; 7 > l; l++) a.labels[l] = { abbr: c(j[l].date, this.formatDayHeader), full: c(j[l].date, "EEEE") }; if (a.title = c(this.activeDate, this.formatDayTitle), a.rows = this.split(j, 7), a.showWeeks) { a.weekNumbers = []; for (var m = (11 - this.startingDay) % 7, n = a.rows.length, o = 0; n > o; o++) a.weekNumbers.push(e(a.rows[o][m].date)) } }, this.compare = function (a, b) { var c = new Date(a.getFullYear(), a.getMonth(), a.getDate()), d = new Date(b.getFullYear(), b.getMonth(), b.getDate()); return c.setFullYear(a.getFullYear()), d.setFullYear(b.getFullYear()), c - d }, this.handleKeyDown = function (a, b) { var c = this.activeDate.getDate(); if ("left" === a) c -= 1; else if ("up" === a) c -= 7; else if ("right" === a) c += 1; else if ("down" === a) c += 7; else if ("pageup" === a || "pagedown" === a) { var e = this.activeDate.getMonth() + ("pageup" === a ? -1 : 1); this.activeDate.setMonth(e, 1), c = Math.min(d(this.activeDate.getFullYear(), this.activeDate.getMonth()), c) } else "home" === a ? c = 1 : "end" === a && (c = d(this.activeDate.getFullYear(), this.activeDate.getMonth())); this.activeDate.setDate(c) }
 }]).controller("UibMonthpickerController", ["$scope", "$element", "dateFilter", function (a, b, c) { this.step = { years: 1 }, this.element = b, this.init = function (a) { angular.extend(a, this), a.refreshView() }, this._refreshView = function () { for (var b, d = new Array(12), e = this.activeDate.getFullYear(), f = 0; 12 > f; f++) b = new Date(this.activeDate), b.setFullYear(e, f, 1), d[f] = angular.extend(this.createDateObject(b, this.formatMonth), { uid: a.uniqueId + "-" + f }); a.title = c(this.activeDate, this.formatMonthTitle), a.rows = this.split(d, 3) }, this.compare = function (a, b) { var c = new Date(a.getFullYear(), a.getMonth()), d = new Date(b.getFullYear(), b.getMonth()); return c.setFullYear(a.getFullYear()), d.setFullYear(b.getFullYear()), c - d }, this.handleKeyDown = function (a, b) { var c = this.activeDate.getMonth(); if ("left" === a) c -= 1; else if ("up" === a) c -= 3; else if ("right" === a) c += 1; else if ("down" === a) c += 3; else if ("pageup" === a || "pagedown" === a) { var d = this.activeDate.getFullYear() + ("pageup" === a ? -1 : 1); this.activeDate.setFullYear(d) } else "home" === a ? c = 0 : "end" === a && (c = 11); this.activeDate.setMonth(c) } }]).controller("UibYearpickerController", ["$scope", "$element", "dateFilter", function (a, b, c) { function d(a) { return parseInt((a - 1) / f, 10) * f + 1 } var e, f; this.element = b, this.yearpickerInit = function () { e = this.yearColumns, f = this.yearRows * e, this.step = { years: f } }, this._refreshView = function () { for (var b, c = new Array(f), g = 0, h = d(this.activeDate.getFullYear()) ; f > g; g++) b = new Date(this.activeDate), b.setFullYear(h + g, 0, 1), c[g] = angular.extend(this.createDateObject(b, this.formatYear), { uid: a.uniqueId + "-" + g }); a.title = [c[0].label, c[f - 1].label].join(" - "), a.rows = this.split(c, e), a.columns = e }, this.compare = function (a, b) { return a.getFullYear() - b.getFullYear() }, this.handleKeyDown = function (a, b) { var c = this.activeDate.getFullYear(); "left" === a ? c -= 1 : "up" === a ? c -= e : "right" === a ? c += 1 : "down" === a ? c += e : "pageup" === a || "pagedown" === a ? c += ("pageup" === a ? -1 : 1) * f : "home" === a ? c = d(this.activeDate.getFullYear()) : "end" === a && (c = d(this.activeDate.getFullYear()) + f - 1), this.activeDate.setFullYear(c) } }]).directive("uibDatepicker", function () { return { replace: !0, templateUrl: function (a, b) { return b.templateUrl || "uib/template/datepicker/datepicker.html" }, scope: { datepickerMode: "=?", datepickerOptions: "=?", dateDisabled: "&", customClass: "&", shortcutPropagation: "&?" }, require: ["uibDatepicker", "^ngModel"], controller: "UibDatepickerController", controllerAs: "datepicker", link: function (a, b, c, d) { var e = d[0], f = d[1]; e.init(f) } } }).directive("uibDaypicker", function () { return { replace: !0, templateUrl: function (a, b) { return b.templateUrl || "uib/template/datepicker/day.html" }, require: ["^uibDatepicker", "uibDaypicker"], controller: "UibDaypickerController", link: function (a, b, c, d) { var e = d[0], f = d[1]; f.init(e) } } }).directive("uibMonthpicker", function () { return { replace: !0, templateUrl: function (a, b) { return b.templateUrl || "uib/template/datepicker/month.html" }, require: ["^uibDatepicker", "uibMonthpicker"], controller: "UibMonthpickerController", link: function (a, b, c, d) { var e = d[0], f = d[1]; f.init(e) } } }).directive("uibYearpicker", function () { return { replace: !0, templateUrl: function (a, b) { return b.templateUrl || "uib/template/datepicker/year.html" }, require: ["^uibDatepicker", "uibYearpicker"], controller: "UibYearpickerController", link: function (a, b, c, d) { var e = d[0]; angular.extend(e, d[1]), e.yearpickerInit(), e.refreshView() } } }).constant("uibDatepickerPopupConfig", { altInputFormats: [], appendToBody: !1, clearText: "Clear", closeOnDateSelection: !0, closeText: "Done", currentText: "Today", datepickerPopup: "yyyy-MM-dd", datepickerPopupTemplateUrl: "uib/template/datepicker/popup.html", datepickerTemplateUrl: "uib/template/datepicker/datepicker.html", html5Types: { date: "yyyy-MM-dd", "datetime-local": "yyyy-MM-ddTHH:mm:ss.sss", month: "yyyy-MM" }, onOpenFocus: !0, showButtonBar: !0 }).controller("UibDatepickerPopupController", ["$scope", "$element", "$attrs", "$compile", "$parse", "$document", "$rootScope", "$uibPosition", "dateFilter", "uibDateParser", "uibDatepickerPopupConfig", "$timeout", "uibDatepickerConfig", function (a, b, c, d, e, f, g, h, i, j, k, l, m) { function n(a) { return a.replace(/([A-Z])/g, function (a) { return "-" + a.toLowerCase() }) } function o(b) { var c = j.parse(b, t, a.date); if (isNaN(c)) for (var d = 0; d < E.length; d++) if (c = j.parse(b, E[d], a.date), !isNaN(c)) return c; return c } function p(a) { if (angular.isNumber(a) && (a = new Date(a)), !a) return null; if (angular.isDate(a) && !isNaN(a)) return a; if (angular.isString(a)) { var b = o(a); if (!isNaN(b)) return j.toTimezone(b, C.timezone) } return B.$options && B.$options.allowInvalid ? a : void 0 } function q(a, b) { var d = a || b; return c.ngRequired || d ? (angular.isNumber(d) && (d = new Date(d)), d ? angular.isDate(d) && !isNaN(d) ? !0 : angular.isString(d) ? !isNaN(o(b)) : !1 : !0) : !0 } function r(c) { if (a.isOpen || !a.disabled) { var d = D[0], e = b[0].contains(c.target), f = void 0 !== d.contains && d.contains(c.target); !a.isOpen || e || f || a.$apply(function () { a.isOpen = !1 }) } } function s(c) { 27 === c.which && a.isOpen ? (c.preventDefault(), c.stopPropagation(), a.$apply(function () { a.isOpen = !1 }), b[0].focus()) : 40 !== c.which || a.isOpen || (c.preventDefault(), c.stopPropagation(), a.$apply(function () { a.isOpen = !0 })) } var t, u, v, w, x, y, z, A, B, C, D, E, F = {}, G = !1, H = []; a.watchData = {}, this.init = function (h) { if (B = h, C = h.$options || m.ngModelOptions, u = angular.isDefined(c.closeOnDateSelection) ? a.$parent.$eval(c.closeOnDateSelection) : k.closeOnDateSelection, v = angular.isDefined(c.datepickerAppendToBody) ? a.$parent.$eval(c.datepickerAppendToBody) : k.appendToBody, w = angular.isDefined(c.onOpenFocus) ? a.$parent.$eval(c.onOpenFocus) : k.onOpenFocus, x = angular.isDefined(c.datepickerPopupTemplateUrl) ? c.datepickerPopupTemplateUrl : k.datepickerPopupTemplateUrl, y = angular.isDefined(c.datepickerTemplateUrl) ? c.datepickerTemplateUrl : k.datepickerTemplateUrl, E = angular.isDefined(c.altInputFormats) ? a.$parent.$eval(c.altInputFormats) : k.altInputFormats, a.showButtonBar = angular.isDefined(c.showButtonBar) ? a.$parent.$eval(c.showButtonBar) : k.showButtonBar, k.html5Types[c.type] ? (t = k.html5Types[c.type], G = !0) : (t = c.uibDatepickerPopup || k.datepickerPopup, c.$observe("uibDatepickerPopup", function (a, b) { var c = a || k.datepickerPopup; if (c !== t && (t = c, B.$modelValue = null, !t)) throw new Error("uibDatepickerPopup must have a date format specified.") })), !t) throw new Error("uibDatepickerPopup must have a date format specified."); if (G && c.uibDatepickerPopup) throw new Error("HTML5 date input types do not support custom formats."); z = angular.element("<div uib-datepicker-popup-wrap><div uib-datepicker></div></div>"), a.ngModelOptions = angular.copy(C), a.ngModelOptions.timezone = null, z.attr({ "ng-model": "date", "ng-model-options": "ngModelOptions", "ng-change": "dateSelection(date)", "template-url": x }), A = angular.element(z.children()[0]), A.attr("template-url", y), G && "month" === c.type && (A.attr("datepicker-mode", '"month"'), A.attr("min-mode", "month")), a.datepickerOptions && angular.forEach(a.datepickerOptions, function (a, b) { -1 === ["minDate", "maxDate", "minMode", "maxMode", "initDate", "datepickerMode"].indexOf(b) ? A.attr(n(b), a) : A.attr(n(b), "datepickerOptions." + b) }), angular.forEach(["minMode", "maxMode", "datepickerMode", "shortcutPropagation"], function (b) { if (c[b]) { var d = e(c[b]), f = { get: function () { return d(a.$parent) } }; if (A.attr(n(b), "watchData." + b), "datepickerMode" === b) { var g = d.assign; f.set = function (b) { g(a.$parent, b) } } Object.defineProperty(a.watchData, b, f) } }), angular.forEach(["minDate", "maxDate", "initDate"], function (b) { if (c[b]) { var d = e(c[b]); H.push(a.$parent.$watch(d, function (c) { "minDate" === b || "maxDate" === b ? (null === c ? F[b] = null : angular.isDate(c) ? F[b] = j.fromTimezone(new Date(c), C.timezone) : F[b] = new Date(i(c, "medium")), a.watchData[b] = null === c ? null : F[b]) : a.watchData[b] = j.fromTimezone(new Date(c), C.timezone) })), A.attr(n(b), "watchData." + b) } }), c.dateDisabled && A.attr("date-disabled", "dateDisabled({ date: date, mode: mode })"), angular.forEach(["formatDay", "formatMonth", "formatYear", "formatDayHeader", "formatDayTitle", "formatMonthTitle", "showWeeks", "startingDay", "yearRows", "yearColumns"], function (a) { angular.isDefined(c[a]) && A.attr(n(a), c[a]) }), c.customClass && A.attr("custom-class", "customClass({ date: date, mode: mode })"), G ? B.$formatters.push(function (b) { return a.date = j.fromTimezone(b, C.timezone), b }) : (B.$$parserName = "date", B.$validators.date = q, B.$parsers.unshift(p), B.$formatters.push(function (b) { return B.$isEmpty(b) ? (a.date = b, b) : (a.date = j.fromTimezone(b, C.timezone), angular.isNumber(a.date) && (a.date = new Date(a.date)), j.filter(a.date, t)) })), B.$viewChangeListeners.push(function () { a.date = o(B.$viewValue) }), b.on("keydown", s), D = d(z)(a), z.remove(), v ? f.find("body").append(D) : b.after(D), a.$on("$destroy", function () { for (a.isOpen === !0 && (g.$$phase || a.$apply(function () { a.isOpen = !1 })), D.remove(), b.off("keydown", s), f.off("click", r) ; H.length;) H.shift()() }) }, a.getText = function (b) { return a[b + "Text"] || k[b + "Text"] }, a.isDisabled = function (b) { return "today" === b && (b = new Date), a.watchData.minDate && a.compare(b, F.minDate) < 0 || a.watchData.maxDate && a.compare(b, F.maxDate) > 0 }, a.compare = function (a, b) { return new Date(a.getFullYear(), a.getMonth(), a.getDate()) - new Date(b.getFullYear(), b.getMonth(), b.getDate()) }, a.dateSelection = function (c) { angular.isDefined(c) && (a.date = c); var d = a.date ? j.filter(a.date, t) : null; b.val(d), B.$setViewValue(d), u && (a.isOpen = !1, b[0].focus()) }, a.keydown = function (c) { 27 === c.which && (c.stopPropagation(), a.isOpen = !1, b[0].focus()) }, a.select = function (b) { if ("today" === b) { var c = new Date; angular.isDate(a.date) ? (b = new Date(a.date), b.setFullYear(c.getFullYear(), c.getMonth(), c.getDate())) : b = new Date(c.setHours(0, 0, 0, 0)) } a.dateSelection(b) }, a.close = function () { a.isOpen = !1, b[0].focus() }, a.disabled = angular.isDefined(c.disabled) || !1, c.ngDisabled && H.push(a.$parent.$watch(e(c.ngDisabled), function (b) { a.disabled = b })), a.$watch("isOpen", function (c) { c ? a.disabled ? a.isOpen = !1 : (a.position = v ? h.offset(b) : h.position(b), a.position.top = a.position.top + b.prop("offsetHeight"), l(function () { w && a.$broadcast("uib:datepicker.focus"), f.on("click", r) }, 0, !1)) : f.off("click", r) }) }]).directive("uibDatepickerPopup", function () { return { require: ["ngModel", "uibDatepickerPopup"], controller: "UibDatepickerPopupController", scope: { datepickerOptions: "=?", isOpen: "=?", currentText: "@", clearText: "@", closeText: "@", dateDisabled: "&", customClass: "&" }, link: function (a, b, c, d) { var e = d[0], f = d[1]; f.init(e) } } }).directive("uibDatepickerPopupWrap", function () { return { replace: !0, transclude: !0, templateUrl: function (a, b) { return b.templateUrl || "uib/template/datepicker/popup.html" } } }), angular.module("ui.bootstrap.debounce", []).factory("$$debounce", ["$timeout", function (a) { return function (b, c) { var d; return function () { var e = this, f = Array.prototype.slice.call(arguments); d && a.cancel(d), d = a(function () { b.apply(e, f) }, c) } } }]), angular.module("ui.bootstrap.dropdown", ["ui.bootstrap.position"]).constant("uibDropdownConfig", { appendToOpenClass: "uib-dropdown-open", openClass: "open" }).service("uibDropdownService", ["$document", "$rootScope", function (a, b) { var c = null; this.open = function (b) { c || (a.on("click", d), a.on("keydown", e)), c && c !== b && (c.isOpen = !1), c = b }, this.close = function (b) { c === b && (c = null, a.off("click", d), a.off("keydown", e)) }; var d = function (a) { if (c && !(a && "disabled" === c.getAutoClose() || a && 3 === a.which)) { var d = c.getToggleElement(); if (!(a && d && d[0].contains(a.target))) { var e = c.getDropdownElement(); a && "outsideClick" === c.getAutoClose() && e && e[0].contains(a.target) || (c.isOpen = !1, b.$$phase || c.$apply()) } } }, e = function (a) { 27 === a.which ? (c.focusToggleElement(), d()) : c.isKeynavEnabled() && -1 !== [38, 40].indexOf(a.which) && c.isOpen && (a.preventDefault(), a.stopPropagation(), c.focusDropdownEntry(a.which)) } }]).controller("UibDropdownController", ["$scope", "$element", "$attrs", "$parse", "uibDropdownConfig", "uibDropdownService", "$animate", "$uibPosition", "$document", "$compile", "$templateRequest", function (a, b, c, d, e, f, g, h, i, j, k) { var l, m, n = this, o = a.$new(), p = e.appendToOpenClass, q = e.openClass, r = angular.noop, s = c.onToggle ? d(c.onToggle) : angular.noop, t = !1, u = null, v = !1, w = i.find("body"); b.addClass("dropdown"), this.init = function () { if (c.isOpen && (m = d(c.isOpen), r = m.assign, a.$watch(m, function (a) { o.isOpen = !!a })), angular.isDefined(c.dropdownAppendTo)) { var e = d(c.dropdownAppendTo)(o); e && (u = angular.element(e)) } t = angular.isDefined(c.dropdownAppendToBody), v = angular.isDefined(c.keyboardNav), t && !u && (u = w), u && n.dropdownMenu && (u.append(n.dropdownMenu), b.on("$destroy", function () { n.dropdownMenu.remove() })) }, this.toggle = function (a) { return o.isOpen = arguments.length ? !!a : !o.isOpen }, this.isOpen = function () { return o.isOpen }, o.getToggleElement = function () { return n.toggleElement }, o.getAutoClose = function () { return c.autoClose || "always" }, o.getElement = function () { return b }, o.isKeynavEnabled = function () { return v }, o.focusDropdownEntry = function (a) { var c = n.dropdownMenu ? angular.element(n.dropdownMenu).find("a") : b.find("ul").eq(0).find("a"); switch (a) { case 40: angular.isNumber(n.selectedOption) ? n.selectedOption = n.selectedOption === c.length - 1 ? n.selectedOption : n.selectedOption + 1 : n.selectedOption = 0; break; case 38: angular.isNumber(n.selectedOption) ? n.selectedOption = 0 === n.selectedOption ? 0 : n.selectedOption - 1 : n.selectedOption = c.length - 1 } c[n.selectedOption].focus() }, o.getDropdownElement = function () { return n.dropdownMenu }, o.focusToggleElement = function () { n.toggleElement && n.toggleElement[0].focus() }, o.$watch("isOpen", function (c, d) { if (u && n.dropdownMenu) { var e, i, m = h.positionElements(b, n.dropdownMenu, "bottom-left", !0); if (e = { top: m.top + "px", display: c ? "block" : "none" }, i = n.dropdownMenu.hasClass("dropdown-menu-right"), i ? (e.left = "auto", e.right = window.innerWidth - (m.left + b.prop("offsetWidth")) + "px") : (e.left = m.left + "px", e.right = "auto"), !t) { var v = h.offset(u); e.top = m.top - v.top + "px", i ? e.right = window.innerWidth - (m.left - v.left + b.prop("offsetWidth")) + "px" : e.left = m.left - v.left + "px" } n.dropdownMenu.css(e) } var w = u ? u : b; if (g[c ? "addClass" : "removeClass"](w, u ? p : q).then(function () { angular.isDefined(c) && c !== d && s(a, { open: !!c }) }), c) n.dropdownMenuTemplateUrl && k(n.dropdownMenuTemplateUrl).then(function (a) { l = o.$new(), j(a.trim())(l, function (a) { var b = a; n.dropdownMenu.replaceWith(b), n.dropdownMenu = b }) }), o.focusToggleElement(), f.open(o); else { if (n.dropdownMenuTemplateUrl) { l && l.$destroy(); var x = angular.element('<ul class="dropdown-menu"></ul>'); n.dropdownMenu.replaceWith(x), n.dropdownMenu = x } f.close(o), n.selectedOption = null } angular.isFunction(r) && r(a, c) }), a.$on("$locationChangeSuccess", function () { "disabled" !== o.getAutoClose() && (o.isOpen = !1) }) }]).directive("uibDropdown", function () { return { controller: "UibDropdownController", link: function (a, b, c, d) { d.init() } } }).directive("uibDropdownMenu", function () { return { restrict: "A", require: "?^uibDropdown", link: function (a, b, c, d) { if (d && !angular.isDefined(c.dropdownNested)) { b.addClass("dropdown-menu"); var e = c.templateUrl; e && (d.dropdownMenuTemplateUrl = e), d.dropdownMenu || (d.dropdownMenu = b) } } } }).directive("uibDropdownToggle", function () { return { require: "?^uibDropdown", link: function (a, b, c, d) { if (d) { b.addClass("dropdown-toggle"), d.toggleElement = b; var e = function (e) { e.preventDefault(), b.hasClass("disabled") || c.disabled || a.$apply(function () { d.toggle() }) }; b.bind("click", e), b.attr({ "aria-haspopup": !0, "aria-expanded": !1 }), a.$watch(d.isOpen, function (a) { b.attr("aria-expanded", !!a) }), a.$on("$destroy", function () { b.unbind("click", e) }) } } } }), angular.module("ui.bootstrap.stackedMap", []).factory("$$stackedMap", function () { return { createNew: function () { var a = []; return { add: function (b, c) { a.push({ key: b, value: c }) }, get: function (b) { for (var c = 0; c < a.length; c++) if (b === a[c].key) return a[c] }, keys: function () { for (var b = [], c = 0; c < a.length; c++) b.push(a[c].key); return b }, top: function () { return a[a.length - 1] }, remove: function (b) { for (var c = -1, d = 0; d < a.length; d++) if (b === a[d].key) { c = d; break } return a.splice(c, 1)[0] }, removeTop: function () { return a.splice(a.length - 1, 1)[0] }, length: function () { return a.length } } } } }), angular.module("ui.bootstrap.modal", ["ui.bootstrap.stackedMap"]).factory("$$multiMap", function () { return { createNew: function () { var a = {}; return { entries: function () { return Object.keys(a).map(function (b) { return { key: b, value: a[b] } }) }, get: function (b) { return a[b] }, hasKey: function (b) { return !!a[b] }, keys: function () { return Object.keys(a) }, put: function (b, c) { a[b] || (a[b] = []), a[b].push(c) }, remove: function (b, c) { var d = a[b]; if (d) { var e = d.indexOf(c); -1 !== e && d.splice(e, 1), d.length || delete a[b] } } } } } }).provider("$uibResolve", function () { var a = this; this.resolver = null, this.setResolver = function (a) { this.resolver = a }, this.$get = ["$injector", "$q", function (b, c) { var d = a.resolver ? b.get(a.resolver) : null; return { resolve: function (a, e, f, g) { if (d) return d.resolve(a, e, f, g); var h = []; return angular.forEach(a, function (a) { angular.isFunction(a) || angular.isArray(a) ? h.push(c.resolve(b.invoke(a))) : angular.isString(a) ? h.push(c.resolve(b.get(a))) : h.push(c.resolve(a)) }), c.all(h).then(function (b) { var c = {}, d = 0; return angular.forEach(a, function (a, e) { c[e] = b[d++] }), c }) } } }] }).directive("uibModalBackdrop", ["$animateCss", "$injector", "$uibModalStack", function (a, b, c) { function d(b, d, e) { e.modalInClass && (a(d, { addClass: e.modalInClass }).start(), b.$on(c.NOW_CLOSING_EVENT, function (c, f) { var g = f(); b.modalOptions.animation ? a(d, { removeClass: e.modalInClass }).start().then(g) : g() })) } return { replace: !0, templateUrl: "uib/template/modal/backdrop.html", compile: function (a, b) { return a.addClass(b.backdropClass), d } } }]).directive("uibModalWindow", ["$uibModalStack", "$q", "$animate", "$animateCss", "$document", function (a, b, c, d, e) { return { scope: { index: "@" }, replace: !0, transclude: !0, templateUrl: function (a, b) { return b.templateUrl || "uib/template/modal/window.html" }, link: function (f, g, h) { g.addClass(h.windowClass || ""), g.addClass(h.windowTopClass || ""), f.size = h.size, f.close = function (b) { var c = a.getTop(); c && c.value.backdrop && "static" !== c.value.backdrop && b.target === b.currentTarget && (b.preventDefault(), b.stopPropagation(), a.dismiss(c.key, "backdrop click")) }, g.on("click", f.close), f.$isRendered = !0; var i = b.defer(); h.$observe("modalRender", function (a) { "true" === a && i.resolve() }), i.promise.then(function () { var i = null; h.modalInClass && (i = d(g, { addClass: h.modalInClass }).start(), f.$on(a.NOW_CLOSING_EVENT, function (a, b) { var e = b(); d ? d(g, { removeClass: h.modalInClass }).start().then(e) : c.removeClass(g, h.modalInClass).then(e) })), b.when(i).then(function () { if (!e[0].activeElement || !g[0].contains(e[0].activeElement)) { var a = g[0].querySelector("[autofocus]"); a ? a.focus() : g[0].focus() } }); var j = a.getTop(); j && a.modalRendered(j.key) }) } } }]).directive("uibModalAnimationClass", function () { return { compile: function (a, b) { b.modalAnimation && a.addClass(b.uibModalAnimationClass) } } }).directive("uibModalTransclude", function () { return { link: function (a, b, c, d, e) { e(a.$parent, function (a) { b.empty(), b.append(a) }) } } }).factory("$uibModalStack", ["$animate", "$animateCss", "$document", "$compile", "$rootScope", "$q", "$$multiMap", "$$stackedMap", function (a, b, c, d, e, f, g, h) { function i() { for (var a = -1, b = t.keys(), c = 0; c < b.length; c++) t.get(b[c]).value.backdrop && (a = c); return a } function j(a, b) { var c = t.get(a).value, d = c.appendTo; t.remove(a), m(c.modalDomEl, c.modalScope, function () { var b = c.openedClass || s; u.remove(b, a), d.toggleClass(b, u.hasKey(b)), k(!0) }, c.closedDeferred), l(), b && b.focus ? b.focus() : d.focus && d.focus() } function k(a) { var b; t.length() > 0 && (b = t.top().value, b.modalDomEl.toggleClass(b.windowTopClass || "", a)) } function l() { if (p && -1 === i()) { var a = q; m(p, q, function () { a = null }), p = void 0, q = void 0 } } function m(a, c, d, e) { function g() { g.done || (g.done = !0, b(a, { event: "leave" }).start().then(function () { a.remove(), e && e.resolve() }), c.$destroy(), d && d()) } var h, i = null, j = function () { return h || (h = f.defer(), i = h.promise), function () { h.resolve() } }; return c.$broadcast(v.NOW_CLOSING_EVENT, j), f.when(i).then(g) } function n(a) { if (a.isDefaultPrevented()) return a; var b = t.top(); if (b) switch (a.which) { case 27: b.value.keyboard && (a.preventDefault(), e.$apply(function () { v.dismiss(b.key, "escape key press") })); break; case 9: v.loadFocusElementList(b); var c = !1; a.shiftKey ? (v.isFocusInFirstItem(a) || v.isModalFocused(a, b)) && (c = v.focusLastFocusableElement()) : v.isFocusInLastItem(a) && (c = v.focusFirstFocusableElement()), c && (a.preventDefault(), a.stopPropagation()) } } function o(a, b, c) { return !a.value.modalScope.$broadcast("modal.closing", b, c).defaultPrevented } var p, q, r, s = "modal-open", t = h.createNew(), u = g.createNew(), v = { NOW_CLOSING_EVENT: "modal.stack.now-closing" }, w = 0, x = "a[href], area[href], input:not([disabled]), button:not([disabled]),select:not([disabled]), textarea:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable=true]"; return e.$watch(i, function (a) { q && (q.index = a) }), c.on("keydown", n), e.$on("$destroy", function () { c.off("keydown", n) }), v.open = function (b, f) { var g = c[0].activeElement, h = f.openedClass || s; k(!1), t.add(b, { deferred: f.deferred, renderDeferred: f.renderDeferred, closedDeferred: f.closedDeferred, modalScope: f.scope, backdrop: f.backdrop, keyboard: f.keyboard, openedClass: f.openedClass, windowTopClass: f.windowTopClass, animation: f.animation, appendTo: f.appendTo }), u.put(h, b); var j = f.appendTo, l = i(); if (!j.length) throw new Error("appendTo element not found. Make sure that the element passed is in DOM."); l >= 0 && !p && (q = e.$new(!0), q.modalOptions = f, q.index = l, p = angular.element('<div uib-modal-backdrop="modal-backdrop"></div>'), p.attr("backdrop-class", f.backdropClass), f.animation && p.attr("modal-animation", "true"), d(p)(q), a.enter(p, j)); var m = angular.element('<div uib-modal-window="modal-window"></div>'); m.attr({ "template-url": f.windowTemplateUrl, "window-class": f.windowClass, "window-top-class": f.windowTopClass, size: f.size, index: t.length() - 1, animate: "animate" }).html(f.content), f.animation && m.attr("modal-animation", "true"), a.enter(d(m)(f.scope), j).then(function () { a.addClass(j, h) }), t.top().value.modalDomEl = m, t.top().value.modalOpener = g, v.clearFocusListCache() }, v.close = function (a, b) { var c = t.get(a); return c && o(c, b, !0) ? (c.value.modalScope.$$uibDestructionScheduled = !0, c.value.deferred.resolve(b), j(a, c.value.modalOpener), !0) : !c }, v.dismiss = function (a, b) { var c = t.get(a); return c && o(c, b, !1) ? (c.value.modalScope.$$uibDestructionScheduled = !0, c.value.deferred.reject(b), j(a, c.value.modalOpener), !0) : !c }, v.dismissAll = function (a) { for (var b = this.getTop() ; b && this.dismiss(b.key, a) ;) b = this.getTop() }, v.getTop = function () { return t.top() }, v.modalRendered = function (a) { var b = t.get(a); b && b.value.renderDeferred.resolve() }, v.focusFirstFocusableElement = function () { return r.length > 0 ? (r[0].focus(), !0) : !1 }, v.focusLastFocusableElement = function () { return r.length > 0 ? (r[r.length - 1].focus(), !0) : !1 }, v.isModalFocused = function (a, b) { if (a && b) { var c = b.value.modalDomEl; if (c && c.length) return (a.target || a.srcElement) === c[0] } return !1 }, v.isFocusInFirstItem = function (a) { return r.length > 0 ? (a.target || a.srcElement) === r[0] : !1 }, v.isFocusInLastItem = function (a) { return r.length > 0 ? (a.target || a.srcElement) === r[r.length - 1] : !1 }, v.clearFocusListCache = function () { r = [], w = 0 }, v.loadFocusElementList = function (a) { if ((void 0 === r || !r.length) && a) { var b = a.value.modalDomEl; b && b.length && (r = b[0].querySelectorAll(x)) } }, v }]).provider("$uibModal", function () { var a = { options: { animation: !0, backdrop: !0, keyboard: !0 }, $get: ["$rootScope", "$q", "$document", "$templateRequest", "$controller", "$uibResolve", "$uibModalStack", function (b, c, d, e, f, g, h) { function i(a) { return a.template ? c.when(a.template) : e(angular.isFunction(a.templateUrl) ? a.templateUrl() : a.templateUrl) } var j = {}, k = null; return j.getPromiseChain = function () { return k }, j.open = function (e) { function j() { return r } var l = c.defer(), m = c.defer(), n = c.defer(), o = c.defer(), p = { result: l.promise, opened: m.promise, closed: n.promise, rendered: o.promise, close: function (a) { return h.close(p, a) }, dismiss: function (a) { return h.dismiss(p, a) } }; if (e = angular.extend({}, a.options, e), e.resolve = e.resolve || {}, e.appendTo = e.appendTo || d.find("body").eq(0), !e.template && !e.templateUrl) throw new Error("One of template or templateUrl options is required."); var q, r = c.all([i(e), g.resolve(e.resolve, {}, null, null)]); return q = k = c.all([k]).then(j, j).then(function (a) { var c = e.scope || b, d = c.$new(); d.$close = p.close, d.$dismiss = p.dismiss, d.$on("$destroy", function () { d.$$uibDestructionScheduled || d.$dismiss("$uibUnscheduledDestruction") }); var g, i = {}; e.controller && (i.$scope = d, i.$uibModalInstance = p, angular.forEach(a[1], function (a, b) { i[b] = a }), g = f(e.controller, i), e.controllerAs && (e.bindToController && (g.$close = d.$close, g.$dismiss = d.$dismiss, angular.extend(g, c)), d[e.controllerAs] = g)), h.open(p, { scope: d, deferred: l, renderDeferred: o, closedDeferred: n, content: a[0], animation: e.animation, backdrop: e.backdrop, keyboard: e.keyboard, backdropClass: e.backdropClass, windowTopClass: e.windowTopClass, windowClass: e.windowClass, windowTemplateUrl: e.windowTemplateUrl, size: e.size, openedClass: e.openedClass, appendTo: e.appendTo }), m.resolve(!0) }, function (a) { m.reject(a), l.reject(a) })["finally"](function () { k === q && (k = null) }), p }, j }] }; return a }), angular.module("ui.bootstrap.paging", []).factory("uibPaging", ["$parse", function (a) { return { create: function (b, c, d) { b.setNumPages = d.numPages ? a(d.numPages).assign : angular.noop, b.ngModelCtrl = { $setViewValue: angular.noop }, b._watchers = [], b.init = function (e, f) { b.ngModelCtrl = e, b.config = f, e.$render = function () { b.render() }, d.itemsPerPage ? b._watchers.push(c.$parent.$watch(a(d.itemsPerPage), function (a) { b.itemsPerPage = parseInt(a, 10), c.totalPages = b.calculateTotalPages(), b.updatePage() })) : b.itemsPerPage = f.itemsPerPage, c.$watch("totalItems", function (a, d) { (angular.isDefined(a) || a !== d) && (c.totalPages = b.calculateTotalPages(), b.updatePage()) }) }, b.calculateTotalPages = function () { var a = b.itemsPerPage < 1 ? 1 : Math.ceil(c.totalItems / b.itemsPerPage); return Math.max(a || 0, 1) }, b.render = function () { c.page = parseInt(b.ngModelCtrl.$viewValue, 10) || 1 }, c.selectPage = function (a, d) { d && d.preventDefault(); var e = !c.ngDisabled || !d; e && c.page !== a && a > 0 && a <= c.totalPages && (d && d.target && d.target.blur(), b.ngModelCtrl.$setViewValue(a), b.ngModelCtrl.$render()) }, c.getText = function (a) { return c[a + "Text"] || b.config[a + "Text"] }, c.noPrevious = function () { return 1 === c.page }, c.noNext = function () { return c.page === c.totalPages }, b.updatePage = function () { b.setNumPages(c.$parent, c.totalPages), c.page > c.totalPages ? c.selectPage(c.totalPages) : b.ngModelCtrl.$render() }, c.$on("$destroy", function () { for (; b._watchers.length;) b._watchers.shift()() }) } } }]), angular.module("ui.bootstrap.pager", ["ui.bootstrap.paging"]).controller("UibPagerController", ["$scope", "$attrs", "uibPaging", "uibPagerConfig", function (a, b, c, d) { a.align = angular.isDefined(b.align) ? a.$parent.$eval(b.align) : d.align, c.create(this, a, b) }]).constant("uibPagerConfig", { itemsPerPage: 10, previousText: "« Previous", nextText: "Next »", align: !0 }).directive("uibPager", ["uibPagerConfig", function (a) { return { scope: { totalItems: "=", previousText: "@", nextText: "@", ngDisabled: "=" }, require: ["uibPager", "?ngModel"], controller: "UibPagerController", controllerAs: "pager", templateUrl: function (a, b) { return b.templateUrl || "uib/template/pager/pager.html" }, replace: !0, link: function (b, c, d, e) { var f = e[0], g = e[1]; g && f.init(g, a) } } }]), angular.module("ui.bootstrap.pagination", ["ui.bootstrap.paging"]).controller("UibPaginationController", ["$scope", "$attrs", "$parse", "uibPaging", "uibPaginationConfig", function (a, b, c, d, e) { function f(a, b, c) { return { number: a, text: b, active: c } } function g(a, b) { var c = [], d = 1, e = b, g = angular.isDefined(i) && b > i; g && (j ? (d = Math.max(a - Math.floor(i / 2), 1), e = d + i - 1, e > b && (e = b, d = e - i + 1)) : (d = (Math.ceil(a / i) - 1) * i + 1, e = Math.min(d + i - 1, b))); for (var h = d; e >= h; h++) { var m = f(h, h, h === a); c.push(m) } if (g && i > 0 && (!j || k || l)) { if (d > 1) { if (!l || d > 3) { var n = f(d - 1, "...", !1); c.unshift(n) } if (l) { if (3 === d) { var o = f(2, "2", !1); c.unshift(o) } var p = f(1, "1", !1); c.unshift(p) } } if (b > e) { if (!l || b - 2 > e) { var q = f(e + 1, "...", !1); c.push(q) } if (l) { if (e === b - 2) { var r = f(b - 1, b - 1, !1); c.push(r) } var s = f(b, b, !1); c.push(s) } } } return c } var h = this, i = angular.isDefined(b.maxSize) ? a.$parent.$eval(b.maxSize) : e.maxSize, j = angular.isDefined(b.rotate) ? a.$parent.$eval(b.rotate) : e.rotate, k = angular.isDefined(b.forceEllipses) ? a.$parent.$eval(b.forceEllipses) : e.forceEllipses, l = angular.isDefined(b.boundaryLinkNumbers) ? a.$parent.$eval(b.boundaryLinkNumbers) : e.boundaryLinkNumbers; a.boundaryLinks = angular.isDefined(b.boundaryLinks) ? a.$parent.$eval(b.boundaryLinks) : e.boundaryLinks, a.directionLinks = angular.isDefined(b.directionLinks) ? a.$parent.$eval(b.directionLinks) : e.directionLinks, d.create(this, a, b), b.maxSize && h._watchers.push(a.$parent.$watch(c(b.maxSize), function (a) { i = parseInt(a, 10), h.render() })); var m = this.render; this.render = function () { m(), a.page > 0 && a.page <= a.totalPages && (a.pages = g(a.page, a.totalPages)) } }]).constant("uibPaginationConfig", { itemsPerPage: 10, boundaryLinks: !1, boundaryLinkNumbers: !1, directionLinks: !0, firstText: "First", previousText: "Previous", nextText: "Next", lastText: "Last", rotate: !0, forceEllipses: !1 }).directive("uibPagination", ["$parse", "uibPaginationConfig", function (a, b) { return { scope: { totalItems: "=", firstText: "@", previousText: "@", nextText: "@", lastText: "@", ngDisabled: "=" }, require: ["uibPagination", "?ngModel"], controller: "UibPaginationController", controllerAs: "pagination", templateUrl: function (a, b) { return b.templateUrl || "uib/template/pagination/pagination.html" }, replace: !0, link: function (a, c, d, e) { var f = e[0], g = e[1]; g && f.init(g, b) } } }]), angular.module("ui.bootstrap.tooltip", ["ui.bootstrap.position", "ui.bootstrap.stackedMap"]).provider("$uibTooltip", function () {
     function a(a) { var b = /[A-Z]/g, c = "-"; return a.replace(b, function (a, b) { return (b ? c : "") + a.toLowerCase() }) } var b = { placement: "top", placementClassPrefix: "", animation: !0, popupDelay: 0, popupCloseDelay: 0, useContentExp: !1 }, c = { mouseenter: "mouseleave", click: "click", outsideClick: "outsideClick", focus: "blur", none: "" }, d = {}; this.options = function (a) { angular.extend(d, a) }, this.setTriggers = function (a) { angular.extend(c, a) }, this.$get = ["$window", "$compile", "$timeout", "$document", "$uibPosition", "$interpolate", "$rootScope", "$parse", "$$stackedMap", function (e, f, g, h, i, j, k, l, m) {
         function n(a) { if (27 === a.which) { var b = o.top(); b && (b.value.close(), o.removeTop(), b = null) } } var o = m.createNew(); return h.on("keypress", n), k.$on("$destroy", function () { h.off("keypress", n) }), function (e, k, m, n) {
             function p(a) { var b = (a || n.trigger || m).split(" "), d = b.map(function (a) { return c[a] || a }); return { show: b, hide: d } } n = angular.extend({}, b, d, n); var q = a(e), r = j.startSymbol(), s = j.endSymbol(), t = "<div " + q + '-popup title="' + r + "title" + s + '" ' + (n.useContentExp ? 'content-exp="contentExp()" ' : 'content="' + r + "content" + s + '" ') + 'placement="' + r + "placement" + s + '" popup-class="' + r + "popupClass" + s + '" animation="animation" is-open="isOpen"origin-scope="origScope" style="visibility: hidden; display: block; top: -9999px; left: -9999px;"></div>'; return {
                 compile: function (a, b) {
                     var c = f(t); return function (a, b, d, f) {
                         function j() { M.isOpen ? q() : m() } function m() { (!L || a.$eval(d[k + "Enable"])) && (u(), x(), M.popupDelay ? G || (G = g(r, M.popupDelay, !1)) : r()) } function q() { s(), M.popupCloseDelay ? H || (H = g(t, M.popupCloseDelay, !1)) : t() } function r() { return s(), u(), M.content ? (v(), void M.$evalAsync(function () { M.isOpen = !0, y(!0), R() })) : angular.noop } function s() { G && (g.cancel(G), G = null), I && (g.cancel(I), I = null) } function t() { M && M.$evalAsync(function () { M && (M.isOpen = !1, y(!1), M.animation ? F || (F = g(w, 150, !1)) : w()) }) } function u() { H && (g.cancel(H), H = null), F && (g.cancel(F), F = null) } function v() {
                             D || (E = M.$new(), D = c(E, function (a) {
                                 J ? h.find("body").append(a) : b.after(a);
                             }), z())
                         } function w() { s(), u(), A(), D && (D.remove(), D = null), E && (E.$destroy(), E = null) } function x() { M.title = d[k + "Title"], P ? M.content = P(a) : M.content = d[e], M.popupClass = d[k + "Class"], M.placement = angular.isDefined(d[k + "Placement"]) ? d[k + "Placement"] : n.placement; var b = parseInt(d[k + "PopupDelay"], 10), c = parseInt(d[k + "PopupCloseDelay"], 10); M.popupDelay = isNaN(b) ? n.popupDelay : b, M.popupCloseDelay = isNaN(c) ? n.popupCloseDelay : c } function y(b) { O && angular.isFunction(O.assign) && O.assign(a, b) } function z() { Q.length = 0, P ? (Q.push(a.$watch(P, function (a) { M.content = a, !a && M.isOpen && t() })), Q.push(E.$watch(function () { N || (N = !0, E.$$postDigest(function () { N = !1, M && M.isOpen && R() })) }))) : Q.push(d.$observe(e, function (a) { M.content = a, !a && M.isOpen ? t() : R() })), Q.push(d.$observe(k + "Title", function (a) { M.title = a, M.isOpen && R() })), Q.push(d.$observe(k + "Placement", function (a) { M.placement = a ? a : n.placement, M.isOpen && R() })) } function A() { Q.length && (angular.forEach(Q, function (a) { a() }), Q.length = 0) } function B(a) { M && M.isOpen && D && (b[0].contains(a.target) || D[0].contains(a.target) || q()) } function C() { var a = d[k + "Trigger"]; S(), K = p(a), "none" !== K.show && K.show.forEach(function (a, c) { "outsideClick" === a ? (b.on("click", j), h.on("click", B)) : a === K.hide[c] ? b.on(a, j) : a && (b.on(a, m), b.on(K.hide[c], q)), b.on("keypress", function (a) { 27 === a.which && q() }) }) } var D, E, F, G, H, I, J = angular.isDefined(n.appendToBody) ? n.appendToBody : !1, K = p(void 0), L = angular.isDefined(d[k + "Enable"]), M = a.$new(!0), N = !1, O = angular.isDefined(d[k + "IsOpen"]) ? l(d[k + "IsOpen"]) : !1, P = n.useContentExp ? l(d[e]) : !1, Q = [], R = function () { D && D.html() && (I || (I = g(function () { D.css({ top: 0, left: 0 }); var a = i.positionElements(b, D, M.placement, J); D.css({ top: a.top + "px", left: a.left + "px", visibility: "visible" }), n.placementClassPrefix && D.removeClass("top bottom left right"), D.removeClass(n.placementClassPrefix + "top " + n.placementClassPrefix + "top-left " + n.placementClassPrefix + "top-right " + n.placementClassPrefix + "bottom " + n.placementClassPrefix + "bottom-left " + n.placementClassPrefix + "bottom-right " + n.placementClassPrefix + "left " + n.placementClassPrefix + "left-top " + n.placementClassPrefix + "left-bottom " + n.placementClassPrefix + "right " + n.placementClassPrefix + "right-top " + n.placementClassPrefix + "right-bottom"); var c = a.placement.split("-"); D.addClass(c[0] + " " + n.placementClassPrefix + a.placement), i.positionArrow(D, a.placement), I = null }, 0, !1))) }; M.origScope = a, M.isOpen = !1, o.add(M, { close: t }), M.contentExp = function () { return M.content }, d.$observe("disabled", function (a) { a && s(), a && M.isOpen && t() }), O && a.$watch(O, function (a) { M && !a === M.isOpen && j() }); var S = function () { K.show.forEach(function (a) { "outsideClick" === a ? b.off("click", j) : (b.off(a, m), b.off(a, j)) }), K.hide.forEach(function (a) { "outsideClick" === a ? h.off("click", B) : b.off(a, q) }) }; C(); var T = a.$eval(d[k + "Animation"]); M.animation = angular.isDefined(T) ? !!T : n.animation; var U, V = k + "AppendToBody"; U = V in d && void 0 === d[V] ? !0 : a.$eval(d[V]), J = angular.isDefined(U) ? U : J, a.$on("$destroy", function () { S(), w(), o.remove(M), M = null })
                     }
                 }
             }
         }
     }]
 }).directive("uibTooltipTemplateTransclude", ["$animate", "$sce", "$compile", "$templateRequest", function (a, b, c, d) { return { link: function (e, f, g) { var h, i, j, k = e.$eval(g.tooltipTemplateTranscludeScope), l = 0, m = function () { i && (i.remove(), i = null), h && (h.$destroy(), h = null), j && (a.leave(j).then(function () { i = null }), i = j, j = null) }; e.$watch(b.parseAsResourceUrl(g.uibTooltipTemplateTransclude), function (b) { var g = ++l; b ? (d(b, !0).then(function (d) { if (g === l) { var e = k.$new(), i = d, n = c(i)(e, function (b) { m(), a.enter(b, f) }); h = e, j = n, h.$emit("$includeContentLoaded", b) } }, function () { g === l && (m(), e.$emit("$includeContentError", b)) }), e.$emit("$includeContentRequested", b)) : m() }), e.$on("$destroy", m) } } }]).directive("uibTooltipClasses", ["$uibPosition", function (a) { return { restrict: "A", link: function (b, c, d) { if (b.placement) { var e = a.parsePlacement(b.placement); c.addClass(e[0]) } else c.addClass("top"); b.popupClass && c.addClass(b.popupClass), b.animation() && c.addClass(d.tooltipAnimationClass) } } }]).directive("uibTooltipPopup", function () { return { replace: !0, scope: { content: "@", placement: "@", popupClass: "@", animation: "&", isOpen: "&" }, templateUrl: "uib/template/tooltip/tooltip-popup.html" } }).directive("uibTooltip", ["$uibTooltip", function (a) { return a("uibTooltip", "tooltip", "mouseenter") }]).directive("uibTooltipTemplatePopup", function () { return { replace: !0, scope: { contentExp: "&", placement: "@", popupClass: "@", animation: "&", isOpen: "&", originScope: "&" }, templateUrl: "uib/template/tooltip/tooltip-template-popup.html" } }).directive("uibTooltipTemplate", ["$uibTooltip", function (a) { return a("uibTooltipTemplate", "tooltip", "mouseenter", { useContentExp: !0 }) }]).directive("uibTooltipHtmlPopup", function () { return { replace: !0, scope: { contentExp: "&", placement: "@", popupClass: "@", animation: "&", isOpen: "&" }, templateUrl: "uib/template/tooltip/tooltip-html-popup.html" } }).directive("uibTooltipHtml", ["$uibTooltip", function (a) { return a("uibTooltipHtml", "tooltip", "mouseenter", { useContentExp: !0 }) }]), angular.module("ui.bootstrap.popover", ["ui.bootstrap.tooltip"]).directive("uibPopoverTemplatePopup", function () { return { replace: !0, scope: { title: "@", contentExp: "&", placement: "@", popupClass: "@", animation: "&", isOpen: "&", originScope: "&" }, templateUrl: "uib/template/popover/popover-template.html" } }).directive("uibPopoverTemplate", ["$uibTooltip", function (a) { return a("uibPopoverTemplate", "popover", "click", { useContentExp: !0 }) }]).directive("uibPopoverHtmlPopup", function () { return { replace: !0, scope: { contentExp: "&", title: "@", placement: "@", popupClass: "@", animation: "&", isOpen: "&" }, templateUrl: "uib/template/popover/popover-html.html" } }).directive("uibPopoverHtml", ["$uibTooltip", function (a) { return a("uibPopoverHtml", "popover", "click", { useContentExp: !0 }) }]).directive("uibPopoverPopup", function () { return { replace: !0, scope: { title: "@", content: "@", placement: "@", popupClass: "@", animation: "&", isOpen: "&" }, templateUrl: "uib/template/popover/popover.html" } }).directive("uibPopover", ["$uibTooltip", function (a) { return a("uibPopover", "popover", "click") }]), angular.module("ui.bootstrap.progressbar", []).constant("uibProgressConfig", { animate: !0, max: 100 }).controller("UibProgressController", ["$scope", "$attrs", "uibProgressConfig", function (a, b, c) { var d = this, e = angular.isDefined(b.animate) ? a.$parent.$eval(b.animate) : c.animate; this.bars = [], a.max = angular.isDefined(a.max) ? a.max : c.max, this.addBar = function (b, c, f) { e || c.css({ transition: "none" }), this.bars.push(b), b.max = a.max, b.title = f && angular.isDefined(f.title) ? f.title : "progressbar", b.$watch("value", function (a) { b.recalculatePercentage() }), b.recalculatePercentage = function () { var a = d.bars.reduce(function (a, b) { return b.percent = +(100 * b.value / b.max).toFixed(2), a + b.percent }, 0); a > 100 && (b.percent -= a - 100) }, b.$on("$destroy", function () { c = null, d.removeBar(b) }) }, this.removeBar = function (a) { this.bars.splice(this.bars.indexOf(a), 1), this.bars.forEach(function (a) { a.recalculatePercentage() }) }, a.$watch("max", function (b) { d.bars.forEach(function (b) { b.max = a.max, b.recalculatePercentage() }) }) }]).directive("uibProgress", function () { return { replace: !0, transclude: !0, controller: "UibProgressController", require: "uibProgress", scope: { max: "=?" }, templateUrl: "uib/template/progressbar/progress.html" } }).directive("uibBar", function () { return { replace: !0, transclude: !0, require: "^uibProgress", scope: { value: "=", type: "@" }, templateUrl: "uib/template/progressbar/bar.html", link: function (a, b, c, d) { d.addBar(a, b, c) } } }).directive("uibProgressbar", function () { return { replace: !0, transclude: !0, controller: "UibProgressController", scope: { value: "=", max: "=?", type: "@" }, templateUrl: "uib/template/progressbar/progressbar.html", link: function (a, b, c, d) { d.addBar(a, angular.element(b.children()[0]), { title: c.title }) } } }), angular.module("ui.bootstrap.rating", []).constant("uibRatingConfig", { max: 5, stateOn: null, stateOff: null, titles: ["one", "two", "three", "four", "five"] }).controller("UibRatingController", ["$scope", "$attrs", "uibRatingConfig", function (a, b, c) { var d = { $setViewValue: angular.noop }; this.init = function (e) { d = e, d.$render = this.render, d.$formatters.push(function (a) { return angular.isNumber(a) && a << 0 !== a && (a = Math.round(a)), a }), this.stateOn = angular.isDefined(b.stateOn) ? a.$parent.$eval(b.stateOn) : c.stateOn, this.stateOff = angular.isDefined(b.stateOff) ? a.$parent.$eval(b.stateOff) : c.stateOff; var f = angular.isDefined(b.titles) ? a.$parent.$eval(b.titles) : c.titles; this.titles = angular.isArray(f) && f.length > 0 ? f : c.titles; var g = angular.isDefined(b.ratingStates) ? a.$parent.$eval(b.ratingStates) : new Array(angular.isDefined(b.max) ? a.$parent.$eval(b.max) : c.max); a.range = this.buildTemplateObjects(g) }, this.buildTemplateObjects = function (a) { for (var b = 0, c = a.length; c > b; b++) a[b] = angular.extend({ index: b }, { stateOn: this.stateOn, stateOff: this.stateOff, title: this.getTitle(b) }, a[b]); return a }, this.getTitle = function (a) { return a >= this.titles.length ? a + 1 : this.titles[a] }, a.rate = function (b) { !a.readonly && b >= 0 && b <= a.range.length && (d.$setViewValue(d.$viewValue === b ? 0 : b), d.$render()) }, a.enter = function (b) { a.readonly || (a.value = b), a.onHover({ value: b }) }, a.reset = function () { a.value = d.$viewValue, a.onLeave() }, a.onKeydown = function (b) { /(37|38|39|40)/.test(b.which) && (b.preventDefault(), b.stopPropagation(), a.rate(a.value + (38 === b.which || 39 === b.which ? 1 : -1))) }, this.render = function () { a.value = d.$viewValue } }]).directive("uibRating", function () { return { require: ["uibRating", "ngModel"], scope: { readonly: "=?", onHover: "&", onLeave: "&" }, controller: "UibRatingController", templateUrl: "uib/template/rating/rating.html", replace: !0, link: function (a, b, c, d) { var e = d[0], f = d[1]; e.init(f) } } }), angular.module("ui.bootstrap.tabs", []).controller("UibTabsetController", ["$scope", function (a) { var b = this, c = b.tabs = a.tabs = []; b.select = function (a) { angular.forEach(c, function (b) { b.active && b !== a && (b.active = !1, b.onDeselect(), a.selectCalled = !1) }), a.active = !0, a.selectCalled || (a.onSelect(), a.selectCalled = !0) }, b.addTab = function (a) { c.push(a), 1 === c.length && a.active !== !1 ? a.active = !0 : a.active ? b.select(a) : a.active = !1 }, b.removeTab = function (a) { var e = c.indexOf(a); if (a.active && c.length > 1 && !d) { var f = e === c.length - 1 ? e - 1 : e + 1; b.select(c[f]) } c.splice(e, 1) }; var d; a.$on("$destroy", function () { d = !0 }) }]).directive("uibTabset", function () { return { transclude: !0, replace: !0, scope: { type: "@" }, controller: "UibTabsetController", templateUrl: "uib/template/tabs/tabset.html", link: function (a, b, c) { a.vertical = angular.isDefined(c.vertical) ? a.$parent.$eval(c.vertical) : !1, a.justified = angular.isDefined(c.justified) ? a.$parent.$eval(c.justified) : !1 } } }).directive("uibTab", ["$parse", function (a) { return { require: "^uibTabset", replace: !0, templateUrl: "uib/template/tabs/tab.html", transclude: !0, scope: { active: "=?", heading: "@", onSelect: "&select", onDeselect: "&deselect" }, controller: function () { }, controllerAs: "tab", link: function (b, c, d, e, f) { b.$watch("active", function (a) { a && e.select(b) }), b.disabled = !1, d.disable && b.$parent.$watch(a(d.disable), function (a) { b.disabled = !!a }), b.select = function () { b.disabled || (b.active = !0) }, e.addTab(b), b.$on("$destroy", function () { e.removeTab(b) }), b.$transcludeFn = f } } }]).directive("uibTabHeadingTransclude", function () { return { restrict: "A", require: "^uibTab", link: function (a, b) { a.$watch("headingElement", function (a) { a && (b.html(""), b.append(a)) }) } } }).directive("uibTabContentTransclude", function () { function a(a) { return a.tagName && (a.hasAttribute("uib-tab-heading") || a.hasAttribute("data-uib-tab-heading") || a.hasAttribute("x-uib-tab-heading") || "uib-tab-heading" === a.tagName.toLowerCase() || "data-uib-tab-heading" === a.tagName.toLowerCase() || "x-uib-tab-heading" === a.tagName.toLowerCase()) } return { restrict: "A", require: "^uibTabset", link: function (b, c, d) { var e = b.$eval(d.uibTabContentTransclude); e.$transcludeFn(e.$parent, function (b) { angular.forEach(b, function (b) { a(b) ? e.headingElement = b : c.append(b) }) }) } } }), angular.module("ui.bootstrap.timepicker", []).constant("uibTimepickerConfig", { hourStep: 1, minuteStep: 1, secondStep: 1, showMeridian: !0, showSeconds: !1, meridians: null, readonlyInput: !1, mousewheel: !0, arrowkeys: !0, showSpinners: !0, templateUrl: "uib/template/timepicker/timepicker.html" }).controller("UibTimepickerController", ["$scope", "$element", "$attrs", "$parse", "$log", "$locale", "uibTimepickerConfig", function (a, b, c, d, e, f, g) { function h() { var b = +a.hours, c = a.showMeridian ? b > 0 && 13 > b : b >= 0 && 24 > b; return c ? (a.showMeridian && (12 === b && (b = 0), a.meridian === u[1] && (b += 12)), b) : void 0 } function i() { var b = +a.minutes; return b >= 0 && 60 > b ? b : void 0 } function j() { var b = +a.seconds; return b >= 0 && 60 > b ? b : void 0 } function k(a) { return null === a ? "" : angular.isDefined(a) && a.toString().length < 2 ? "0" + a : a.toString() } function l(a) { m(), t.$setViewValue(new Date(r)), n(a) } function m() { t.$setValidity("time", !0), a.invalidHours = !1, a.invalidMinutes = !1, a.invalidSeconds = !1 } function n(b) { if (t.$modelValue) { var c = r.getHours(), d = r.getMinutes(), e = r.getSeconds(); a.showMeridian && (c = 0 === c || 12 === c ? 12 : c % 12), a.hours = "h" === b ? c : k(c), "m" !== b && (a.minutes = k(d)), a.meridian = r.getHours() < 12 ? u[0] : u[1], "s" !== b && (a.seconds = k(e)), a.meridian = r.getHours() < 12 ? u[0] : u[1] } else a.hours = null, a.minutes = null, a.seconds = null, a.meridian = u[0] } function o(a) { r = q(r, a), l() } function p(a, b) { return q(a, 60 * b) } function q(a, b) { var c = new Date(a.getTime() + 1e3 * b), d = new Date(a); return d.setHours(c.getHours(), c.getMinutes(), c.getSeconds()), d } var r = new Date, s = [], t = { $setViewValue: angular.noop }, u = angular.isDefined(c.meridians) ? a.$parent.$eval(c.meridians) : g.meridians || f.DATETIME_FORMATS.AMPMS; a.tabindex = angular.isDefined(c.tabindex) ? c.tabindex : 0, b.removeAttr("tabindex"), this.init = function (b, d) { t = b, t.$render = this.render, t.$formatters.unshift(function (a) { return a ? new Date(a) : null }); var e = d.eq(0), f = d.eq(1), h = d.eq(2), i = angular.isDefined(c.mousewheel) ? a.$parent.$eval(c.mousewheel) : g.mousewheel; i && this.setupMousewheelEvents(e, f, h); var j = angular.isDefined(c.arrowkeys) ? a.$parent.$eval(c.arrowkeys) : g.arrowkeys; j && this.setupArrowkeyEvents(e, f, h), a.readonlyInput = angular.isDefined(c.readonlyInput) ? a.$parent.$eval(c.readonlyInput) : g.readonlyInput, this.setupInputEvents(e, f, h) }; var v = g.hourStep; c.hourStep && s.push(a.$parent.$watch(d(c.hourStep), function (a) { v = +a })); var w = g.minuteStep; c.minuteStep && s.push(a.$parent.$watch(d(c.minuteStep), function (a) { w = +a })); var x; s.push(a.$parent.$watch(d(c.min), function (a) { var b = new Date(a); x = isNaN(b) ? void 0 : b })); var y; s.push(a.$parent.$watch(d(c.max), function (a) { var b = new Date(a); y = isNaN(b) ? void 0 : b })); var z = !1; c.ngDisabled && s.push(a.$parent.$watch(d(c.ngDisabled), function (a) { z = a })), a.noIncrementHours = function () { var a = p(r, 60 * v); return z || a > y || r > a && x > a }, a.noDecrementHours = function () { var a = p(r, 60 * -v); return z || x > a || a > r && a > y }, a.noIncrementMinutes = function () { var a = p(r, w); return z || a > y || r > a && x > a }, a.noDecrementMinutes = function () { var a = p(r, -w); return z || x > a || a > r && a > y }, a.noIncrementSeconds = function () { var a = q(r, A); return z || a > y || r > a && x > a }, a.noDecrementSeconds = function () { var a = q(r, -A); return z || x > a || a > r && a > y }, a.noToggleMeridian = function () { return r.getHours() < 12 ? z || p(r, 720) > y : z || p(r, -720) < x }; var A = g.secondStep; c.secondStep && s.push(a.$parent.$watch(d(c.secondStep), function (a) { A = +a })), a.showSeconds = g.showSeconds, c.showSeconds && s.push(a.$parent.$watch(d(c.showSeconds), function (b) { a.showSeconds = !!b })), a.showMeridian = g.showMeridian, c.showMeridian && s.push(a.$parent.$watch(d(c.showMeridian), function (b) { if (a.showMeridian = !!b, t.$error.time) { var c = h(), d = i(); angular.isDefined(c) && angular.isDefined(d) && (r.setHours(c), l()) } else n() })), this.setupMousewheelEvents = function (b, c, d) { var e = function (a) { a.originalEvent && (a = a.originalEvent); var b = a.wheelDelta ? a.wheelDelta : -a.deltaY; return a.detail || b > 0 }; b.bind("mousewheel wheel", function (b) { z || a.$apply(e(b) ? a.incrementHours() : a.decrementHours()), b.preventDefault() }), c.bind("mousewheel wheel", function (b) { z || a.$apply(e(b) ? a.incrementMinutes() : a.decrementMinutes()), b.preventDefault() }), d.bind("mousewheel wheel", function (b) { z || a.$apply(e(b) ? a.incrementSeconds() : a.decrementSeconds()), b.preventDefault() }) }, this.setupArrowkeyEvents = function (b, c, d) { b.bind("keydown", function (b) { z || (38 === b.which ? (b.preventDefault(), a.incrementHours(), a.$apply()) : 40 === b.which && (b.preventDefault(), a.decrementHours(), a.$apply())) }), c.bind("keydown", function (b) { z || (38 === b.which ? (b.preventDefault(), a.incrementMinutes(), a.$apply()) : 40 === b.which && (b.preventDefault(), a.decrementMinutes(), a.$apply())) }), d.bind("keydown", function (b) { z || (38 === b.which ? (b.preventDefault(), a.incrementSeconds(), a.$apply()) : 40 === b.which && (b.preventDefault(), a.decrementSeconds(), a.$apply())) }) }, this.setupInputEvents = function (b, c, d) { if (a.readonlyInput) return a.updateHours = angular.noop, a.updateMinutes = angular.noop, void (a.updateSeconds = angular.noop); var e = function (b, c, d) { t.$setViewValue(null), t.$setValidity("time", !1), angular.isDefined(b) && (a.invalidHours = b), angular.isDefined(c) && (a.invalidMinutes = c), angular.isDefined(d) && (a.invalidSeconds = d) }; a.updateHours = function () { var a = h(), b = i(); t.$setDirty(), angular.isDefined(a) && angular.isDefined(b) ? (r.setHours(a), r.setMinutes(b), x > r || r > y ? e(!0) : l("h")) : e(!0) }, b.bind("blur", function (b) { t.$setTouched(), null === a.hours || "" === a.hours ? e(!0) : !a.invalidHours && a.hours < 10 && a.$apply(function () { a.hours = k(a.hours) }) }), a.updateMinutes = function () { var a = i(), b = h(); t.$setDirty(), angular.isDefined(a) && angular.isDefined(b) ? (r.setHours(b), r.setMinutes(a), x > r || r > y ? e(void 0, !0) : l("m")) : e(void 0, !0) }, c.bind("blur", function (b) { t.$setTouched(), null === a.minutes ? e(void 0, !0) : !a.invalidMinutes && a.minutes < 10 && a.$apply(function () { a.minutes = k(a.minutes) }) }), a.updateSeconds = function () { var a = j(); t.$setDirty(), angular.isDefined(a) ? (r.setSeconds(a), l("s")) : e(void 0, void 0, !0) }, d.bind("blur", function (b) { !a.invalidSeconds && a.seconds < 10 && a.$apply(function () { a.seconds = k(a.seconds) }) }) }, this.render = function () { var b = t.$viewValue; isNaN(b) ? (t.$setValidity("time", !1), e.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')) : (b && (r = b), x > r || r > y ? (t.$setValidity("time", !1), a.invalidHours = !0, a.invalidMinutes = !0) : m(), n()) }, a.showSpinners = angular.isDefined(c.showSpinners) ? a.$parent.$eval(c.showSpinners) : g.showSpinners, a.incrementHours = function () { a.noIncrementHours() || o(60 * v * 60) }, a.decrementHours = function () { a.noDecrementHours() || o(60 * -v * 60) }, a.incrementMinutes = function () { a.noIncrementMinutes() || o(60 * w) }, a.decrementMinutes = function () { a.noDecrementMinutes() || o(60 * -w) }, a.incrementSeconds = function () { a.noIncrementSeconds() || o(A) }, a.decrementSeconds = function () { a.noDecrementSeconds() || o(-A) }, a.toggleMeridian = function () { var b = i(), c = h(); a.noToggleMeridian() || (angular.isDefined(b) && angular.isDefined(c) ? o(720 * (r.getHours() < 12 ? 60 : -60)) : a.meridian = a.meridian === u[0] ? u[1] : u[0]) }, a.blur = function () { t.$setTouched() }, a.$on("$destroy", function () { for (; s.length;) s.shift()() }) }]).directive("uibTimepicker", ["uibTimepickerConfig", function (a) { return { require: ["uibTimepicker", "?^ngModel"], controller: "UibTimepickerController", controllerAs: "timepicker", replace: !0, scope: {}, templateUrl: function (b, c) { return c.templateUrl || a.templateUrl }, link: function (a, b, c, d) { var e = d[0], f = d[1]; f && e.init(f, b.find("input")) } } }]), angular.module("ui.bootstrap.typeahead", ["ui.bootstrap.debounce", "ui.bootstrap.position"]).factory("uibTypeaheadParser", ["$parse", function (a) { var b = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/; return { parse: function (c) { var d = c.match(b); if (!d) throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "' + c + '".'); return { itemName: d[3], source: a(d[4]), viewMapper: a(d[2] || d[1]), modelMapper: a(d[1]) } } } }]).controller("UibTypeaheadController", ["$scope", "$element", "$attrs", "$compile", "$parse", "$q", "$timeout", "$document", "$window", "$rootScope", "$$debounce", "$uibPosition", "uibTypeaheadParser", function (a, b, c, d, e, f, g, h, i, j, k, l, m) { function n() { N.moveInProgress || (N.moveInProgress = !0, N.$digest()), Y() } function o() { N.position = D ? l.offset(b) : l.position(b), N.position.top += b.prop("offsetHeight") } var p, q, r = [9, 13, 27, 38, 40], s = 200, t = a.$eval(c.typeaheadMinLength); t || 0 === t || (t = 1); var u = a.$eval(c.typeaheadWaitMs) || 0, v = a.$eval(c.typeaheadEditable) !== !1; a.$watch(c.typeaheadEditable, function (a) { v = a !== !1 }); var w, x, y = e(c.typeaheadLoading).assign || angular.noop, z = e(c.typeaheadOnSelect), A = angular.isDefined(c.typeaheadSelectOnBlur) ? a.$eval(c.typeaheadSelectOnBlur) : !1, B = e(c.typeaheadNoResults).assign || angular.noop, C = c.typeaheadInputFormatter ? e(c.typeaheadInputFormatter) : void 0, D = c.typeaheadAppendToBody ? a.$eval(c.typeaheadAppendToBody) : !1, E = c.typeaheadAppendTo ? a.$eval(c.typeaheadAppendTo) : null, F = a.$eval(c.typeaheadFocusFirst) !== !1, G = c.typeaheadSelectOnExact ? a.$eval(c.typeaheadSelectOnExact) : !1, H = e(c.typeaheadIsOpen).assign || angular.noop, I = a.$eval(c.typeaheadShowHint) || !1, J = e(c.ngModel), K = e(c.ngModel + "($$$p)"), L = function (b, c) { return angular.isFunction(J(a)) && q && q.$options && q.$options.getterSetter ? K(b, { $$$p: c }) : J.assign(b, c) }, M = m.parse(c.uibTypeahead), N = a.$new(), O = a.$on("$destroy", function () { N.$destroy() }); N.$on("$destroy", O); var P = "typeahead-" + N.$id + "-" + Math.floor(1e4 * Math.random()); b.attr({ "aria-autocomplete": "list", "aria-expanded": !1, "aria-owns": P }); var Q, R; I && (Q = angular.element("<div></div>"), Q.css("position", "relative"), b.after(Q), R = b.clone(), R.attr("placeholder", ""), R.val(""), R.css({ position: "absolute", top: "0px", left: "0px", "border-color": "transparent", "box-shadow": "none", opacity: 1, background: "none 0% 0% / auto repeat scroll padding-box border-box rgb(255, 255, 255)", color: "#999" }), b.css({ position: "relative", "vertical-align": "top", "background-color": "transparent" }), Q.append(R), R.after(b)); var S = angular.element("<div uib-typeahead-popup></div>"); S.attr({ id: P, matches: "matches", active: "activeIdx", select: "select(activeIdx, evt)", "move-in-progress": "moveInProgress", query: "query", position: "position", "assign-is-open": "assignIsOpen(isOpen)", debounce: "debounceUpdate" }), angular.isDefined(c.typeaheadTemplateUrl) && S.attr("template-url", c.typeaheadTemplateUrl), angular.isDefined(c.typeaheadPopupTemplateUrl) && S.attr("popup-template-url", c.typeaheadPopupTemplateUrl); var T = function () { I && R.val("") }, U = function () { N.matches = [], N.activeIdx = -1, b.attr("aria-expanded", !1), T() }, V = function (a) { return P + "-option-" + a }; N.$watch("activeIdx", function (a) { 0 > a ? b.removeAttr("aria-activedescendant") : b.attr("aria-activedescendant", V(a)) }); var W = function (a, b) { return N.matches.length > b && a ? a.toUpperCase() === N.matches[b].label.toUpperCase() : !1 }, X = function (c, d) { var e = { $viewValue: c }; y(a, !0), B(a, !1), f.when(M.source(a, e)).then(function (f) { var g = c === p.$viewValue; if (g && w) if (f && f.length > 0) { N.activeIdx = F ? 0 : -1, B(a, !1), N.matches.length = 0; for (var h = 0; h < f.length; h++) e[M.itemName] = f[h], N.matches.push({ id: V(h), label: M.viewMapper(N, e), model: f[h] }); if (N.query = c, o(), b.attr("aria-expanded", !0), G && 1 === N.matches.length && W(c, 0) && (angular.isNumber(N.debounceUpdate) || angular.isObject(N.debounceUpdate) ? k(function () { N.select(0, d) }, angular.isNumber(N.debounceUpdate) ? N.debounceUpdate : N.debounceUpdate["default"]) : N.select(0, d)), I) { var i = N.matches[0].label; angular.isString(c) && c.length > 0 && i.slice(0, c.length).toUpperCase() === c.toUpperCase() ? R.val(c + i.slice(c.length)) : R.val("") } } else U(), B(a, !0); g && y(a, !1) }, function () { U(), y(a, !1), B(a, !0) }) }; D && (angular.element(i).on("resize", n), h.find("body").on("scroll", n)); var Y = k(function () { N.matches.length && o(), N.moveInProgress = !1 }, s); N.moveInProgress = !1, N.query = void 0; var Z, $ = function (a) { Z = g(function () { X(a) }, u) }, _ = function () { Z && g.cancel(Z) }; U(), N.assignIsOpen = function (b) { H(a, b) }, N.select = function (d, e) { var f, h, i = {}; x = !0, i[M.itemName] = h = N.matches[d].model, f = M.modelMapper(a, i), L(a, f), p.$setValidity("editable", !0), p.$setValidity("parse", !0), z(a, { $item: h, $model: f, $label: M.viewMapper(a, i), $event: e }), U(), N.$eval(c.typeaheadFocusOnSelect) !== !1 && g(function () { b[0].focus() }, 0, !1) }, b.on("keydown", function (a) { if (0 !== N.matches.length && -1 !== r.indexOf(a.which)) { if (-1 === N.activeIdx && (9 === a.which || 13 === a.which)) return U(), void N.$digest(); a.preventDefault(); var b; switch (a.which) { case 9: case 13: N.$apply(function () { angular.isNumber(N.debounceUpdate) || angular.isObject(N.debounceUpdate) ? k(function () { N.select(N.activeIdx, a) }, angular.isNumber(N.debounceUpdate) ? N.debounceUpdate : N.debounceUpdate["default"]) : N.select(N.activeIdx, a) }); break; case 27: a.stopPropagation(), U(), N.$digest(); break; case 38: N.activeIdx = (N.activeIdx > 0 ? N.activeIdx : N.matches.length) - 1, N.$digest(), b = S.find("li")[N.activeIdx], b.parentNode.scrollTop = b.offsetTop; break; case 40: N.activeIdx = (N.activeIdx + 1) % N.matches.length, N.$digest(), b = S.find("li")[N.activeIdx], b.parentNode.scrollTop = b.offsetTop } } }), b.bind("focus", function (a) { w = !0, 0 !== t || p.$viewValue || g(function () { X(p.$viewValue, a) }, 0) }), b.bind("blur", function (a) { A && N.matches.length && -1 !== N.activeIdx && !x && (x = !0, N.$apply(function () { angular.isObject(N.debounceUpdate) && angular.isNumber(N.debounceUpdate.blur) ? k(function () { N.select(N.activeIdx, a) }, N.debounceUpdate.blur) : N.select(N.activeIdx, a) })), !v && p.$error.editable && (p.$viewValue = "", b.val("")), w = !1, x = !1 }); var aa = function (a) { b[0] !== a.target && 3 !== a.which && 0 !== N.matches.length && (U(), j.$$phase || N.$digest()) }; h.on("click", aa), a.$on("$destroy", function () { h.off("click", aa), (D || E) && ba.remove(), D && (angular.element(i).off("resize", n), h.find("body").off("scroll", n)), S.remove(), I && Q.remove() }); var ba = d(S)(N); D ? h.find("body").append(ba) : E ? angular.element(E).eq(0).append(ba) : b.after(ba), this.init = function (b, c) { p = b, q = c, N.debounceUpdate = p.$options && e(p.$options.debounce)(a), p.$parsers.unshift(function (b) { return w = !0, 0 === t || b && b.length >= t ? u > 0 ? (_(), $(b)) : X(b) : (y(a, !1), _(), U()), v ? b : b ? void p.$setValidity("editable", !1) : (p.$setValidity("editable", !0), null) }), p.$formatters.push(function (b) { var c, d, e = {}; return v || p.$setValidity("editable", !0), C ? (e.$model = b, C(a, e)) : (e[M.itemName] = b, c = M.viewMapper(a, e), e[M.itemName] = void 0, d = M.viewMapper(a, e), c !== d ? c : b) }) } }]).directive("uibTypeahead", function () { return { controller: "UibTypeaheadController", require: ["ngModel", "^?ngModelOptions", "uibTypeahead"], link: function (a, b, c, d) { d[2].init(d[0], d[1]) } } }).directive("uibTypeaheadPopup", ["$$debounce", function (a) { return { scope: { matches: "=", query: "=", active: "=", position: "&", moveInProgress: "=", select: "&", assignIsOpen: "&", debounce: "&" }, replace: !0, templateUrl: function (a, b) { return b.popupTemplateUrl || "uib/template/typeahead/typeahead-popup.html" }, link: function (b, c, d) { b.templateUrl = d.templateUrl, b.isOpen = function () { var a = b.matches.length > 0; return b.assignIsOpen({ isOpen: a }), a }, b.isActive = function (a) { return b.active === a }, b.selectActive = function (a) { b.active = a }, b.selectMatch = function (c, d) { var e = b.debounce(); angular.isNumber(e) || angular.isObject(e) ? a(function () { b.select({ activeIdx: c, evt: d }) }, angular.isNumber(e) ? e : e["default"]) : b.select({ activeIdx: c, evt: d }) } } } }]).directive("uibTypeaheadMatch", ["$templateRequest", "$compile", "$parse", function (a, b, c) { return { scope: { index: "=", match: "=", query: "=" }, link: function (d, e, f) { var g = c(f.templateUrl)(d.$parent) || "uib/template/typeahead/typeahead-match.html"; a(g).then(function (a) { var c = angular.element(a.trim()); e.replaceWith(c), b(c)(d) }) } } }]).filter("uibTypeaheadHighlight", ["$sce", "$injector", "$log", function (a, b, c) { function d(a) { return a.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1") } function e(a) { return /<.*>/g.test(a) } var f; return f = b.has("$sanitize"), function (b, g) { return !f && e(b) && c.warn("Unsafe use of typeahead please use ngSanitize"), b = g ? ("" + b).replace(new RegExp(d(g), "gi"), "<strong>$&</strong>") : b, f || (b = a.trustAsHtml(b)), b } }]), angular.module("uib/template/accordion/accordion-group.html", []).run(["$templateCache", function (a) { a.put("uib/template/accordion/accordion-group.html", '<div class="panel" ng-class="panelClass || \'panel-default\'">\n  <div role="tab" id="{{::headingId}}" aria-selected="{{isOpen}}" class="panel-heading" ng-keypress="toggleOpen($event)">\n    <h4 class="panel-title">\n      <a role="button" data-toggle="collapse" href aria-expanded="{{isOpen}}" aria-controls="{{::panelId}}" tabindex="0" class="accordion-toggle" ng-click="toggleOpen()" uib-accordion-transclude="heading"><span ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n    </h4>\n  </div>\n  <div id="{{::panelId}}" aria-labelledby="{{::headingId}}" aria-hidden="{{!isOpen}}" role="tabpanel" class="panel-collapse collapse" uib-collapse="!isOpen">\n    <div class="panel-body" ng-transclude></div>\n  </div>\n</div>\n') }]), angular.module("uib/template/accordion/accordion.html", []).run(["$templateCache", function (a) { a.put("uib/template/accordion/accordion.html", '<div role="tablist" class="panel-group" ng-transclude></div>') }]), angular.module("uib/template/alert/alert.html", []).run(["$templateCache", function (a) { a.put("uib/template/alert/alert.html", '<div class="alert" ng-class="[\'alert-\' + (type || \'warning\'), closeable ? \'alert-dismissible\' : null]" role="alert">\n    <button ng-show="closeable" type="button" class="close" ng-click="close({$event: $event})">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <div ng-transclude></div>\n</div>\n') }]), angular.module("uib/template/carousel/carousel.html", []).run(["$templateCache", function (a) { a.put("uib/template/carousel/carousel.html", '<div ng-mouseenter="pause()" ng-mouseleave="play()" class="carousel" ng-swipe-right="prev()" ng-swipe-left="next()">\n  <div class="carousel-inner" ng-transclude></div>\n  <a role="button" href class="left carousel-control" ng-click="prev()" ng-show="slides.length > 1">\n    <span aria-hidden="true" class="glyphicon glyphicon-chevron-left"></span>\n    <span class="sr-only">previous</span>\n  </a>\n  <a role="button" href class="right carousel-control" ng-click="next()" ng-show="slides.length > 1">\n    <span aria-hidden="true" class="glyphicon glyphicon-chevron-right"></span>\n    <span class="sr-only">next</span>\n  </a>\n  <ol class="carousel-indicators" ng-show="slides.length > 1">\n    <li ng-repeat="slide in slides | orderBy:indexOfSlide track by $index" ng-class="{ active: isActive(slide) }" ng-click="select(slide)">\n      <span class="sr-only">slide {{ $index + 1 }} of {{ slides.length }}<span ng-if="isActive(slide)">, currently active</span></span>\n    </li>\n  </ol>\n</div>') }]), angular.module("uib/template/carousel/slide.html", []).run(["$templateCache", function (a) { a.put("uib/template/carousel/slide.html", '<div ng-class="{\n    \'active\': active\n  }" class="item text-center" ng-transclude></div>\n') }]), angular.module("uib/template/datepicker/datepicker.html", []).run(["$templateCache", function (a) { a.put("uib/template/datepicker/datepicker.html", '<div class="uib-datepicker" ng-switch="datepickerMode" role="application" ng-keydown="keydown($event)">\n  <uib-daypicker ng-switch-when="day" tabindex="0"></uib-daypicker>\n  <uib-monthpicker ng-switch-when="month" tabindex="0"></uib-monthpicker>\n  <uib-yearpicker ng-switch-when="year" tabindex="0"></uib-yearpicker>\n</div>') }]), angular.module("uib/template/datepicker/day.html", []).run(["$templateCache", function (a) {
     a.put("uib/template/datepicker/day.html", '<table class="uib-daypicker" role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{::5 + showWeeks}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n    <tr>\n      <th ng-if="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in ::labels track by $index" class="text-center"><small aria-label="{{::label.full}}">{{::label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-weeks" ng-repeat="row in rows track by $index">\n      <td ng-if="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row" class="uib-day text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default btn-sm"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n');
 }]), angular.module("uib/template/datepicker/month.html", []).run(["$templateCache", function (a) { a.put("uib/template/datepicker/month.html", '<table class="uib-monthpicker" role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-months" ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row" class="uib-month text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n') }]), angular.module("uib/template/datepicker/popup.html", []).run(["$templateCache", function (a) { a.put("uib/template/datepicker/popup.html", '<div>\n  <ul class="uib-datepicker-popup dropdown-menu" dropdown-nested ng-if="isOpen" ng-style="{top: position.top+\'px\', left: position.left+\'px\'}" ng-keydown="keydown($event)" ng-click="$event.stopPropagation()">\n    <li ng-transclude></li>\n    <li ng-if="showButtonBar" class="uib-button-bar">\n    <span class="btn-group pull-left">\n      <button type="button" class="btn btn-sm btn-info uib-datepicker-current" ng-click="select(\'today\')" ng-disabled="isDisabled(\'today\')">{{ getText(\'current\') }}</button>\n      <button type="button" class="btn btn-sm btn-danger uib-clear" ng-click="select(null)">{{ getText(\'clear\') }}</button>\n    </span>\n      <button type="button" class="btn btn-sm btn-success pull-right uib-close" ng-click="close()">{{ getText(\'close\') }}</button>\n    </li>\n  </ul>\n</div>\n') }]), angular.module("uib/template/datepicker/year.html", []).run(["$templateCache", function (a) { a.put("uib/template/datepicker/year.html", '<table class="uib-yearpicker" role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{::columns - 2}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-years" ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row" class="uib-year text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n') }]), angular.module("uib/template/modal/backdrop.html", []).run(["$templateCache", function (a) { a.put("uib/template/modal/backdrop.html", '<div class="modal-backdrop"\n     uib-modal-animation-class="fade"\n     modal-in-class="in"\n     ng-style="{\'z-index\': 1040 + (index && 1 || 0) + index*10}"\n></div>\n') }]), angular.module("uib/template/modal/window.html", []).run(["$templateCache", function (a) { a.put("uib/template/modal/window.html", '<div modal-render="{{$isRendered}}" tabindex="-1" role="dialog" class="modal"\n    uib-modal-animation-class="fade"\n    modal-in-class="in"\n    ng-style="{\'z-index\': 1050 + index*10, display: \'block\'}">\n    <div class="modal-dialog {{size ? \'modal-\' + size : \'\'}}"><div class="modal-content" uib-modal-transclude></div></div>\n</div>\n') }]), angular.module("uib/template/pager/pager.html", []).run(["$templateCache", function (a) { a.put("uib/template/pager/pager.html", '<ul class="pager">\n  <li ng-class="{disabled: noPrevious()||ngDisabled, previous: align}"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n  <li ng-class="{disabled: noNext()||ngDisabled, next: align}"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n</ul>\n') }]), angular.module("uib/template/pagination/pagination.html", []).run(["$templateCache", function (a) { a.put("uib/template/pagination/pagination.html", '<ul class="pagination">\n  <li ng-if="::boundaryLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-first"><a href ng-click="selectPage(1, $event)">{{::getText(\'first\')}}</a></li>\n  <li ng-if="::directionLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-prev"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n  <li ng-repeat="page in pages track by $index" ng-class="{active: page.active,disabled: ngDisabled&&!page.active}" class="pagination-page"><a href ng-click="selectPage(page.number, $event)">{{page.text}}</a></li>\n  <li ng-if="::directionLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-next"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n  <li ng-if="::boundaryLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-last"><a href ng-click="selectPage(totalPages, $event)">{{::getText(\'last\')}}</a></li>\n</ul>\n') }]), angular.module("uib/template/tooltip/tooltip-html-popup.html", []).run(["$templateCache", function (a) { a.put("uib/template/tooltip/tooltip-html-popup.html", '<div class="tooltip"\n  tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind-html="contentExp()"></div>\n</div>\n') }]), angular.module("uib/template/tooltip/tooltip-popup.html", []).run(["$templateCache", function (a) { a.put("uib/template/tooltip/tooltip-popup.html", '<div class="tooltip"\n  tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind="content"></div>\n</div>\n') }]), angular.module("uib/template/tooltip/tooltip-template-popup.html", []).run(["$templateCache", function (a) { a.put("uib/template/tooltip/tooltip-template-popup.html", '<div class="tooltip"\n  tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner"\n    uib-tooltip-template-transclude="contentExp()"\n    tooltip-template-transclude-scope="originScope()"></div>\n</div>\n') }]), angular.module("uib/template/popover/popover-html.html", []).run(["$templateCache", function (a) { a.put("uib/template/popover/popover-html.html", '<div class="popover"\n  tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content" ng-bind-html="contentExp()"></div>\n  </div>\n</div>\n') }]), angular.module("uib/template/popover/popover-template.html", []).run(["$templateCache", function (a) { a.put("uib/template/popover/popover-template.html", '<div class="popover"\n  tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content"\n        uib-tooltip-template-transclude="contentExp()"\n        tooltip-template-transclude-scope="originScope()"></div>\n  </div>\n</div>\n') }]), angular.module("uib/template/popover/popover.html", []).run(["$templateCache", function (a) { a.put("uib/template/popover/popover.html", '<div class="popover"\n  tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content" ng-bind="content"></div>\n  </div>\n</div>\n') }]), angular.module("uib/template/progressbar/bar.html", []).run(["$templateCache", function (a) { a.put("uib/template/progressbar/bar.html", '<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" aria-labelledby="{{::title}}" ng-transclude></div>\n') }]), angular.module("uib/template/progressbar/progress.html", []).run(["$templateCache", function (a) { a.put("uib/template/progressbar/progress.html", '<div class="progress" ng-transclude aria-labelledby="{{::title}}"></div>') }]), angular.module("uib/template/progressbar/progressbar.html", []).run(["$templateCache", function (a) { a.put("uib/template/progressbar/progressbar.html", '<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" aria-labelledby="{{::title}}" ng-transclude></div>\n</div>\n') }]), angular.module("uib/template/rating/rating.html", []).run(["$templateCache", function (a) { a.put("uib/template/rating/rating.html", '<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}">\n    <span ng-repeat-start="r in range track by $index" class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    <i ng-repeat-end ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')" ng-attr-title="{{r.title}}" aria-valuetext="{{r.title}}"></i>\n</span>\n') }]), angular.module("uib/template/tabs/tab.html", []).run(["$templateCache", function (a) { a.put("uib/template/tabs/tab.html", '<li ng-class="{active: active, disabled: disabled}" class="uib-tab">\n  <a href ng-click="select()" uib-tab-heading-transclude>{{heading}}</a>\n</li>\n') }]), angular.module("uib/template/tabs/tabset.html", []).run(["$templateCache", function (a) { a.put("uib/template/tabs/tabset.html", '<div>\n  <ul class="nav nav-{{type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane" \n         ng-repeat="tab in tabs" \n         ng-class="{active: tab.active}"\n         uib-tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n') }]), angular.module("uib/template/timepicker/timepicker.html", []).run(["$templateCache", function (a) { a.put("uib/template/timepicker/timepicker.html", '<table class="uib-timepicker">\n  <tbody>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td class="uib-increment hours"><a ng-click="incrementHours()" ng-class="{disabled: noIncrementHours()}" class="btn btn-link" ng-disabled="noIncrementHours()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td>&nbsp;</td>\n      <td class="uib-increment minutes"><a ng-click="incrementMinutes()" ng-class="{disabled: noIncrementMinutes()}" class="btn btn-link" ng-disabled="noIncrementMinutes()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td ng-show="showSeconds">&nbsp;</td>\n      <td ng-show="showSeconds" class="uib-increment seconds"><a ng-click="incrementSeconds()" ng-class="{disabled: noIncrementSeconds()}" class="btn btn-link" ng-disabled="noIncrementSeconds()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n    <tr>\n      <td class="form-group uib-time hours" ng-class="{\'has-error\': invalidHours}">\n        <input style="width:50px;" type="text" placeholder="HH" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementHours()" ng-blur="blur()">\n      </td>\n      <td class="uib-separator">:</td>\n      <td class="form-group uib-time minutes" ng-class="{\'has-error\': invalidMinutes}">\n        <input style="width:50px;" type="text" placeholder="MM" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementMinutes()" ng-blur="blur()">\n      </td>\n      <td ng-show="showSeconds" class="uib-separator">:</td>\n      <td class="form-group uib-time seconds" ng-class="{\'has-error\': invalidSeconds}" ng-show="showSeconds">\n        <input style="width:50px;" type="text" placeholder="SS" ng-model="seconds" ng-change="updateSeconds()" class="form-control text-center" ng-readonly="readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementSeconds()" ng-blur="blur()">\n      </td>\n      <td ng-show="showMeridian" class="uib-time am-pm"><button type="button" ng-class="{disabled: noToggleMeridian()}" class="btn btn-default text-center" ng-click="toggleMeridian()" ng-disabled="noToggleMeridian()" tabindex="{{::tabindex}}">{{meridian}}</button></td>\n    </tr>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td class="uib-decrement hours"><a ng-click="decrementHours()" ng-class="{disabled: noDecrementHours()}" class="btn btn-link" ng-disabled="noDecrementHours()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td>&nbsp;</td>\n      <td class="uib-decrement minutes"><a ng-click="decrementMinutes()" ng-class="{disabled: noDecrementMinutes()}" class="btn btn-link" ng-disabled="noDecrementMinutes()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td ng-show="showSeconds">&nbsp;</td>\n      <td ng-show="showSeconds" class="uib-decrement seconds"><a ng-click="decrementSeconds()" ng-class="{disabled: noDecrementSeconds()}" class="btn btn-link" ng-disabled="noDecrementSeconds()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n  </tbody>\n</table>\n') }]), angular.module("uib/template/typeahead/typeahead-match.html", []).run(["$templateCache", function (a) { a.put("uib/template/typeahead/typeahead-match.html", '<a href\n   tabindex="-1"\n   ng-bind-html="match.label | uibTypeaheadHighlight:query"\n   ng-attr-title="{{match.label}}"></a>\n') }]), angular.module("uib/template/typeahead/typeahead-popup.html", []).run(["$templateCache", function (a) { a.put("uib/template/typeahead/typeahead-popup.html", '<ul class="dropdown-menu" ng-show="isOpen() && !moveInProgress" ng-style="{top: position().top+\'px\', left: position().left+\'px\'}" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index, $event)" role="option" id="{{::match.id}}">\n        <div uib-typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>\n') }]), angular.module("ui.bootstrap.carousel").run(function () { !angular.$$csp().noInlineStyle && angular.element(document).find("head").prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>') }), angular.module("ui.bootstrap.datepicker").run(function () { !angular.$$csp().noInlineStyle && angular.element(document).find("head").prepend('<style type="text/css">.uib-datepicker .uib-title{width:100%;}.uib-day button,.uib-month button,.uib-year button{min-width:100%;}.uib-datepicker-popup.dropdown-menu{display:block;}.uib-button-bar{padding:10px 9px 2px;}</style>') }), angular.module("ui.bootstrap.timepicker").run(function () { !angular.$$csp().noInlineStyle && angular.element(document).find("head").prepend('<style type="text/css">.uib-time input{width:50px;}</style>') }), angular.module("ui.bootstrap.typeahead").run(function () { !angular.$$csp().noInlineStyle && angular.element(document).find("head").prepend('<style type="text/css">[uib-typeahead-popup].dropdown-menu{display:block;}</style>') });
/**
 * @license AngularJS v1.5.0
 * (c) 2010-2016 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {'use strict';

/* jshint ignore:start */
var noop        = angular.noop;
var copy        = angular.copy;
var extend      = angular.extend;
var jqLite      = angular.element;
var forEach     = angular.forEach;
var isArray     = angular.isArray;
var isString    = angular.isString;
var isObject    = angular.isObject;
var isUndefined = angular.isUndefined;
var isDefined   = angular.isDefined;
var isFunction  = angular.isFunction;
var isElement   = angular.isElement;

var ELEMENT_NODE = 1;
var COMMENT_NODE = 8;

var ADD_CLASS_SUFFIX = '-add';
var REMOVE_CLASS_SUFFIX = '-remove';
var EVENT_CLASS_PREFIX = 'ng-';
var ACTIVE_CLASS_SUFFIX = '-active';
var PREPARE_CLASS_SUFFIX = '-prepare';

var NG_ANIMATE_CLASSNAME = 'ng-animate';
var NG_ANIMATE_CHILDREN_DATA = '$$ngAnimateChildren';

// Detect proper transitionend/animationend event names.
var CSS_PREFIX = '', TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;

// If unprefixed events are not supported but webkit-prefixed are, use the latter.
// Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.
// Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`
// but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.
// Register both events in case `window.onanimationend` is not supported because of that,
// do the same for `transitionend` as Safari is likely to exhibit similar behavior.
// Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit
// therefore there is no reason to test anymore for other vendor prefixes:
// http://caniuse.com/#search=transition
if (isUndefined(window.ontransitionend) && isDefined(window.onwebkittransitionend)) {
  CSS_PREFIX = '-webkit-';
  TRANSITION_PROP = 'WebkitTransition';
  TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';
} else {
  TRANSITION_PROP = 'transition';
  TRANSITIONEND_EVENT = 'transitionend';
}

if (isUndefined(window.onanimationend) && isDefined(window.onwebkitanimationend)) {
  CSS_PREFIX = '-webkit-';
  ANIMATION_PROP = 'WebkitAnimation';
  ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';
} else {
  ANIMATION_PROP = 'animation';
  ANIMATIONEND_EVENT = 'animationend';
}

var DURATION_KEY = 'Duration';
var PROPERTY_KEY = 'Property';
var DELAY_KEY = 'Delay';
var TIMING_KEY = 'TimingFunction';
var ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';
var ANIMATION_PLAYSTATE_KEY = 'PlayState';
var SAFE_FAST_FORWARD_DURATION_VALUE = 9999;

var ANIMATION_DELAY_PROP = ANIMATION_PROP + DELAY_KEY;
var ANIMATION_DURATION_PROP = ANIMATION_PROP + DURATION_KEY;
var TRANSITION_DELAY_PROP = TRANSITION_PROP + DELAY_KEY;
var TRANSITION_DURATION_PROP = TRANSITION_PROP + DURATION_KEY;

var isPromiseLike = function(p) {
  return p && p.then ? true : false;
};

var ngMinErr = angular.$$minErr('ng');
function assertArg(arg, name, reason) {
  if (!arg) {
    throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));
  }
  return arg;
}

function mergeClasses(a,b) {
  if (!a && !b) return '';
  if (!a) return b;
  if (!b) return a;
  if (isArray(a)) a = a.join(' ');
  if (isArray(b)) b = b.join(' ');
  return a + ' ' + b;
}

function packageStyles(options) {
  var styles = {};
  if (options && (options.to || options.from)) {
    styles.to = options.to;
    styles.from = options.from;
  }
  return styles;
}

function pendClasses(classes, fix, isPrefix) {
  var className = '';
  classes = isArray(classes)
      ? classes
      : classes && isString(classes) && classes.length
          ? classes.split(/\s+/)
          : [];
  forEach(classes, function(klass, i) {
    if (klass && klass.length > 0) {
      className += (i > 0) ? ' ' : '';
      className += isPrefix ? fix + klass
                            : klass + fix;
    }
  });
  return className;
}

function removeFromArray(arr, val) {
  var index = arr.indexOf(val);
  if (val >= 0) {
    arr.splice(index, 1);
  }
}

function stripCommentsFromElement(element) {
  if (element instanceof jqLite) {
    switch (element.length) {
      case 0:
        return [];
        break;

      case 1:
        // there is no point of stripping anything if the element
        // is the only element within the jqLite wrapper.
        // (it's important that we retain the element instance.)
        if (element[0].nodeType === ELEMENT_NODE) {
          return element;
        }
        break;

      default:
        return jqLite(extractElementNode(element));
        break;
    }
  }

  if (element.nodeType === ELEMENT_NODE) {
    return jqLite(element);
  }
}

function extractElementNode(element) {
  if (!element[0]) return element;
  for (var i = 0; i < element.length; i++) {
    var elm = element[i];
    if (elm.nodeType == ELEMENT_NODE) {
      return elm;
    }
  }
}

function $$addClass($$jqLite, element, className) {
  forEach(element, function(elm) {
    $$jqLite.addClass(elm, className);
  });
}

function $$removeClass($$jqLite, element, className) {
  forEach(element, function(elm) {
    $$jqLite.removeClass(elm, className);
  });
}

function applyAnimationClassesFactory($$jqLite) {
  return function(element, options) {
    if (options.addClass) {
      $$addClass($$jqLite, element, options.addClass);
      options.addClass = null;
    }
    if (options.removeClass) {
      $$removeClass($$jqLite, element, options.removeClass);
      options.removeClass = null;
    }
  }
}

function prepareAnimationOptions(options) {
  options = options || {};
  if (!options.$$prepared) {
    var domOperation = options.domOperation || noop;
    options.domOperation = function() {
      options.$$domOperationFired = true;
      domOperation();
      domOperation = noop;
    };
    options.$$prepared = true;
  }
  return options;
}

function applyAnimationStyles(element, options) {
  applyAnimationFromStyles(element, options);
  applyAnimationToStyles(element, options);
}

function applyAnimationFromStyles(element, options) {
  if (options.from) {
    element.css(options.from);
    options.from = null;
  }
}

function applyAnimationToStyles(element, options) {
  if (options.to) {
    element.css(options.to);
    options.to = null;
  }
}

function mergeAnimationDetails(element, oldAnimation, newAnimation) {
  var target = oldAnimation.options || {};
  var newOptions = newAnimation.options || {};

  var toAdd = (target.addClass || '') + ' ' + (newOptions.addClass || '');
  var toRemove = (target.removeClass || '') + ' ' + (newOptions.removeClass || '');
  var classes = resolveElementClasses(element.attr('class'), toAdd, toRemove);

  if (newOptions.preparationClasses) {
    target.preparationClasses = concatWithSpace(newOptions.preparationClasses, target.preparationClasses);
    delete newOptions.preparationClasses;
  }

  // noop is basically when there is no callback; otherwise something has been set
  var realDomOperation = target.domOperation !== noop ? target.domOperation : null;

  extend(target, newOptions);

  // TODO(matsko or sreeramu): proper fix is to maintain all animation callback in array and call at last,but now only leave has the callback so no issue with this.
  if (realDomOperation) {
    target.domOperation = realDomOperation;
  }

  if (classes.addClass) {
    target.addClass = classes.addClass;
  } else {
    target.addClass = null;
  }

  if (classes.removeClass) {
    target.removeClass = classes.removeClass;
  } else {
    target.removeClass = null;
  }

  oldAnimation.addClass = target.addClass;
  oldAnimation.removeClass = target.removeClass;

  return target;
}

function resolveElementClasses(existing, toAdd, toRemove) {
  var ADD_CLASS = 1;
  var REMOVE_CLASS = -1;

  var flags = {};
  existing = splitClassesToLookup(existing);

  toAdd = splitClassesToLookup(toAdd);
  forEach(toAdd, function(value, key) {
    flags[key] = ADD_CLASS;
  });

  toRemove = splitClassesToLookup(toRemove);
  forEach(toRemove, function(value, key) {
    flags[key] = flags[key] === ADD_CLASS ? null : REMOVE_CLASS;
  });

  var classes = {
    addClass: '',
    removeClass: ''
  };

  forEach(flags, function(val, klass) {
    var prop, allow;
    if (val === ADD_CLASS) {
      prop = 'addClass';
      allow = !existing[klass];
    } else if (val === REMOVE_CLASS) {
      prop = 'removeClass';
      allow = existing[klass];
    }
    if (allow) {
      if (classes[prop].length) {
        classes[prop] += ' ';
      }
      classes[prop] += klass;
    }
  });

  function splitClassesToLookup(classes) {
    if (isString(classes)) {
      classes = classes.split(' ');
    }

    var obj = {};
    forEach(classes, function(klass) {
      // sometimes the split leaves empty string values
      // incase extra spaces were applied to the options
      if (klass.length) {
        obj[klass] = true;
      }
    });
    return obj;
  }

  return classes;
}

function getDomNode(element) {
  return (element instanceof angular.element) ? element[0] : element;
}

function applyGeneratedPreparationClasses(element, event, options) {
  var classes = '';
  if (event) {
    classes = pendClasses(event, EVENT_CLASS_PREFIX, true);
  }
  if (options.addClass) {
    classes = concatWithSpace(classes, pendClasses(options.addClass, ADD_CLASS_SUFFIX));
  }
  if (options.removeClass) {
    classes = concatWithSpace(classes, pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX));
  }
  if (classes.length) {
    options.preparationClasses = classes;
    element.addClass(classes);
  }
}

function clearGeneratedClasses(element, options) {
  if (options.preparationClasses) {
    element.removeClass(options.preparationClasses);
    options.preparationClasses = null;
  }
  if (options.activeClasses) {
    element.removeClass(options.activeClasses);
    options.activeClasses = null;
  }
}

function blockTransitions(node, duration) {
  // we use a negative delay value since it performs blocking
  // yet it doesn't kill any existing transitions running on the
  // same element which makes this safe for class-based animations
  var value = duration ? '-' + duration + 's' : '';
  applyInlineStyle(node, [TRANSITION_DELAY_PROP, value]);
  return [TRANSITION_DELAY_PROP, value];
}

function blockKeyframeAnimations(node, applyBlock) {
  var value = applyBlock ? 'paused' : '';
  var key = ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY;
  applyInlineStyle(node, [key, value]);
  return [key, value];
}

function applyInlineStyle(node, styleTuple) {
  var prop = styleTuple[0];
  var value = styleTuple[1];
  node.style[prop] = value;
}

function concatWithSpace(a,b) {
  if (!a) return b;
  if (!b) return a;
  return a + ' ' + b;
}

var $$rAFSchedulerFactory = ['$$rAF', function($$rAF) {
  var queue, cancelFn;

  function scheduler(tasks) {
    // we make a copy since RAFScheduler mutates the state
    // of the passed in array variable and this would be difficult
    // to track down on the outside code
    queue = queue.concat(tasks);
    nextTick();
  }

  queue = scheduler.queue = [];

  /* waitUntilQuiet does two things:
   * 1. It will run the FINAL `fn` value only when an uncanceled RAF has passed through
   * 2. It will delay the next wave of tasks from running until the quiet `fn` has run.
   *
   * The motivation here is that animation code can request more time from the scheduler
   * before the next wave runs. This allows for certain DOM properties such as classes to
   * be resolved in time for the next animation to run.
   */
  scheduler.waitUntilQuiet = function(fn) {
    if (cancelFn) cancelFn();

    cancelFn = $$rAF(function() {
      cancelFn = null;
      fn();
      nextTick();
    });
  };

  return scheduler;

  function nextTick() {
    if (!queue.length) return;

    var items = queue.shift();
    for (var i = 0; i < items.length; i++) {
      items[i]();
    }

    if (!cancelFn) {
      $$rAF(function() {
        if (!cancelFn) nextTick();
      });
    }
  }
}];

/**
 * @ngdoc directive
 * @name ngAnimateChildren
 * @restrict AE
 * @element ANY
 *
 * @description
 *
 * ngAnimateChildren allows you to specify that children of this element should animate even if any
 * of the children's parents are currently animating. By default, when an element has an active `enter`, `leave`, or `move`
 * (structural) animation, child elements that also have an active structural animation are not animated.
 *
 * Note that even if `ngAnimteChildren` is set, no child animations will run when the parent element is removed from the DOM (`leave` animation).
 *
 *
 * @param {string} ngAnimateChildren If the value is empty, `true` or `on`,
 *     then child animations are allowed. If the value is `false`, child animations are not allowed.
 *
 * @example
 * <example module="ngAnimateChildren" name="ngAnimateChildren" deps="angular-animate.js" animations="true">
     <file name="index.html">
       <div ng-controller="mainController as main">
         <label>Show container? <input type="checkbox" ng-model="main.enterElement" /></label>
         <label>Animate children? <input type="checkbox" ng-model="main.animateChildren" /></label>
         <hr>
         <div ng-animate-children="{{main.animateChildren}}">
           <div ng-if="main.enterElement" class="container">
             List of items:
             <div ng-repeat="item in [0, 1, 2, 3]" class="item">Item {{item}}</div>
           </div>
         </div>
       </div>
     </file>
     <file name="animations.css">

      .container.ng-enter,
      .container.ng-leave {
        transition: all ease 1.5s;
      }

      .container.ng-enter,
      .container.ng-leave-active {
        opacity: 0;
      }

      .container.ng-leave,
      .container.ng-enter-active {
        opacity: 1;
      }

      .item {
        background: firebrick;
        color: #FFF;
        margin-bottom: 10px;
      }

      .item.ng-enter,
      .item.ng-leave {
        transition: transform 1.5s ease;
      }

      .item.ng-enter {
        transform: translateX(50px);
      }

      .item.ng-enter-active {
        transform: translateX(0);
      }
    </file>
    <file name="script.js">
      angular.module('ngAnimateChildren', ['ngAnimate'])
        .controller('mainController', function() {
          this.animateChildren = false;
          this.enterElement = false;
        });
    </file>
  </example>
 */
var $$AnimateChildrenDirective = ['$interpolate', function($interpolate) {
  return {
    link: function(scope, element, attrs) {
      var val = attrs.ngAnimateChildren;
      if (angular.isString(val) && val.length === 0) { //empty attribute
        element.data(NG_ANIMATE_CHILDREN_DATA, true);
      } else {
        // Interpolate and set the value, so that it is available to
        // animations that run right after compilation
        setData($interpolate(val)(scope));
        attrs.$observe('ngAnimateChildren', setData);
      }

      function setData(value) {
        value = value === 'on' || value === 'true';
        element.data(NG_ANIMATE_CHILDREN_DATA, value);
      }
    }
  };
}];

var ANIMATE_TIMER_KEY = '$$animateCss';

/**
 * @ngdoc service
 * @name $animateCss
 * @kind object
 *
 * @description
 * The `$animateCss` service is a useful utility to trigger customized CSS-based transitions/keyframes
 * from a JavaScript-based animation or directly from a directive. The purpose of `$animateCss` is NOT
 * to side-step how `$animate` and ngAnimate work, but the goal is to allow pre-existing animations or
 * directives to create more complex animations that can be purely driven using CSS code.
 *
 * Note that only browsers that support CSS transitions and/or keyframe animations are capable of
 * rendering animations triggered via `$animateCss` (bad news for IE9 and lower).
 *
 * ## Usage
 * Once again, `$animateCss` is designed to be used inside of a registered JavaScript animation that
 * is powered by ngAnimate. It is possible to use `$animateCss` directly inside of a directive, however,
 * any automatic control over cancelling animations and/or preventing animations from being run on
 * child elements will not be handled by Angular. For this to work as expected, please use `$animate` to
 * trigger the animation and then setup a JavaScript animation that injects `$animateCss` to trigger
 * the CSS animation.
 *
 * The example below shows how we can create a folding animation on an element using `ng-if`:
 *
 * ```html
 * <!-- notice the `fold-animation` CSS class -->
 * <div ng-if="onOff" class="fold-animation">
 *   This element will go BOOM
 * </div>
 * <button ng-click="onOff=true">Fold In</button>
 * ```
 *
 * Now we create the **JavaScript animation** that will trigger the CSS transition:
 *
 * ```js
 * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {
 *   return {
 *     enter: function(element, doneFn) {
 *       var height = element[0].offsetHeight;
 *       return $animateCss(element, {
 *         from: { height:'0px' },
 *         to: { height:height + 'px' },
 *         duration: 1 // one second
 *       });
 *     }
 *   }
 * }]);
 * ```
 *
 * ## More Advanced Uses
 *
 * `$animateCss` is the underlying code that ngAnimate uses to power **CSS-based animations** behind the scenes. Therefore CSS hooks
 * like `.ng-EVENT`, `.ng-EVENT-active`, `.ng-EVENT-stagger` are all features that can be triggered using `$animateCss` via JavaScript code.
 *
 * This also means that just about any combination of adding classes, removing classes, setting styles, dynamically setting a keyframe animation,
 * applying a hardcoded duration or delay value, changing the animation easing or applying a stagger animation are all options that work with
 * `$animateCss`. The service itself is smart enough to figure out the combination of options and examine the element styling properties in order
 * to provide a working animation that will run in CSS.
 *
 * The example below showcases a more advanced version of the `.fold-animation` from the example above:
 *
 * ```js
 * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {
 *   return {
 *     enter: function(element, doneFn) {
 *       var height = element[0].offsetHeight;
 *       return $animateCss(element, {
 *         addClass: 'red large-text pulse-twice',
 *         easing: 'ease-out',
 *         from: { height:'0px' },
 *         to: { height:height + 'px' },
 *         duration: 1 // one second
 *       });
 *     }
 *   }
 * }]);
 * ```
 *
 * Since we're adding/removing CSS classes then the CSS transition will also pick those up:
 *
 * ```css
 * /&#42; since a hardcoded duration value of 1 was provided in the JavaScript animation code,
 * the CSS classes below will be transitioned despite them being defined as regular CSS classes &#42;/
 * .red { background:red; }
 * .large-text { font-size:20px; }
 *
 * /&#42; we can also use a keyframe animation and $animateCss will make it work alongside the transition &#42;/
 * .pulse-twice {
 *   animation: 0.5s pulse linear 2;
 *   -webkit-animation: 0.5s pulse linear 2;
 * }
 *
 * @keyframes pulse {
 *   from { transform: scale(0.5); }
 *   to { transform: scale(1.5); }
 * }
 *
 * @-webkit-keyframes pulse {
 *   from { -webkit-transform: scale(0.5); }
 *   to { -webkit-transform: scale(1.5); }
 * }
 * ```
 *
 * Given this complex combination of CSS classes, styles and options, `$animateCss` will figure everything out and make the animation happen.
 *
 * ## How the Options are handled
 *
 * `$animateCss` is very versatile and intelligent when it comes to figuring out what configurations to apply to the element to ensure the animation
 * works with the options provided. Say for example we were adding a class that contained a keyframe value and we wanted to also animate some inline
 * styles using the `from` and `to` properties.
 *
 * ```js
 * var animator = $animateCss(element, {
 *   from: { background:'red' },
 *   to: { background:'blue' }
 * });
 * animator.start();
 * ```
 *
 * ```css
 * .rotating-animation {
 *   animation:0.5s rotate linear;
 *   -webkit-animation:0.5s rotate linear;
 * }
 *
 * @keyframes rotate {
 *   from { transform: rotate(0deg); }
 *   to { transform: rotate(360deg); }
 * }
 *
 * @-webkit-keyframes rotate {
 *   from { -webkit-transform: rotate(0deg); }
 *   to { -webkit-transform: rotate(360deg); }
 * }
 * ```
 *
 * The missing pieces here are that we do not have a transition set (within the CSS code nor within the `$animateCss` options) and the duration of the animation is
 * going to be detected from what the keyframe styles on the CSS class are. In this event, `$animateCss` will automatically create an inline transition
 * style matching the duration detected from the keyframe style (which is present in the CSS class that is being added) and then prepare both the transition
 * and keyframe animations to run in parallel on the element. Then when the animation is underway the provided `from` and `to` CSS styles will be applied
 * and spread across the transition and keyframe animation.
 *
 * ## What is returned
 *
 * `$animateCss` works in two stages: a preparation phase and an animation phase. Therefore when `$animateCss` is first called it will NOT actually
 * start the animation. All that is going on here is that the element is being prepared for the animation (which means that the generated CSS classes are
 * added and removed on the element). Once `$animateCss` is called it will return an object with the following properties:
 *
 * ```js
 * var animator = $animateCss(element, { ... });
 * ```
 *
 * Now what do the contents of our `animator` variable look like:
 *
 * ```js
 * {
 *   // starts the animation
 *   start: Function,
 *
 *   // ends (aborts) the animation
 *   end: Function
 * }
 * ```
 *
 * To actually start the animation we need to run `animation.start()` which will then return a promise that we can hook into to detect when the animation ends.
 * If we choose not to run the animation then we MUST run `animation.end()` to perform a cleanup on the element (since some CSS classes and styles may have been
 * applied to the element during the preparation phase). Note that all other properties such as duration, delay, transitions and keyframes are just properties
 * and that changing them will not reconfigure the parameters of the animation.
 *
 * ### runner.done() vs runner.then()
 * It is documented that `animation.start()` will return a promise object and this is true, however, there is also an additional method available on the
 * runner called `.done(callbackFn)`. The done method works the same as `.finally(callbackFn)`, however, it does **not trigger a digest to occur**.
 * Therefore, for performance reasons, it's always best to use `runner.done(callback)` instead of `runner.then()`, `runner.catch()` or `runner.finally()`
 * unless you really need a digest to kick off afterwards.
 *
 * Keep in mind that, to make this easier, ngAnimate has tweaked the JS animations API to recognize when a runner instance is returned from $animateCss
 * (so there is no need to call `runner.done(doneFn)` inside of your JavaScript animation code).
 * Check the {@link ngAnimate.$animateCss#usage animation code above} to see how this works.
 *
 * @param {DOMElement} element the element that will be animated
 * @param {object} options the animation-related options that will be applied during the animation
 *
 * * `event` - The DOM event (e.g. enter, leave, move). When used, a generated CSS class of `ng-EVENT` and `ng-EVENT-active` will be applied
 * to the element during the animation. Multiple events can be provided when spaces are used as a separator. (Note that this will not perform any DOM operation.)
 * * `structural` - Indicates that the `ng-` prefix will be added to the event class. Setting to `false` or omitting will turn `ng-EVENT` and
 * `ng-EVENT-active` in `EVENT` and `EVENT-active`. Unused if `event` is omitted.
 * * `easing` - The CSS easing value that will be applied to the transition or keyframe animation (or both).
 * * `transitionStyle` - The raw CSS transition style that will be used (e.g. `1s linear all`).
 * * `keyframeStyle` - The raw CSS keyframe animation style that will be used (e.g. `1s my_animation linear`).
 * * `from` - The starting CSS styles (a key/value object) that will be applied at the start of the animation.
 * * `to` - The ending CSS styles (a key/value object) that will be applied across the animation via a CSS transition.
 * * `addClass` - A space separated list of CSS classes that will be added to the element and spread across the animation.
 * * `removeClass` - A space separated list of CSS classes that will be removed from the element and spread across the animation.
 * * `duration` - A number value representing the total duration of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `0`
 * is provided then the animation will be skipped entirely.
 * * `delay` - A number value representing the total delay of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `true` is
 * used then whatever delay value is detected from the CSS classes will be mirrored on the elements styles (e.g. by setting delay true then the style value
 * of the element will be `transition-delay: DETECTED_VALUE`). Using `true` is useful when you want the CSS classes and inline styles to all share the same
 * CSS delay value.
 * * `stagger` - A numeric time value representing the delay between successively animated elements
 * ({@link ngAnimate#css-staggering-animations Click here to learn how CSS-based staggering works in ngAnimate.})
 * * `staggerIndex` - The numeric index representing the stagger item (e.g. a value of 5 is equal to the sixth item in the stagger; therefore when a
 *   `stagger` option value of `0.1` is used then there will be a stagger delay of `600ms`)
 * * `applyClassesEarly` - Whether or not the classes being added or removed will be used when detecting the animation. This is set by `$animate` when enter/leave/move animations are fired to ensure that the CSS classes are resolved in time. (Note that this will prevent any transitions from occurring on the classes being added and removed.)
 * * `cleanupStyles` - Whether or not the provided `from` and `to` styles will be removed once
 *    the animation is closed. This is useful for when the styles are used purely for the sake of
 *    the animation and do not have a lasting visual effect on the element (e.g. a collapse and open animation).
 *    By default this value is set to `false`.
 *
 * @return {object} an object with start and end methods and details about the animation.
 *
 * * `start` - The method to start the animation. This will return a `Promise` when called.
 * * `end` - This method will cancel the animation and remove all applied CSS classes and styles.
 */
var ONE_SECOND = 1000;
var BASE_TEN = 10;

var ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;
var CLOSING_TIME_BUFFER = 1.5;

var DETECT_CSS_PROPERTIES = {
  transitionDuration:      TRANSITION_DURATION_PROP,
  transitionDelay:         TRANSITION_DELAY_PROP,
  transitionProperty:      TRANSITION_PROP + PROPERTY_KEY,
  animationDuration:       ANIMATION_DURATION_PROP,
  animationDelay:          ANIMATION_DELAY_PROP,
  animationIterationCount: ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY
};

var DETECT_STAGGER_CSS_PROPERTIES = {
  transitionDuration:      TRANSITION_DURATION_PROP,
  transitionDelay:         TRANSITION_DELAY_PROP,
  animationDuration:       ANIMATION_DURATION_PROP,
  animationDelay:          ANIMATION_DELAY_PROP
};

function getCssKeyframeDurationStyle(duration) {
  return [ANIMATION_DURATION_PROP, duration + 's'];
}

function getCssDelayStyle(delay, isKeyframeAnimation) {
  var prop = isKeyframeAnimation ? ANIMATION_DELAY_PROP : TRANSITION_DELAY_PROP;
  return [prop, delay + 's'];
}

function computeCssStyles($window, element, properties) {
  var styles = Object.create(null);
  var detectedStyles = $window.getComputedStyle(element) || {};
  forEach(properties, function(formalStyleName, actualStyleName) {
    var val = detectedStyles[formalStyleName];
    if (val) {
      var c = val.charAt(0);

      // only numerical-based values have a negative sign or digit as the first value
      if (c === '-' || c === '+' || c >= 0) {
        val = parseMaxTime(val);
      }

      // by setting this to null in the event that the delay is not set or is set directly as 0
      // then we can still allow for negative values to be used later on and not mistake this
      // value for being greater than any other negative value.
      if (val === 0) {
        val = null;
      }
      styles[actualStyleName] = val;
    }
  });

  return styles;
}

function parseMaxTime(str) {
  var maxValue = 0;
  var values = str.split(/\s*,\s*/);
  forEach(values, function(value) {
    // it's always safe to consider only second values and omit `ms` values since
    // getComputedStyle will always handle the conversion for us
    if (value.charAt(value.length - 1) == 's') {
      value = value.substring(0, value.length - 1);
    }
    value = parseFloat(value) || 0;
    maxValue = maxValue ? Math.max(value, maxValue) : value;
  });
  return maxValue;
}

function truthyTimingValue(val) {
  return val === 0 || val != null;
}

function getCssTransitionDurationStyle(duration, applyOnlyDuration) {
  var style = TRANSITION_PROP;
  var value = duration + 's';
  if (applyOnlyDuration) {
    style += DURATION_KEY;
  } else {
    value += ' linear all';
  }
  return [style, value];
}

function createLocalCacheLookup() {
  var cache = Object.create(null);
  return {
    flush: function() {
      cache = Object.create(null);
    },

    count: function(key) {
      var entry = cache[key];
      return entry ? entry.total : 0;
    },

    get: function(key) {
      var entry = cache[key];
      return entry && entry.value;
    },

    put: function(key, value) {
      if (!cache[key]) {
        cache[key] = { total: 1, value: value };
      } else {
        cache[key].total++;
      }
    }
  };
}

// we do not reassign an already present style value since
// if we detect the style property value again we may be
// detecting styles that were added via the `from` styles.
// We make use of `isDefined` here since an empty string
// or null value (which is what getPropertyValue will return
// for a non-existing style) will still be marked as a valid
// value for the style (a falsy value implies that the style
// is to be removed at the end of the animation). If we had a simple
// "OR" statement then it would not be enough to catch that.
function registerRestorableStyles(backup, node, properties) {
  forEach(properties, function(prop) {
    backup[prop] = isDefined(backup[prop])
        ? backup[prop]
        : node.style.getPropertyValue(prop);
  });
}

var $AnimateCssProvider = ['$animateProvider', function($animateProvider) {
  var gcsLookup = createLocalCacheLookup();
  var gcsStaggerLookup = createLocalCacheLookup();

  this.$get = ['$window', '$$jqLite', '$$AnimateRunner', '$timeout',
               '$$forceReflow', '$sniffer', '$$rAFScheduler', '$$animateQueue',
       function($window,   $$jqLite,   $$AnimateRunner,   $timeout,
                $$forceReflow,   $sniffer,   $$rAFScheduler, $$animateQueue) {

    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

    var parentCounter = 0;
    function gcsHashFn(node, extraClasses) {
      var KEY = "$$ngAnimateParentKey";
      var parentNode = node.parentNode;
      var parentID = parentNode[KEY] || (parentNode[KEY] = ++parentCounter);
      return parentID + '-' + node.getAttribute('class') + '-' + extraClasses;
    }

    function computeCachedCssStyles(node, className, cacheKey, properties) {
      var timings = gcsLookup.get(cacheKey);

      if (!timings) {
        timings = computeCssStyles($window, node, properties);
        if (timings.animationIterationCount === 'infinite') {
          timings.animationIterationCount = 1;
        }
      }

      // we keep putting this in multiple times even though the value and the cacheKey are the same
      // because we're keeping an internal tally of how many duplicate animations are detected.
      gcsLookup.put(cacheKey, timings);
      return timings;
    }

    function computeCachedCssStaggerStyles(node, className, cacheKey, properties) {
      var stagger;

      // if we have one or more existing matches of matching elements
      // containing the same parent + CSS styles (which is how cacheKey works)
      // then staggering is possible
      if (gcsLookup.count(cacheKey) > 0) {
        stagger = gcsStaggerLookup.get(cacheKey);

        if (!stagger) {
          var staggerClassName = pendClasses(className, '-stagger');

          $$jqLite.addClass(node, staggerClassName);

          stagger = computeCssStyles($window, node, properties);

          // force the conversion of a null value to zero incase not set
          stagger.animationDuration = Math.max(stagger.animationDuration, 0);
          stagger.transitionDuration = Math.max(stagger.transitionDuration, 0);

          $$jqLite.removeClass(node, staggerClassName);

          gcsStaggerLookup.put(cacheKey, stagger);
        }
      }

      return stagger || {};
    }

    var cancelLastRAFRequest;
    var rafWaitQueue = [];
    function waitUntilQuiet(callback) {
      rafWaitQueue.push(callback);
      $$rAFScheduler.waitUntilQuiet(function() {
        gcsLookup.flush();
        gcsStaggerLookup.flush();

        // DO NOT REMOVE THIS LINE OR REFACTOR OUT THE `pageWidth` variable.
        // PLEASE EXAMINE THE `$$forceReflow` service to understand why.
        var pageWidth = $$forceReflow();

        // we use a for loop to ensure that if the queue is changed
        // during this looping then it will consider new requests
        for (var i = 0; i < rafWaitQueue.length; i++) {
          rafWaitQueue[i](pageWidth);
        }
        rafWaitQueue.length = 0;
      });
    }

    function computeTimings(node, className, cacheKey) {
      var timings = computeCachedCssStyles(node, className, cacheKey, DETECT_CSS_PROPERTIES);
      var aD = timings.animationDelay;
      var tD = timings.transitionDelay;
      timings.maxDelay = aD && tD
          ? Math.max(aD, tD)
          : (aD || tD);
      timings.maxDuration = Math.max(
          timings.animationDuration * timings.animationIterationCount,
          timings.transitionDuration);

      return timings;
    }

    return function init(element, initialOptions) {
      // all of the animation functions should create
      // a copy of the options data, however, if a
      // parent service has already created a copy then
      // we should stick to using that
      var options = initialOptions || {};
      if (!options.$$prepared) {
        options = prepareAnimationOptions(copy(options));
      }

      var restoreStyles = {};
      var node = getDomNode(element);
      if (!node
          || !node.parentNode
          || !$$animateQueue.enabled()) {
        return closeAndReturnNoopAnimator();
      }

      var temporaryStyles = [];
      var classes = element.attr('class');
      var styles = packageStyles(options);
      var animationClosed;
      var animationPaused;
      var animationCompleted;
      var runner;
      var runnerHost;
      var maxDelay;
      var maxDelayTime;
      var maxDuration;
      var maxDurationTime;
      var startTime;
      var events = [];

      if (options.duration === 0 || (!$sniffer.animations && !$sniffer.transitions)) {
        return closeAndReturnNoopAnimator();
      }

      var method = options.event && isArray(options.event)
            ? options.event.join(' ')
            : options.event;

      var isStructural = method && options.structural;
      var structuralClassName = '';
      var addRemoveClassName = '';

      if (isStructural) {
        structuralClassName = pendClasses(method, EVENT_CLASS_PREFIX, true);
      } else if (method) {
        structuralClassName = method;
      }

      if (options.addClass) {
        addRemoveClassName += pendClasses(options.addClass, ADD_CLASS_SUFFIX);
      }

      if (options.removeClass) {
        if (addRemoveClassName.length) {
          addRemoveClassName += ' ';
        }
        addRemoveClassName += pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX);
      }

      // there may be a situation where a structural animation is combined together
      // with CSS classes that need to resolve before the animation is computed.
      // However this means that there is no explicit CSS code to block the animation
      // from happening (by setting 0s none in the class name). If this is the case
      // we need to apply the classes before the first rAF so we know to continue if
      // there actually is a detected transition or keyframe animation
      if (options.applyClassesEarly && addRemoveClassName.length) {
        applyAnimationClasses(element, options);
      }

      var preparationClasses = [structuralClassName, addRemoveClassName].join(' ').trim();
      var fullClassName = classes + ' ' + preparationClasses;
      var activeClasses = pendClasses(preparationClasses, ACTIVE_CLASS_SUFFIX);
      var hasToStyles = styles.to && Object.keys(styles.to).length > 0;
      var containsKeyframeAnimation = (options.keyframeStyle || '').length > 0;

      // there is no way we can trigger an animation if no styles and
      // no classes are being applied which would then trigger a transition,
      // unless there a is raw keyframe value that is applied to the element.
      if (!containsKeyframeAnimation
           && !hasToStyles
           && !preparationClasses) {
        return closeAndReturnNoopAnimator();
      }

      var cacheKey, stagger;
      if (options.stagger > 0) {
        var staggerVal = parseFloat(options.stagger);
        stagger = {
          transitionDelay: staggerVal,
          animationDelay: staggerVal,
          transitionDuration: 0,
          animationDuration: 0
        };
      } else {
        cacheKey = gcsHashFn(node, fullClassName);
        stagger = computeCachedCssStaggerStyles(node, preparationClasses, cacheKey, DETECT_STAGGER_CSS_PROPERTIES);
      }

      if (!options.$$skipPreparationClasses) {
        $$jqLite.addClass(element, preparationClasses);
      }

      var applyOnlyDuration;

      if (options.transitionStyle) {
        var transitionStyle = [TRANSITION_PROP, options.transitionStyle];
        applyInlineStyle(node, transitionStyle);
        temporaryStyles.push(transitionStyle);
      }

      if (options.duration >= 0) {
        applyOnlyDuration = node.style[TRANSITION_PROP].length > 0;
        var durationStyle = getCssTransitionDurationStyle(options.duration, applyOnlyDuration);

        // we set the duration so that it will be picked up by getComputedStyle later
        applyInlineStyle(node, durationStyle);
        temporaryStyles.push(durationStyle);
      }

      if (options.keyframeStyle) {
        var keyframeStyle = [ANIMATION_PROP, options.keyframeStyle];
        applyInlineStyle(node, keyframeStyle);
        temporaryStyles.push(keyframeStyle);
      }

      var itemIndex = stagger
          ? options.staggerIndex >= 0
              ? options.staggerIndex
              : gcsLookup.count(cacheKey)
          : 0;

      var isFirst = itemIndex === 0;

      // this is a pre-emptive way of forcing the setup classes to be added and applied INSTANTLY
      // without causing any combination of transitions to kick in. By adding a negative delay value
      // it forces the setup class' transition to end immediately. We later then remove the negative
      // transition delay to allow for the transition to naturally do it's thing. The beauty here is
      // that if there is no transition defined then nothing will happen and this will also allow
      // other transitions to be stacked on top of each other without any chopping them out.
      if (isFirst && !options.skipBlocking) {
        blockTransitions(node, SAFE_FAST_FORWARD_DURATION_VALUE);
      }

      var timings = computeTimings(node, fullClassName, cacheKey);
      var relativeDelay = timings.maxDelay;
      maxDelay = Math.max(relativeDelay, 0);
      maxDuration = timings.maxDuration;

      var flags = {};
      flags.hasTransitions          = timings.transitionDuration > 0;
      flags.hasAnimations           = timings.animationDuration > 0;
      flags.hasTransitionAll        = flags.hasTransitions && timings.transitionProperty == 'all';
      flags.applyTransitionDuration = hasToStyles && (
                                        (flags.hasTransitions && !flags.hasTransitionAll)
                                         || (flags.hasAnimations && !flags.hasTransitions));
      flags.applyAnimationDuration  = options.duration && flags.hasAnimations;
      flags.applyTransitionDelay    = truthyTimingValue(options.delay) && (flags.applyTransitionDuration || flags.hasTransitions);
      flags.applyAnimationDelay     = truthyTimingValue(options.delay) && flags.hasAnimations;
      flags.recalculateTimingStyles = addRemoveClassName.length > 0;

      if (flags.applyTransitionDuration || flags.applyAnimationDuration) {
        maxDuration = options.duration ? parseFloat(options.duration) : maxDuration;

        if (flags.applyTransitionDuration) {
          flags.hasTransitions = true;
          timings.transitionDuration = maxDuration;
          applyOnlyDuration = node.style[TRANSITION_PROP + PROPERTY_KEY].length > 0;
          temporaryStyles.push(getCssTransitionDurationStyle(maxDuration, applyOnlyDuration));
        }

        if (flags.applyAnimationDuration) {
          flags.hasAnimations = true;
          timings.animationDuration = maxDuration;
          temporaryStyles.push(getCssKeyframeDurationStyle(maxDuration));
        }
      }

      if (maxDuration === 0 && !flags.recalculateTimingStyles) {
        return closeAndReturnNoopAnimator();
      }

      if (options.delay != null) {
        var delayStyle;
        if (typeof options.delay !== "boolean") {
          delayStyle = parseFloat(options.delay);
          // number in options.delay means we have to recalculate the delay for the closing timeout
          maxDelay = Math.max(delayStyle, 0);
        }

        if (flags.applyTransitionDelay) {
          temporaryStyles.push(getCssDelayStyle(delayStyle));
        }

        if (flags.applyAnimationDelay) {
          temporaryStyles.push(getCssDelayStyle(delayStyle, true));
        }
      }

      // we need to recalculate the delay value since we used a pre-emptive negative
      // delay value and the delay value is required for the final event checking. This
      // property will ensure that this will happen after the RAF phase has passed.
      if (options.duration == null && timings.transitionDuration > 0) {
        flags.recalculateTimingStyles = flags.recalculateTimingStyles || isFirst;
      }

      maxDelayTime = maxDelay * ONE_SECOND;
      maxDurationTime = maxDuration * ONE_SECOND;
      if (!options.skipBlocking) {
        flags.blockTransition = timings.transitionDuration > 0;
        flags.blockKeyframeAnimation = timings.animationDuration > 0 &&
                                       stagger.animationDelay > 0 &&
                                       stagger.animationDuration === 0;
      }

      if (options.from) {
        if (options.cleanupStyles) {
          registerRestorableStyles(restoreStyles, node, Object.keys(options.from));
        }
        applyAnimationFromStyles(element, options);
      }

      if (flags.blockTransition || flags.blockKeyframeAnimation) {
        applyBlocking(maxDuration);
      } else if (!options.skipBlocking) {
        blockTransitions(node, false);
      }

      // TODO(matsko): for 1.5 change this code to have an animator object for better debugging
      return {
        $$willAnimate: true,
        end: endFn,
        start: function() {
          if (animationClosed) return;

          runnerHost = {
            end: endFn,
            cancel: cancelFn,
            resume: null, //this will be set during the start() phase
            pause: null
          };

          runner = new $$AnimateRunner(runnerHost);

          waitUntilQuiet(start);

          // we don't have access to pause/resume the animation
          // since it hasn't run yet. AnimateRunner will therefore
          // set noop functions for resume and pause and they will
          // later be overridden once the animation is triggered
          return runner;
        }
      };

      function endFn() {
        close();
      }

      function cancelFn() {
        close(true);
      }

      function close(rejected) { // jshint ignore:line
        // if the promise has been called already then we shouldn't close
        // the animation again
        if (animationClosed || (animationCompleted && animationPaused)) return;
        animationClosed = true;
        animationPaused = false;

        if (!options.$$skipPreparationClasses) {
          $$jqLite.removeClass(element, preparationClasses);
        }
        $$jqLite.removeClass(element, activeClasses);

        blockKeyframeAnimations(node, false);
        blockTransitions(node, false);

        forEach(temporaryStyles, function(entry) {
          // There is only one way to remove inline style properties entirely from elements.
          // By using `removeProperty` this works, but we need to convert camel-cased CSS
          // styles down to hyphenated values.
          node.style[entry[0]] = '';
        });

        applyAnimationClasses(element, options);
        applyAnimationStyles(element, options);

        if (Object.keys(restoreStyles).length) {
          forEach(restoreStyles, function(value, prop) {
            value ? node.style.setProperty(prop, value)
                  : node.style.removeProperty(prop);
          });
        }

        // the reason why we have this option is to allow a synchronous closing callback
        // that is fired as SOON as the animation ends (when the CSS is removed) or if
        // the animation never takes off at all. A good example is a leave animation since
        // the element must be removed just after the animation is over or else the element
        // will appear on screen for one animation frame causing an overbearing flicker.
        if (options.onDone) {
          options.onDone();
        }

        if (events && events.length) {
          // Remove the transitionend / animationend listener(s)
          element.off(events.join(' '), onAnimationProgress);
        }

        //Cancel the fallback closing timeout and remove the timer data
        var animationTimerData = element.data(ANIMATE_TIMER_KEY);
        if (animationTimerData) {
          $timeout.cancel(animationTimerData[0].timer);
          element.removeData(ANIMATE_TIMER_KEY);
        }

        // if the preparation function fails then the promise is not setup
        if (runner) {
          runner.complete(!rejected);
        }
      }

      function applyBlocking(duration) {
        if (flags.blockTransition) {
          blockTransitions(node, duration);
        }

        if (flags.blockKeyframeAnimation) {
          blockKeyframeAnimations(node, !!duration);
        }
      }

      function closeAndReturnNoopAnimator() {
        runner = new $$AnimateRunner({
          end: endFn,
          cancel: cancelFn
        });

        // should flush the cache animation
        waitUntilQuiet(noop);
        close();

        return {
          $$willAnimate: false,
          start: function() {
            return runner;
          },
          end: endFn
        };
      }

      function onAnimationProgress(event) {
        event.stopPropagation();
        var ev = event.originalEvent || event;

        // we now always use `Date.now()` due to the recent changes with
        // event.timeStamp in Firefox, Webkit and Chrome (see #13494 for more info)
        var timeStamp = ev.$manualTimeStamp || Date.now();

        /* Firefox (or possibly just Gecko) likes to not round values up
         * when a ms measurement is used for the animation */
        var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));

        /* $manualTimeStamp is a mocked timeStamp value which is set
         * within browserTrigger(). This is only here so that tests can
         * mock animations properly. Real events fallback to event.timeStamp,
         * or, if they don't, then a timeStamp is automatically created for them.
         * We're checking to see if the timeStamp surpasses the expected delay,
         * but we're using elapsedTime instead of the timeStamp on the 2nd
         * pre-condition since animationPauseds sometimes close off early */
        if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {
          // we set this flag to ensure that if the transition is paused then, when resumed,
          // the animation will automatically close itself since transitions cannot be paused.
          animationCompleted = true;
          close();
        }
      }

      function start() {
        if (animationClosed) return;
        if (!node.parentNode) {
          close();
          return;
        }

        // even though we only pause keyframe animations here the pause flag
        // will still happen when transitions are used. Only the transition will
        // not be paused since that is not possible. If the animation ends when
        // paused then it will not complete until unpaused or cancelled.
        var playPause = function(playAnimation) {
          if (!animationCompleted) {
            animationPaused = !playAnimation;
            if (timings.animationDuration) {
              var value = blockKeyframeAnimations(node, animationPaused);
              animationPaused
                  ? temporaryStyles.push(value)
                  : removeFromArray(temporaryStyles, value);
            }
          } else if (animationPaused && playAnimation) {
            animationPaused = false;
            close();
          }
        };

        // checking the stagger duration prevents an accidentally cascade of the CSS delay style
        // being inherited from the parent. If the transition duration is zero then we can safely
        // rely that the delay value is an intentional stagger delay style.
        var maxStagger = itemIndex > 0
                         && ((timings.transitionDuration && stagger.transitionDuration === 0) ||
                            (timings.animationDuration && stagger.animationDuration === 0))
                         && Math.max(stagger.animationDelay, stagger.transitionDelay);
        if (maxStagger) {
          $timeout(triggerAnimationStart,
                   Math.floor(maxStagger * itemIndex * ONE_SECOND),
                   false);
        } else {
          triggerAnimationStart();
        }

        // this will decorate the existing promise runner with pause/resume methods
        runnerHost.resume = function() {
          playPause(true);
        };

        runnerHost.pause = function() {
          playPause(false);
        };

        function triggerAnimationStart() {
          // just incase a stagger animation kicks in when the animation
          // itself was cancelled entirely
          if (animationClosed) return;

          applyBlocking(false);

          forEach(temporaryStyles, function(entry) {
            var key = entry[0];
            var value = entry[1];
            node.style[key] = value;
          });

          applyAnimationClasses(element, options);
          $$jqLite.addClass(element, activeClasses);

          if (flags.recalculateTimingStyles) {
            fullClassName = node.className + ' ' + preparationClasses;
            cacheKey = gcsHashFn(node, fullClassName);

            timings = computeTimings(node, fullClassName, cacheKey);
            relativeDelay = timings.maxDelay;
            maxDelay = Math.max(relativeDelay, 0);
            maxDuration = timings.maxDuration;

            if (maxDuration === 0) {
              close();
              return;
            }

            flags.hasTransitions = timings.transitionDuration > 0;
            flags.hasAnimations = timings.animationDuration > 0;
          }

          if (flags.applyAnimationDelay) {
            relativeDelay = typeof options.delay !== "boolean" && truthyTimingValue(options.delay)
                  ? parseFloat(options.delay)
                  : relativeDelay;

            maxDelay = Math.max(relativeDelay, 0);
            timings.animationDelay = relativeDelay;
            delayStyle = getCssDelayStyle(relativeDelay, true);
            temporaryStyles.push(delayStyle);
            node.style[delayStyle[0]] = delayStyle[1];
          }

          maxDelayTime = maxDelay * ONE_SECOND;
          maxDurationTime = maxDuration * ONE_SECOND;

          if (options.easing) {
            var easeProp, easeVal = options.easing;
            if (flags.hasTransitions) {
              easeProp = TRANSITION_PROP + TIMING_KEY;
              temporaryStyles.push([easeProp, easeVal]);
              node.style[easeProp] = easeVal;
            }
            if (flags.hasAnimations) {
              easeProp = ANIMATION_PROP + TIMING_KEY;
              temporaryStyles.push([easeProp, easeVal]);
              node.style[easeProp] = easeVal;
            }
          }

          if (timings.transitionDuration) {
            events.push(TRANSITIONEND_EVENT);
          }

          if (timings.animationDuration) {
            events.push(ANIMATIONEND_EVENT);
          }

          startTime = Date.now();
          var timerTime = maxDelayTime + CLOSING_TIME_BUFFER * maxDurationTime;
          var endTime = startTime + timerTime;

          var animationsData = element.data(ANIMATE_TIMER_KEY) || [];
          var setupFallbackTimer = true;
          if (animationsData.length) {
            var currentTimerData = animationsData[0];
            setupFallbackTimer = endTime > currentTimerData.expectedEndTime;
            if (setupFallbackTimer) {
              $timeout.cancel(currentTimerData.timer);
            } else {
              animationsData.push(close);
            }
          }

          if (setupFallbackTimer) {
            var timer = $timeout(onAnimationExpired, timerTime, false);
            animationsData[0] = {
              timer: timer,
              expectedEndTime: endTime
            };
            animationsData.push(close);
            element.data(ANIMATE_TIMER_KEY, animationsData);
          }

          if (events.length) {
            element.on(events.join(' '), onAnimationProgress);
          }

          if (options.to) {
            if (options.cleanupStyles) {
              registerRestorableStyles(restoreStyles, node, Object.keys(options.to));
            }
            applyAnimationToStyles(element, options);
          }
        }

        function onAnimationExpired() {
          var animationsData = element.data(ANIMATE_TIMER_KEY);

          // this will be false in the event that the element was
          // removed from the DOM (via a leave animation or something
          // similar)
          if (animationsData) {
            for (var i = 1; i < animationsData.length; i++) {
              animationsData[i]();
            }
            element.removeData(ANIMATE_TIMER_KEY);
          }
        }
      }
    };
  }];
}];

var $$AnimateCssDriverProvider = ['$$animationProvider', function($$animationProvider) {
  $$animationProvider.drivers.push('$$animateCssDriver');

  var NG_ANIMATE_SHIM_CLASS_NAME = 'ng-animate-shim';
  var NG_ANIMATE_ANCHOR_CLASS_NAME = 'ng-anchor';

  var NG_OUT_ANCHOR_CLASS_NAME = 'ng-anchor-out';
  var NG_IN_ANCHOR_CLASS_NAME = 'ng-anchor-in';

  function isDocumentFragment(node) {
    return node.parentNode && node.parentNode.nodeType === 11;
  }

  this.$get = ['$animateCss', '$rootScope', '$$AnimateRunner', '$rootElement', '$sniffer', '$$jqLite', '$document',
       function($animateCss,   $rootScope,   $$AnimateRunner,   $rootElement,   $sniffer,   $$jqLite,   $document) {

    // only browsers that support these properties can render animations
    if (!$sniffer.animations && !$sniffer.transitions) return noop;

    var bodyNode = $document[0].body;
    var rootNode = getDomNode($rootElement);

    var rootBodyElement = jqLite(
      // this is to avoid using something that exists outside of the body
      // we also special case the doc fragment case because our unit test code
      // appends the $rootElement to the body after the app has been bootstrapped
      isDocumentFragment(rootNode) || bodyNode.contains(rootNode) ? rootNode : bodyNode
    );

    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

    return function initDriverFn(animationDetails) {
      return animationDetails.from && animationDetails.to
          ? prepareFromToAnchorAnimation(animationDetails.from,
                                         animationDetails.to,
                                         animationDetails.classes,
                                         animationDetails.anchors)
          : prepareRegularAnimation(animationDetails);
    };

    function filterCssClasses(classes) {
      //remove all the `ng-` stuff
      return classes.replace(/\bng-\S+\b/g, '');
    }

    function getUniqueValues(a, b) {
      if (isString(a)) a = a.split(' ');
      if (isString(b)) b = b.split(' ');
      return a.filter(function(val) {
        return b.indexOf(val) === -1;
      }).join(' ');
    }

    function prepareAnchoredAnimation(classes, outAnchor, inAnchor) {
      var clone = jqLite(getDomNode(outAnchor).cloneNode(true));
      var startingClasses = filterCssClasses(getClassVal(clone));

      outAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);
      inAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);

      clone.addClass(NG_ANIMATE_ANCHOR_CLASS_NAME);

      rootBodyElement.append(clone);

      var animatorIn, animatorOut = prepareOutAnimation();

      // the user may not end up using the `out` animation and
      // only making use of the `in` animation or vice-versa.
      // In either case we should allow this and not assume the
      // animation is over unless both animations are not used.
      if (!animatorOut) {
        animatorIn = prepareInAnimation();
        if (!animatorIn) {
          return end();
        }
      }

      var startingAnimator = animatorOut || animatorIn;

      return {
        start: function() {
          var runner;

          var currentAnimation = startingAnimator.start();
          currentAnimation.done(function() {
            currentAnimation = null;
            if (!animatorIn) {
              animatorIn = prepareInAnimation();
              if (animatorIn) {
                currentAnimation = animatorIn.start();
                currentAnimation.done(function() {
                  currentAnimation = null;
                  end();
                  runner.complete();
                });
                return currentAnimation;
              }
            }
            // in the event that there is no `in` animation
            end();
            runner.complete();
          });

          runner = new $$AnimateRunner({
            end: endFn,
            cancel: endFn
          });

          return runner;

          function endFn() {
            if (currentAnimation) {
              currentAnimation.end();
            }
          }
        }
      };

      function calculateAnchorStyles(anchor) {
        var styles = {};

        var coords = getDomNode(anchor).getBoundingClientRect();

        // we iterate directly since safari messes up and doesn't return
        // all the keys for the coords object when iterated
        forEach(['width','height','top','left'], function(key) {
          var value = coords[key];
          switch (key) {
            case 'top':
              value += bodyNode.scrollTop;
              break;
            case 'left':
              value += bodyNode.scrollLeft;
              break;
          }
          styles[key] = Math.floor(value) + 'px';
        });
        return styles;
      }

      function prepareOutAnimation() {
        var animator = $animateCss(clone, {
          addClass: NG_OUT_ANCHOR_CLASS_NAME,
          delay: true,
          from: calculateAnchorStyles(outAnchor)
        });

        // read the comment within `prepareRegularAnimation` to understand
        // why this check is necessary
        return animator.$$willAnimate ? animator : null;
      }

      function getClassVal(element) {
        return element.attr('class') || '';
      }

      function prepareInAnimation() {
        var endingClasses = filterCssClasses(getClassVal(inAnchor));
        var toAdd = getUniqueValues(endingClasses, startingClasses);
        var toRemove = getUniqueValues(startingClasses, endingClasses);

        var animator = $animateCss(clone, {
          to: calculateAnchorStyles(inAnchor),
          addClass: NG_IN_ANCHOR_CLASS_NAME + ' ' + toAdd,
          removeClass: NG_OUT_ANCHOR_CLASS_NAME + ' ' + toRemove,
          delay: true
        });

        // read the comment within `prepareRegularAnimation` to understand
        // why this check is necessary
        return animator.$$willAnimate ? animator : null;
      }

      function end() {
        clone.remove();
        outAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);
        inAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);
      }
    }

    function prepareFromToAnchorAnimation(from, to, classes, anchors) {
      var fromAnimation = prepareRegularAnimation(from, noop);
      var toAnimation = prepareRegularAnimation(to, noop);

      var anchorAnimations = [];
      forEach(anchors, function(anchor) {
        var outElement = anchor['out'];
        var inElement = anchor['in'];
        var animator = prepareAnchoredAnimation(classes, outElement, inElement);
        if (animator) {
          anchorAnimations.push(animator);
        }
      });

      // no point in doing anything when there are no elements to animate
      if (!fromAnimation && !toAnimation && anchorAnimations.length === 0) return;

      return {
        start: function() {
          var animationRunners = [];

          if (fromAnimation) {
            animationRunners.push(fromAnimation.start());
          }

          if (toAnimation) {
            animationRunners.push(toAnimation.start());
          }

          forEach(anchorAnimations, function(animation) {
            animationRunners.push(animation.start());
          });

          var runner = new $$AnimateRunner({
            end: endFn,
            cancel: endFn // CSS-driven animations cannot be cancelled, only ended
          });

          $$AnimateRunner.all(animationRunners, function(status) {
            runner.complete(status);
          });

          return runner;

          function endFn() {
            forEach(animationRunners, function(runner) {
              runner.end();
            });
          }
        }
      };
    }

    function prepareRegularAnimation(animationDetails) {
      var element = animationDetails.element;
      var options = animationDetails.options || {};

      if (animationDetails.structural) {
        options.event = animationDetails.event;
        options.structural = true;
        options.applyClassesEarly = true;

        // we special case the leave animation since we want to ensure that
        // the element is removed as soon as the animation is over. Otherwise
        // a flicker might appear or the element may not be removed at all
        if (animationDetails.event === 'leave') {
          options.onDone = options.domOperation;
        }
      }

      // We assign the preparationClasses as the actual animation event since
      // the internals of $animateCss will just suffix the event token values
      // with `-active` to trigger the animation.
      if (options.preparationClasses) {
        options.event = concatWithSpace(options.event, options.preparationClasses);
      }

      var animator = $animateCss(element, options);

      // the driver lookup code inside of $$animation attempts to spawn a
      // driver one by one until a driver returns a.$$willAnimate animator object.
      // $animateCss will always return an object, however, it will pass in
      // a flag as a hint as to whether an animation was detected or not
      return animator.$$willAnimate ? animator : null;
    }
  }];
}];

// TODO(matsko): use caching here to speed things up for detection
// TODO(matsko): add documentation
//  by the time...

var $$AnimateJsProvider = ['$animateProvider', function($animateProvider) {
  this.$get = ['$injector', '$$AnimateRunner', '$$jqLite',
       function($injector,   $$AnimateRunner,   $$jqLite) {

    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);
         // $animateJs(element, 'enter');
    return function(element, event, classes, options) {
      var animationClosed = false;

      // the `classes` argument is optional and if it is not used
      // then the classes will be resolved from the element's className
      // property as well as options.addClass/options.removeClass.
      if (arguments.length === 3 && isObject(classes)) {
        options = classes;
        classes = null;
      }

      options = prepareAnimationOptions(options);
      if (!classes) {
        classes = element.attr('class') || '';
        if (options.addClass) {
          classes += ' ' + options.addClass;
        }
        if (options.removeClass) {
          classes += ' ' + options.removeClass;
        }
      }

      var classesToAdd = options.addClass;
      var classesToRemove = options.removeClass;

      // the lookupAnimations function returns a series of animation objects that are
      // matched up with one or more of the CSS classes. These animation objects are
      // defined via the module.animation factory function. If nothing is detected then
      // we don't return anything which then makes $animation query the next driver.
      var animations = lookupAnimations(classes);
      var before, after;
      if (animations.length) {
        var afterFn, beforeFn;
        if (event == 'leave') {
          beforeFn = 'leave';
          afterFn = 'afterLeave'; // TODO(matsko): get rid of this
        } else {
          beforeFn = 'before' + event.charAt(0).toUpperCase() + event.substr(1);
          afterFn = event;
        }

        if (event !== 'enter' && event !== 'move') {
          before = packageAnimations(element, event, options, animations, beforeFn);
        }
        after  = packageAnimations(element, event, options, animations, afterFn);
      }

      // no matching animations
      if (!before && !after) return;

      function applyOptions() {
        options.domOperation();
        applyAnimationClasses(element, options);
      }

      function close() {
        animationClosed = true;
        applyOptions();
        applyAnimationStyles(element, options);
      }

      var runner;

      return {
        $$willAnimate: true,
        end: function() {
          if (runner) {
            runner.end();
          } else {
            close();
            runner = new $$AnimateRunner();
            runner.complete(true);
          }
          return runner;
        },
        start: function() {
          if (runner) {
            return runner;
          }

          runner = new $$AnimateRunner();
          var closeActiveAnimations;
          var chain = [];

          if (before) {
            chain.push(function(fn) {
              closeActiveAnimations = before(fn);
            });
          }

          if (chain.length) {
            chain.push(function(fn) {
              applyOptions();
              fn(true);
            });
          } else {
            applyOptions();
          }

          if (after) {
            chain.push(function(fn) {
              closeActiveAnimations = after(fn);
            });
          }

          runner.setHost({
            end: function() {
              endAnimations();
            },
            cancel: function() {
              endAnimations(true);
            }
          });

          $$AnimateRunner.chain(chain, onComplete);
          return runner;

          function onComplete(success) {
            close(success);
            runner.complete(success);
          }

          function endAnimations(cancelled) {
            if (!animationClosed) {
              (closeActiveAnimations || noop)(cancelled);
              onComplete(cancelled);
            }
          }
        }
      };

      function executeAnimationFn(fn, element, event, options, onDone) {
        var args;
        switch (event) {
          case 'animate':
            args = [element, options.from, options.to, onDone];
            break;

          case 'setClass':
            args = [element, classesToAdd, classesToRemove, onDone];
            break;

          case 'addClass':
            args = [element, classesToAdd, onDone];
            break;

          case 'removeClass':
            args = [element, classesToRemove, onDone];
            break;

          default:
            args = [element, onDone];
            break;
        }

        args.push(options);

        var value = fn.apply(fn, args);
        if (value) {
          if (isFunction(value.start)) {
            value = value.start();
          }

          if (value instanceof $$AnimateRunner) {
            value.done(onDone);
          } else if (isFunction(value)) {
            // optional onEnd / onCancel callback
            return value;
          }
        }

        return noop;
      }

      function groupEventedAnimations(element, event, options, animations, fnName) {
        var operations = [];
        forEach(animations, function(ani) {
          var animation = ani[fnName];
          if (!animation) return;

          // note that all of these animations will run in parallel
          operations.push(function() {
            var runner;
            var endProgressCb;

            var resolved = false;
            var onAnimationComplete = function(rejected) {
              if (!resolved) {
                resolved = true;
                (endProgressCb || noop)(rejected);
                runner.complete(!rejected);
              }
            };

            runner = new $$AnimateRunner({
              end: function() {
                onAnimationComplete();
              },
              cancel: function() {
                onAnimationComplete(true);
              }
            });

            endProgressCb = executeAnimationFn(animation, element, event, options, function(result) {
              var cancelled = result === false;
              onAnimationComplete(cancelled);
            });

            return runner;
          });
        });

        return operations;
      }

      function packageAnimations(element, event, options, animations, fnName) {
        var operations = groupEventedAnimations(element, event, options, animations, fnName);
        if (operations.length === 0) {
          var a,b;
          if (fnName === 'beforeSetClass') {
            a = groupEventedAnimations(element, 'removeClass', options, animations, 'beforeRemoveClass');
            b = groupEventedAnimations(element, 'addClass', options, animations, 'beforeAddClass');
          } else if (fnName === 'setClass') {
            a = groupEventedAnimations(element, 'removeClass', options, animations, 'removeClass');
            b = groupEventedAnimations(element, 'addClass', options, animations, 'addClass');
          }

          if (a) {
            operations = operations.concat(a);
          }
          if (b) {
            operations = operations.concat(b);
          }
        }

        if (operations.length === 0) return;

        // TODO(matsko): add documentation
        return function startAnimation(callback) {
          var runners = [];
          if (operations.length) {
            forEach(operations, function(animateFn) {
              runners.push(animateFn());
            });
          }

          runners.length ? $$AnimateRunner.all(runners, callback) : callback();

          return function endFn(reject) {
            forEach(runners, function(runner) {
              reject ? runner.cancel() : runner.end();
            });
          };
        };
      }
    };

    function lookupAnimations(classes) {
      classes = isArray(classes) ? classes : classes.split(' ');
      var matches = [], flagMap = {};
      for (var i=0; i < classes.length; i++) {
        var klass = classes[i],
            animationFactory = $animateProvider.$$registeredAnimations[klass];
        if (animationFactory && !flagMap[klass]) {
          matches.push($injector.get(animationFactory));
          flagMap[klass] = true;
        }
      }
      return matches;
    }
  }];
}];

var $$AnimateJsDriverProvider = ['$$animationProvider', function($$animationProvider) {
  $$animationProvider.drivers.push('$$animateJsDriver');
  this.$get = ['$$animateJs', '$$AnimateRunner', function($$animateJs, $$AnimateRunner) {
    return function initDriverFn(animationDetails) {
      if (animationDetails.from && animationDetails.to) {
        var fromAnimation = prepareAnimation(animationDetails.from);
        var toAnimation = prepareAnimation(animationDetails.to);
        if (!fromAnimation && !toAnimation) return;

        return {
          start: function() {
            var animationRunners = [];

            if (fromAnimation) {
              animationRunners.push(fromAnimation.start());
            }

            if (toAnimation) {
              animationRunners.push(toAnimation.start());
            }

            $$AnimateRunner.all(animationRunners, done);

            var runner = new $$AnimateRunner({
              end: endFnFactory(),
              cancel: endFnFactory()
            });

            return runner;

            function endFnFactory() {
              return function() {
                forEach(animationRunners, function(runner) {
                  // at this point we cannot cancel animations for groups just yet. 1.5+
                  runner.end();
                });
              };
            }

            function done(status) {
              runner.complete(status);
            }
          }
        };
      } else {
        return prepareAnimation(animationDetails);
      }
    };

    function prepareAnimation(animationDetails) {
      // TODO(matsko): make sure to check for grouped animations and delegate down to normal animations
      var element = animationDetails.element;
      var event = animationDetails.event;
      var options = animationDetails.options;
      var classes = animationDetails.classes;
      return $$animateJs(element, event, classes, options);
    }
  }];
}];

var NG_ANIMATE_ATTR_NAME = 'data-ng-animate';
var NG_ANIMATE_PIN_DATA = '$ngAnimatePin';
var $$AnimateQueueProvider = ['$animateProvider', function($animateProvider) {
  var PRE_DIGEST_STATE = 1;
  var RUNNING_STATE = 2;
  var ONE_SPACE = ' ';

  var rules = this.rules = {
    skip: [],
    cancel: [],
    join: []
  };

  function makeTruthyCssClassMap(classString) {
    if (!classString) {
      return null;
    }

    var keys = classString.split(ONE_SPACE);
    var map = Object.create(null);

    forEach(keys, function(key) {
      map[key] = true;
    });
    return map;
  }

  function hasMatchingClasses(newClassString, currentClassString) {
    if (newClassString && currentClassString) {
      var currentClassMap = makeTruthyCssClassMap(currentClassString);
      return newClassString.split(ONE_SPACE).some(function(className) {
        return currentClassMap[className];
      });
    }
  }

  function isAllowed(ruleType, element, currentAnimation, previousAnimation) {
    return rules[ruleType].some(function(fn) {
      return fn(element, currentAnimation, previousAnimation);
    });
  }

  function hasAnimationClasses(animation, and) {
    var a = (animation.addClass || '').length > 0;
    var b = (animation.removeClass || '').length > 0;
    return and ? a && b : a || b;
  }

  rules.join.push(function(element, newAnimation, currentAnimation) {
    // if the new animation is class-based then we can just tack that on
    return !newAnimation.structural && hasAnimationClasses(newAnimation);
  });

  rules.skip.push(function(element, newAnimation, currentAnimation) {
    // there is no need to animate anything if no classes are being added and
    // there is no structural animation that will be triggered
    return !newAnimation.structural && !hasAnimationClasses(newAnimation);
  });

  rules.skip.push(function(element, newAnimation, currentAnimation) {
    // why should we trigger a new structural animation if the element will
    // be removed from the DOM anyway?
    return currentAnimation.event == 'leave' && newAnimation.structural;
  });

  rules.skip.push(function(element, newAnimation, currentAnimation) {
    // if there is an ongoing current animation then don't even bother running the class-based animation
    return currentAnimation.structural && currentAnimation.state === RUNNING_STATE && !newAnimation.structural;
  });

  rules.cancel.push(function(element, newAnimation, currentAnimation) {
    // there can never be two structural animations running at the same time
    return currentAnimation.structural && newAnimation.structural;
  });

  rules.cancel.push(function(element, newAnimation, currentAnimation) {
    // if the previous animation is already running, but the new animation will
    // be triggered, but the new animation is structural
    return currentAnimation.state === RUNNING_STATE && newAnimation.structural;
  });

  rules.cancel.push(function(element, newAnimation, currentAnimation) {
    var nA = newAnimation.addClass;
    var nR = newAnimation.removeClass;
    var cA = currentAnimation.addClass;
    var cR = currentAnimation.removeClass;

    // early detection to save the global CPU shortage :)
    if ((isUndefined(nA) && isUndefined(nR)) || (isUndefined(cA) && isUndefined(cR))) {
      return false;
    }

    return hasMatchingClasses(nA, cR) || hasMatchingClasses(nR, cA);
  });

  this.$get = ['$$rAF', '$rootScope', '$rootElement', '$document', '$$HashMap',
               '$$animation', '$$AnimateRunner', '$templateRequest', '$$jqLite', '$$forceReflow',
       function($$rAF,   $rootScope,   $rootElement,   $document,   $$HashMap,
                $$animation,   $$AnimateRunner,   $templateRequest,   $$jqLite,   $$forceReflow) {

    var activeAnimationsLookup = new $$HashMap();
    var disabledElementsLookup = new $$HashMap();
    var animationsEnabled = null;

    function postDigestTaskFactory() {
      var postDigestCalled = false;
      return function(fn) {
        // we only issue a call to postDigest before
        // it has first passed. This prevents any callbacks
        // from not firing once the animation has completed
        // since it will be out of the digest cycle.
        if (postDigestCalled) {
          fn();
        } else {
          $rootScope.$$postDigest(function() {
            postDigestCalled = true;
            fn();
          });
        }
      };
    }

    // Wait until all directive and route-related templates are downloaded and
    // compiled. The $templateRequest.totalPendingRequests variable keeps track of
    // all of the remote templates being currently downloaded. If there are no
    // templates currently downloading then the watcher will still fire anyway.
    var deregisterWatch = $rootScope.$watch(
      function() { return $templateRequest.totalPendingRequests === 0; },
      function(isEmpty) {
        if (!isEmpty) return;
        deregisterWatch();

        // Now that all templates have been downloaded, $animate will wait until
        // the post digest queue is empty before enabling animations. By having two
        // calls to $postDigest calls we can ensure that the flag is enabled at the
        // very end of the post digest queue. Since all of the animations in $animate
        // use $postDigest, it's important that the code below executes at the end.
        // This basically means that the page is fully downloaded and compiled before
        // any animations are triggered.
        $rootScope.$$postDigest(function() {
          $rootScope.$$postDigest(function() {
            // we check for null directly in the event that the application already called
            // .enabled() with whatever arguments that it provided it with
            if (animationsEnabled === null) {
              animationsEnabled = true;
            }
          });
        });
      }
    );

    var callbackRegistry = {};

    // remember that the classNameFilter is set during the provider/config
    // stage therefore we can optimize here and setup a helper function
    var classNameFilter = $animateProvider.classNameFilter();
    var isAnimatableClassName = !classNameFilter
              ? function() { return true; }
              : function(className) {
                return classNameFilter.test(className);
              };

    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

    function normalizeAnimationDetails(element, animation) {
      return mergeAnimationDetails(element, animation, {});
    }

    // IE9-11 has no method "contains" in SVG element and in Node.prototype. Bug #10259.
    var contains = Node.prototype.contains || function(arg) {
      // jshint bitwise: false
      return this === arg || !!(this.compareDocumentPosition(arg) & 16);
      // jshint bitwise: true
    };

    function findCallbacks(parent, element, event) {
      var targetNode = getDomNode(element);
      var targetParentNode = getDomNode(parent);

      var matches = [];
      var entries = callbackRegistry[event];
      if (entries) {
        forEach(entries, function(entry) {
          if (contains.call(entry.node, targetNode)) {
            matches.push(entry.callback);
          } else if (event === 'leave' && contains.call(entry.node, targetParentNode)) {
            matches.push(entry.callback);
          }
        });
      }

      return matches;
    }

    return {
      on: function(event, container, callback) {
        var node = extractElementNode(container);
        callbackRegistry[event] = callbackRegistry[event] || [];
        callbackRegistry[event].push({
          node: node,
          callback: callback
        });
      },

      off: function(event, container, callback) {
        var entries = callbackRegistry[event];
        if (!entries) return;

        callbackRegistry[event] = arguments.length === 1
            ? null
            : filterFromRegistry(entries, container, callback);

        function filterFromRegistry(list, matchContainer, matchCallback) {
          var containerNode = extractElementNode(matchContainer);
          return list.filter(function(entry) {
            var isMatch = entry.node === containerNode &&
                            (!matchCallback || entry.callback === matchCallback);
            return !isMatch;
          });
        }
      },

      pin: function(element, parentElement) {
        assertArg(isElement(element), 'element', 'not an element');
        assertArg(isElement(parentElement), 'parentElement', 'not an element');
        element.data(NG_ANIMATE_PIN_DATA, parentElement);
      },

      push: function(element, event, options, domOperation) {
        options = options || {};
        options.domOperation = domOperation;
        return queueAnimation(element, event, options);
      },

      // this method has four signatures:
      //  () - global getter
      //  (bool) - global setter
      //  (element) - element getter
      //  (element, bool) - element setter<F37>
      enabled: function(element, bool) {
        var argCount = arguments.length;

        if (argCount === 0) {
          // () - Global getter
          bool = !!animationsEnabled;
        } else {
          var hasElement = isElement(element);

          if (!hasElement) {
            // (bool) - Global setter
            bool = animationsEnabled = !!element;
          } else {
            var node = getDomNode(element);
            var recordExists = disabledElementsLookup.get(node);

            if (argCount === 1) {
              // (element) - Element getter
              bool = !recordExists;
            } else {
              // (element, bool) - Element setter
              disabledElementsLookup.put(node, !bool);
            }
          }
        }

        return bool;
      }
    };

    function queueAnimation(element, event, initialOptions) {
      // we always make a copy of the options since
      // there should never be any side effects on
      // the input data when running `$animateCss`.
      var options = copy(initialOptions);

      var node, parent;
      element = stripCommentsFromElement(element);
      if (element) {
        node = getDomNode(element);
        parent = element.parent();
      }

      options = prepareAnimationOptions(options);

      // we create a fake runner with a working promise.
      // These methods will become available after the digest has passed
      var runner = new $$AnimateRunner();

      // this is used to trigger callbacks in postDigest mode
      var runInNextPostDigestOrNow = postDigestTaskFactory();

      if (isArray(options.addClass)) {
        options.addClass = options.addClass.join(' ');
      }

      if (options.addClass && !isString(options.addClass)) {
        options.addClass = null;
      }

      if (isArray(options.removeClass)) {
        options.removeClass = options.removeClass.join(' ');
      }

      if (options.removeClass && !isString(options.removeClass)) {
        options.removeClass = null;
      }

      if (options.from && !isObject(options.from)) {
        options.from = null;
      }

      if (options.to && !isObject(options.to)) {
        options.to = null;
      }

      // there are situations where a directive issues an animation for
      // a jqLite wrapper that contains only comment nodes... If this
      // happens then there is no way we can perform an animation
      if (!node) {
        close();
        return runner;
      }

      var className = [node.className, options.addClass, options.removeClass].join(' ');
      if (!isAnimatableClassName(className)) {
        close();
        return runner;
      }

      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;

      // this is a hard disable of all animations for the application or on
      // the element itself, therefore  there is no need to continue further
      // past this point if not enabled
      // Animations are also disabled if the document is currently hidden (page is not visible
      // to the user), because browsers slow down or do not flush calls to requestAnimationFrame
      var skipAnimations = !animationsEnabled || $document[0].hidden || disabledElementsLookup.get(node);
      var existingAnimation = (!skipAnimations && activeAnimationsLookup.get(node)) || {};
      var hasExistingAnimation = !!existingAnimation.state;

      // there is no point in traversing the same collection of parent ancestors if a followup
      // animation will be run on the same element that already did all that checking work
      if (!skipAnimations && (!hasExistingAnimation || existingAnimation.state != PRE_DIGEST_STATE)) {
        skipAnimations = !areAnimationsAllowed(element, parent, event);
      }

      if (skipAnimations) {
        close();
        return runner;
      }

      if (isStructural) {
        closeChildAnimations(element);
      }

      var newAnimation = {
        structural: isStructural,
        element: element,
        event: event,
        addClass: options.addClass,
        removeClass: options.removeClass,
        close: close,
        options: options,
        runner: runner
      };

      if (hasExistingAnimation) {
        var skipAnimationFlag = isAllowed('skip', element, newAnimation, existingAnimation);
        if (skipAnimationFlag) {
          if (existingAnimation.state === RUNNING_STATE) {
            close();
            return runner;
          } else {
            mergeAnimationDetails(element, existingAnimation, newAnimation);
            return existingAnimation.runner;
          }
        }
        var cancelAnimationFlag = isAllowed('cancel', element, newAnimation, existingAnimation);
        if (cancelAnimationFlag) {
          if (existingAnimation.state === RUNNING_STATE) {
            // this will end the animation right away and it is safe
            // to do so since the animation is already running and the
            // runner callback code will run in async
            existingAnimation.runner.end();
          } else if (existingAnimation.structural) {
            // this means that the animation is queued into a digest, but
            // hasn't started yet. Therefore it is safe to run the close
            // method which will call the runner methods in async.
            existingAnimation.close();
          } else {
            // this will merge the new animation options into existing animation options
            mergeAnimationDetails(element, existingAnimation, newAnimation);

            return existingAnimation.runner;
          }
        } else {
          // a joined animation means that this animation will take over the existing one
          // so an example would involve a leave animation taking over an enter. Then when
          // the postDigest kicks in the enter will be ignored.
          var joinAnimationFlag = isAllowed('join', element, newAnimation, existingAnimation);
          if (joinAnimationFlag) {
            if (existingAnimation.state === RUNNING_STATE) {
              normalizeAnimationDetails(element, newAnimation);
            } else {
              applyGeneratedPreparationClasses(element, isStructural ? event : null, options);

              event = newAnimation.event = existingAnimation.event;
              options = mergeAnimationDetails(element, existingAnimation, newAnimation);

              //we return the same runner since only the option values of this animation will
              //be fed into the `existingAnimation`.
              return existingAnimation.runner;
            }
          }
        }
      } else {
        // normalization in this case means that it removes redundant CSS classes that
        // already exist (addClass) or do not exist (removeClass) on the element
        normalizeAnimationDetails(element, newAnimation);
      }

      // when the options are merged and cleaned up we may end up not having to do
      // an animation at all, therefore we should check this before issuing a post
      // digest callback. Structural animations will always run no matter what.
      var isValidAnimation = newAnimation.structural;
      if (!isValidAnimation) {
        // animate (from/to) can be quickly checked first, otherwise we check if any classes are present
        isValidAnimation = (newAnimation.event === 'animate' && Object.keys(newAnimation.options.to || {}).length > 0)
                            || hasAnimationClasses(newAnimation);
      }

      if (!isValidAnimation) {
        close();
        clearElementAnimationState(element);
        return runner;
      }

      // the counter keeps track of cancelled animations
      var counter = (existingAnimation.counter || 0) + 1;
      newAnimation.counter = counter;

      markElementAnimationState(element, PRE_DIGEST_STATE, newAnimation);

      $rootScope.$$postDigest(function() {
        var animationDetails = activeAnimationsLookup.get(node);
        var animationCancelled = !animationDetails;
        animationDetails = animationDetails || {};

        // if addClass/removeClass is called before something like enter then the
        // registered parent element may not be present. The code below will ensure
        // that a final value for parent element is obtained
        var parentElement = element.parent() || [];

        // animate/structural/class-based animations all have requirements. Otherwise there
        // is no point in performing an animation. The parent node must also be set.
        var isValidAnimation = parentElement.length > 0
                                && (animationDetails.event === 'animate'
                                    || animationDetails.structural
                                    || hasAnimationClasses(animationDetails));

        // this means that the previous animation was cancelled
        // even if the follow-up animation is the same event
        if (animationCancelled || animationDetails.counter !== counter || !isValidAnimation) {
          // if another animation did not take over then we need
          // to make sure that the domOperation and options are
          // handled accordingly
          if (animationCancelled) {
            applyAnimationClasses(element, options);
            applyAnimationStyles(element, options);
          }

          // if the event changed from something like enter to leave then we do
          // it, otherwise if it's the same then the end result will be the same too
          if (animationCancelled || (isStructural && animationDetails.event !== event)) {
            options.domOperation();
            runner.end();
          }

          // in the event that the element animation was not cancelled or a follow-up animation
          // isn't allowed to animate from here then we need to clear the state of the element
          // so that any future animations won't read the expired animation data.
          if (!isValidAnimation) {
            clearElementAnimationState(element);
          }

          return;
        }

        // this combined multiple class to addClass / removeClass into a setClass event
        // so long as a structural event did not take over the animation
        event = !animationDetails.structural && hasAnimationClasses(animationDetails, true)
            ? 'setClass'
            : animationDetails.event;

        markElementAnimationState(element, RUNNING_STATE);
        var realRunner = $$animation(element, event, animationDetails.options);

        realRunner.done(function(status) {
          close(!status);
          var animationDetails = activeAnimationsLookup.get(node);
          if (animationDetails && animationDetails.counter === counter) {
            clearElementAnimationState(getDomNode(element));
          }
          notifyProgress(runner, event, 'close', {});
        });

        // this will update the runner's flow-control events based on
        // the `realRunner` object.
        runner.setHost(realRunner);
        notifyProgress(runner, event, 'start', {});
      });

      return runner;

      function notifyProgress(runner, event, phase, data) {
        runInNextPostDigestOrNow(function() {
          var callbacks = findCallbacks(parent, element, event);
          if (callbacks.length) {
            // do not optimize this call here to RAF because
            // we don't know how heavy the callback code here will
            // be and if this code is buffered then this can
            // lead to a performance regression.
            $$rAF(function() {
              forEach(callbacks, function(callback) {
                callback(element, phase, data);
              });
            });
          }
        });
        runner.progress(event, phase, data);
      }

      function close(reject) { // jshint ignore:line
        clearGeneratedClasses(element, options);
        applyAnimationClasses(element, options);
        applyAnimationStyles(element, options);
        options.domOperation();
        runner.complete(!reject);
      }
    }

    function closeChildAnimations(element) {
      var node = getDomNode(element);
      var children = node.querySelectorAll('[' + NG_ANIMATE_ATTR_NAME + ']');
      forEach(children, function(child) {
        var state = parseInt(child.getAttribute(NG_ANIMATE_ATTR_NAME));
        var animationDetails = activeAnimationsLookup.get(child);
        if (animationDetails) {
          switch (state) {
            case RUNNING_STATE:
              animationDetails.runner.end();
              /* falls through */
            case PRE_DIGEST_STATE:
              activeAnimationsLookup.remove(child);
              break;
          }
        }
      });
    }

    function clearElementAnimationState(element) {
      var node = getDomNode(element);
      node.removeAttribute(NG_ANIMATE_ATTR_NAME);
      activeAnimationsLookup.remove(node);
    }

    function isMatchingElement(nodeOrElmA, nodeOrElmB) {
      return getDomNode(nodeOrElmA) === getDomNode(nodeOrElmB);
    }

    /**
     * This fn returns false if any of the following is true:
     * a) animations on any parent element are disabled, and animations on the element aren't explicitly allowed
     * b) a parent element has an ongoing structural animation, and animateChildren is false
     * c) the element is not a child of the body
     * d) the element is not a child of the $rootElement
     */
    function areAnimationsAllowed(element, parentElement, event) {
      var bodyElement = jqLite($document[0].body);
      var bodyElementDetected = isMatchingElement(element, bodyElement) || element[0].nodeName === 'HTML';
      var rootElementDetected = isMatchingElement(element, $rootElement);
      var parentAnimationDetected = false;
      var animateChildren;
      var elementDisabled = disabledElementsLookup.get(getDomNode(element));

      var parentHost = element.data(NG_ANIMATE_PIN_DATA);
      if (parentHost) {
        parentElement = parentHost;
      }

      while (parentElement && parentElement.length) {
        if (!rootElementDetected) {
          // angular doesn't want to attempt to animate elements outside of the application
          // therefore we need to ensure that the rootElement is an ancestor of the current element
          rootElementDetected = isMatchingElement(parentElement, $rootElement);
        }

        var parentNode = parentElement[0];
        if (parentNode.nodeType !== ELEMENT_NODE) {
          // no point in inspecting the #document element
          break;
        }

        var details = activeAnimationsLookup.get(parentNode) || {};
        // either an enter, leave or move animation will commence
        // therefore we can't allow any animations to take place
        // but if a parent animation is class-based then that's ok
        if (!parentAnimationDetected) {
          var parentElementDisabled = disabledElementsLookup.get(parentNode);

          if (parentElementDisabled === true && elementDisabled !== false) {
            // disable animations if the user hasn't explicitly enabled animations on the
            // current element
            elementDisabled = true;
            // element is disabled via parent element, no need to check anything else
            break;
          } else if (parentElementDisabled === false) {
            elementDisabled = false;
          }
          parentAnimationDetected = details.structural;
        }

        if (isUndefined(animateChildren) || animateChildren === true) {
          var value = parentElement.data(NG_ANIMATE_CHILDREN_DATA);
          if (isDefined(value)) {
            animateChildren = value;
          }
        }

        // there is no need to continue traversing at this point
        if (parentAnimationDetected && animateChildren === false) break;

        if (!bodyElementDetected) {
          // we also need to ensure that the element is or will be a part of the body element
          // otherwise it is pointless to even issue an animation to be rendered
          bodyElementDetected = isMatchingElement(parentElement, bodyElement);
        }

        if (bodyElementDetected && rootElementDetected) {
          // If both body and root have been found, any other checks are pointless,
          // as no animation data should live outside the application
          break;
        }

        if (!rootElementDetected) {
          // If no rootElement is detected, check if the parentElement is pinned to another element
          parentHost = parentElement.data(NG_ANIMATE_PIN_DATA);
          if (parentHost) {
            // The pin target element becomes the next parent element
            parentElement = parentHost;
            continue;
          }
        }

        parentElement = parentElement.parent();
      }

      var allowAnimation = (!parentAnimationDetected || animateChildren) && elementDisabled !== true;
      return allowAnimation && rootElementDetected && bodyElementDetected;
    }

    function markElementAnimationState(element, state, details) {
      details = details || {};
      details.state = state;

      var node = getDomNode(element);
      node.setAttribute(NG_ANIMATE_ATTR_NAME, state);

      var oldValue = activeAnimationsLookup.get(node);
      var newValue = oldValue
          ? extend(oldValue, details)
          : details;
      activeAnimationsLookup.put(node, newValue);
    }
  }];
}];

var $$AnimationProvider = ['$animateProvider', function($animateProvider) {
  var NG_ANIMATE_REF_ATTR = 'ng-animate-ref';

  var drivers = this.drivers = [];

  var RUNNER_STORAGE_KEY = '$$animationRunner';

  function setRunner(element, runner) {
    element.data(RUNNER_STORAGE_KEY, runner);
  }

  function removeRunner(element) {
    element.removeData(RUNNER_STORAGE_KEY);
  }

  function getRunner(element) {
    return element.data(RUNNER_STORAGE_KEY);
  }

  this.$get = ['$$jqLite', '$rootScope', '$injector', '$$AnimateRunner', '$$HashMap', '$$rAFScheduler',
       function($$jqLite,   $rootScope,   $injector,   $$AnimateRunner,   $$HashMap,   $$rAFScheduler) {

    var animationQueue = [];
    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

    function sortAnimations(animations) {
      var tree = { children: [] };
      var i, lookup = new $$HashMap();

      // this is done first beforehand so that the hashmap
      // is filled with a list of the elements that will be animated
      for (i = 0; i < animations.length; i++) {
        var animation = animations[i];
        lookup.put(animation.domNode, animations[i] = {
          domNode: animation.domNode,
          fn: animation.fn,
          children: []
        });
      }

      for (i = 0; i < animations.length; i++) {
        processNode(animations[i]);
      }

      return flatten(tree);

      function processNode(entry) {
        if (entry.processed) return entry;
        entry.processed = true;

        var elementNode = entry.domNode;
        var parentNode = elementNode.parentNode;
        lookup.put(elementNode, entry);

        var parentEntry;
        while (parentNode) {
          parentEntry = lookup.get(parentNode);
          if (parentEntry) {
            if (!parentEntry.processed) {
              parentEntry = processNode(parentEntry);
            }
            break;
          }
          parentNode = parentNode.parentNode;
        }

        (parentEntry || tree).children.push(entry);
        return entry;
      }

      function flatten(tree) {
        var result = [];
        var queue = [];
        var i;

        for (i = 0; i < tree.children.length; i++) {
          queue.push(tree.children[i]);
        }

        var remainingLevelEntries = queue.length;
        var nextLevelEntries = 0;
        var row = [];

        for (i = 0; i < queue.length; i++) {
          var entry = queue[i];
          if (remainingLevelEntries <= 0) {
            remainingLevelEntries = nextLevelEntries;
            nextLevelEntries = 0;
            result.push(row);
            row = [];
          }
          row.push(entry.fn);
          entry.children.forEach(function(childEntry) {
            nextLevelEntries++;
            queue.push(childEntry);
          });
          remainingLevelEntries--;
        }

        if (row.length) {
          result.push(row);
        }

        return result;
      }
    }

    // TODO(matsko): document the signature in a better way
    return function(element, event, options) {
      options = prepareAnimationOptions(options);
      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;

      // there is no animation at the current moment, however
      // these runner methods will get later updated with the
      // methods leading into the driver's end/cancel methods
      // for now they just stop the animation from starting
      var runner = new $$AnimateRunner({
        end: function() { close(); },
        cancel: function() { close(true); }
      });

      if (!drivers.length) {
        close();
        return runner;
      }

      setRunner(element, runner);

      var classes = mergeClasses(element.attr('class'), mergeClasses(options.addClass, options.removeClass));
      var tempClasses = options.tempClasses;
      if (tempClasses) {
        classes += ' ' + tempClasses;
        options.tempClasses = null;
      }

      var prepareClassName;
      if (isStructural) {
        prepareClassName = 'ng-' + event + PREPARE_CLASS_SUFFIX;
        $$jqLite.addClass(element, prepareClassName);
      }

      animationQueue.push({
        // this data is used by the postDigest code and passed into
        // the driver step function
        element: element,
        classes: classes,
        event: event,
        structural: isStructural,
        options: options,
        beforeStart: beforeStart,
        close: close
      });

      element.on('$destroy', handleDestroyedElement);

      // we only want there to be one function called within the post digest
      // block. This way we can group animations for all the animations that
      // were apart of the same postDigest flush call.
      if (animationQueue.length > 1) return runner;

      $rootScope.$$postDigest(function() {
        var animations = [];
        forEach(animationQueue, function(entry) {
          // the element was destroyed early on which removed the runner
          // form its storage. This means we can't animate this element
          // at all and it already has been closed due to destruction.
          if (getRunner(entry.element)) {
            animations.push(entry);
          } else {
            entry.close();
          }
        });

        // now any future animations will be in another postDigest
        animationQueue.length = 0;

        var groupedAnimations = groupAnimations(animations);
        var toBeSortedAnimations = [];

        forEach(groupedAnimations, function(animationEntry) {
          toBeSortedAnimations.push({
            domNode: getDomNode(animationEntry.from ? animationEntry.from.element : animationEntry.element),
            fn: function triggerAnimationStart() {
              // it's important that we apply the `ng-animate` CSS class and the
              // temporary classes before we do any driver invoking since these
              // CSS classes may be required for proper CSS detection.
              animationEntry.beforeStart();

              var startAnimationFn, closeFn = animationEntry.close;

              // in the event that the element was removed before the digest runs or
              // during the RAF sequencing then we should not trigger the animation.
              var targetElement = animationEntry.anchors
                  ? (animationEntry.from.element || animationEntry.to.element)
                  : animationEntry.element;

              if (getRunner(targetElement)) {
                var operation = invokeFirstDriver(animationEntry);
                if (operation) {
                  startAnimationFn = operation.start;
                }
              }

              if (!startAnimationFn) {
                closeFn();
              } else {
                var animationRunner = startAnimationFn();
                animationRunner.done(function(status) {
                  closeFn(!status);
                });
                updateAnimationRunners(animationEntry, animationRunner);
              }
            }
          });
        });

        // we need to sort each of the animations in order of parent to child
        // relationships. This ensures that the child classes are applied at the
        // right time.
        $$rAFScheduler(sortAnimations(toBeSortedAnimations));
      });

      return runner;

      // TODO(matsko): change to reference nodes
      function getAnchorNodes(node) {
        var SELECTOR = '[' + NG_ANIMATE_REF_ATTR + ']';
        var items = node.hasAttribute(NG_ANIMATE_REF_ATTR)
              ? [node]
              : node.querySelectorAll(SELECTOR);
        var anchors = [];
        forEach(items, function(node) {
          var attr = node.getAttribute(NG_ANIMATE_REF_ATTR);
          if (attr && attr.length) {
            anchors.push(node);
          }
        });
        return anchors;
      }

      function groupAnimations(animations) {
        var preparedAnimations = [];
        var refLookup = {};
        forEach(animations, function(animation, index) {
          var element = animation.element;
          var node = getDomNode(element);
          var event = animation.event;
          var enterOrMove = ['enter', 'move'].indexOf(event) >= 0;
          var anchorNodes = animation.structural ? getAnchorNodes(node) : [];

          if (anchorNodes.length) {
            var direction = enterOrMove ? 'to' : 'from';

            forEach(anchorNodes, function(anchor) {
              var key = anchor.getAttribute(NG_ANIMATE_REF_ATTR);
              refLookup[key] = refLookup[key] || {};
              refLookup[key][direction] = {
                animationID: index,
                element: jqLite(anchor)
              };
            });
          } else {
            preparedAnimations.push(animation);
          }
        });

        var usedIndicesLookup = {};
        var anchorGroups = {};
        forEach(refLookup, function(operations, key) {
          var from = operations.from;
          var to = operations.to;

          if (!from || !to) {
            // only one of these is set therefore we can't have an
            // anchor animation since all three pieces are required
            var index = from ? from.animationID : to.animationID;
            var indexKey = index.toString();
            if (!usedIndicesLookup[indexKey]) {
              usedIndicesLookup[indexKey] = true;
              preparedAnimations.push(animations[index]);
            }
            return;
          }

          var fromAnimation = animations[from.animationID];
          var toAnimation = animations[to.animationID];
          var lookupKey = from.animationID.toString();
          if (!anchorGroups[lookupKey]) {
            var group = anchorGroups[lookupKey] = {
              structural: true,
              beforeStart: function() {
                fromAnimation.beforeStart();
                toAnimation.beforeStart();
              },
              close: function() {
                fromAnimation.close();
                toAnimation.close();
              },
              classes: cssClassesIntersection(fromAnimation.classes, toAnimation.classes),
              from: fromAnimation,
              to: toAnimation,
              anchors: [] // TODO(matsko): change to reference nodes
            };

            // the anchor animations require that the from and to elements both have at least
            // one shared CSS class which effectively marries the two elements together to use
            // the same animation driver and to properly sequence the anchor animation.
            if (group.classes.length) {
              preparedAnimations.push(group);
            } else {
              preparedAnimations.push(fromAnimation);
              preparedAnimations.push(toAnimation);
            }
          }

          anchorGroups[lookupKey].anchors.push({
            'out': from.element, 'in': to.element
          });
        });

        return preparedAnimations;
      }

      function cssClassesIntersection(a,b) {
        a = a.split(' ');
        b = b.split(' ');
        var matches = [];

        for (var i = 0; i < a.length; i++) {
          var aa = a[i];
          if (aa.substring(0,3) === 'ng-') continue;

          for (var j = 0; j < b.length; j++) {
            if (aa === b[j]) {
              matches.push(aa);
              break;
            }
          }
        }

        return matches.join(' ');
      }

      function invokeFirstDriver(animationDetails) {
        // we loop in reverse order since the more general drivers (like CSS and JS)
        // may attempt more elements, but custom drivers are more particular
        for (var i = drivers.length - 1; i >= 0; i--) {
          var driverName = drivers[i];
          if (!$injector.has(driverName)) continue; // TODO(matsko): remove this check

          var factory = $injector.get(driverName);
          var driver = factory(animationDetails);
          if (driver) {
            return driver;
          }
        }
      }

      function beforeStart() {
        element.addClass(NG_ANIMATE_CLASSNAME);
        if (tempClasses) {
          $$jqLite.addClass(element, tempClasses);
        }
        if (prepareClassName) {
          $$jqLite.removeClass(element, prepareClassName);
          prepareClassName = null;
        }
      }

      function updateAnimationRunners(animation, newRunner) {
        if (animation.from && animation.to) {
          update(animation.from.element);
          update(animation.to.element);
        } else {
          update(animation.element);
        }

        function update(element) {
          getRunner(element).setHost(newRunner);
        }
      }

      function handleDestroyedElement() {
        var runner = getRunner(element);
        if (runner && (event !== 'leave' || !options.$$domOperationFired)) {
          runner.end();
        }
      }

      function close(rejected) { // jshint ignore:line
        element.off('$destroy', handleDestroyedElement);
        removeRunner(element);

        applyAnimationClasses(element, options);
        applyAnimationStyles(element, options);
        options.domOperation();

        if (tempClasses) {
          $$jqLite.removeClass(element, tempClasses);
        }

        element.removeClass(NG_ANIMATE_CLASSNAME);
        runner.complete(!rejected);
      }
    };
  }];
}];

/**
 * @ngdoc directive
 * @name ngAnimateSwap
 * @restrict A
 * @scope
 *
 * @description
 *
 * ngAnimateSwap is a animation-oriented directive that allows for the container to
 * be removed and entered in whenever the associated expression changes. A
 * common usecase for this directive is a rotating banner component which
 * contains one image being present at a time. When the active image changes
 * then the old image will perform a `leave` animation and the new element
 * will be inserted via an `enter` animation.
 *
 * @example
 * <example name="ngAnimateSwap-directive" module="ngAnimateSwapExample"
 *          deps="angular-animate.js"
 *          animations="true" fixBase="true">
 *   <file name="index.html">
 *     <div class="container" ng-controller="AppCtrl">
 *       <div ng-animate-swap="number" class="cell swap-animation" ng-class="colorClass(number)">
 *         {{ number }}
 *       </div>
 *     </div>
 *   </file>
 *   <file name="script.js">
 *     angular.module('ngAnimateSwapExample', ['ngAnimate'])
 *       .controller('AppCtrl', ['$scope', '$interval', function($scope, $interval) {
 *         $scope.number = 0;
 *         $interval(function() {
 *           $scope.number++;
 *         }, 1000);
 *
 *         var colors = ['red','blue','green','yellow','orange'];
 *         $scope.colorClass = function(number) {
 *           return colors[number % colors.length];
 *         };
 *       }]);
 *   </file>
 *  <file name="animations.css">
 *  .container {
 *    height:250px;
 *    width:250px;
 *    position:relative;
 *    overflow:hidden;
 *    border:2px solid black;
 *  }
 *  .container .cell {
 *    font-size:150px;
 *    text-align:center;
 *    line-height:250px;
 *    position:absolute;
 *    top:0;
 *    left:0;
 *    right:0;
 *    border-bottom:2px solid black;
 *  }
 *  .swap-animation.ng-enter, .swap-animation.ng-leave {
 *    transition:0.5s linear all;
 *  }
 *  .swap-animation.ng-enter {
 *    top:-250px;
 *  }
 *  .swap-animation.ng-enter-active {
 *    top:0px;
 *  }
 *  .swap-animation.ng-leave {
 *    top:0px;
 *  }
 *  .swap-animation.ng-leave-active {
 *    top:250px;
 *  }
 *  .red { background:red; }
 *  .green { background:green; }
 *  .blue { background:blue; }
 *  .yellow { background:yellow; }
 *  .orange { background:orange; }
 *  </file>
 * </example>
 */
var ngAnimateSwapDirective = ['$animate', '$rootScope', function($animate, $rootScope) {
  return {
    restrict: 'A',
    transclude: 'element',
    terminal: true,
    priority: 600, // we use 600 here to ensure that the directive is caught before others
    link: function(scope, $element, attrs, ctrl, $transclude) {
      var previousElement, previousScope;
      scope.$watchCollection(attrs.ngAnimateSwap || attrs['for'], function(value) {
        if (previousElement) {
          $animate.leave(previousElement);
        }
        if (previousScope) {
          previousScope.$destroy();
          previousScope = null;
        }
        if (value || value === 0) {
          previousScope = scope.$new();
          $transclude(previousScope, function(element) {
            previousElement = element;
            $animate.enter(element, null, $element);
          });
        }
      });
    }
  };
}];

/* global angularAnimateModule: true,

   ngAnimateSwapDirective,
   $$AnimateAsyncRunFactory,
   $$rAFSchedulerFactory,
   $$AnimateChildrenDirective,
   $$AnimateQueueProvider,
   $$AnimationProvider,
   $AnimateCssProvider,
   $$AnimateCssDriverProvider,
   $$AnimateJsProvider,
   $$AnimateJsDriverProvider,
*/

/**
 * @ngdoc module
 * @name ngAnimate
 * @description
 *
 * The `ngAnimate` module provides support for CSS-based animations (keyframes and transitions) as well as JavaScript-based animations via
 * callback hooks. Animations are not enabled by default, however, by including `ngAnimate` the animation hooks are enabled for an Angular app.
 *
 * <div doc-module-components="ngAnimate"></div>
 *
 * # Usage
 * Simply put, there are two ways to make use of animations when ngAnimate is used: by using **CSS** and **JavaScript**. The former works purely based
 * using CSS (by using matching CSS selectors/styles) and the latter triggers animations that are registered via `module.animation()`. For
 * both CSS and JS animations the sole requirement is to have a matching `CSS class` that exists both in the registered animation and within
 * the HTML element that the animation will be triggered on.
 *
 * ## Directive Support
 * The following directives are "animation aware":
 *
 * | Directive                                                                                                | Supported Animations                                                     |
 * |----------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|
 * | {@link ng.directive:ngRepeat#animations ngRepeat}                                                        | enter, leave and move                                                    |
 * | {@link ngRoute.directive:ngView#animations ngView}                                                       | enter and leave                                                          |
 * | {@link ng.directive:ngInclude#animations ngInclude}                                                      | enter and leave                                                          |
 * | {@link ng.directive:ngSwitch#animations ngSwitch}                                                        | enter and leave                                                          |
 * | {@link ng.directive:ngIf#animations ngIf}                                                                | enter and leave                                                          |
 * | {@link ng.directive:ngClass#animations ngClass}                                                          | add and remove (the CSS class(es) present)                               |
 * | {@link ng.directive:ngShow#animations ngShow} & {@link ng.directive:ngHide#animations ngHide}            | add and remove (the ng-hide class value)                                 |
 * | {@link ng.directive:form#animation-hooks form} & {@link ng.directive:ngModel#animation-hooks ngModel}    | add and remove (dirty, pristine, valid, invalid & all other validations) |
 * | {@link module:ngMessages#animations ngMessages}                                                          | add and remove (ng-active & ng-inactive)                                 |
 * | {@link module:ngMessages#animations ngMessage}                                                           | enter and leave                                                          |
 *
 * (More information can be found by visiting each the documentation associated with each directive.)
 *
 * ## CSS-based Animations
 *
 * CSS-based animations with ngAnimate are unique since they require no JavaScript code at all. By using a CSS class that we reference between our HTML
 * and CSS code we can create an animation that will be picked up by Angular when an the underlying directive performs an operation.
 *
 * The example below shows how an `enter` animation can be made possible on an element using `ng-if`:
 *
 * ```html
 * <div ng-if="bool" class="fade">
 *    Fade me in out
 * </div>
 * <button ng-click="bool=true">Fade In!</button>
 * <button ng-click="bool=false">Fade Out!</button>
 * ```
 *
 * Notice the CSS class **fade**? We can now create the CSS transition code that references this class:
 *
 * ```css
 * /&#42; The starting CSS styles for the enter animation &#42;/
 * .fade.ng-enter {
 *   transition:0.5s linear all;
 *   opacity:0;
 * }
 *
 * /&#42; The finishing CSS styles for the enter animation &#42;/
 * .fade.ng-enter.ng-enter-active {
 *   opacity:1;
 * }
 * ```
 *
 * The key thing to remember here is that, depending on the animation event (which each of the directives above trigger depending on what's going on) two
 * generated CSS classes will be applied to the element; in the example above we have `.ng-enter` and `.ng-enter-active`. For CSS transitions, the transition
 * code **must** be defined within the starting CSS class (in this case `.ng-enter`). The destination class is what the transition will animate towards.
 *
 * If for example we wanted to create animations for `leave` and `move` (ngRepeat triggers move) then we can do so using the same CSS naming conventions:
 *
 * ```css
 * /&#42; now the element will fade out before it is removed from the DOM &#42;/
 * .fade.ng-leave {
 *   transition:0.5s linear all;
 *   opacity:1;
 * }
 * .fade.ng-leave.ng-leave-active {
 *   opacity:0;
 * }
 * ```
 *
 * We can also make use of **CSS Keyframes** by referencing the keyframe animation within the starting CSS class:
 *
 * ```css
 * /&#42; there is no need to define anything inside of the destination
 * CSS class since the keyframe will take charge of the animation &#42;/
 * .fade.ng-leave {
 *   animation: my_fade_animation 0.5s linear;
 *   -webkit-animation: my_fade_animation 0.5s linear;
 * }
 *
 * @keyframes my_fade_animation {
 *   from { opacity:1; }
 *   to { opacity:0; }
 * }
 *
 * @-webkit-keyframes my_fade_animation {
 *   from { opacity:1; }
 *   to { opacity:0; }
 * }
 * ```
 *
 * Feel free also mix transitions and keyframes together as well as any other CSS classes on the same element.
 *
 * ### CSS Class-based Animations
 *
 * Class-based animations (animations that are triggered via `ngClass`, `ngShow`, `ngHide` and some other directives) have a slightly different
 * naming convention. Class-based animations are basic enough that a standard transition or keyframe can be referenced on the class being added
 * and removed.
 *
 * For example if we wanted to do a CSS animation for `ngHide` then we place an animation on the `.ng-hide` CSS class:
 *
 * ```html
 * <div ng-show="bool" class="fade">
 *   Show and hide me
 * </div>
 * <button ng-click="bool=true">Toggle</button>
 *
 * <style>
 * .fade.ng-hide {
 *   transition:0.5s linear all;
 *   opacity:0;
 * }
 * </style>
 * ```
 *
 * All that is going on here with ngShow/ngHide behind the scenes is the `.ng-hide` class is added/removed (when the hidden state is valid). Since
 * ngShow and ngHide are animation aware then we can match up a transition and ngAnimate handles the rest.
 *
 * In addition the addition and removal of the CSS class, ngAnimate also provides two helper methods that we can use to further decorate the animation
 * with CSS styles.
 *
 * ```html
 * <div ng-class="{on:onOff}" class="highlight">
 *   Highlight this box
 * </div>
 * <button ng-click="onOff=!onOff">Toggle</button>
 *
 * <style>
 * .highlight {
 *   transition:0.5s linear all;
 * }
 * .highlight.on-add {
 *   background:white;
 * }
 * .highlight.on {
 *   background:yellow;
 * }
 * .highlight.on-remove {
 *   background:black;
 * }
 * </style>
 * ```
 *
 * We can also make use of CSS keyframes by placing them within the CSS classes.
 *
 *
 * ### CSS Staggering Animations
 * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a
 * curtain-like effect. The ngAnimate module (versions >=1.2) supports staggering animations and the stagger effect can be
 * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for
 * the animation. The style property expected within the stagger class can either be a **transition-delay** or an
 * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).
 *
 * ```css
 * .my-animation.ng-enter {
 *   /&#42; standard transition code &#42;/
 *   transition: 1s linear all;
 *   opacity:0;
 * }
 * .my-animation.ng-enter-stagger {
 *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/
 *   transition-delay: 0.1s;
 *
 *   /&#42; As of 1.4.4, this must always be set: it signals ngAnimate
 *     to not accidentally inherit a delay property from another CSS class &#42;/
 *   transition-duration: 0s;
 * }
 * .my-animation.ng-enter.ng-enter-active {
 *   /&#42; standard transition styles &#42;/
 *   opacity:1;
 * }
 * ```
 *
 * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations
 * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this
 * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation
 * will also be reset if one or more animation frames have passed since the multiple calls to `$animate` were fired.
 *
 * The following code will issue the **ng-leave-stagger** event on the element provided:
 *
 * ```js
 * var kids = parent.children();
 *
 * $animate.leave(kids[0]); //stagger index=0
 * $animate.leave(kids[1]); //stagger index=1
 * $animate.leave(kids[2]); //stagger index=2
 * $animate.leave(kids[3]); //stagger index=3
 * $animate.leave(kids[4]); //stagger index=4
 *
 * window.requestAnimationFrame(function() {
 *   //stagger has reset itself
 *   $animate.leave(kids[5]); //stagger index=0
 *   $animate.leave(kids[6]); //stagger index=1
 *
 *   $scope.$digest();
 * });
 * ```
 *
 * Stagger animations are currently only supported within CSS-defined animations.
 *
 * ### The `ng-animate` CSS class
 *
 * When ngAnimate is animating an element it will apply the `ng-animate` CSS class to the element for the duration of the animation.
 * This is a temporary CSS class and it will be removed once the animation is over (for both JavaScript and CSS-based animations).
 *
 * Therefore, animations can be applied to an element using this temporary class directly via CSS.
 *
 * ```css
 * .zipper.ng-animate {
 *   transition:0.5s linear all;
 * }
 * .zipper.ng-enter {
 *   opacity:0;
 * }
 * .zipper.ng-enter.ng-enter-active {
 *   opacity:1;
 * }
 * .zipper.ng-leave {
 *   opacity:1;
 * }
 * .zipper.ng-leave.ng-leave-active {
 *   opacity:0;
 * }
 * ```
 *
 * (Note that the `ng-animate` CSS class is reserved and it cannot be applied on an element directly since ngAnimate will always remove
 * the CSS class once an animation has completed.)
 *
 *
 * ### The `ng-[event]-prepare` class
 *
 * This is a special class that can be used to prevent unwanted flickering / flash of content before
 * the actual animation starts. The class is added as soon as an animation is initialized, but removed
 * before the actual animation starts (after waiting for a $digest).
 * It is also only added for *structural* animations (`enter`, `move`, and `leave`).
 *
 * In practice, flickering can appear when nesting elements with structural animations such as `ngIf`
 * into elements that have class-based animations such as `ngClass`.
 *
 * ```html
 * <div ng-class="{red: myProp}">
 *   <div ng-class="{blue: myProp}">
 *     <div class="message" ng-if="myProp"></div>
 *   </div>
 * </div>
 * ```
 *
 * It is possible that during the `enter` animation, the `.message` div will be briefly visible before it starts animating.
 * In that case, you can add styles to the CSS that make sure the element stays hidden before the animation starts:
 *
 * ```css
 * .message.ng-enter-prepare {
 *   opacity: 0;
 * }
 *
 * ```
 *
 * ## JavaScript-based Animations
 *
 * ngAnimate also allows for animations to be consumed by JavaScript code. The approach is similar to CSS-based animations (where there is a shared
 * CSS class that is referenced in our HTML code) but in addition we need to register the JavaScript animation on the module. By making use of the
 * `module.animation()` module function we can register the animation.
 *
 * Let's see an example of a enter/leave animation using `ngRepeat`:
 *
 * ```html
 * <div ng-repeat="item in items" class="slide">
 *   {{ item }}
 * </div>
 * ```
 *
 * See the **slide** CSS class? Let's use that class to define an animation that we'll structure in our module code by using `module.animation`:
 *
 * ```js
 * myModule.animation('.slide', [function() {
 *   return {
 *     // make note that other events (like addClass/removeClass)
 *     // have different function input parameters
 *     enter: function(element, doneFn) {
 *       jQuery(element).fadeIn(1000, doneFn);
 *
 *       // remember to call doneFn so that angular
 *       // knows that the animation has concluded
 *     },
 *
 *     move: function(element, doneFn) {
 *       jQuery(element).fadeIn(1000, doneFn);
 *     },
 *
 *     leave: function(element, doneFn) {
 *       jQuery(element).fadeOut(1000, doneFn);
 *     }
 *   }
 * }]);
 * ```
 *
 * The nice thing about JS-based animations is that we can inject other services and make use of advanced animation libraries such as
 * greensock.js and velocity.js.
 *
 * If our animation code class-based (meaning that something like `ngClass`, `ngHide` and `ngShow` triggers it) then we can still define
 * our animations inside of the same registered animation, however, the function input arguments are a bit different:
 *
 * ```html
 * <div ng-class="color" class="colorful">
 *   this box is moody
 * </div>
 * <button ng-click="color='red'">Change to red</button>
 * <button ng-click="color='blue'">Change to blue</button>
 * <button ng-click="color='green'">Change to green</button>
 * ```
 *
 * ```js
 * myModule.animation('.colorful', [function() {
 *   return {
 *     addClass: function(element, className, doneFn) {
 *       // do some cool animation and call the doneFn
 *     },
 *     removeClass: function(element, className, doneFn) {
 *       // do some cool animation and call the doneFn
 *     },
 *     setClass: function(element, addedClass, removedClass, doneFn) {
 *       // do some cool animation and call the doneFn
 *     }
 *   }
 * }]);
 * ```
 *
 * ## CSS + JS Animations Together
 *
 * AngularJS 1.4 and higher has taken steps to make the amalgamation of CSS and JS animations more flexible. However, unlike earlier versions of Angular,
 * defining CSS and JS animations to work off of the same CSS class will not work anymore. Therefore the example below will only result in **JS animations taking
 * charge of the animation**:
 *
 * ```html
 * <div ng-if="bool" class="slide">
 *   Slide in and out
 * </div>
 * ```
 *
 * ```js
 * myModule.animation('.slide', [function() {
 *   return {
 *     enter: function(element, doneFn) {
 *       jQuery(element).slideIn(1000, doneFn);
 *     }
 *   }
 * }]);
 * ```
 *
 * ```css
 * .slide.ng-enter {
 *   transition:0.5s linear all;
 *   transform:translateY(-100px);
 * }
 * .slide.ng-enter.ng-enter-active {
 *   transform:translateY(0);
 * }
 * ```
 *
 * Does this mean that CSS and JS animations cannot be used together? Do JS-based animations always have higher priority? We can make up for the
 * lack of CSS animations by using the `$animateCss` service to trigger our own tweaked-out, CSS-based animations directly from
 * our own JS-based animation code:
 *
 * ```js
 * myModule.animation('.slide', ['$animateCss', function($animateCss) {
 *   return {
 *     enter: function(element) {
*        // this will trigger `.slide.ng-enter` and `.slide.ng-enter-active`.
 *       return $animateCss(element, {
 *         event: 'enter',
 *         structural: true
 *       });
 *     }
 *   }
 * }]);
 * ```
 *
 * The nice thing here is that we can save bandwidth by sticking to our CSS-based animation code and we don't need to rely on a 3rd-party animation framework.
 *
 * The `$animateCss` service is very powerful since we can feed in all kinds of extra properties that will be evaluated and fed into a CSS transition or
 * keyframe animation. For example if we wanted to animate the height of an element while adding and removing classes then we can do so by providing that
 * data into `$animateCss` directly:
 *
 * ```js
 * myModule.animation('.slide', ['$animateCss', function($animateCss) {
 *   return {
 *     enter: function(element) {
 *       return $animateCss(element, {
 *         event: 'enter',
 *         structural: true,
 *         addClass: 'maroon-setting',
 *         from: { height:0 },
 *         to: { height: 200 }
 *       });
 *     }
 *   }
 * }]);
 * ```
 *
 * Now we can fill in the rest via our transition CSS code:
 *
 * ```css
 * /&#42; the transition tells ngAnimate to make the animation happen &#42;/
 * .slide.ng-enter { transition:0.5s linear all; }
 *
 * /&#42; this extra CSS class will be absorbed into the transition
 * since the $animateCss code is adding the class &#42;/
 * .maroon-setting { background:red; }
 * ```
 *
 * And `$animateCss` will figure out the rest. Just make sure to have the `done()` callback fire the `doneFn` function to signal when the animation is over.
 *
 * To learn more about what's possible be sure to visit the {@link ngAnimate.$animateCss $animateCss service}.
 *
 * ## Animation Anchoring (via `ng-animate-ref`)
 *
 * ngAnimate in AngularJS 1.4 comes packed with the ability to cross-animate elements between
 * structural areas of an application (like views) by pairing up elements using an attribute
 * called `ng-animate-ref`.
 *
 * Let's say for example we have two views that are managed by `ng-view` and we want to show
 * that there is a relationship between two components situated in within these views. By using the
 * `ng-animate-ref` attribute we can identify that the two components are paired together and we
 * can then attach an animation, which is triggered when the view changes.
 *
 * Say for example we have the following template code:
 *
 * ```html
 * <!-- index.html -->
 * <div ng-view class="view-animation">
 * </div>
 *
 * <!-- home.html -->
 * <a href="#/banner-page">
 *   <img src="./banner.jpg" class="banner" ng-animate-ref="banner">
 * </a>
 *
 * <!-- banner-page.html -->
 * <img src="./banner.jpg" class="banner" ng-animate-ref="banner">
 * ```
 *
 * Now, when the view changes (once the link is clicked), ngAnimate will examine the
 * HTML contents to see if there is a match reference between any components in the view
 * that is leaving and the view that is entering. It will scan both the view which is being
 * removed (leave) and inserted (enter) to see if there are any paired DOM elements that
 * contain a matching ref value.
 *
 * The two images match since they share the same ref value. ngAnimate will now create a
 * transport element (which is a clone of the first image element) and it will then attempt
 * to animate to the position of the second image element in the next view. For the animation to
 * work a special CSS class called `ng-anchor` will be added to the transported element.
 *
 * We can now attach a transition onto the `.banner.ng-anchor` CSS class and then
 * ngAnimate will handle the entire transition for us as well as the addition and removal of
 * any changes of CSS classes between the elements:
 *
 * ```css
 * .banner.ng-anchor {
 *   /&#42; this animation will last for 1 second since there are
 *          two phases to the animation (an `in` and an `out` phase) &#42;/
 *   transition:0.5s linear all;
 * }
 * ```
 *
 * We also **must** include animations for the views that are being entered and removed
 * (otherwise anchoring wouldn't be possible since the new view would be inserted right away).
 *
 * ```css
 * .view-animation.ng-enter, .view-animation.ng-leave {
 *   transition:0.5s linear all;
 *   position:fixed;
 *   left:0;
 *   top:0;
 *   width:100%;
 * }
 * .view-animation.ng-enter {
 *   transform:translateX(100%);
 * }
 * .view-animation.ng-leave,
 * .view-animation.ng-enter.ng-enter-active {
 *   transform:translateX(0%);
 * }
 * .view-animation.ng-leave.ng-leave-active {
 *   transform:translateX(-100%);
 * }
 * ```
 *
 * Now we can jump back to the anchor animation. When the animation happens, there are two stages that occur:
 * an `out` and an `in` stage. The `out` stage happens first and that is when the element is animated away
 * from its origin. Once that animation is over then the `in` stage occurs which animates the
 * element to its destination. The reason why there are two animations is to give enough time
 * for the enter animation on the new element to be ready.
 *
 * The example above sets up a transition for both the in and out phases, but we can also target the out or
 * in phases directly via `ng-anchor-out` and `ng-anchor-in`.
 *
 * ```css
 * .banner.ng-anchor-out {
 *   transition: 0.5s linear all;
 *
 *   /&#42; the scale will be applied during the out animation,
 *          but will be animated away when the in animation runs &#42;/
 *   transform: scale(1.2);
 * }
 *
 * .banner.ng-anchor-in {
 *   transition: 1s linear all;
 * }
 * ```
 *
 *
 *
 *
 * ### Anchoring Demo
 *
  <example module="anchoringExample"
           name="anchoringExample"
           id="anchoringExample"
           deps="angular-animate.js;angular-route.js"
           animations="true">
    <file name="index.html">
      <a href="#/">Home</a>
      <hr />
      <div class="view-container">
        <div ng-view class="view"></div>
      </div>
    </file>
    <file name="script.js">
      angular.module('anchoringExample', ['ngAnimate', 'ngRoute'])
        .config(['$routeProvider', function($routeProvider) {
          $routeProvider.when('/', {
            templateUrl: 'home.html',
            controller: 'HomeController as home'
          });
          $routeProvider.when('/profile/:id', {
            templateUrl: 'profile.html',
            controller: 'ProfileController as profile'
          });
        }])
        .run(['$rootScope', function($rootScope) {
          $rootScope.records = [
            { id:1, title: "Miss Beulah Roob" },
            { id:2, title: "Trent Morissette" },
            { id:3, title: "Miss Ava Pouros" },
            { id:4, title: "Rod Pouros" },
            { id:5, title: "Abdul Rice" },
            { id:6, title: "Laurie Rutherford Sr." },
            { id:7, title: "Nakia McLaughlin" },
            { id:8, title: "Jordon Blanda DVM" },
            { id:9, title: "Rhoda Hand" },
            { id:10, title: "Alexandrea Sauer" }
          ];
        }])
        .controller('HomeController', [function() {
          //empty
        }])
        .controller('ProfileController', ['$rootScope', '$routeParams', function($rootScope, $routeParams) {
          var index = parseInt($routeParams.id, 10);
          var record = $rootScope.records[index - 1];

          this.title = record.title;
          this.id = record.id;
        }]);
    </file>
    <file name="home.html">
      <h2>Welcome to the home page</h1>
      <p>Please click on an element</p>
      <a class="record"
         ng-href="#/profile/{{ record.id }}"
         ng-animate-ref="{{ record.id }}"
         ng-repeat="record in records">
        {{ record.title }}
      </a>
    </file>
    <file name="profile.html">
      <div class="profile record" ng-animate-ref="{{ profile.id }}">
        {{ profile.title }}
      </div>
    </file>
    <file name="animations.css">
      .record {
        display:block;
        font-size:20px;
      }
      .profile {
        background:black;
        color:white;
        font-size:100px;
      }
      .view-container {
        position:relative;
      }
      .view-container > .view.ng-animate {
        position:absolute;
        top:0;
        left:0;
        width:100%;
        min-height:500px;
      }
      .view.ng-enter, .view.ng-leave,
      .record.ng-anchor {
        transition:0.5s linear all;
      }
      .view.ng-enter {
        transform:translateX(100%);
      }
      .view.ng-enter.ng-enter-active, .view.ng-leave {
        transform:translateX(0%);
      }
      .view.ng-leave.ng-leave-active {
        transform:translateX(-100%);
      }
      .record.ng-anchor-out {
        background:red;
      }
    </file>
  </example>
 *
 * ### How is the element transported?
 *
 * When an anchor animation occurs, ngAnimate will clone the starting element and position it exactly where the starting
 * element is located on screen via absolute positioning. The cloned element will be placed inside of the root element
 * of the application (where ng-app was defined) and all of the CSS classes of the starting element will be applied. The
 * element will then animate into the `out` and `in` animations and will eventually reach the coordinates and match
 * the dimensions of the destination element. During the entire animation a CSS class of `.ng-animate-shim` will be applied
 * to both the starting and destination elements in order to hide them from being visible (the CSS styling for the class
 * is: `visibility:hidden`). Once the anchor reaches its destination then it will be removed and the destination element
 * will become visible since the shim class will be removed.
 *
 * ### How is the morphing handled?
 *
 * CSS Anchoring relies on transitions and keyframes and the internal code is intelligent enough to figure out
 * what CSS classes differ between the starting element and the destination element. These different CSS classes
 * will be added/removed on the anchor element and a transition will be applied (the transition that is provided
 * in the anchor class). Long story short, ngAnimate will figure out what classes to add and remove which will
 * make the transition of the element as smooth and automatic as possible. Be sure to use simple CSS classes that
 * do not rely on DOM nesting structure so that the anchor element appears the same as the starting element (since
 * the cloned element is placed inside of root element which is likely close to the body element).
 *
 * Note that if the root element is on the `<html>` element then the cloned node will be placed inside of body.
 *
 *
 * ## Using $animate in your directive code
 *
 * So far we've explored how to feed in animations into an Angular application, but how do we trigger animations within our own directives in our application?
 * By injecting the `$animate` service into our directive code, we can trigger structural and class-based hooks which can then be consumed by animations. Let's
 * imagine we have a greeting box that shows and hides itself when the data changes
 *
 * ```html
 * <greeting-box active="onOrOff">Hi there</greeting-box>
 * ```
 *
 * ```js
 * ngModule.directive('greetingBox', ['$animate', function($animate) {
 *   return function(scope, element, attrs) {
 *     attrs.$observe('active', function(value) {
 *       value ? $animate.addClass(element, 'on') : $animate.removeClass(element, 'on');
 *     });
 *   });
 * }]);
 * ```
 *
 * Now the `on` CSS class is added and removed on the greeting box component. Now if we add a CSS class on top of the greeting box element
 * in our HTML code then we can trigger a CSS or JS animation to happen.
 *
 * ```css
 * /&#42; normally we would create a CSS class to reference on the element &#42;/
 * greeting-box.on { transition:0.5s linear all; background:green; color:white; }
 * ```
 *
 * The `$animate` service contains a variety of other methods like `enter`, `leave`, `animate` and `setClass`. To learn more about what's
 * possible be sure to visit the {@link ng.$animate $animate service API page}.
 *
 *
 * ### Preventing Collisions With Third Party Libraries
 *
 * Some third-party frameworks place animation duration defaults across many element or className
 * selectors in order to make their code small and reuseable. This can lead to issues with ngAnimate, which
 * is expecting actual animations on these elements and has to wait for their completion.
 *
 * You can prevent this unwanted behavior by using a prefix on all your animation classes:
 *
 * ```css
 * /&#42; prefixed with animate- &#42;/
 * .animate-fade-add.animate-fade-add-active {
 *   transition:1s linear all;
 *   opacity:0;
 * }
 * ```
 *
 * You then configure `$animate` to enforce this prefix:
 *
 * ```js
 * $animateProvider.classNameFilter(/animate-/);
 * ```
 *
 * This also may provide your application with a speed boost since only specific elements containing CSS class prefix
 * will be evaluated for animation when any DOM changes occur in the application.
 *
 * ## Callbacks and Promises
 *
 * When `$animate` is called it returns a promise that can be used to capture when the animation has ended. Therefore if we were to trigger
 * an animation (within our directive code) then we can continue performing directive and scope related activities after the animation has
 * ended by chaining onto the returned promise that animation method returns.
 *
 * ```js
 * // somewhere within the depths of the directive
 * $animate.enter(element, parent).then(function() {
 *   //the animation has completed
 * });
 * ```
 *
 * (Note that earlier versions of Angular prior to v1.4 required the promise code to be wrapped using `$scope.$apply(...)`. This is not the case
 * anymore.)
 *
 * In addition to the animation promise, we can also make use of animation-related callbacks within our directives and controller code by registering
 * an event listener using the `$animate` service. Let's say for example that an animation was triggered on our view
 * routing controller to hook into that:
 *
 * ```js
 * ngModule.controller('HomePageController', ['$animate', function($animate) {
 *   $animate.on('enter', ngViewElement, function(element) {
 *     // the animation for this route has completed
 *   }]);
 * }])
 * ```
 *
 * (Note that you will need to trigger a digest within the callback to get angular to notice any scope-related changes.)
 */

/**
 * @ngdoc service
 * @name $animate
 * @kind object
 *
 * @description
 * The ngAnimate `$animate` service documentation is the same for the core `$animate` service.
 *
 * Click here {@link ng.$animate to learn more about animations with `$animate`}.
 */
angular.module('ngAnimate', [])
  .directive('ngAnimateSwap', ngAnimateSwapDirective)

  .directive('ngAnimateChildren', $$AnimateChildrenDirective)
  .factory('$$rAFScheduler', $$rAFSchedulerFactory)

  .provider('$$animateQueue', $$AnimateQueueProvider)
  .provider('$$animation', $$AnimationProvider)

  .provider('$animateCss', $AnimateCssProvider)
  .provider('$$animateCssDriver', $$AnimateCssDriverProvider)

  .provider('$$animateJs', $$AnimateJsProvider)
  .provider('$$animateJsDriver', $$AnimateJsDriverProvider);


})(window, window.angular);

/*
 AngularJS v1.5.0
 (c) 2010-2016 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(A,e,B){'use strict';function C(a){var c=[];v(c,e.noop).chars(a);return c.join("")}function h(a,c){var b={},d=a.split(","),l;for(l=0;l<d.length;l++)b[c?e.lowercase(d[l]):d[l]]=!0;return b}function D(a,c){null===a||a===B?a="":"string"!==typeof a&&(a=""+a);g.innerHTML=a;var b=5;do{if(0===b)throw w("uinput");b--;11>=document.documentMode&&n(g);a=g.innerHTML;g.innerHTML=a}while(a!==g.innerHTML);for(b=g.firstChild;b;){switch(b.nodeType){case 1:c.start(b.nodeName.toLowerCase(),E(b.attributes));
break;case 3:c.chars(b.textContent)}var d;if(!(d=b.firstChild)&&(1==b.nodeType&&c.end(b.nodeName.toLowerCase()),d=b.nextSibling,!d))for(;null==d;){b=b.parentNode;if(b===g)break;d=b.nextSibling;1==b.nodeType&&c.end(b.nodeName.toLowerCase())}b=d}for(;b=g.firstChild;)g.removeChild(b)}function E(a){for(var c={},b=0,d=a.length;b<d;b++){var l=a[b];c[l.name]=l.value}return c}function x(a){return a.replace(/&/g,"&amp;").replace(F,function(a){var b=a.charCodeAt(0);a=a.charCodeAt(1);return"&#"+(1024*(b-55296)+
(a-56320)+65536)+";"}).replace(G,function(a){return"&#"+a.charCodeAt(0)+";"}).replace(/</g,"&lt;").replace(/>/g,"&gt;")}function v(a,c){var b=!1,d=e.bind(a,a.push);return{start:function(a,f){a=e.lowercase(a);!b&&H[a]&&(b=a);b||!0!==t[a]||(d("<"),d(a),e.forEach(f,function(b,f){var g=e.lowercase(f),h="img"===a&&"src"===g||"background"===g;!0!==I[g]||!0===y[g]&&!c(b,h)||(d(" "),d(f),d('="'),d(x(b)),d('"'))}),d(">"))},end:function(a){a=e.lowercase(a);b||!0!==t[a]||!0===z[a]||(d("</"),d(a),d(">"));a==
b&&(b=!1)},chars:function(a){b||d(x(a))}}}function n(a){if(a.nodeType===Node.ELEMENT_NODE)for(var c=a.attributes,b=0,d=c.length;b<d;b++){var e=c[b],f=e.name.toLowerCase();if("xmlns:ns1"===f||0===f.indexOf("ns1:"))a.removeAttributeNode(e),b--,d--}(c=a.firstChild)&&n(c);(c=a.nextSibling)&&n(c)}var w=e.$$minErr("$sanitize"),F=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,G=/([^\#-~ |!])/g,z=h("area,br,col,hr,img,wbr"),q=h("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),k=h("rp,rt"),u=e.extend({},k,q),q=e.extend({},
q,h("address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul")),k=e.extend({},k,h("a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var")),J=h("circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,radialGradient,rect,stop,svg,switch,text,title,tspan"),
H=h("script,style"),t=e.extend({},z,q,k,u),y=h("background,cite,href,longdesc,src,xlink:href"),u=h("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,valign,value,vspace,width"),k=h("accent-height,accumulate,additive,alphabetic,arabic-form,ascent,baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan",
!0),I=e.extend({},y,k,u),g;(function(a){if(a.document&&a.document.implementation)a=a.document.implementation.createHTMLDocument("inert");else throw w("noinert");var c=(a.documentElement||a.getDocumentElement()).getElementsByTagName("body");1===c.length?g=c[0]:(c=a.createElement("html"),g=a.createElement("body"),c.appendChild(g),a.appendChild(c))})(A);e.module("ngSanitize",[]).provider("$sanitize",function(){var a=!1;this.$get=["$$sanitizeUri",function(c){a&&e.extend(t,J);return function(a){var d=
[];D(a,v(d,function(a,b){return!/^unsafe:/.test(c(a,b))}));return d.join("")}}];this.enableSvg=function(c){return e.isDefined(c)?(a=c,this):a}});e.module("ngSanitize").filter("linky",["$sanitize",function(a){var c=/((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"\u201d\u2019]/i,b=/^mailto:/i,d=e.$$minErr("linky"),g=e.isString;return function(f,h,m){function k(a){a&&p.push(C(a))}function q(a,b){var c;p.push("<a ");e.isFunction(m)&&(m=m(a));if(e.isObject(m))for(c in m)p.push(c+
'="'+m[c]+'" ');else m={};!e.isDefined(h)||"target"in m||p.push('target="',h,'" ');p.push('href="',a.replace(/"/g,"&quot;"),'">');k(b);p.push("</a>")}if(null==f||""===f)return f;if(!g(f))throw d("notstring",f);for(var r=f,p=[],s,n;f=r.match(c);)s=f[0],f[2]||f[4]||(s=(f[3]?"http://":"mailto:")+s),n=f.index,k(r.substr(0,n)),q(s,f[0].replace(b,"")),r=r.substring(n+f[0].length);k(r);return a(p.join(""))}}])})(window,window.angular);
//# sourceMappingURL=angular-sanitize.min.js.map

/*
 AngularJS v1.5.0
 (c) 2010-2016 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(A,d,B){'use strict';function l(){return["$animate",function(v){return{restrict:"AE",transclude:"element",priority:1,terminal:!0,require:"^^ngMessages",link:function(n,r,a,b,m){var k=r[0],f,p=a.ngMessage||a.when;a=a.ngMessageExp||a.whenExp;var d=function(a){f=a?w(a)?a:a.split(/[\s,]+/):null;b.reRender()};a?(d(n.$eval(a)),n.$watchCollection(a,d)):d(p);var e,q;b.register(k,q={test:function(a){var g=f;a=g?w(g)?0<=g.indexOf(a):g.hasOwnProperty(a):void 0;return a},attach:function(){e||m(n,function(a){v.enter(a,
null,r);e=a;var g=e.$$attachId=b.getAttachId();e.on("$destroy",function(){e&&e.$$attachId===g&&(b.deregister(k),q.detach())})})},detach:function(){if(e){var a=e;e=null;v.leave(a)}}})}}}]}var w=d.isArray,x=d.forEach,y=d.isString,z=d.element;d.module("ngMessages",[]).directive("ngMessages",["$animate",function(d){function n(a,b){return y(b)&&0===b.length||r(a.$eval(b))}function r(a){return y(a)?a.length:!!a}return{require:"ngMessages",restrict:"AE",controller:["$element","$scope","$attrs",function(a,
b,m){function k(a,b){for(var c=b,f=[];c&&c!==a;){var h=c.$$ngMessageNode;if(h&&h.length)return e[h];c.childNodes.length&&-1==f.indexOf(c)?(f.push(c),c=c.childNodes[c.childNodes.length-1]):c=c.previousSibling||c.parentNode}}var f=this,p=0,l=0;this.getAttachId=function(){return l++};var e=this.messages={},q,s;this.render=function(g){g=g||{};q=!1;s=g;for(var e=n(b,m.ngMessagesMultiple)||n(b,m.multiple),c=[],k={},h=f.head,p=!1,l=0;null!=h;){l++;var t=h.message,u=!1;p||x(g,function(a,c){!u&&r(a)&&t.test(c)&&
!k[c]&&(u=k[c]=!0,t.attach())});u?p=!e:c.push(t);h=h.next}x(c,function(a){a.detach()});c.length!==l?d.setClass(a,"ng-active","ng-inactive"):d.setClass(a,"ng-inactive","ng-active")};b.$watchCollection(m.ngMessages||m["for"],f.render);this.reRender=function(){q||(q=!0,b.$evalAsync(function(){q&&s&&f.render(s)}))};this.register=function(g,b){var c=p.toString();e[c]={message:b};var d=a[0],h=e[c];f.head?(d=k(d,g))?(h.next=d.next,d.next=h):(h.next=f.head,f.head=h):f.head=h;g.$$ngMessageNode=c;p++;f.reRender()};
this.deregister=function(b){var d=b.$$ngMessageNode;delete b.$$ngMessageNode;var c=e[d];(b=k(a[0],b))?b.next=c.next:f.head=c.next;delete e[d];f.reRender()}}]}}]).directive("ngMessagesInclude",["$templateRequest","$document","$compile",function(d,n,l){return{restrict:"AE",require:"^^ngMessages",link:function(a,b,m){var k=m.ngMessagesInclude||m.src;d(k).then(function(d){l(d)(a,function(a){b.after(a);a=z(n[0].createComment(" ngMessagesInclude: "+k+" "));b.after(a);b.remove()})})}}}]).directive("ngMessage",
l()).directive("ngMessageExp",l())})(window,window.angular);
//# sourceMappingURL=angular-messages.min.js.map

/*
 AngularJS v1.5.0
 (c) 2010-2016 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(h){'use strict';function C(a){if(null==a)return"";switch(typeof a){case "string":return a;case "number":return""+a;default:return D(a)}}function f(a,b){for(var d=a.split(/\n/g),k=0;k<d.length;k++){var c=d[k];if(b>=c.length)b-=c.length;else return{h:k+1,f:b+1}}}function t(a){function b(){return a}var d=u[a];if(null!=d)return d;b.$$watchDelegate=function(b,d,c){var e=b.$watch(v,function(){m(d)&&d.call(null,a,a,b);e()},c);return e};u[a]=b;b.exp=a;b.expressions=[];return b}function F(a,b){function d(a){return void 0==
a?a:a-b}function c(b){return d(a(b))}if(0===b)return a;var e;c.$$watchDelegate=function(b,c,k){return e=b.$watch(a,function(a,k){m(c)&&c.call(null,d(a),d(k),b)},k)};return c}function l(a,b){var d=this;this.b=a;this.e=b;if(void 0===b.other)throw e("reqother");this.d=function(a){return d.D(a)};this.d.$$watchDelegate=function(a,b,c){return d.P(a,b,c)};this.d.exp=a.exp;this.d.expressions=a.expressions}function n(a,b,d,c){var e=this;this.scope=b;this.oa=a;this.v=d;this.qa=c;this.U=void 0;this.K=v;this.ka=
b.$watch(a.b,function(a){return e.ja(a)},c)}function p(a,b){l.call(this,a,b)}function w(){}function q(a,b,d,c){l.call(this,a,b);this.offset=d;this.M=c}function x(){}function g(a,b){this.u=a;this.B=b;this.i=[];this.g=[];this.J=[];this.s="";this.q=null}function r(a,b,d){this.c=a;this.scope=b;this.W=void 0;this.v=d;var c=this;this.la=b.$watchGroup(a.g,function(a,b){c.Ea(a,b)})}function s(a,b){b.b=a.b;b.C=a.C;b.w=a.w;b.e=a.e;b.k=a.k;b.c=a.c;b.n=a.n;b.F=a.F;b.l=a.l}function y(a){s(a,this)}function c(a,
b,d,c,e,E,f,g){this.text=a;this.index=b||0;this.A=d;this.M=c;this.Da=e;this.pa=!!E;this.u=f;this.B=!!g;this.F=this.c=this.k=this.e=this.w=this.C=this.b=null;this.L=[];this.G=this.j=this.ca=this.O=this.da=this.l=this.n=this.o=this.a=this.d=null}function z(a){switch(a){case "{":return"}";case "[":return"]";case "(":return")";default:return null}}function G(a){switch(a){case "}":return"{";case "]":return"[";case ")":return"(";default:return null}}var e=h.angular.$interpolateMinErr,v=h.angular.noop,m=
h.angular.isFunction,D=h.angular.toJson,u=Object.create(null);l.prototype.T=function(a){return this.e[this.R(a)]};l.prototype.D=function(a){return this.T(this.b(a))(a)};l.prototype.P=function(a,b,d){var c=new n(this,a,b,d);return function(){c.I()}};n.prototype.ja=function(a){var b=this;this.K();a=this.oa.T(a);this.K=this.scope.$watch(a,function(a,c){return b.na(a,c)},this.qa)};n.prototype.na=function(a,b){m(this.v)&&this.v.call(null,a,a===b?a:this.U,this.scope);this.U=a};n.prototype.I=function(){this.ka();
this.K()};w.prototype=l.prototype;p.prototype=new w;p.prototype.R=function(a){return void 0!==this.e[a]?a:"other"};x.prototype=l.prototype;q.prototype=new x;q.prototype.R=function(a){if(isNaN(a))return"other";if(void 0!==this.e[a])return a;a=this.M(a-this.offset);return void 0!==this.e[a]?a:"other"};g.prototype.S=function(){this.s&&(null==this.q?this.i.push(this.s):(this.i.push(this.q.join("")),this.q=null),this.s="")};g.prototype.p=function(a){a.length&&(this.s?this.q?this.q.push(a):this.q=[this.s,
a]:this.s=a)};g.prototype.H=function(a){this.S();this.J.push(this.i.length);this.g.push(a);this.i.push("")};g.prototype.ma=function(a){for(var b=Array(this.g.length),d=0;d<this.g.length;d++)b[d]=this.g[d](a);return b};g.prototype.D=function(a){for(var b=0;b<this.J.length;b++){var d=a[b];if(this.B&&void 0===d)return;this.i[this.J[b]]=d}return this.i.join("")};g.prototype.ea=function(a,b){var d=this;this.S();if(!a||0!==this.g.length){if(0===this.i.length)return t("");this.u&&1<this.i.length&&e.throwNoconcat(b);
if(0===this.g.length)return 1!=this.i.length&&this.r(),t(this.i[0]);var c=function(a){return d.D(d.ma(a))};c.$$watchDelegate=function(a,b,c){return d.P(a,b,c)};c.exp=b;c.expressions=Array(this.g.length);for(var f=0;f<this.g.length;f++)c.expressions[f]=this.g[f].exp;return c}};g.prototype.P=function(a,b){var c=new r(this,a,b);return function(){c.I()}};r.prototype.Ea=function(a,b){var c=this.c.D(a);m(this.v)&&this.v.call(null,c,a===b?c:this.W,this.scope);this.W=c};r.prototype.I=function(){this.la()};
var H=new y(new c("",0,null,null,null,!1,null,!1));c.prototype.pushState=function(){this.L.push(new y(this));s(H,this)};c.prototype.V=function(){0===this.L.length&&this.r();var a=this.L.pop();s(a,this)};c.prototype.m=function(a,b){a.lastIndex=this.index;var c=a.exec(this.text);return null==c||!0!==b&&c.index!=this.index?null:(this.index=a.lastIndex,c)};c.prototype.t=function(a){return this.m(a,!0)};c.prototype.ha=function(a){return!!this.m(a)};c.prototype.Ba=function(a){this.o=[a];do{for(this.a=this.o.pop();this.a;)this.a();
this.ga(this.a)}while(0<this.o.length)};c.prototype.r=function(){throw e("logicbug",this.text);};c.prototype.ga=function(a){void 0===a&&this.r()};var I=/\s*(\w+)\s*/g;c.prototype.ia=function(){var a=this.m(I);if(null==a)throw a=f(this.text,this.index),e("reqarg",a.h,a.f,this.text);var b=a[1];if("select"==b||"plural"==b)throw a=f(this.text,this.index),e("reqcomma",b,a.h,a.f,this.text);a=f(this.text,this.index);throw e("unknarg",b,a.h,a.f,this.text);};c.prototype.Ca=function(a){this.da=a.index;this.O=
a[0];this.ca="'"==this.O?J:K;this.a=this.ua};var J=/\\(?:\\|'|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{2}|[0-7]{3}|\r\n|\n|[\s\S])|'/g,K=/\\(?:\\|"|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{2}|[0-7]{3}|\r\n|\n|[\s\S])|"/g;c.prototype.ua=function(){var a=this.t(this.ca);if(null==a)throw a=f(this.text,this.da),e("untermstr",a.h,a.f,this.text);a==this.O&&(this.a=null)};var L=/\s*(plural|select)\s*,\s*/g;c.prototype.ya=function(){var a=this.t(L);null==a&&this.ia();switch(a[1]){case "plural":this.a=this.za;break;case "select":this.a=
this.Aa;break;default:this.r()}};c.prototype.za=function(){this.e=Object.create(null);this.n=this.N;this.a=this.xa};c.prototype.Aa=function(){this.e=Object.create(null);this.a=this.n=this.ba};var A=/[0]|(?:[1-9][0-9]*)/g,M=new RegExp("\\s*offset\\s*:\\s*("+A.source+")","g");c.prototype.xa=function(){var a=this.m(M);this.w=null==a?0:parseInt(a[1],10);this.C=F(this.b,this.w);this.a=this.N};c.prototype.Q=function(a,b){if(void 0!==this.e[a]){var c=f(this.text,b);throw e("dupvalue",a,c.h,c.f,this.text);
}};var N=/\s*(\w+)/g;c.prototype.ba=function(){var a=this.m(N);null==a?(this.d=(new p(this.b,this.e)).d,this.a=null):(this.k=a[1],this.Q(this.k,a.index),this.a=this.aa)};var O=new RegExp("\\s*(?:(?:=("+A.source+"))|(\\w+))","g");c.prototype.N=function(){var a=this.m(O);null==a?(this.d=(new q(this.b,this.e,this.w,this.M)).d,this.a=null):(this.k=null!=a[1]?parseInt(a[1],10):a[2],this.Q(this.k,a.index),this.a=this.aa)};var P=/\s*{/g;c.prototype.aa=function(){if(!this.ha(P)){var a=f(this.text,this.index);
throw e("reqopenbrace",this.k,a.h,a.f,this.text);}this.F=this.index;this.c=new g(this.u,this.B);this.a=this.$};var Q=/\\.|{{|}/g,R=/\\.|{{|#|}/g,B=/\\.|{{/g;c.prototype.fa=function(){var a=this.index,b;if(null==this.n){if(b=this.t(B),null==b)return this.G=this.text.substring(a),this.index=this.text.length,null}else if(b=this.t(this.n==this.N?R:Q),null==b)throw a=f(this.text,this.F),e("reqendbrace",this.k,a.h,a.f,this.text);var c=b[0];this.G=this.text.substring(a,b.index);return c};c.prototype.$=function(){var a=
this.index,b=this.fa();null==b?(this.index=this.text.length,this.c.p(this.text.substring(a)),this.a=null):"\\"==b[0]?this.c.p(this.G+b[1]):(this.c.p(this.G),"{{"==b?(this.pushState(),this.o.push(this.ta),this.a=this.X):"}"==b?(this.e[this.k]=this.c.ea(!1,this.text),this.a=this.n):"#"==b?this.c.H(this.C):this.r())};c.prototype.va=function(){this.c=new g(this.u,this.B);this.a=this.Z};c.prototype.Z=function(){var a=this.index,b=this.t(B);if(null==b)this.index=this.text.length,this.c.p(this.text.substring(a)),
this.d=this.c.ea(this.pa,this.text),this.a=null;else{var c=b[0];"\\"==c[0]?this.c.p(this.text.substring(a,b.index)+c[1]):(this.c.p(this.text.substring(a,b.index)),this.pushState(),this.o.push(this.wa),this.a=this.X)}};c.prototype.wa=function(){var a=this.d;this.V();this.c.H(a);this.a=this.Z};c.prototype.X=function(){this.d=null;this.o.push(this.sa);this.a=this.ra};c.prototype.ta=function(){var a=this.d;this.V();this.c.H(a);this.a=this.$};var S=/\s*}}/g;c.prototype.sa=function(){if(null==this.m(S)){var a=
f(this.text,this.index);throw e("reqendinterp","}}",a.h,a.f,this.text);}null==this.d&&(this.d=this.A(this.b,this.Da),this.d.exp=this.b.exp,this.d.expressions=this.b.expressions);this.a=null};c.prototype.ra=function(){this.j=[];this.l=this.index;this.a=this.Y};var T=/[[\]{}()'",]/g;c.prototype.Y=function(){var a=this.t(T);if(null==a){if(0===this.j.length){this.index=this.text.length;this.b=this.A(this.text.substring(this.l,this.index));this.b.exp=this.text.substring(this.l,this.index);this.b.expressions=
this.b.expressions;this.a=null;return}throw e("badexpr",this.Ga(this.j[0]),this.text);}var b=a[0];if("'"==b||'"'==b)this.o.push(this.Y),this.Ca(a);else if(","==b){if(this.u)throw a=f(this.text,this.index),e("unsafe",this.u,a.h,a.f,this.text);0===this.j.length&&(this.b=this.A(this.text.substring(this.l,a.index)),this.b.exp=this.text.substring(this.l,a.index),this.b.expressions=this.b.expressions,this.a=null,this.a=this.ya)}else if(null!=z(b))this.j.unshift(b);else{var c=G(b);null==c&&this.r();if(0<
this.j.length){if(c==this.j[0]){this.j.shift();return}a=f(this.text,this.index);throw e("badexpr",b,a.h,a.f,z(this.j[0]),this.text);}this.index=a.index;this.b=this.A(this.text.substring(this.l,this.index));this.b.exp=this.text.substring(this.l,this.index);this.b.expressions=this.b.expressions;this.a=null}};var U=["$$messageFormat","$delegate",function(a,b){if("{{"!=b.startSymbol()||"}}"!=b.endSymbol())throw e("nochgmustache");var c=a.interpolate;c.startSymbol=b.startSymbol;c.endSymbol=b.endSymbol;
return c}];h=h.angular.module("ngMessageFormat",["ng"]);h.factory("$$messageFormat",["$parse","$locale","$sce","$exceptionHandler",function(a,b,d,f){function g(a,b,c){return function(g){try{return g=a?d.getTrusted(a,g):d.valueOf(g),b&&void 0===g?g:C(g)}catch(h){f(e.interr(c,h))}}}return{interpolate:function(d,e,f,h){d=new c(d,0,a,b.pluralCat,g(f,h,d),e,f,h);d.Ba(d.va);return d.d}}}]);h.config(["$provide",function(a){a.decorator("$interpolate",U)}])})(window,window.Fa);
//# sourceMappingURL=angular-message-format.min.js.map

/*!
 * Chart.js
 * http://chartjs.org/
 * Version: 1.0.2
 *
 * Copyright 2015 Nick Downie
 * Released under the MIT license
 * https://github.com/nnnick/Chart.js/blob/master/LICENSE.md
 */
(function(){"use strict";var t=this,i=t.Chart,e=function(t){this.canvas=t.canvas,this.ctx=t;var i=function(t,i){return t["offset"+i]?t["offset"+i]:document.defaultView.getComputedStyle(t).getPropertyValue(i)},e=this.width=i(t.canvas,"Width"),n=this.height=i(t.canvas,"Height");t.canvas.width=e,t.canvas.height=n;var e=this.width=t.canvas.width,n=this.height=t.canvas.height;return this.aspectRatio=this.width/this.height,s.retinaScale(this),this};e.defaults={global:{animation:!0,animationSteps:60,animationEasing:"easeOutQuart",showScale:!0,scaleOverride:!1,scaleSteps:null,scaleStepWidth:null,scaleStartValue:null,scaleLineColor:"rgba(0,0,0,.1)",scaleLineWidth:1,scaleShowLabels:!0,scaleLabel:"<%=value%>",scaleIntegersOnly:!0,scaleBeginAtZero:!1,scaleFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",scaleFontSize:12,scaleFontStyle:"normal",scaleFontColor:"#666",responsive:!1,maintainAspectRatio:!0,showTooltips:!0,customTooltips:!1,tooltipEvents:["mousemove","touchstart","touchmove","mouseout"],tooltipFillColor:"rgba(0,0,0,0.8)",tooltipFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",tooltipFontSize:14,tooltipFontStyle:"normal",tooltipFontColor:"#fff",tooltipTitleFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",tooltipTitleFontSize:14,tooltipTitleFontStyle:"bold",tooltipTitleFontColor:"#fff",tooltipYPadding:6,tooltipXPadding:6,tooltipCaretSize:8,tooltipCornerRadius:6,tooltipXOffset:10,tooltipTemplate:"<%if (label){%><%=label%>: <%}%><%= value %>",multiTooltipTemplate:"<%= value %>",multiTooltipKeyBackground:"#fff",onAnimationProgress:function(){},onAnimationComplete:function(){}}},e.types={};var s=e.helpers={},n=s.each=function(t,i,e){var s=Array.prototype.slice.call(arguments,3);if(t)if(t.length===+t.length){var n;for(n=0;n<t.length;n++)i.apply(e,[t[n],n].concat(s))}else for(var o in t)i.apply(e,[t[o],o].concat(s))},o=s.clone=function(t){var i={};return n(t,function(e,s){t.hasOwnProperty(s)&&(i[s]=e)}),i},a=s.extend=function(t){return n(Array.prototype.slice.call(arguments,1),function(i){n(i,function(e,s){i.hasOwnProperty(s)&&(t[s]=e)})}),t},h=s.merge=function(){var t=Array.prototype.slice.call(arguments,0);return t.unshift({}),a.apply(null,t)},l=s.indexOf=function(t,i){if(Array.prototype.indexOf)return t.indexOf(i);for(var e=0;e<t.length;e++)if(t[e]===i)return e;return-1},r=(s.where=function(t,i){var e=[];return s.each(t,function(t){i(t)&&e.push(t)}),e},s.findNextWhere=function(t,i,e){e||(e=-1);for(var s=e+1;s<t.length;s++){var n=t[s];if(i(n))return n}},s.findPreviousWhere=function(t,i,e){e||(e=t.length);for(var s=e-1;s>=0;s--){var n=t[s];if(i(n))return n}},s.inherits=function(t){var i=this,e=t&&t.hasOwnProperty("constructor")?t.constructor:function(){return i.apply(this,arguments)},s=function(){this.constructor=e};return s.prototype=i.prototype,e.prototype=new s,e.extend=r,t&&a(e.prototype,t),e.__super__=i.prototype,e}),c=s.noop=function(){},u=s.uid=function(){var t=0;return function(){return"chart-"+t++}}(),d=s.warn=function(t){window.console&&"function"==typeof window.console.warn&&console.warn(t)},p=s.amd="function"==typeof define&&define.amd,f=s.isNumber=function(t){return!isNaN(parseFloat(t))&&isFinite(t)},g=s.max=function(t){return Math.max.apply(Math,t)},m=s.min=function(t){return Math.min.apply(Math,t)},v=(s.cap=function(t,i,e){if(f(i)){if(t>i)return i}else if(f(e)&&e>t)return e;return t},s.getDecimalPlaces=function(t){return t%1!==0&&f(t)?t.toString().split(".")[1].length:0}),S=s.radians=function(t){return t*(Math.PI/180)},x=(s.getAngleFromPoint=function(t,i){var e=i.x-t.x,s=i.y-t.y,n=Math.sqrt(e*e+s*s),o=2*Math.PI+Math.atan2(s,e);return 0>e&&0>s&&(o+=2*Math.PI),{angle:o,distance:n}},s.aliasPixel=function(t){return t%2===0?0:.5}),y=(s.splineCurve=function(t,i,e,s){var n=Math.sqrt(Math.pow(i.x-t.x,2)+Math.pow(i.y-t.y,2)),o=Math.sqrt(Math.pow(e.x-i.x,2)+Math.pow(e.y-i.y,2)),a=s*n/(n+o),h=s*o/(n+o);return{inner:{x:i.x-a*(e.x-t.x),y:i.y-a*(e.y-t.y)},outer:{x:i.x+h*(e.x-t.x),y:i.y+h*(e.y-t.y)}}},s.calculateOrderOfMagnitude=function(t){return Math.floor(Math.log(t)/Math.LN10)}),C=(s.calculateScaleRange=function(t,i,e,s,n){var o=2,a=Math.floor(i/(1.5*e)),h=o>=a,l=g(t),r=m(t);l===r&&(l+=.5,r>=.5&&!s?r-=.5:l+=.5);for(var c=Math.abs(l-r),u=y(c),d=Math.ceil(l/(1*Math.pow(10,u)))*Math.pow(10,u),p=s?0:Math.floor(r/(1*Math.pow(10,u)))*Math.pow(10,u),f=d-p,v=Math.pow(10,u),S=Math.round(f/v);(S>a||a>2*S)&&!h;)if(S>a)v*=2,S=Math.round(f/v),S%1!==0&&(h=!0);else if(n&&u>=0){if(v/2%1!==0)break;v/=2,S=Math.round(f/v)}else v/=2,S=Math.round(f/v);return h&&(S=o,v=f/S),{steps:S,stepValue:v,min:p,max:p+S*v}},s.template=function(t,i){function e(t,i){var e=/\W/.test(t)?new Function("obj","var p=[],print=function(){p.push.apply(p,arguments);};with(obj){p.push('"+t.replace(/[\r\t\n]/g," ").split("<%").join("	").replace(/((^|%>)[^\t]*)'/g,"$1\r").replace(/\t=(.*?)%>/g,"',$1,'").split("	").join("');").split("%>").join("p.push('").split("\r").join("\\'")+"');}return p.join('');"):s[t]=s[t];return i?e(i):e}if(t instanceof Function)return t(i);var s={};return e(t,i)}),w=(s.generateLabels=function(t,i,e,s){var o=new Array(i);return labelTemplateString&&n(o,function(i,n){o[n]=C(t,{value:e+s*(n+1)})}),o},s.easingEffects={linear:function(t){return t},easeInQuad:function(t){return t*t},easeOutQuad:function(t){return-1*t*(t-2)},easeInOutQuad:function(t){return(t/=.5)<1?.5*t*t:-0.5*(--t*(t-2)-1)},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return 1*((t=t/1-1)*t*t+1)},easeInOutCubic:function(t){return(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2)},easeInQuart:function(t){return t*t*t*t},easeOutQuart:function(t){return-1*((t=t/1-1)*t*t*t-1)},easeInOutQuart:function(t){return(t/=.5)<1?.5*t*t*t*t:-0.5*((t-=2)*t*t*t-2)},easeInQuint:function(t){return 1*(t/=1)*t*t*t*t},easeOutQuint:function(t){return 1*((t=t/1-1)*t*t*t*t+1)},easeInOutQuint:function(t){return(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)},easeInSine:function(t){return-1*Math.cos(t/1*(Math.PI/2))+1},easeOutSine:function(t){return 1*Math.sin(t/1*(Math.PI/2))},easeInOutSine:function(t){return-0.5*(Math.cos(Math.PI*t/1)-1)},easeInExpo:function(t){return 0===t?1:1*Math.pow(2,10*(t/1-1))},easeOutExpo:function(t){return 1===t?1:1*(-Math.pow(2,-10*t/1)+1)},easeInOutExpo:function(t){return 0===t?0:1===t?1:(t/=.5)<1?.5*Math.pow(2,10*(t-1)):.5*(-Math.pow(2,-10*--t)+2)},easeInCirc:function(t){return t>=1?t:-1*(Math.sqrt(1-(t/=1)*t)-1)},easeOutCirc:function(t){return 1*Math.sqrt(1-(t=t/1-1)*t)},easeInOutCirc:function(t){return(t/=.5)<1?-0.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},easeInElastic:function(t){var i=1.70158,e=0,s=1;return 0===t?0:1==(t/=1)?1:(e||(e=.3),s<Math.abs(1)?(s=1,i=e/4):i=e/(2*Math.PI)*Math.asin(1/s),-(s*Math.pow(2,10*(t-=1))*Math.sin(2*(1*t-i)*Math.PI/e)))},easeOutElastic:function(t){var i=1.70158,e=0,s=1;return 0===t?0:1==(t/=1)?1:(e||(e=.3),s<Math.abs(1)?(s=1,i=e/4):i=e/(2*Math.PI)*Math.asin(1/s),s*Math.pow(2,-10*t)*Math.sin(2*(1*t-i)*Math.PI/e)+1)},easeInOutElastic:function(t){var i=1.70158,e=0,s=1;return 0===t?0:2==(t/=.5)?1:(e||(e=.3*1.5),s<Math.abs(1)?(s=1,i=e/4):i=e/(2*Math.PI)*Math.asin(1/s),1>t?-.5*s*Math.pow(2,10*(t-=1))*Math.sin(2*(1*t-i)*Math.PI/e):s*Math.pow(2,-10*(t-=1))*Math.sin(2*(1*t-i)*Math.PI/e)*.5+1)},easeInBack:function(t){var i=1.70158;return 1*(t/=1)*t*((i+1)*t-i)},easeOutBack:function(t){var i=1.70158;return 1*((t=t/1-1)*t*((i+1)*t+i)+1)},easeInOutBack:function(t){var i=1.70158;return(t/=.5)<1?.5*t*t*(((i*=1.525)+1)*t-i):.5*((t-=2)*t*(((i*=1.525)+1)*t+i)+2)},easeInBounce:function(t){return 1-w.easeOutBounce(1-t)},easeOutBounce:function(t){return(t/=1)<1/2.75?7.5625*t*t:2/2.75>t?1*(7.5625*(t-=1.5/2.75)*t+.75):2.5/2.75>t?1*(7.5625*(t-=2.25/2.75)*t+.9375):1*(7.5625*(t-=2.625/2.75)*t+.984375)},easeInOutBounce:function(t){return.5>t?.5*w.easeInBounce(2*t):.5*w.easeOutBounce(2*t-1)+.5}}),b=s.requestAnimFrame=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){return window.setTimeout(t,1e3/60)}}(),P=s.cancelAnimFrame=function(){return window.cancelAnimationFrame||window.webkitCancelAnimationFrame||window.mozCancelAnimationFrame||window.oCancelAnimationFrame||window.msCancelAnimationFrame||function(t){return window.clearTimeout(t,1e3/60)}}(),L=(s.animationLoop=function(t,i,e,s,n,o){var a=0,h=w[e]||w.linear,l=function(){a++;var e=a/i,r=h(e);t.call(o,r,e,a),s.call(o,r,e),i>a?o.animationFrame=b(l):n.apply(o)};b(l)},s.getRelativePosition=function(t){var i,e,s=t.originalEvent||t,n=t.currentTarget||t.srcElement,o=n.getBoundingClientRect();return s.touches?(i=s.touches[0].clientX-o.left,e=s.touches[0].clientY-o.top):(i=s.clientX-o.left,e=s.clientY-o.top),{x:i,y:e}},s.addEvent=function(t,i,e){t.addEventListener?t.addEventListener(i,e):t.attachEvent?t.attachEvent("on"+i,e):t["on"+i]=e}),k=s.removeEvent=function(t,i,e){t.removeEventListener?t.removeEventListener(i,e,!1):t.detachEvent?t.detachEvent("on"+i,e):t["on"+i]=c},F=(s.bindEvents=function(t,i,e){t.events||(t.events={}),n(i,function(i){t.events[i]=function(){e.apply(t,arguments)},L(t.chart.canvas,i,t.events[i])})},s.unbindEvents=function(t,i){n(i,function(i,e){k(t.chart.canvas,e,i)})}),R=s.getMaximumWidth=function(t){var i=t.parentNode;return i.clientWidth},T=s.getMaximumHeight=function(t){var i=t.parentNode;return i.clientHeight},A=(s.getMaximumSize=s.getMaximumWidth,s.retinaScale=function(t){var i=t.ctx,e=t.canvas.width,s=t.canvas.height;window.devicePixelRatio&&(i.canvas.style.width=e+"px",i.canvas.style.height=s+"px",i.canvas.height=s*window.devicePixelRatio,i.canvas.width=e*window.devicePixelRatio,i.scale(window.devicePixelRatio,window.devicePixelRatio))}),M=s.clear=function(t){t.ctx.clearRect(0,0,t.width,t.height)},W=s.fontString=function(t,i,e){return i+" "+t+"px "+e},z=s.longestText=function(t,i,e){t.font=i;var s=0;return n(e,function(i){var e=t.measureText(i).width;s=e>s?e:s}),s},B=s.drawRoundedRectangle=function(t,i,e,s,n,o){t.beginPath(),t.moveTo(i+o,e),t.lineTo(i+s-o,e),t.quadraticCurveTo(i+s,e,i+s,e+o),t.lineTo(i+s,e+n-o),t.quadraticCurveTo(i+s,e+n,i+s-o,e+n),t.lineTo(i+o,e+n),t.quadraticCurveTo(i,e+n,i,e+n-o),t.lineTo(i,e+o),t.quadraticCurveTo(i,e,i+o,e),t.closePath()};e.instances={},e.Type=function(t,i,s){this.options=i,this.chart=s,this.id=u(),e.instances[this.id]=this,i.responsive&&this.resize(),this.initialize.call(this,t)},a(e.Type.prototype,{initialize:function(){return this},clear:function(){return M(this.chart),this},stop:function(){return P(this.animationFrame),this},resize:function(t){this.stop();var i=this.chart.canvas,e=R(this.chart.canvas),s=this.options.maintainAspectRatio?e/this.chart.aspectRatio:T(this.chart.canvas);return i.width=this.chart.width=e,i.height=this.chart.height=s,A(this.chart),"function"==typeof t&&t.apply(this,Array.prototype.slice.call(arguments,1)),this},reflow:c,render:function(t){return t&&this.reflow(),this.options.animation&&!t?s.animationLoop(this.draw,this.options.animationSteps,this.options.animationEasing,this.options.onAnimationProgress,this.options.onAnimationComplete,this):(this.draw(),this.options.onAnimationComplete.call(this)),this},generateLegend:function(){return C(this.options.legendTemplate,this)},destroy:function(){this.clear(),F(this,this.events);var t=this.chart.canvas;t.width=this.chart.width,t.height=this.chart.height,t.style.removeProperty?(t.style.removeProperty("width"),t.style.removeProperty("height")):(t.style.removeAttribute("width"),t.style.removeAttribute("height")),delete e.instances[this.id]},showTooltip:function(t,i){"undefined"==typeof this.activeElements&&(this.activeElements=[]);var o=function(t){var i=!1;return t.length!==this.activeElements.length?i=!0:(n(t,function(t,e){t!==this.activeElements[e]&&(i=!0)},this),i)}.call(this,t);if(o||i){if(this.activeElements=t,this.draw(),this.options.customTooltips&&this.options.customTooltips(!1),t.length>0)if(this.datasets&&this.datasets.length>1){for(var a,h,r=this.datasets.length-1;r>=0&&(a=this.datasets[r].points||this.datasets[r].bars||this.datasets[r].segments,h=l(a,t[0]),-1===h);r--);var c=[],u=[],d=function(){var t,i,e,n,o,a=[],l=[],r=[];return s.each(this.datasets,function(i){t=i.points||i.bars||i.segments,t[h]&&t[h].hasValue()&&a.push(t[h])}),s.each(a,function(t){l.push(t.x),r.push(t.y),c.push(s.template(this.options.multiTooltipTemplate,t)),u.push({fill:t._saved.fillColor||t.fillColor,stroke:t._saved.strokeColor||t.strokeColor})},this),o=m(r),e=g(r),n=m(l),i=g(l),{x:n>this.chart.width/2?n:i,y:(o+e)/2}}.call(this,h);new e.MultiTooltip({x:d.x,y:d.y,xPadding:this.options.tooltipXPadding,yPadding:this.options.tooltipYPadding,xOffset:this.options.tooltipXOffset,fillColor:this.options.tooltipFillColor,textColor:this.options.tooltipFontColor,fontFamily:this.options.tooltipFontFamily,fontStyle:this.options.tooltipFontStyle,fontSize:this.options.tooltipFontSize,titleTextColor:this.options.tooltipTitleFontColor,titleFontFamily:this.options.tooltipTitleFontFamily,titleFontStyle:this.options.tooltipTitleFontStyle,titleFontSize:this.options.tooltipTitleFontSize,cornerRadius:this.options.tooltipCornerRadius,labels:c,legendColors:u,legendColorBackground:this.options.multiTooltipKeyBackground,title:t[0].label,chart:this.chart,ctx:this.chart.ctx,custom:this.options.customTooltips}).draw()}else n(t,function(t){var i=t.tooltipPosition();new e.Tooltip({x:Math.round(i.x),y:Math.round(i.y),xPadding:this.options.tooltipXPadding,yPadding:this.options.tooltipYPadding,fillColor:this.options.tooltipFillColor,textColor:this.options.tooltipFontColor,fontFamily:this.options.tooltipFontFamily,fontStyle:this.options.tooltipFontStyle,fontSize:this.options.tooltipFontSize,caretHeight:this.options.tooltipCaretSize,cornerRadius:this.options.tooltipCornerRadius,text:C(this.options.tooltipTemplate,t),chart:this.chart,custom:this.options.customTooltips}).draw()},this);return this}},toBase64Image:function(){return this.chart.canvas.toDataURL.apply(this.chart.canvas,arguments)}}),e.Type.extend=function(t){var i=this,s=function(){return i.apply(this,arguments)};if(s.prototype=o(i.prototype),a(s.prototype,t),s.extend=e.Type.extend,t.name||i.prototype.name){var n=t.name||i.prototype.name,l=e.defaults[i.prototype.name]?o(e.defaults[i.prototype.name]):{};e.defaults[n]=a(l,t.defaults),e.types[n]=s,e.prototype[n]=function(t,i){var o=h(e.defaults.global,e.defaults[n],i||{});return new s(t,o,this)}}else d("Name not provided for this chart, so it hasn't been registered");return i},e.Element=function(t){a(this,t),this.initialize.apply(this,arguments),this.save()},a(e.Element.prototype,{initialize:function(){},restore:function(t){return t?n(t,function(t){this[t]=this._saved[t]},this):a(this,this._saved),this},save:function(){return this._saved=o(this),delete this._saved._saved,this},update:function(t){return n(t,function(t,i){this._saved[i]=this[i],this[i]=t},this),this},transition:function(t,i){return n(t,function(t,e){this[e]=(t-this._saved[e])*i+this._saved[e]},this),this},tooltipPosition:function(){return{x:this.x,y:this.y}},hasValue:function(){return f(this.value)}}),e.Element.extend=r,e.Point=e.Element.extend({display:!0,inRange:function(t,i){var e=this.hitDetectionRadius+this.radius;return Math.pow(t-this.x,2)+Math.pow(i-this.y,2)<Math.pow(e,2)},draw:function(){if(this.display){var t=this.ctx;t.beginPath(),t.arc(this.x,this.y,this.radius,0,2*Math.PI),t.closePath(),t.strokeStyle=this.strokeColor,t.lineWidth=this.strokeWidth,t.fillStyle=this.fillColor,t.fill(),t.stroke()}}}),e.Arc=e.Element.extend({inRange:function(t,i){var e=s.getAngleFromPoint(this,{x:t,y:i}),n=e.angle>=this.startAngle&&e.angle<=this.endAngle,o=e.distance>=this.innerRadius&&e.distance<=this.outerRadius;return n&&o},tooltipPosition:function(){var t=this.startAngle+(this.endAngle-this.startAngle)/2,i=(this.outerRadius-this.innerRadius)/2+this.innerRadius;return{x:this.x+Math.cos(t)*i,y:this.y+Math.sin(t)*i}},draw:function(t){var i=this.ctx;i.beginPath(),i.arc(this.x,this.y,this.outerRadius,this.startAngle,this.endAngle),i.arc(this.x,this.y,this.innerRadius,this.endAngle,this.startAngle,!0),i.closePath(),i.strokeStyle=this.strokeColor,i.lineWidth=this.strokeWidth,i.fillStyle=this.fillColor,i.fill(),i.lineJoin="bevel",this.showStroke&&i.stroke()}}),e.Rectangle=e.Element.extend({draw:function(){var t=this.ctx,i=this.width/2,e=this.x-i,s=this.x+i,n=this.base-(this.base-this.y),o=this.strokeWidth/2;this.showStroke&&(e+=o,s-=o,n+=o),t.beginPath(),t.fillStyle=this.fillColor,t.strokeStyle=this.strokeColor,t.lineWidth=this.strokeWidth,t.moveTo(e,this.base),t.lineTo(e,n),t.lineTo(s,n),t.lineTo(s,this.base),t.fill(),this.showStroke&&t.stroke()},height:function(){return this.base-this.y},inRange:function(t,i){return t>=this.x-this.width/2&&t<=this.x+this.width/2&&i>=this.y&&i<=this.base}}),e.Tooltip=e.Element.extend({draw:function(){var t=this.chart.ctx;t.font=W(this.fontSize,this.fontStyle,this.fontFamily),this.xAlign="center",this.yAlign="above";var i=this.caretPadding=2,e=t.measureText(this.text).width+2*this.xPadding,s=this.fontSize+2*this.yPadding,n=s+this.caretHeight+i;this.x+e/2>this.chart.width?this.xAlign="left":this.x-e/2<0&&(this.xAlign="right"),this.y-n<0&&(this.yAlign="below");var o=this.x-e/2,a=this.y-n;if(t.fillStyle=this.fillColor,this.custom)this.custom(this);else{switch(this.yAlign){case"above":t.beginPath(),t.moveTo(this.x,this.y-i),t.lineTo(this.x+this.caretHeight,this.y-(i+this.caretHeight)),t.lineTo(this.x-this.caretHeight,this.y-(i+this.caretHeight)),t.closePath(),t.fill();break;case"below":a=this.y+i+this.caretHeight,t.beginPath(),t.moveTo(this.x,this.y+i),t.lineTo(this.x+this.caretHeight,this.y+i+this.caretHeight),t.lineTo(this.x-this.caretHeight,this.y+i+this.caretHeight),t.closePath(),t.fill()}switch(this.xAlign){case"left":o=this.x-e+(this.cornerRadius+this.caretHeight);break;case"right":o=this.x-(this.cornerRadius+this.caretHeight)}B(t,o,a,e,s,this.cornerRadius),t.fill(),t.fillStyle=this.textColor,t.textAlign="center",t.textBaseline="middle",t.fillText(this.text,o+e/2,a+s/2)}}}),e.MultiTooltip=e.Element.extend({initialize:function(){this.font=W(this.fontSize,this.fontStyle,this.fontFamily),this.titleFont=W(this.titleFontSize,this.titleFontStyle,this.titleFontFamily),this.height=this.labels.length*this.fontSize+(this.labels.length-1)*(this.fontSize/2)+2*this.yPadding+1.5*this.titleFontSize,this.ctx.font=this.titleFont;var t=this.ctx.measureText(this.title).width,i=z(this.ctx,this.font,this.labels)+this.fontSize+3,e=g([i,t]);this.width=e+2*this.xPadding;var s=this.height/2;this.y-s<0?this.y=s:this.y+s>this.chart.height&&(this.y=this.chart.height-s),this.x>this.chart.width/2?this.x-=this.xOffset+this.width:this.x+=this.xOffset},getLineHeight:function(t){var i=this.y-this.height/2+this.yPadding,e=t-1;return 0===t?i+this.titleFontSize/2:i+(1.5*this.fontSize*e+this.fontSize/2)+1.5*this.titleFontSize},draw:function(){if(this.custom)this.custom(this);else{B(this.ctx,this.x,this.y-this.height/2,this.width,this.height,this.cornerRadius);var t=this.ctx;t.fillStyle=this.fillColor,t.fill(),t.closePath(),t.textAlign="left",t.textBaseline="middle",t.fillStyle=this.titleTextColor,t.font=this.titleFont,t.fillText(this.title,this.x+this.xPadding,this.getLineHeight(0)),t.font=this.font,s.each(this.labels,function(i,e){t.fillStyle=this.textColor,t.fillText(i,this.x+this.xPadding+this.fontSize+3,this.getLineHeight(e+1)),t.fillStyle=this.legendColorBackground,t.fillRect(this.x+this.xPadding,this.getLineHeight(e+1)-this.fontSize/2,this.fontSize,this.fontSize),t.fillStyle=this.legendColors[e].fill,t.fillRect(this.x+this.xPadding,this.getLineHeight(e+1)-this.fontSize/2,this.fontSize,this.fontSize)},this)}}}),e.Scale=e.Element.extend({initialize:function(){this.fit()},buildYLabels:function(){this.yLabels=[];for(var t=v(this.stepValue),i=0;i<=this.steps;i++)this.yLabels.push(C(this.templateString,{value:(this.min+i*this.stepValue).toFixed(t)}));this.yLabelWidth=this.display&&this.showLabels?z(this.ctx,this.font,this.yLabels):0},addXLabel:function(t){this.xLabels.push(t),this.valuesCount++,this.fit()},removeXLabel:function(){this.xLabels.shift(),this.valuesCount--,this.fit()},fit:function(){this.startPoint=this.display?this.fontSize:0,this.endPoint=this.display?this.height-1.5*this.fontSize-5:this.height,this.startPoint+=this.padding,this.endPoint-=this.padding;var t,i=this.endPoint-this.startPoint;for(this.calculateYRange(i),this.buildYLabels(),this.calculateXLabelRotation();i>this.endPoint-this.startPoint;)i=this.endPoint-this.startPoint,t=this.yLabelWidth,this.calculateYRange(i),this.buildYLabels(),t<this.yLabelWidth&&this.calculateXLabelRotation()},calculateXLabelRotation:function(){this.ctx.font=this.font;var t,i,e=this.ctx.measureText(this.xLabels[0]).width,s=this.ctx.measureText(this.xLabels[this.xLabels.length-1]).width;if(this.xScalePaddingRight=s/2+3,this.xScalePaddingLeft=e/2>this.yLabelWidth+10?e/2:this.yLabelWidth+10,this.xLabelRotation=0,this.display){var n,o=z(this.ctx,this.font,this.xLabels);this.xLabelWidth=o;for(var a=Math.floor(this.calculateX(1)-this.calculateX(0))-6;this.xLabelWidth>a&&0===this.xLabelRotation||this.xLabelWidth>a&&this.xLabelRotation<=90&&this.xLabelRotation>0;)n=Math.cos(S(this.xLabelRotation)),t=n*e,i=n*s,t+this.fontSize/2>this.yLabelWidth+8&&(this.xScalePaddingLeft=t+this.fontSize/2),this.xScalePaddingRight=this.fontSize/2,this.xLabelRotation++,this.xLabelWidth=n*o;this.xLabelRotation>0&&(this.endPoint-=Math.sin(S(this.xLabelRotation))*o+3)}else this.xLabelWidth=0,this.xScalePaddingRight=this.padding,this.xScalePaddingLeft=this.padding},calculateYRange:c,drawingArea:function(){return this.startPoint-this.endPoint},calculateY:function(t){var i=this.drawingArea()/(this.min-this.max);return this.endPoint-i*(t-this.min)},calculateX:function(t){var i=(this.xLabelRotation>0,this.width-(this.xScalePaddingLeft+this.xScalePaddingRight)),e=i/Math.max(this.valuesCount-(this.offsetGridLines?0:1),1),s=e*t+this.xScalePaddingLeft;return this.offsetGridLines&&(s+=e/2),Math.round(s)},update:function(t){s.extend(this,t),this.fit()},draw:function(){var t=this.ctx,i=(this.endPoint-this.startPoint)/this.steps,e=Math.round(this.xScalePaddingLeft);this.display&&(t.fillStyle=this.textColor,t.font=this.font,n(this.yLabels,function(n,o){var a=this.endPoint-i*o,h=Math.round(a),l=this.showHorizontalLines;t.textAlign="right",t.textBaseline="middle",this.showLabels&&t.fillText(n,e-10,a),0!==o||l||(l=!0),l&&t.beginPath(),o>0?(t.lineWidth=this.gridLineWidth,t.strokeStyle=this.gridLineColor):(t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor),h+=s.aliasPixel(t.lineWidth),l&&(t.moveTo(e,h),t.lineTo(this.width,h),t.stroke(),t.closePath()),t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor,t.beginPath(),t.moveTo(e-5,h),t.lineTo(e,h),t.stroke(),t.closePath()},this),n(this.xLabels,function(i,e){var s=this.calculateX(e)+x(this.lineWidth),n=this.calculateX(e-(this.offsetGridLines?.5:0))+x(this.lineWidth),o=this.xLabelRotation>0,a=this.showVerticalLines;0!==e||a||(a=!0),a&&t.beginPath(),e>0?(t.lineWidth=this.gridLineWidth,t.strokeStyle=this.gridLineColor):(t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor),a&&(t.moveTo(n,this.endPoint),t.lineTo(n,this.startPoint-3),t.stroke(),t.closePath()),t.lineWidth=this.lineWidth,t.strokeStyle=this.lineColor,t.beginPath(),t.moveTo(n,this.endPoint),t.lineTo(n,this.endPoint+5),t.stroke(),t.closePath(),t.save(),t.translate(s,o?this.endPoint+12:this.endPoint+8),t.rotate(-1*S(this.xLabelRotation)),t.font=this.font,t.textAlign=o?"right":"center",t.textBaseline=o?"middle":"top",t.fillText(i,0,0),t.restore()},this))}}),e.RadialScale=e.Element.extend({initialize:function(){this.size=m([this.height,this.width]),this.drawingArea=this.display?this.size/2-(this.fontSize/2+this.backdropPaddingY):this.size/2},calculateCenterOffset:function(t){var i=this.drawingArea/(this.max-this.min);return(t-this.min)*i},update:function(){this.lineArc?this.drawingArea=this.display?this.size/2-(this.fontSize/2+this.backdropPaddingY):this.size/2:this.setScaleSize(),this.buildYLabels()},buildYLabels:function(){this.yLabels=[];for(var t=v(this.stepValue),i=0;i<=this.steps;i++)this.yLabels.push(C(this.templateString,{value:(this.min+i*this.stepValue).toFixed(t)}))},getCircumference:function(){return 2*Math.PI/this.valuesCount},setScaleSize:function(){var t,i,e,s,n,o,a,h,l,r,c,u,d=m([this.height/2-this.pointLabelFontSize-5,this.width/2]),p=this.width,g=0;for(this.ctx.font=W(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily),i=0;i<this.valuesCount;i++)t=this.getPointPosition(i,d),e=this.ctx.measureText(C(this.templateString,{value:this.labels[i]})).width+5,0===i||i===this.valuesCount/2?(s=e/2,t.x+s>p&&(p=t.x+s,n=i),t.x-s<g&&(g=t.x-s,a=i)):i<this.valuesCount/2?t.x+e>p&&(p=t.x+e,n=i):i>this.valuesCount/2&&t.x-e<g&&(g=t.x-e,a=i);l=g,r=Math.ceil(p-this.width),o=this.getIndexAngle(n),h=this.getIndexAngle(a),c=r/Math.sin(o+Math.PI/2),u=l/Math.sin(h+Math.PI/2),c=f(c)?c:0,u=f(u)?u:0,this.drawingArea=d-(u+c)/2,this.setCenterPoint(u,c)},setCenterPoint:function(t,i){var e=this.width-i-this.drawingArea,s=t+this.drawingArea;this.xCenter=(s+e)/2,this.yCenter=this.height/2},getIndexAngle:function(t){var i=2*Math.PI/this.valuesCount;return t*i-Math.PI/2},getPointPosition:function(t,i){var e=this.getIndexAngle(t);return{x:Math.cos(e)*i+this.xCenter,y:Math.sin(e)*i+this.yCenter}},draw:function(){if(this.display){var t=this.ctx;if(n(this.yLabels,function(i,e){if(e>0){var s,n=e*(this.drawingArea/this.steps),o=this.yCenter-n;if(this.lineWidth>0)if(t.strokeStyle=this.lineColor,t.lineWidth=this.lineWidth,this.lineArc)t.beginPath(),t.arc(this.xCenter,this.yCenter,n,0,2*Math.PI),t.closePath(),t.stroke();else{t.beginPath();for(var a=0;a<this.valuesCount;a++)s=this.getPointPosition(a,this.calculateCenterOffset(this.min+e*this.stepValue)),0===a?t.moveTo(s.x,s.y):t.lineTo(s.x,s.y);t.closePath(),t.stroke()}if(this.showLabels){if(t.font=W(this.fontSize,this.fontStyle,this.fontFamily),this.showLabelBackdrop){var h=t.measureText(i).width;t.fillStyle=this.backdropColor,t.fillRect(this.xCenter-h/2-this.backdropPaddingX,o-this.fontSize/2-this.backdropPaddingY,h+2*this.backdropPaddingX,this.fontSize+2*this.backdropPaddingY)}t.textAlign="center",t.textBaseline="middle",t.fillStyle=this.fontColor,t.fillText(i,this.xCenter,o)}}},this),!this.lineArc){t.lineWidth=this.angleLineWidth,t.strokeStyle=this.angleLineColor;for(var i=this.valuesCount-1;i>=0;i--){if(this.angleLineWidth>0){var e=this.getPointPosition(i,this.calculateCenterOffset(this.max));t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(e.x,e.y),t.stroke(),t.closePath()}var s=this.getPointPosition(i,this.calculateCenterOffset(this.max)+5);t.font=W(this.pointLabelFontSize,this.pointLabelFontStyle,this.pointLabelFontFamily),t.fillStyle=this.pointLabelFontColor;var o=this.labels.length,a=this.labels.length/2,h=a/2,l=h>i||i>o-h,r=i===h||i===o-h;t.textAlign=0===i?"center":i===a?"center":a>i?"left":"right",t.textBaseline=r?"middle":l?"bottom":"top",t.fillText(this.labels[i],s.x,s.y)}}}}}),s.addEvent(window,"resize",function(){var t;return function(){clearTimeout(t),t=setTimeout(function(){n(e.instances,function(t){t.options.responsive&&t.resize(t.render,!0)})},50)}}()),p?define(function(){return e}):"object"==typeof module&&module.exports&&(module.exports=e),t.Chart=e,e.noConflict=function(){return t.Chart=i,e}}).call(this),function(){"use strict";var t=this,i=t.Chart,e=i.helpers,s={scaleBeginAtZero:!0,scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,scaleShowHorizontalLines:!0,scaleShowVerticalLines:!0,barShowStroke:!0,barStrokeWidth:2,barValueSpacing:5,barDatasetSpacing:1,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].fillColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'};i.Type.extend({name:"Bar",defaults:s,initialize:function(t){var s=this.options;this.ScaleClass=i.Scale.extend({offsetGridLines:!0,calculateBarX:function(t,i,e){var n=this.calculateBaseWidth(),o=this.calculateX(e)-n/2,a=this.calculateBarWidth(t);return o+a*i+i*s.barDatasetSpacing+a/2},calculateBaseWidth:function(){return this.calculateX(1)-this.calculateX(0)-2*s.barValueSpacing},calculateBarWidth:function(t){var i=this.calculateBaseWidth()-(t-1)*s.barDatasetSpacing;return i/t}}),this.datasets=[],this.options.showTooltips&&e.bindEvents(this,this.options.tooltipEvents,function(t){var i="mouseout"!==t.type?this.getBarsAtEvent(t):[];this.eachBars(function(t){t.restore(["fillColor","strokeColor"])}),e.each(i,function(t){t.fillColor=t.highlightFill,t.strokeColor=t.highlightStroke}),this.showTooltip(i)}),this.BarClass=i.Rectangle.extend({strokeWidth:this.options.barStrokeWidth,showStroke:this.options.barShowStroke,ctx:this.chart.ctx}),e.each(t.datasets,function(i){var s={label:i.label||null,fillColor:i.fillColor,strokeColor:i.strokeColor,bars:[]};this.datasets.push(s),e.each(i.data,function(e,n){s.bars.push(new this.BarClass({value:e,label:t.labels[n],datasetLabel:i.label,strokeColor:i.strokeColor,fillColor:i.fillColor,highlightFill:i.highlightFill||i.fillColor,highlightStroke:i.highlightStroke||i.strokeColor}))},this)},this),this.buildScale(t.labels),this.BarClass.prototype.base=this.scale.endPoint,this.eachBars(function(t,i,s){e.extend(t,{width:this.scale.calculateBarWidth(this.datasets.length),x:this.scale.calculateBarX(this.datasets.length,s,i),y:this.scale.endPoint}),t.save()},this),this.render()},update:function(){this.scale.update(),e.each(this.activeElements,function(t){t.restore(["fillColor","strokeColor"])}),this.eachBars(function(t){t.save()}),this.render()},eachBars:function(t){e.each(this.datasets,function(i,s){e.each(i.bars,t,this,s)},this)},getBarsAtEvent:function(t){for(var i,s=[],n=e.getRelativePosition(t),o=function(t){s.push(t.bars[i])},a=0;a<this.datasets.length;a++)for(i=0;i<this.datasets[a].bars.length;i++)if(this.datasets[a].bars[i].inRange(n.x,n.y))return e.each(this.datasets,o),s;return s},buildScale:function(t){var i=this,s=function(){var t=[];return i.eachBars(function(i){t.push(i.value)}),t},n={templateString:this.options.scaleLabel,height:this.chart.height,width:this.chart.width,ctx:this.chart.ctx,textColor:this.options.scaleFontColor,fontSize:this.options.scaleFontSize,fontStyle:this.options.scaleFontStyle,fontFamily:this.options.scaleFontFamily,valuesCount:t.length,beginAtZero:this.options.scaleBeginAtZero,integersOnly:this.options.scaleIntegersOnly,calculateYRange:function(t){var i=e.calculateScaleRange(s(),t,this.fontSize,this.beginAtZero,this.integersOnly);e.extend(this,i)},xLabels:t,font:e.fontString(this.options.scaleFontSize,this.options.scaleFontStyle,this.options.scaleFontFamily),lineWidth:this.options.scaleLineWidth,lineColor:this.options.scaleLineColor,showHorizontalLines:this.options.scaleShowHorizontalLines,showVerticalLines:this.options.scaleShowVerticalLines,gridLineWidth:this.options.scaleShowGridLines?this.options.scaleGridLineWidth:0,gridLineColor:this.options.scaleShowGridLines?this.options.scaleGridLineColor:"rgba(0,0,0,0)",padding:this.options.showScale?0:this.options.barShowStroke?this.options.barStrokeWidth:0,showLabels:this.options.scaleShowLabels,display:this.options.showScale};this.options.scaleOverride&&e.extend(n,{calculateYRange:e.noop,steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}),this.scale=new this.ScaleClass(n)},addData:function(t,i){e.each(t,function(t,e){this.datasets[e].bars.push(new this.BarClass({value:t,label:i,x:this.scale.calculateBarX(this.datasets.length,e,this.scale.valuesCount+1),y:this.scale.endPoint,width:this.scale.calculateBarWidth(this.datasets.length),base:this.scale.endPoint,strokeColor:this.datasets[e].strokeColor,fillColor:this.datasets[e].fillColor}))
},this),this.scale.addXLabel(i),this.update()},removeData:function(){this.scale.removeXLabel(),e.each(this.datasets,function(t){t.bars.shift()},this),this.update()},reflow:function(){e.extend(this.BarClass.prototype,{y:this.scale.endPoint,base:this.scale.endPoint});var t=e.extend({height:this.chart.height,width:this.chart.width});this.scale.update(t)},draw:function(t){var i=t||1;this.clear();this.chart.ctx;this.scale.draw(i),e.each(this.datasets,function(t,s){e.each(t.bars,function(t,e){t.hasValue()&&(t.base=this.scale.endPoint,t.transition({x:this.scale.calculateBarX(this.datasets.length,s,e),y:this.scale.calculateY(t.value),width:this.scale.calculateBarWidth(this.datasets.length)},i).draw())},this)},this)}})}.call(this),function(){"use strict";var t=this,i=t.Chart,e=i.helpers,s={segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,percentageInnerCutout:50,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'};i.Type.extend({name:"Doughnut",defaults:s,initialize:function(t){this.segments=[],this.outerRadius=(e.min([this.chart.width,this.chart.height])-this.options.segmentStrokeWidth/2)/2,this.SegmentArc=i.Arc.extend({ctx:this.chart.ctx,x:this.chart.width/2,y:this.chart.height/2}),this.options.showTooltips&&e.bindEvents(this,this.options.tooltipEvents,function(t){var i="mouseout"!==t.type?this.getSegmentsAtEvent(t):[];e.each(this.segments,function(t){t.restore(["fillColor"])}),e.each(i,function(t){t.fillColor=t.highlightColor}),this.showTooltip(i)}),this.calculateTotal(t),e.each(t,function(t,i){this.addData(t,i,!0)},this),this.render()},getSegmentsAtEvent:function(t){var i=[],s=e.getRelativePosition(t);return e.each(this.segments,function(t){t.inRange(s.x,s.y)&&i.push(t)},this),i},addData:function(t,i,e){var s=i||this.segments.length;this.segments.splice(s,0,new this.SegmentArc({value:t.value,outerRadius:this.options.animateScale?0:this.outerRadius,innerRadius:this.options.animateScale?0:this.outerRadius/100*this.options.percentageInnerCutout,fillColor:t.color,highlightColor:t.highlight||t.color,showStroke:this.options.segmentShowStroke,strokeWidth:this.options.segmentStrokeWidth,strokeColor:this.options.segmentStrokeColor,startAngle:1.5*Math.PI,circumference:this.options.animateRotate?0:this.calculateCircumference(t.value),label:t.label})),e||(this.reflow(),this.update())},calculateCircumference:function(t){return 2*Math.PI*(Math.abs(t)/this.total)},calculateTotal:function(t){this.total=0,e.each(t,function(t){this.total+=Math.abs(t.value)},this)},update:function(){this.calculateTotal(this.segments),e.each(this.activeElements,function(t){t.restore(["fillColor"])}),e.each(this.segments,function(t){t.save()}),this.render()},removeData:function(t){var i=e.isNumber(t)?t:this.segments.length-1;this.segments.splice(i,1),this.reflow(),this.update()},reflow:function(){e.extend(this.SegmentArc.prototype,{x:this.chart.width/2,y:this.chart.height/2}),this.outerRadius=(e.min([this.chart.width,this.chart.height])-this.options.segmentStrokeWidth/2)/2,e.each(this.segments,function(t){t.update({outerRadius:this.outerRadius,innerRadius:this.outerRadius/100*this.options.percentageInnerCutout})},this)},draw:function(t){var i=t?t:1;this.clear(),e.each(this.segments,function(t,e){t.transition({circumference:this.calculateCircumference(t.value),outerRadius:this.outerRadius,innerRadius:this.outerRadius/100*this.options.percentageInnerCutout},i),t.endAngle=t.startAngle+t.circumference,t.draw(),0===e&&(t.startAngle=1.5*Math.PI),e<this.segments.length-1&&(this.segments[e+1].startAngle=t.endAngle)},this)}}),i.types.Doughnut.extend({name:"Pie",defaults:e.merge(s,{percentageInnerCutout:0})})}.call(this),function(){"use strict";var t=this,i=t.Chart,e=i.helpers,s={scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,scaleShowHorizontalLines:!0,scaleShowVerticalLines:!0,bezierCurve:!0,bezierCurveTension:.4,pointDot:!0,pointDotRadius:4,pointDotStrokeWidth:1,pointHitDetectionRadius:20,datasetStroke:!0,datasetStrokeWidth:2,datasetFill:!0,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].strokeColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'};i.Type.extend({name:"Line",defaults:s,initialize:function(t){this.PointClass=i.Point.extend({strokeWidth:this.options.pointDotStrokeWidth,radius:this.options.pointDotRadius,display:this.options.pointDot,hitDetectionRadius:this.options.pointHitDetectionRadius,ctx:this.chart.ctx,inRange:function(t){return Math.pow(t-this.x,2)<Math.pow(this.radius+this.hitDetectionRadius,2)}}),this.datasets=[],this.options.showTooltips&&e.bindEvents(this,this.options.tooltipEvents,function(t){var i="mouseout"!==t.type?this.getPointsAtEvent(t):[];this.eachPoints(function(t){t.restore(["fillColor","strokeColor"])}),e.each(i,function(t){t.fillColor=t.highlightFill,t.strokeColor=t.highlightStroke}),this.showTooltip(i)}),e.each(t.datasets,function(i){var s={label:i.label||null,fillColor:i.fillColor,strokeColor:i.strokeColor,pointColor:i.pointColor,pointStrokeColor:i.pointStrokeColor,points:[]};this.datasets.push(s),e.each(i.data,function(e,n){s.points.push(new this.PointClass({value:e,label:t.labels[n],datasetLabel:i.label,strokeColor:i.pointStrokeColor,fillColor:i.pointColor,highlightFill:i.pointHighlightFill||i.pointColor,highlightStroke:i.pointHighlightStroke||i.pointStrokeColor}))},this),this.buildScale(t.labels),this.eachPoints(function(t,i){e.extend(t,{x:this.scale.calculateX(i),y:this.scale.endPoint}),t.save()},this)},this),this.render()},update:function(){this.scale.update(),e.each(this.activeElements,function(t){t.restore(["fillColor","strokeColor"])}),this.eachPoints(function(t){t.save()}),this.render()},eachPoints:function(t){e.each(this.datasets,function(i){e.each(i.points,t,this)},this)},getPointsAtEvent:function(t){var i=[],s=e.getRelativePosition(t);return e.each(this.datasets,function(t){e.each(t.points,function(t){t.inRange(s.x,s.y)&&i.push(t)})},this),i},buildScale:function(t){var s=this,n=function(){var t=[];return s.eachPoints(function(i){t.push(i.value)}),t},o={templateString:this.options.scaleLabel,height:this.chart.height,width:this.chart.width,ctx:this.chart.ctx,textColor:this.options.scaleFontColor,fontSize:this.options.scaleFontSize,fontStyle:this.options.scaleFontStyle,fontFamily:this.options.scaleFontFamily,valuesCount:t.length,beginAtZero:this.options.scaleBeginAtZero,integersOnly:this.options.scaleIntegersOnly,calculateYRange:function(t){var i=e.calculateScaleRange(n(),t,this.fontSize,this.beginAtZero,this.integersOnly);e.extend(this,i)},xLabels:t,font:e.fontString(this.options.scaleFontSize,this.options.scaleFontStyle,this.options.scaleFontFamily),lineWidth:this.options.scaleLineWidth,lineColor:this.options.scaleLineColor,showHorizontalLines:this.options.scaleShowHorizontalLines,showVerticalLines:this.options.scaleShowVerticalLines,gridLineWidth:this.options.scaleShowGridLines?this.options.scaleGridLineWidth:0,gridLineColor:this.options.scaleShowGridLines?this.options.scaleGridLineColor:"rgba(0,0,0,0)",padding:this.options.showScale?0:this.options.pointDotRadius+this.options.pointDotStrokeWidth,showLabels:this.options.scaleShowLabels,display:this.options.showScale};this.options.scaleOverride&&e.extend(o,{calculateYRange:e.noop,steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}),this.scale=new i.Scale(o)},addData:function(t,i){e.each(t,function(t,e){this.datasets[e].points.push(new this.PointClass({value:t,label:i,x:this.scale.calculateX(this.scale.valuesCount+1),y:this.scale.endPoint,strokeColor:this.datasets[e].pointStrokeColor,fillColor:this.datasets[e].pointColor}))},this),this.scale.addXLabel(i),this.update()},removeData:function(){this.scale.removeXLabel(),e.each(this.datasets,function(t){t.points.shift()},this),this.update()},reflow:function(){var t=e.extend({height:this.chart.height,width:this.chart.width});this.scale.update(t)},draw:function(t){var i=t||1;this.clear();var s=this.chart.ctx,n=function(t){return null!==t.value},o=function(t,i,s){return e.findNextWhere(i,n,s)||t},a=function(t,i,s){return e.findPreviousWhere(i,n,s)||t};this.scale.draw(i),e.each(this.datasets,function(t){var h=e.where(t.points,n);e.each(t.points,function(t,e){t.hasValue()&&t.transition({y:this.scale.calculateY(t.value),x:this.scale.calculateX(e)},i)},this),this.options.bezierCurve&&e.each(h,function(t,i){var s=i>0&&i<h.length-1?this.options.bezierCurveTension:0;t.controlPoints=e.splineCurve(a(t,h,i),t,o(t,h,i),s),t.controlPoints.outer.y>this.scale.endPoint?t.controlPoints.outer.y=this.scale.endPoint:t.controlPoints.outer.y<this.scale.startPoint&&(t.controlPoints.outer.y=this.scale.startPoint),t.controlPoints.inner.y>this.scale.endPoint?t.controlPoints.inner.y=this.scale.endPoint:t.controlPoints.inner.y<this.scale.startPoint&&(t.controlPoints.inner.y=this.scale.startPoint)},this),s.lineWidth=this.options.datasetStrokeWidth,s.strokeStyle=t.strokeColor,s.beginPath(),e.each(h,function(t,i){if(0===i)s.moveTo(t.x,t.y);else if(this.options.bezierCurve){var e=a(t,h,i);s.bezierCurveTo(e.controlPoints.outer.x,e.controlPoints.outer.y,t.controlPoints.inner.x,t.controlPoints.inner.y,t.x,t.y)}else s.lineTo(t.x,t.y)},this),s.stroke(),this.options.datasetFill&&h.length>0&&(s.lineTo(h[h.length-1].x,this.scale.endPoint),s.lineTo(h[0].x,this.scale.endPoint),s.fillStyle=t.fillColor,s.closePath(),s.fill()),e.each(h,function(t){t.draw()})},this)}})}.call(this),function(){"use strict";var t=this,i=t.Chart,e=i.helpers,s={scaleShowLabelBackdrop:!0,scaleBackdropColor:"rgba(255,255,255,0.75)",scaleBeginAtZero:!0,scaleBackdropPaddingY:2,scaleBackdropPaddingX:2,scaleShowLine:!0,segmentShowStroke:!0,segmentStrokeColor:"#fff",segmentStrokeWidth:2,animationSteps:100,animationEasing:"easeOutBounce",animateRotate:!0,animateScale:!1,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'};i.Type.extend({name:"PolarArea",defaults:s,initialize:function(t){this.segments=[],this.SegmentArc=i.Arc.extend({showStroke:this.options.segmentShowStroke,strokeWidth:this.options.segmentStrokeWidth,strokeColor:this.options.segmentStrokeColor,ctx:this.chart.ctx,innerRadius:0,x:this.chart.width/2,y:this.chart.height/2}),this.scale=new i.RadialScale({display:this.options.showScale,fontStyle:this.options.scaleFontStyle,fontSize:this.options.scaleFontSize,fontFamily:this.options.scaleFontFamily,fontColor:this.options.scaleFontColor,showLabels:this.options.scaleShowLabels,showLabelBackdrop:this.options.scaleShowLabelBackdrop,backdropColor:this.options.scaleBackdropColor,backdropPaddingY:this.options.scaleBackdropPaddingY,backdropPaddingX:this.options.scaleBackdropPaddingX,lineWidth:this.options.scaleShowLine?this.options.scaleLineWidth:0,lineColor:this.options.scaleLineColor,lineArc:!0,width:this.chart.width,height:this.chart.height,xCenter:this.chart.width/2,yCenter:this.chart.height/2,ctx:this.chart.ctx,templateString:this.options.scaleLabel,valuesCount:t.length}),this.updateScaleRange(t),this.scale.update(),e.each(t,function(t,i){this.addData(t,i,!0)},this),this.options.showTooltips&&e.bindEvents(this,this.options.tooltipEvents,function(t){var i="mouseout"!==t.type?this.getSegmentsAtEvent(t):[];e.each(this.segments,function(t){t.restore(["fillColor"])}),e.each(i,function(t){t.fillColor=t.highlightColor}),this.showTooltip(i)}),this.render()},getSegmentsAtEvent:function(t){var i=[],s=e.getRelativePosition(t);return e.each(this.segments,function(t){t.inRange(s.x,s.y)&&i.push(t)},this),i},addData:function(t,i,e){var s=i||this.segments.length;this.segments.splice(s,0,new this.SegmentArc({fillColor:t.color,highlightColor:t.highlight||t.color,label:t.label,value:t.value,outerRadius:this.options.animateScale?0:this.scale.calculateCenterOffset(t.value),circumference:this.options.animateRotate?0:this.scale.getCircumference(),startAngle:1.5*Math.PI})),e||(this.reflow(),this.update())},removeData:function(t){var i=e.isNumber(t)?t:this.segments.length-1;this.segments.splice(i,1),this.reflow(),this.update()},calculateTotal:function(t){this.total=0,e.each(t,function(t){this.total+=t.value},this),this.scale.valuesCount=this.segments.length},updateScaleRange:function(t){var i=[];e.each(t,function(t){i.push(t.value)});var s=this.options.scaleOverride?{steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}:e.calculateScaleRange(i,e.min([this.chart.width,this.chart.height])/2,this.options.scaleFontSize,this.options.scaleBeginAtZero,this.options.scaleIntegersOnly);e.extend(this.scale,s,{size:e.min([this.chart.width,this.chart.height]),xCenter:this.chart.width/2,yCenter:this.chart.height/2})},update:function(){this.calculateTotal(this.segments),e.each(this.segments,function(t){t.save()}),this.reflow(),this.render()},reflow:function(){e.extend(this.SegmentArc.prototype,{x:this.chart.width/2,y:this.chart.height/2}),this.updateScaleRange(this.segments),this.scale.update(),e.extend(this.scale,{xCenter:this.chart.width/2,yCenter:this.chart.height/2}),e.each(this.segments,function(t){t.update({outerRadius:this.scale.calculateCenterOffset(t.value)})},this)},draw:function(t){var i=t||1;this.clear(),e.each(this.segments,function(t,e){t.transition({circumference:this.scale.getCircumference(),outerRadius:this.scale.calculateCenterOffset(t.value)},i),t.endAngle=t.startAngle+t.circumference,0===e&&(t.startAngle=1.5*Math.PI),e<this.segments.length-1&&(this.segments[e+1].startAngle=t.endAngle),t.draw()},this),this.scale.draw()}})}.call(this),function(){"use strict";var t=this,i=t.Chart,e=i.helpers;i.Type.extend({name:"Radar",defaults:{scaleShowLine:!0,angleShowLineOut:!0,scaleShowLabels:!1,scaleBeginAtZero:!0,angleLineColor:"rgba(0,0,0,.1)",angleLineWidth:1,pointLabelFontFamily:"'Arial'",pointLabelFontStyle:"normal",pointLabelFontSize:10,pointLabelFontColor:"#666",pointDot:!0,pointDotRadius:3,pointDotStrokeWidth:1,pointHitDetectionRadius:20,datasetStroke:!0,datasetStrokeWidth:2,datasetFill:!0,legendTemplate:'<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].strokeColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>'},initialize:function(t){this.PointClass=i.Point.extend({strokeWidth:this.options.pointDotStrokeWidth,radius:this.options.pointDotRadius,display:this.options.pointDot,hitDetectionRadius:this.options.pointHitDetectionRadius,ctx:this.chart.ctx}),this.datasets=[],this.buildScale(t),this.options.showTooltips&&e.bindEvents(this,this.options.tooltipEvents,function(t){var i="mouseout"!==t.type?this.getPointsAtEvent(t):[];this.eachPoints(function(t){t.restore(["fillColor","strokeColor"])}),e.each(i,function(t){t.fillColor=t.highlightFill,t.strokeColor=t.highlightStroke}),this.showTooltip(i)}),e.each(t.datasets,function(i){var s={label:i.label||null,fillColor:i.fillColor,strokeColor:i.strokeColor,pointColor:i.pointColor,pointStrokeColor:i.pointStrokeColor,points:[]};this.datasets.push(s),e.each(i.data,function(e,n){var o;this.scale.animation||(o=this.scale.getPointPosition(n,this.scale.calculateCenterOffset(e))),s.points.push(new this.PointClass({value:e,label:t.labels[n],datasetLabel:i.label,x:this.options.animation?this.scale.xCenter:o.x,y:this.options.animation?this.scale.yCenter:o.y,strokeColor:i.pointStrokeColor,fillColor:i.pointColor,highlightFill:i.pointHighlightFill||i.pointColor,highlightStroke:i.pointHighlightStroke||i.pointStrokeColor}))},this)},this),this.render()},eachPoints:function(t){e.each(this.datasets,function(i){e.each(i.points,t,this)},this)},getPointsAtEvent:function(t){var i=e.getRelativePosition(t),s=e.getAngleFromPoint({x:this.scale.xCenter,y:this.scale.yCenter},i),n=2*Math.PI/this.scale.valuesCount,o=Math.round((s.angle-1.5*Math.PI)/n),a=[];return(o>=this.scale.valuesCount||0>o)&&(o=0),s.distance<=this.scale.drawingArea&&e.each(this.datasets,function(t){a.push(t.points[o])}),a},buildScale:function(t){this.scale=new i.RadialScale({display:this.options.showScale,fontStyle:this.options.scaleFontStyle,fontSize:this.options.scaleFontSize,fontFamily:this.options.scaleFontFamily,fontColor:this.options.scaleFontColor,showLabels:this.options.scaleShowLabels,showLabelBackdrop:this.options.scaleShowLabelBackdrop,backdropColor:this.options.scaleBackdropColor,backdropPaddingY:this.options.scaleBackdropPaddingY,backdropPaddingX:this.options.scaleBackdropPaddingX,lineWidth:this.options.scaleShowLine?this.options.scaleLineWidth:0,lineColor:this.options.scaleLineColor,angleLineColor:this.options.angleLineColor,angleLineWidth:this.options.angleShowLineOut?this.options.angleLineWidth:0,pointLabelFontColor:this.options.pointLabelFontColor,pointLabelFontSize:this.options.pointLabelFontSize,pointLabelFontFamily:this.options.pointLabelFontFamily,pointLabelFontStyle:this.options.pointLabelFontStyle,height:this.chart.height,width:this.chart.width,xCenter:this.chart.width/2,yCenter:this.chart.height/2,ctx:this.chart.ctx,templateString:this.options.scaleLabel,labels:t.labels,valuesCount:t.datasets[0].data.length}),this.scale.setScaleSize(),this.updateScaleRange(t.datasets),this.scale.buildYLabels()},updateScaleRange:function(t){var i=function(){var i=[];return e.each(t,function(t){t.data?i=i.concat(t.data):e.each(t.points,function(t){i.push(t.value)})}),i}(),s=this.options.scaleOverride?{steps:this.options.scaleSteps,stepValue:this.options.scaleStepWidth,min:this.options.scaleStartValue,max:this.options.scaleStartValue+this.options.scaleSteps*this.options.scaleStepWidth}:e.calculateScaleRange(i,e.min([this.chart.width,this.chart.height])/2,this.options.scaleFontSize,this.options.scaleBeginAtZero,this.options.scaleIntegersOnly);e.extend(this.scale,s)},addData:function(t,i){this.scale.valuesCount++,e.each(t,function(t,e){var s=this.scale.getPointPosition(this.scale.valuesCount,this.scale.calculateCenterOffset(t));this.datasets[e].points.push(new this.PointClass({value:t,label:i,x:s.x,y:s.y,strokeColor:this.datasets[e].pointStrokeColor,fillColor:this.datasets[e].pointColor}))},this),this.scale.labels.push(i),this.reflow(),this.update()},removeData:function(){this.scale.valuesCount--,this.scale.labels.shift(),e.each(this.datasets,function(t){t.points.shift()},this),this.reflow(),this.update()},update:function(){this.eachPoints(function(t){t.save()}),this.reflow(),this.render()},reflow:function(){e.extend(this.scale,{width:this.chart.width,height:this.chart.height,size:e.min([this.chart.width,this.chart.height]),xCenter:this.chart.width/2,yCenter:this.chart.height/2}),this.updateScaleRange(this.datasets),this.scale.setScaleSize(),this.scale.buildYLabels()},draw:function(t){var i=t||1,s=this.chart.ctx;this.clear(),this.scale.draw(),e.each(this.datasets,function(t){e.each(t.points,function(t,e){t.hasValue()&&t.transition(this.scale.getPointPosition(e,this.scale.calculateCenterOffset(t.value)),i)},this),s.lineWidth=this.options.datasetStrokeWidth,s.strokeStyle=t.strokeColor,s.beginPath(),e.each(t.points,function(t,i){0===i?s.moveTo(t.x,t.y):s.lineTo(t.x,t.y)},this),s.closePath(),s.stroke(),s.fillStyle=t.fillColor,s.fill(),e.each(t.points,function(t){t.hasValue()&&t.draw()})},this)}})}.call(this);
(function (factory) {
  'use strict';
  if (typeof exports === 'object') {
    // Node/CommonJS
    module.exports = factory(
      typeof angular !== 'undefined' ? angular : require('angular'),
      typeof Chart !== 'undefined' ? Chart : require('chart.js'));
  }  else if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['angular', 'chart'], factory);
  } else {
    // Browser globals
    factory(angular, Chart);
  }
}(function (angular, Chart) {
  'use strict';

  Chart.defaults.global.responsive = true;
  Chart.defaults.global.multiTooltipTemplate = '<%if (datasetLabel){%><%=datasetLabel%>: <%}%><%= value %>';

  Chart.defaults.global.colours = [
    '#97BBCD', // blue
    '#DCDCDC', // light grey
    '#F7464A', // red
    '#46BFBD', // green
    '#FDB45C', // yellow
    '#949FB1', // grey
    '#4D5360', // dark grey
    '#97BBCD', // blue
    '#DCDCDC', // light grey
    '#F7464A', // red
    '#46BFBD', // green
    '#FDB45C', // yellow
    '#949FB1', // grey
    '#4D5360', // dark grey
    '#97BBCD', // blue
    '#DCDCDC', // light grey
    '#F7464A', // red
    '#46BFBD', // green
    '#FDB45C', // yellow
    '#949FB1', // grey
    '#4D5360', // dark grey
    '#97BBCD', // blue
    '#DCDCDC', // light grey
    '#F7464A', // red
    '#46BFBD', // green
    '#FDB45C', // yellow
    '#949FB1', // grey
    '#4D5360'  // dark grey
  ];

  var usingExcanvas = typeof window.G_vmlCanvasManager === 'object' &&
    window.G_vmlCanvasManager !== null &&
    typeof window.G_vmlCanvasManager.initElement === 'function';

  if (usingExcanvas) Chart.defaults.global.animation = false;

  return angular.module('chart.js', [])
    .provider('ChartJs', ChartJsProvider)
    .factory('ChartJsFactory', ['ChartJs', '$timeout', ChartJsFactory])
    .directive('chartBase', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory(); }])
    .directive('chartLine', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('Line'); }])
    .directive('chartBar', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('Bar'); }])
    .directive('chartRadar', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('Radar'); }])
    .directive('chartDoughnut', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('Doughnut'); }])
    .directive('chartPie', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('Pie'); }])
    .directive('chartPolarArea', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('PolarArea'); }]);

  /**
   * Wrapper for chart.js
   * Allows configuring chart js using the provider
   *
   * angular.module('myModule', ['chart.js']).config(function(ChartJsProvider) {
   *   ChartJsProvider.setOptions({ responsive: true });
   *   ChartJsProvider.setOptions('Line', { responsive: false });
   * })))
   */
  function ChartJsProvider () {
    var options = {};
    var ChartJs = {
      Chart: Chart,
      getOptions: function (type) {
        var typeOptions = type && options[type] || {};
        return angular.extend({}, options, typeOptions);
      }
    };

    /**
     * Allow to set global options during configuration
     */
    this.setOptions = function (type, customOptions) {
      // If no type was specified set option for the global object
      if (! customOptions) {
        customOptions = type;
        options = angular.extend(options, customOptions);
        return;
      }
      // Set options for the specific chart
      options[type] = angular.extend(options[type] || {}, customOptions);
    };

    this.$get = function () {
      return ChartJs;
    };
  }

  function ChartJsFactory (ChartJs, $timeout) {
    return function chart (type) {
      return {
        restrict: 'CA',
        scope: {
          data: '=?',
          labels: '=?',
          options: '=?',
          series: '=?',
          colours: '=?',
          getColour: '=?',
          chartType: '=',
          legend: '@',
          click: '=?',
          hover: '=?',

          chartData: '=?',
          chartLabels: '=?',
          chartOptions: '=?',
          chartSeries: '=?',
          chartColours: '=?',
          chartLegend: '@',
          chartClick: '=?',
          chartHover: '=?'
        },
        link: function (scope, elem/*, attrs */) {
          var chart, container = document.createElement('div');
          container.className = 'chart-container';
          elem.replaceWith(container);
          container.appendChild(elem[0]);

          if (usingExcanvas) window.G_vmlCanvasManager.initElement(elem[0]);

          ['data', 'labels', 'options', 'series', 'colours', 'legend', 'click', 'hover'].forEach(deprecated);
          function aliasVar (fromName, toName) {
            scope.$watch(fromName, function (newVal) {
              if (typeof newVal === 'undefined') return;
              scope[toName] = newVal;
            });
          }
          /* provide backward compatibility to "old" directive names, by
           * having an alias point from the new names to the old names. */
          aliasVar('chartData', 'data');
          aliasVar('chartLabels', 'labels');
          aliasVar('chartOptions', 'options');
          aliasVar('chartSeries', 'series');
          aliasVar('chartColours', 'colours');
          aliasVar('chartLegend', 'legend');
          aliasVar('chartClick', 'click');
          aliasVar('chartHover', 'hover');

          // Order of setting "watch" matter

          scope.$watch('data', function (newVal, oldVal) {
            if (! newVal || ! newVal.length || (Array.isArray(newVal[0]) && ! newVal[0].length)) {
              destroyChart(chart, scope);
              return;
            }
            var chartType = type || scope.chartType;
            if (! chartType) return;

            if (chart && canUpdateChart(newVal, oldVal))
              return updateChart(chart, newVal, scope, elem);

            createChart(chartType);
          }, true);

          scope.$watch('series', resetChart, true);
          scope.$watch('labels', resetChart, true);
          scope.$watch('options', resetChart, true);
          scope.$watch('colours', resetChart, true);

          scope.$watch('chartType', function (newVal, oldVal) {
            if (isEmpty(newVal)) return;
            if (angular.equals(newVal, oldVal)) return;
            createChart(newVal);
          });

          scope.$on('$destroy', function () {
            destroyChart(chart, scope);
          });

          function resetChart (newVal, oldVal) {
            if (isEmpty(newVal)) return;
            if (angular.equals(newVal, oldVal)) return;
            var chartType = type || scope.chartType;
            if (! chartType) return;

            // chart.update() doesn't work for series and labels
            // so we have to re-create the chart entirely
            createChart(chartType);
          }

          function createChart (type) {
            if (isResponsive(type, scope) && elem[0].clientHeight === 0 && container.clientHeight === 0) {
              return $timeout(function () {
                createChart(type);
              }, 50, false);
            }
            if (! scope.data || ! scope.data.length) return;
            scope.getColour = typeof scope.getColour === 'function' ? scope.getColour : getRandomColour;
            var colours = getColours(type, scope);
            var cvs = elem[0], ctx = cvs.getContext('2d');
            var data = Array.isArray(scope.data[0]) ?
              getDataSets(scope.labels, scope.data, scope.series || [], colours) :
              getData(scope.labels, scope.data, colours);
            var options = angular.extend({}, ChartJs.getOptions(type), scope.options);

            // Destroy old chart if it exists to avoid ghost charts issue
            // https://github.com/jtblin/angular-chart.js/issues/187
            destroyChart(chart, scope);
            chart = new ChartJs.Chart(ctx)[type](data, options);
            scope.$emit('create', chart);

            // Bind events
            cvs.onclick = scope.click ? getEventHandler(scope, chart, 'click', false) : angular.noop;
            cvs.onmousemove = scope.hover ? getEventHandler(scope, chart, 'hover', true) : angular.noop;

            if (scope.legend && scope.legend !== 'false') setLegend(elem, chart);
          }

          function deprecated (attr) {
            if (typeof console !== 'undefined' && ChartJs.getOptions().env !== 'test') {
              var warn = typeof console.warn === 'function' ? console.warn : console.log;
              if (!! scope[attr]) {
                warn.call(console, '"%s" is deprecated and will be removed in a future version. ' +
                  'Please use "chart-%s" instead.', attr, attr);
              }
            }
          }
        }
      };
    };

    function canUpdateChart (newVal, oldVal) {
      if (newVal && oldVal && newVal.length && oldVal.length) {
        return Array.isArray(newVal[0]) ?
        newVal.length === oldVal.length && newVal.every(function (element, index) {
          return element.length === oldVal[index].length; }) :
          oldVal.reduce(sum, 0) > 0 ? newVal.length === oldVal.length : false;
      }
      return false;
    }

    function sum (carry, val) {
      return carry + val;
    }

    function getEventHandler (scope, chart, action, triggerOnlyOnChange) {
      var lastState = null;
      return function (evt) {
        var atEvent = chart.getPointsAtEvent || chart.getBarsAtEvent || chart.getSegmentsAtEvent;
        if (atEvent) {
          var activePoints = atEvent.call(chart, evt);
          if (triggerOnlyOnChange === false || angular.equals(lastState, activePoints) === false) {
            lastState = activePoints;
            scope[action](activePoints, evt);
            scope.$apply();
          }
        }
      };
    }

    function getColours (type, scope) {
      var notEnoughColours = false;
      var colours = angular.copy(scope.colours ||
        ChartJs.getOptions(type).colours ||
        Chart.defaults.global.colours
      );
      while (colours.length < scope.data.length) {
        colours.push(scope.getColour());
        notEnoughColours = true;
      }
      // mutate colours in this case as we don't want
      // the colours to change on each refresh
      if (notEnoughColours) scope.colours = colours;
      return colours.map(convertColour);
    }

    function convertColour (colour) {
      if (typeof colour === 'object' && colour !== null) return colour;
      if (typeof colour === 'string' && colour[0] === '#') return getColour(hexToRgb(colour.substr(1)));
      return getRandomColour();
    }

    function getRandomColour () {
      var colour = [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];
      return getColour(colour);
    }

    function getColour (colour) {
      return {
        fillColor: rgba(colour, 0.2),
        strokeColor: rgba(colour, 1),
        pointColor: rgba(colour, 1),
        pointStrokeColor: '#fff',
        pointHighlightFill: '#fff',
        pointHighlightStroke: rgba(colour, 0.8)
      };
    }

    function getRandomInt (min, max) {
      return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function rgba (colour, alpha) {
      if (usingExcanvas) {
        // rgba not supported by IE8
        return 'rgb(' + colour.join(',') + ')';
      } else {
        return 'rgba(' + colour.concat(alpha).join(',') + ')';
      }
    }

    // Credit: http://stackoverflow.com/a/11508164/1190235
    function hexToRgb (hex) {
      var bigint = parseInt(hex, 16),
        r = (bigint >> 16) & 255,
        g = (bigint >> 8) & 255,
        b = bigint & 255;

      return [r, g, b];
    }

    function getDataSets (labels, data, series, colours) {
      return {
        labels: labels,
        datasets: data.map(function (item, i) {
          return angular.extend({}, colours[i], {
            label: series[i],
            data: item
          });
        })
      };
    }

    function getData (labels, data, colours) {
      return labels.map(function (label, i) {
        return angular.extend({}, colours[i], {
          label: label,
          value: data[i],
          color: colours[i].strokeColor,
          highlight: colours[i].pointHighlightStroke
        });
      });
    }

    function setLegend (elem, chart) {
      var $parent = elem.parent(),
          $oldLegend = $parent.find('chart-legend'),
          legend = '<chart-legend>' + chart.generateLegend() + '</chart-legend>';
      if ($oldLegend.length) $oldLegend.replaceWith(legend);
      else $parent.append(legend);
    }

    function updateChart (chart, values, scope, elem) {
      if (Array.isArray(scope.data[0])) {
        chart.datasets.forEach(function (dataset, i) {
          (dataset.points || dataset.bars).forEach(function (dataItem, j) {
            dataItem.value = values[i][j];
          });
        });
      } else {
        chart.segments.forEach(function (segment, i) {
          segment.value = values[i];
        });
      }
      chart.update();
      scope.$emit('update', chart);
      if (scope.legend && scope.legend !== 'false') setLegend(elem, chart);
    }

    function isEmpty (value) {
      return ! value ||
        (Array.isArray(value) && ! value.length) ||
        (typeof value === 'object' && ! Object.keys(value).length);
    }

    function isResponsive (type, scope) {
      var options = angular.extend({}, Chart.defaults.global, ChartJs.getOptions(type), scope.options);
      return options.responsive;
    }

    function destroyChart(chart, scope) {
      if(! chart) return;
      chart.destroy();
      scope.$emit('destroy', chart);
    }
  }
}));

(function (root, factory) {
  'use strict';

  if (typeof define === 'function' && define.amd) {
    define(['angular'], factory);
  } else if (root.hasOwnProperty('angular')) {
    // Browser globals (root is window), we don't register it.
    factory(root.angular);
  } else if (typeof exports === 'object') {
    module.exports = factory(require('angular'));
  }
}(this , function (angular) {
    'use strict';

    // In cases where Angular does not get passed or angular is a truthy value
    // but misses .module we can fall back to using window.
    angular = (angular && angular.module ) ? angular : window.angular;


    function isStorageSupported($window, storageType) {

      // Some installations of IE, for an unknown reason, throw "SCRIPT5: Error: Access is denied"
      // when accessing window.localStorage. This happens before you try to do anything with it. Catch
      // that error and allow execution to continue.

      // fix 'SecurityError: DOM Exception 18' exception in Desktop Safari, Mobile Safari
      // when "Block cookies": "Always block" is turned on
      var supported;
      try {
        supported = $window[storageType];
      }
      catch(err) {
        supported = false;
      }

      // When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage
      // is available, but trying to call .setItem throws an exception below:
      // "QUOTA_EXCEEDED_ERR: DOM Exception 22: An attempt was made to add something to storage that exceeded the quota."
      if(supported && storageType === 'localStorage') {
        var key = '__' + Math.round(Math.random() * 1e7);

        try {
          localStorage.setItem(key, key);
          localStorage.removeItem(key);
        }
        catch(err) {
          supported = false;
        }
      }

      return supported;
    }

    /**
     * @ngdoc overview
     * @name ngStorage
     */

    return angular.module('ngStorage', [])

    /**
     * @ngdoc object
     * @name ngStorage.$localStorage
     * @requires $rootScope
     * @requires $window
     */

    .provider('$localStorage', _storageProvider('localStorage'))

    /**
     * @ngdoc object
     * @name ngStorage.$sessionStorage
     * @requires $rootScope
     * @requires $window
     */

    .provider('$sessionStorage', _storageProvider('sessionStorage'));

    function _storageProvider(storageType) {
        var providerWebStorage = isStorageSupported(window, storageType);

        return function () {
          var storageKeyPrefix = 'ngStorage-';

          this.setKeyPrefix = function (prefix) {
            if (typeof prefix !== 'string') {
              throw new TypeError('[ngStorage] - ' + storageType + 'Provider.setKeyPrefix() expects a String.');
            }
            storageKeyPrefix = prefix;
          };

          var serializer = angular.toJson;
          var deserializer = angular.fromJson;

          this.setSerializer = function (s) {
            if (typeof s !== 'function') {
              throw new TypeError('[ngStorage] - ' + storageType + 'Provider.setSerializer expects a function.');
            }

            serializer = s;
          };

          this.setDeserializer = function (d) {
            if (typeof d !== 'function') {
              throw new TypeError('[ngStorage] - ' + storageType + 'Provider.setDeserializer expects a function.');
            }

            deserializer = d;
          };

          this.supported = function() {
            return !!providerWebStorage;
          };

          // Note: This is not very elegant at all.
          this.get = function (key) {
            return providerWebStorage && deserializer(providerWebStorage.getItem(storageKeyPrefix + key));
          };

          // Note: This is not very elegant at all.
          this.set = function (key, value) {
            return providerWebStorage && providerWebStorage.setItem(storageKeyPrefix + key, serializer(value));
          };

          this.$get = [
              '$rootScope',
              '$window',
              '$log',
              '$timeout',
              '$document',

              function(
                  $rootScope,
                  $window,
                  $log,
                  $timeout,
                  $document
              ){

                // The magic number 10 is used which only works for some keyPrefixes...
                // See https://github.com/gsklee/ngStorage/issues/137
                var prefixLength = storageKeyPrefix.length;

                // #9: Assign a placeholder object if Web Storage is unavailable to prevent breaking the entire AngularJS app
                // Note: recheck mainly for testing (so we can use $window[storageType] rather than window[storageType])
                var isSupported = isStorageSupported($window, storageType),
                    webStorage = isSupported || ($log.warn('This browser does not support Web Storage!'), {setItem: angular.noop, getItem: angular.noop, removeItem: angular.noop}),
                    $storage = {
                        $default: function(items) {
                            for (var k in items) {
                                angular.isDefined($storage[k]) || ($storage[k] = angular.copy(items[k]) );
                            }

                            $storage.$sync();
                            return $storage;
                        },
                        $reset: function(items) {
                            for (var k in $storage) {
                                '$' === k[0] || (delete $storage[k] && webStorage.removeItem(storageKeyPrefix + k));
                            }

                            return $storage.$default(items);
                        },
                        $sync: function () {
                            for (var i = 0, l = webStorage.length, k; i < l; i++) {
                                // #8, #10: `webStorage.key(i)` may be an empty string (or throw an exception in IE9 if `webStorage` is empty)
                                (k = webStorage.key(i)) && storageKeyPrefix === k.slice(0, prefixLength) && ($storage[k.slice(prefixLength)] = deserializer(webStorage.getItem(k)));
                            }
                        },
                        $apply: function() {
                            var temp$storage;

                            _debounce = null;

                            if (!angular.equals($storage, _last$storage)) {
                                temp$storage = angular.copy(_last$storage);
                                angular.forEach($storage, function(v, k) {
                                    if (angular.isDefined(v) && '$' !== k[0]) {
                                        webStorage.setItem(storageKeyPrefix + k, serializer(v));
                                        delete temp$storage[k];
                                    }
                                });

                                for (var k in temp$storage) {
                                    webStorage.removeItem(storageKeyPrefix + k);
                                }

                                _last$storage = angular.copy($storage);
                            }
                        },
                        $supported: function() {
                            return !!isSupported;
                        }
                    },
                    _last$storage,
                    _debounce;

                $storage.$sync();

                _last$storage = angular.copy($storage);

                $rootScope.$watch(function() {
                    _debounce || (_debounce = $timeout($storage.$apply, 100, false));
                });

                // #6: Use `$window.addEventListener` instead of `angular.element` to avoid the jQuery-specific `event.originalEvent`
                $window.addEventListener && $window.addEventListener('storage', function(event) {
                    if (!event.key) {
                      return;
                    }

                    // Reference doc.
                    var doc = $document[0];

                    if ( (!doc.hasFocus || !doc.hasFocus()) && storageKeyPrefix === event.key.slice(0, prefixLength) ) {
                        event.newValue ? $storage[event.key.slice(prefixLength)] = deserializer(event.newValue) : delete $storage[event.key.slice(prefixLength)];

                        _last$storage = angular.copy($storage);

                        $rootScope.$apply();
                    }
                });

                $window.addEventListener && $window.addEventListener('beforeunload', function() {
                    $storage.$apply();
                });

                return $storage;
              }
          ];
      };
    }

}));

(function() {


// Create all modules and define dependencies to make sure they exist
// and are loaded in the correct order to satisfy dependency injection
// before all nested files are concatenated by Grunt

// Modules
angular.module('angular-jwt',
    [
        'angular-jwt.interceptor',
        'angular-jwt.jwt'
    ]);

 angular.module('angular-jwt.interceptor', [])
  .provider('jwtInterceptor', function() {

    this.urlParam = null;
    this.authHeader = 'Authorization';
    this.authPrefix = 'Bearer ';
    this.tokenGetter = function() {
      return null;
    }

    var config = this;

    this.$get = ["$q", "$injector", "$rootScope", function ($q, $injector, $rootScope) {
      return {
        request: function (request) {
          if (request.skipAuthorization) {
            return request;
          }

          if (config.urlParam) {
            request.params = request.params || {};
            // Already has the token in the url itself
            if (request.params[config.urlParam]) {
              return request;
            }
          } else {
            request.headers = request.headers || {};
            // Already has an Authorization header
            if (request.headers[config.authHeader]) {
              return request;
            }
          }

          var tokenPromise = $q.when($injector.invoke(config.tokenGetter, this, {
            config: request
          }));

          return tokenPromise.then(function(token) {
            if (token) {
              if (config.urlParam) {
                request.params[config.urlParam] = token;
              } else {
                request.headers[config.authHeader] = config.authPrefix + token;
              }
            }
            return request;
          });
        },
        responseError: function (response) {
          // handle the case where the user is not authenticated
          if (response.status === 401) {
            $rootScope.$broadcast('unauthenticated', response);
          }
          return $q.reject(response);
        }
      };
    }];
  });

 angular.module('angular-jwt.jwt', [])
  .service('jwtHelper', function() {

    this.urlBase64Decode = function(str) {
      var output = str.replace(/-/g, '+').replace(/_/g, '/');
      switch (output.length % 4) {
        case 0: { break; }
        case 2: { output += '=='; break; }
        case 3: { output += '='; break; }
        default: {
          throw 'Illegal base64url string!';
        }
      }
      return decodeURIComponent(escape(window.atob(output))); //polifyll https://github.com/davidchambers/Base64.js
    }


    this.decodeToken = function(token) {
      var parts = token.split('.');

      if (parts.length !== 3) {
        throw new Error('JWT must have 3 parts');
      }

      var decoded = this.urlBase64Decode(parts[1]);
      if (!decoded) {
        throw new Error('Cannot decode the token');
      }

      return JSON.parse(decoded);
    }

    this.getTokenExpirationDate = function(token) {
      var decoded;
      decoded = this.decodeToken(token);

      if(typeof decoded.exp === "undefined") {
        return null;
      }

      var d = new Date(0); // The 0 here is the key, which sets the date to the epoch
      d.setUTCSeconds(decoded.exp);

      return d;
    };

    this.isTokenExpired = function(token, offsetSeconds) {
      var d = this.getTokenExpirationDate(token);
      offsetSeconds = offsetSeconds || 0;
      if (d === null) {
        return false;
      }

      // Token expired?
      return !(d.valueOf() > (new Date().valueOf() + (offsetSeconds * 1000)));
    };
  });

}());
/*!
 * Bootstrap v3.3.6 (http://getbootstrap.com)
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under the MIT license
 */

if (typeof jQuery === 'undefined') {
  throw new Error('Bootstrap\'s JavaScript requires jQuery')
}

+function ($) {
  'use strict';
  var version = $.fn.jquery.split(' ')[0].split('.')
  if ((version[0] < 2 && version[1] < 9) || (version[0] == 1 && version[1] == 9 && version[2] < 1) || (version[0] > 2)) {
    throw new Error('Bootstrap\'s JavaScript requires jQuery version 1.9.1 or higher, but lower than version 3')
  }
}(jQuery);

/* ========================================================================
 * Bootstrap: transition.js v3.3.6
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      WebkitTransition : 'webkitTransitionEnd',
      MozTransition    : 'transitionend',
      OTransition      : 'oTransitionEnd otransitionend',
      transition       : 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }

    return false // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false
    var $el = this
    $(this).one('bsTransitionEnd', function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()

    if (!$.support.transition) return

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function (e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
      }
    }
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: alert.js v3.3.6
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // ALERT CLASS DEFINITION
  // ======================

  var dismiss = '[data-dismiss="alert"]'
  var Alert   = function (el) {
    $(el).on('click', dismiss, this.close)
  }

  Alert.VERSION = '3.3.6'

  Alert.TRANSITION_DURATION = 150

  Alert.prototype.close = function (e) {
    var $this    = $(this)
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = $(selector)

    if (e) e.preventDefault()

    if (!$parent.length) {
      $parent = $this.closest('.alert')
    }

    $parent.trigger(e = $.Event('close.bs.alert'))

    if (e.isDefaultPrevented()) return

    $parent.removeClass('in')

    function removeElement() {
      // detach from parent, fire event then clean up data
      $parent.detach().trigger('closed.bs.alert').remove()
    }

    $.support.transition && $parent.hasClass('fade') ?
      $parent
        .one('bsTransitionEnd', removeElement)
        .emulateTransitionEnd(Alert.TRANSITION_DURATION) :
      removeElement()
  }


  // ALERT PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.alert')

      if (!data) $this.data('bs.alert', (data = new Alert(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.alert

  $.fn.alert             = Plugin
  $.fn.alert.Constructor = Alert


  // ALERT NO CONFLICT
  // =================

  $.fn.alert.noConflict = function () {
    $.fn.alert = old
    return this
  }


  // ALERT DATA-API
  // ==============

  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

}(jQuery);

/* ========================================================================
 * Bootstrap: button.js v3.3.6
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================

  var Button = function (element, options) {
    this.$element  = $(element)
    this.options   = $.extend({}, Button.DEFAULTS, options)
    this.isLoading = false
  }

  Button.VERSION  = '3.3.6'

  Button.DEFAULTS = {
    loadingText: 'loading...'
  }

  Button.prototype.setState = function (state) {
    var d    = 'disabled'
    var $el  = this.$element
    var val  = $el.is('input') ? 'val' : 'html'
    var data = $el.data()

    state += 'Text'

    if (data.resetText == null) $el.data('resetText', $el[val]())

    // push to event loop to allow forms to submit
    setTimeout($.proxy(function () {
      $el[val](data[state] == null ? this.options[state] : data[state])

      if (state == 'loadingText') {
        this.isLoading = true
        $el.addClass(d).attr(d, d)
      } else if (this.isLoading) {
        this.isLoading = false
        $el.removeClass(d).removeAttr(d)
      }
    }, this), 0)
  }

  Button.prototype.toggle = function () {
    var changed = true
    var $parent = this.$element.closest('[data-toggle="buttons"]')

    if ($parent.length) {
      var $input = this.$element.find('input')
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked')) changed = false
        $parent.find('.active').removeClass('active')
        this.$element.addClass('active')
      } else if ($input.prop('type') == 'checkbox') {
        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false
        this.$element.toggleClass('active')
      }
      $input.prop('checked', this.$element.hasClass('active'))
      if (changed) $input.trigger('change')
    } else {
      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))
      this.$element.toggleClass('active')
    }
  }


  // BUTTON PLUGIN DEFINITION
  // ========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.button')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.button', (data = new Button(this, options)))

      if (option == 'toggle') data.toggle()
      else if (option) data.setState(option)
    })
  }

  var old = $.fn.button

  $.fn.button             = Plugin
  $.fn.button.Constructor = Button


  // BUTTON NO CONFLICT
  // ==================

  $.fn.button.noConflict = function () {
    $.fn.button = old
    return this
  }


  // BUTTON DATA-API
  // ===============

  $(document)
    .on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      var $btn = $(e.target)
      if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')
      Plugin.call($btn, 'toggle')
      if (!($(e.target).is('input[type="radio"]') || $(e.target).is('input[type="checkbox"]'))) e.preventDefault()
    })
    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))
    })

}(jQuery);

/* ========================================================================
 * Bootstrap: carousel.js v3.3.6
 * http://getbootstrap.com/javascript/#carousel
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CAROUSEL CLASS DEFINITION
  // =========================

  var Carousel = function (element, options) {
    this.$element    = $(element)
    this.$indicators = this.$element.find('.carousel-indicators')
    this.options     = options
    this.paused      = null
    this.sliding     = null
    this.interval    = null
    this.$active     = null
    this.$items      = null

    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))

    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element
      .on('mouseenter.bs.carousel', $.proxy(this.pause, this))
      .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))
  }

  Carousel.VERSION  = '3.3.6'

  Carousel.TRANSITION_DURATION = 600

  Carousel.DEFAULTS = {
    interval: 5000,
    pause: 'hover',
    wrap: true,
    keyboard: true
  }

  Carousel.prototype.keydown = function (e) {
    if (/input|textarea/i.test(e.target.tagName)) return
    switch (e.which) {
      case 37: this.prev(); break
      case 39: this.next(); break
      default: return
    }

    e.preventDefault()
  }

  Carousel.prototype.cycle = function (e) {
    e || (this.paused = false)

    this.interval && clearInterval(this.interval)

    this.options.interval
      && !this.paused
      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))

    return this
  }

  Carousel.prototype.getItemIndex = function (item) {
    this.$items = item.parent().children('.item')
    return this.$items.index(item || this.$active)
  }

  Carousel.prototype.getItemForDirection = function (direction, active) {
    var activeIndex = this.getItemIndex(active)
    var willWrap = (direction == 'prev' && activeIndex === 0)
                || (direction == 'next' && activeIndex == (this.$items.length - 1))
    if (willWrap && !this.options.wrap) return active
    var delta = direction == 'prev' ? -1 : 1
    var itemIndex = (activeIndex + delta) % this.$items.length
    return this.$items.eq(itemIndex)
  }

  Carousel.prototype.to = function (pos) {
    var that        = this
    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))

    if (pos > (this.$items.length - 1) || pos < 0) return

    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, "slid"
    if (activeIndex == pos) return this.pause().cycle()

    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))
  }

  Carousel.prototype.pause = function (e) {
    e || (this.paused = true)

    if (this.$element.find('.next, .prev').length && $.support.transition) {
      this.$element.trigger($.support.transition.end)
      this.cycle(true)
    }

    this.interval = clearInterval(this.interval)

    return this
  }

  Carousel.prototype.next = function () {
    if (this.sliding) return
    return this.slide('next')
  }

  Carousel.prototype.prev = function () {
    if (this.sliding) return
    return this.slide('prev')
  }

  Carousel.prototype.slide = function (type, next) {
    var $active   = this.$element.find('.item.active')
    var $next     = next || this.getItemForDirection(type, $active)
    var isCycling = this.interval
    var direction = type == 'next' ? 'left' : 'right'
    var that      = this

    if ($next.hasClass('active')) return (this.sliding = false)

    var relatedTarget = $next[0]
    var slideEvent = $.Event('slide.bs.carousel', {
      relatedTarget: relatedTarget,
      direction: direction
    })
    this.$element.trigger(slideEvent)
    if (slideEvent.isDefaultPrevented()) return

    this.sliding = true

    isCycling && this.pause()

    if (this.$indicators.length) {
      this.$indicators.find('.active').removeClass('active')
      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])
      $nextIndicator && $nextIndicator.addClass('active')
    }

    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, "slid"
    if ($.support.transition && this.$element.hasClass('slide')) {
      $next.addClass(type)
      $next[0].offsetWidth // force reflow
      $active.addClass(direction)
      $next.addClass(direction)
      $active
        .one('bsTransitionEnd', function () {
          $next.removeClass([type, direction].join(' ')).addClass('active')
          $active.removeClass(['active', direction].join(' '))
          that.sliding = false
          setTimeout(function () {
            that.$element.trigger(slidEvent)
          }, 0)
        })
        .emulateTransitionEnd(Carousel.TRANSITION_DURATION)
    } else {
      $active.removeClass('active')
      $next.addClass('active')
      this.sliding = false
      this.$element.trigger(slidEvent)
    }

    isCycling && this.cycle()

    return this
  }


  // CAROUSEL PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.carousel')
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
      var action  = typeof option == 'string' ? option : options.slide

      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
      if (typeof option == 'number') data.to(option)
      else if (action) data[action]()
      else if (options.interval) data.pause().cycle()
    })
  }

  var old = $.fn.carousel

  $.fn.carousel             = Plugin
  $.fn.carousel.Constructor = Carousel


  // CAROUSEL NO CONFLICT
  // ====================

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old
    return this
  }


  // CAROUSEL DATA-API
  // =================

  var clickHandler = function (e) {
    var href
    var $this   = $(this)
    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) // strip for ie7
    if (!$target.hasClass('carousel')) return
    var options = $.extend({}, $target.data(), $this.data())
    var slideIndex = $this.attr('data-slide-to')
    if (slideIndex) options.interval = false

    Plugin.call($target, options)

    if (slideIndex) {
      $target.data('bs.carousel').to(slideIndex)
    }

    e.preventDefault()
  }

  $(document)
    .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)
    .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)

  $(window).on('load', function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this)
      Plugin.call($carousel, $carousel.data())
    })
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: collapse.js v3.3.6
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function (element, options) {
    this.$element      = $(element)
    this.options       = $.extend({}, Collapse.DEFAULTS, options)
    this.$trigger      = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
                           '[data-toggle="collapse"][data-target="#' + element.id + '"]')
    this.transitioning = null

    if (this.options.parent) {
      this.$parent = this.getParent()
    } else {
      this.addAriaAndCollapsedClass(this.$element, this.$trigger)
    }

    if (this.options.toggle) this.toggle()
  }

  Collapse.VERSION  = '3.3.6'

  Collapse.TRANSITION_DURATION = 350

  Collapse.DEFAULTS = {
    toggle: true
  }

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width')
    return hasWidth ? 'width' : 'height'
  }

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return

    var activesData
    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')

    if (actives && actives.length) {
      activesData = actives.data('bs.collapse')
      if (activesData && activesData.transitioning) return
    }

    var startEvent = $.Event('show.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    if (actives && actives.length) {
      Plugin.call(actives, 'hide')
      activesData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension()

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')[dimension](0)
      .attr('aria-expanded', true)

    this.$trigger
      .removeClass('collapsed')
      .attr('aria-expanded', true)

    this.transitioning = 1

    var complete = function () {
      this.$element
        .removeClass('collapsing')
        .addClass('collapse in')[dimension]('')
      this.transitioning = 0
      this.$element
        .trigger('shown.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

    this.$element
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
  }

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return

    var startEvent = $.Event('hide.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var dimension = this.dimension()

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight

    this.$element
      .addClass('collapsing')
      .removeClass('collapse in')
      .attr('aria-expanded', false)

    this.$trigger
      .addClass('collapsed')
      .attr('aria-expanded', false)

    this.transitioning = 1

    var complete = function () {
      this.transitioning = 0
      this.$element
        .removeClass('collapsing')
        .addClass('collapse')
        .trigger('hidden.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    this.$element
      [dimension](0)
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)
  }

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']()
  }

  Collapse.prototype.getParent = function () {
    return $(this.options.parent)
      .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
      .each($.proxy(function (i, element) {
        var $element = $(element)
        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
      }, this))
      .end()
  }

  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
    var isOpen = $element.hasClass('in')

    $element.attr('aria-expanded', isOpen)
    $trigger
      .toggleClass('collapsed', !isOpen)
      .attr('aria-expanded', isOpen)
  }

  function getTargetFromTrigger($trigger) {
    var href
    var target = $trigger.attr('data-target')
      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7

    return $(target)
  }


  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.collapse')
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false
      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.collapse

  $.fn.collapse             = Plugin
  $.fn.collapse.Constructor = Collapse


  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var $this   = $(this)

    if (!$this.attr('data-target')) e.preventDefault()

    var $target = getTargetFromTrigger($this)
    var data    = $target.data('bs.collapse')
    var option  = data ? 'toggle' : $this.data()

    Plugin.call($target, option)
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: dropdown.js v3.3.6
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // DROPDOWN CLASS DEFINITION
  // =========================

  var backdrop = '.dropdown-backdrop'
  var toggle   = '[data-toggle="dropdown"]'
  var Dropdown = function (element) {
    $(element).on('click.bs.dropdown', this.toggle)
  }

  Dropdown.VERSION = '3.3.6'

  function getParent($this) {
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = selector && $(selector)

    return $parent && $parent.length ? $parent : $this.parent()
  }

  function clearMenus(e) {
    if (e && e.which === 3) return
    $(backdrop).remove()
    $(toggle).each(function () {
      var $this         = $(this)
      var $parent       = getParent($this)
      var relatedTarget = { relatedTarget: this }

      if (!$parent.hasClass('open')) return

      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return

      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this.attr('aria-expanded', 'false')
      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget))
    })
  }

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this)

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    clearMenus()

    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we use a backdrop because click events don't delegate
        $(document.createElement('div'))
          .addClass('dropdown-backdrop')
          .insertAfter($(this))
          .on('click', clearMenus)
      }

      var relatedTarget = { relatedTarget: this }
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this
        .trigger('focus')
        .attr('aria-expanded', 'true')

      $parent
        .toggleClass('open')
        .trigger($.Event('shown.bs.dropdown', relatedTarget))
    }

    return false
  }

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return

    var $this = $(this)

    e.preventDefault()
    e.stopPropagation()

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    if (!isActive && e.which != 27 || isActive && e.which == 27) {
      if (e.which == 27) $parent.find(toggle).trigger('focus')
      return $this.trigger('click')
    }

    var desc = ' li:not(.disabled):visible a'
    var $items = $parent.find('.dropdown-menu' + desc)

    if (!$items.length) return

    var index = $items.index(e.target)

    if (e.which == 38 && index > 0)                 index--         // up
    if (e.which == 40 && index < $items.length - 1) index++         // down
    if (!~index)                                    index = 0

    $items.eq(index).trigger('focus')
  }


  // DROPDOWN PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.dropdown')

      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.dropdown

  $.fn.dropdown             = Plugin
  $.fn.dropdown.Constructor = Dropdown


  // DROPDOWN NO CONFLICT
  // ====================

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old
    return this
  }


  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================

  $(document)
    .on('click.bs.dropdown.data-api', clearMenus)
    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)
    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)

}(jQuery);

/* ========================================================================
 * Bootstrap: modal.js v3.3.6
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function (element, options) {
    this.options             = options
    this.$body               = $(document.body)
    this.$element            = $(element)
    this.$dialog             = this.$element.find('.modal-dialog')
    this.$backdrop           = null
    this.isShown             = null
    this.originalBodyPad     = null
    this.scrollbarWidth      = 0
    this.ignoreBackdropClick = false

    if (this.options.remote) {
      this.$element
        .find('.modal-content')
        .load(this.options.remote, $.proxy(function () {
          this.$element.trigger('loaded.bs.modal')
        }, this))
    }
  }

  Modal.VERSION  = '3.3.6'

  Modal.TRANSITION_DURATION = 300
  Modal.BACKDROP_TRANSITION_DURATION = 150

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  }

  Modal.prototype.toggle = function (_relatedTarget) {
    return this.isShown ? this.hide() : this.show(_relatedTarget)
  }

  Modal.prototype.show = function (_relatedTarget) {
    var that = this
    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })

    this.$element.trigger(e)

    if (this.isShown || e.isDefaultPrevented()) return

    this.isShown = true

    this.checkScrollbar()
    this.setScrollbar()
    this.$body.addClass('modal-open')

    this.escape()
    this.resize()

    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

    this.$dialog.on('mousedown.dismiss.bs.modal', function () {
      that.$element.one('mouseup.dismiss.bs.modal', function (e) {
        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true
      })
    })

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade')

      if (!that.$element.parent().length) {
        that.$element.appendTo(that.$body) // don't move modals dom position
      }

      that.$element
        .show()
        .scrollTop(0)

      that.adjustDialog()

      if (transition) {
        that.$element[0].offsetWidth // force reflow
      }

      that.$element.addClass('in')

      that.enforceFocus()

      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

      transition ?
        that.$dialog // wait for modal to slide in
          .one('bsTransitionEnd', function () {
            that.$element.trigger('focus').trigger(e)
          })
          .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
        that.$element.trigger('focus').trigger(e)
    })
  }

  Modal.prototype.hide = function (e) {
    if (e) e.preventDefault()

    e = $.Event('hide.bs.modal')

    this.$element.trigger(e)

    if (!this.isShown || e.isDefaultPrevented()) return

    this.isShown = false

    this.escape()
    this.resize()

    $(document).off('focusin.bs.modal')

    this.$element
      .removeClass('in')
      .off('click.dismiss.bs.modal')
      .off('mouseup.dismiss.bs.modal')

    this.$dialog.off('mousedown.dismiss.bs.modal')

    $.support.transition && this.$element.hasClass('fade') ?
      this.$element
        .one('bsTransitionEnd', $.proxy(this.hideModal, this))
        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
      this.hideModal()
  }

  Modal.prototype.enforceFocus = function () {
    $(document)
      .off('focusin.bs.modal') // guard against infinite focus loop
      .on('focusin.bs.modal', $.proxy(function (e) {
        if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
          this.$element.trigger('focus')
        }
      }, this))
  }

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide()
      }, this))
    } else if (!this.isShown) {
      this.$element.off('keydown.dismiss.bs.modal')
    }
  }

  Modal.prototype.resize = function () {
    if (this.isShown) {
      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))
    } else {
      $(window).off('resize.bs.modal')
    }
  }

  Modal.prototype.hideModal = function () {
    var that = this
    this.$element.hide()
    this.backdrop(function () {
      that.$body.removeClass('modal-open')
      that.resetAdjustments()
      that.resetScrollbar()
      that.$element.trigger('hidden.bs.modal')
    })
  }

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove()
    this.$backdrop = null
  }

  Modal.prototype.backdrop = function (callback) {
    var that = this
    var animate = this.$element.hasClass('fade') ? 'fade' : ''

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate

      this.$backdrop = $(document.createElement('div'))
        .addClass('modal-backdrop ' + animate)
        .appendTo(this.$body)

      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
        if (this.ignoreBackdropClick) {
          this.ignoreBackdropClick = false
          return
        }
        if (e.target !== e.currentTarget) return
        this.options.backdrop == 'static'
          ? this.$element[0].focus()
          : this.hide()
      }, this))

      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

      this.$backdrop.addClass('in')

      if (!callback) return

      doAnimate ?
        this.$backdrop
          .one('bsTransitionEnd', callback)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callback()

    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in')

      var callbackRemove = function () {
        that.removeBackdrop()
        callback && callback()
      }
      $.support.transition && this.$element.hasClass('fade') ?
        this.$backdrop
          .one('bsTransitionEnd', callbackRemove)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callbackRemove()

    } else if (callback) {
      callback()
    }
  }

  // these following methods are used to handle overflowing modals

  Modal.prototype.handleUpdate = function () {
    this.adjustDialog()
  }

  Modal.prototype.adjustDialog = function () {
    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight

    this.$element.css({
      paddingLeft:  !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
    })
  }

  Modal.prototype.resetAdjustments = function () {
    this.$element.css({
      paddingLeft: '',
      paddingRight: ''
    })
  }

  Modal.prototype.checkScrollbar = function () {
    var fullWindowWidth = window.innerWidth
    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8
      var documentElementRect = document.documentElement.getBoundingClientRect()
      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)
    }
    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth
    this.scrollbarWidth = this.measureScrollbar()
  }

  Modal.prototype.setScrollbar = function () {
    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)
    this.originalBodyPad = document.body.style.paddingRight || ''
    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)
  }

  Modal.prototype.resetScrollbar = function () {
    this.$body.css('padding-right', this.originalBodyPad)
  }

  Modal.prototype.measureScrollbar = function () { // thx walsh
    var scrollDiv = document.createElement('div')
    scrollDiv.className = 'modal-scrollbar-measure'
    this.$body.append(scrollDiv)
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
    this.$body[0].removeChild(scrollDiv)
    return scrollbarWidth
  }


  // MODAL PLUGIN DEFINITION
  // =======================

  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.modal')
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
      if (typeof option == 'string') data[option](_relatedTarget)
      else if (options.show) data.show(_relatedTarget)
    })
  }

  var old = $.fn.modal

  $.fn.modal             = Plugin
  $.fn.modal.Constructor = Modal


  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function () {
    $.fn.modal = old
    return this
  }


  // MODAL DATA-API
  // ==============

  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this   = $(this)
    var href    = $this.attr('href')
    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) // strip for ie7
    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

    if ($this.is('a')) e.preventDefault()

    $target.one('show.bs.modal', function (showEvent) {
      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown
      $target.one('hidden.bs.modal', function () {
        $this.is(':visible') && $this.trigger('focus')
      })
    })
    Plugin.call($target, option, this)
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: tooltip.js v3.3.6
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function (element, options) {
    this.type       = null
    this.options    = null
    this.enabled    = null
    this.timeout    = null
    this.hoverState = null
    this.$element   = null
    this.inState    = null

    this.init('tooltip', element, options)
  }

  Tooltip.VERSION  = '3.3.6'

  Tooltip.TRANSITION_DURATION = 150

  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    }
  }

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled   = true
    this.type      = type
    this.$element  = $(element)
    this.options   = this.getOptions(options)
    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))
    this.inState   = { click: false, hover: false, focus: false }

    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
    }

    var triggers = this.options.trigger.split(' ')

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i]

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (trigger != 'manual') {
        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }
    }

    this.options.selector ?
      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
      this.fixTitle()
  }

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS
  }

  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      }
    }

    return options
  }

  Tooltip.prototype.getDelegateOptions = function () {
    var options  = {}
    var defaults = this.getDefaults()

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value
    })

    return options
  }

  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true
    }

    if (self.tip().hasClass('in') || self.hoverState == 'in') {
      self.hoverState = 'in'
      return
    }

    clearTimeout(self.timeout)

    self.hoverState = 'in'

    if (!self.options.delay || !self.options.delay.show) return self.show()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show()
    }, self.options.delay.show)
  }

  Tooltip.prototype.isInStateTrue = function () {
    for (var key in this.inState) {
      if (this.inState[key]) return true
    }

    return false
  }

  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false
    }

    if (self.isInStateTrue()) return

    clearTimeout(self.timeout)

    self.hoverState = 'out'

    if (!self.options.delay || !self.options.delay.hide) return self.hide()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide()
    }, self.options.delay.hide)
  }

  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type)

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e)

      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
      if (e.isDefaultPrevented() || !inDom) return
      var that = this

      var $tip = this.tip()

      var tipId = this.getUID(this.type)

      this.setContent()
      $tip.attr('id', tipId)
      this.$element.attr('aria-describedby', tipId)

      if (this.options.animation) $tip.addClass('fade')

      var placement = typeof this.options.placement == 'function' ?
        this.options.placement.call(this, $tip[0], this.$element[0]) :
        this.options.placement

      var autoToken = /\s?auto?\s?/i
      var autoPlace = autoToken.test(placement)
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

      $tip
        .detach()
        .css({ top: 0, left: 0, display: 'block' })
        .addClass(placement)
        .data('bs.' + this.type, this)

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)
      this.$element.trigger('inserted.bs.' + this.type)

      var pos          = this.getPosition()
      var actualWidth  = $tip[0].offsetWidth
      var actualHeight = $tip[0].offsetHeight

      if (autoPlace) {
        var orgPlacement = placement
        var viewportDim = this.getPosition(this.$viewport)

        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :
                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :
                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :
                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :
                    placement

        $tip
          .removeClass(orgPlacement)
          .addClass(placement)
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

      this.applyPlacement(calculatedOffset, placement)

      var complete = function () {
        var prevHoverState = that.hoverState
        that.$element.trigger('shown.bs.' + that.type)
        that.hoverState = null

        if (prevHoverState == 'out') that.leave(that)
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        $tip
          .one('bsTransitionEnd', complete)
          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
        complete()
    }
  }

  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var $tip   = this.tip()
    var width  = $tip[0].offsetWidth
    var height = $tip[0].offsetHeight

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10)
    var marginLeft = parseInt($tip.css('margin-left'), 10)

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop))  marginTop  = 0
    if (isNaN(marginLeft)) marginLeft = 0

    offset.top  += marginTop
    offset.left += marginLeft

    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function (props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        })
      }
    }, offset), 0)

    $tip.addClass('in')

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth  = $tip[0].offsetWidth
    var actualHeight = $tip[0].offsetHeight

    if (placement == 'top' && actualHeight != height) {
      offset.top = offset.top + height - actualHeight
    }

    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

    if (delta.left) offset.left += delta.left
    else offset.top += delta.top

    var isVertical          = /top|bottom/.test(placement)
    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'

    $tip.offset(offset)
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
  }

  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
    this.arrow()
      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')
      .css(isVertical ? 'top' : 'left', '')
  }

  Tooltip.prototype.setContent = function () {
    var $tip  = this.tip()
    var title = this.getTitle()

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
    $tip.removeClass('fade in top bottom left right')
  }

  Tooltip.prototype.hide = function (callback) {
    var that = this
    var $tip = $(this.$tip)
    var e    = $.Event('hide.bs.' + this.type)

    function complete() {
      if (that.hoverState != 'in') $tip.detach()
      that.$element
        .removeAttr('aria-describedby')
        .trigger('hidden.bs.' + that.type)
      callback && callback()
    }

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    $tip.removeClass('in')

    $.support.transition && $tip.hasClass('fade') ?
      $tip
        .one('bsTransitionEnd', complete)
        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
      complete()

    this.hoverState = null

    return this
  }

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element
    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
    }
  }

  Tooltip.prototype.hasContent = function () {
    return this.getTitle()
  }

  Tooltip.prototype.getPosition = function ($element) {
    $element   = $element || this.$element

    var el     = $element[0]
    var isBody = el.tagName == 'BODY'

    var elRect    = el.getBoundingClientRect()
    if (elRect.width == null) {
      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })
    }
    var elOffset  = isBody ? { top: 0, left: 0 } : $element.offset()
    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }
    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null

    return $.extend({}, elRect, scroll, outerDims, elOffset)
  }

  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }

  }

  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
    var delta = { top: 0, left: 0 }
    if (!this.$viewport) return delta

    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
    var viewportDimensions = this.getPosition(this.$viewport)

    if (/right|left/.test(placement)) {
      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
      if (topEdgeOffset < viewportDimensions.top) { // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
      }
    } else {
      var leftEdgeOffset  = pos.left - viewportPadding
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth
      if (leftEdgeOffset < viewportDimensions.left) { // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset
      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
      }
    }

    return delta
  }

  Tooltip.prototype.getTitle = function () {
    var title
    var $e = this.$element
    var o  = this.options

    title = $e.attr('data-original-title')
      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

    return title
  }

  Tooltip.prototype.getUID = function (prefix) {
    do prefix += ~~(Math.random() * 1000000)
    while (document.getElementById(prefix))
    return prefix
  }

  Tooltip.prototype.tip = function () {
    if (!this.$tip) {
      this.$tip = $(this.options.template)
      if (this.$tip.length != 1) {
        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')
      }
    }
    return this.$tip
  }

  Tooltip.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
  }

  Tooltip.prototype.enable = function () {
    this.enabled = true
  }

  Tooltip.prototype.disable = function () {
    this.enabled = false
  }

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled
  }

  Tooltip.prototype.toggle = function (e) {
    var self = this
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type)
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions())
        $(e.currentTarget).data('bs.' + this.type, self)
      }
    }

    if (e) {
      self.inState.click = !self.inState.click
      if (self.isInStateTrue()) self.enter(self)
      else self.leave(self)
    } else {
      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
    }
  }

  Tooltip.prototype.destroy = function () {
    var that = this
    clearTimeout(this.timeout)
    this.hide(function () {
      that.$element.off('.' + that.type).removeData('bs.' + that.type)
      if (that.$tip) {
        that.$tip.detach()
      }
      that.$tip = null
      that.$arrow = null
      that.$viewport = null
    })
  }


  // TOOLTIP PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.tooltip')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tooltip

  $.fn.tooltip             = Plugin
  $.fn.tooltip.Constructor = Tooltip


  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old
    return this
  }

}(jQuery);

/* ========================================================================
 * Bootstrap: popover.js v3.3.6
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================

  var Popover = function (element, options) {
    this.init('popover', element, options)
  }

  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

  Popover.VERSION  = '3.3.6'

  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  })


  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

  Popover.prototype.constructor = Popover

  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS
  }

  Popover.prototype.setContent = function () {
    var $tip    = this.tip()
    var title   = this.getTitle()
    var content = this.getContent()

    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
    $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events
      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'
    ](content)

    $tip.removeClass('fade top bottom left right in')

    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
  }

  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent()
  }

  Popover.prototype.getContent = function () {
    var $e = this.$element
    var o  = this.options

    return $e.attr('data-content')
      || (typeof o.content == 'function' ?
            o.content.call($e[0]) :
            o.content)
  }

  Popover.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))
  }


  // POPOVER PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.popover')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.popover

  $.fn.popover             = Plugin
  $.fn.popover.Constructor = Popover


  // POPOVER NO CONFLICT
  // ===================

  $.fn.popover.noConflict = function () {
    $.fn.popover = old
    return this
  }

}(jQuery);

/* ========================================================================
 * Bootstrap: scrollspy.js v3.3.6
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // SCROLLSPY CLASS DEFINITION
  // ==========================

  function ScrollSpy(element, options) {
    this.$body          = $(document.body)
    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)
    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
    this.selector       = (this.options.target || '') + ' .nav li > a'
    this.offsets        = []
    this.targets        = []
    this.activeTarget   = null
    this.scrollHeight   = 0

    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))
    this.refresh()
    this.process()
  }

  ScrollSpy.VERSION  = '3.3.6'

  ScrollSpy.DEFAULTS = {
    offset: 10
  }

  ScrollSpy.prototype.getScrollHeight = function () {
    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)
  }

  ScrollSpy.prototype.refresh = function () {
    var that          = this
    var offsetMethod  = 'offset'
    var offsetBase    = 0

    this.offsets      = []
    this.targets      = []
    this.scrollHeight = this.getScrollHeight()

    if (!$.isWindow(this.$scrollElement[0])) {
      offsetMethod = 'position'
      offsetBase   = this.$scrollElement.scrollTop()
    }

    this.$body
      .find(this.selector)
      .map(function () {
        var $el   = $(this)
        var href  = $el.data('target') || $el.attr('href')
        var $href = /^#./.test(href) && $(href)

        return ($href
          && $href.length
          && $href.is(':visible')
          && [[$href[offsetMethod]().top + offsetBase, href]]) || null
      })
      .sort(function (a, b) { return a[0] - b[0] })
      .each(function () {
        that.offsets.push(this[0])
        that.targets.push(this[1])
      })
  }

  ScrollSpy.prototype.process = function () {
    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
    var scrollHeight = this.getScrollHeight()
    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()
    var offsets      = this.offsets
    var targets      = this.targets
    var activeTarget = this.activeTarget
    var i

    if (this.scrollHeight != scrollHeight) {
      this.refresh()
    }

    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)
    }

    if (activeTarget && scrollTop < offsets[0]) {
      this.activeTarget = null
      return this.clear()
    }

    for (i = offsets.length; i--;) {
      activeTarget != targets[i]
        && scrollTop >= offsets[i]
        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])
        && this.activate(targets[i])
    }
  }

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target

    this.clear()

    var selector = this.selector +
      '[data-target="' + target + '"],' +
      this.selector + '[href="' + target + '"]'

    var active = $(selector)
      .parents('li')
      .addClass('active')

    if (active.parent('.dropdown-menu').length) {
      active = active
        .closest('li.dropdown')
        .addClass('active')
    }

    active.trigger('activate.bs.scrollspy')
  }

  ScrollSpy.prototype.clear = function () {
    $(this.selector)
      .parentsUntil(this.options.target, '.active')
      .removeClass('active')
  }


  // SCROLLSPY PLUGIN DEFINITION
  // ===========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.scrollspy')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.scrollspy

  $.fn.scrollspy             = Plugin
  $.fn.scrollspy.Constructor = ScrollSpy


  // SCROLLSPY NO CONFLICT
  // =====================

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old
    return this
  }


  // SCROLLSPY DATA-API
  // ==================

  $(window).on('load.bs.scrollspy.data-api', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this)
      Plugin.call($spy, $spy.data())
    })
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: tab.js v3.3.6
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function (element) {
    // jscs:disable requireDollarBeforejQueryAssignment
    this.element = $(element)
    // jscs:enable requireDollarBeforejQueryAssignment
  }

  Tab.VERSION = '3.3.6'

  Tab.TRANSITION_DURATION = 150

  Tab.prototype.show = function () {
    var $this    = this.element
    var $ul      = $this.closest('ul:not(.dropdown-menu)')
    var selector = $this.data('target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return

    var $previous = $ul.find('.active:last a')
    var hideEvent = $.Event('hide.bs.tab', {
      relatedTarget: $this[0]
    })
    var showEvent = $.Event('show.bs.tab', {
      relatedTarget: $previous[0]
    })

    $previous.trigger(hideEvent)
    $this.trigger(showEvent)

    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return

    var $target = $(selector)

    this.activate($this.closest('li'), $ul)
    this.activate($target, $target.parent(), function () {
      $previous.trigger({
        type: 'hidden.bs.tab',
        relatedTarget: $this[0]
      })
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: $previous[0]
      })
    })
  }

  Tab.prototype.activate = function (element, container, callback) {
    var $active    = container.find('> .active')
    var transition = callback
      && $.support.transition
      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)

    function next() {
      $active
        .removeClass('active')
        .find('> .dropdown-menu > .active')
          .removeClass('active')
        .end()
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', false)

      element
        .addClass('active')
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', true)

      if (transition) {
        element[0].offsetWidth // reflow for transition
        element.addClass('in')
      } else {
        element.removeClass('fade')
      }

      if (element.parent('.dropdown-menu').length) {
        element
          .closest('li.dropdown')
            .addClass('active')
          .end()
          .find('[data-toggle="tab"]')
            .attr('aria-expanded', true)
      }

      callback && callback()
    }

    $active.length && transition ?
      $active
        .one('bsTransitionEnd', next)
        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :
      next()

    $active.removeClass('in')
  }


  // TAB PLUGIN DEFINITION
  // =====================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.tab')

      if (!data) $this.data('bs.tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tab

  $.fn.tab             = Plugin
  $.fn.tab.Constructor = Tab


  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


  // TAB DATA-API
  // ============

  var clickHandler = function (e) {
    e.preventDefault()
    Plugin.call($(this), 'show')
  }

  $(document)
    .on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler)
    .on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler)

}(jQuery);

/* ========================================================================
 * Bootstrap: affix.js v3.3.6
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // AFFIX CLASS DEFINITION
  // ======================

  var Affix = function (element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options)

    this.$target = $(this.options.target)
      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))

    this.$element     = $(element)
    this.affixed      = null
    this.unpin        = null
    this.pinnedOffset = null

    this.checkPosition()
  }

  Affix.VERSION  = '3.3.6'

  Affix.RESET    = 'affix affix-top affix-bottom'

  Affix.DEFAULTS = {
    offset: 0,
    target: window
  }

  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
    var scrollTop    = this.$target.scrollTop()
    var position     = this.$element.offset()
    var targetHeight = this.$target.height()

    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false

    if (this.affixed == 'bottom') {
      if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'
      return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'
    }

    var initializing   = this.affixed == null
    var colliderTop    = initializing ? scrollTop : position.top
    var colliderHeight = initializing ? targetHeight : height

    if (offsetTop != null && scrollTop <= offsetTop) return 'top'
    if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'

    return false
  }

  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset) return this.pinnedOffset
    this.$element.removeClass(Affix.RESET).addClass('affix')
    var scrollTop = this.$target.scrollTop()
    var position  = this.$element.offset()
    return (this.pinnedOffset = position.top - scrollTop)
  }

  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1)
  }

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return

    var height       = this.$element.height()
    var offset       = this.options.offset
    var offsetTop    = offset.top
    var offsetBottom = offset.bottom
    var scrollHeight = Math.max($(document).height(), $(document.body).height())

    if (typeof offset != 'object')         offsetBottom = offsetTop = offset
    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)

    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)

    if (this.affixed != affix) {
      if (this.unpin != null) this.$element.css('top', '')

      var affixType = 'affix' + (affix ? '-' + affix : '')
      var e         = $.Event(affixType + '.bs.affix')

      this.$element.trigger(e)

      if (e.isDefaultPrevented()) return

      this.affixed = affix
      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null

      this.$element
        .removeClass(Affix.RESET)
        .addClass(affixType)
        .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')
    }

    if (affix == 'bottom') {
      this.$element.offset({
        top: scrollHeight - height - offsetBottom
      })
    }
  }


  // AFFIX PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.affix')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.affix

  $.fn.affix             = Plugin
  $.fn.affix.Constructor = Affix


  // AFFIX NO CONFLICT
  // =================

  $.fn.affix.noConflict = function () {
    $.fn.affix = old
    return this
  }


  // AFFIX DATA-API
  // ==============

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this)
      var data = $spy.data()

      data.offset = data.offset || {}

      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom
      if (data.offsetTop    != null) data.offset.top    = data.offsetTop

      Plugin.call($spy, data)
    })
  })

}(jQuery);

/*global angular:true, browser:true */

/**
 * @license HTTP Auth Interceptor Module for AngularJS
 * (c) 2012 Witold Szczerba
 * License: MIT
 */
(function () {
  'use strict';

  angular.module('http-auth-interceptor', ['http-auth-interceptor-buffer'])

  .factory('authService', ['$rootScope','httpBuffer', function($rootScope, httpBuffer) {
    return {
      /**
       * Call this function to indicate that authentication was successfull and trigger a
       * retry of all deferred requests.
       * @param data an optional argument to pass on to $broadcast which may be useful for
       * example if you need to pass through details of the user that was logged in
       */
      loginConfirmed: function(data, configUpdater) {
        var updater = configUpdater || function(config) {return config;};
        $rootScope.$broadcast('event:auth-loginConfirmed', data);
        httpBuffer.retryAll(updater);
      },

      /**
       * Call this function to indicate that authentication should not proceed.
       * All deferred requests will be abandoned or rejected (if reason is provided).
       * @param data an optional argument to pass on to $broadcast.
       * @param reason if provided, the requests are rejected; abandoned otherwise.
       */
      loginCancelled: function(data, reason) {
        httpBuffer.rejectAll(reason);
        $rootScope.$broadcast('event:auth-loginCancelled', data);
      },

      /**
       * Call this function to make a function onto every object in the httpBuffer
       * This allows us to modify the requests
       */
      transformRequests: function(func) {
          httpBuffer.transform(func);
      }
    };
  }])

  /**
   * $http interceptor.
   * On 401 response (without 'ignoreAuthModule' option) stores the request
   * and broadcasts 'event:angular-auth-loginRequired'.
   */
  .config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push(['$rootScope', '$q', 'httpBuffer', function($rootScope, $q, httpBuffer) {
      return {
        responseError: function(rejection) {
          if (rejection.status === 401 && !rejection.config.ignoreAuthModule) {
            var deferred = $q.defer();
            httpBuffer.append(rejection.config, deferred);
            $rootScope.$broadcast('event:auth-loginRequired', rejection);
            return deferred.promise;
          }
          // otherwise, default behaviour
          return $q.reject(rejection);
        }
      };
    }]);
  }]);

  /**
   * Private module, a utility, required internally by 'http-auth-interceptor'.
   */
  angular.module('http-auth-interceptor-buffer', [])

  .factory('httpBuffer', ['$injector', function($injector) {
    /** Holds all the requests, so they can be re-requested in future. */
    var buffer = [];

    /** Service initialized later because of circular dependency problem. */
    var $http;

    function retryHttpRequest(config, deferred) {
      function successCallback(response) {
        deferred.resolve(response);
      }
      function errorCallback(response) {
        deferred.reject(response);
      }
      $http = $http || $injector.get('$http');
      $http(config).then(successCallback, errorCallback);
    }

    return {
      /**
       * Appends HTTP request configuration object with deferred response attached to buffer.
       */
      append: function(config, deferred) {
        buffer.push({
          config: config,
          deferred: deferred
        });
      },

      /**
       * Apply a function to every call in the buffer array
       */
      transform: function(func) {
        buffer = buffer.map(func);
      },

      /**
       * Abandon or reject (if reason provided) all the buffered requests.
       */
      rejectAll: function(reason) {
        if (reason) {
          for (var i = 0; i < buffer.length; ++i) {
            buffer[i].deferred.reject(reason);
          }
        }
        buffer = [];
      },

      /**
       * Retries all the buffered requests clears the buffer.
       */
      retryAll: function(updater) {
        for (var i = 0; i < buffer.length; ++i) {
          retryHttpRequest(updater(buffer[i].config), buffer[i].deferred);
        }
        buffer = [];
      }
    };
  }]);
})();

/*!
 * Datepicker for Bootstrap v1.6.1 (https://github.com/eternicode/bootstrap-datepicker)
 *
 * Copyright 2012 Stefan Petre
 * Improvements by Andrew Rowls
 * Licensed under the Apache License v2.0 (http://www.apache.org/licenses/LICENSE-2.0)
 */
!function(a){"function"==typeof define&&define.amd?define(["jquery"],a):a("object"==typeof exports?require("jquery"):jQuery)}(function(a,b){function c(){return new Date(Date.UTC.apply(Date,arguments))}function d(){var a=new Date;return c(a.getFullYear(),a.getMonth(),a.getDate())}function e(a,b){return a.getUTCFullYear()===b.getUTCFullYear()&&a.getUTCMonth()===b.getUTCMonth()&&a.getUTCDate()===b.getUTCDate()}function f(a){return function(){return this[a].apply(this,arguments)}}function g(a){return a&&!isNaN(a.getTime())}function h(b,c){function d(a,b){return b.toLowerCase()}var e,f=a(b).data(),g={},h=new RegExp("^"+c.toLowerCase()+"([A-Z])");c=new RegExp("^"+c.toLowerCase());for(var i in f)c.test(i)&&(e=i.replace(h,d),g[e]=f[i]);return g}function i(b){var c={};if(q[b]||(b=b.split("-")[0],q[b])){var d=q[b];return a.each(p,function(a,b){b in d&&(c[b]=d[b])}),c}}var j=function(){var b={get:function(a){return this.slice(a)[0]},contains:function(a){for(var b=a&&a.valueOf(),c=0,d=this.length;d>c;c++)if(this[c].valueOf()===b)return c;return-1},remove:function(a){this.splice(a,1)},replace:function(b){b&&(a.isArray(b)||(b=[b]),this.clear(),this.push.apply(this,b))},clear:function(){this.length=0},copy:function(){var a=new j;return a.replace(this),a}};return function(){var c=[];return c.push.apply(c,arguments),a.extend(c,b),c}}(),k=function(b,c){a(b).data("datepicker",this),this._process_options(c),this.dates=new j,this.viewDate=this.o.defaultViewDate,this.focusDate=null,this.element=a(b),this.isInput=this.element.is("input"),this.inputField=this.isInput?this.element:this.element.find("input"),this.component=this.element.hasClass("date")?this.element.find(".add-on, .input-group-addon, .btn"):!1,this.hasInput=this.component&&this.inputField.length,this.component&&0===this.component.length&&(this.component=!1),this.isInline=!this.component&&this.element.is("div"),this.picker=a(r.template),this._check_template(this.o.templates.leftArrow)&&this.picker.find(".prev").html(this.o.templates.leftArrow),this._check_template(this.o.templates.rightArrow)&&this.picker.find(".next").html(this.o.templates.rightArrow),this._buildEvents(),this._attachEvents(),this.isInline?this.picker.addClass("datepicker-inline").appendTo(this.element):this.picker.addClass("datepicker-dropdown dropdown-menu"),this.o.rtl&&this.picker.addClass("datepicker-rtl"),this.viewMode=this.o.startView,this.o.calendarWeeks&&this.picker.find("thead .datepicker-title, tfoot .today, tfoot .clear").attr("colspan",function(a,b){return parseInt(b)+1}),this._allow_update=!1,this.setStartDate(this._o.startDate),this.setEndDate(this._o.endDate),this.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled),this.setDaysOfWeekHighlighted(this.o.daysOfWeekHighlighted),this.setDatesDisabled(this.o.datesDisabled),this.fillDow(),this.fillMonths(),this._allow_update=!0,this.update(),this.showMode(),this.isInline&&this.show()};k.prototype={constructor:k,_resolveViewName:function(a,c){return 0===a||"days"===a||"month"===a?0:1===a||"months"===a||"year"===a?1:2===a||"years"===a||"decade"===a?2:3===a||"decades"===a||"century"===a?3:4===a||"centuries"===a||"millennium"===a?4:c===b?!1:c},_check_template:function(c){try{if(c===b||""===c)return!1;if((c.match(/[<>]/g)||[]).length<=0)return!0;var d=a(c);return d.length>0}catch(e){return!1}},_process_options:function(b){this._o=a.extend({},this._o,b);var e=this.o=a.extend({},this._o),f=e.language;q[f]||(f=f.split("-")[0],q[f]||(f=o.language)),e.language=f,e.startView=this._resolveViewName(e.startView,0),e.minViewMode=this._resolveViewName(e.minViewMode,0),e.maxViewMode=this._resolveViewName(e.maxViewMode,4),e.startView=Math.min(e.startView,e.maxViewMode),e.startView=Math.max(e.startView,e.minViewMode),e.multidate!==!0&&(e.multidate=Number(e.multidate)||!1,e.multidate!==!1&&(e.multidate=Math.max(0,e.multidate))),e.multidateSeparator=String(e.multidateSeparator),e.weekStart%=7,e.weekEnd=(e.weekStart+6)%7;var g=r.parseFormat(e.format);e.startDate!==-(1/0)&&(e.startDate?e.startDate instanceof Date?e.startDate=this._local_to_utc(this._zero_time(e.startDate)):e.startDate=r.parseDate(e.startDate,g,e.language,e.assumeNearbyYear):e.startDate=-(1/0)),e.endDate!==1/0&&(e.endDate?e.endDate instanceof Date?e.endDate=this._local_to_utc(this._zero_time(e.endDate)):e.endDate=r.parseDate(e.endDate,g,e.language,e.assumeNearbyYear):e.endDate=1/0),e.daysOfWeekDisabled=e.daysOfWeekDisabled||[],a.isArray(e.daysOfWeekDisabled)||(e.daysOfWeekDisabled=e.daysOfWeekDisabled.split(/[,\s]*/)),e.daysOfWeekDisabled=a.map(e.daysOfWeekDisabled,function(a){return parseInt(a,10)}),e.daysOfWeekHighlighted=e.daysOfWeekHighlighted||[],a.isArray(e.daysOfWeekHighlighted)||(e.daysOfWeekHighlighted=e.daysOfWeekHighlighted.split(/[,\s]*/)),e.daysOfWeekHighlighted=a.map(e.daysOfWeekHighlighted,function(a){return parseInt(a,10)}),e.datesDisabled=e.datesDisabled||[],a.isArray(e.datesDisabled)||(e.datesDisabled=[e.datesDisabled]),e.datesDisabled=a.map(e.datesDisabled,function(a){return r.parseDate(a,g,e.language,e.assumeNearbyYear)});var h=String(e.orientation).toLowerCase().split(/\s+/g),i=e.orientation.toLowerCase();if(h=a.grep(h,function(a){return/^auto|left|right|top|bottom$/.test(a)}),e.orientation={x:"auto",y:"auto"},i&&"auto"!==i)if(1===h.length)switch(h[0]){case"top":case"bottom":e.orientation.y=h[0];break;case"left":case"right":e.orientation.x=h[0]}else i=a.grep(h,function(a){return/^left|right$/.test(a)}),e.orientation.x=i[0]||"auto",i=a.grep(h,function(a){return/^top|bottom$/.test(a)}),e.orientation.y=i[0]||"auto";else;if(e.defaultViewDate){var j=e.defaultViewDate.year||(new Date).getFullYear(),k=e.defaultViewDate.month||0,l=e.defaultViewDate.day||1;e.defaultViewDate=c(j,k,l)}else e.defaultViewDate=d()},_events:[],_secondaryEvents:[],_applyEvents:function(a){for(var c,d,e,f=0;f<a.length;f++)c=a[f][0],2===a[f].length?(d=b,e=a[f][1]):3===a[f].length&&(d=a[f][1],e=a[f][2]),c.on(e,d)},_unapplyEvents:function(a){for(var c,d,e,f=0;f<a.length;f++)c=a[f][0],2===a[f].length?(e=b,d=a[f][1]):3===a[f].length&&(e=a[f][1],d=a[f][2]),c.off(d,e)},_buildEvents:function(){var b={keyup:a.proxy(function(b){-1===a.inArray(b.keyCode,[27,37,39,38,40,32,13,9])&&this.update()},this),keydown:a.proxy(this.keydown,this),paste:a.proxy(this.paste,this)};this.o.showOnFocus===!0&&(b.focus=a.proxy(this.show,this)),this.isInput?this._events=[[this.element,b]]:this.component&&this.hasInput?this._events=[[this.inputField,b],[this.component,{click:a.proxy(this.show,this)}]]:this._events=[[this.element,{click:a.proxy(this.show,this),keydown:a.proxy(this.keydown,this)}]],this._events.push([this.element,"*",{blur:a.proxy(function(a){this._focused_from=a.target},this)}],[this.element,{blur:a.proxy(function(a){this._focused_from=a.target},this)}]),this.o.immediateUpdates&&this._events.push([this.element,{"changeYear changeMonth":a.proxy(function(a){this.update(a.date)},this)}]),this._secondaryEvents=[[this.picker,{click:a.proxy(this.click,this)}],[a(window),{resize:a.proxy(this.place,this)}],[a(document),{mousedown:a.proxy(function(a){this.element.is(a.target)||this.element.find(a.target).length||this.picker.is(a.target)||this.picker.find(a.target).length||this.isInline||this.hide()},this)}]]},_attachEvents:function(){this._detachEvents(),this._applyEvents(this._events)},_detachEvents:function(){this._unapplyEvents(this._events)},_attachSecondaryEvents:function(){this._detachSecondaryEvents(),this._applyEvents(this._secondaryEvents)},_detachSecondaryEvents:function(){this._unapplyEvents(this._secondaryEvents)},_trigger:function(b,c){var d=c||this.dates.get(-1),e=this._utc_to_local(d);this.element.trigger({type:b,date:e,dates:a.map(this.dates,this._utc_to_local),format:a.proxy(function(a,b){0===arguments.length?(a=this.dates.length-1,b=this.o.format):"string"==typeof a&&(b=a,a=this.dates.length-1),b=b||this.o.format;var c=this.dates.get(a);return r.formatDate(c,b,this.o.language)},this)})},show:function(){return this.inputField.prop("disabled")||this.inputField.prop("readonly")&&this.o.enableOnReadonly===!1?void 0:(this.isInline||this.picker.appendTo(this.o.container),this.place(),this.picker.show(),this._attachSecondaryEvents(),this._trigger("show"),(window.navigator.msMaxTouchPoints||"ontouchstart"in document)&&this.o.disableTouchKeyboard&&a(this.element).blur(),this)},hide:function(){return this.isInline||!this.picker.is(":visible")?this:(this.focusDate=null,this.picker.hide().detach(),this._detachSecondaryEvents(),this.viewMode=this.o.startView,this.showMode(),this.o.forceParse&&this.inputField.val()&&this.setValue(),this._trigger("hide"),this)},destroy:function(){return this.hide(),this._detachEvents(),this._detachSecondaryEvents(),this.picker.remove(),delete this.element.data().datepicker,this.isInput||delete this.element.data().date,this},paste:function(b){var c;if(b.originalEvent.clipboardData&&b.originalEvent.clipboardData.types&&-1!==a.inArray("text/plain",b.originalEvent.clipboardData.types))c=b.originalEvent.clipboardData.getData("text/plain");else{if(!window.clipboardData)return;c=window.clipboardData.getData("Text")}this.setDate(c),this.update(),b.preventDefault()},_utc_to_local:function(a){return a&&new Date(a.getTime()+6e4*a.getTimezoneOffset())},_local_to_utc:function(a){return a&&new Date(a.getTime()-6e4*a.getTimezoneOffset())},_zero_time:function(a){return a&&new Date(a.getFullYear(),a.getMonth(),a.getDate())},_zero_utc_time:function(a){return a&&new Date(Date.UTC(a.getUTCFullYear(),a.getUTCMonth(),a.getUTCDate()))},getDates:function(){return a.map(this.dates,this._utc_to_local)},getUTCDates:function(){return a.map(this.dates,function(a){return new Date(a)})},getDate:function(){return this._utc_to_local(this.getUTCDate())},getUTCDate:function(){var a=this.dates.get(-1);return"undefined"!=typeof a?new Date(a):null},clearDates:function(){this.inputField&&this.inputField.val(""),this.update(),this._trigger("changeDate"),this.o.autoclose&&this.hide()},setDates:function(){var b=a.isArray(arguments[0])?arguments[0]:arguments;return this.update.apply(this,b),this._trigger("changeDate"),this.setValue(),this},setUTCDates:function(){var b=a.isArray(arguments[0])?arguments[0]:arguments;return this.update.apply(this,a.map(b,this._utc_to_local)),this._trigger("changeDate"),this.setValue(),this},setDate:f("setDates"),setUTCDate:f("setUTCDates"),remove:f("destroy"),setValue:function(){var a=this.getFormattedDate();return this.inputField.val(a),this},getFormattedDate:function(c){c===b&&(c=this.o.format);var d=this.o.language;return a.map(this.dates,function(a){return r.formatDate(a,c,d)}).join(this.o.multidateSeparator)},getStartDate:function(){return this.o.startDate},setStartDate:function(a){return this._process_options({startDate:a}),this.update(),this.updateNavArrows(),this},getEndDate:function(){return this.o.endDate},setEndDate:function(a){return this._process_options({endDate:a}),this.update(),this.updateNavArrows(),this},setDaysOfWeekDisabled:function(a){return this._process_options({daysOfWeekDisabled:a}),this.update(),this.updateNavArrows(),this},setDaysOfWeekHighlighted:function(a){return this._process_options({daysOfWeekHighlighted:a}),this.update(),this},setDatesDisabled:function(a){this._process_options({datesDisabled:a}),this.update(),this.updateNavArrows()},place:function(){if(this.isInline)return this;var b=this.picker.outerWidth(),c=this.picker.outerHeight(),d=10,e=a(this.o.container),f=e.width(),g="body"===this.o.container?a(document).scrollTop():e.scrollTop(),h=e.offset(),i=[];this.element.parents().each(function(){var b=a(this).css("z-index");"auto"!==b&&0!==b&&i.push(parseInt(b))});var j=Math.max.apply(Math,i)+this.o.zIndexOffset,k=this.component?this.component.parent().offset():this.element.offset(),l=this.component?this.component.outerHeight(!0):this.element.outerHeight(!1),m=this.component?this.component.outerWidth(!0):this.element.outerWidth(!1),n=k.left-h.left,o=k.top-h.top;"body"!==this.o.container&&(o+=g),this.picker.removeClass("datepicker-orient-top datepicker-orient-bottom datepicker-orient-right datepicker-orient-left"),"auto"!==this.o.orientation.x?(this.picker.addClass("datepicker-orient-"+this.o.orientation.x),"right"===this.o.orientation.x&&(n-=b-m)):k.left<0?(this.picker.addClass("datepicker-orient-left"),n-=k.left-d):n+b>f?(this.picker.addClass("datepicker-orient-right"),n+=m-b):this.picker.addClass("datepicker-orient-left");var p,q=this.o.orientation.y;if("auto"===q&&(p=-g+o-c,q=0>p?"bottom":"top"),this.picker.addClass("datepicker-orient-"+q),"top"===q?o-=c+parseInt(this.picker.css("padding-top")):o+=l,this.o.rtl){var r=f-(n+m);this.picker.css({top:o,right:r,zIndex:j})}else this.picker.css({top:o,left:n,zIndex:j});return this},_allow_update:!0,update:function(){if(!this._allow_update)return this;var b=this.dates.copy(),c=[],d=!1;return arguments.length?(a.each(arguments,a.proxy(function(a,b){b instanceof Date&&(b=this._local_to_utc(b)),c.push(b)},this)),d=!0):(c=this.isInput?this.element.val():this.element.data("date")||this.inputField.val(),c=c&&this.o.multidate?c.split(this.o.multidateSeparator):[c],delete this.element.data().date),c=a.map(c,a.proxy(function(a){return r.parseDate(a,this.o.format,this.o.language,this.o.assumeNearbyYear)},this)),c=a.grep(c,a.proxy(function(a){return!this.dateWithinRange(a)||!a},this),!0),this.dates.replace(c),this.dates.length?this.viewDate=new Date(this.dates.get(-1)):this.viewDate<this.o.startDate?this.viewDate=new Date(this.o.startDate):this.viewDate>this.o.endDate?this.viewDate=new Date(this.o.endDate):this.viewDate=this.o.defaultViewDate,d?this.setValue():c.length&&String(b)!==String(this.dates)&&this._trigger("changeDate"),!this.dates.length&&b.length&&this._trigger("clearDate"),this.fill(),this.element.change(),this},fillDow:function(){var b=this.o.weekStart,c="<tr>";for(this.o.calendarWeeks&&(this.picker.find(".datepicker-days .datepicker-switch").attr("colspan",function(a,b){return parseInt(b)+1}),c+='<th class="cw">&#160;</th>');b<this.o.weekStart+7;)c+='<th class="dow',a.inArray(b,this.o.daysOfWeekDisabled)>-1&&(c+=" disabled"),c+='">'+q[this.o.language].daysMin[b++%7]+"</th>";c+="</tr>",this.picker.find(".datepicker-days thead").append(c)},fillMonths:function(){for(var a=this._utc_to_local(this.viewDate),b="",c=0;12>c;){var d=a&&a.getMonth()===c?" focused":"";b+='<span class="month'+d+'">'+q[this.o.language].monthsShort[c++]+"</span>"}this.picker.find(".datepicker-months td").html(b)},setRange:function(b){b&&b.length?this.range=a.map(b,function(a){return a.valueOf()}):delete this.range,this.fill()},getClassNames:function(b){var c=[],d=this.viewDate.getUTCFullYear(),e=this.viewDate.getUTCMonth(),f=new Date;return b.getUTCFullYear()<d||b.getUTCFullYear()===d&&b.getUTCMonth()<e?c.push("old"):(b.getUTCFullYear()>d||b.getUTCFullYear()===d&&b.getUTCMonth()>e)&&c.push("new"),this.focusDate&&b.valueOf()===this.focusDate.valueOf()&&c.push("focused"),this.o.todayHighlight&&b.getUTCFullYear()===f.getFullYear()&&b.getUTCMonth()===f.getMonth()&&b.getUTCDate()===f.getDate()&&c.push("today"),-1!==this.dates.contains(b)&&c.push("active"),this.dateWithinRange(b)||c.push("disabled"),this.dateIsDisabled(b)&&c.push("disabled","disabled-date"),-1!==a.inArray(b.getUTCDay(),this.o.daysOfWeekHighlighted)&&c.push("highlighted"),this.range&&(b>this.range[0]&&b<this.range[this.range.length-1]&&c.push("range"),-1!==a.inArray(b.valueOf(),this.range)&&c.push("selected"),b.valueOf()===this.range[0]&&c.push("range-start"),b.valueOf()===this.range[this.range.length-1]&&c.push("range-end")),c},_fill_yearsView:function(c,d,e,f,g,h,i,j){var k,l,m,n,o,p,q,r,s,t,u;for(k="",l=this.picker.find(c),m=parseInt(g/e,10)*e,o=parseInt(h/f,10)*f,p=parseInt(i/f,10)*f,n=a.map(this.dates,function(a){return parseInt(a.getUTCFullYear()/f,10)*f}),l.find(".datepicker-switch").text(m+"-"+(m+9*f)),q=m-f,r=-1;11>r;r+=1)s=[d],t=null,-1===r?s.push("old"):10===r&&s.push("new"),-1!==a.inArray(q,n)&&s.push("active"),(o>q||q>p)&&s.push("disabled"),q===this.viewDate.getFullYear()&&s.push("focused"),j!==a.noop&&(u=j(new Date(q,0,1)),u===b?u={}:"boolean"==typeof u?u={enabled:u}:"string"==typeof u&&(u={classes:u}),u.enabled===!1&&s.push("disabled"),u.classes&&(s=s.concat(u.classes.split(/\s+/))),u.tooltip&&(t=u.tooltip)),k+='<span class="'+s.join(" ")+'"'+(t?' title="'+t+'"':"")+">"+q+"</span>",q+=f;l.find("td").html(k)},fill:function(){var d,e,f=new Date(this.viewDate),g=f.getUTCFullYear(),h=f.getUTCMonth(),i=this.o.startDate!==-(1/0)?this.o.startDate.getUTCFullYear():-(1/0),j=this.o.startDate!==-(1/0)?this.o.startDate.getUTCMonth():-(1/0),k=this.o.endDate!==1/0?this.o.endDate.getUTCFullYear():1/0,l=this.o.endDate!==1/0?this.o.endDate.getUTCMonth():1/0,m=q[this.o.language].today||q.en.today||"",n=q[this.o.language].clear||q.en.clear||"",o=q[this.o.language].titleFormat||q.en.titleFormat;if(!isNaN(g)&&!isNaN(h)){this.picker.find(".datepicker-days .datepicker-switch").text(r.formatDate(f,o,this.o.language)),this.picker.find("tfoot .today").text(m).toggle(this.o.todayBtn!==!1),this.picker.find("tfoot .clear").text(n).toggle(this.o.clearBtn!==!1),this.picker.find("thead .datepicker-title").text(this.o.title).toggle(""!==this.o.title),this.updateNavArrows(),this.fillMonths();var p=c(g,h-1,28),s=r.getDaysInMonth(p.getUTCFullYear(),p.getUTCMonth());p.setUTCDate(s),p.setUTCDate(s-(p.getUTCDay()-this.o.weekStart+7)%7);var t=new Date(p);p.getUTCFullYear()<100&&t.setUTCFullYear(p.getUTCFullYear()),t.setUTCDate(t.getUTCDate()+42),t=t.valueOf();for(var u,v=[];p.valueOf()<t;){if(p.getUTCDay()===this.o.weekStart&&(v.push("<tr>"),this.o.calendarWeeks)){var w=new Date(+p+(this.o.weekStart-p.getUTCDay()-7)%7*864e5),x=new Date(Number(w)+(11-w.getUTCDay())%7*864e5),y=new Date(Number(y=c(x.getUTCFullYear(),0,1))+(11-y.getUTCDay())%7*864e5),z=(x-y)/864e5/7+1;v.push('<td class="cw">'+z+"</td>")}u=this.getClassNames(p),u.push("day"),this.o.beforeShowDay!==a.noop&&(e=this.o.beforeShowDay(this._utc_to_local(p)),e===b?e={}:"boolean"==typeof e?e={enabled:e}:"string"==typeof e&&(e={classes:e}),e.enabled===!1&&u.push("disabled"),e.classes&&(u=u.concat(e.classes.split(/\s+/))),e.tooltip&&(d=e.tooltip)),u=a.unique(u),v.push('<td class="'+u.join(" ")+'"'+(d?' title="'+d+'"':"")+">"+p.getUTCDate()+"</td>"),d=null,p.getUTCDay()===this.o.weekEnd&&v.push("</tr>"),p.setUTCDate(p.getUTCDate()+1)}this.picker.find(".datepicker-days tbody").empty().append(v.join(""));var A=q[this.o.language].monthsTitle||q.en.monthsTitle||"Months",B=this.picker.find(".datepicker-months").find(".datepicker-switch").text(this.o.maxViewMode<2?A:g).end().find("span").removeClass("active");if(a.each(this.dates,function(a,b){b.getUTCFullYear()===g&&B.eq(b.getUTCMonth()).addClass("active")}),(i>g||g>k)&&B.addClass("disabled"),g===i&&B.slice(0,j).addClass("disabled"),g===k&&B.slice(l+1).addClass("disabled"),this.o.beforeShowMonth!==a.noop){var C=this;a.each(B,function(c,d){var e=new Date(g,c,1),f=C.o.beforeShowMonth(e);f===b?f={}:"boolean"==typeof f?f={enabled:f}:"string"==typeof f&&(f={classes:f}),f.enabled!==!1||a(d).hasClass("disabled")||a(d).addClass("disabled"),f.classes&&a(d).addClass(f.classes),f.tooltip&&a(d).prop("title",f.tooltip)})}this._fill_yearsView(".datepicker-years","year",10,1,g,i,k,this.o.beforeShowYear),this._fill_yearsView(".datepicker-decades","decade",100,10,g,i,k,this.o.beforeShowDecade),this._fill_yearsView(".datepicker-centuries","century",1e3,100,g,i,k,this.o.beforeShowCentury)}},updateNavArrows:function(){if(this._allow_update){var a=new Date(this.viewDate),b=a.getUTCFullYear(),c=a.getUTCMonth();switch(this.viewMode){case 0:this.o.startDate!==-(1/0)&&b<=this.o.startDate.getUTCFullYear()&&c<=this.o.startDate.getUTCMonth()?this.picker.find(".prev").css({visibility:"hidden"}):this.picker.find(".prev").css({visibility:"visible"}),this.o.endDate!==1/0&&b>=this.o.endDate.getUTCFullYear()&&c>=this.o.endDate.getUTCMonth()?this.picker.find(".next").css({visibility:"hidden"}):this.picker.find(".next").css({visibility:"visible"});break;case 1:case 2:case 3:case 4:this.o.startDate!==-(1/0)&&b<=this.o.startDate.getUTCFullYear()||this.o.maxViewMode<2?this.picker.find(".prev").css({visibility:"hidden"}):this.picker.find(".prev").css({visibility:"visible"}),this.o.endDate!==1/0&&b>=this.o.endDate.getUTCFullYear()||this.o.maxViewMode<2?this.picker.find(".next").css({visibility:"hidden"}):this.picker.find(".next").css({visibility:"visible"})}}},click:function(b){b.preventDefault(),b.stopPropagation();var e,f,g,h,i,j,k;e=a(b.target),e.hasClass("datepicker-switch")&&this.showMode(1);var l=e.closest(".prev, .next");l.length>0&&(f=r.modes[this.viewMode].navStep*(l.hasClass("prev")?-1:1),0===this.viewMode?(this.viewDate=this.moveMonth(this.viewDate,f),this._trigger("changeMonth",this.viewDate)):(this.viewDate=this.moveYear(this.viewDate,f),1===this.viewMode&&this._trigger("changeYear",this.viewDate)),this.fill()),e.hasClass("today")&&!e.hasClass("day")&&(this.showMode(-2),this._setDate(d(),"linked"===this.o.todayBtn?null:"view")),e.hasClass("clear")&&this.clearDates(),e.hasClass("disabled")||(e.hasClass("day")&&(g=parseInt(e.text(),10)||1,h=this.viewDate.getUTCFullYear(),i=this.viewDate.getUTCMonth(),e.hasClass("old")&&(0===i?(i=11,h-=1,j=!0,k=!0):(i-=1,j=!0)),e.hasClass("new")&&(11===i?(i=0,h+=1,j=!0,k=!0):(i+=1,j=!0)),this._setDate(c(h,i,g)),k&&this._trigger("changeYear",this.viewDate),j&&this._trigger("changeMonth",this.viewDate)),e.hasClass("month")&&(this.viewDate.setUTCDate(1),g=1,i=e.parent().find("span").index(e),h=this.viewDate.getUTCFullYear(),this.viewDate.setUTCMonth(i),this._trigger("changeMonth",this.viewDate),1===this.o.minViewMode?(this._setDate(c(h,i,g)),this.showMode()):this.showMode(-1),this.fill()),(e.hasClass("year")||e.hasClass("decade")||e.hasClass("century"))&&(this.viewDate.setUTCDate(1),g=1,i=0,h=parseInt(e.text(),10)||0,this.viewDate.setUTCFullYear(h),e.hasClass("year")&&(this._trigger("changeYear",this.viewDate),2===this.o.minViewMode&&this._setDate(c(h,i,g))),e.hasClass("decade")&&(this._trigger("changeDecade",this.viewDate),3===this.o.minViewMode&&this._setDate(c(h,i,g))),e.hasClass("century")&&(this._trigger("changeCentury",this.viewDate),4===this.o.minViewMode&&this._setDate(c(h,i,g))),this.showMode(-1),this.fill())),this.picker.is(":visible")&&this._focused_from&&a(this._focused_from).focus(),delete this._focused_from},_toggle_multidate:function(a){var b=this.dates.contains(a);if(a||this.dates.clear(),-1!==b?(this.o.multidate===!0||this.o.multidate>1||this.o.toggleActive)&&this.dates.remove(b):this.o.multidate===!1?(this.dates.clear(),this.dates.push(a)):this.dates.push(a),"number"==typeof this.o.multidate)for(;this.dates.length>this.o.multidate;)this.dates.remove(0)},_setDate:function(a,b){b&&"date"!==b||this._toggle_multidate(a&&new Date(a)),b&&"view"!==b||(this.viewDate=a&&new Date(a)),this.fill(),this.setValue(),b&&"view"===b||this._trigger("changeDate"),this.inputField&&this.inputField.change(),!this.o.autoclose||b&&"date"!==b||this.hide()},moveDay:function(a,b){var c=new Date(a);return c.setUTCDate(a.getUTCDate()+b),c},moveWeek:function(a,b){return this.moveDay(a,7*b)},moveMonth:function(a,b){if(!g(a))return this.o.defaultViewDate;if(!b)return a;var c,d,e=new Date(a.valueOf()),f=e.getUTCDate(),h=e.getUTCMonth(),i=Math.abs(b);if(b=b>0?1:-1,1===i)d=-1===b?function(){return e.getUTCMonth()===h}:function(){return e.getUTCMonth()!==c},c=h+b,e.setUTCMonth(c),(0>c||c>11)&&(c=(c+12)%12);else{for(var j=0;i>j;j++)e=this.moveMonth(e,b);c=e.getUTCMonth(),e.setUTCDate(f),d=function(){return c!==e.getUTCMonth()}}for(;d();)e.setUTCDate(--f),e.setUTCMonth(c);return e},moveYear:function(a,b){return this.moveMonth(a,12*b)},moveAvailableDate:function(a,b,c){do{if(a=this[c](a,b),!this.dateWithinRange(a))return!1;c="moveDay"}while(this.dateIsDisabled(a));return a},weekOfDateIsDisabled:function(b){return-1!==a.inArray(b.getUTCDay(),this.o.daysOfWeekDisabled)},dateIsDisabled:function(b){return this.weekOfDateIsDisabled(b)||a.grep(this.o.datesDisabled,function(a){return e(b,a)}).length>0},dateWithinRange:function(a){return a>=this.o.startDate&&a<=this.o.endDate},keydown:function(a){if(!this.picker.is(":visible"))return void((40===a.keyCode||27===a.keyCode)&&(this.show(),a.stopPropagation()));var b,c,d=!1,e=this.focusDate||this.viewDate;switch(a.keyCode){case 27:this.focusDate?(this.focusDate=null,this.viewDate=this.dates.get(-1)||this.viewDate,this.fill()):this.hide(),a.preventDefault(),a.stopPropagation();break;case 37:case 38:case 39:case 40:if(!this.o.keyboardNavigation||7===this.o.daysOfWeekDisabled.length)break;b=37===a.keyCode||38===a.keyCode?-1:1,0===this.viewMode?a.ctrlKey?(c=this.moveAvailableDate(e,b,"moveYear"),c&&this._trigger("changeYear",this.viewDate)):a.shiftKey?(c=this.moveAvailableDate(e,b,"moveMonth"),c&&this._trigger("changeMonth",this.viewDate)):37===a.keyCode||39===a.keyCode?c=this.moveAvailableDate(e,b,"moveDay"):this.weekOfDateIsDisabled(e)||(c=this.moveAvailableDate(e,b,"moveWeek")):1===this.viewMode?((38===a.keyCode||40===a.keyCode)&&(b=4*b),c=this.moveAvailableDate(e,b,"moveMonth")):2===this.viewMode&&((38===a.keyCode||40===a.keyCode)&&(b=4*b),c=this.moveAvailableDate(e,b,"moveYear")),c&&(this.focusDate=this.viewDate=c,this.setValue(),this.fill(),a.preventDefault());break;case 13:if(!this.o.forceParse)break;e=this.focusDate||this.dates.get(-1)||this.viewDate,this.o.keyboardNavigation&&(this._toggle_multidate(e),d=!0),this.focusDate=null,this.viewDate=this.dates.get(-1)||this.viewDate,this.setValue(),this.fill(),this.picker.is(":visible")&&(a.preventDefault(),a.stopPropagation(),this.o.autoclose&&this.hide());break;case 9:this.focusDate=null,this.viewDate=this.dates.get(-1)||this.viewDate,this.fill(),this.hide()}d&&(this.dates.length?this._trigger("changeDate"):this._trigger("clearDate"),this.inputField&&this.inputField.change())},showMode:function(a){a&&(this.viewMode=Math.max(this.o.minViewMode,Math.min(this.o.maxViewMode,this.viewMode+a))),this.picker.children("div").hide().filter(".datepicker-"+r.modes[this.viewMode].clsName).show(),this.updateNavArrows()}};var l=function(b,c){a(b).data("datepicker",this),this.element=a(b),this.inputs=a.map(c.inputs,function(a){return a.jquery?a[0]:a}),delete c.inputs,n.call(a(this.inputs),c).on("changeDate",a.proxy(this.dateUpdated,this)),this.pickers=a.map(this.inputs,function(b){return a(b).data("datepicker")}),this.updateDates()};l.prototype={updateDates:function(){this.dates=a.map(this.pickers,function(a){return a.getUTCDate()}),this.updateRanges()},updateRanges:function(){var b=a.map(this.dates,function(a){return a.valueOf()});a.each(this.pickers,function(a,c){c.setRange(b)})},dateUpdated:function(b){if(!this.updating){this.updating=!0;var c=a(b.target).data("datepicker");if("undefined"!=typeof c){var d=c.getUTCDate(),e=a.inArray(b.target,this.inputs),f=e-1,g=e+1,h=this.inputs.length;if(-1!==e){if(a.each(this.pickers,function(a,b){b.getUTCDate()||b.setUTCDate(d)}),d<this.dates[f])for(;f>=0&&d<this.dates[f];)this.pickers[f--].setUTCDate(d);else if(d>this.dates[g])for(;h>g&&d>this.dates[g];)this.pickers[g++].setUTCDate(d);this.updateDates(),delete this.updating}}}},remove:function(){a.map(this.pickers,function(a){a.remove()}),delete this.element.data().datepicker}};var m=a.fn.datepicker,n=function(c){var d=Array.apply(null,arguments);d.shift();var e;if(this.each(function(){var b=a(this),f=b.data("datepicker"),g="object"==typeof c&&c;if(!f){var j=h(this,"date"),m=a.extend({},o,j,g),n=i(m.language),p=a.extend({},o,n,j,g);b.hasClass("input-daterange")||p.inputs?(a.extend(p,{inputs:p.inputs||b.find("input").toArray()}),f=new l(this,p)):f=new k(this,p),b.data("datepicker",f)}"string"==typeof c&&"function"==typeof f[c]&&(e=f[c].apply(f,d))}),e===b||e instanceof k||e instanceof l)return this;if(this.length>1)throw new Error("Using only allowed for the collection of a single element ("+c+" function)");return e};a.fn.datepicker=n;var o=a.fn.datepicker.defaults={assumeNearbyYear:!1,autoclose:!1,beforeShowDay:a.noop,beforeShowMonth:a.noop,beforeShowYear:a.noop,beforeShowDecade:a.noop,beforeShowCentury:a.noop,calendarWeeks:!1,clearBtn:!1,toggleActive:!1,daysOfWeekDisabled:[],daysOfWeekHighlighted:[],datesDisabled:[],endDate:1/0,forceParse:!0,format:"mm/dd/yyyy",keyboardNavigation:!0,language:"en",minViewMode:0,maxViewMode:4,multidate:!1,multidateSeparator:",",orientation:"auto",rtl:!1,startDate:-(1/0),startView:0,todayBtn:!1,todayHighlight:!1,weekStart:0,disableTouchKeyboard:!1,enableOnReadonly:!0,showOnFocus:!0,zIndexOffset:10,container:"body",immediateUpdates:!1,title:"",templates:{leftArrow:"&laquo;",rightArrow:"&raquo;"}},p=a.fn.datepicker.locale_opts=["format","rtl","weekStart"];a.fn.datepicker.Constructor=k;var q=a.fn.datepicker.dates={en:{days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],daysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],daysMin:["Su","Mo","Tu","We","Th","Fr","Sa"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],today:"Today",clear:"Clear",titleFormat:"MM yyyy"}},r={modes:[{clsName:"days",navFnc:"Month",navStep:1},{clsName:"months",navFnc:"FullYear",navStep:1},{clsName:"years",navFnc:"FullYear",navStep:10},{clsName:"decades",navFnc:"FullDecade",navStep:100},{clsName:"centuries",navFnc:"FullCentury",navStep:1e3}],isLeapYear:function(a){return a%4===0&&a%100!==0||a%400===0},getDaysInMonth:function(a,b){return[31,r.isLeapYear(a)?29:28,31,30,31,30,31,31,30,31,30,31][b]},validParts:/dd?|DD?|mm?|MM?|yy(?:yy)?/g,nonpunctuation:/[^ -\/:-@\u5e74\u6708\u65e5\[-`{-~\t\n\r]+/g,parseFormat:function(a){if("function"==typeof a.toValue&&"function"==typeof a.toDisplay)return a;var b=a.replace(this.validParts,"\x00").split("\x00"),c=a.match(this.validParts);if(!b||!b.length||!c||0===c.length)throw new Error("Invalid date format.");return{separators:b,parts:c}},parseDate:function(e,f,g,h){function i(a,b){return b===!0&&(b=10),100>a&&(a+=2e3,a>(new Date).getFullYear()+b&&(a-=100)),a}function j(){var a=this.slice(0,s[n].length),b=s[n].slice(0,a.length);return a.toLowerCase()===b.toLowerCase()}if(!e)return b;if(e instanceof Date)return e;if("string"==typeof f&&(f=r.parseFormat(f)),f.toValue)return f.toValue(e,f,g);var l,m,n,o,p=/([\-+]\d+)([dmwy])/,s=e.match(/([\-+]\d+)([dmwy])/g),t={d:"moveDay",m:"moveMonth",w:"moveWeek",y:"moveYear"},u={yesterday:"-1d",today:"+0d",tomorrow:"+1d"};if(/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(e)){for(e=new Date,n=0;n<s.length;n++)l=p.exec(s[n]),m=parseInt(l[1]),o=t[l[2]],e=k.prototype[o](e,m);return c(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate())}if("undefined"!=typeof u[e]&&(e=u[e],s=e.match(/([\-+]\d+)([dmwy])/g),/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(e))){for(e=new Date,n=0;n<s.length;n++)l=p.exec(s[n]),m=parseInt(l[1]),o=t[l[2]],e=k.prototype[o](e,m);return c(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate())}s=e&&e.match(this.nonpunctuation)||[],e=new Date;var v,w,x={},y=["yyyy","yy","M","MM","m","mm","d","dd"],z={yyyy:function(a,b){return a.setUTCFullYear(h?i(b,h):b)},yy:function(a,b){return a.setUTCFullYear(h?i(b,h):b)},m:function(a,b){if(isNaN(a))return a;for(b-=1;0>b;)b+=12;for(b%=12,a.setUTCMonth(b);a.getUTCMonth()!==b;)a.setUTCDate(a.getUTCDate()-1);return a},d:function(a,b){return a.setUTCDate(b)}};z.M=z.MM=z.mm=z.m,z.dd=z.d,e=d();var A=f.parts.slice();if(s.length!==A.length&&(A=a(A).filter(function(b,c){return-1!==a.inArray(c,y)}).toArray()),s.length===A.length){var B;for(n=0,B=A.length;B>n;n++){if(v=parseInt(s[n],10),l=A[n],isNaN(v))switch(l){case"MM":w=a(q[g].months).filter(j),v=a.inArray(w[0],q[g].months)+1;break;case"M":w=a(q[g].monthsShort).filter(j),v=a.inArray(w[0],q[g].monthsShort)+1}x[l]=v}var C,D;for(n=0;n<y.length;n++)D=y[n],D in x&&!isNaN(x[D])&&(C=new Date(e),z[D](C,x[D]),isNaN(C)||(e=C))}return e},formatDate:function(b,c,d){if(!b)return"";if("string"==typeof c&&(c=r.parseFormat(c)),c.toDisplay)return c.toDisplay(b,c,d);
var e={d:b.getUTCDate(),D:q[d].daysShort[b.getUTCDay()],DD:q[d].days[b.getUTCDay()],m:b.getUTCMonth()+1,M:q[d].monthsShort[b.getUTCMonth()],MM:q[d].months[b.getUTCMonth()],yy:b.getUTCFullYear().toString().substring(2),yyyy:b.getUTCFullYear()};e.dd=(e.d<10?"0":"")+e.d,e.mm=(e.m<10?"0":"")+e.m,b=[];for(var f=a.extend([],c.separators),g=0,h=c.parts.length;h>=g;g++)f.length&&b.push(f.shift()),b.push(e[c.parts[g]]);return b.join("")},headTemplate:'<thead><tr><th colspan="7" class="datepicker-title"></th></tr><tr><th class="prev">&laquo;</th><th colspan="5" class="datepicker-switch"></th><th class="next">&raquo;</th></tr></thead>',contTemplate:'<tbody><tr><td colspan="7"></td></tr></tbody>',footTemplate:'<tfoot><tr><th colspan="7" class="today"></th></tr><tr><th colspan="7" class="clear"></th></tr></tfoot>'};r.template='<div class="datepicker"><div class="datepicker-days"><table class="table-condensed">'+r.headTemplate+"<tbody></tbody>"+r.footTemplate+'</table></div><div class="datepicker-months"><table class="table-condensed">'+r.headTemplate+r.contTemplate+r.footTemplate+'</table></div><div class="datepicker-years"><table class="table-condensed">'+r.headTemplate+r.contTemplate+r.footTemplate+'</table></div><div class="datepicker-decades"><table class="table-condensed">'+r.headTemplate+r.contTemplate+r.footTemplate+'</table></div><div class="datepicker-centuries"><table class="table-condensed">'+r.headTemplate+r.contTemplate+r.footTemplate+"</table></div></div>",a.fn.datepicker.DPGlobal=r,a.fn.datepicker.noConflict=function(){return a.fn.datepicker=m,this},a.fn.datepicker.version="1.6.1",a(document).on("focus.datepicker.data-api click.datepicker.data-api",'[data-provide="datepicker"]',function(b){var c=a(this);c.data("datepicker")||(b.preventDefault(),n.call(c,"show"))}),a(function(){n.call(a('[data-provide="datepicker-inline"]'))})});
/*
 * AngularJS Toaster
 * Version: 2.0.0
 *
 * Copyright 2013-2016 Jiri Kavulak.
 * All Rights Reserved.
 * Use, reproduction, distribution, and modification of this code is subject to the terms and
 * conditions of the MIT license, available at http://www.opensource.org/licenses/mit-license.php
 *
 * Author: Jiri Kavulak
 * Related to project of John Papa, Hans Fjällemark and Nguyễn Thiện Hùng (thienhung1989)
 */
!function (t, e) { "use strict"; angular.module("toaster", []).constant("toasterConfig", { limit: 0, "tap-to-dismiss": !0, "close-button": !1, "close-html": '<button class="toast-close-button" type="button">&times;</button>', "newest-on-top": !0, "time-out": 5e3, "icon-classes": { error: "toast-error", info: "toast-info", wait: "toast-wait", success: "toast-success", warning: "toast-warning" }, "body-output-type": "", "body-template": "toasterBodyTmpl.html", "icon-class": "toast-info", "position-class": "toast-top-right", "title-class": "toast-title", "message-class": "toast-message", "prevent-duplicates": !1, "mouseover-timer-stop": !0 }).service("toaster", ["$rootScope", "toasterConfig", function (t, e) { function o(t) { return function (e, o, s, i, a, n, r, c, l) { return angular.isString(e) ? this.pop(t, e, o, s, i, a, n, r, c, l) : this.pop(angular.extend(e, { type: t })) } } var s = function () { var t = {}; return t.newGuid = function () { return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (t) { var e = 16 * Math.random() | 0, o = "x" == t ? e : 3 & e | 8; return o.toString(16) }) }, t }(); this.pop = function (e, o, i, a, n, r, c, l, u, d) { if (angular.isObject(e)) { var m = e; this.toast = { type: m.type, title: m.title, body: m.body, timeout: m.timeout, bodyOutputType: m.bodyOutputType, clickHandler: m.clickHandler, showCloseButton: m.showCloseButton, closeHtml: m.closeHtml, toastId: m.toastId, onShowCallback: m.onShowCallback, onHideCallback: m.onHideCallback, directiveData: m.directiveData }, c = m.toasterId } else this.toast = { type: e, title: o, body: i, timeout: a, bodyOutputType: n, clickHandler: r, showCloseButton: l, toastId: u, onHideCallback: d }; return this.toast.toastId && this.toast.toastId.length || (this.toast.toastId = s.newGuid()), t.$emit("toaster-newToast", c, this.toast.toastId), { toasterId: c, toastId: this.toast.toastId } }, this.clear = function (e, o) { angular.isObject(e) ? t.$emit("toaster-clearToasts", e.toasterId, e.toastId) : t.$emit("toaster-clearToasts", e, o) }; for (var i in e["icon-classes"]) this[i] = o(i) }]).factory("toasterEventRegistry", ["$rootScope", function (t) { var e, o = null, s = null, i = [], a = []; return e = { setup: function () { o || (o = t.$on("toaster-newToast", function (t, e, o) { for (var s = 0, a = i.length; a > s; s++) i[s](t, e, o) })), s || (s = t.$on("toaster-clearToasts", function (t, e, o) { for (var s = 0, i = a.length; i > s; s++) a[s](t, e, o) })) }, subscribeToNewToastEvent: function (t) { i.push(t) }, subscribeToClearToastsEvent: function (t) { a.push(t) }, unsubscribeToNewToastEvent: function (t) { var e = i.indexOf(t); e >= 0 && i.splice(e, 1), 0 === i.length && (o(), o = null) }, unsubscribeToClearToastsEvent: function (t) { var e = a.indexOf(t); e >= 0 && a.splice(e, 1), 0 === a.length && (s(), s = null) } }, { setup: e.setup, subscribeToNewToastEvent: e.subscribeToNewToastEvent, subscribeToClearToastsEvent: e.subscribeToClearToastsEvent, unsubscribeToNewToastEvent: e.unsubscribeToNewToastEvent, unsubscribeToClearToastsEvent: e.unsubscribeToClearToastsEvent } }]).directive("directiveTemplate", ["$compile", "$injector", function (t, e) { return { restrict: "A", scope: { directiveName: "@directiveName", directiveData: "@directiveData" }, replace: !0, link: function (o, s, i) { o.$watch("directiveName", function (a) { if (angular.isUndefined(a) || a.length <= 0) throw new Error("A valid directive name must be provided via the toast body argument when using bodyOutputType: directive"); var n; try { n = e.get(i.$normalize(a) + "Directive") } catch (r) { throw new Error(a + " could not be found. The name should appear as it exists in the markup, not camelCased as it would appear in the directive declaration, e.g. directive-name not directiveName.") } var c = n[0]; if (c.scope !== !0 && c.scope) throw new Error("Cannot use a directive with an isolated scope. The scope must be either true or falsy (e.g. false/null/undefined). Occurred for directive " + a + "."); if (c.restrict.indexOf("A") < 0) throw new Error('Directives must be usable as attributes. Add "A" to the restrict option (or remove the option entirely). Occurred for directive ' + a + "."); o.directiveData && (o.directiveData = angular.fromJson(o.directiveData)); var l = t("<div " + a + "></div>")(o); s.append(l) }) } } }]).directive("toasterContainer", ["$parse", "$rootScope", "$interval", "$sce", "toasterConfig", "toaster", "toasterEventRegistry", function (t, e, o, s, i, a, n) { return { replace: !0, restrict: "EA", scope: !0, link: function (e, r, c) { function l(t, s) { t.timeoutPromise = o(function () { e.removeToast(t.toastId) }, s, 1) } function u(o, i) { if (o.type = v["icon-classes"][o.type], o.type || (o.type = v["icon-class"]), v["prevent-duplicates"] === !0 && e.toasters.length) { if (e.toasters[e.toasters.length - 1].body === o.body) return; var a, n, r = !1; for (a = 0, n = e.toasters.length; n > a; a++) if (e.toasters[a].toastId === i) { r = !0; break } if (r) return } var c = v["close-button"]; if ("boolean" == typeof o.showCloseButton); else if ("boolean" == typeof c) o.showCloseButton = c; else if ("object" == typeof c) { var l = c[o.type]; "undefined" != typeof l && null !== l && (o.showCloseButton = l) } else o.showCloseButton = !1; switch (o.showCloseButton && (o.closeHtml = s.trustAsHtml(o.closeHtml || e.config.closeHtml)), o.bodyOutputType = o.bodyOutputType || v["body-output-type"], o.bodyOutputType) { case "trustedHtml": o.html = s.trustAsHtml(o.body); break; case "template": o.bodyTemplate = o.body || v["body-template"]; break; case "templateWithData": var u = t(o.body || v["body-template"]), d = u(e); o.bodyTemplate = d.template, o.data = d.data; break; case "directive": o.html = o.body } e.configureTimer(o), v["newest-on-top"] === !0 ? (e.toasters.unshift(o), v.limit > 0 && e.toasters.length > v.limit && e.toasters.pop()) : (e.toasters.push(o), v.limit > 0 && e.toasters.length > v.limit && e.toasters.shift()), angular.isFunction(o.onShowCallback) && o.onShowCallback() } function d(t) { var s = e.toasters[t]; s.timeoutPromise && o.cancel(s.timeoutPromise), e.toasters.splice(t, 1), angular.isFunction(s.onHideCallback) && s.onHideCallback() } function m(t) { for (var o = e.toasters.length - 1; o >= 0; o--) p(t) ? d(o) : e.toasters[o].toastId == t && d(o) } function p(t) { return angular.isUndefined(t) || null === t } var v; v = angular.extend({}, i, e.$eval(c.toasterOptions)), e.config = { toasterId: v["toaster-id"], position: v["position-class"], title: v["title-class"], message: v["message-class"], tap: v["tap-to-dismiss"], closeButton: v["close-button"], closeHtml: v["close-html"], animation: v["animation-class"], mouseoverTimer: v["mouseover-timer-stop"] }, e.$on("$destroy", function () { n.unsubscribeToNewToastEvent(e._onNewToast), n.unsubscribeToClearToastsEvent(e._onClearToasts) }), e.configureTimer = function (t) { var e = angular.isNumber(t.timeout) ? t.timeout : v["time-out"]; "object" == typeof e && (e = e[t.type]), e > 0 && l(t, e) }, e.removeToast = function (t) { var o, s; for (o = 0, s = e.toasters.length; s > o; o++) if (e.toasters[o].toastId === t) { d(o); break } }, e.toasters = [], e._onNewToast = function (t, o, s) { (p(e.config.toasterId) && p(o) || !p(e.config.toasterId) && !p(o) && e.config.toasterId == o) && u(a.toast, s) }, e._onClearToasts = function (t, o, s) { ("*" == o || p(e.config.toasterId) && p(o) || !p(e.config.toasterId) && !p(o) && e.config.toasterId == o) && m(s) }, n.setup(), n.subscribeToNewToastEvent(e._onNewToast), n.subscribeToClearToastsEvent(e._onClearToasts) }, controller: ["$scope", "$element", "$attrs", function (t, e, s) { t.stopTimer = function (e) { t.config.mouseoverTimer === !0 && e.timeoutPromise && (o.cancel(e.timeoutPromise), e.timeoutPromise = null) }, t.restartTimer = function (e) { t.config.mouseoverTimer === !0 ? e.timeoutPromise || t.configureTimer(e) : null === e.timeoutPromise && t.removeToast(e.toastId) }, t.click = function (e, o) { if (t.config.tap === !0 || e.showCloseButton === !0 && o === !0) { var s = !0; e.clickHandler && (angular.isFunction(e.clickHandler) ? s = e.clickHandler(e, o) : angular.isFunction(t.$parent.$eval(e.clickHandler)) ? s = t.$parent.$eval(e.clickHandler)(e, o) : console.log("TOAST-NOTE: Your click handler is not inside a parent scope of toaster-container.")), s && t.removeToast(e.toastId) } } }], template: '<div id="toast-container" ng-class="[config.position, config.animation]"><div ng-repeat="toaster in toasters" class="toast" ng-class="toaster.type" ng-click="click(toaster)" ng-mouseover="stopTimer(toaster)" ng-mouseout="restartTimer(toaster)"><div ng-if="toaster.showCloseButton" ng-click="click(toaster, true)" ng-bind-html="toaster.closeHtml"></div><div ng-class="config.title">{{toaster.title}}</div><div ng-class="config.message" ng-switch on="toaster.bodyOutputType"><div ng-switch-when="trustedHtml" ng-bind-html="toaster.html"></div><div ng-switch-when="template"><div ng-include="toaster.bodyTemplate"></div></div><div ng-switch-when="templateWithData"><div ng-include="toaster.bodyTemplate"></div></div><div ng-switch-when="directive"><div directive-template directive-name="{{toaster.html}}" directive-data="{{toaster.directiveData}}"></div></div><div ng-switch-default >{{toaster.body}}</div></div></div></div>' } }]) }(window, document);
/* ========================================================================
 * Bootstrap: tooltip.js v3.3.6
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
    'use strict';

    // TOOLTIP PUBLIC CLASS DEFINITION
    // ===============================

    var Tooltip = function (element, options) {
        this.type = null
        this.options = null
        this.enabled = null
        this.timeout = null
        this.hoverState = null
        this.$element = null
        this.inState = null

        this.init('tooltip', element, options)
    }

    Tooltip.VERSION = '3.3.6'

    Tooltip.TRANSITION_DURATION = 150

    Tooltip.DEFAULTS = {
        animation: true,
        placement: 'top',
        selector: false,
        template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
        trigger: 'hover focus',
        title: '',
        delay: 0,
        html: false,
        container: false,
        viewport: {
            selector: 'body',
            padding: 0
        }
    }

    Tooltip.prototype.init = function (type, element, options) {
        this.enabled = true
        this.type = type
        this.$element = $(element)
        this.options = this.getOptions(options)
        this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))
        this.inState = { click: false, hover: false, focus: false }

        if (this.$element[0] instanceof document.constructor && !this.options.selector) {
            throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
        }

        var triggers = this.options.trigger.split(' ')

        for (var i = triggers.length; i--;) {
            var trigger = triggers[i]

            if (trigger == 'click') {
                this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
            } else if (trigger != 'manual') {
                var eventIn = trigger == 'hover' ? 'mouseenter' : 'focusin'
                var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

                this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
                this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
            }
        }

        this.options.selector ?
          (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
          this.fixTitle()
    }

    Tooltip.prototype.getDefaults = function () {
        return Tooltip.DEFAULTS
    }

    Tooltip.prototype.getOptions = function (options) {
        options = $.extend({}, this.getDefaults(), this.$element.data(), options)

        if (options.delay && typeof options.delay == 'number') {
            options.delay = {
                show: options.delay,
                hide: options.delay
            }
        }

        return options
    }

    Tooltip.prototype.getDelegateOptions = function () {
        var options = {}
        var defaults = this.getDefaults()

        this._options && $.each(this._options, function (key, value) {
            if (defaults[key] != value) options[key] = value
        })

        return options
    }

    Tooltip.prototype.enter = function (obj) {
        var self = obj instanceof this.constructor ?
            obj : $(obj.currentTarget).data('bs.' + this.type)

        if (!self) {
            self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
            $(obj.currentTarget).data('bs.' + this.type, self)
        }

        if (obj instanceof $.Event) {
            self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true
        }

        if (self.tip().hasClass('in') || self.hoverState == 'in') {
            self.hoverState = 'in'
            return
        }

        clearTimeout(self.timeout)

        self.hoverState = 'in'

        if (!self.options.delay || !self.options.delay.show) return self.show()

        self.timeout = setTimeout(function () {
            if (self.hoverState == 'in') self.show()
        }, self.options.delay.show)
    }

    Tooltip.prototype.isInStateTrue = function () {
        for (var key in this.inState) {
            if (this.inState[key]) return true
        }

        return false
    }

    Tooltip.prototype.leave = function (obj) {
        var self = obj instanceof this.constructor ?
            obj : $(obj.currentTarget).data('bs.' + this.type)

        if (!self) {
            self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
            $(obj.currentTarget).data('bs.' + this.type, self)
        }

        if (obj instanceof $.Event) {
            self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false
        }

        if (self.isInStateTrue()) return

        clearTimeout(self.timeout)

        self.hoverState = 'out'

        if (!self.options.delay || !self.options.delay.hide) return self.hide()

        self.timeout = setTimeout(function () {
            if (self.hoverState == 'out') self.hide()
        }, self.options.delay.hide)
    }

    Tooltip.prototype.show = function () {
        var e = $.Event('show.bs.' + this.type)

        if (this.hasContent() && this.enabled) {
            this.$element.trigger(e)

            var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
            if (e.isDefaultPrevented() || !inDom) return
            var that = this

            var $tip = this.tip()

            var tipId = this.getUID(this.type)

            this.setContent()
            $tip.attr('id', tipId)
            this.$element.attr('aria-describedby', tipId)

            if (this.options.animation) $tip.addClass('fade')

            var placement = typeof this.options.placement == 'function' ?
              this.options.placement.call(this, $tip[0], this.$element[0]) :
              this.options.placement

            var autoToken = /\s?auto?\s?/i
            var autoPlace = autoToken.test(placement)
            if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

            $tip
              .detach()
              .css({ top: 0, left: 0, display: 'block' })
              .addClass(placement)
              .data('bs.' + this.type, this)

            this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)
            this.$element.trigger('inserted.bs.' + this.type)

            var pos = this.getPosition()
            var actualWidth = $tip[0].offsetWidth
            var actualHeight = $tip[0].offsetHeight

            if (autoPlace) {
                var orgPlacement = placement
                var viewportDim = this.getPosition(this.$viewport)

                placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top' :
                            placement == 'top' && pos.top - actualHeight < viewportDim.top ? 'bottom' :
                            placement == 'right' && pos.right + actualWidth > viewportDim.width ? 'left' :
                            placement == 'left' && pos.left - actualWidth < viewportDim.left ? 'right' :
                            placement

                $tip
                  .removeClass(orgPlacement)
                  .addClass(placement)
            }

            var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

            this.applyPlacement(calculatedOffset, placement)

            var complete = function () {
                var prevHoverState = that.hoverState
                that.$element.trigger('shown.bs.' + that.type)
                that.hoverState = null

                if (prevHoverState == 'out') that.leave(that)
            }

            $.support.transition && this.$tip.hasClass('fade') ?
              $tip
                .one('bsTransitionEnd', complete)
                .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
              complete()
        }
    }

    Tooltip.prototype.applyPlacement = function (offset, placement) {
        var $tip = this.tip()
        var width = $tip[0].offsetWidth
        var height = $tip[0].offsetHeight

        // manually read margins because getBoundingClientRect includes difference
        var marginTop = parseInt($tip.css('margin-top'), 10)
        var marginLeft = parseInt($tip.css('margin-left'), 10)

        // we must check for NaN for ie 8/9
        if (isNaN(marginTop)) marginTop = 0
        if (isNaN(marginLeft)) marginLeft = 0

        offset.top += marginTop
        offset.left += marginLeft

        // $.fn.offset doesn't round pixel values
        // so we use setOffset directly with our own function B-0
        $.offset.setOffset($tip[0], $.extend({
            using: function (props) {
                $tip.css({
                    top: Math.round(props.top),
                    left: Math.round(props.left)
                })
            }
        }, offset), 0)

        $tip.addClass('in')

        // check to see if placing tip in new offset caused the tip to resize itself
        var actualWidth = $tip[0].offsetWidth
        var actualHeight = $tip[0].offsetHeight

        if (placement == 'top' && actualHeight != height) {
            offset.top = offset.top + height - actualHeight
        }

        var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

        if (delta.left) offset.left += delta.left
        else offset.top += delta.top

        var isVertical = /top|bottom/.test(placement)
        var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
        var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'

        $tip.offset(offset)
        this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
    }

    Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
        this.arrow()
          .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')
          .css(isVertical ? 'top' : 'left', '')
    }

    Tooltip.prototype.setContent = function () {
        var $tip = this.tip()
        var title = this.getTitle()

        $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
        $tip.removeClass('fade in top bottom left right')
    }

    Tooltip.prototype.hide = function (callback) {
        var that = this
        var $tip = $(this.$tip)
        var e = $.Event('hide.bs.' + this.type)

        function complete() {
            if (that.hoverState != 'in') $tip.detach()
            if (that.$element) { // TODO: Check whether guarding this code with this `if` is really necessary.
                that.$element
                  .removeAttr('aria-describedby')
                  .trigger('hidden.bs.' + that.type)
            }
            callback && callback()
        }

        this.$element.trigger(e)

        if (e.isDefaultPrevented()) return

        $tip.removeClass('in')

        $.support.transition && $tip.hasClass('fade') ?
          $tip
            .one('bsTransitionEnd', complete)
            .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
          complete()

        this.hoverState = null

        return this
    }

    Tooltip.prototype.fixTitle = function () {
        var $e = this.$element
        if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
            $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
        }
    }

    Tooltip.prototype.hasContent = function () {
        return this.getTitle()
    }

    Tooltip.prototype.getPosition = function ($element) {
        $element = $element || this.$element

        var el = $element[0]
        var isBody = el.tagName == 'BODY'

        var elRect = el.getBoundingClientRect()
        if (elRect.width == null) {
            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
            elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })
        }
        var elOffset = isBody ? { top: 0, left: 0 } : $element.offset()
        var scroll = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }
        var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null

        return $.extend({}, elRect, scroll, outerDims, elOffset)
    }

    Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
        return placement == 'bottom' ? { top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2 } :
               placement == 'top' ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :
               placement == 'left' ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
            /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }

    }

    Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
        var delta = { top: 0, left: 0 }
        if (!this.$viewport) return delta

        var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
        var viewportDimensions = this.getPosition(this.$viewport)

        if (/right|left/.test(placement)) {
            var topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll
            var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
            if (topEdgeOffset < viewportDimensions.top) { // top overflow
                delta.top = viewportDimensions.top - topEdgeOffset
            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
                delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
            }
        } else {
            var leftEdgeOffset = pos.left - viewportPadding
            var rightEdgeOffset = pos.left + viewportPadding + actualWidth
            if (leftEdgeOffset < viewportDimensions.left) { // left overflow
                delta.left = viewportDimensions.left - leftEdgeOffset
            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow
                delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
            }
        }

        return delta
    }

    Tooltip.prototype.getTitle = function () {
        var title
        var $e = this.$element
        var o = this.options

        title = $e.attr('data-original-title')
          || (typeof o.title == 'function' ? o.title.call($e[0]) : o.title)

        return title
    }

    Tooltip.prototype.getUID = function (prefix) {
        do prefix += ~~(Math.random() * 1000000)
        while (document.getElementById(prefix))
        return prefix
    }

    Tooltip.prototype.tip = function () {
        if (!this.$tip) {
            this.$tip = $(this.options.template)
            if (this.$tip.length != 1) {
                throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')
            }
        }
        return this.$tip
    }

    Tooltip.prototype.arrow = function () {
        return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
    }

    Tooltip.prototype.enable = function () {
        this.enabled = true
    }

    Tooltip.prototype.disable = function () {
        this.enabled = false
    }

    Tooltip.prototype.toggleEnabled = function () {
        this.enabled = !this.enabled
    }

    Tooltip.prototype.toggle = function (e) {
        var self = this
        if (e) {
            self = $(e.currentTarget).data('bs.' + this.type)
            if (!self) {
                self = new this.constructor(e.currentTarget, this.getDelegateOptions())
                $(e.currentTarget).data('bs.' + this.type, self)
            }
        }

        if (e) {
            self.inState.click = !self.inState.click
            if (self.isInStateTrue()) self.enter(self)
            else self.leave(self)
        } else {
            self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
        }
    }

    Tooltip.prototype.destroy = function () {
        var that = this
        clearTimeout(this.timeout)
        this.hide(function () {
            that.$element.off('.' + that.type).removeData('bs.' + that.type)
            if (that.$tip) {
                that.$tip.detach()
            }
            that.$tip = null
            that.$arrow = null
            that.$viewport = null
            that.$element = null
        })
    }


    // TOOLTIP PLUGIN DEFINITION
    // =========================

    function Plugin(option) {
        return this.each(function () {
            var $this = $(this)
            var data = $this.data('bs.tooltip')
            var options = typeof option == 'object' && option

            if (!data && /destroy|hide/.test(option)) return
            if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
            if (typeof option == 'string') data[option]()
        })
    }

    var old = $.fn.tooltip

    $.fn.tooltip = Plugin
    $.fn.tooltip.Constructor = Tooltip


    // TOOLTIP NO CONFLICT
    // ===================

    $.fn.tooltip.noConflict = function () {
        $.fn.tooltip = old
        return this
    }

}(jQuery);

/*! ng-csv 10-10-2015 */
!function(a){angular.module("ngCsv.config",[]).value("ngCsv.config",{debug:!0}).config(["$compileProvider",function(a){angular.isDefined(a.urlSanitizationWhitelist)?a.urlSanitizationWhitelist(/^\s*(https?|ftp|mailto|file|data):/):a.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|file|data):/)}]),angular.module("ngCsv.directives",["ngCsv.services"]),angular.module("ngCsv.services",[]),angular.module("ngCsv",["ngCsv.config","ngCsv.services","ngCsv.directives","ngSanitize"]),"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports="ngCsv"),angular.module("ngCsv.services").service("CSV",["$q",function(a){var b="\r\n",c="﻿",d={"\\t":"	","\\b":"\b","\\v":"","\\f":"\f","\\r":"\r"};this.stringifyField=function(a,b){return"locale"===b.decimalSep&&this.isFloat(a)?a.toLocaleString():"."!==b.decimalSep&&this.isFloat(a)?a.toString().replace(".",b.decimalSep):"string"==typeof a?(a=a.replace(/"/g,'""'),(b.quoteStrings||a.indexOf(",")>-1||a.indexOf("\n")>-1||a.indexOf("\r")>-1)&&(a=b.txtDelim+a+b.txtDelim),a):"boolean"==typeof a?a?"TRUE":"FALSE":a},this.isFloat=function(a){return+a===a&&(!isFinite(a)||Boolean(a%1))},this.stringify=function(d,e){var f=a.defer(),g=this,h="",i="",j=a.when(d).then(function(a){if(angular.isDefined(e.header)&&e.header){var d,j;d=[],angular.forEach(e.header,function(a){this.push(g.stringifyField(a,e))},d),j=d.join(e.fieldSep?e.fieldSep:","),i+=j+b}var k=[];if(angular.isArray(a)?k=a:angular.isFunction(a)&&(k=a()),angular.isDefined(e.label)&&e.label&&"boolean"==typeof e.label){var l,m;l=[],angular.forEach(k[0],function(a,b){this.push(g.stringifyField(b,e))},l),m=l.join(e.fieldSep?e.fieldSep:","),i+=m+b}angular.forEach(k,function(a,c){var d,f,h=angular.copy(k[c]);f=[];var j=e.columnOrder?e.columnOrder:h;angular.forEach(j,function(a){var b=e.columnOrder?h[a]:a;this.push(g.stringifyField(b,e))},f),d=f.join(e.fieldSep?e.fieldSep:","),i+=c<k.length?d+b:d}),e.addByteOrderMarker&&(h+=c),h+=i,f.resolve(h)});return"function"==typeof j["catch"]&&j["catch"](function(a){f.reject(a)}),f.promise},this.isSpecialChar=function(a){return void 0!==d[a]},this.getSpecialChar=function(a){return d[a]}}]),angular.module("ngCsv.directives").directive("ngCsv",["$parse","$q","CSV","$document","$timeout",function(b,c,d,e,f){return{restrict:"AC",scope:{data:"&ngCsv",filename:"@filename",header:"&csvHeader",columnOrder:"&csvColumnOrder",txtDelim:"@textDelimiter",decimalSep:"@decimalSeparator",quoteStrings:"@quoteStrings",fieldSep:"@fieldSeparator",lazyLoad:"@lazyLoad",addByteOrderMarker:"@addBom",ngClick:"&",charset:"@charset",label:"&csvLabel"},controller:["$scope","$element","$attrs","$transclude",function(a,b,e){function f(){var b={txtDelim:a.txtDelim?a.txtDelim:'"',decimalSep:a.decimalSep?a.decimalSep:".",quoteStrings:a.quoteStrings,addByteOrderMarker:a.addByteOrderMarker};return angular.isDefined(e.csvHeader)&&(b.header=a.$eval(a.header)),angular.isDefined(e.csvColumnOrder)&&(b.columnOrder=a.$eval(a.columnOrder)),angular.isDefined(e.csvLabel)&&(b.label=a.$eval(a.label)),b.fieldSep=a.fieldSep?a.fieldSep:",",b.fieldSep=d.isSpecialChar(b.fieldSep)?d.getSpecialChar(b.fieldSep):b.fieldSep,b}a.csv="",angular.isDefined(a.lazyLoad)&&"true"==a.lazyLoad||angular.isArray(a.data)&&a.$watch("data",function(){a.buildCSV()},!0),a.getFilename=function(){return a.filename||"download.csv"},a.buildCSV=function(){var g=c.defer();return b.addClass(e.ngCsvLoadingClass||"ng-csv-loading"),d.stringify(a.data(),f()).then(function(c){a.csv=c,b.removeClass(e.ngCsvLoadingClass||"ng-csv-loading"),g.resolve(c)}),a.$apply(),g.promise}}],link:function(b,c){function d(){var c=b.charset||"utf-8",d=new Blob([b.csv],{type:"text/csv;charset="+c+";"});if(a.navigator.msSaveOrOpenBlob)navigator.msSaveBlob(d,b.getFilename());else{var g=angular.element('<div data-tap-disabled="true"><a></a></div>'),h=angular.element(g.children()[0]);h.attr("href",a.URL.createObjectURL(d)),h.attr("download",b.getFilename()),h.attr("target","_blank"),e.find("body").append(g),f(function(){h[0].click(),h.remove()},null)}}c.bind("click",function(){b.buildCSV().then(function(){d()}),b.$apply()})}}}])}(window,document);
/*! 12.0.4 */
!function(){function a(a,b){window.XMLHttpRequest.prototype[a]=b(window.XMLHttpRequest.prototype[a])}function b(a,b,c){try{Object.defineProperty(a,b,{get:c})}catch(d){}}if(window.FileAPI||(window.FileAPI={}),!window.XMLHttpRequest)throw"AJAX is not supported. XMLHttpRequest is not defined.";if(FileAPI.shouldLoad=!window.FormData||FileAPI.forceLoad,FileAPI.shouldLoad){var c=function(a){if(!a.__listeners){a.upload||(a.upload={}),a.__listeners=[];var b=a.upload.addEventListener;a.upload.addEventListener=function(c,d){a.__listeners[c]=d,b&&b.apply(this,arguments)}}};a("open",function(a){return function(b,d,e){c(this),this.__url=d;try{a.apply(this,[b,d,e])}catch(f){f.message.indexOf("Access is denied")>-1&&(this.__origError=f,a.apply(this,[b,"_fix_for_ie_crossdomain__",e]))}}}),a("getResponseHeader",function(a){return function(b){return this.__fileApiXHR&&this.__fileApiXHR.getResponseHeader?this.__fileApiXHR.getResponseHeader(b):null==a?null:a.apply(this,[b])}}),a("getAllResponseHeaders",function(a){return function(){return this.__fileApiXHR&&this.__fileApiXHR.getAllResponseHeaders?this.__fileApiXHR.getAllResponseHeaders():null==a?null:a.apply(this)}}),a("abort",function(a){return function(){return this.__fileApiXHR&&this.__fileApiXHR.abort?this.__fileApiXHR.abort():null==a?null:a.apply(this)}}),a("setRequestHeader",function(a){return function(b,d){if("__setXHR_"===b){c(this);var e=d(this);e instanceof Function&&e(this)}else this.__requestHeaders=this.__requestHeaders||{},this.__requestHeaders[b]=d,a.apply(this,arguments)}}),a("send",function(a){return function(){var c=this;if(arguments[0]&&arguments[0].__isFileAPIShim){var d=arguments[0],e={url:c.__url,jsonp:!1,cache:!0,complete:function(a,d){a&&angular.isString(a)&&-1!==a.indexOf("#2174")&&(a=null),c.__completed=!0,!a&&c.__listeners.load&&c.__listeners.load({type:"load",loaded:c.__loaded,total:c.__total,target:c,lengthComputable:!0}),!a&&c.__listeners.loadend&&c.__listeners.loadend({type:"loadend",loaded:c.__loaded,total:c.__total,target:c,lengthComputable:!0}),"abort"===a&&c.__listeners.abort&&c.__listeners.abort({type:"abort",loaded:c.__loaded,total:c.__total,target:c,lengthComputable:!0}),void 0!==d.status&&b(c,"status",function(){return 0===d.status&&a&&"abort"!==a?500:d.status}),void 0!==d.statusText&&b(c,"statusText",function(){return d.statusText}),b(c,"readyState",function(){return 4}),void 0!==d.response&&b(c,"response",function(){return d.response});var e=d.responseText||(a&&0===d.status&&"abort"!==a?a:void 0);b(c,"responseText",function(){return e}),b(c,"response",function(){return e}),a&&b(c,"err",function(){return a}),c.__fileApiXHR=d,c.onreadystatechange&&c.onreadystatechange(),c.onload&&c.onload()},progress:function(a){if(a.target=c,c.__listeners.progress&&c.__listeners.progress(a),c.__total=a.total,c.__loaded=a.loaded,a.total===a.loaded){var b=this;setTimeout(function(){c.__completed||(c.getAllResponseHeaders=function(){},b.complete(null,{status:204,statusText:"No Content"}))},FileAPI.noContentTimeout||1e4)}},headers:c.__requestHeaders};e.data={},e.files={};for(var f=0;f<d.data.length;f++){var g=d.data[f];null!=g.val&&null!=g.val.name&&null!=g.val.size&&null!=g.val.type?e.files[g.key]=g.val:e.data[g.key]=g.val}setTimeout(function(){if(!FileAPI.hasFlash)throw'Adode Flash Player need to be installed. To check ahead use "FileAPI.hasFlash"';c.__fileApiXHR=FileAPI.upload(e)},1)}else{if(this.__origError)throw this.__origError;a.apply(c,arguments)}}}),window.XMLHttpRequest.__isFileAPIShim=!0,window.FormData=FormData=function(){return{append:function(a,b,c){b.__isFileAPIBlobShim&&(b=b.data[0]),this.data.push({key:a,val:b,name:c})},data:[],__isFileAPIShim:!0}},window.Blob=Blob=function(a){return{data:a,__isFileAPIBlobShim:!0}}}}(),function(){function a(a){return"input"===a[0].tagName.toLowerCase()&&a.attr("type")&&"file"===a.attr("type").toLowerCase()}function b(){try{var a=new ActiveXObject("ShockwaveFlash.ShockwaveFlash");if(a)return!0}catch(b){if(void 0!==navigator.mimeTypes["application/x-shockwave-flash"])return!0}return!1}function c(a){var b=0,c=0;if(window.jQuery)return jQuery(a).offset();if(a.offsetParent)do b+=a.offsetLeft-a.scrollLeft,c+=a.offsetTop-a.scrollTop,a=a.offsetParent;while(a);return{left:b,top:c}}if(FileAPI.shouldLoad){if(FileAPI.hasFlash=b(),FileAPI.forceLoad&&(FileAPI.html5=!1),!FileAPI.upload){var d,e,f,g,h,i=document.createElement("script"),j=document.getElementsByTagName("script");if(window.FileAPI.jsUrl)d=window.FileAPI.jsUrl;else if(window.FileAPI.jsPath)e=window.FileAPI.jsPath;else for(f=0;f<j.length;f++)if(h=j[f].src,g=h.search(/\/ng\-file\-upload[\-a-zA-z0-9\.]*\.js/),g>-1){e=h.substring(0,g+1);break}null==FileAPI.staticPath&&(FileAPI.staticPath=e),i.setAttribute("src",d||e+"FileAPI.min.js"),document.getElementsByTagName("head")[0].appendChild(i)}FileAPI.ngfFixIE=function(d,e,f){if(!b())throw'Adode Flash Player need to be installed. To check ahead use "FileAPI.hasFlash"';var g=function(){var b=e.parent();d.attr("disabled")?b&&b.removeClass("js-fileapi-wrapper"):(e.attr("__ngf_flash_")||(e.unbind("change"),e.unbind("click"),e.bind("change",function(a){h.apply(this,[a]),f.apply(this,[a])}),e.attr("__ngf_flash_","true")),b.addClass("js-fileapi-wrapper"),a(d)||(b.css("position","absolute").css("top",c(d[0]).top+"px").css("left",c(d[0]).left+"px").css("width",d[0].offsetWidth+"px").css("height",d[0].offsetHeight+"px").css("filter","alpha(opacity=0)").css("display",d.css("display")).css("overflow","hidden").css("z-index","900000").css("visibility","visible"),e.css("width",d[0].offsetWidth+"px").css("height",d[0].offsetHeight+"px").css("position","absolute").css("top","0px").css("left","0px")))};d.bind("mouseenter",g);var h=function(a){for(var b=FileAPI.getFiles(a),c=0;c<b.length;c++)void 0===b[c].size&&(b[c].size=0),void 0===b[c].name&&(b[c].name="file"),void 0===b[c].type&&(b[c].type="undefined");a.target||(a.target={}),a.target.files=b,a.target.files!==b&&(a.__files_=b),(a.__files_||a.target.files).item=function(b){return(a.__files_||a.target.files)[b]||null}}},FileAPI.disableFileInput=function(a,b){b?a.removeClass("js-fileapi-wrapper"):a.addClass("js-fileapi-wrapper")}}}(),window.FileReader||(window.FileReader=function(){var a=this,b=!1;this.listeners={},this.addEventListener=function(b,c){a.listeners[b]=a.listeners[b]||[],a.listeners[b].push(c)},this.removeEventListener=function(b,c){a.listeners[b]&&a.listeners[b].splice(a.listeners[b].indexOf(c),1)},this.dispatchEvent=function(b){var c=a.listeners[b.type];if(c)for(var d=0;d<c.length;d++)c[d].call(a,b)},this.onabort=this.onerror=this.onload=this.onloadstart=this.onloadend=this.onprogress=null;var c=function(b,c){var d={type:b,target:a,loaded:c.loaded,total:c.total,error:c.error};return null!=c.result&&(d.target.result=c.result),d},d=function(d){b||(b=!0,a.onloadstart&&a.onloadstart(c("loadstart",d)));var e;"load"===d.type?(a.onloadend&&a.onloadend(c("loadend",d)),e=c("load",d),a.onload&&a.onload(e),a.dispatchEvent(e)):"progress"===d.type?(e=c("progress",d),a.onprogress&&a.onprogress(e),a.dispatchEvent(e)):(e=c("error",d),a.onerror&&a.onerror(e),a.dispatchEvent(e))};this.readAsDataURL=function(a){FileAPI.readAsDataURL(a,d)},this.readAsText=function(a){FileAPI.readAsText(a,d)}}),!window.XMLHttpRequest||window.FileAPI&&FileAPI.shouldLoad||(window.XMLHttpRequest.prototype.setRequestHeader=function(a){return function(b,c){if("__setXHR_"===b){var d=c(this);d instanceof Function&&d(this)}else a.apply(this,arguments)}}(window.XMLHttpRequest.prototype.setRequestHeader));var ngFileUpload=angular.module("ngFileUpload",[]);ngFileUpload.version="12.0.4",ngFileUpload.service("UploadBase",["$http","$q","$timeout",function(a,b,c){function d(d){function e(a){j.notify&&j.notify(a),k.progressFunc&&c(function(){k.progressFunc(a)})}function h(a){return null!=d._start&&g?{loaded:a.loaded+d._start,total:d._file&&d._file.size||a.total,type:a.type,config:d,lengthComputable:!0,target:a.target}:a}function i(){a(d).then(function(a){g&&d._chunkSize&&!d._finished&&d._file?(e({loaded:d._end,total:d._file&&d._file.size,config:d,type:"progress"}),f.upload(d,!0)):(d._finished&&delete d._finished,j.resolve(a))},function(a){j.reject(a)},function(a){j.notify(a)})}d.method=d.method||"POST",d.headers=d.headers||{};var j=d._deferred=d._deferred||b.defer(),k=j.promise;return d.disableProgress||(d.headers.__setXHR_=function(){return function(a){a&&a.upload&&a.upload.addEventListener&&(d.__XHR=a,d.xhrFn&&d.xhrFn(a),a.upload.addEventListener("progress",function(a){a.config=d,e(h(a))},!1),a.upload.addEventListener("load",function(a){a.lengthComputable&&(a.config=d,e(h(a)))},!1))}}),g?d._chunkSize&&d._end&&!d._finished?(d._start=d._end,d._end+=d._chunkSize,i()):d.resumeSizeUrl?a.get(d.resumeSizeUrl).then(function(a){d._start=d.resumeSizeResponseReader?d.resumeSizeResponseReader(a.data):parseInt((null==a.data.size?a.data:a.data.size).toString()),d._chunkSize&&(d._end=d._start+d._chunkSize),i()},function(a){throw a}):d.resumeSize?d.resumeSize().then(function(a){d._start=a,i()},function(a){throw a}):(d._chunkSize&&(d._start=0,d._end=d._start+d._chunkSize),i()):i(),k.success=function(a){return k.then(function(b){a(b.data,b.status,b.headers,d)}),k},k.error=function(a){return k.then(null,function(b){a(b.data,b.status,b.headers,d)}),k},k.progress=function(a){return k.progressFunc=a,k.then(null,null,function(b){a(b)}),k},k.abort=k.pause=function(){return d.__XHR&&c(function(){d.__XHR.abort()}),k},k.xhr=function(a){return d.xhrFn=function(b){return function(){b&&b.apply(k,arguments),a.apply(k,arguments)}}(d.xhrFn),k},f.promisesCount++,k["finally"](function(){f.promisesCount--}),k}function e(a){var b={};for(var c in a)a.hasOwnProperty(c)&&(b[c]=a[c]);return b}var f=this;f.promisesCount=0,this.isResumeSupported=function(){return window.Blob&&window.Blob.prototype.slice};var g=this.isResumeSupported();this.isUploadInProgress=function(){return f.promisesCount>0},this.rename=function(a,b){return a.ngfName=b,a},this.jsonBlob=function(a){null==a||angular.isString(a)||(a=JSON.stringify(a));var b=new window.Blob([a],{type:"application/json"});return b._ngfBlob=!0,b},this.json=function(a){return angular.toJson(a)},this.isFile=function(a){return null!=a&&(a instanceof window.Blob||a.flashId&&a.name&&a.size)},this.upload=function(a,b){function c(b,c){if(b._ngfBlob)return b;if(a._file=a._file||b,null!=a._start&&g){a._end&&a._end>=b.size&&(a._finished=!0,a._end=b.size);var d=b.slice(a._start,a._end||b.size);return d.name=b.name,d.ngfName=b.ngfName,a._chunkSize&&(c.append("_chunkSize",a._chunkSize),c.append("_currentChunkSize",a._end-a._start),c.append("_chunkNumber",Math.floor(a._start/a._chunkSize)),c.append("_totalSize",a._file.size)),d}return b}function h(b,d,e){if(void 0!==d)if(angular.isDate(d)&&(d=d.toISOString()),angular.isString(d))b.append(e,d);else if(f.isFile(d)){var g=c(d,b),i=e.split(",");i[1]&&(g.ngfName=i[1].replace(/^\s+|\s+$/g,""),e=i[0]),a._fileKey=a._fileKey||e,b.append(e,g,g.ngfName||g.name)}else if(angular.isObject(d)){if(d.$$ngfCircularDetection)throw"ngFileUpload: Circular reference in config.data. Make sure specified data for Upload.upload() has no circular reference: "+e;d.$$ngfCircularDetection=!0;try{for(var j in d)if(d.hasOwnProperty(j)&&"$$ngfCircularDetection"!==j){var k=null==a.objectKey?"[i]":a.objectKey;d.length&&parseInt(j)>-1&&(k=null==a.arrayKey?k:a.arrayKey),h(b,d[j],e+k.replace(/[ik]/g,j))}}finally{delete d.$$ngfCircularDetection}}else b.append(e,d)}function i(){a._chunkSize=f.translateScalars(a.resumeChunkSize),a._chunkSize=a._chunkSize?parseInt(a._chunkSize.toString()):null,a.headers=a.headers||{},a.headers["Content-Type"]=void 0,a.transformRequest=a.transformRequest?angular.isArray(a.transformRequest)?a.transformRequest:[a.transformRequest]:[],a.transformRequest.push(function(b){var c,d=new window.FormData;b=b||a.fields||{},a.file&&(b.file=a.file);for(c in b)if(b.hasOwnProperty(c)){var e=b[c];a.formDataAppender?a.formDataAppender(d,c,e):h(d,e,c)}return d})}return b||(a=e(a)),a._isDigested||(a._isDigested=!0,i()),d(a)},this.http=function(b){return b=e(b),b.transformRequest=b.transformRequest||function(b){return window.ArrayBuffer&&b instanceof window.ArrayBuffer||b instanceof window.Blob?b:a.defaults.transformRequest[0].apply(this,arguments)},b._chunkSize=f.translateScalars(b.resumeChunkSize),b._chunkSize=b._chunkSize?parseInt(b._chunkSize.toString()):null,d(b)},this.translateScalars=function(a){if(angular.isString(a)){if(a.search(/kb/i)===a.length-2)return parseFloat(1024*a.substring(0,a.length-2));if(a.search(/mb/i)===a.length-2)return parseFloat(1048576*a.substring(0,a.length-2));if(a.search(/gb/i)===a.length-2)return parseFloat(1073741824*a.substring(0,a.length-2));if(a.search(/b/i)===a.length-1)return parseFloat(a.substring(0,a.length-1));if(a.search(/s/i)===a.length-1)return parseFloat(a.substring(0,a.length-1));if(a.search(/m/i)===a.length-1)return parseFloat(60*a.substring(0,a.length-1));if(a.search(/h/i)===a.length-1)return parseFloat(3600*a.substring(0,a.length-1))}return a},this.urlToBlob=function(c){var d=b.defer();return a({url:c,method:"get",responseType:"arraybuffer"}).then(function(a){var b=new Uint8Array(a.data),c=a.headers("content-type")||"image/WebP",e=new window.Blob([b],{type:c});d.resolve(e)},function(a){d.reject(a)}),d.promise},this.setDefaults=function(a){this.defaults=a||{}},this.defaults={},this.version=ngFileUpload.version}]),ngFileUpload.service("Upload",["$parse","$timeout","$compile","$q","UploadExif",function(a,b,c,d,e){function f(a,b,c){var e=[i.emptyPromise()];return angular.forEach(a,function(d,f){0===d.type.indexOf("image/jpeg")&&i.attrGetter("ngfFixOrientation",b,c,{$file:d})&&e.push(i.happyPromise(i.applyExifRotation(d),d).then(function(b){a.splice(f,1,b)}))}),d.all(e)}function g(a,b,c){var e=i.attrGetter("ngfResize",b,c);if(!e||!i.isResizeSupported()||!a.length)return i.emptyPromise();if(!(e instanceof Function))return h(e,a,b,c);var f=d.defer();e(a).then(function(d){h(d,a,b,c).then(function(a){f.resolve(a)},function(a){f.reject(a)})},function(a){f.reject(a)})}function h(a,b,c,e){function f(d,f){if(0===d.type.indexOf("image")){if(a.pattern&&!i.validatePattern(d,a.pattern))return;var h=i.resize(d,a.width,a.height,a.quality,a.type,a.ratio,a.centerCrop,function(a,b){return i.attrGetter("ngfResizeIf",c,e,{$width:a,$height:b,$file:d})},a.restoreExif!==!1);g.push(h),h.then(function(a){b.splice(f,1,a)},function(a){d.$error="resize",d.$errorParam=(a?(a.message?a.message:a)+": ":"")+(d&&d.name)})}}for(var g=[i.emptyPromise()],h=0;h<b.length;h++)f(b[h],h);return d.all(g)}var i=e;return i.getAttrWithDefaults=function(a,b){if(null!=a[b])return a[b];var c=i.defaults[b];return null==c?c:angular.isString(c)?c:JSON.stringify(c)},i.attrGetter=function(b,c,d,e){var f=this.getAttrWithDefaults(c,b);if(!d)return f;try{return e?a(f)(d,e):a(f)(d)}catch(g){if(b.search(/min|max|pattern/i))return f;throw g}},i.shouldUpdateOn=function(a,b,c){var d=i.attrGetter("ngModelOptions",b,c);return d&&d.updateOn?d.updateOn.split(" ").indexOf(a)>-1:!0},i.emptyPromise=function(){var a=d.defer(),c=arguments;return b(function(){a.resolve.apply(a,c)}),a.promise},i.rejectPromise=function(){var a=d.defer(),c=arguments;return b(function(){a.reject.apply(a,c)}),a.promise},i.happyPromise=function(a,c){var e=d.defer();return a.then(function(a){e.resolve(a)},function(a){b(function(){throw a}),e.resolve(c)}),e.promise},i.updateModel=function(c,d,e,h,j,k,l){function m(f,g,j,l,m){d.$$ngfPrevValidFiles=f,d.$$ngfPrevInvalidFiles=g;var n=f&&f.length?f[0]:null,o=g&&g.length?g[0]:null;c&&(i.applyModelValidation(c,f),c.$setViewValue(m?n:f)),h&&a(h)(e,{$files:f,$file:n,$newFiles:j,$duplicateFiles:l,$invalidFiles:g,$invalidFile:o,$event:k});var p=i.attrGetter("ngfModelInvalid",d);p&&b(function(){a(p).assign(e,m?o:g)}),b(function(){})}function n(){function a(a,b){return a.name===b.name&&(a.$ngfOrigSize||a.size)===(b.$ngfOrigSize||b.size)&&a.type===b.type}function b(b){var c;for(c=0;c<s.length;c++)if(a(b,s[c]))return!0;for(c=0;c<t.length;c++)if(a(b,t[c]))return!0;return!1}if(j){r=[],u=[];for(var c=0;c<j.length;c++)b(j[c])?u.push(j[c]):r.push(j[c])}}function o(a){return angular.isArray(a)?a:[a]}function p(){w=[],v=[],angular.forEach(r,function(a){a.$error?v.push(a):w.push(a)})}function q(){function a(){b(function(){m(x?s.concat(w):w,x?t.concat(v):v,j,u,y)},A&&A.debounce?A.debounce.change||A.debounce:0)}g(z?r:w,d,e).then(function(){z?i.validate(r,s.length,c,d,e).then(function(){p(),a()}):a()},function(a){throw"Could not resize files "+a})}var r,s,t,u=[],v=[],w=[];s=d.$$ngfPrevValidFiles||[],t=d.$$ngfPrevInvalidFiles||[],c&&c.$modelValue&&(s=o(c.$modelValue));var x=i.attrGetter("ngfKeep",d,e);r=(j||[]).slice(0),("distinct"===x||i.attrGetter("ngfKeepDistinct",d,e)===!0)&&n(d,e);var y=!x&&!i.attrGetter("ngfMultiple",d,e)&&!i.attrGetter("multiple",d);if(!x||r.length){i.attrGetter("ngfBeforeModelChange",d,e,{$files:j,$file:j&&j.length?j[0]:null,$newFiles:r,$duplicateFiles:u,$event:k});var z=i.attrGetter("ngfValidateAfterResize",d,e),A=i.attrGetter("ngModelOptions",d,e);i.validate(r,s.length,c,d,e).then(function(){l?m(r,[],j,u,y):(A&&A.allowInvalid||z?w=r:p(),i.attrGetter("ngfFixOrientation",d,e)&&i.isExifSupported()?f(w,d,e).then(function(){q()}):q())})}},i}]),ngFileUpload.directive("ngfSelect",["$parse","$timeout","$compile","Upload",function(a,b,c,d){function e(a){var b=a.match(/Android[^\d]*(\d+)\.(\d+)/);if(b&&b.length>2){var c=d.defaults.androidFixMinorVersion||4;return parseInt(b[1])<4||parseInt(b[1])===c&&parseInt(b[2])<c}return-1===a.indexOf("Chrome")&&/.*Windows.*Safari.*/.test(a)}function f(a,b,c,d,f,h,i,j){function k(){return"input"===b[0].tagName.toLowerCase()&&c.type&&"file"===c.type.toLowerCase()}function l(){return t("ngfChange")||t("ngfSelect")}function m(b){if(j.shouldUpdateOn("change",c,a)){for(var e=b.__files_||b.target&&b.target.files,f=[],g=0;g<e.length;g++)f.push(e[g]);j.updateModel(d,c,a,l(),f.length?f:null,b)}}function n(a){if(b!==a)for(var c=0;c<b[0].attributes.length;c++){var d=b[0].attributes[c];"type"!==d.name&&"class"!==d.name&&"style"!==d.name&&((null==d.value||""===d.value)&&("required"===d.name&&(d.value="required"),"multiple"===d.name&&(d.value="multiple")),a.attr(d.name,"id"===d.name?"ngf-"+d.value:d.value))}}function o(){if(k())return b;var a=angular.element('<input type="file">');n(a);var c=angular.element("<label>upload</label>");return c.css("visibility","hidden").css("position","absolute").css("overflow","hidden").css("width","0px").css("height","0px").css("border","none").css("margin","0px").css("padding","0px").attr("tabindex","-1"),g.push({el:b,ref:c}),document.body.appendChild(c.append(a)[0]),a}function p(c){if(b.attr("disabled"))return!1;if(!t("ngfSelectDisabled",a)){var d=q(c);if(null!=d)return d;r(c);try{k()||document.body.contains(w[0])||(g.push({el:b,ref:w.parent()}),document.body.appendChild(w.parent()[0]),w.bind("change",m))}catch(f){}return e(navigator.userAgent)?setTimeout(function(){w[0].click()},0):w[0].click(),!1}}function q(a){var b=a.changedTouches||a.originalEvent&&a.originalEvent.changedTouches;if("touchstart"===a.type)return v=b?b[0].clientY:0,!0;if(a.stopPropagation(),a.preventDefault(),"touchend"===a.type){var c=b?b[0].clientY:0;if(Math.abs(c-v)>20)return!1}}function r(b){j.shouldUpdateOn("click",c,a)&&w.val()&&(w.val(null),j.updateModel(d,c,a,l(),null,b,!0))}function s(a){if(w&&!w.attr("__ngf_ie10_Fix_")){if(!w[0].parentNode)return void(w=null);a.preventDefault(),a.stopPropagation(),w.unbind("click");var b=w.clone();return w.replaceWith(b),w=b,w.attr("__ngf_ie10_Fix_","true"),w.bind("change",m),w.bind("click",s),w[0].click(),!1}w.removeAttr("__ngf_ie10_Fix_")}var t=function(a,b){return j.attrGetter(a,c,b)};j.registerModelChangeValidator(d,c,a);var u=[];u.push(a.$watch(t("ngfMultiple"),function(){w.attr("multiple",t("ngfMultiple",a))})),u.push(a.$watch(t("ngfCapture"),function(){w.attr("capture",t("ngfCapture",a))})),u.push(a.$watch(t("ngfAccept"),function(){w.attr("accept",t("ngfAccept",a))})),c.$observe("accept",function(){w.attr("accept",t("accept"))}),u.push(function(){c.$$observers&&delete c.$$observers.accept});var v=0,w=b;k()||(w=o()),w.bind("change",m),k()?b.bind("click",r):b.bind("click touchstart touchend",p),-1!==navigator.appVersion.indexOf("MSIE 10")&&w.bind("click",s),d&&d.$formatters.push(function(a){return(null==a||0===a.length)&&w.val()&&w.val(null),a}),a.$on("$destroy",function(){k()||w.parent().remove(),angular.forEach(u,function(a){a()})}),h(function(){for(var a=0;a<g.length;a++){var b=g[a];document.body.contains(b.el[0])||(g.splice(a,1),b.ref.remove())}}),window.FileAPI&&window.FileAPI.ngfFixIE&&window.FileAPI.ngfFixIE(b,w,m)}var g=[];return{restrict:"AEC",require:"?ngModel",link:function(e,g,h,i){f(e,g,h,i,a,b,c,d)}}}]),function(){function a(a){return"img"===a.tagName.toLowerCase()?"image":"audio"===a.tagName.toLowerCase()?"audio":"video"===a.tagName.toLowerCase()?"video":/./}function b(b,c,d,e,f,g,h,i){function j(a){var g=b.attrGetter("ngfNoObjectUrl",f,d);b.dataUrl(a,g)["finally"](function(){c(function(){var b=(g?a.$ngfDataUrl:a.$ngfBlobUrl)||a.$ngfDataUrl;i?e.css("background-image","url('"+(b||"")+"')"):e.attr("src",b),b?e.removeClass("ng-hide"):e.addClass("ng-hide")})})}c(function(){var c=d.$watch(f[g],function(c){var d=h;if("ngfThumbnail"===g&&(d||(d={width:e[0].clientWidth,height:e[0].clientHeight}),0===d.width&&window.getComputedStyle)){var f=getComputedStyle(e[0]);d={width:parseInt(f.width.slice(0,-2)),height:parseInt(f.height.slice(0,-2))}}return angular.isString(c)?(e.removeClass("ng-hide"),i?e.css("background-image","url('"+c+"')"):e.attr("src",c)):void(!c||!c.type||0!==c.type.search(a(e[0]))||i&&0!==c.type.indexOf("image")?e.addClass("ng-hide"):d&&b.isResizeSupported()?b.resize(c,d.width,d.height,d.quality).then(function(a){j(a)},function(a){throw a}):j(c))});d.$on("$destroy",function(){c()})})}ngFileUpload.service("UploadDataUrl",["UploadBase","$timeout","$q",function(a,b,c){var d=a;return d.base64DataUrl=function(a){if(angular.isArray(a)){var b=c.defer(),e=0;return angular.forEach(a,function(c){d.dataUrl(c,!0)["finally"](function(){if(e++,e===a.length){var c=[];angular.forEach(a,function(a){c.push(a.$ngfDataUrl)}),b.resolve(c,a)}})}),b.promise}return d.dataUrl(a,!0)},d.dataUrl=function(a,e){if(!a)return d.emptyPromise(a,a);if(e&&null!=a.$ngfDataUrl||!e&&null!=a.$ngfBlobUrl)return d.emptyPromise(e?a.$ngfDataUrl:a.$ngfBlobUrl,a);var f=e?a.$$ngfDataUrlPromise:a.$$ngfBlobUrlPromise;if(f)return f;var g=c.defer();return b(function(){if(window.FileReader&&a&&(!window.FileAPI||-1===navigator.userAgent.indexOf("MSIE 8")||a.size<2e4)&&(!window.FileAPI||-1===navigator.userAgent.indexOf("MSIE 9")||a.size<4e6)){var c=window.URL||window.webkitURL;if(c&&c.createObjectURL&&!e){var f;try{f=c.createObjectURL(a)}catch(h){return void b(function(){a.$ngfBlobUrl="",g.reject()})}b(function(){if(a.$ngfBlobUrl=f,f){g.resolve(f,a),d.blobUrls=d.blobUrls||[],d.blobUrlsTotalSize=d.blobUrlsTotalSize||0,d.blobUrls.push({url:f,size:a.size}),d.blobUrlsTotalSize+=a.size||0;for(var b=d.defaults.blobUrlsMaxMemory||268435456,e=d.defaults.blobUrlsMaxQueueSize||200;(d.blobUrlsTotalSize>b||d.blobUrls.length>e)&&d.blobUrls.length>1;){var h=d.blobUrls.splice(0,1)[0];c.revokeObjectURL(h.url),d.blobUrlsTotalSize-=h.size}}})}else{var i=new FileReader;i.onload=function(c){b(function(){a.$ngfDataUrl=c.target.result,g.resolve(c.target.result,a),b(function(){delete a.$ngfDataUrl},1e3)})},i.onerror=function(){b(function(){a.$ngfDataUrl="",g.reject()})},i.readAsDataURL(a)}}else b(function(){a[e?"$ngfDataUrl":"$ngfBlobUrl"]="",g.reject()})}),f=e?a.$$ngfDataUrlPromise=g.promise:a.$$ngfBlobUrlPromise=g.promise,f["finally"](function(){delete a[e?"$$ngfDataUrlPromise":"$$ngfBlobUrlPromise"]}),f},d}]),ngFileUpload.directive("ngfSrc",["Upload","$timeout",function(a,c){return{restrict:"AE",link:function(d,e,f){b(a,c,d,e,f,"ngfSrc",a.attrGetter("ngfResize",f,d),!1)}}}]),ngFileUpload.directive("ngfBackground",["Upload","$timeout",function(a,c){return{restrict:"AE",link:function(d,e,f){b(a,c,d,e,f,"ngfBackground",a.attrGetter("ngfResize",f,d),!0)}}}]),ngFileUpload.directive("ngfThumbnail",["Upload","$timeout",function(a,c){return{restrict:"AE",link:function(d,e,f){var g=a.attrGetter("ngfSize",f,d);b(a,c,d,e,f,"ngfThumbnail",g,a.attrGetter("ngfAsBackground",f,d))}}}]),ngFileUpload.config(["$compileProvider",function(a){a.imgSrcSanitizationWhitelist&&a.imgSrcSanitizationWhitelist(/^\s*(https?|ftp|mailto|tel|local|file|data|blob):/),a.aHrefSanitizationWhitelist&&a.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|tel|local|file|data|blob):/)}]),ngFileUpload.filter("ngfDataUrl",["UploadDataUrl","$sce",function(a,b){return function(c,d,e){if(angular.isString(c))return b.trustAsResourceUrl(c);var f=c&&((d?c.$ngfDataUrl:c.$ngfBlobUrl)||c.$ngfDataUrl);return c&&!f?(!c.$ngfDataUrlFilterInProgress&&angular.isObject(c)&&(c.$ngfDataUrlFilterInProgress=!0,a.dataUrl(c,d)),""):(c&&delete c.$ngfDataUrlFilterInProgress,(c&&f?e?b.trustAsResourceUrl(f):f:c)||"")}}])}(),ngFileUpload.service("UploadValidate",["UploadDataUrl","$q","$timeout",function(a,b,c){function d(a){var b="",c=[];if(a.length>2&&"/"===a[0]&&"/"===a[a.length-1])b=a.substring(1,a.length-1);else{var e=a.split(",");if(e.length>1)for(var f=0;f<e.length;f++){var g=d(e[f]);g.regexp?(b+="("+g.regexp+")",f<e.length-1&&(b+="|")):c=c.concat(g.excludes)}else 0===a.indexOf("!")?c.push("^((?!"+d(a.substring(1)).regexp+").)*$"):(0===a.indexOf(".")&&(a="*"+a),b="^"+a.replace(new RegExp("[.\\\\+*?\\[\\^\\]$(){}=!<>|:\\-]","g"),"\\$&")+"$",b=b.replace(/\\\*/g,".*").replace(/\\\?/g,"."))}return{regexp:b,excludes:c}}function e(a,b){null==b||a.$dirty||(a.$setDirty?a.$setDirty():a.$dirty=!0)}var f=a;return f.validatePattern=function(a,b){if(!b)return!0;var c=d(b),e=!0;if(c.regexp&&c.regexp.length){var f=new RegExp(c.regexp,"i");e=null!=a.type&&f.test(a.type)||null!=a.name&&f.test(a.name)}for(var g=c.excludes.length;g--;){var h=new RegExp(c.excludes[g],"i");e=e&&(null==a.type||h.test(a.type))&&(null==a.name||h.test(a.name))}return e},f.ratioToFloat=function(a){var b=a.toString(),c=b.search(/[x:]/i);return b=c>-1?parseFloat(b.substring(0,c))/parseFloat(b.substring(c+1)):parseFloat(b)},f.registerModelChangeValidator=function(a,b,c){a&&a.$formatters.push(function(d){a.$dirty&&(d&&!angular.isArray(d)&&(d=[d]),f.validate(d,0,a,b,c).then(function(){f.applyModelValidation(a,d)}))})},f.applyModelValidation=function(a,b){e(a,b),angular.forEach(a.$ngfValidations,function(b){a.$setValidity(b.name,b.valid)})},f.getValidationAttr=function(a,b,c,d,e){var g="ngf"+c[0].toUpperCase()+c.substr(1),h=f.attrGetter(g,a,b,{$file:e});if(null==h&&(h=f.attrGetter("ngfValidate",a,b,{$file:e}))){var i=(d||c).split(".");h=h[i[0]],i.length>1&&(h=h&&h[i[1]])}return h},f.validate=function(a,c,d,e,g){function h(b,c,h){if(a){for(var i=a.length,j=null;i--;){var k=a[i];if(k){var l=f.getValidationAttr(e,g,b,c,k);null!=l&&(h(k,l,i)||(k.$error=b,(k.$errorMessages=k.$errorMessages||{})[b]=!0,k.$errorParam=l,a.splice(i,1),j=!1))}}null!==j&&d.$ngfValidations.push({name:b,valid:j})}}function i(c,h,i,k,l){function m(a,b,d){null!=d?k(b,d).then(function(e){l(e,d)?a.resolve():(b.$error=c,(b.$errorMessages=b.$errorMessages||{})[c]=!0,b.$errorParam=d,a.reject())},function(){j("ngfValidateForce",{$file:b})?(b.$error=c,(b.$errorMessages=b.$errorMessages||{})[c]=!0,b.$errorParam=d,a.reject()):a.resolve()}):a.resolve()}var n=[f.emptyPromise()];return a?(a=void 0===a.length?[a]:a,angular.forEach(a,function(a){var d=b.defer();return n.push(d.promise),!i||null!=a.type&&0===a.type.search(i)?void("dimensions"===c&&null!=f.attrGetter("ngfDimensions",e)?f.imageDimensions(a).then(function(b){m(d,a,j("ngfDimensions",{$file:a,$width:b.width,$height:b.height}))},function(){d.reject()}):"duration"===c&&null!=f.attrGetter("ngfDuration",e)?f.mediaDuration(a).then(function(b){m(d,a,j("ngfDuration",{$file:a,$duration:b}))},function(){d.reject()}):m(d,a,f.getValidationAttr(e,g,c,h,a))):void d.resolve()}),b.all(n).then(function(){d.$ngfValidations.push({name:c,valid:!0})},function(){d.$ngfValidations.push({name:c,valid:!1})})):void 0}d=d||{},d.$ngfValidations=d.$ngfValidations||[],angular.forEach(d.$ngfValidations,function(a){a.valid=!0});var j=function(a,b){return f.attrGetter(a,e,g,b)};if(null==a||0===a.length)return f.emptyPromise(d);a=void 0===a.length?[a]:a.slice(0),h("maxFiles",null,function(a,b,d){return b>c+d}),h("pattern",null,f.validatePattern),h("minSize","size.min",function(a,b){return a.size+.1>=f.translateScalars(b)}),h("maxSize","size.max",function(a,b){return a.size-.1<=f.translateScalars(b)});var k=0;if(h("maxTotalSize",null,function(b,c){return k+=b.size,k>f.translateScalars(c)?(a.splice(0,a.length),!1):!0}),h("validateFn",null,function(a,b){return b===!0||null===b||""===b}),!a.length)return f.emptyPromise(d,d.$ngfValidations);var l=b.defer(),m=[];return m.push(f.happyPromise(i("maxHeight","height.max",/image/,this.imageDimensions,function(a,b){return a.height<=b}))),m.push(f.happyPromise(i("minHeight","height.min",/image/,this.imageDimensions,function(a,b){return a.height>=b}))),m.push(f.happyPromise(i("maxWidth","width.max",/image/,this.imageDimensions,function(a,b){return a.width<=b}))),m.push(f.happyPromise(i("minWidth","width.min",/image/,this.imageDimensions,function(a,b){return a.width>=b}))),m.push(f.happyPromise(i("dimensions",null,/image/,function(a,b){return f.emptyPromise(b)},function(a){return a}))),m.push(f.happyPromise(i("ratio",null,/image/,this.imageDimensions,function(a,b){for(var c=b.toString().split(","),d=!1,e=0;e<c.length;e++)Math.abs(a.width/a.height-f.ratioToFloat(c[e]))<1e-4&&(d=!0);return d}))),m.push(f.happyPromise(i("maxRatio","ratio.max",/image/,this.imageDimensions,function(a,b){return a.width/a.height-f.ratioToFloat(b)<1e-4}))),m.push(f.happyPromise(i("minRatio","ratio.min",/image/,this.imageDimensions,function(a,b){return a.width/a.height-f.ratioToFloat(b)>-1e-4}))),m.push(f.happyPromise(i("maxDuration","duration.max",/audio|video/,this.mediaDuration,function(a,b){return a<=f.translateScalars(b)}))),m.push(f.happyPromise(i("minDuration","duration.min",/audio|video/,this.mediaDuration,function(a,b){return a>=f.translateScalars(b)}))),m.push(f.happyPromise(i("duration",null,/audio|video/,function(a,b){return f.emptyPromise(b)},function(a){return a}))),m.push(f.happyPromise(i("validateAsyncFn",null,null,function(a,b){return b},function(a){return a===!0||null===a||""===a}))),b.all(m).then(function(){l.resolve(d,d.$ngfValidations)})},f.imageDimensions=function(a){if(a.$ngfWidth&&a.$ngfHeight){var d=b.defer();return c(function(){d.resolve({width:a.$ngfWidth,height:a.$ngfHeight})}),d.promise}if(a.$ngfDimensionPromise)return a.$ngfDimensionPromise;var e=b.defer();return c(function(){return 0!==a.type.indexOf("image")?void e.reject("not image"):void f.dataUrl(a).then(function(b){function d(){var b=h[0].clientWidth,c=h[0].clientHeight;h.remove(),a.$ngfWidth=b,a.$ngfHeight=c,e.resolve({width:b,height:c})}function f(){h.remove(),e.reject("load error")}function g(){c(function(){h[0].parentNode&&(h[0].clientWidth?d():i>10?f():g())},1e3)}var h=angular.element("<img>").attr("src",b).css("visibility","hidden").css("position","fixed").css("max-width","none !important").css("max-height","none !important");h.on("load",d),h.on("error",f);var i=0;g(),angular.element(document.getElementsByTagName("body")[0]).append(h)},function(){e.reject("load error")})}),a.$ngfDimensionPromise=e.promise,a.$ngfDimensionPromise["finally"](function(){delete a.$ngfDimensionPromise}),a.$ngfDimensionPromise},f.mediaDuration=function(a){if(a.$ngfDuration){var d=b.defer();return c(function(){d.resolve(a.$ngfDuration)}),d.promise}if(a.$ngfDurationPromise)return a.$ngfDurationPromise;var e=b.defer();return c(function(){return 0!==a.type.indexOf("audio")&&0!==a.type.indexOf("video")?void e.reject("not media"):void f.dataUrl(a).then(function(b){function d(){var b=h[0].duration;a.$ngfDuration=b,h.remove(),e.resolve(b);

}function f(){h.remove(),e.reject("load error")}function g(){c(function(){h[0].parentNode&&(h[0].duration?d():i>10?f():g())},1e3)}var h=angular.element(0===a.type.indexOf("audio")?"<audio>":"<video>").attr("src",b).css("visibility","none").css("position","fixed");h.on("loadedmetadata",d),h.on("error",f);var i=0;g(),angular.element(document.body).append(h)},function(){e.reject("load error")})}),a.$ngfDurationPromise=e.promise,a.$ngfDurationPromise["finally"](function(){delete a.$ngfDurationPromise}),a.$ngfDurationPromise},f}]),ngFileUpload.service("UploadResize",["UploadValidate","$q",function(a,b){var c=a,d=function(a,b,c,d,e){var f=e?Math.max(c/a,d/b):Math.min(c/a,d/b);return{width:a*f,height:b*f,marginX:a*f-c,marginY:b*f-d}},e=function(a,e,f,g,h,i,j,k){var l=b.defer(),m=document.createElement("canvas"),n=document.createElement("img");return n.onload=function(){if(null!=k&&k(n.width,n.height)===!1)return void l.reject("resizeIf");try{if(i){var a=c.ratioToFloat(i),b=n.width/n.height;a>b?(e=n.width,f=e/a):(f=n.height,e=f*a)}e||(e=n.width),f||(f=n.height);var o=d(n.width,n.height,e,f,j);m.width=Math.min(o.width,e),m.height=Math.min(o.height,f);var p=m.getContext("2d");p.drawImage(n,Math.min(0,-o.marginX/2),Math.min(0,-o.marginY/2),o.width,o.height),l.resolve(m.toDataURL(h||"image/WebP",g||.934))}catch(q){l.reject(q)}},n.onerror=function(){l.reject()},n.src=a,l.promise};return c.dataUrltoBlob=function(a,b,c){for(var d=a.split(","),e=d[0].match(/:(.*?);/)[1],f=atob(d[1]),g=f.length,h=new Uint8Array(g);g--;)h[g]=f.charCodeAt(g);var i=new window.Blob([h],{type:e});return i.name=b,i.$ngfOrigSize=c,i},c.isResizeSupported=function(){var a=document.createElement("canvas");return window.atob&&a.getContext&&a.getContext("2d")&&window.Blob},c.isResizeSupported()&&Object.defineProperty(window.Blob.prototype,"name",{get:function(){return this.$ngfName},set:function(a){this.$ngfName=a},configurable:!0}),c.resize=function(a,d,f,g,h,i,j,k,l){if(0!==a.type.indexOf("image"))return c.emptyPromise(a);var m=b.defer();return c.dataUrl(a,!0).then(function(b){e(b,d,f,g,h||a.type,i,j,k).then(function(d){if("image/jpeg"===a.type&&l)try{d=c.restoreExif(b,d)}catch(e){setTimeout(function(){throw e},1)}try{var f=c.dataUrltoBlob(d,a.name,a.size);m.resolve(f)}catch(e){m.reject(e)}},function(b){"resizeIf"===b&&m.resolve(a),m.reject(b)})},function(a){m.reject(a)}),m.promise},c}]),function(){function a(a,c,d,e,f,g,h,i,j,k){function l(){return c.attr("disabled")||r("ngfDropDisabled",a)}function m(b,c){i.updateModel(e,d,a,r("ngfChange")||r("ngfDrop"),b,c)}function n(b,c){if(!i.shouldUpdateOn(b,d,a)||!c)return i.rejectPromise([]);var e=[];c.replace(/<(img src|img [^>]* src) *=\"([^\"]*)\"/gi,function(a,b,c){e.push(c)});var f=[],g=[];if(e.length){angular.forEach(e,function(a){f.push(i.urlToBlob(a).then(function(a){g.push(a)}))});var h=k.defer();return k.all(f).then(function(){h.resolve(g)},function(a){h.reject(a)}),h.promise}return i.emptyPromise()}function o(a,b,c,d){var e=r("ngfDragOverClass",a,{$event:c}),f="dragover";if(angular.isString(e))f=e;else if(e&&(e.delay&&(v=e.delay),e.accept||e.reject)){var g=c.dataTransfer.items;if(null!=g&&g.length)for(var h=e.pattern||r("ngfPattern",a,{$event:c}),j=g.length;j--;){if(!i.validatePattern(g[j],h)){f=e.reject;break}f=e.accept}else f=e.accept}d(f)}function p(b,c,e,f){function g(a,b){var c=k.defer();if(null!=a)if(a.isDirectory){var d=[i.emptyPromise()];if(m){var e={type:"directory"};e.name=e.path=(b||"")+a.name+a.name,n.push(e)}var f=a.createReader(),h=[],p=function(){f.readEntries(function(e){try{e.length?(h=h.concat(Array.prototype.slice.call(e||[],0)),p()):(angular.forEach(h.slice(0),function(c){n.length<=j&&l>=o&&d.push(g(c,(b?b:"")+a.name+"/"))}),k.all(d).then(function(){c.resolve()},function(a){c.reject(a)}))}catch(f){c.reject(f)}},function(a){c.reject(a)})};p()}else a.file(function(a){try{a.path=(b?b:"")+a.name,m&&(a=i.rename(a,a.path)),n.push(a),o+=a.size,c.resolve()}catch(d){c.reject(d)}},function(a){c.reject(a)});return c.promise}var j=i.getValidationAttr(d,a,"maxFiles")||Number.MAX_VALUE,l=i.getValidationAttr(d,a,"maxTotalSize")||Number.MAX_VALUE,m=r("ngfIncludeDir",a),n=[],o=0,p=[i.emptyPromise()];if(b&&b.length>0&&"file"!==h.protocol())for(var q=0;q<b.length;q++){if(b[q].webkitGetAsEntry&&b[q].webkitGetAsEntry()&&b[q].webkitGetAsEntry().isDirectory){var s=b[q].webkitGetAsEntry();if(s.isDirectory&&!e)continue;null!=s&&p.push(g(s))}else{var t=b[q].getAsFile();null!=t&&(n.push(t),o+=t.size)}if(n.length>j||o>l||!f&&n.length>0)break}else if(null!=c)for(var u=0;u<c.length;u++){var v=c.item(u);if((v.type||v.size>0)&&(n.push(v),o+=v.size),n.length>j||o>l||!f&&n.length>0)break}var w=k.defer();return k.all(p).then(function(){if(f||m||!n.length)w.resolve(n);else{for(var a=0;n[a]&&"directory"===n[a].type;)a++;w.resolve([n[a]])}},function(a){w.reject(a)}),w.promise}var q=b(),r=function(a,b,c){return i.attrGetter(a,d,b,c)};if(r("dropAvailable")&&g(function(){a[r("dropAvailable")]?a[r("dropAvailable")].value=q:a[r("dropAvailable")]=q}),!q)return void(r("ngfHideOnDropNotAvailable",a)===!0&&c.css("display","none"));null==r("ngfSelect")&&i.registerModelChangeValidator(e,d,a);var s,t=null,u=f(r("ngfStopPropagation")),v=1;c[0].addEventListener("dragover",function(b){if(!l()&&i.shouldUpdateOn("drop",d,a)){if(b.preventDefault(),u(a)&&b.stopPropagation(),navigator.userAgent.indexOf("Chrome")>-1){var e=b.dataTransfer.effectAllowed;b.dataTransfer.dropEffect="move"===e||"linkMove"===e?"move":"copy"}g.cancel(t),s||(s="C",o(a,d,b,function(d){s=d,c.addClass(s),r("ngfDrag",a,{$isDragging:!0,$class:s,$event:b})}))}},!1),c[0].addEventListener("dragenter",function(b){!l()&&i.shouldUpdateOn("drop",d,a)&&(b.preventDefault(),u(a)&&b.stopPropagation())},!1),c[0].addEventListener("dragleave",function(b){!l()&&i.shouldUpdateOn("drop",d,a)&&(b.preventDefault(),u(a)&&b.stopPropagation(),t=g(function(){s&&c.removeClass(s),s=null,r("ngfDrag",a,{$isDragging:!1,$event:b})},v||100))},!1),c[0].addEventListener("drop",function(b){if(!l()&&i.shouldUpdateOn("drop",d,a)){b.preventDefault(),u(a)&&b.stopPropagation(),s&&c.removeClass(s),s=null;var e,f=b.dataTransfer.items;try{e=b.dataTransfer&&b.dataTransfer.getData&&b.dataTransfer.getData("text/html")}catch(g){}p(f,b.dataTransfer.files,r("ngfAllowDir",a)!==!1,r("multiple")||r("ngfMultiple",a)).then(function(a){a.length?m(a,b):n("dropUrl",e).then(function(a){m(a,b)})})}},!1),c[0].addEventListener("paste",function(b){if(navigator.userAgent.toLowerCase().indexOf("firefox")>-1&&r("ngfEnableFirefoxPaste",a)&&b.preventDefault(),!l()&&i.shouldUpdateOn("paste",d,a)){var c=[],e=b.clipboardData||b.originalEvent.clipboardData;if(e&&e.items)for(var f=0;f<e.items.length;f++)-1!==e.items[f].type.indexOf("image")&&c.push(e.items[f].getAsFile());c.length?m(c,b):n("pasteUrl",e).then(function(a){m(a,b)})}},!1),navigator.userAgent.toLowerCase().indexOf("firefox")>-1&&r("ngfEnableFirefoxPaste",a)&&(c.attr("contenteditable",!0),c.on("keypress",function(a){a.metaKey||a.ctrlKey||a.preventDefault()}))}function b(){var a=document.createElement("div");return"draggable"in a&&"ondrop"in a&&!/Edge\/12./i.test(navigator.userAgent)}ngFileUpload.directive("ngfDrop",["$parse","$timeout","$location","Upload","$http","$q",function(b,c,d,e,f,g){return{restrict:"AEC",require:"?ngModel",link:function(h,i,j,k){a(h,i,j,k,b,c,d,e,f,g)}}}]),ngFileUpload.directive("ngfNoFileDrop",function(){return function(a,c){b()&&c.css("display","none")}}),ngFileUpload.directive("ngfDropAvailable",["$parse","$timeout","Upload",function(a,c,d){return function(e,f,g){if(b()){var h=a(d.attrGetter("ngfDropAvailable",g));c(function(){h(e),h.assign&&h.assign(e,!0)})}}}])}(),ngFileUpload.service("UploadExif",["UploadResize","$q",function(a,b){function c(a,b,c,d){switch(b){case 2:return a.transform(-1,0,0,1,c,0);case 3:return a.transform(-1,0,0,-1,c,d);case 4:return a.transform(1,0,0,-1,0,d);case 5:return a.transform(0,1,1,0,0,0);case 6:return a.transform(0,1,-1,0,d,0);case 7:return a.transform(0,-1,-1,0,d,c);case 8:return a.transform(0,-1,1,0,0,c)}}function d(a){for(var b="",c=new Uint8Array(a),d=c.byteLength,e=0;d>e;e++)b+=String.fromCharCode(c[e]);return window.btoa(b)}var e=a;return e.isExifSupported=function(){return window.FileReader&&(new FileReader).readAsArrayBuffer&&e.isResizeSupported()},e.readOrientation=function(a){var c=b.defer(),d=new FileReader,e=a.slice?a.slice(0,65536):a;return d.readAsArrayBuffer(e),d.onerror=function(a){return c.reject(a)},d.onload=function(a){var b={orientation:1},d=new DataView(this.result);if(65496!==d.getUint16(0,!1))return c.resolve(b);for(var e=d.byteLength,f=2;e>f;){var g=d.getUint16(f,!1);if(f+=2,65505===g){if(1165519206!==d.getUint32(f+=2,!1))return c.resolve(b);var h=18761===d.getUint16(f+=6,!1);f+=d.getUint32(f+4,h);var i=d.getUint16(f,h);f+=2;for(var j=0;i>j;j++)if(274===d.getUint16(f+12*j,h)){var k=d.getUint16(f+12*j+8,h);return k>=2&&8>=k&&(d.setUint16(f+12*j+8,1,h),b.fixedArrayBuffer=a.target.result),b.orientation=k,c.resolve(b)}}else{if(65280!==(65280&g))break;f+=d.getUint16(f,!1)}}return c.resolve(b)},c.promise},e.applyExifRotation=function(a){if(0!==a.type.indexOf("image/jpeg"))return e.emptyPromise(a);var f=b.defer();return e.readOrientation(a).then(function(b){return b.orientation<2||b.orientation>8?f.resolve(a):void e.dataUrl(a,!0).then(function(g){var h=document.createElement("canvas"),i=document.createElement("img");i.onload=function(){try{h.width=b.orientation>4?i.height:i.width,h.height=b.orientation>4?i.width:i.height;var g=h.getContext("2d");c(g,b.orientation,i.width,i.height),g.drawImage(i,0,0);var j=h.toDataURL(a.type||"image/WebP",.934);j=e.restoreExif(d(b.fixedArrayBuffer),j);var k=e.dataUrltoBlob(j,a.name);f.resolve(k)}catch(l){return f.reject(l)}},i.onerror=function(){f.reject()},i.src=g},function(a){f.reject(a)})},function(a){f.reject(a)}),f.promise},e.restoreExif=function(a,b){var c={};return c.KEY_STR="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",c.encode64=function(a){var b,c,d,e,f,g="",h="",i="",j=0;do b=a[j++],c=a[j++],h=a[j++],d=b>>2,e=(3&b)<<4|c>>4,f=(15&c)<<2|h>>6,i=63&h,isNaN(c)?f=i=64:isNaN(h)&&(i=64),g=g+this.KEY_STR.charAt(d)+this.KEY_STR.charAt(e)+this.KEY_STR.charAt(f)+this.KEY_STR.charAt(i),b=c=h="",d=e=f=i="";while(j<a.length);return g},c.restore=function(a,b){a.match("data:image/jpeg;base64,")&&(a=a.replace("data:image/jpeg;base64,",""));var c=this.decode64(a),d=this.slice2Segments(c),e=this.exifManipulation(b,d);return"data:image/jpeg;base64,"+this.encode64(e)},c.exifManipulation=function(a,b){var c=this.getExifArray(b),d=this.insertExif(a,c);return new Uint8Array(d)},c.getExifArray=function(a){for(var b,c=0;c<a.length;c++)if(b=a[c],255===b[0]&225===b[1])return b;return[]},c.insertExif=function(a,b){var c=a.replace("data:image/jpeg;base64,",""),d=this.decode64(c),e=d.indexOf(255,3),f=d.slice(0,e),g=d.slice(e),h=f;return h=h.concat(b),h=h.concat(g)},c.slice2Segments=function(a){for(var b=0,c=[];;){if(255===a[b]&218===a[b+1])break;if(255===a[b]&216===a[b+1])b+=2;else{var d=256*a[b+2]+a[b+3],e=b+d+2,f=a.slice(b,e);c.push(f),b=e}if(b>a.length)break}return c},c.decode64=function(a){var b,c,d,e,f,g="",h="",i=0,j=[],k=/[^A-Za-z0-9\+\/\=]/g;k.exec(a)&&console.log("There were invalid base64 characters in the input text.\nValid base64 characters are A-Z, a-z, 0-9, NaNExpect errors in decoding."),a=a.replace(/[^A-Za-z0-9\+\/\=]/g,"");do d=this.KEY_STR.indexOf(a.charAt(i++)),e=this.KEY_STR.indexOf(a.charAt(i++)),f=this.KEY_STR.indexOf(a.charAt(i++)),h=this.KEY_STR.indexOf(a.charAt(i++)),b=d<<2|e>>4,c=(15&e)<<4|f>>2,g=(3&f)<<6|h,j.push(b),64!==f&&j.push(c),64!==h&&j.push(g),b=c=g="",d=e=f=h="";while(i<a.length);return j},c.restore(a,b)},e}]);
/*! 12.0.4 */
!function(){function a(a,b){window.XMLHttpRequest.prototype[a]=b(window.XMLHttpRequest.prototype[a])}function b(a,b,c){try{Object.defineProperty(a,b,{get:c})}catch(d){}}if(window.FileAPI||(window.FileAPI={}),!window.XMLHttpRequest)throw"AJAX is not supported. XMLHttpRequest is not defined.";if(FileAPI.shouldLoad=!window.FormData||FileAPI.forceLoad,FileAPI.shouldLoad){var c=function(a){if(!a.__listeners){a.upload||(a.upload={}),a.__listeners=[];var b=a.upload.addEventListener;a.upload.addEventListener=function(c,d){a.__listeners[c]=d,b&&b.apply(this,arguments)}}};a("open",function(a){return function(b,d,e){c(this),this.__url=d;try{a.apply(this,[b,d,e])}catch(f){f.message.indexOf("Access is denied")>-1&&(this.__origError=f,a.apply(this,[b,"_fix_for_ie_crossdomain__",e]))}}}),a("getResponseHeader",function(a){return function(b){return this.__fileApiXHR&&this.__fileApiXHR.getResponseHeader?this.__fileApiXHR.getResponseHeader(b):null==a?null:a.apply(this,[b])}}),a("getAllResponseHeaders",function(a){return function(){return this.__fileApiXHR&&this.__fileApiXHR.getAllResponseHeaders?this.__fileApiXHR.getAllResponseHeaders():null==a?null:a.apply(this)}}),a("abort",function(a){return function(){return this.__fileApiXHR&&this.__fileApiXHR.abort?this.__fileApiXHR.abort():null==a?null:a.apply(this)}}),a("setRequestHeader",function(a){return function(b,d){if("__setXHR_"===b){c(this);var e=d(this);e instanceof Function&&e(this)}else this.__requestHeaders=this.__requestHeaders||{},this.__requestHeaders[b]=d,a.apply(this,arguments)}}),a("send",function(a){return function(){var c=this;if(arguments[0]&&arguments[0].__isFileAPIShim){var d=arguments[0],e={url:c.__url,jsonp:!1,cache:!0,complete:function(a,d){a&&angular.isString(a)&&-1!==a.indexOf("#2174")&&(a=null),c.__completed=!0,!a&&c.__listeners.load&&c.__listeners.load({type:"load",loaded:c.__loaded,total:c.__total,target:c,lengthComputable:!0}),!a&&c.__listeners.loadend&&c.__listeners.loadend({type:"loadend",loaded:c.__loaded,total:c.__total,target:c,lengthComputable:!0}),"abort"===a&&c.__listeners.abort&&c.__listeners.abort({type:"abort",loaded:c.__loaded,total:c.__total,target:c,lengthComputable:!0}),void 0!==d.status&&b(c,"status",function(){return 0===d.status&&a&&"abort"!==a?500:d.status}),void 0!==d.statusText&&b(c,"statusText",function(){return d.statusText}),b(c,"readyState",function(){return 4}),void 0!==d.response&&b(c,"response",function(){return d.response});var e=d.responseText||(a&&0===d.status&&"abort"!==a?a:void 0);b(c,"responseText",function(){return e}),b(c,"response",function(){return e}),a&&b(c,"err",function(){return a}),c.__fileApiXHR=d,c.onreadystatechange&&c.onreadystatechange(),c.onload&&c.onload()},progress:function(a){if(a.target=c,c.__listeners.progress&&c.__listeners.progress(a),c.__total=a.total,c.__loaded=a.loaded,a.total===a.loaded){var b=this;setTimeout(function(){c.__completed||(c.getAllResponseHeaders=function(){},b.complete(null,{status:204,statusText:"No Content"}))},FileAPI.noContentTimeout||1e4)}},headers:c.__requestHeaders};e.data={},e.files={};for(var f=0;f<d.data.length;f++){var g=d.data[f];null!=g.val&&null!=g.val.name&&null!=g.val.size&&null!=g.val.type?e.files[g.key]=g.val:e.data[g.key]=g.val}setTimeout(function(){if(!FileAPI.hasFlash)throw'Adode Flash Player need to be installed. To check ahead use "FileAPI.hasFlash"';c.__fileApiXHR=FileAPI.upload(e)},1)}else{if(this.__origError)throw this.__origError;a.apply(c,arguments)}}}),window.XMLHttpRequest.__isFileAPIShim=!0,window.FormData=FormData=function(){return{append:function(a,b,c){b.__isFileAPIBlobShim&&(b=b.data[0]),this.data.push({key:a,val:b,name:c})},data:[],__isFileAPIShim:!0}},window.Blob=Blob=function(a){return{data:a,__isFileAPIBlobShim:!0}}}}(),function(){function a(a){return"input"===a[0].tagName.toLowerCase()&&a.attr("type")&&"file"===a.attr("type").toLowerCase()}function b(){try{var a=new ActiveXObject("ShockwaveFlash.ShockwaveFlash");if(a)return!0}catch(b){if(void 0!==navigator.mimeTypes["application/x-shockwave-flash"])return!0}return!1}function c(a){var b=0,c=0;if(window.jQuery)return jQuery(a).offset();if(a.offsetParent)do b+=a.offsetLeft-a.scrollLeft,c+=a.offsetTop-a.scrollTop,a=a.offsetParent;while(a);return{left:b,top:c}}if(FileAPI.shouldLoad){if(FileAPI.hasFlash=b(),FileAPI.forceLoad&&(FileAPI.html5=!1),!FileAPI.upload){var d,e,f,g,h,i=document.createElement("script"),j=document.getElementsByTagName("script");if(window.FileAPI.jsUrl)d=window.FileAPI.jsUrl;else if(window.FileAPI.jsPath)e=window.FileAPI.jsPath;else for(f=0;f<j.length;f++)if(h=j[f].src,g=h.search(/\/ng\-file\-upload[\-a-zA-z0-9\.]*\.js/),g>-1){e=h.substring(0,g+1);break}null==FileAPI.staticPath&&(FileAPI.staticPath=e),i.setAttribute("src",d||e+"FileAPI.min.js"),document.getElementsByTagName("head")[0].appendChild(i)}FileAPI.ngfFixIE=function(d,e,f){if(!b())throw'Adode Flash Player need to be installed. To check ahead use "FileAPI.hasFlash"';var g=function(){var b=e.parent();d.attr("disabled")?b&&b.removeClass("js-fileapi-wrapper"):(e.attr("__ngf_flash_")||(e.unbind("change"),e.unbind("click"),e.bind("change",function(a){h.apply(this,[a]),f.apply(this,[a])}),e.attr("__ngf_flash_","true")),b.addClass("js-fileapi-wrapper"),a(d)||(b.css("position","absolute").css("top",c(d[0]).top+"px").css("left",c(d[0]).left+"px").css("width",d[0].offsetWidth+"px").css("height",d[0].offsetHeight+"px").css("filter","alpha(opacity=0)").css("display",d.css("display")).css("overflow","hidden").css("z-index","900000").css("visibility","visible"),e.css("width",d[0].offsetWidth+"px").css("height",d[0].offsetHeight+"px").css("position","absolute").css("top","0px").css("left","0px")))};d.bind("mouseenter",g);var h=function(a){for(var b=FileAPI.getFiles(a),c=0;c<b.length;c++)void 0===b[c].size&&(b[c].size=0),void 0===b[c].name&&(b[c].name="file"),void 0===b[c].type&&(b[c].type="undefined");a.target||(a.target={}),a.target.files=b,a.target.files!==b&&(a.__files_=b),(a.__files_||a.target.files).item=function(b){return(a.__files_||a.target.files)[b]||null}}},FileAPI.disableFileInput=function(a,b){b?a.removeClass("js-fileapi-wrapper"):a.addClass("js-fileapi-wrapper")}}}(),window.FileReader||(window.FileReader=function(){var a=this,b=!1;this.listeners={},this.addEventListener=function(b,c){a.listeners[b]=a.listeners[b]||[],a.listeners[b].push(c)},this.removeEventListener=function(b,c){a.listeners[b]&&a.listeners[b].splice(a.listeners[b].indexOf(c),1)},this.dispatchEvent=function(b){var c=a.listeners[b.type];if(c)for(var d=0;d<c.length;d++)c[d].call(a,b)},this.onabort=this.onerror=this.onload=this.onloadstart=this.onloadend=this.onprogress=null;var c=function(b,c){var d={type:b,target:a,loaded:c.loaded,total:c.total,error:c.error};return null!=c.result&&(d.target.result=c.result),d},d=function(d){b||(b=!0,a.onloadstart&&a.onloadstart(c("loadstart",d)));var e;"load"===d.type?(a.onloadend&&a.onloadend(c("loadend",d)),e=c("load",d),a.onload&&a.onload(e),a.dispatchEvent(e)):"progress"===d.type?(e=c("progress",d),a.onprogress&&a.onprogress(e),a.dispatchEvent(e)):(e=c("error",d),a.onerror&&a.onerror(e),a.dispatchEvent(e))};this.readAsDataURL=function(a){FileAPI.readAsDataURL(a,d)},this.readAsText=function(a){FileAPI.readAsText(a,d)}});
/*! 12.0.4 */
!window.XMLHttpRequest||window.FileAPI&&FileAPI.shouldLoad||(window.XMLHttpRequest.prototype.setRequestHeader=function(a){return function(b,c){if("__setXHR_"===b){var d=c(this);d instanceof Function&&d(this)}else a.apply(this,arguments)}}(window.XMLHttpRequest.prototype.setRequestHeader));var ngFileUpload=angular.module("ngFileUpload",[]);ngFileUpload.version="12.0.4",ngFileUpload.service("UploadBase",["$http","$q","$timeout",function(a,b,c){function d(d){function e(a){j.notify&&j.notify(a),k.progressFunc&&c(function(){k.progressFunc(a)})}function h(a){return null!=d._start&&g?{loaded:a.loaded+d._start,total:d._file&&d._file.size||a.total,type:a.type,config:d,lengthComputable:!0,target:a.target}:a}function i(){a(d).then(function(a){g&&d._chunkSize&&!d._finished&&d._file?(e({loaded:d._end,total:d._file&&d._file.size,config:d,type:"progress"}),f.upload(d,!0)):(d._finished&&delete d._finished,j.resolve(a))},function(a){j.reject(a)},function(a){j.notify(a)})}d.method=d.method||"POST",d.headers=d.headers||{};var j=d._deferred=d._deferred||b.defer(),k=j.promise;return d.disableProgress||(d.headers.__setXHR_=function(){return function(a){a&&a.upload&&a.upload.addEventListener&&(d.__XHR=a,d.xhrFn&&d.xhrFn(a),a.upload.addEventListener("progress",function(a){a.config=d,e(h(a))},!1),a.upload.addEventListener("load",function(a){a.lengthComputable&&(a.config=d,e(h(a)))},!1))}}),g?d._chunkSize&&d._end&&!d._finished?(d._start=d._end,d._end+=d._chunkSize,i()):d.resumeSizeUrl?a.get(d.resumeSizeUrl).then(function(a){d._start=d.resumeSizeResponseReader?d.resumeSizeResponseReader(a.data):parseInt((null==a.data.size?a.data:a.data.size).toString()),d._chunkSize&&(d._end=d._start+d._chunkSize),i()},function(a){throw a}):d.resumeSize?d.resumeSize().then(function(a){d._start=a,i()},function(a){throw a}):(d._chunkSize&&(d._start=0,d._end=d._start+d._chunkSize),i()):i(),k.success=function(a){return k.then(function(b){a(b.data,b.status,b.headers,d)}),k},k.error=function(a){return k.then(null,function(b){a(b.data,b.status,b.headers,d)}),k},k.progress=function(a){return k.progressFunc=a,k.then(null,null,function(b){a(b)}),k},k.abort=k.pause=function(){return d.__XHR&&c(function(){d.__XHR.abort()}),k},k.xhr=function(a){return d.xhrFn=function(b){return function(){b&&b.apply(k,arguments),a.apply(k,arguments)}}(d.xhrFn),k},f.promisesCount++,k["finally"](function(){f.promisesCount--}),k}function e(a){var b={};for(var c in a)a.hasOwnProperty(c)&&(b[c]=a[c]);return b}var f=this;f.promisesCount=0,this.isResumeSupported=function(){return window.Blob&&window.Blob.prototype.slice};var g=this.isResumeSupported();this.isUploadInProgress=function(){return f.promisesCount>0},this.rename=function(a,b){return a.ngfName=b,a},this.jsonBlob=function(a){null==a||angular.isString(a)||(a=JSON.stringify(a));var b=new window.Blob([a],{type:"application/json"});return b._ngfBlob=!0,b},this.json=function(a){return angular.toJson(a)},this.isFile=function(a){return null!=a&&(a instanceof window.Blob||a.flashId&&a.name&&a.size)},this.upload=function(a,b){function c(b,c){if(b._ngfBlob)return b;if(a._file=a._file||b,null!=a._start&&g){a._end&&a._end>=b.size&&(a._finished=!0,a._end=b.size);var d=b.slice(a._start,a._end||b.size);return d.name=b.name,d.ngfName=b.ngfName,a._chunkSize&&(c.append("_chunkSize",a._chunkSize),c.append("_currentChunkSize",a._end-a._start),c.append("_chunkNumber",Math.floor(a._start/a._chunkSize)),c.append("_totalSize",a._file.size)),d}return b}function h(b,d,e){if(void 0!==d)if(angular.isDate(d)&&(d=d.toISOString()),angular.isString(d))b.append(e,d);else if(f.isFile(d)){var g=c(d,b),i=e.split(",");i[1]&&(g.ngfName=i[1].replace(/^\s+|\s+$/g,""),e=i[0]),a._fileKey=a._fileKey||e,b.append(e,g,g.ngfName||g.name)}else if(angular.isObject(d)){if(d.$$ngfCircularDetection)throw"ngFileUpload: Circular reference in config.data. Make sure specified data for Upload.upload() has no circular reference: "+e;d.$$ngfCircularDetection=!0;try{for(var j in d)if(d.hasOwnProperty(j)&&"$$ngfCircularDetection"!==j){var k=null==a.objectKey?"[i]":a.objectKey;d.length&&parseInt(j)>-1&&(k=null==a.arrayKey?k:a.arrayKey),h(b,d[j],e+k.replace(/[ik]/g,j))}}finally{delete d.$$ngfCircularDetection}}else b.append(e,d)}function i(){a._chunkSize=f.translateScalars(a.resumeChunkSize),a._chunkSize=a._chunkSize?parseInt(a._chunkSize.toString()):null,a.headers=a.headers||{},a.headers["Content-Type"]=void 0,a.transformRequest=a.transformRequest?angular.isArray(a.transformRequest)?a.transformRequest:[a.transformRequest]:[],a.transformRequest.push(function(b){var c,d=new window.FormData;b=b||a.fields||{},a.file&&(b.file=a.file);for(c in b)if(b.hasOwnProperty(c)){var e=b[c];a.formDataAppender?a.formDataAppender(d,c,e):h(d,e,c)}return d})}return b||(a=e(a)),a._isDigested||(a._isDigested=!0,i()),d(a)},this.http=function(b){return b=e(b),b.transformRequest=b.transformRequest||function(b){return window.ArrayBuffer&&b instanceof window.ArrayBuffer||b instanceof window.Blob?b:a.defaults.transformRequest[0].apply(this,arguments)},b._chunkSize=f.translateScalars(b.resumeChunkSize),b._chunkSize=b._chunkSize?parseInt(b._chunkSize.toString()):null,d(b)},this.translateScalars=function(a){if(angular.isString(a)){if(a.search(/kb/i)===a.length-2)return parseFloat(1024*a.substring(0,a.length-2));if(a.search(/mb/i)===a.length-2)return parseFloat(1048576*a.substring(0,a.length-2));if(a.search(/gb/i)===a.length-2)return parseFloat(1073741824*a.substring(0,a.length-2));if(a.search(/b/i)===a.length-1)return parseFloat(a.substring(0,a.length-1));if(a.search(/s/i)===a.length-1)return parseFloat(a.substring(0,a.length-1));if(a.search(/m/i)===a.length-1)return parseFloat(60*a.substring(0,a.length-1));if(a.search(/h/i)===a.length-1)return parseFloat(3600*a.substring(0,a.length-1))}return a},this.urlToBlob=function(c){var d=b.defer();return a({url:c,method:"get",responseType:"arraybuffer"}).then(function(a){var b=new Uint8Array(a.data),c=a.headers("content-type")||"image/WebP",e=new window.Blob([b],{type:c});d.resolve(e)},function(a){d.reject(a)}),d.promise},this.setDefaults=function(a){this.defaults=a||{}},this.defaults={},this.version=ngFileUpload.version}]),ngFileUpload.service("Upload",["$parse","$timeout","$compile","$q","UploadExif",function(a,b,c,d,e){function f(a,b,c){var e=[i.emptyPromise()];return angular.forEach(a,function(d,f){0===d.type.indexOf("image/jpeg")&&i.attrGetter("ngfFixOrientation",b,c,{$file:d})&&e.push(i.happyPromise(i.applyExifRotation(d),d).then(function(b){a.splice(f,1,b)}))}),d.all(e)}function g(a,b,c){var e=i.attrGetter("ngfResize",b,c);if(!e||!i.isResizeSupported()||!a.length)return i.emptyPromise();if(!(e instanceof Function))return h(e,a,b,c);var f=d.defer();e(a).then(function(d){h(d,a,b,c).then(function(a){f.resolve(a)},function(a){f.reject(a)})},function(a){f.reject(a)})}function h(a,b,c,e){function f(d,f){if(0===d.type.indexOf("image")){if(a.pattern&&!i.validatePattern(d,a.pattern))return;var h=i.resize(d,a.width,a.height,a.quality,a.type,a.ratio,a.centerCrop,function(a,b){return i.attrGetter("ngfResizeIf",c,e,{$width:a,$height:b,$file:d})},a.restoreExif!==!1);g.push(h),h.then(function(a){b.splice(f,1,a)},function(a){d.$error="resize",d.$errorParam=(a?(a.message?a.message:a)+": ":"")+(d&&d.name)})}}for(var g=[i.emptyPromise()],h=0;h<b.length;h++)f(b[h],h);return d.all(g)}var i=e;return i.getAttrWithDefaults=function(a,b){if(null!=a[b])return a[b];var c=i.defaults[b];return null==c?c:angular.isString(c)?c:JSON.stringify(c)},i.attrGetter=function(b,c,d,e){var f=this.getAttrWithDefaults(c,b);if(!d)return f;try{return e?a(f)(d,e):a(f)(d)}catch(g){if(b.search(/min|max|pattern/i))return f;throw g}},i.shouldUpdateOn=function(a,b,c){var d=i.attrGetter("ngModelOptions",b,c);return d&&d.updateOn?d.updateOn.split(" ").indexOf(a)>-1:!0},i.emptyPromise=function(){var a=d.defer(),c=arguments;return b(function(){a.resolve.apply(a,c)}),a.promise},i.rejectPromise=function(){var a=d.defer(),c=arguments;return b(function(){a.reject.apply(a,c)}),a.promise},i.happyPromise=function(a,c){var e=d.defer();return a.then(function(a){e.resolve(a)},function(a){b(function(){throw a}),e.resolve(c)}),e.promise},i.updateModel=function(c,d,e,h,j,k,l){function m(f,g,j,l,m){d.$$ngfPrevValidFiles=f,d.$$ngfPrevInvalidFiles=g;var n=f&&f.length?f[0]:null,o=g&&g.length?g[0]:null;c&&(i.applyModelValidation(c,f),c.$setViewValue(m?n:f)),h&&a(h)(e,{$files:f,$file:n,$newFiles:j,$duplicateFiles:l,$invalidFiles:g,$invalidFile:o,$event:k});var p=i.attrGetter("ngfModelInvalid",d);p&&b(function(){a(p).assign(e,m?o:g)}),b(function(){})}function n(){function a(a,b){return a.name===b.name&&(a.$ngfOrigSize||a.size)===(b.$ngfOrigSize||b.size)&&a.type===b.type}function b(b){var c;for(c=0;c<s.length;c++)if(a(b,s[c]))return!0;for(c=0;c<t.length;c++)if(a(b,t[c]))return!0;return!1}if(j){r=[],u=[];for(var c=0;c<j.length;c++)b(j[c])?u.push(j[c]):r.push(j[c])}}function o(a){return angular.isArray(a)?a:[a]}function p(){w=[],v=[],angular.forEach(r,function(a){a.$error?v.push(a):w.push(a)})}function q(){function a(){b(function(){m(x?s.concat(w):w,x?t.concat(v):v,j,u,y)},A&&A.debounce?A.debounce.change||A.debounce:0)}g(z?r:w,d,e).then(function(){z?i.validate(r,s.length,c,d,e).then(function(){p(),a()}):a()},function(a){throw"Could not resize files "+a})}var r,s,t,u=[],v=[],w=[];s=d.$$ngfPrevValidFiles||[],t=d.$$ngfPrevInvalidFiles||[],c&&c.$modelValue&&(s=o(c.$modelValue));var x=i.attrGetter("ngfKeep",d,e);r=(j||[]).slice(0),("distinct"===x||i.attrGetter("ngfKeepDistinct",d,e)===!0)&&n(d,e);var y=!x&&!i.attrGetter("ngfMultiple",d,e)&&!i.attrGetter("multiple",d);if(!x||r.length){i.attrGetter("ngfBeforeModelChange",d,e,{$files:j,$file:j&&j.length?j[0]:null,$newFiles:r,$duplicateFiles:u,$event:k});var z=i.attrGetter("ngfValidateAfterResize",d,e),A=i.attrGetter("ngModelOptions",d,e);i.validate(r,s.length,c,d,e).then(function(){l?m(r,[],j,u,y):(A&&A.allowInvalid||z?w=r:p(),i.attrGetter("ngfFixOrientation",d,e)&&i.isExifSupported()?f(w,d,e).then(function(){q()}):q())})}},i}]),ngFileUpload.directive("ngfSelect",["$parse","$timeout","$compile","Upload",function(a,b,c,d){function e(a){var b=a.match(/Android[^\d]*(\d+)\.(\d+)/);if(b&&b.length>2){var c=d.defaults.androidFixMinorVersion||4;return parseInt(b[1])<4||parseInt(b[1])===c&&parseInt(b[2])<c}return-1===a.indexOf("Chrome")&&/.*Windows.*Safari.*/.test(a)}function f(a,b,c,d,f,h,i,j){function k(){return"input"===b[0].tagName.toLowerCase()&&c.type&&"file"===c.type.toLowerCase()}function l(){return t("ngfChange")||t("ngfSelect")}function m(b){if(j.shouldUpdateOn("change",c,a)){for(var e=b.__files_||b.target&&b.target.files,f=[],g=0;g<e.length;g++)f.push(e[g]);j.updateModel(d,c,a,l(),f.length?f:null,b)}}function n(a){if(b!==a)for(var c=0;c<b[0].attributes.length;c++){var d=b[0].attributes[c];"type"!==d.name&&"class"!==d.name&&"style"!==d.name&&((null==d.value||""===d.value)&&("required"===d.name&&(d.value="required"),"multiple"===d.name&&(d.value="multiple")),a.attr(d.name,"id"===d.name?"ngf-"+d.value:d.value))}}function o(){if(k())return b;var a=angular.element('<input type="file">');n(a);var c=angular.element("<label>upload</label>");return c.css("visibility","hidden").css("position","absolute").css("overflow","hidden").css("width","0px").css("height","0px").css("border","none").css("margin","0px").css("padding","0px").attr("tabindex","-1"),g.push({el:b,ref:c}),document.body.appendChild(c.append(a)[0]),a}function p(c){if(b.attr("disabled"))return!1;if(!t("ngfSelectDisabled",a)){var d=q(c);if(null!=d)return d;r(c);try{k()||document.body.contains(w[0])||(g.push({el:b,ref:w.parent()}),document.body.appendChild(w.parent()[0]),w.bind("change",m))}catch(f){}return e(navigator.userAgent)?setTimeout(function(){w[0].click()},0):w[0].click(),!1}}function q(a){var b=a.changedTouches||a.originalEvent&&a.originalEvent.changedTouches;if("touchstart"===a.type)return v=b?b[0].clientY:0,!0;if(a.stopPropagation(),a.preventDefault(),"touchend"===a.type){var c=b?b[0].clientY:0;if(Math.abs(c-v)>20)return!1}}function r(b){j.shouldUpdateOn("click",c,a)&&w.val()&&(w.val(null),j.updateModel(d,c,a,l(),null,b,!0))}function s(a){if(w&&!w.attr("__ngf_ie10_Fix_")){if(!w[0].parentNode)return void(w=null);a.preventDefault(),a.stopPropagation(),w.unbind("click");var b=w.clone();return w.replaceWith(b),w=b,w.attr("__ngf_ie10_Fix_","true"),w.bind("change",m),w.bind("click",s),w[0].click(),!1}w.removeAttr("__ngf_ie10_Fix_")}var t=function(a,b){return j.attrGetter(a,c,b)};j.registerModelChangeValidator(d,c,a);var u=[];u.push(a.$watch(t("ngfMultiple"),function(){w.attr("multiple",t("ngfMultiple",a))})),u.push(a.$watch(t("ngfCapture"),function(){w.attr("capture",t("ngfCapture",a))})),u.push(a.$watch(t("ngfAccept"),function(){w.attr("accept",t("ngfAccept",a))})),c.$observe("accept",function(){w.attr("accept",t("accept"))}),u.push(function(){c.$$observers&&delete c.$$observers.accept});var v=0,w=b;k()||(w=o()),w.bind("change",m),k()?b.bind("click",r):b.bind("click touchstart touchend",p),-1!==navigator.appVersion.indexOf("MSIE 10")&&w.bind("click",s),d&&d.$formatters.push(function(a){return(null==a||0===a.length)&&w.val()&&w.val(null),a}),a.$on("$destroy",function(){k()||w.parent().remove(),angular.forEach(u,function(a){a()})}),h(function(){for(var a=0;a<g.length;a++){var b=g[a];document.body.contains(b.el[0])||(g.splice(a,1),b.ref.remove())}}),window.FileAPI&&window.FileAPI.ngfFixIE&&window.FileAPI.ngfFixIE(b,w,m)}var g=[];return{restrict:"AEC",require:"?ngModel",link:function(e,g,h,i){f(e,g,h,i,a,b,c,d)}}}]),function(){function a(a){return"img"===a.tagName.toLowerCase()?"image":"audio"===a.tagName.toLowerCase()?"audio":"video"===a.tagName.toLowerCase()?"video":/./}function b(b,c,d,e,f,g,h,i){function j(a){var g=b.attrGetter("ngfNoObjectUrl",f,d);b.dataUrl(a,g)["finally"](function(){c(function(){var b=(g?a.$ngfDataUrl:a.$ngfBlobUrl)||a.$ngfDataUrl;i?e.css("background-image","url('"+(b||"")+"')"):e.attr("src",b),b?e.removeClass("ng-hide"):e.addClass("ng-hide")})})}c(function(){var c=d.$watch(f[g],function(c){var d=h;if("ngfThumbnail"===g&&(d||(d={width:e[0].clientWidth,height:e[0].clientHeight}),0===d.width&&window.getComputedStyle)){var f=getComputedStyle(e[0]);d={width:parseInt(f.width.slice(0,-2)),height:parseInt(f.height.slice(0,-2))}}return angular.isString(c)?(e.removeClass("ng-hide"),i?e.css("background-image","url('"+c+"')"):e.attr("src",c)):void(!c||!c.type||0!==c.type.search(a(e[0]))||i&&0!==c.type.indexOf("image")?e.addClass("ng-hide"):d&&b.isResizeSupported()?b.resize(c,d.width,d.height,d.quality).then(function(a){j(a)},function(a){throw a}):j(c))});d.$on("$destroy",function(){c()})})}ngFileUpload.service("UploadDataUrl",["UploadBase","$timeout","$q",function(a,b,c){var d=a;return d.base64DataUrl=function(a){if(angular.isArray(a)){var b=c.defer(),e=0;return angular.forEach(a,function(c){d.dataUrl(c,!0)["finally"](function(){if(e++,e===a.length){var c=[];angular.forEach(a,function(a){c.push(a.$ngfDataUrl)}),b.resolve(c,a)}})}),b.promise}return d.dataUrl(a,!0)},d.dataUrl=function(a,e){if(!a)return d.emptyPromise(a,a);if(e&&null!=a.$ngfDataUrl||!e&&null!=a.$ngfBlobUrl)return d.emptyPromise(e?a.$ngfDataUrl:a.$ngfBlobUrl,a);var f=e?a.$$ngfDataUrlPromise:a.$$ngfBlobUrlPromise;if(f)return f;var g=c.defer();return b(function(){if(window.FileReader&&a&&(!window.FileAPI||-1===navigator.userAgent.indexOf("MSIE 8")||a.size<2e4)&&(!window.FileAPI||-1===navigator.userAgent.indexOf("MSIE 9")||a.size<4e6)){var c=window.URL||window.webkitURL;if(c&&c.createObjectURL&&!e){var f;try{f=c.createObjectURL(a)}catch(h){return void b(function(){a.$ngfBlobUrl="",g.reject()})}b(function(){if(a.$ngfBlobUrl=f,f){g.resolve(f,a),d.blobUrls=d.blobUrls||[],d.blobUrlsTotalSize=d.blobUrlsTotalSize||0,d.blobUrls.push({url:f,size:a.size}),d.blobUrlsTotalSize+=a.size||0;for(var b=d.defaults.blobUrlsMaxMemory||268435456,e=d.defaults.blobUrlsMaxQueueSize||200;(d.blobUrlsTotalSize>b||d.blobUrls.length>e)&&d.blobUrls.length>1;){var h=d.blobUrls.splice(0,1)[0];c.revokeObjectURL(h.url),d.blobUrlsTotalSize-=h.size}}})}else{var i=new FileReader;i.onload=function(c){b(function(){a.$ngfDataUrl=c.target.result,g.resolve(c.target.result,a),b(function(){delete a.$ngfDataUrl},1e3)})},i.onerror=function(){b(function(){a.$ngfDataUrl="",g.reject()})},i.readAsDataURL(a)}}else b(function(){a[e?"$ngfDataUrl":"$ngfBlobUrl"]="",g.reject()})}),f=e?a.$$ngfDataUrlPromise=g.promise:a.$$ngfBlobUrlPromise=g.promise,f["finally"](function(){delete a[e?"$$ngfDataUrlPromise":"$$ngfBlobUrlPromise"]}),f},d}]),ngFileUpload.directive("ngfSrc",["Upload","$timeout",function(a,c){return{restrict:"AE",link:function(d,e,f){b(a,c,d,e,f,"ngfSrc",a.attrGetter("ngfResize",f,d),!1)}}}]),ngFileUpload.directive("ngfBackground",["Upload","$timeout",function(a,c){return{restrict:"AE",link:function(d,e,f){b(a,c,d,e,f,"ngfBackground",a.attrGetter("ngfResize",f,d),!0)}}}]),ngFileUpload.directive("ngfThumbnail",["Upload","$timeout",function(a,c){return{restrict:"AE",link:function(d,e,f){var g=a.attrGetter("ngfSize",f,d);b(a,c,d,e,f,"ngfThumbnail",g,a.attrGetter("ngfAsBackground",f,d))}}}]),ngFileUpload.config(["$compileProvider",function(a){a.imgSrcSanitizationWhitelist&&a.imgSrcSanitizationWhitelist(/^\s*(https?|ftp|mailto|tel|local|file|data|blob):/),a.aHrefSanitizationWhitelist&&a.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|tel|local|file|data|blob):/)}]),ngFileUpload.filter("ngfDataUrl",["UploadDataUrl","$sce",function(a,b){return function(c,d,e){if(angular.isString(c))return b.trustAsResourceUrl(c);var f=c&&((d?c.$ngfDataUrl:c.$ngfBlobUrl)||c.$ngfDataUrl);return c&&!f?(!c.$ngfDataUrlFilterInProgress&&angular.isObject(c)&&(c.$ngfDataUrlFilterInProgress=!0,a.dataUrl(c,d)),""):(c&&delete c.$ngfDataUrlFilterInProgress,(c&&f?e?b.trustAsResourceUrl(f):f:c)||"")}}])}(),ngFileUpload.service("UploadValidate",["UploadDataUrl","$q","$timeout",function(a,b,c){function d(a){var b="",c=[];if(a.length>2&&"/"===a[0]&&"/"===a[a.length-1])b=a.substring(1,a.length-1);else{var e=a.split(",");if(e.length>1)for(var f=0;f<e.length;f++){var g=d(e[f]);g.regexp?(b+="("+g.regexp+")",f<e.length-1&&(b+="|")):c=c.concat(g.excludes)}else 0===a.indexOf("!")?c.push("^((?!"+d(a.substring(1)).regexp+").)*$"):(0===a.indexOf(".")&&(a="*"+a),b="^"+a.replace(new RegExp("[.\\\\+*?\\[\\^\\]$(){}=!<>|:\\-]","g"),"\\$&")+"$",b=b.replace(/\\\*/g,".*").replace(/\\\?/g,"."))}return{regexp:b,excludes:c}}function e(a,b){null==b||a.$dirty||(a.$setDirty?a.$setDirty():a.$dirty=!0)}var f=a;return f.validatePattern=function(a,b){if(!b)return!0;var c=d(b),e=!0;if(c.regexp&&c.regexp.length){var f=new RegExp(c.regexp,"i");e=null!=a.type&&f.test(a.type)||null!=a.name&&f.test(a.name)}for(var g=c.excludes.length;g--;){var h=new RegExp(c.excludes[g],"i");e=e&&(null==a.type||h.test(a.type))&&(null==a.name||h.test(a.name))}return e},f.ratioToFloat=function(a){var b=a.toString(),c=b.search(/[x:]/i);return b=c>-1?parseFloat(b.substring(0,c))/parseFloat(b.substring(c+1)):parseFloat(b)},f.registerModelChangeValidator=function(a,b,c){a&&a.$formatters.push(function(d){a.$dirty&&(d&&!angular.isArray(d)&&(d=[d]),f.validate(d,0,a,b,c).then(function(){f.applyModelValidation(a,d)}))})},f.applyModelValidation=function(a,b){e(a,b),angular.forEach(a.$ngfValidations,function(b){a.$setValidity(b.name,b.valid)})},f.getValidationAttr=function(a,b,c,d,e){var g="ngf"+c[0].toUpperCase()+c.substr(1),h=f.attrGetter(g,a,b,{$file:e});if(null==h&&(h=f.attrGetter("ngfValidate",a,b,{$file:e}))){var i=(d||c).split(".");h=h[i[0]],i.length>1&&(h=h&&h[i[1]])}return h},f.validate=function(a,c,d,e,g){function h(b,c,h){if(a){for(var i=a.length,j=null;i--;){var k=a[i];if(k){var l=f.getValidationAttr(e,g,b,c,k);null!=l&&(h(k,l,i)||(k.$error=b,(k.$errorMessages=k.$errorMessages||{})[b]=!0,k.$errorParam=l,a.splice(i,1),j=!1))}}null!==j&&d.$ngfValidations.push({name:b,valid:j})}}function i(c,h,i,k,l){function m(a,b,d){null!=d?k(b,d).then(function(e){l(e,d)?a.resolve():(b.$error=c,(b.$errorMessages=b.$errorMessages||{})[c]=!0,b.$errorParam=d,a.reject())},function(){j("ngfValidateForce",{$file:b})?(b.$error=c,(b.$errorMessages=b.$errorMessages||{})[c]=!0,b.$errorParam=d,a.reject()):a.resolve()}):a.resolve()}var n=[f.emptyPromise()];return a?(a=void 0===a.length?[a]:a,angular.forEach(a,function(a){var d=b.defer();return n.push(d.promise),!i||null!=a.type&&0===a.type.search(i)?void("dimensions"===c&&null!=f.attrGetter("ngfDimensions",e)?f.imageDimensions(a).then(function(b){m(d,a,j("ngfDimensions",{$file:a,$width:b.width,$height:b.height}))},function(){d.reject()}):"duration"===c&&null!=f.attrGetter("ngfDuration",e)?f.mediaDuration(a).then(function(b){m(d,a,j("ngfDuration",{$file:a,$duration:b}))},function(){d.reject()}):m(d,a,f.getValidationAttr(e,g,c,h,a))):void d.resolve()}),b.all(n).then(function(){d.$ngfValidations.push({name:c,valid:!0})},function(){d.$ngfValidations.push({name:c,valid:!1})})):void 0}d=d||{},d.$ngfValidations=d.$ngfValidations||[],angular.forEach(d.$ngfValidations,function(a){a.valid=!0});var j=function(a,b){return f.attrGetter(a,e,g,b)};if(null==a||0===a.length)return f.emptyPromise(d);a=void 0===a.length?[a]:a.slice(0),h("maxFiles",null,function(a,b,d){return b>c+d}),h("pattern",null,f.validatePattern),h("minSize","size.min",function(a,b){return a.size+.1>=f.translateScalars(b)}),h("maxSize","size.max",function(a,b){return a.size-.1<=f.translateScalars(b)});var k=0;if(h("maxTotalSize",null,function(b,c){return k+=b.size,k>f.translateScalars(c)?(a.splice(0,a.length),!1):!0}),h("validateFn",null,function(a,b){return b===!0||null===b||""===b}),!a.length)return f.emptyPromise(d,d.$ngfValidations);var l=b.defer(),m=[];return m.push(f.happyPromise(i("maxHeight","height.max",/image/,this.imageDimensions,function(a,b){return a.height<=b}))),m.push(f.happyPromise(i("minHeight","height.min",/image/,this.imageDimensions,function(a,b){return a.height>=b}))),m.push(f.happyPromise(i("maxWidth","width.max",/image/,this.imageDimensions,function(a,b){return a.width<=b}))),m.push(f.happyPromise(i("minWidth","width.min",/image/,this.imageDimensions,function(a,b){return a.width>=b}))),m.push(f.happyPromise(i("dimensions",null,/image/,function(a,b){return f.emptyPromise(b)},function(a){return a}))),m.push(f.happyPromise(i("ratio",null,/image/,this.imageDimensions,function(a,b){for(var c=b.toString().split(","),d=!1,e=0;e<c.length;e++)Math.abs(a.width/a.height-f.ratioToFloat(c[e]))<1e-4&&(d=!0);return d}))),m.push(f.happyPromise(i("maxRatio","ratio.max",/image/,this.imageDimensions,function(a,b){return a.width/a.height-f.ratioToFloat(b)<1e-4}))),m.push(f.happyPromise(i("minRatio","ratio.min",/image/,this.imageDimensions,function(a,b){return a.width/a.height-f.ratioToFloat(b)>-1e-4}))),m.push(f.happyPromise(i("maxDuration","duration.max",/audio|video/,this.mediaDuration,function(a,b){return a<=f.translateScalars(b)}))),m.push(f.happyPromise(i("minDuration","duration.min",/audio|video/,this.mediaDuration,function(a,b){return a>=f.translateScalars(b)}))),m.push(f.happyPromise(i("duration",null,/audio|video/,function(a,b){return f.emptyPromise(b)},function(a){return a}))),m.push(f.happyPromise(i("validateAsyncFn",null,null,function(a,b){return b},function(a){return a===!0||null===a||""===a}))),b.all(m).then(function(){l.resolve(d,d.$ngfValidations)})},f.imageDimensions=function(a){if(a.$ngfWidth&&a.$ngfHeight){var d=b.defer();return c(function(){d.resolve({width:a.$ngfWidth,height:a.$ngfHeight})}),d.promise}if(a.$ngfDimensionPromise)return a.$ngfDimensionPromise;var e=b.defer();return c(function(){return 0!==a.type.indexOf("image")?void e.reject("not image"):void f.dataUrl(a).then(function(b){function d(){var b=h[0].clientWidth,c=h[0].clientHeight;h.remove(),a.$ngfWidth=b,a.$ngfHeight=c,e.resolve({width:b,height:c})}function f(){h.remove(),e.reject("load error")}function g(){c(function(){h[0].parentNode&&(h[0].clientWidth?d():i>10?f():g())},1e3)}var h=angular.element("<img>").attr("src",b).css("visibility","hidden").css("position","fixed").css("max-width","none !important").css("max-height","none !important");h.on("load",d),h.on("error",f);var i=0;g(),angular.element(document.getElementsByTagName("body")[0]).append(h)},function(){e.reject("load error")})}),a.$ngfDimensionPromise=e.promise,a.$ngfDimensionPromise["finally"](function(){delete a.$ngfDimensionPromise}),a.$ngfDimensionPromise},f.mediaDuration=function(a){if(a.$ngfDuration){var d=b.defer();return c(function(){d.resolve(a.$ngfDuration)}),d.promise}if(a.$ngfDurationPromise)return a.$ngfDurationPromise;var e=b.defer();return c(function(){return 0!==a.type.indexOf("audio")&&0!==a.type.indexOf("video")?void e.reject("not media"):void f.dataUrl(a).then(function(b){function d(){var b=h[0].duration;a.$ngfDuration=b,h.remove(),e.resolve(b)}function f(){h.remove(),e.reject("load error")}function g(){c(function(){h[0].parentNode&&(h[0].duration?d():i>10?f():g())},1e3)}var h=angular.element(0===a.type.indexOf("audio")?"<audio>":"<video>").attr("src",b).css("visibility","none").css("position","fixed");h.on("loadedmetadata",d),h.on("error",f);var i=0;g(),angular.element(document.body).append(h)},function(){e.reject("load error")})}),a.$ngfDurationPromise=e.promise,a.$ngfDurationPromise["finally"](function(){delete a.$ngfDurationPromise}),a.$ngfDurationPromise},f}]),ngFileUpload.service("UploadResize",["UploadValidate","$q",function(a,b){var c=a,d=function(a,b,c,d,e){var f=e?Math.max(c/a,d/b):Math.min(c/a,d/b);return{width:a*f,height:b*f,marginX:a*f-c,marginY:b*f-d}},e=function(a,e,f,g,h,i,j,k){var l=b.defer(),m=document.createElement("canvas"),n=document.createElement("img");return n.onload=function(){if(null!=k&&k(n.width,n.height)===!1)return void l.reject("resizeIf");try{if(i){var a=c.ratioToFloat(i),b=n.width/n.height;a>b?(e=n.width,f=e/a):(f=n.height,e=f*a)}e||(e=n.width),f||(f=n.height);var o=d(n.width,n.height,e,f,j);m.width=Math.min(o.width,e),m.height=Math.min(o.height,f);var p=m.getContext("2d");p.drawImage(n,Math.min(0,-o.marginX/2),Math.min(0,-o.marginY/2),o.width,o.height),l.resolve(m.toDataURL(h||"image/WebP",g||.934))}catch(q){l.reject(q)}},n.onerror=function(){l.reject()},n.src=a,l.promise};return c.dataUrltoBlob=function(a,b,c){for(var d=a.split(","),e=d[0].match(/:(.*?);/)[1],f=atob(d[1]),g=f.length,h=new Uint8Array(g);g--;)h[g]=f.charCodeAt(g);var i=new window.Blob([h],{type:e});return i.name=b,i.$ngfOrigSize=c,i},c.isResizeSupported=function(){var a=document.createElement("canvas");return window.atob&&a.getContext&&a.getContext("2d")&&window.Blob},c.isResizeSupported()&&Object.defineProperty(window.Blob.prototype,"name",{get:function(){return this.$ngfName},set:function(a){this.$ngfName=a},configurable:!0}),c.resize=function(a,d,f,g,h,i,j,k,l){if(0!==a.type.indexOf("image"))return c.emptyPromise(a);var m=b.defer();return c.dataUrl(a,!0).then(function(b){e(b,d,f,g,h||a.type,i,j,k).then(function(d){if("image/jpeg"===a.type&&l)try{d=c.restoreExif(b,d)}catch(e){setTimeout(function(){throw e},1)}try{var f=c.dataUrltoBlob(d,a.name,a.size);m.resolve(f)}catch(e){m.reject(e)}},function(b){"resizeIf"===b&&m.resolve(a),m.reject(b)})},function(a){m.reject(a)}),m.promise},c}]),function(){function a(a,c,d,e,f,g,h,i,j,k){function l(){return c.attr("disabled")||r("ngfDropDisabled",a)}function m(b,c){i.updateModel(e,d,a,r("ngfChange")||r("ngfDrop"),b,c)}function n(b,c){if(!i.shouldUpdateOn(b,d,a)||!c)return i.rejectPromise([]);var e=[];c.replace(/<(img src|img [^>]* src) *=\"([^\"]*)\"/gi,function(a,b,c){e.push(c)});var f=[],g=[];if(e.length){angular.forEach(e,function(a){f.push(i.urlToBlob(a).then(function(a){g.push(a)}))});var h=k.defer();return k.all(f).then(function(){h.resolve(g)},function(a){h.reject(a)}),h.promise}return i.emptyPromise()}function o(a,b,c,d){var e=r("ngfDragOverClass",a,{$event:c}),f="dragover";if(angular.isString(e))f=e;else if(e&&(e.delay&&(v=e.delay),e.accept||e.reject)){var g=c.dataTransfer.items;if(null!=g&&g.length)for(var h=e.pattern||r("ngfPattern",a,{$event:c}),j=g.length;j--;){if(!i.validatePattern(g[j],h)){f=e.reject;break}f=e.accept}else f=e.accept}d(f)}function p(b,c,e,f){function g(a,b){var c=k.defer();if(null!=a)if(a.isDirectory){var d=[i.emptyPromise()];if(m){var e={type:"directory"};e.name=e.path=(b||"")+a.name+a.name,n.push(e)}var f=a.createReader(),h=[],p=function(){f.readEntries(function(e){try{e.length?(h=h.concat(Array.prototype.slice.call(e||[],0)),p()):(angular.forEach(h.slice(0),function(c){n.length<=j&&l>=o&&d.push(g(c,(b?b:"")+a.name+"/"))}),k.all(d).then(function(){c.resolve()},function(a){c.reject(a)}))}catch(f){c.reject(f)}},function(a){c.reject(a)})};p()}else a.file(function(a){try{a.path=(b?b:"")+a.name,m&&(a=i.rename(a,a.path)),n.push(a),o+=a.size,c.resolve()}catch(d){c.reject(d)}},function(a){c.reject(a)});return c.promise}var j=i.getValidationAttr(d,a,"maxFiles")||Number.MAX_VALUE,l=i.getValidationAttr(d,a,"maxTotalSize")||Number.MAX_VALUE,m=r("ngfIncludeDir",a),n=[],o=0,p=[i.emptyPromise()];if(b&&b.length>0&&"file"!==h.protocol())for(var q=0;q<b.length;q++){if(b[q].webkitGetAsEntry&&b[q].webkitGetAsEntry()&&b[q].webkitGetAsEntry().isDirectory){var s=b[q].webkitGetAsEntry();if(s.isDirectory&&!e)continue;null!=s&&p.push(g(s))}else{var t=b[q].getAsFile();null!=t&&(n.push(t),o+=t.size)}if(n.length>j||o>l||!f&&n.length>0)break}else if(null!=c)for(var u=0;u<c.length;u++){var v=c.item(u);if((v.type||v.size>0)&&(n.push(v),o+=v.size),n.length>j||o>l||!f&&n.length>0)break}var w=k.defer();return k.all(p).then(function(){if(f||m||!n.length)w.resolve(n);else{for(var a=0;n[a]&&"directory"===n[a].type;)a++;w.resolve([n[a]])}},function(a){w.reject(a)}),w.promise}var q=b(),r=function(a,b,c){return i.attrGetter(a,d,b,c)};if(r("dropAvailable")&&g(function(){a[r("dropAvailable")]?a[r("dropAvailable")].value=q:a[r("dropAvailable")]=q}),!q)return void(r("ngfHideOnDropNotAvailable",a)===!0&&c.css("display","none"));null==r("ngfSelect")&&i.registerModelChangeValidator(e,d,a);var s,t=null,u=f(r("ngfStopPropagation")),v=1;c[0].addEventListener("dragover",function(b){if(!l()&&i.shouldUpdateOn("drop",d,a)){if(b.preventDefault(),u(a)&&b.stopPropagation(),navigator.userAgent.indexOf("Chrome")>-1){var e=b.dataTransfer.effectAllowed;b.dataTransfer.dropEffect="move"===e||"linkMove"===e?"move":"copy"}g.cancel(t),s||(s="C",o(a,d,b,function(d){s=d,c.addClass(s),r("ngfDrag",a,{$isDragging:!0,$class:s,$event:b})}))}},!1),c[0].addEventListener("dragenter",function(b){!l()&&i.shouldUpdateOn("drop",d,a)&&(b.preventDefault(),u(a)&&b.stopPropagation())},!1),c[0].addEventListener("dragleave",function(b){!l()&&i.shouldUpdateOn("drop",d,a)&&(b.preventDefault(),u(a)&&b.stopPropagation(),t=g(function(){s&&c.removeClass(s),s=null,r("ngfDrag",a,{$isDragging:!1,$event:b})},v||100))},!1),c[0].addEventListener("drop",function(b){if(!l()&&i.shouldUpdateOn("drop",d,a)){b.preventDefault(),u(a)&&b.stopPropagation(),s&&c.removeClass(s),s=null;var e,f=b.dataTransfer.items;try{e=b.dataTransfer&&b.dataTransfer.getData&&b.dataTransfer.getData("text/html")}catch(g){}p(f,b.dataTransfer.files,r("ngfAllowDir",a)!==!1,r("multiple")||r("ngfMultiple",a)).then(function(a){a.length?m(a,b):n("dropUrl",e).then(function(a){m(a,b)})})}},!1),c[0].addEventListener("paste",function(b){if(navigator.userAgent.toLowerCase().indexOf("firefox")>-1&&r("ngfEnableFirefoxPaste",a)&&b.preventDefault(),!l()&&i.shouldUpdateOn("paste",d,a)){var c=[],e=b.clipboardData||b.originalEvent.clipboardData;if(e&&e.items)for(var f=0;f<e.items.length;f++)-1!==e.items[f].type.indexOf("image")&&c.push(e.items[f].getAsFile());c.length?m(c,b):n("pasteUrl",e).then(function(a){m(a,b)})}},!1),navigator.userAgent.toLowerCase().indexOf("firefox")>-1&&r("ngfEnableFirefoxPaste",a)&&(c.attr("contenteditable",!0),c.on("keypress",function(a){a.metaKey||a.ctrlKey||a.preventDefault()}))}function b(){var a=document.createElement("div");return"draggable"in a&&"ondrop"in a&&!/Edge\/12./i.test(navigator.userAgent)}ngFileUpload.directive("ngfDrop",["$parse","$timeout","$location","Upload","$http","$q",function(b,c,d,e,f,g){
return{restrict:"AEC",require:"?ngModel",link:function(h,i,j,k){a(h,i,j,k,b,c,d,e,f,g)}}}]),ngFileUpload.directive("ngfNoFileDrop",function(){return function(a,c){b()&&c.css("display","none")}}),ngFileUpload.directive("ngfDropAvailable",["$parse","$timeout","Upload",function(a,c,d){return function(e,f,g){if(b()){var h=a(d.attrGetter("ngfDropAvailable",g));c(function(){h(e),h.assign&&h.assign(e,!0)})}}}])}(),ngFileUpload.service("UploadExif",["UploadResize","$q",function(a,b){function c(a,b,c,d){switch(b){case 2:return a.transform(-1,0,0,1,c,0);case 3:return a.transform(-1,0,0,-1,c,d);case 4:return a.transform(1,0,0,-1,0,d);case 5:return a.transform(0,1,1,0,0,0);case 6:return a.transform(0,1,-1,0,d,0);case 7:return a.transform(0,-1,-1,0,d,c);case 8:return a.transform(0,-1,1,0,0,c)}}function d(a){for(var b="",c=new Uint8Array(a),d=c.byteLength,e=0;d>e;e++)b+=String.fromCharCode(c[e]);return window.btoa(b)}var e=a;return e.isExifSupported=function(){return window.FileReader&&(new FileReader).readAsArrayBuffer&&e.isResizeSupported()},e.readOrientation=function(a){var c=b.defer(),d=new FileReader,e=a.slice?a.slice(0,65536):a;return d.readAsArrayBuffer(e),d.onerror=function(a){return c.reject(a)},d.onload=function(a){var b={orientation:1},d=new DataView(this.result);if(65496!==d.getUint16(0,!1))return c.resolve(b);for(var e=d.byteLength,f=2;e>f;){var g=d.getUint16(f,!1);if(f+=2,65505===g){if(1165519206!==d.getUint32(f+=2,!1))return c.resolve(b);var h=18761===d.getUint16(f+=6,!1);f+=d.getUint32(f+4,h);var i=d.getUint16(f,h);f+=2;for(var j=0;i>j;j++)if(274===d.getUint16(f+12*j,h)){var k=d.getUint16(f+12*j+8,h);return k>=2&&8>=k&&(d.setUint16(f+12*j+8,1,h),b.fixedArrayBuffer=a.target.result),b.orientation=k,c.resolve(b)}}else{if(65280!==(65280&g))break;f+=d.getUint16(f,!1)}}return c.resolve(b)},c.promise},e.applyExifRotation=function(a){if(0!==a.type.indexOf("image/jpeg"))return e.emptyPromise(a);var f=b.defer();return e.readOrientation(a).then(function(b){return b.orientation<2||b.orientation>8?f.resolve(a):void e.dataUrl(a,!0).then(function(g){var h=document.createElement("canvas"),i=document.createElement("img");i.onload=function(){try{h.width=b.orientation>4?i.height:i.width,h.height=b.orientation>4?i.width:i.height;var g=h.getContext("2d");c(g,b.orientation,i.width,i.height),g.drawImage(i,0,0);var j=h.toDataURL(a.type||"image/WebP",.934);j=e.restoreExif(d(b.fixedArrayBuffer),j);var k=e.dataUrltoBlob(j,a.name);f.resolve(k)}catch(l){return f.reject(l)}},i.onerror=function(){f.reject()},i.src=g},function(a){f.reject(a)})},function(a){f.reject(a)}),f.promise},e.restoreExif=function(a,b){var c={};return c.KEY_STR="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",c.encode64=function(a){var b,c,d,e,f,g="",h="",i="",j=0;do b=a[j++],c=a[j++],h=a[j++],d=b>>2,e=(3&b)<<4|c>>4,f=(15&c)<<2|h>>6,i=63&h,isNaN(c)?f=i=64:isNaN(h)&&(i=64),g=g+this.KEY_STR.charAt(d)+this.KEY_STR.charAt(e)+this.KEY_STR.charAt(f)+this.KEY_STR.charAt(i),b=c=h="",d=e=f=i="";while(j<a.length);return g},c.restore=function(a,b){a.match("data:image/jpeg;base64,")&&(a=a.replace("data:image/jpeg;base64,",""));var c=this.decode64(a),d=this.slice2Segments(c),e=this.exifManipulation(b,d);return"data:image/jpeg;base64,"+this.encode64(e)},c.exifManipulation=function(a,b){var c=this.getExifArray(b),d=this.insertExif(a,c);return new Uint8Array(d)},c.getExifArray=function(a){for(var b,c=0;c<a.length;c++)if(b=a[c],255===b[0]&225===b[1])return b;return[]},c.insertExif=function(a,b){var c=a.replace("data:image/jpeg;base64,",""),d=this.decode64(c),e=d.indexOf(255,3),f=d.slice(0,e),g=d.slice(e),h=f;return h=h.concat(b),h=h.concat(g)},c.slice2Segments=function(a){for(var b=0,c=[];;){if(255===a[b]&218===a[b+1])break;if(255===a[b]&216===a[b+1])b+=2;else{var d=256*a[b+2]+a[b+3],e=b+d+2,f=a.slice(b,e);c.push(f),b=e}if(b>a.length)break}return c},c.decode64=function(a){var b,c,d,e,f,g="",h="",i=0,j=[],k=/[^A-Za-z0-9\+\/\=]/g;k.exec(a)&&console.log("There were invalid base64 characters in the input text.\nValid base64 characters are A-Z, a-z, 0-9, NaNExpect errors in decoding."),a=a.replace(/[^A-Za-z0-9\+\/\=]/g,"");do d=this.KEY_STR.indexOf(a.charAt(i++)),e=this.KEY_STR.indexOf(a.charAt(i++)),f=this.KEY_STR.indexOf(a.charAt(i++)),h=this.KEY_STR.indexOf(a.charAt(i++)),b=d<<2|e>>4,c=(15&e)<<4|f>>2,g=(3&f)<<6|h,j.push(b),64!==f&&j.push(c),64!==h&&j.push(g),b=c=g="",d=e=f=h="";while(i<a.length);return j},c.restore(a,b)},e}]);
!function e(t,n,r){function o(a,c){if(!n[a]){if(!t[a]){var s="function"==typeof require&&require;if(!c&&s)return s(a,!0);if(i)return i(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var f=n[a]={exports:{}};t[a][0].call(f.exports,function(e){var n=t[a][1][e];return o(n?n:e)},f,f.exports,e,t,n,r)}return n[a].exports}for(var i="function"==typeof require&&require,a=0;a<r.length;a++)o(r[a]);return o}({1:[function(e,t,n){!function(e){"use strict";if(e.URL=e.URL||e.webkitURL,e.Blob&&e.URL)try{return void new Blob}catch(t){}var n=e.BlobBuilder||e.WebKitBlobBuilder||e.MozBlobBuilder||function(e){var t=function(e){return Object.prototype.toString.call(e).match(/^\[object\s(.*)\]$/)[1]},n=function(){this.data=[]},r=function(e,t,n){this.data=e,this.size=e.length,this.type=t,this.encoding=n},o=n.prototype,i=r.prototype,a=e.FileReaderSync,c=function(e){this.code=this[this.name=e]},s="NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR".split(" "),u=s.length,f=e.URL||e.webkitURL||e,l=f.createObjectURL,d=f.revokeObjectURL,p=f,v=e.btoa,b=e.atob,h=e.ArrayBuffer,w=e.Uint8Array,g=/^[\w-]+:\/*\[?[\w\.:-]+\]?(?::[0-9]+)?/;for(r.fake=i.fake=!0;u--;)c.prototype[s[u]]=u+1;return f.createObjectURL||(p=e.URL=function(e){var t,n=document.createElementNS("http://www.w3.org/1999/xhtml","a");return n.href=e,"origin"in n||("data:"===n.protocol.toLowerCase()?n.origin=null:(t=e.match(g),n.origin=t&&t[1])),n}),p.createObjectURL=function(e){var t,n=e.type;return null===n&&(n="application/octet-stream"),e instanceof r?(t="data:"+n,"base64"===e.encoding?t+";base64,"+e.data:"URI"===e.encoding?t+","+decodeURIComponent(e.data):v?t+";base64,"+v(e.data):t+","+encodeURIComponent(e.data)):l?l.call(f,e):void 0},p.revokeObjectURL=function(e){"data:"!==e.substring(0,5)&&d&&d.call(f,e)},o.append=function(e){var n=this.data;if(w&&(e instanceof h||e instanceof w)){for(var o="",i=new w(e),s=0,u=i.length;u>s;s++)o+=String.fromCharCode(i[s]);n.push(o)}else if("Blob"===t(e)||"File"===t(e)){if(!a)throw new c("NOT_READABLE_ERR");var f=new a;n.push(f.readAsBinaryString(e))}else e instanceof r?"base64"===e.encoding&&b?n.push(b(e.data)):"URI"===e.encoding?n.push(decodeURIComponent(e.data)):"raw"===e.encoding&&n.push(e.data):("string"!=typeof e&&(e+=""),n.push(unescape(encodeURIComponent(e))))},o.getBlob=function(e){return arguments.length||(e=null),new r(this.data.join(""),e,"raw")},o.toString=function(){return"[object BlobBuilder]"},i.slice=function(e,t,n){var o=arguments.length;return 3>o&&(n=null),new r(this.data.slice(e,o>1?t:this.data.length),n,this.encoding)},i.toString=function(){return"[object Blob]"},i.close=function(){this.size=0,delete this.data},n}(e);e.Blob=function(e,t){var r=t?t.type||"":"",o=new n;if(e)for(var i=0,a=e.length;a>i;i++)Uint8Array&&e[i]instanceof Uint8Array?o.append(e[i].buffer):o.append(e[i]);var c=o.getBlob(r);return!c.slice&&c.webkitSlice&&(c.slice=c.webkitSlice),c};var r=Object.getPrototypeOf||function(e){return e.__proto__};e.Blob.prototype=r(new e.Blob)}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||this.content||this)},{}],2:[function(e,t,n){var r=r||function(e){"use strict";if("undefined"==typeof navigator||!/MSIE [1-9]\./.test(navigator.userAgent)){var t=e.document,n=function(){return e.URL||e.webkitURL||e},r=t.createElementNS("http://www.w3.org/1999/xhtml","a"),o="download"in r,i=function(e){var t=new MouseEvent("click");e.dispatchEvent(t)},a=/Version\/[\d\.]+.*Safari/.test(navigator.userAgent),c=e.webkitRequestFileSystem,s=e.requestFileSystem||c||e.mozRequestFileSystem,u=function(t){(e.setImmediate||e.setTimeout)(function(){throw t},0)},f="application/octet-stream",l=0,d=500,p=function(t){var r=function(){"string"==typeof t?n().revokeObjectURL(t):t.remove()};e.chrome?r():setTimeout(r,d)},v=function(e,t,n){t=[].concat(t);for(var r=t.length;r--;){var o=e["on"+t[r]];if("function"==typeof o)try{o.call(e,n||e)}catch(i){u(i)}}},b=function(e){return/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)?new Blob(["\ufeff",e],{type:e.type}):e},h=function(t,u,d){d||(t=b(t));var h,w,g,R=this,y=t.type,S=!1,m=function(){v(R,"writestart progress write writeend".split(" "))},E=function(){if(w&&a&&"undefined"!=typeof FileReader){var r=new FileReader;return r.onloadend=function(){var e=r.result;w.location.href="data:attachment/file"+e.slice(e.search(/[,;]/)),R.readyState=R.DONE,m()},r.readAsDataURL(t),void(R.readyState=R.INIT)}if((S||!h)&&(h=n().createObjectURL(t)),w)w.location.href=h;else{var o=e.open(h,"_blank");void 0==o&&a&&(e.location.href=h)}R.readyState=R.DONE,m(),p(h)},O=function(e){return function(){return R.readyState!==R.DONE?e.apply(this,arguments):void 0}},U={create:!0,exclusive:!1};return R.readyState=R.INIT,u||(u="download"),o?(h=n().createObjectURL(t),void setTimeout(function(){r.href=h,r.download=u,i(r),m(),p(h),R.readyState=R.DONE})):(e.chrome&&y&&y!==f&&(g=t.slice||t.webkitSlice,t=g.call(t,0,t.size,f),S=!0),c&&"download"!==u&&(u+=".download"),(y===f||c)&&(w=e),s?(l+=t.size,void s(e.TEMPORARY,l,O(function(e){e.root.getDirectory("saved",U,O(function(e){var n=function(){e.getFile(u,U,O(function(e){e.createWriter(O(function(n){n.onwriteend=function(t){w.location.href=e.toURL(),R.readyState=R.DONE,v(R,"writeend",t),p(e)},n.onerror=function(){var e=n.error;e.code!==e.ABORT_ERR&&E()},"writestart progress write abort".split(" ").forEach(function(e){n["on"+e]=R["on"+e]}),n.write(t),R.abort=function(){n.abort(),R.readyState=R.DONE},R.readyState=R.WRITING}),E)}),E)};e.getFile(u,{create:!1},O(function(e){e.remove(),n()}),O(function(e){e.code===e.NOT_FOUND_ERR?n():E()}))}),E)}),E)):void E())},w=h.prototype,g=function(e,t,n){return new h(e,t,n)};return"undefined"!=typeof navigator&&navigator.msSaveOrOpenBlob?function(e,t,n){return n||(e=b(e)),navigator.msSaveOrOpenBlob(e,t||"download")}:(w.abort=function(){var e=this;e.readyState=e.DONE,v(e,"abort")},w.readyState=w.INIT=0,w.WRITING=1,w.DONE=2,w.error=w.onwritestart=w.onprogress=w.onwrite=w.onabort=w.onerror=w.onwriteend=null,g)}}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||this.content);"undefined"!=typeof t&&t.exports?t.exports.saveAs=r:"undefined"!=typeof define&&null!==define&&null!=define.amd&&define([],function(){return r})},{}],3:[function(e,t,n){"use strict";angular.module("ngFileSaver",[]).factory("FileSaver",["Blob","SaveAs","FileSaverUtils",e("./angular-file-saver.service")]).factory("FileSaverUtils",[e("./utils/utils.service.js")]).factory("Blob",["$window",e("./dependencies/blob-bundle.service.js")]).factory("SaveAs",[e("./dependencies/file-saver-bundle.service.js")])},{"./angular-file-saver.service":4,"./dependencies/blob-bundle.service.js":5,"./dependencies/file-saver-bundle.service.js":6,"./utils/utils.service.js":7}],4:[function(e,t,n){"use strict";t.exports=function(e,t,n){function r(e,r,o){try{t(e,r,o)}catch(i){n.handleErrors(i.message)}}return{saveAs:function(e,t,o){return n.isBlobInstance(e)||n.handleErrors("Data argument should be a blob instance"),n.isString(t)||n.handleErrors("Filename argument should be a string"),r(e,t,o)}}}},{}],5:[function(e,t,n){"use strict";e("Blob.js"),t.exports=function(e){return e.Blob}},{"Blob.js":1}],6:[function(e,t,n){"use strict";t.exports=function(){return e("FileSaver.js").saveAs||function(){}}},{"FileSaver.js":2}],7:[function(e,t,n){"use strict";t.exports=function(){return{handleErrors:function(e){throw new Error(e)},isString:function(e){return"string"==typeof e||e instanceof String},isUndefined:function(e){return"undefined"==typeof e},isBlobInstance:function(e){return e instanceof Blob}}}},{}]},{},[3]);
/* xlsx.js (C) 2013-present SheetJS -- http://sheetjs.com */
(function (e) { if ("object" == typeof exports && "undefined" != typeof module) module.exports = e(); else if ("function" == typeof define && define.amd) { JSZip = e(); define([], e) } else { var f; "undefined" != typeof window ? f = window : "undefined" != typeof global ? f = global : "undefined" != typeof $ && $.global ? f = $.global : "undefined" != typeof self && (f = self), f.JSZip = e() } })(function () {
    var define, module, exports; return function e(t, n, r) { function s(o, u) { if (!n[o]) { if (!t[o]) { var a = typeof require == "function" && require; if (!u && a) return a(o, !0); if (i) return i(o, !0); throw new Error("Cannot find module '" + o + "'") } var f = n[o] = { exports: {} }; t[o][0].call(f.exports, function (e) { var n = t[o][1][e]; return s(n ? n : e) }, f, f.exports, e, t, n, r) } return n[o].exports } var i = typeof require == "function" && require; for (var o = 0; o < r.length; o++) s(r[o]); return s }({
        1: [function (_dereq_, module, exports) { "use strict"; var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="; exports.encode = function (input, utf8) { var output = ""; var chr1, chr2, chr3, enc1, enc2, enc3, enc4; var i = 0; while (i < input.length) { chr1 = input.charCodeAt(i++); chr2 = input.charCodeAt(i++); chr3 = input.charCodeAt(i++); enc1 = chr1 >> 2; enc2 = (chr1 & 3) << 4 | chr2 >> 4; enc3 = (chr2 & 15) << 2 | chr3 >> 6; enc4 = chr3 & 63; if (isNaN(chr2)) { enc3 = enc4 = 64 } else if (isNaN(chr3)) { enc4 = 64 } output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4) } return output }; exports.decode = function (input, utf8) { var output = ""; var chr1, chr2, chr3; var enc1, enc2, enc3, enc4; var i = 0; input = input.replace(/[^A-Za-z0-9\+\/\=]/g, ""); while (i < input.length) { enc1 = _keyStr.indexOf(input.charAt(i++)); enc2 = _keyStr.indexOf(input.charAt(i++)); enc3 = _keyStr.indexOf(input.charAt(i++)); enc4 = _keyStr.indexOf(input.charAt(i++)); chr1 = enc1 << 2 | enc2 >> 4; chr2 = (enc2 & 15) << 4 | enc3 >> 2; chr3 = (enc3 & 3) << 6 | enc4; output = output + String.fromCharCode(chr1); if (enc3 != 64) { output = output + String.fromCharCode(chr2) } if (enc4 != 64) { output = output + String.fromCharCode(chr3) } } return output } }, {}], 2: [function (_dereq_, module, exports) { "use strict"; function CompressedObject() { this.compressedSize = 0; this.uncompressedSize = 0; this.crc32 = 0; this.compressionMethod = null; this.compressedContent = null } CompressedObject.prototype = { getContent: function () { return null }, getCompressedContent: function () { return null } }; module.exports = CompressedObject }, {}], 3: [function (_dereq_, module, exports) { "use strict"; exports.STORE = { magic: "\0\0", compress: function (content) { return content }, uncompress: function (content) { return content }, compressInputType: null, uncompressInputType: null }; exports.DEFLATE = _dereq_("./flate") }, { "./flate": 8 }], 4: [function (_dereq_, module, exports) { "use strict"; var utils = _dereq_("./utils"); var table = [0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918e3, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117]; module.exports = function crc32(input, crc) { if (typeof input === "undefined" || !input.length) { return 0 } var isArray = utils.getTypeOf(input) !== "string"; if (typeof crc == "undefined") { crc = 0 } var x = 0; var y = 0; var b = 0; crc = crc ^ -1; for (var i = 0, iTop = input.length; i < iTop; i++) { b = isArray ? input[i] : input.charCodeAt(i); y = (crc ^ b) & 255; x = table[y]; crc = crc >>> 8 ^ x } return crc ^ -1 } }, { "./utils": 21 }], 5: [function (_dereq_, module, exports) { "use strict"; var utils = _dereq_("./utils"); function DataReader(data) { this.data = null; this.length = 0; this.index = 0 } DataReader.prototype = { checkOffset: function (offset) { this.checkIndex(this.index + offset) }, checkIndex: function (newIndex) { if (this.length < newIndex || newIndex < 0) { throw new Error("End of data reached (data length = " + this.length + ", asked index = " + newIndex + "). Corrupted zip ?") } }, setIndex: function (newIndex) { this.checkIndex(newIndex); this.index = newIndex }, skip: function (n) { this.setIndex(this.index + n) }, byteAt: function (i) { }, readInt: function (size) { var result = 0, i; this.checkOffset(size); for (i = this.index + size - 1; i >= this.index; i--) { result = (result << 8) + this.byteAt(i) } this.index += size; return result }, readString: function (size) { return utils.transformTo("string", this.readData(size)) }, readData: function (size) { }, lastIndexOfSignature: function (sig) { }, readDate: function () { var dostime = this.readInt(4); return new Date((dostime >> 25 & 127) + 1980, (dostime >> 21 & 15) - 1, dostime >> 16 & 31, dostime >> 11 & 31, dostime >> 5 & 63, (dostime & 31) << 1) } }; module.exports = DataReader }, { "./utils": 21 }], 6: [function (_dereq_, module, exports) { "use strict"; exports.base64 = false; exports.binary = false; exports.dir = false; exports.createFolders = false; exports.date = null; exports.compression = null; exports.comment = null }, {}], 7: [function (_dereq_, module, exports) { "use strict"; var utils = _dereq_("./utils"); exports.string2binary = function (str) { return utils.string2binary(str) }; exports.string2Uint8Array = function (str) { return utils.transformTo("uint8array", str) }; exports.uint8Array2String = function (array) { return utils.transformTo("string", array) }; exports.string2Blob = function (str) { var buffer = utils.transformTo("arraybuffer", str); return utils.arrayBuffer2Blob(buffer) }; exports.arrayBuffer2Blob = function (buffer) { return utils.arrayBuffer2Blob(buffer) }; exports.transformTo = function (outputType, input) { return utils.transformTo(outputType, input) }; exports.getTypeOf = function (input) { return utils.getTypeOf(input) }; exports.checkSupport = function (type) { return utils.checkSupport(type) }; exports.MAX_VALUE_16BITS = utils.MAX_VALUE_16BITS; exports.MAX_VALUE_32BITS = utils.MAX_VALUE_32BITS; exports.pretty = function (str) { return utils.pretty(str) }; exports.findCompression = function (compressionMethod) { return utils.findCompression(compressionMethod) }; exports.isRegExp = function (object) { return utils.isRegExp(object) } }, { "./utils": 21 }], 8: [function (_dereq_, module, exports) { "use strict"; var USE_TYPEDARRAY = typeof Uint8Array !== "undefined" && typeof Uint16Array !== "undefined" && typeof Uint32Array !== "undefined"; var pako = _dereq_("pako"); exports.uncompressInputType = USE_TYPEDARRAY ? "uint8array" : "array"; exports.compressInputType = USE_TYPEDARRAY ? "uint8array" : "array"; exports.magic = "\b\0"; exports.compress = function (input) { return pako.deflateRaw(input) }; exports.uncompress = function (input) { return pako.inflateRaw(input) } }, { pako: 24 }], 9: [function (_dereq_, module, exports) { "use strict"; var base64 = _dereq_("./base64"); function JSZip(data, options) { if (!(this instanceof JSZip)) return new JSZip(data, options); this.files = {}; this.comment = null; this.root = ""; if (data) { this.load(data, options) } this.clone = function () { var newObj = new JSZip; for (var i in this) { if (typeof this[i] !== "function") { newObj[i] = this[i] } } return newObj } } JSZip.prototype = _dereq_("./object"); JSZip.prototype.load = _dereq_("./load"); JSZip.support = _dereq_("./support"); JSZip.defaults = _dereq_("./defaults"); JSZip.utils = _dereq_("./deprecatedPublicUtils"); JSZip.base64 = { encode: function (input) { return base64.encode(input) }, decode: function (input) { return base64.decode(input) } }; JSZip.compressions = _dereq_("./compressions"); module.exports = JSZip }, { "./base64": 1, "./compressions": 3, "./defaults": 6, "./deprecatedPublicUtils": 7, "./load": 10, "./object": 13, "./support": 17 }], 10: [function (_dereq_, module, exports) { "use strict"; var base64 = _dereq_("./base64"); var ZipEntries = _dereq_("./zipEntries"); module.exports = function (data, options) { var files, zipEntries, i, input; options = options || {}; if (options.base64) { data = base64.decode(data) } zipEntries = new ZipEntries(data, options); files = zipEntries.files; for (i = 0; i < files.length; i++) { input = files[i]; this.file(input.fileName, input.decompressed, { binary: true, optimizedBinaryString: true, date: input.date, dir: input.dir, comment: input.fileComment.length ? input.fileComment : null, createFolders: options.createFolders }) } if (zipEntries.zipComment.length) { this.comment = zipEntries.zipComment } return this } }, { "./base64": 1, "./zipEntries": 22 }], 11: [function (_dereq_, module, exports) { (function (Buffer) { "use strict"; module.exports = function (data, encoding) { return new Buffer(data, encoding) }; module.exports.test = function (b) { return Buffer.isBuffer(b) } }).call(this, typeof Buffer !== "undefined" ? Buffer : undefined) }, {}], 12: [function (_dereq_, module, exports) { "use strict"; var Uint8ArrayReader = _dereq_("./uint8ArrayReader"); function NodeBufferReader(data) { this.data = data; this.length = this.data.length; this.index = 0 } NodeBufferReader.prototype = new Uint8ArrayReader; NodeBufferReader.prototype.readData = function (size) { this.checkOffset(size); var result = this.data.slice(this.index, this.index + size); this.index += size; return result }; module.exports = NodeBufferReader }, { "./uint8ArrayReader": 18 }], 13: [function (_dereq_, module, exports) { "use strict"; var support = _dereq_("./support"); var utils = _dereq_("./utils"); var crc32 = _dereq_("./crc32"); var signature = _dereq_("./signature"); var defaults = _dereq_("./defaults"); var base64 = _dereq_("./base64"); var compressions = _dereq_("./compressions"); var CompressedObject = _dereq_("./compressedObject"); var nodeBuffer = _dereq_("./nodeBuffer"); var utf8 = _dereq_("./utf8"); var StringWriter = _dereq_("./stringWriter"); var Uint8ArrayWriter = _dereq_("./uint8ArrayWriter"); var getRawData = function (file) { if (file._data instanceof CompressedObject) { file._data = file._data.getContent(); file.options.binary = true; file.options.base64 = false; if (utils.getTypeOf(file._data) === "uint8array") { var copy = file._data; file._data = new Uint8Array(copy.length); if (copy.length !== 0) { file._data.set(copy, 0) } } } return file._data }; var getBinaryData = function (file) { var result = getRawData(file), type = utils.getTypeOf(result); if (type === "string") { if (!file.options.binary) { if (support.nodebuffer) { return nodeBuffer(result, "utf-8") } } return file.asBinary() } return result }; var dataToString = function (asUTF8) { var result = getRawData(this); if (result === null || typeof result === "undefined") { return "" } if (this.options.base64) { result = base64.decode(result) } if (asUTF8 && this.options.binary) { result = out.utf8decode(result) } else { result = utils.transformTo("string", result) } if (!asUTF8 && !this.options.binary) { result = utils.transformTo("string", out.utf8encode(result)) } return result }; var ZipObject = function (name, data, options) { this.name = name; this.dir = options.dir; this.date = options.date; this.comment = options.comment; this._data = data; this.options = options; this._initialMetadata = { dir: options.dir, date: options.date } }; ZipObject.prototype = { asText: function () { return dataToString.call(this, true) }, asBinary: function () { return dataToString.call(this, false) }, asNodeBuffer: function () { var result = getBinaryData(this); return utils.transformTo("nodebuffer", result) }, asUint8Array: function () { var result = getBinaryData(this); return utils.transformTo("uint8array", result) }, asArrayBuffer: function () { return this.asUint8Array().buffer } }; var decToHex = function (dec, bytes) { var hex = "", i; for (i = 0; i < bytes; i++) { hex += String.fromCharCode(dec & 255); dec = dec >>> 8 } return hex }; var extend = function () { var result = {}, i, attr; for (i = 0; i < arguments.length; i++) { for (attr in arguments[i]) { if (arguments[i].hasOwnProperty(attr) && typeof result[attr] === "undefined") { result[attr] = arguments[i][attr] } } } return result }; var prepareFileAttrs = function (o) { o = o || {}; if (o.base64 === true && (o.binary === null || o.binary === undefined)) { o.binary = true } o = extend(o, defaults); o.date = o.date || new Date; if (o.compression !== null) o.compression = o.compression.toUpperCase(); return o }; var fileAdd = function (name, data, o) { var dataType = utils.getTypeOf(data), parent; o = prepareFileAttrs(o); if (o.createFolders && (parent = parentFolder(name))) { folderAdd.call(this, parent, true) } if (o.dir || data === null || typeof data === "undefined") { o.base64 = false; o.binary = false; data = null } else if (dataType === "string") { if (o.binary && !o.base64) { if (o.optimizedBinaryString !== true) { data = utils.string2binary(data) } } } else { o.base64 = false; o.binary = true; if (!dataType && !(data instanceof CompressedObject)) { throw new Error("The data of '" + name + "' is in an unsupported format !") } if (dataType === "arraybuffer") { data = utils.transformTo("uint8array", data) } } var object = new ZipObject(name, data, o); this.files[name] = object; return object }; var parentFolder = function (path) { if (path.slice(-1) == "/") { path = path.substring(0, path.length - 1) } var lastSlash = path.lastIndexOf("/"); return lastSlash > 0 ? path.substring(0, lastSlash) : "" }; var folderAdd = function (name, createFolders) { if (name.slice(-1) != "/") { name += "/" } createFolders = typeof createFolders !== "undefined" ? createFolders : false; if (!this.files[name]) { fileAdd.call(this, name, null, { dir: true, createFolders: createFolders }) } return this.files[name] }; var generateCompressedObjectFrom = function (file, compression) { var result = new CompressedObject, content; if (file._data instanceof CompressedObject) { result.uncompressedSize = file._data.uncompressedSize; result.crc32 = file._data.crc32; if (result.uncompressedSize === 0 || file.dir) { compression = compressions["STORE"]; result.compressedContent = ""; result.crc32 = 0 } else if (file._data.compressionMethod === compression.magic) { result.compressedContent = file._data.getCompressedContent() } else { content = file._data.getContent(); result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content)) } } else { content = getBinaryData(file); if (!content || content.length === 0 || file.dir) { compression = compressions["STORE"]; content = "" } result.uncompressedSize = content.length; result.crc32 = crc32(content); result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content)) } result.compressedSize = result.compressedContent.length; result.compressionMethod = compression.magic; return result }; var generateZipParts = function (name, file, compressedObject, offset) { var data = compressedObject.compressedContent, utfEncodedFileName = utils.transformTo("string", utf8.utf8encode(file.name)), comment = file.comment || "", utfEncodedComment = utils.transformTo("string", utf8.utf8encode(comment)), useUTF8ForFileName = utfEncodedFileName.length !== file.name.length, useUTF8ForComment = utfEncodedComment.length !== comment.length, o = file.options, dosTime, dosDate, extraFields = "", unicodePathExtraField = "", unicodeCommentExtraField = "", dir, date; if (file._initialMetadata.dir !== file.dir) { dir = file.dir } else { dir = o.dir } if (file._initialMetadata.date !== file.date) { date = file.date } else { date = o.date } dosTime = date.getHours(); dosTime = dosTime << 6; dosTime = dosTime | date.getMinutes(); dosTime = dosTime << 5; dosTime = dosTime | date.getSeconds() / 2; dosDate = date.getFullYear() - 1980; dosDate = dosDate << 4; dosDate = dosDate | date.getMonth() + 1; dosDate = dosDate << 5; dosDate = dosDate | date.getDate(); if (useUTF8ForFileName) { unicodePathExtraField = decToHex(1, 1) + decToHex(crc32(utfEncodedFileName), 4) + utfEncodedFileName; extraFields += "up" + decToHex(unicodePathExtraField.length, 2) + unicodePathExtraField } if (useUTF8ForComment) { unicodeCommentExtraField = decToHex(1, 1) + decToHex(this.crc32(utfEncodedComment), 4) + utfEncodedComment; extraFields += "uc" + decToHex(unicodeCommentExtraField.length, 2) + unicodeCommentExtraField } var header = ""; header += "\n\0"; header += useUTF8ForFileName || useUTF8ForComment ? "\0\b" : "\0\0"; header += compressedObject.compressionMethod; header += decToHex(dosTime, 2); header += decToHex(dosDate, 2); header += decToHex(compressedObject.crc32, 4); header += decToHex(compressedObject.compressedSize, 4); header += decToHex(compressedObject.uncompressedSize, 4); header += decToHex(utfEncodedFileName.length, 2); header += decToHex(extraFields.length, 2); var fileRecord = signature.LOCAL_FILE_HEADER + header + utfEncodedFileName + extraFields; var dirRecord = signature.CENTRAL_FILE_HEADER + "\0" + header + decToHex(utfEncodedComment.length, 2) + "\0\0" + "\0\0" + (dir === true ? "\0\0\0" : "\0\0\0\0") + decToHex(offset, 4) + utfEncodedFileName + extraFields + utfEncodedComment; return { fileRecord: fileRecord, dirRecord: dirRecord, compressedObject: compressedObject } }; var out = { load: function (stream, options) { throw new Error("Load method is not defined. Is the file jszip-load.js included ?") }, filter: function (search) { var result = [], filename, relativePath, file, fileClone; for (filename in this.files) { if (!this.files.hasOwnProperty(filename)) { continue } file = this.files[filename]; fileClone = new ZipObject(file.name, file._data, extend(file.options)); relativePath = filename.slice(this.root.length, filename.length); if (filename.slice(0, this.root.length) === this.root && search(relativePath, fileClone)) { result.push(fileClone) } } return result }, file: function (name, data, o) { if (arguments.length === 1) { if (utils.isRegExp(name)) { var regexp = name; return this.filter(function (relativePath, file) { return !file.dir && regexp.test(relativePath) }) } else { return this.filter(function (relativePath, file) { return !file.dir && relativePath === name })[0] || null } } else { name = this.root + name; fileAdd.call(this, name, data, o) } return this }, folder: function (arg) { if (!arg) { return this } if (utils.isRegExp(arg)) { return this.filter(function (relativePath, file) { return file.dir && arg.test(relativePath) }) } var name = this.root + arg; var newFolder = folderAdd.call(this, name); var ret = this.clone(); ret.root = newFolder.name; return ret }, remove: function (name) { name = this.root + name; var file = this.files[name]; if (!file) { if (name.slice(-1) != "/") { name += "/" } file = this.files[name] } if (file && !file.dir) { delete this.files[name] } else { var kids = this.filter(function (relativePath, file) { return file.name.slice(0, name.length) === name }); for (var i = 0; i < kids.length; i++) { delete this.files[kids[i].name] } } return this }, generate: function (options) { options = extend(options || {}, { base64: true, compression: "STORE", type: "base64", comment: null }); utils.checkSupport(options.type); var zipData = [], localDirLength = 0, centralDirLength = 0, writer, i, utfEncodedComment = utils.transformTo("string", this.utf8encode(options.comment || this.comment || "")); for (var name in this.files) { if (!this.files.hasOwnProperty(name)) { continue } var file = this.files[name]; var compressionName = file.options.compression || options.compression.toUpperCase(); var compression = compressions[compressionName]; if (!compression) { throw new Error(compressionName + " is not a valid compression method !") } var compressedObject = generateCompressedObjectFrom.call(this, file, compression); var zipPart = generateZipParts.call(this, name, file, compressedObject, localDirLength); localDirLength += zipPart.fileRecord.length + compressedObject.compressedSize; centralDirLength += zipPart.dirRecord.length; zipData.push(zipPart) } var dirEnd = ""; dirEnd = signature.CENTRAL_DIRECTORY_END + "\0\0" + "\0\0" + decToHex(zipData.length, 2) + decToHex(zipData.length, 2) + decToHex(centralDirLength, 4) + decToHex(localDirLength, 4) + decToHex(utfEncodedComment.length, 2) + utfEncodedComment; var typeName = options.type.toLowerCase(); if (typeName === "uint8array" || typeName === "arraybuffer" || typeName === "blob" || typeName === "nodebuffer") { writer = new Uint8ArrayWriter(localDirLength + centralDirLength + dirEnd.length) } else { writer = new StringWriter(localDirLength + centralDirLength + dirEnd.length) } for (i = 0; i < zipData.length; i++) { writer.append(zipData[i].fileRecord); writer.append(zipData[i].compressedObject.compressedContent) } for (i = 0; i < zipData.length; i++) { writer.append(zipData[i].dirRecord) } writer.append(dirEnd); var zip = writer.finalize(); switch (options.type.toLowerCase()) { case "uint8array":; case "arraybuffer":; case "nodebuffer": return utils.transformTo(options.type.toLowerCase(), zip); case "blob": return utils.arrayBuffer2Blob(utils.transformTo("arraybuffer", zip)); case "base64": return options.base64 ? base64.encode(zip) : zip; default: return zip; } }, crc32: function (input, crc) { return crc32(input, crc) }, utf8encode: function (string) { return utils.transformTo("string", utf8.utf8encode(string)) }, utf8decode: function (input) { return utf8.utf8decode(input) } }; module.exports = out }, { "./base64": 1, "./compressedObject": 2, "./compressions": 3, "./crc32": 4, "./defaults": 6, "./nodeBuffer": 11, "./signature": 14, "./stringWriter": 16, "./support": 17, "./uint8ArrayWriter": 19, "./utf8": 20, "./utils": 21 }], 14: [function (_dereq_, module, exports) { "use strict"; exports.LOCAL_FILE_HEADER = "PK"; exports.CENTRAL_FILE_HEADER = "PK"; exports.CENTRAL_DIRECTORY_END = "PK"; exports.ZIP64_CENTRAL_DIRECTORY_LOCATOR = "PK"; exports.ZIP64_CENTRAL_DIRECTORY_END = "PK"; exports.DATA_DESCRIPTOR = "PK\b" }, {}], 15: [function (_dereq_, module, exports) { "use strict"; var DataReader = _dereq_("./dataReader"); var utils = _dereq_("./utils"); function StringReader(data, optimizedBinaryString) { this.data = data; if (!optimizedBinaryString) { this.data = utils.string2binary(this.data) } this.length = this.data.length; this.index = 0 } StringReader.prototype = new DataReader; StringReader.prototype.byteAt = function (i) { return this.data.charCodeAt(i) }; StringReader.prototype.lastIndexOfSignature = function (sig) { return this.data.lastIndexOf(sig) }; StringReader.prototype.readData = function (size) { this.checkOffset(size); var result = this.data.slice(this.index, this.index + size); this.index += size; return result }; module.exports = StringReader }, { "./dataReader": 5, "./utils": 21 }], 16: [function (_dereq_, module, exports) { "use strict"; var utils = _dereq_("./utils"); var StringWriter = function () { this.data = [] }; StringWriter.prototype = { append: function (input) { input = utils.transformTo("string", input); this.data.push(input) }, finalize: function () { return this.data.join("") } }; module.exports = StringWriter }, { "./utils": 21 }], 17: [function (_dereq_, module, exports) { (function (Buffer) { "use strict"; exports.base64 = true; exports.array = true; exports.string = true; exports.arraybuffer = typeof ArrayBuffer !== "undefined" && typeof Uint8Array !== "undefined"; exports.nodebuffer = typeof Buffer !== "undefined"; exports.uint8array = typeof Uint8Array !== "undefined"; if (typeof ArrayBuffer === "undefined") { exports.blob = false } else { var buffer = new ArrayBuffer(0); try { exports.blob = new Blob([buffer], { type: "application/zip" }).size === 0 } catch (e) { try { var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder; var builder = new Builder; builder.append(buffer); exports.blob = builder.getBlob("application/zip").size === 0 } catch (e) { exports.blob = false } } } }).call(this, typeof Buffer !== "undefined" ? Buffer : undefined) }, {}], 18: [function (_dereq_, module, exports) { "use strict"; var DataReader = _dereq_("./dataReader"); function Uint8ArrayReader(data) { if (data) { this.data = data; this.length = this.data.length; this.index = 0 } } Uint8ArrayReader.prototype = new DataReader; Uint8ArrayReader.prototype.byteAt = function (i) { return this.data[i] }; Uint8ArrayReader.prototype.lastIndexOfSignature = function (sig) { var sig0 = sig.charCodeAt(0), sig1 = sig.charCodeAt(1), sig2 = sig.charCodeAt(2), sig3 = sig.charCodeAt(3); for (var i = this.length - 4; i >= 0; --i) { if (this.data[i] === sig0 && this.data[i + 1] === sig1 && this.data[i + 2] === sig2 && this.data[i + 3] === sig3) { return i } } return -1 }; Uint8ArrayReader.prototype.readData = function (size) { this.checkOffset(size); if (size === 0) { return new Uint8Array(0) } var result = this.data.subarray(this.index, this.index + size); this.index += size; return result }; module.exports = Uint8ArrayReader }, { "./dataReader": 5 }], 19: [function (_dereq_, module, exports) { "use strict"; var utils = _dereq_("./utils"); var Uint8ArrayWriter = function (length) { this.data = new Uint8Array(length); this.index = 0 }; Uint8ArrayWriter.prototype = { append: function (input) { if (input.length !== 0) { input = utils.transformTo("uint8array", input); this.data.set(input, this.index); this.index += input.length } }, finalize: function () { return this.data } }; module.exports = Uint8ArrayWriter }, { "./utils": 21 }], 20: [function (_dereq_, module, exports) { "use strict"; var utils = _dereq_("./utils"); var support = _dereq_("./support"); var nodeBuffer = _dereq_("./nodeBuffer"); var _utf8len = new Array(256); for (var i = 0; i < 256; i++) { _utf8len[i] = i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1 } _utf8len[254] = _utf8len[254] = 1; var string2buf = function (str) { var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0; for (m_pos = 0; m_pos < str_len; m_pos++) { c = str.charCodeAt(m_pos); if ((c & 64512) === 55296 && m_pos + 1 < str_len) { c2 = str.charCodeAt(m_pos + 1); if ((c2 & 64512) === 56320) { c = 65536 + (c - 55296 << 10) + (c2 - 56320); m_pos++ } } buf_len += c < 128 ? 1 : c < 2048 ? 2 : c < 65536 ? 3 : 4 } if (support.uint8array) { buf = new Uint8Array(buf_len) } else { buf = new Array(buf_len) } for (i = 0, m_pos = 0; i < buf_len; m_pos++) { c = str.charCodeAt(m_pos); if ((c & 64512) === 55296 && m_pos + 1 < str_len) { c2 = str.charCodeAt(m_pos + 1); if ((c2 & 64512) === 56320) { c = 65536 + (c - 55296 << 10) + (c2 - 56320); m_pos++ } } if (c < 128) { buf[i++] = c } else if (c < 2048) { buf[i++] = 192 | c >>> 6; buf[i++] = 128 | c & 63 } else if (c < 65536) { buf[i++] = 224 | c >>> 12; buf[i++] = 128 | c >>> 6 & 63; buf[i++] = 128 | c & 63 } else { buf[i++] = 240 | c >>> 18; buf[i++] = 128 | c >>> 12 & 63; buf[i++] = 128 | c >>> 6 & 63; buf[i++] = 128 | c & 63 } } return buf }; var utf8border = function (buf, max) { var pos; max = max || buf.length; if (max > buf.length) { max = buf.length } pos = max - 1; while (pos >= 0 && (buf[pos] & 192) === 128) { pos-- } if (pos < 0) { return max } if (pos === 0) { return max } return pos + _utf8len[buf[pos]] > max ? pos : max }; var buf2string = function (buf) { var str, i, out, c, c_len; var len = buf.length; var utf16buf = new Array(len * 2); for (out = 0, i = 0; i < len;) { c = buf[i++]; if (c < 128) { utf16buf[out++] = c; continue } c_len = _utf8len[c]; if (c_len > 4) { utf16buf[out++] = 65533; i += c_len - 1; continue } c &= c_len === 2 ? 31 : c_len === 3 ? 15 : 7; while (c_len > 1 && i < len) { c = c << 6 | buf[i++] & 63; c_len-- } if (c_len > 1) { utf16buf[out++] = 65533; continue } if (c < 65536) { utf16buf[out++] = c } else { c -= 65536; utf16buf[out++] = 55296 | c >> 10 & 1023; utf16buf[out++] = 56320 | c & 1023 } } if (utf16buf.length !== out) { if (utf16buf.subarray) { utf16buf = utf16buf.subarray(0, out) } else { utf16buf.length = out } } return utils.applyFromCharCode(utf16buf) }; exports.utf8encode = function utf8encode(str) { if (support.nodebuffer) { return nodeBuffer(str, "utf-8") } return string2buf(str) }; exports.utf8decode = function utf8decode(buf) { if (support.nodebuffer) { return utils.transformTo("nodebuffer", buf).toString("utf-8") } buf = utils.transformTo(support.uint8array ? "uint8array" : "array", buf); var result = [], k = 0, len = buf.length, chunk = 65536; while (k < len) { var nextBoundary = utf8border(buf, Math.min(k + chunk, len)); if (support.uint8array) { result.push(buf2string(buf.subarray(k, nextBoundary))) } else { result.push(buf2string(buf.slice(k, nextBoundary))) } k = nextBoundary } return result.join("") } }, { "./nodeBuffer": 11, "./support": 17, "./utils": 21 }], 21: [function (_dereq_, module, exports) {
            "use strict"; var support = _dereq_("./support"); var compressions = _dereq_("./compressions"); var nodeBuffer = _dereq_("./nodeBuffer"); exports.string2binary = function (str) { var result = ""; for (var i = 0; i < str.length; i++) { result += String.fromCharCode(str.charCodeAt(i) & 255) } return result }; exports.arrayBuffer2Blob = function (buffer) { exports.checkSupport("blob"); try { return new Blob([buffer], { type: "application/zip" }) } catch (e) { try { var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder; var builder = new Builder; builder.append(buffer); return builder.getBlob("application/zip") } catch (e) { throw new Error("Bug : can't construct the Blob.") } } }; function identity(input) { return input } function stringToArrayLike(str, array) { for (var i = 0; i < str.length; ++i) { array[i] = str.charCodeAt(i) & 255 } return array } function arrayLikeToString(array) { var chunk = 65536; var result = [], len = array.length, type = exports.getTypeOf(array), k = 0, canUseApply = true; try { switch (type) { case "uint8array": String.fromCharCode.apply(null, new Uint8Array(0)); break; case "nodebuffer": String.fromCharCode.apply(null, nodeBuffer(0)); break; } } catch (e) { canUseApply = false } if (!canUseApply) { var resultStr = ""; for (var i = 0; i < array.length; i++) { resultStr += String.fromCharCode(array[i]) } return resultStr } while (k < len && chunk > 1) { try { if (type === "array" || type === "nodebuffer") { result.push(String.fromCharCode.apply(null, array.slice(k, Math.min(k + chunk, len)))) } else { result.push(String.fromCharCode.apply(null, array.subarray(k, Math.min(k + chunk, len)))) } k += chunk } catch (e) { chunk = Math.floor(chunk / 2) } } return result.join("") } exports.applyFromCharCode = arrayLikeToString; function arrayLikeToArrayLike(arrayFrom, arrayTo) { for (var i = 0; i < arrayFrom.length; i++) { arrayTo[i] = arrayFrom[i] } return arrayTo } var transform = {}; transform["string"] = { string: identity, array: function (input) { return stringToArrayLike(input, new Array(input.length)) }, arraybuffer: function (input) { return transform["string"]["uint8array"](input).buffer }, uint8array: function (input) { return stringToArrayLike(input, new Uint8Array(input.length)) }, nodebuffer: function (input) { return stringToArrayLike(input, nodeBuffer(input.length)) } }; transform["array"] = { string: arrayLikeToString, array: identity, arraybuffer: function (input) { return new Uint8Array(input).buffer }, uint8array: function (input) { return new Uint8Array(input) }, nodebuffer: function (input) { return nodeBuffer(input) } }; transform["arraybuffer"] = { string: function (input) { return arrayLikeToString(new Uint8Array(input)) }, array: function (input) { return arrayLikeToArrayLike(new Uint8Array(input), new Array(input.byteLength)) }, arraybuffer: identity, uint8array: function (input) { return new Uint8Array(input) }, nodebuffer: function (input) { return nodeBuffer(new Uint8Array(input)) } }; transform["uint8array"] = { string: arrayLikeToString, array: function (input) { return arrayLikeToArrayLike(input, new Array(input.length)) }, arraybuffer: function (input) { return input.buffer }, uint8array: identity, nodebuffer: function (input) { return nodeBuffer(input) } }; transform["nodebuffer"] = { string: arrayLikeToString, array: function (input) { return arrayLikeToArrayLike(input, new Array(input.length)) }, arraybuffer: function (input) { return transform["nodebuffer"]["uint8array"](input).buffer }, uint8array: function (input) { return arrayLikeToArrayLike(input, new Uint8Array(input.length)) }, nodebuffer: identity }; exports.transformTo = function (outputType, input) { if (!input) { input = "" } if (!outputType) { return input } exports.checkSupport(outputType); var inputType = exports.getTypeOf(input); var result = transform[inputType][outputType](input); return result }; exports.getTypeOf = function (input) { if (typeof input === "string") { return "string" } if (Object.prototype.toString.call(input) === "[object Array]") { return "array" } if (support.nodebuffer && nodeBuffer.test(input)) { return "nodebuffer" } if (support.uint8array && input instanceof Uint8Array) { return "uint8array" } if (support.arraybuffer && input instanceof ArrayBuffer) { return "arraybuffer" } }; exports.checkSupport = function (type) { var supported = support[type.toLowerCase()]; if (!supported) { throw new Error(type + " is not supported by this browser") } }; exports.MAX_VALUE_16BITS = 65535; exports.MAX_VALUE_32BITS = -1; exports.pretty = function (str) {
                var res = "", code, i; for (i = 0; i < (str || "").length; i++) {
                    code = str.charCodeAt(i); res += "\\x" + (code < 16 ? "0" : "") + code.toString(16).toUpperCase();
                } return res
            }; exports.findCompression = function (compressionMethod) { for (var method in compressions) { if (!compressions.hasOwnProperty(method)) { continue } if (compressions[method].magic === compressionMethod) { return compressions[method] } } return null }; exports.isRegExp = function (object) { return Object.prototype.toString.call(object) === "[object RegExp]" }
        }, { "./compressions": 3, "./nodeBuffer": 11, "./support": 17 }], 22: [function (_dereq_, module, exports) { "use strict"; var StringReader = _dereq_("./stringReader"); var NodeBufferReader = _dereq_("./nodeBufferReader"); var Uint8ArrayReader = _dereq_("./uint8ArrayReader"); var utils = _dereq_("./utils"); var sig = _dereq_("./signature"); var ZipEntry = _dereq_("./zipEntry"); var support = _dereq_("./support"); var jszipProto = _dereq_("./object"); function ZipEntries(data, loadOptions) { this.files = []; this.loadOptions = loadOptions; if (data) { this.load(data) } } ZipEntries.prototype = { checkSignature: function (expectedSignature) { var signature = this.reader.readString(4); if (signature !== expectedSignature) { throw new Error("Corrupted zip or bug : unexpected signature " + "(" + utils.pretty(signature) + ", expected " + utils.pretty(expectedSignature) + ")") } }, readBlockEndOfCentral: function () { this.diskNumber = this.reader.readInt(2); this.diskWithCentralDirStart = this.reader.readInt(2); this.centralDirRecordsOnThisDisk = this.reader.readInt(2); this.centralDirRecords = this.reader.readInt(2); this.centralDirSize = this.reader.readInt(4); this.centralDirOffset = this.reader.readInt(4); this.zipCommentLength = this.reader.readInt(2); this.zipComment = this.reader.readString(this.zipCommentLength); this.zipComment = jszipProto.utf8decode(this.zipComment) }, readBlockZip64EndOfCentral: function () { this.zip64EndOfCentralSize = this.reader.readInt(8); this.versionMadeBy = this.reader.readString(2); this.versionNeeded = this.reader.readInt(2); this.diskNumber = this.reader.readInt(4); this.diskWithCentralDirStart = this.reader.readInt(4); this.centralDirRecordsOnThisDisk = this.reader.readInt(8); this.centralDirRecords = this.reader.readInt(8); this.centralDirSize = this.reader.readInt(8); this.centralDirOffset = this.reader.readInt(8); this.zip64ExtensibleData = {}; var extraDataSize = this.zip64EndOfCentralSize - 44, index = 0, extraFieldId, extraFieldLength, extraFieldValue; while (index < extraDataSize) { extraFieldId = this.reader.readInt(2); extraFieldLength = this.reader.readInt(4); extraFieldValue = this.reader.readString(extraFieldLength); this.zip64ExtensibleData[extraFieldId] = { id: extraFieldId, length: extraFieldLength, value: extraFieldValue } } }, readBlockZip64EndOfCentralLocator: function () { this.diskWithZip64CentralDirStart = this.reader.readInt(4); this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8); this.disksCount = this.reader.readInt(4); if (this.disksCount > 1) { throw new Error("Multi-volumes zip are not supported") } }, readLocalFiles: function () { var i, file; for (i = 0; i < this.files.length; i++) { file = this.files[i]; this.reader.setIndex(file.localHeaderOffset); this.checkSignature(sig.LOCAL_FILE_HEADER); file.readLocalPart(this.reader); file.handleUTF8() } }, readCentralDir: function () { var file; this.reader.setIndex(this.centralDirOffset); while (this.reader.readString(4) === sig.CENTRAL_FILE_HEADER) { file = new ZipEntry({ zip64: this.zip64 }, this.loadOptions); file.readCentralPart(this.reader); this.files.push(file) } }, readEndOfCentral: function () { var offset = this.reader.lastIndexOfSignature(sig.CENTRAL_DIRECTORY_END); if (offset === -1) { throw new Error("Corrupted zip : can't find end of central directory") } this.reader.setIndex(offset); this.checkSignature(sig.CENTRAL_DIRECTORY_END); this.readBlockEndOfCentral(); if (this.diskNumber === utils.MAX_VALUE_16BITS || this.diskWithCentralDirStart === utils.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === utils.MAX_VALUE_16BITS || this.centralDirRecords === utils.MAX_VALUE_16BITS || this.centralDirSize === utils.MAX_VALUE_32BITS || this.centralDirOffset === utils.MAX_VALUE_32BITS) { this.zip64 = true; offset = this.reader.lastIndexOfSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR); if (offset === -1) { throw new Error("Corrupted zip : can't find the ZIP64 end of central directory locator") } this.reader.setIndex(offset); this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR); this.readBlockZip64EndOfCentralLocator(); this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir); this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_END); this.readBlockZip64EndOfCentral() } }, prepareReader: function (data) { var type = utils.getTypeOf(data); if (type === "string" && !support.uint8array) { this.reader = new StringReader(data, this.loadOptions.optimizedBinaryString) } else if (type === "nodebuffer") { this.reader = new NodeBufferReader(data) } else { this.reader = new Uint8ArrayReader(utils.transformTo("uint8array", data)) } }, load: function (data) { this.prepareReader(data); this.readEndOfCentral(); this.readCentralDir(); this.readLocalFiles() } }; module.exports = ZipEntries }, { "./nodeBufferReader": 12, "./object": 13, "./signature": 14, "./stringReader": 15, "./support": 17, "./uint8ArrayReader": 18, "./utils": 21, "./zipEntry": 23 }], 23: [function (_dereq_, module, exports) { "use strict"; var StringReader = _dereq_("./stringReader"); var utils = _dereq_("./utils"); var CompressedObject = _dereq_("./compressedObject"); var jszipProto = _dereq_("./object"); function ZipEntry(options, loadOptions) { this.options = options; this.loadOptions = loadOptions } ZipEntry.prototype = { isEncrypted: function () { return (this.bitFlag & 1) === 1 }, useUTF8: function () { return (this.bitFlag & 2048) === 2048 }, prepareCompressedContent: function (reader, from, length) { return function () { var previousIndex = reader.index; reader.setIndex(from); var compressedFileData = reader.readData(length); reader.setIndex(previousIndex); return compressedFileData } }, prepareContent: function (reader, from, length, compression, uncompressedSize) { return function () { var compressedFileData = utils.transformTo(compression.uncompressInputType, this.getCompressedContent()); var uncompressedFileData = compression.uncompress(compressedFileData); if (uncompressedFileData.length !== uncompressedSize) { throw new Error("Bug : uncompressed data size mismatch") } return uncompressedFileData } }, readLocalPart: function (reader) { var compression, localExtraFieldsLength; reader.skip(22); this.fileNameLength = reader.readInt(2); localExtraFieldsLength = reader.readInt(2); this.fileName = reader.readString(this.fileNameLength); reader.skip(localExtraFieldsLength); if (this.compressedSize == -1 || this.uncompressedSize == -1) { throw new Error("Bug or corrupted zip : didn't get enough informations from the central directory " + "(compressedSize == -1 || uncompressedSize == -1)") } compression = utils.findCompression(this.compressionMethod); if (compression === null) { throw new Error("Corrupted zip : compression " + utils.pretty(this.compressionMethod) + " unknown (inner file : " + this.fileName + ")") } this.decompressed = new CompressedObject; this.decompressed.compressedSize = this.compressedSize; this.decompressed.uncompressedSize = this.uncompressedSize; this.decompressed.crc32 = this.crc32; this.decompressed.compressionMethod = this.compressionMethod; this.decompressed.getCompressedContent = this.prepareCompressedContent(reader, reader.index, this.compressedSize, compression); this.decompressed.getContent = this.prepareContent(reader, reader.index, this.compressedSize, compression, this.uncompressedSize); if (this.loadOptions.checkCRC32) { this.decompressed = utils.transformTo("string", this.decompressed.getContent()); if (jszipProto.crc32(this.decompressed) !== this.crc32) { throw new Error("Corrupted zip : CRC32 mismatch") } } }, readCentralPart: function (reader) { this.versionMadeBy = reader.readString(2); this.versionNeeded = reader.readInt(2); this.bitFlag = reader.readInt(2); this.compressionMethod = reader.readString(2); this.date = reader.readDate(); this.crc32 = reader.readInt(4); this.compressedSize = reader.readInt(4); this.uncompressedSize = reader.readInt(4); this.fileNameLength = reader.readInt(2); this.extraFieldsLength = reader.readInt(2); this.fileCommentLength = reader.readInt(2); this.diskNumberStart = reader.readInt(2); this.internalFileAttributes = reader.readInt(2); this.externalFileAttributes = reader.readInt(4); this.localHeaderOffset = reader.readInt(4); if (this.isEncrypted()) { throw new Error("Encrypted zip are not supported") } this.fileName = reader.readString(this.fileNameLength); this.readExtraFields(reader); this.parseZIP64ExtraField(reader); this.fileComment = reader.readString(this.fileCommentLength); this.dir = this.externalFileAttributes & 16 ? true : false }, parseZIP64ExtraField: function (reader) { if (!this.extraFields[1]) { return } var extraReader = new StringReader(this.extraFields[1].value); if (this.uncompressedSize === utils.MAX_VALUE_32BITS) { this.uncompressedSize = extraReader.readInt(8) } if (this.compressedSize === utils.MAX_VALUE_32BITS) { this.compressedSize = extraReader.readInt(8) } if (this.localHeaderOffset === utils.MAX_VALUE_32BITS) { this.localHeaderOffset = extraReader.readInt(8) } if (this.diskNumberStart === utils.MAX_VALUE_32BITS) { this.diskNumberStart = extraReader.readInt(4) } }, readExtraFields: function (reader) { var start = reader.index, extraFieldId, extraFieldLength, extraFieldValue; this.extraFields = this.extraFields || {}; while (reader.index < start + this.extraFieldsLength) { extraFieldId = reader.readInt(2); extraFieldLength = reader.readInt(2); extraFieldValue = reader.readString(extraFieldLength); this.extraFields[extraFieldId] = { id: extraFieldId, length: extraFieldLength, value: extraFieldValue } } }, handleUTF8: function () { if (this.useUTF8()) { this.fileName = jszipProto.utf8decode(this.fileName); this.fileComment = jszipProto.utf8decode(this.fileComment) } else { var upath = this.findExtraFieldUnicodePath(); if (upath !== null) { this.fileName = upath } var ucomment = this.findExtraFieldUnicodeComment(); if (ucomment !== null) { this.fileComment = ucomment } } }, findExtraFieldUnicodePath: function () { var upathField = this.extraFields[28789]; if (upathField) { var extraReader = new StringReader(upathField.value); if (extraReader.readInt(1) !== 1) { return null } if (jszipProto.crc32(this.fileName) !== extraReader.readInt(4)) { return null } return jszipProto.utf8decode(extraReader.readString(upathField.length - 5)) } return null }, findExtraFieldUnicodeComment: function () { var ucommentField = this.extraFields[25461]; if (ucommentField) { var extraReader = new StringReader(ucommentField.value); if (extraReader.readInt(1) !== 1) { return null } if (jszipProto.crc32(this.fileComment) !== extraReader.readInt(4)) { return null } return jszipProto.utf8decode(extraReader.readString(ucommentField.length - 5)) } return null } }; module.exports = ZipEntry }, { "./compressedObject": 2, "./object": 13, "./stringReader": 15, "./utils": 21 }], 24: [function (_dereq_, module, exports) { "use strict"; var assign = _dereq_("./lib/utils/common").assign; var deflate = _dereq_("./lib/deflate"); var inflate = _dereq_("./lib/inflate"); var constants = _dereq_("./lib/zlib/constants"); var pako = {}; assign(pako, deflate, inflate, constants); module.exports = pako }, { "./lib/deflate": 25, "./lib/inflate": 26, "./lib/utils/common": 27, "./lib/zlib/constants": 30 }], 25: [function (_dereq_, module, exports) { "use strict"; var zlib_deflate = _dereq_("./zlib/deflate.js"); var utils = _dereq_("./utils/common"); var strings = _dereq_("./utils/strings"); var msg = _dereq_("./zlib/messages"); var zstream = _dereq_("./zlib/zstream"); var Z_NO_FLUSH = 0; var Z_FINISH = 4; var Z_OK = 0; var Z_STREAM_END = 1; var Z_DEFAULT_COMPRESSION = -1; var Z_DEFAULT_STRATEGY = 0; var Z_DEFLATED = 8; var Deflate = function (options) { this.options = utils.assign({ level: Z_DEFAULT_COMPRESSION, method: Z_DEFLATED, chunkSize: 16384, windowBits: 15, memLevel: 8, strategy: Z_DEFAULT_STRATEGY, to: "" }, options || {}); var opt = this.options; if (opt.raw && opt.windowBits > 0) { opt.windowBits = -opt.windowBits } else if (opt.gzip && opt.windowBits > 0 && opt.windowBits < 16) { opt.windowBits += 16 } this.err = 0; this.msg = ""; this.ended = false; this.chunks = []; this.strm = new zstream; this.strm.avail_out = 0; var status = zlib_deflate.deflateInit2(this.strm, opt.level, opt.method, opt.windowBits, opt.memLevel, opt.strategy); if (status !== Z_OK) { throw new Error(msg[status]) } if (opt.header) { zlib_deflate.deflateSetHeader(this.strm, opt.header) } }; Deflate.prototype.push = function (data, mode) { var strm = this.strm; var chunkSize = this.options.chunkSize; var status, _mode; if (this.ended) { return false } _mode = mode === ~~mode ? mode : mode === true ? Z_FINISH : Z_NO_FLUSH; if (typeof data === "string") { strm.input = strings.string2buf(data) } else { strm.input = data } strm.next_in = 0; strm.avail_in = strm.input.length; do { if (strm.avail_out === 0) { strm.output = new utils.Buf8(chunkSize); strm.next_out = 0; strm.avail_out = chunkSize } status = zlib_deflate.deflate(strm, _mode); if (status !== Z_STREAM_END && status !== Z_OK) { this.onEnd(status); this.ended = true; return false } if (strm.avail_out === 0 || strm.avail_in === 0 && _mode === Z_FINISH) { if (this.options.to === "string") { this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out))) } else { this.onData(utils.shrinkBuf(strm.output, strm.next_out)) } } } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END); if (_mode === Z_FINISH) { status = zlib_deflate.deflateEnd(this.strm); this.onEnd(status); this.ended = true; return status === Z_OK } return true }; Deflate.prototype.onData = function (chunk) { this.chunks.push(chunk) }; Deflate.prototype.onEnd = function (status) { if (status === Z_OK) { if (this.options.to === "string") { this.result = this.chunks.join("") } else { this.result = utils.flattenChunks(this.chunks) } } this.chunks = []; this.err = status; this.msg = this.strm.msg }; function deflate(input, options) { var deflator = new Deflate(options); deflator.push(input, true); if (deflator.err) { throw deflator.msg } return deflator.result } function deflateRaw(input, options) { options = options || {}; options.raw = true; return deflate(input, options) } function gzip(input, options) { options = options || {}; options.gzip = true; return deflate(input, options) } exports.Deflate = Deflate; exports.deflate = deflate; exports.deflateRaw = deflateRaw; exports.gzip = gzip }, { "./utils/common": 27, "./utils/strings": 28, "./zlib/deflate.js": 32, "./zlib/messages": 37, "./zlib/zstream": 39 }], 26: [function (_dereq_, module, exports) { "use strict"; var zlib_inflate = _dereq_("./zlib/inflate.js"); var utils = _dereq_("./utils/common"); var strings = _dereq_("./utils/strings"); var c = _dereq_("./zlib/constants"); var msg = _dereq_("./zlib/messages"); var zstream = _dereq_("./zlib/zstream"); var gzheader = _dereq_("./zlib/gzheader"); var Inflate = function (options) { this.options = utils.assign({ chunkSize: 16384, windowBits: 0, to: "" }, options || {}); var opt = this.options; if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) { opt.windowBits = -opt.windowBits; if (opt.windowBits === 0) { opt.windowBits = -15 } } if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) { opt.windowBits += 32 } if (opt.windowBits > 15 && opt.windowBits < 48) { if ((opt.windowBits & 15) === 0) { opt.windowBits |= 15 } } this.err = 0; this.msg = ""; this.ended = false; this.chunks = []; this.strm = new zstream; this.strm.avail_out = 0; var status = zlib_inflate.inflateInit2(this.strm, opt.windowBits); if (status !== c.Z_OK) { throw new Error(msg[status]) } this.header = new gzheader; zlib_inflate.inflateGetHeader(this.strm, this.header) }; Inflate.prototype.push = function (data, mode) { var strm = this.strm; var chunkSize = this.options.chunkSize; var status, _mode; var next_out_utf8, tail, utf8str; if (this.ended) { return false } _mode = mode === ~~mode ? mode : mode === true ? c.Z_FINISH : c.Z_NO_FLUSH; if (typeof data === "string") { strm.input = strings.binstring2buf(data) } else { strm.input = data } strm.next_in = 0; strm.avail_in = strm.input.length; do { if (strm.avail_out === 0) { strm.output = new utils.Buf8(chunkSize); strm.next_out = 0; strm.avail_out = chunkSize } status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH); if (status !== c.Z_STREAM_END && status !== c.Z_OK) { this.onEnd(status); this.ended = true; return false } if (strm.next_out) { if (strm.avail_out === 0 || status === c.Z_STREAM_END || strm.avail_in === 0 && _mode === c.Z_FINISH) { if (this.options.to === "string") { next_out_utf8 = strings.utf8border(strm.output, strm.next_out); tail = strm.next_out - next_out_utf8; utf8str = strings.buf2string(strm.output, next_out_utf8); strm.next_out = tail; strm.avail_out = chunkSize - tail; if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0) } this.onData(utf8str) } else { this.onData(utils.shrinkBuf(strm.output, strm.next_out)) } } } } while (strm.avail_in > 0 && status !== c.Z_STREAM_END); if (status === c.Z_STREAM_END) { _mode = c.Z_FINISH } if (_mode === c.Z_FINISH) { status = zlib_inflate.inflateEnd(this.strm); this.onEnd(status); this.ended = true; return status === c.Z_OK } return true }; Inflate.prototype.onData = function (chunk) { this.chunks.push(chunk) }; Inflate.prototype.onEnd = function (status) { if (status === c.Z_OK) { if (this.options.to === "string") { this.result = this.chunks.join("") } else { this.result = utils.flattenChunks(this.chunks) } } this.chunks = []; this.err = status; this.msg = this.strm.msg }; function inflate(input, options) { var inflator = new Inflate(options); inflator.push(input, true); if (inflator.err) { throw inflator.msg } return inflator.result } function inflateRaw(input, options) { options = options || {}; options.raw = true; return inflate(input, options) } exports.Inflate = Inflate; exports.inflate = inflate; exports.inflateRaw = inflateRaw; exports.ungzip = inflate }, { "./utils/common": 27, "./utils/strings": 28, "./zlib/constants": 30, "./zlib/gzheader": 33, "./zlib/inflate.js": 35, "./zlib/messages": 37, "./zlib/zstream": 39 }], 27: [function (_dereq_, module, exports) { "use strict"; var TYPED_OK = typeof Uint8Array !== "undefined" && typeof Uint16Array !== "undefined" && typeof Int32Array !== "undefined"; exports.assign = function (obj) { var sources = Array.prototype.slice.call(arguments, 1); while (sources.length) { var source = sources.shift(); if (!source) { continue } if (typeof source !== "object") { throw new TypeError(source + "must be non-object") } for (var p in source) { if (source.hasOwnProperty(p)) { obj[p] = source[p] } } } return obj }; exports.shrinkBuf = function (buf, size) { if (buf.length === size) { return buf } if (buf.subarray) { return buf.subarray(0, size) } buf.length = size; return buf }; var fnTyped = { arraySet: function (dest, src, src_offs, len, dest_offs) { if (src.subarray && dest.subarray) { dest.set(src.subarray(src_offs, src_offs + len), dest_offs); return } for (var i = 0; i < len; i++) { dest[dest_offs + i] = src[src_offs + i] } }, flattenChunks: function (chunks) { var i, l, len, pos, chunk, result; len = 0; for (i = 0, l = chunks.length; i < l; i++) { len += chunks[i].length } result = new Uint8Array(len); pos = 0; for (i = 0, l = chunks.length; i < l; i++) { chunk = chunks[i]; result.set(chunk, pos); pos += chunk.length } return result } }; var fnUntyped = { arraySet: function (dest, src, src_offs, len, dest_offs) { for (var i = 0; i < len; i++) { dest[dest_offs + i] = src[src_offs + i] } }, flattenChunks: function (chunks) { return [].concat.apply([], chunks) } }; exports.setTyped = function (on) { if (on) { exports.Buf8 = Uint8Array; exports.Buf16 = Uint16Array; exports.Buf32 = Int32Array; exports.assign(exports, fnTyped) } else { exports.Buf8 = Array; exports.Buf16 = Array; exports.Buf32 = Array; exports.assign(exports, fnUntyped) } }; exports.setTyped(TYPED_OK) }, {}], 28: [function (_dereq_, module, exports) { "use strict"; var utils = _dereq_("./common"); var STR_APPLY_OK = true; var STR_APPLY_UIA_OK = true; try { String.fromCharCode.apply(null, [0]) } catch (__) { STR_APPLY_OK = false } try { String.fromCharCode.apply(null, new Uint8Array(1)) } catch (__) { STR_APPLY_UIA_OK = false } var _utf8len = new utils.Buf8(256); for (var i = 0; i < 256; i++) { _utf8len[i] = i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1 } _utf8len[254] = _utf8len[254] = 1; exports.string2buf = function (str) { var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0; for (m_pos = 0; m_pos < str_len; m_pos++) { c = str.charCodeAt(m_pos); if ((c & 64512) === 55296 && m_pos + 1 < str_len) { c2 = str.charCodeAt(m_pos + 1); if ((c2 & 64512) === 56320) { c = 65536 + (c - 55296 << 10) + (c2 - 56320); m_pos++ } } buf_len += c < 128 ? 1 : c < 2048 ? 2 : c < 65536 ? 3 : 4 } buf = new utils.Buf8(buf_len); for (i = 0, m_pos = 0; i < buf_len; m_pos++) { c = str.charCodeAt(m_pos); if ((c & 64512) === 55296 && m_pos + 1 < str_len) { c2 = str.charCodeAt(m_pos + 1); if ((c2 & 64512) === 56320) { c = 65536 + (c - 55296 << 10) + (c2 - 56320); m_pos++ } } if (c < 128) { buf[i++] = c } else if (c < 2048) { buf[i++] = 192 | c >>> 6; buf[i++] = 128 | c & 63 } else if (c < 65536) { buf[i++] = 224 | c >>> 12; buf[i++] = 128 | c >>> 6 & 63; buf[i++] = 128 | c & 63 } else { buf[i++] = 240 | c >>> 18; buf[i++] = 128 | c >>> 12 & 63; buf[i++] = 128 | c >>> 6 & 63; buf[i++] = 128 | c & 63 } } return buf }; function buf2binstring(buf, len) { if (len < 65537) { if (buf.subarray && STR_APPLY_UIA_OK || !buf.subarray && STR_APPLY_OK) { return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len)) } } var result = ""; for (var i = 0; i < len; i++) { result += String.fromCharCode(buf[i]) } return result } exports.buf2binstring = function (buf) { return buf2binstring(buf, buf.length) }; exports.binstring2buf = function (str) { var buf = new utils.Buf8(str.length); for (var i = 0, len = buf.length; i < len; i++) { buf[i] = str.charCodeAt(i) } return buf }; exports.buf2string = function (buf, max) { var i, out, c, c_len; var len = max || buf.length; var utf16buf = new Array(len * 2); for (out = 0, i = 0; i < len;) { c = buf[i++]; if (c < 128) { utf16buf[out++] = c; continue } c_len = _utf8len[c]; if (c_len > 4) { utf16buf[out++] = 65533; i += c_len - 1; continue } c &= c_len === 2 ? 31 : c_len === 3 ? 15 : 7; while (c_len > 1 && i < len) { c = c << 6 | buf[i++] & 63; c_len-- } if (c_len > 1) { utf16buf[out++] = 65533; continue } if (c < 65536) { utf16buf[out++] = c } else { c -= 65536; utf16buf[out++] = 55296 | c >> 10 & 1023; utf16buf[out++] = 56320 | c & 1023 } } return buf2binstring(utf16buf, out) }; exports.utf8border = function (buf, max) { var pos; max = max || buf.length; if (max > buf.length) { max = buf.length } pos = max - 1; while (pos >= 0 && (buf[pos] & 192) === 128) { pos-- } if (pos < 0) { return max } if (pos === 0) { return max } return pos + _utf8len[buf[pos]] > max ? pos : max } }, { "./common": 27 }], 29: [function (_dereq_, module, exports) { "use strict"; function adler32(adler, buf, len, pos) { var s1 = adler & 65535 | 0, s2 = adler >>> 16 & 65535 | 0, n = 0; while (len !== 0) { n = len > 2e3 ? 2e3 : len; len -= n; do { s1 = s1 + buf[pos++] | 0; s2 = s2 + s1 | 0 } while (--n); s1 %= 65521; s2 %= 65521 } return s1 | s2 << 16 | 0 } module.exports = adler32 }, {}], 30: [function (_dereq_, module, exports) { module.exports = { Z_NO_FLUSH: 0, Z_PARTIAL_FLUSH: 1, Z_SYNC_FLUSH: 2, Z_FULL_FLUSH: 3, Z_FINISH: 4, Z_BLOCK: 5, Z_TREES: 6, Z_OK: 0, Z_STREAM_END: 1, Z_NEED_DICT: 2, Z_ERRNO: -1, Z_STREAM_ERROR: -2, Z_DATA_ERROR: -3, Z_BUF_ERROR: -5, Z_NO_COMPRESSION: 0, Z_BEST_SPEED: 1, Z_BEST_COMPRESSION: 9, Z_DEFAULT_COMPRESSION: -1, Z_FILTERED: 1, Z_HUFFMAN_ONLY: 2, Z_RLE: 3, Z_FIXED: 4, Z_DEFAULT_STRATEGY: 0, Z_BINARY: 0, Z_TEXT: 1, Z_UNKNOWN: 2, Z_DEFLATED: 8 } }, {}], 31: [function (_dereq_, module, exports) { "use strict"; function makeTable() { var c, table = []; for (var n = 0; n < 256; n++) { c = n; for (var k = 0; k < 8; k++) { c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1 } table[n] = c } return table } var crcTable = makeTable(); function crc32(crc, buf, len, pos) { var t = crcTable, end = pos + len; crc = crc ^ -1; for (var i = pos; i < end; i++) { crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 255] } return crc ^ -1 } module.exports = crc32 }, {}], 32: [function (_dereq_, module, exports) {
            "use strict"; var utils = _dereq_("../utils/common"); var trees = _dereq_("./trees"); var adler32 = _dereq_("./adler32"); var crc32 = _dereq_("./crc32"); var msg = _dereq_("./messages"); var Z_NO_FLUSH = 0; var Z_PARTIAL_FLUSH = 1; var Z_FULL_FLUSH = 3; var Z_FINISH = 4; var Z_BLOCK = 5; var Z_OK = 0; var Z_STREAM_END = 1; var Z_STREAM_ERROR = -2; var Z_DATA_ERROR = -3; var Z_BUF_ERROR = -5; var Z_DEFAULT_COMPRESSION = -1; var Z_FILTERED = 1; var Z_HUFFMAN_ONLY = 2; var Z_RLE = 3; var Z_FIXED = 4; var Z_DEFAULT_STRATEGY = 0; var Z_UNKNOWN = 2; var Z_DEFLATED = 8; var MAX_MEM_LEVEL = 9; var MAX_WBITS = 15; var DEF_MEM_LEVEL = 8; var LENGTH_CODES = 29; var LITERALS = 256; var L_CODES = LITERALS + 1 + LENGTH_CODES; var D_CODES = 30; var BL_CODES = 19; var HEAP_SIZE = 2 * L_CODES + 1; var MAX_BITS = 15; var MIN_MATCH = 3; var MAX_MATCH = 258; var MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1; var PRESET_DICT = 32; var INIT_STATE = 42; var EXTRA_STATE = 69; var NAME_STATE = 73; var COMMENT_STATE = 91; var HCRC_STATE = 103; var BUSY_STATE = 113; var FINISH_STATE = 666; var BS_NEED_MORE = 1; var BS_BLOCK_DONE = 2; var BS_FINISH_STARTED = 3; var BS_FINISH_DONE = 4; var OS_CODE = 3; function err(strm, errorCode) { strm.msg = msg[errorCode]; return errorCode } function rank(f) { return (f << 1) - (f > 4 ? 9 : 0) } function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0 } } function flush_pending(strm) { var s = strm.state; var len = s.pending; if (len > strm.avail_out) { len = strm.avail_out } if (len === 0) { return } utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out); strm.next_out += len; s.pending_out += len; strm.total_out += len; strm.avail_out -= len; s.pending -= len; if (s.pending === 0) { s.pending_out = 0 } } function flush_block_only(s, last) { trees._tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last); s.block_start = s.strstart; flush_pending(s.strm) } function put_byte(s, b) { s.pending_buf[s.pending++] = b } function putShortMSB(s, b) { s.pending_buf[s.pending++] = b >>> 8 & 255; s.pending_buf[s.pending++] = b & 255 } function read_buf(strm, buf, start, size) { var len = strm.avail_in; if (len > size) { len = size } if (len === 0) { return 0 } strm.avail_in -= len; utils.arraySet(buf, strm.input, strm.next_in, len, start); if (strm.state.wrap === 1) { strm.adler = adler32(strm.adler, buf, len, start) } else if (strm.state.wrap === 2) { strm.adler = crc32(strm.adler, buf, len, start) } strm.next_in += len; strm.total_in += len; return len } function longest_match(s, cur_match) { var chain_length = s.max_chain_length; var scan = s.strstart; var match; var len; var best_len = s.prev_length; var nice_match = s.nice_match; var limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0; var _win = s.window; var wmask = s.w_mask; var prev = s.prev; var strend = s.strstart + MAX_MATCH; var scan_end1 = _win[scan + best_len - 1]; var scan_end = _win[scan + best_len]; if (s.prev_length >= s.good_match) { chain_length >>= 2 } if (nice_match > s.lookahead) { nice_match = s.lookahead } do { match = cur_match; if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) { continue } scan += 2; match++; do { } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend); len = MAX_MATCH - (strend - scan); scan = strend - MAX_MATCH; if (len > best_len) { s.match_start = cur_match; best_len = len; if (len >= nice_match) { break } scan_end1 = _win[scan + best_len - 1]; scan_end = _win[scan + best_len] } } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0); if (best_len <= s.lookahead) { return best_len } return s.lookahead } function fill_window(s) { var _w_size = s.w_size; var p, n, m, more, str; do { more = s.window_size - s.lookahead - s.strstart; if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) { utils.arraySet(s.window, s.window, _w_size, _w_size, 0); s.match_start -= _w_size; s.strstart -= _w_size; s.block_start -= _w_size; n = s.hash_size; p = n; do { m = s.head[--p]; s.head[p] = m >= _w_size ? m - _w_size : 0 } while (--n); n = _w_size; p = n; do { m = s.prev[--p]; s.prev[p] = m >= _w_size ? m - _w_size : 0 } while (--n); more += _w_size } if (s.strm.avail_in === 0) { break } n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more); s.lookahead += n; if (s.lookahead + s.insert >= MIN_MATCH) { str = s.strstart - s.insert; s.ins_h = s.window[str]; s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + 1]) & s.hash_mask; while (s.insert) { s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask; s.prev[str & s.w_mask] = s.head[s.ins_h]; s.head[s.ins_h] = str; str++; s.insert--; if (s.lookahead + s.insert < MIN_MATCH) { break } } } } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0) } function deflate_stored(s, flush) { var max_block_size = 65535; if (max_block_size > s.pending_buf_size - 5) { max_block_size = s.pending_buf_size - 5 } for (; ;) { if (s.lookahead <= 1) { fill_window(s); if (s.lookahead === 0 && flush === Z_NO_FLUSH) { return BS_NEED_MORE } if (s.lookahead === 0) { break } } s.strstart += s.lookahead; s.lookahead = 0; var max_start = s.block_start + max_block_size; if (s.strstart === 0 || s.strstart >= max_start) { s.lookahead = s.strstart - max_start; s.strstart = max_start; flush_block_only(s, false); if (s.strm.avail_out === 0) { return BS_NEED_MORE } } if (s.strstart - s.block_start >= s.w_size - MIN_LOOKAHEAD) { flush_block_only(s, false); if (s.strm.avail_out === 0) { return BS_NEED_MORE } } } s.insert = 0; if (flush === Z_FINISH) { flush_block_only(s, true); if (s.strm.avail_out === 0) { return BS_FINISH_STARTED } return BS_FINISH_DONE } if (s.strstart > s.block_start) { flush_block_only(s, false); if (s.strm.avail_out === 0) { return BS_NEED_MORE } } return BS_NEED_MORE } function deflate_fast(s, flush) { var hash_head; var bflush; for (; ;) { if (s.lookahead < MIN_LOOKAHEAD) { fill_window(s); if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) { return BS_NEED_MORE } if (s.lookahead === 0) { break } } hash_head = 0; if (s.lookahead >= MIN_MATCH) { s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask; hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h]; s.head[s.ins_h] = s.strstart } if (hash_head !== 0 && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) { s.match_length = longest_match(s, hash_head) } if (s.match_length >= MIN_MATCH) { bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH); s.lookahead -= s.match_length; if (s.match_length <= s.max_lazy_match && s.lookahead >= MIN_MATCH) { s.match_length--; do { s.strstart++; s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask; hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h]; s.head[s.ins_h] = s.strstart } while (--s.match_length !== 0); s.strstart++ } else { s.strstart += s.match_length; s.match_length = 0; s.ins_h = s.window[s.strstart]; s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 1]) & s.hash_mask } } else { bflush = trees._tr_tally(s, 0, s.window[s.strstart]); s.lookahead--; s.strstart++ } if (bflush) { flush_block_only(s, false); if (s.strm.avail_out === 0) { return BS_NEED_MORE } } } s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1; if (flush === Z_FINISH) { flush_block_only(s, true); if (s.strm.avail_out === 0) { return BS_FINISH_STARTED } return BS_FINISH_DONE } if (s.last_lit) { flush_block_only(s, false); if (s.strm.avail_out === 0) { return BS_NEED_MORE } } return BS_BLOCK_DONE } function deflate_slow(s, flush) { var hash_head; var bflush; var max_insert; for (; ;) { if (s.lookahead < MIN_LOOKAHEAD) { fill_window(s); if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) { return BS_NEED_MORE } if (s.lookahead === 0) { break } } hash_head = 0; if (s.lookahead >= MIN_MATCH) { s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask; hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h]; s.head[s.ins_h] = s.strstart } s.prev_length = s.match_length; s.prev_match = s.match_start; s.match_length = MIN_MATCH - 1; if (hash_head !== 0 && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) { s.match_length = longest_match(s, hash_head); if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096)) { s.match_length = MIN_MATCH - 1 } } if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) { max_insert = s.strstart + s.lookahead - MIN_MATCH; bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH); s.lookahead -= s.prev_length - 1; s.prev_length -= 2; do { if (++s.strstart <= max_insert) { s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask; hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h]; s.head[s.ins_h] = s.strstart } } while (--s.prev_length !== 0); s.match_available = 0; s.match_length = MIN_MATCH - 1; s.strstart++; if (bflush) { flush_block_only(s, false); if (s.strm.avail_out === 0) { return BS_NEED_MORE } } } else if (s.match_available) { bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]); if (bflush) { flush_block_only(s, false) } s.strstart++; s.lookahead--; if (s.strm.avail_out === 0) { return BS_NEED_MORE } } else { s.match_available = 1; s.strstart++; s.lookahead-- } } if (s.match_available) { bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]); s.match_available = 0 } s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1; if (flush === Z_FINISH) { flush_block_only(s, true); if (s.strm.avail_out === 0) { return BS_FINISH_STARTED } return BS_FINISH_DONE } if (s.last_lit) { flush_block_only(s, false); if (s.strm.avail_out === 0) { return BS_NEED_MORE } } return BS_BLOCK_DONE } function deflate_rle(s, flush) { var bflush; var prev; var scan, strend; var _win = s.window; for (; ;) { if (s.lookahead <= MAX_MATCH) { fill_window(s); if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) { return BS_NEED_MORE } if (s.lookahead === 0) { break } } s.match_length = 0; if (s.lookahead >= MIN_MATCH && s.strstart > 0) { scan = s.strstart - 1; prev = _win[scan]; if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) { strend = s.strstart + MAX_MATCH; do { } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend); s.match_length = MAX_MATCH - (strend - scan); if (s.match_length > s.lookahead) { s.match_length = s.lookahead } } } if (s.match_length >= MIN_MATCH) { bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH); s.lookahead -= s.match_length; s.strstart += s.match_length; s.match_length = 0 } else { bflush = trees._tr_tally(s, 0, s.window[s.strstart]); s.lookahead--; s.strstart++ } if (bflush) { flush_block_only(s, false); if (s.strm.avail_out === 0) { return BS_NEED_MORE } } } s.insert = 0; if (flush === Z_FINISH) { flush_block_only(s, true); if (s.strm.avail_out === 0) { return BS_FINISH_STARTED } return BS_FINISH_DONE } if (s.last_lit) { flush_block_only(s, false); if (s.strm.avail_out === 0) { return BS_NEED_MORE } } return BS_BLOCK_DONE } function deflate_huff(s, flush) {
                var bflush; for (; ;) { if (s.lookahead === 0) { fill_window(s); if (s.lookahead === 0) { if (flush === Z_NO_FLUSH) { return BS_NEED_MORE } break } } s.match_length = 0; bflush = trees._tr_tally(s, 0, s.window[s.strstart]); s.lookahead--; s.strstart++; if (bflush) { flush_block_only(s, false); if (s.strm.avail_out === 0) { return BS_NEED_MORE } } } s.insert = 0; if (flush === Z_FINISH) { flush_block_only(s, true); if (s.strm.avail_out === 0) { return BS_FINISH_STARTED } return BS_FINISH_DONE } if (s.last_lit) { flush_block_only(s, false); if (s.strm.avail_out === 0) { return BS_NEED_MORE } } return BS_BLOCK_DONE
            } var Config = function (good_length, max_lazy, nice_length, max_chain, func) { this.good_length = good_length; this.max_lazy = max_lazy; this.nice_length = nice_length; this.max_chain = max_chain; this.func = func }; var configuration_table; configuration_table = [new Config(0, 0, 0, 0, deflate_stored), new Config(4, 4, 8, 4, deflate_fast), new Config(4, 5, 16, 8, deflate_fast), new Config(4, 6, 32, 32, deflate_fast), new Config(4, 4, 16, 16, deflate_slow), new Config(8, 16, 32, 32, deflate_slow), new Config(8, 16, 128, 128, deflate_slow), new Config(8, 32, 128, 256, deflate_slow), new Config(32, 128, 258, 1024, deflate_slow), new Config(32, 258, 258, 4096, deflate_slow)]; function lm_init(s) { s.window_size = 2 * s.w_size; zero(s.head); s.max_lazy_match = configuration_table[s.level].max_lazy; s.good_match = configuration_table[s.level].good_length; s.nice_match = configuration_table[s.level].nice_length; s.max_chain_length = configuration_table[s.level].max_chain; s.strstart = 0; s.block_start = 0; s.lookahead = 0; s.insert = 0; s.match_length = s.prev_length = MIN_MATCH - 1; s.match_available = 0; s.ins_h = 0 } function DeflateState() { this.strm = null; this.status = 0; this.pending_buf = null; this.pending_buf_size = 0; this.pending_out = 0; this.pending = 0; this.wrap = 0; this.gzhead = null; this.gzindex = 0; this.method = Z_DEFLATED; this.last_flush = -1; this.w_size = 0; this.w_bits = 0; this.w_mask = 0; this.window = null; this.window_size = 0; this.prev = null; this.head = null; this.ins_h = 0; this.hash_size = 0; this.hash_bits = 0; this.hash_mask = 0; this.hash_shift = 0; this.block_start = 0; this.match_length = 0; this.prev_match = 0; this.match_available = 0; this.strstart = 0; this.match_start = 0; this.lookahead = 0; this.prev_length = 0; this.max_chain_length = 0; this.max_lazy_match = 0; this.level = 0; this.strategy = 0; this.good_match = 0; this.nice_match = 0; this.dyn_ltree = new utils.Buf16(HEAP_SIZE * 2); this.dyn_dtree = new utils.Buf16((2 * D_CODES + 1) * 2); this.bl_tree = new utils.Buf16((2 * BL_CODES + 1) * 2); zero(this.dyn_ltree); zero(this.dyn_dtree); zero(this.bl_tree); this.l_desc = null; this.d_desc = null; this.bl_desc = null; this.bl_count = new utils.Buf16(MAX_BITS + 1); this.heap = new utils.Buf16(2 * L_CODES + 1); zero(this.heap); this.heap_len = 0; this.heap_max = 0; this.depth = new utils.Buf16(2 * L_CODES + 1); zero(this.depth); this.l_buf = 0; this.lit_bufsize = 0; this.last_lit = 0; this.d_buf = 0; this.opt_len = 0; this.static_len = 0; this.matches = 0; this.insert = 0; this.bi_buf = 0; this.bi_valid = 0 } function deflateResetKeep(strm) { var s; if (!strm || !strm.state) { return err(strm, Z_STREAM_ERROR) } strm.total_in = strm.total_out = 0; strm.data_type = Z_UNKNOWN; s = strm.state; s.pending = 0; s.pending_out = 0; if (s.wrap < 0) { s.wrap = -s.wrap } s.status = s.wrap ? INIT_STATE : BUSY_STATE; strm.adler = s.wrap === 2 ? 0 : 1; s.last_flush = Z_NO_FLUSH; trees._tr_init(s); return Z_OK } function deflateReset(strm) { var ret = deflateResetKeep(strm); if (ret === Z_OK) { lm_init(strm.state) } return ret } function deflateSetHeader(strm, head) { if (!strm || !strm.state) { return Z_STREAM_ERROR } if (strm.state.wrap !== 2) { return Z_STREAM_ERROR } strm.state.gzhead = head; return Z_OK } function deflateInit2(strm, level, method, windowBits, memLevel, strategy) { if (!strm) { return Z_STREAM_ERROR } var wrap = 1; if (level === Z_DEFAULT_COMPRESSION) { level = 6 } if (windowBits < 0) { wrap = 0; windowBits = -windowBits } else if (windowBits > 15) { wrap = 2; windowBits -= 16 } if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) { return err(strm, Z_STREAM_ERROR) } if (windowBits === 8) { windowBits = 9 } var s = new DeflateState; strm.state = s; s.strm = strm; s.wrap = wrap; s.gzhead = null; s.w_bits = windowBits; s.w_size = 1 << s.w_bits; s.w_mask = s.w_size - 1; s.hash_bits = memLevel + 7; s.hash_size = 1 << s.hash_bits; s.hash_mask = s.hash_size - 1; s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH); s.window = new utils.Buf8(s.w_size * 2); s.head = new utils.Buf16(s.hash_size); s.prev = new utils.Buf16(s.w_size); s.lit_bufsize = 1 << memLevel + 6; s.pending_buf_size = s.lit_bufsize * 4; s.pending_buf = new utils.Buf8(s.pending_buf_size); s.d_buf = s.lit_bufsize >> 1; s.l_buf = (1 + 2) * s.lit_bufsize; s.level = level; s.strategy = strategy; s.method = method; return deflateReset(strm) } function deflateInit(strm, level) { return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY) } function deflate(strm, flush) { var old_flush, s; var beg, val; if (!strm || !strm.state || flush > Z_BLOCK || flush < 0) { return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR } s = strm.state; if (!strm.output || !strm.input && strm.avail_in !== 0 || s.status === FINISH_STATE && flush !== Z_FINISH) { return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR : Z_STREAM_ERROR) } s.strm = strm; old_flush = s.last_flush; s.last_flush = flush; if (s.status === INIT_STATE) { if (s.wrap === 2) { strm.adler = 0; put_byte(s, 31); put_byte(s, 139); put_byte(s, 8); if (!s.gzhead) { put_byte(s, 0); put_byte(s, 0); put_byte(s, 0); put_byte(s, 0); put_byte(s, 0); put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0); put_byte(s, OS_CODE); s.status = BUSY_STATE } else { put_byte(s, (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16)); put_byte(s, s.gzhead.time & 255); put_byte(s, s.gzhead.time >> 8 & 255); put_byte(s, s.gzhead.time >> 16 & 255); put_byte(s, s.gzhead.time >> 24 & 255); put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0); put_byte(s, s.gzhead.os & 255); if (s.gzhead.extra && s.gzhead.extra.length) { put_byte(s, s.gzhead.extra.length & 255); put_byte(s, s.gzhead.extra.length >> 8 & 255) } if (s.gzhead.hcrc) { strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0) } s.gzindex = 0; s.status = EXTRA_STATE } } else { var header = Z_DEFLATED + (s.w_bits - 8 << 4) << 8; var level_flags = -1; if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) { level_flags = 0 } else if (s.level < 6) { level_flags = 1 } else if (s.level === 6) { level_flags = 2 } else { level_flags = 3 } header |= level_flags << 6; if (s.strstart !== 0) { header |= PRESET_DICT } header += 31 - header % 31; s.status = BUSY_STATE; putShortMSB(s, header); if (s.strstart !== 0) { putShortMSB(s, strm.adler >>> 16); putShortMSB(s, strm.adler & 65535) } strm.adler = 1 } } if (s.status === EXTRA_STATE) { if (s.gzhead.extra) { beg = s.pending; while (s.gzindex < (s.gzhead.extra.length & 65535)) { if (s.pending === s.pending_buf_size) { if (s.gzhead.hcrc && s.pending > beg) { strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg) } flush_pending(strm); beg = s.pending; if (s.pending === s.pending_buf_size) { break } } put_byte(s, s.gzhead.extra[s.gzindex] & 255); s.gzindex++ } if (s.gzhead.hcrc && s.pending > beg) { strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg) } if (s.gzindex === s.gzhead.extra.length) { s.gzindex = 0; s.status = NAME_STATE } } else { s.status = NAME_STATE } } if (s.status === NAME_STATE) { if (s.gzhead.name) { beg = s.pending; do { if (s.pending === s.pending_buf_size) { if (s.gzhead.hcrc && s.pending > beg) { strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg) } flush_pending(strm); beg = s.pending; if (s.pending === s.pending_buf_size) { val = 1; break } } if (s.gzindex < s.gzhead.name.length) { val = s.gzhead.name.charCodeAt(s.gzindex++) & 255 } else { val = 0 } put_byte(s, val) } while (val !== 0); if (s.gzhead.hcrc && s.pending > beg) { strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg) } if (val === 0) { s.gzindex = 0; s.status = COMMENT_STATE } } else { s.status = COMMENT_STATE } } if (s.status === COMMENT_STATE) { if (s.gzhead.comment) { beg = s.pending; do { if (s.pending === s.pending_buf_size) { if (s.gzhead.hcrc && s.pending > beg) { strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg) } flush_pending(strm); beg = s.pending; if (s.pending === s.pending_buf_size) { val = 1; break } } if (s.gzindex < s.gzhead.comment.length) { val = s.gzhead.comment.charCodeAt(s.gzindex++) & 255 } else { val = 0 } put_byte(s, val) } while (val !== 0); if (s.gzhead.hcrc && s.pending > beg) { strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg) } if (val === 0) { s.status = HCRC_STATE } } else { s.status = HCRC_STATE } } if (s.status === HCRC_STATE) { if (s.gzhead.hcrc) { if (s.pending + 2 > s.pending_buf_size) { flush_pending(strm) } if (s.pending + 2 <= s.pending_buf_size) { put_byte(s, strm.adler & 255); put_byte(s, strm.adler >> 8 & 255); strm.adler = 0; s.status = BUSY_STATE } } else { s.status = BUSY_STATE } } if (s.pending !== 0) { flush_pending(strm); if (strm.avail_out === 0) { s.last_flush = -1; return Z_OK } } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH) { return err(strm, Z_BUF_ERROR) } if (s.status === FINISH_STATE && strm.avail_in !== 0) { return err(strm, Z_BUF_ERROR) } if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH && s.status !== FINISH_STATE) { var bstate = s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush); if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) { s.status = FINISH_STATE } if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) { if (strm.avail_out === 0) { s.last_flush = -1 } return Z_OK } if (bstate === BS_BLOCK_DONE) { if (flush === Z_PARTIAL_FLUSH) { trees._tr_align(s) } else if (flush !== Z_BLOCK) { trees._tr_stored_block(s, 0, 0, false); if (flush === Z_FULL_FLUSH) { zero(s.head); if (s.lookahead === 0) { s.strstart = 0; s.block_start = 0; s.insert = 0 } } } flush_pending(strm); if (strm.avail_out === 0) { s.last_flush = -1; return Z_OK } } } if (flush !== Z_FINISH) { return Z_OK } if (s.wrap <= 0) { return Z_STREAM_END } if (s.wrap === 2) { put_byte(s, strm.adler & 255); put_byte(s, strm.adler >> 8 & 255); put_byte(s, strm.adler >> 16 & 255); put_byte(s, strm.adler >> 24 & 255); put_byte(s, strm.total_in & 255); put_byte(s, strm.total_in >> 8 & 255); put_byte(s, strm.total_in >> 16 & 255); put_byte(s, strm.total_in >> 24 & 255) } else { putShortMSB(s, strm.adler >>> 16); putShortMSB(s, strm.adler & 65535) } flush_pending(strm); if (s.wrap > 0) { s.wrap = -s.wrap } return s.pending !== 0 ? Z_OK : Z_STREAM_END } function deflateEnd(strm) { var status; if (!strm || !strm.state) { return Z_STREAM_ERROR } status = strm.state.status; if (status !== INIT_STATE && status !== EXTRA_STATE && status !== NAME_STATE && status !== COMMENT_STATE && status !== HCRC_STATE && status !== BUSY_STATE && status !== FINISH_STATE) { return err(strm, Z_STREAM_ERROR) } strm.state = null; return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK } exports.deflateInit = deflateInit; exports.deflateInit2 = deflateInit2; exports.deflateReset = deflateReset; exports.deflateResetKeep = deflateResetKeep; exports.deflateSetHeader = deflateSetHeader; exports.deflate = deflate; exports.deflateEnd = deflateEnd; exports.deflateInfo = "pako deflate (from Nodeca project)"
        }, { "../utils/common": 27, "./adler32": 29, "./crc32": 31, "./messages": 37, "./trees": 38 }], 33: [function (_dereq_, module, exports) { "use strict"; function GZheader() { this.text = 0; this.time = 0; this.xflags = 0; this.os = 0; this.extra = null; this.extra_len = 0; this.name = ""; this.comment = ""; this.hcrc = 0; this.done = false } module.exports = GZheader }, {}], 34: [function (_dereq_, module, exports) { "use strict"; var BAD = 30; var TYPE = 12; module.exports = function inflate_fast(strm, start) { var state; var _in; var last; var _out; var beg; var end; var dmax; var wsize; var whave; var wnext; var window; var hold; var bits; var lcode; var dcode; var lmask; var dmask; var here; var op; var len; var dist; var from; var from_source; var input, output; state = strm.state; _in = strm.next_in; input = strm.input; last = _in + (strm.avail_in - 5); _out = strm.next_out; output = strm.output; beg = _out - (start - strm.avail_out); end = _out + (strm.avail_out - 257); dmax = state.dmax; wsize = state.wsize; whave = state.whave; wnext = state.wnext; window = state.window; hold = state.hold; bits = state.bits; lcode = state.lencode; dcode = state.distcode; lmask = (1 << state.lenbits) - 1; dmask = (1 << state.distbits) - 1; top: do { if (bits < 15) { hold += input[_in++] << bits; bits += 8; hold += input[_in++] << bits; bits += 8 } here = lcode[hold & lmask]; dolen: for (; ;) { op = here >>> 24; hold >>>= op; bits -= op; op = here >>> 16 & 255; if (op === 0) { output[_out++] = here & 65535 } else if (op & 16) { len = here & 65535; op &= 15; if (op) { if (bits < op) { hold += input[_in++] << bits; bits += 8 } len += hold & (1 << op) - 1; hold >>>= op; bits -= op } if (bits < 15) { hold += input[_in++] << bits; bits += 8; hold += input[_in++] << bits; bits += 8 } here = dcode[hold & dmask]; dodist: for (; ;) { op = here >>> 24; hold >>>= op; bits -= op; op = here >>> 16 & 255; if (op & 16) { dist = here & 65535; op &= 15; if (bits < op) { hold += input[_in++] << bits; bits += 8; if (bits < op) { hold += input[_in++] << bits; bits += 8 } } dist += hold & (1 << op) - 1; if (dist > dmax) { strm.msg = "invalid distance too far back"; state.mode = BAD; break top } hold >>>= op; bits -= op; op = _out - beg; if (dist > op) { op = dist - op; if (op > whave) { if (state.sane) { strm.msg = "invalid distance too far back"; state.mode = BAD; break top } } from = 0; from_source = window; if (wnext === 0) { from += wsize - op; if (op < len) { len -= op; do { output[_out++] = window[from++] } while (--op); from = _out - dist; from_source = output } } else if (wnext < op) { from += wsize + wnext - op; op -= wnext; if (op < len) { len -= op; do { output[_out++] = window[from++] } while (--op); from = 0; if (wnext < len) { op = wnext; len -= op; do { output[_out++] = window[from++] } while (--op); from = _out - dist; from_source = output } } } else { from += wnext - op; if (op < len) { len -= op; do { output[_out++] = window[from++] } while (--op); from = _out - dist; from_source = output } } while (len > 2) { output[_out++] = from_source[from++]; output[_out++] = from_source[from++]; output[_out++] = from_source[from++]; len -= 3 } if (len) { output[_out++] = from_source[from++]; if (len > 1) { output[_out++] = from_source[from++] } } } else { from = _out - dist; do { output[_out++] = output[from++]; output[_out++] = output[from++]; output[_out++] = output[from++]; len -= 3 } while (len > 2); if (len) { output[_out++] = output[from++]; if (len > 1) { output[_out++] = output[from++] } } } } else if ((op & 64) === 0) { here = dcode[(here & 65535) + (hold & (1 << op) - 1)]; continue dodist } else { strm.msg = "invalid distance code"; state.mode = BAD; break top } break } } else if ((op & 64) === 0) { here = lcode[(here & 65535) + (hold & (1 << op) - 1)]; continue dolen } else if (op & 32) { state.mode = TYPE; break top } else { strm.msg = "invalid literal/length code"; state.mode = BAD; break top } break } } while (_in < last && _out < end); len = bits >> 3; _in -= len; bits -= len << 3; hold &= (1 << bits) - 1; strm.next_in = _in; strm.next_out = _out; strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last); strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end); state.hold = hold; state.bits = bits; return } }, {}], 35: [function (_dereq_, module, exports) {
            "use strict"; var utils = _dereq_("../utils/common"); var adler32 = _dereq_("./adler32"); var crc32 = _dereq_("./crc32"); var inflate_fast = _dereq_("./inffast"); var inflate_table = _dereq_("./inftrees"); var CODES = 0; var LENS = 1; var DISTS = 2; var Z_FINISH = 4; var Z_BLOCK = 5; var Z_TREES = 6; var Z_OK = 0; var Z_STREAM_END = 1; var Z_NEED_DICT = 2; var Z_STREAM_ERROR = -2; var Z_DATA_ERROR = -3; var Z_MEM_ERROR = -4; var Z_BUF_ERROR = -5; var Z_DEFLATED = 8; var HEAD = 1; var FLAGS = 2; var TIME = 3; var OS = 4; var EXLEN = 5; var EXTRA = 6; var NAME = 7; var COMMENT = 8; var HCRC = 9; var DICTID = 10; var DICT = 11; var TYPE = 12; var TYPEDO = 13; var STORED = 14; var COPY_ = 15; var COPY = 16; var TABLE = 17; var LENLENS = 18; var CODELENS = 19; var LEN_ = 20; var LEN = 21; var LENEXT = 22; var DIST = 23; var DISTEXT = 24; var MATCH = 25; var LIT = 26; var CHECK = 27; var LENGTH = 28; var DONE = 29; var BAD = 30; var MEM = 31; var SYNC = 32; var ENOUGH_LENS = 852; var ENOUGH_DISTS = 592; var MAX_WBITS = 15; var DEF_WBITS = MAX_WBITS; function ZSWAP32(q) { return (q >>> 24 & 255) + (q >>> 8 & 65280) + ((q & 65280) << 8) + ((q & 255) << 24) } function InflateState() { this.mode = 0; this.last = false; this.wrap = 0; this.havedict = false; this.flags = 0; this.dmax = 0; this.check = 0; this.total = 0; this.head = null; this.wbits = 0; this.wsize = 0; this.whave = 0; this.wnext = 0; this.window = null; this.hold = 0; this.bits = 0; this.length = 0; this.offset = 0; this.extra = 0; this.lencode = null; this.distcode = null; this.lenbits = 0; this.distbits = 0; this.ncode = 0; this.nlen = 0; this.ndist = 0; this.have = 0; this.next = null; this.lens = new utils.Buf16(320); this.work = new utils.Buf16(288); this.lendyn = null; this.distdyn = null; this.sane = 0; this.back = 0; this.was = 0 } function inflateResetKeep(strm) { var state; if (!strm || !strm.state) { return Z_STREAM_ERROR } state = strm.state; strm.total_in = strm.total_out = state.total = 0; strm.msg = ""; if (state.wrap) { strm.adler = state.wrap & 1 } state.mode = HEAD; state.last = 0; state.havedict = 0; state.dmax = 32768; state.head = null; state.hold = 0; state.bits = 0; state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS); state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS); state.sane = 1; state.back = -1; return Z_OK } function inflateReset(strm) { var state; if (!strm || !strm.state) { return Z_STREAM_ERROR } state = strm.state; state.wsize = 0; state.whave = 0; state.wnext = 0; return inflateResetKeep(strm) } function inflateReset2(strm, windowBits) { var wrap; var state; if (!strm || !strm.state) { return Z_STREAM_ERROR } state = strm.state; if (windowBits < 0) { wrap = 0; windowBits = -windowBits } else { wrap = (windowBits >> 4) + 1; if (windowBits < 48) { windowBits &= 15 } } if (windowBits && (windowBits < 8 || windowBits > 15)) { return Z_STREAM_ERROR } if (state.window !== null && state.wbits !== windowBits) { state.window = null } state.wrap = wrap; state.wbits = windowBits; return inflateReset(strm) } function inflateInit2(strm, windowBits) { var ret; var state; if (!strm) { return Z_STREAM_ERROR } state = new InflateState; strm.state = state; state.window = null; ret = inflateReset2(strm, windowBits); if (ret !== Z_OK) { strm.state = null } return ret } function inflateInit(strm) { return inflateInit2(strm, DEF_WBITS) } var virgin = true; var lenfix, distfix; function fixedtables(state) { if (virgin) { var sym; lenfix = new utils.Buf32(512); distfix = new utils.Buf32(32); sym = 0; while (sym < 144) { state.lens[sym++] = 8 } while (sym < 256) { state.lens[sym++] = 9 } while (sym < 280) { state.lens[sym++] = 7 } while (sym < 288) { state.lens[sym++] = 8 } inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, { bits: 9 }); sym = 0; while (sym < 32) { state.lens[sym++] = 5 } inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, { bits: 5 }); virgin = false } state.lencode = lenfix; state.lenbits = 9; state.distcode = distfix; state.distbits = 5 } function updatewindow(strm, src, end, copy) { var dist; var state = strm.state; if (state.window === null) { state.wsize = 1 << state.wbits; state.wnext = 0; state.whave = 0; state.window = new utils.Buf8(state.wsize) } if (copy >= state.wsize) { utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0); state.wnext = 0; state.whave = state.wsize } else { dist = state.wsize - state.wnext; if (dist > copy) { dist = copy } utils.arraySet(state.window, src, end - copy, dist, state.wnext); copy -= dist; if (copy) { utils.arraySet(state.window, src, end - copy, copy, 0); state.wnext = copy; state.whave = state.wsize } else { state.wnext += dist; if (state.wnext === state.wsize) { state.wnext = 0 } if (state.whave < state.wsize) { state.whave += dist } } } return 0 } function inflate(strm, flush) { var state; var input, output; var next; var put; var have, left; var hold; var bits; var _in, _out; var copy; var from; var from_source; var here = 0; var here_bits, here_op, here_val; var last_bits, last_op, last_val; var len; var ret; var hbuf = new utils.Buf8(4); var opts; var n; var order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]; if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) { return Z_STREAM_ERROR } state = strm.state; if (state.mode === TYPE) { state.mode = TYPEDO } put = strm.next_out; output = strm.output; left = strm.avail_out; next = strm.next_in; input = strm.input; have = strm.avail_in; hold = state.hold; bits = state.bits; _in = have; _out = left; ret = Z_OK; inf_leave: for (; ;) { switch (state.mode) { case HEAD: if (state.wrap === 0) { state.mode = TYPEDO; break } while (bits < 16) { if (have === 0) { break inf_leave } have--; hold += input[next++] << bits; bits += 8 } if (state.wrap & 2 && hold === 35615) { state.check = 0; hbuf[0] = hold & 255; hbuf[1] = hold >>> 8 & 255; state.check = crc32(state.check, hbuf, 2, 0); hold = 0; bits = 0; state.mode = FLAGS; break } state.flags = 0; if (state.head) { state.head.done = false } if (!(state.wrap & 1) || (((hold & 255) << 8) + (hold >> 8)) % 31) { strm.msg = "incorrect header check"; state.mode = BAD; break } if ((hold & 15) !== Z_DEFLATED) { strm.msg = "unknown compression method"; state.mode = BAD; break } hold >>>= 4; bits -= 4; len = (hold & 15) + 8; if (state.wbits === 0) { state.wbits = len } else if (len > state.wbits) { strm.msg = "invalid window size"; state.mode = BAD; break } state.dmax = 1 << len; strm.adler = state.check = 1; state.mode = hold & 512 ? DICTID : TYPE; hold = 0; bits = 0; break; case FLAGS: while (bits < 16) { if (have === 0) { break inf_leave } have--; hold += input[next++] << bits; bits += 8 } state.flags = hold; if ((state.flags & 255) !== Z_DEFLATED) { strm.msg = "unknown compression method"; state.mode = BAD; break } if (state.flags & 57344) { strm.msg = "unknown header flags set"; state.mode = BAD; break } if (state.head) { state.head.text = hold >> 8 & 1 } if (state.flags & 512) { hbuf[0] = hold & 255; hbuf[1] = hold >>> 8 & 255; state.check = crc32(state.check, hbuf, 2, 0) } hold = 0; bits = 0; state.mode = TIME; case TIME: while (bits < 32) { if (have === 0) { break inf_leave } have--; hold += input[next++] << bits; bits += 8 } if (state.head) { state.head.time = hold } if (state.flags & 512) { hbuf[0] = hold & 255; hbuf[1] = hold >>> 8 & 255; hbuf[2] = hold >>> 16 & 255; hbuf[3] = hold >>> 24 & 255; state.check = crc32(state.check, hbuf, 4, 0) } hold = 0; bits = 0; state.mode = OS; case OS: while (bits < 16) { if (have === 0) { break inf_leave } have--; hold += input[next++] << bits; bits += 8 } if (state.head) { state.head.xflags = hold & 255; state.head.os = hold >> 8 } if (state.flags & 512) { hbuf[0] = hold & 255; hbuf[1] = hold >>> 8 & 255; state.check = crc32(state.check, hbuf, 2, 0) } hold = 0; bits = 0; state.mode = EXLEN; case EXLEN: if (state.flags & 1024) { while (bits < 16) { if (have === 0) { break inf_leave } have--; hold += input[next++] << bits; bits += 8 } state.length = hold; if (state.head) { state.head.extra_len = hold } if (state.flags & 512) { hbuf[0] = hold & 255; hbuf[1] = hold >>> 8 & 255; state.check = crc32(state.check, hbuf, 2, 0) } hold = 0; bits = 0 } else if (state.head) { state.head.extra = null } state.mode = EXTRA; case EXTRA: if (state.flags & 1024) { copy = state.length; if (copy > have) { copy = have } if (copy) { if (state.head) { len = state.head.extra_len - state.length; if (!state.head.extra) { state.head.extra = new Array(state.head.extra_len) } utils.arraySet(state.head.extra, input, next, copy, len) } if (state.flags & 512) { state.check = crc32(state.check, input, copy, next) } have -= copy; next += copy; state.length -= copy } if (state.length) { break inf_leave } } state.length = 0; state.mode = NAME; case NAME: if (state.flags & 2048) { if (have === 0) { break inf_leave } copy = 0; do { len = input[next + copy++]; if (state.head && len && state.length < 65536) { state.head.name += String.fromCharCode(len) } } while (len && copy < have); if (state.flags & 512) { state.check = crc32(state.check, input, copy, next) } have -= copy; next += copy; if (len) { break inf_leave } } else if (state.head) { state.head.name = null } state.length = 0; state.mode = COMMENT; case COMMENT: if (state.flags & 4096) { if (have === 0) { break inf_leave } copy = 0; do { len = input[next + copy++]; if (state.head && len && state.length < 65536) { state.head.comment += String.fromCharCode(len) } } while (len && copy < have); if (state.flags & 512) { state.check = crc32(state.check, input, copy, next) } have -= copy; next += copy; if (len) { break inf_leave } } else if (state.head) { state.head.comment = null } state.mode = HCRC; case HCRC: if (state.flags & 512) { while (bits < 16) { if (have === 0) { break inf_leave } have--; hold += input[next++] << bits; bits += 8 } if (hold !== (state.check & 65535)) { strm.msg = "header crc mismatch"; state.mode = BAD; break } hold = 0; bits = 0 } if (state.head) { state.head.hcrc = state.flags >> 9 & 1; state.head.done = true } strm.adler = state.check = 0; state.mode = TYPE; break; case DICTID: while (bits < 32) { if (have === 0) { break inf_leave } have--; hold += input[next++] << bits; bits += 8 } strm.adler = state.check = ZSWAP32(hold); hold = 0; bits = 0; state.mode = DICT; case DICT: if (state.havedict === 0) { strm.next_out = put; strm.avail_out = left; strm.next_in = next; strm.avail_in = have; state.hold = hold; state.bits = bits; return Z_NEED_DICT } strm.adler = state.check = 1; state.mode = TYPE; case TYPE: if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave }; case TYPEDO: if (state.last) { hold >>>= bits & 7; bits -= bits & 7; state.mode = CHECK; break } while (bits < 3) { if (have === 0) { break inf_leave } have--; hold += input[next++] << bits; bits += 8 } state.last = hold & 1; hold >>>= 1; bits -= 1; switch (hold & 3) { case 0: state.mode = STORED; break; case 1: fixedtables(state); state.mode = LEN_; if (flush === Z_TREES) { hold >>>= 2; bits -= 2; break inf_leave } break; case 2: state.mode = TABLE; break; case 3: strm.msg = "invalid block type"; state.mode = BAD; } hold >>>= 2; bits -= 2; break; case STORED: hold >>>= bits & 7; bits -= bits & 7; while (bits < 32) { if (have === 0) { break inf_leave } have--; hold += input[next++] << bits; bits += 8 } if ((hold & 65535) !== (hold >>> 16 ^ 65535)) { strm.msg = "invalid stored block lengths"; state.mode = BAD; break } state.length = hold & 65535; hold = 0; bits = 0; state.mode = COPY_; if (flush === Z_TREES) { break inf_leave }; case COPY_: state.mode = COPY; case COPY: copy = state.length; if (copy) { if (copy > have) { copy = have } if (copy > left) { copy = left } if (copy === 0) { break inf_leave } utils.arraySet(output, input, next, copy, put); have -= copy; next += copy; left -= copy; put += copy; state.length -= copy; break } state.mode = TYPE; break; case TABLE: while (bits < 14) { if (have === 0) { break inf_leave } have--; hold += input[next++] << bits; bits += 8 } state.nlen = (hold & 31) + 257; hold >>>= 5; bits -= 5; state.ndist = (hold & 31) + 1; hold >>>= 5; bits -= 5; state.ncode = (hold & 15) + 4; hold >>>= 4; bits -= 4; if (state.nlen > 286 || state.ndist > 30) { strm.msg = "too many length or distance symbols"; state.mode = BAD; break } state.have = 0; state.mode = LENLENS; case LENLENS: while (state.have < state.ncode) { while (bits < 3) { if (have === 0) { break inf_leave } have--; hold += input[next++] << bits; bits += 8 } state.lens[order[state.have++]] = hold & 7; hold >>>= 3; bits -= 3 } while (state.have < 19) { state.lens[order[state.have++]] = 0 } state.lencode = state.lendyn; state.lenbits = 7; opts = { bits: state.lenbits }; ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts); state.lenbits = opts.bits; if (ret) { strm.msg = "invalid code lengths set"; state.mode = BAD; break } state.have = 0; state.mode = CODELENS; case CODELENS: while (state.have < state.nlen + state.ndist) { for (; ;) { here = state.lencode[hold & (1 << state.lenbits) - 1]; here_bits = here >>> 24; here_op = here >>> 16 & 255; here_val = here & 65535; if (here_bits <= bits) { break } if (have === 0) { break inf_leave } have--; hold += input[next++] << bits; bits += 8 } if (here_val < 16) { hold >>>= here_bits; bits -= here_bits; state.lens[state.have++] = here_val } else { if (here_val === 16) { n = here_bits + 2; while (bits < n) { if (have === 0) { break inf_leave } have--; hold += input[next++] << bits; bits += 8 } hold >>>= here_bits; bits -= here_bits; if (state.have === 0) { strm.msg = "invalid bit length repeat"; state.mode = BAD; break } len = state.lens[state.have - 1]; copy = 3 + (hold & 3); hold >>>= 2; bits -= 2 } else if (here_val === 17) { n = here_bits + 3; while (bits < n) { if (have === 0) { break inf_leave } have--; hold += input[next++] << bits; bits += 8 } hold >>>= here_bits; bits -= here_bits; len = 0; copy = 3 + (hold & 7); hold >>>= 3; bits -= 3 } else { n = here_bits + 7; while (bits < n) { if (have === 0) { break inf_leave } have--; hold += input[next++] << bits; bits += 8 } hold >>>= here_bits; bits -= here_bits; len = 0; copy = 11 + (hold & 127); hold >>>= 7; bits -= 7 } if (state.have + copy > state.nlen + state.ndist) { strm.msg = "invalid bit length repeat"; state.mode = BAD; break } while (copy--) { state.lens[state.have++] = len } } } if (state.mode === BAD) { break } if (state.lens[256] === 0) { strm.msg = "invalid code -- missing end-of-block"; state.mode = BAD; break } state.lenbits = 9; opts = { bits: state.lenbits }; ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts); state.lenbits = opts.bits; if (ret) { strm.msg = "invalid literal/lengths set"; state.mode = BAD; break } state.distbits = 6; state.distcode = state.distdyn; opts = { bits: state.distbits }; ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts); state.distbits = opts.bits; if (ret) { strm.msg = "invalid distances set"; state.mode = BAD; break } state.mode = LEN_; if (flush === Z_TREES) { break inf_leave }; case LEN_: state.mode = LEN; case LEN: if (have >= 6 && left >= 258) { strm.next_out = put; strm.avail_out = left; strm.next_in = next; strm.avail_in = have; state.hold = hold; state.bits = bits; inflate_fast(strm, _out); put = strm.next_out; output = strm.output; left = strm.avail_out; next = strm.next_in; input = strm.input; have = strm.avail_in; hold = state.hold; bits = state.bits; if (state.mode === TYPE) { state.back = -1 } break } state.back = 0; for (; ;) { here = state.lencode[hold & (1 << state.lenbits) - 1]; here_bits = here >>> 24; here_op = here >>> 16 & 255; here_val = here & 65535; if (here_bits <= bits) { break } if (have === 0) { break inf_leave } have--; hold += input[next++] << bits; bits += 8 } if (here_op && (here_op & 240) === 0) { last_bits = here_bits; last_op = here_op; last_val = here_val; for (; ;) { here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)]; here_bits = here >>> 24; here_op = here >>> 16 & 255; here_val = here & 65535; if (last_bits + here_bits <= bits) { break } if (have === 0) { break inf_leave } have--; hold += input[next++] << bits; bits += 8 } hold >>>= last_bits; bits -= last_bits; state.back += last_bits } hold >>>= here_bits; bits -= here_bits; state.back += here_bits; state.length = here_val; if (here_op === 0) { state.mode = LIT; break } if (here_op & 32) { state.back = -1; state.mode = TYPE; break } if (here_op & 64) { strm.msg = "invalid literal/length code"; state.mode = BAD; break } state.extra = here_op & 15; state.mode = LENEXT; case LENEXT: if (state.extra) { n = state.extra; while (bits < n) { if (have === 0) { break inf_leave } have--; hold += input[next++] << bits; bits += 8 } state.length += hold & (1 << state.extra) - 1; hold >>>= state.extra; bits -= state.extra; state.back += state.extra } state.was = state.length; state.mode = DIST; case DIST: for (; ;) { here = state.distcode[hold & (1 << state.distbits) - 1]; here_bits = here >>> 24; here_op = here >>> 16 & 255; here_val = here & 65535; if (here_bits <= bits) { break } if (have === 0) { break inf_leave } have--; hold += input[next++] << bits; bits += 8 } if ((here_op & 240) === 0) { last_bits = here_bits; last_op = here_op; last_val = here_val; for (; ;) { here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)]; here_bits = here >>> 24; here_op = here >>> 16 & 255; here_val = here & 65535; if (last_bits + here_bits <= bits) { break } if (have === 0) { break inf_leave } have--; hold += input[next++] << bits; bits += 8 } hold >>>= last_bits; bits -= last_bits; state.back += last_bits } hold >>>= here_bits; bits -= here_bits; state.back += here_bits; if (here_op & 64) { strm.msg = "invalid distance code"; state.mode = BAD; break } state.offset = here_val; state.extra = here_op & 15; state.mode = DISTEXT; case DISTEXT: if (state.extra) { n = state.extra; while (bits < n) { if (have === 0) { break inf_leave } have--; hold += input[next++] << bits; bits += 8 } state.offset += hold & (1 << state.extra) - 1; hold >>>= state.extra; bits -= state.extra; state.back += state.extra } if (state.offset > state.dmax) { strm.msg = "invalid distance too far back"; state.mode = BAD; break } state.mode = MATCH; case MATCH: if (left === 0) { break inf_leave } copy = _out - left; if (state.offset > copy) { copy = state.offset - copy; if (copy > state.whave) { if (state.sane) { strm.msg = "invalid distance too far back"; state.mode = BAD; break } } if (copy > state.wnext) { copy -= state.wnext; from = state.wsize - copy } else { from = state.wnext - copy } if (copy > state.length) { copy = state.length } from_source = state.window } else { from_source = output; from = put - state.offset; copy = state.length } if (copy > left) { copy = left } left -= copy; state.length -= copy; do { output[put++] = from_source[from++] } while (--copy); if (state.length === 0) { state.mode = LEN } break; case LIT: if (left === 0) { break inf_leave } output[put++] = state.length; left--; state.mode = LEN; break; case CHECK: if (state.wrap) { while (bits < 32) { if (have === 0) { break inf_leave } have--; hold |= input[next++] << bits; bits += 8 } _out -= left; strm.total_out += _out; state.total += _out; if (_out) { strm.adler = state.check = state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out) } _out = left; if ((state.flags ? hold : ZSWAP32(hold)) !== state.check) { strm.msg = "incorrect data check"; state.mode = BAD; break } hold = 0; bits = 0 } state.mode = LENGTH; case LENGTH: if (state.wrap && state.flags) { while (bits < 32) { if (have === 0) { break inf_leave } have--; hold += input[next++] << bits; bits += 8 } if (hold !== (state.total & 4294967295)) { strm.msg = "incorrect length check"; state.mode = BAD; break } hold = 0; bits = 0 } state.mode = DONE; case DONE: ret = Z_STREAM_END; break inf_leave; case BAD: ret = Z_DATA_ERROR; break inf_leave; case MEM: return Z_MEM_ERROR; case SYNC:; default: return Z_STREAM_ERROR; } } strm.next_out = put; strm.avail_out = left; strm.next_in = next; strm.avail_in = have; state.hold = hold; state.bits = bits; if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH)) { if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) { state.mode = MEM; return Z_MEM_ERROR } } _in -= strm.avail_in; _out -= strm.avail_out; strm.total_in += _in; strm.total_out += _out; state.total += _out; if (state.wrap && _out) { strm.adler = state.check = state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out) } strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0); if ((_in === 0 && _out === 0 || flush === Z_FINISH) && ret === Z_OK) { ret = Z_BUF_ERROR } return ret } function inflateEnd(strm) { if (!strm || !strm.state) { return Z_STREAM_ERROR } var state = strm.state; if (state.window) { state.window = null } strm.state = null; return Z_OK } function inflateGetHeader(strm, head) { var state; if (!strm || !strm.state) { return Z_STREAM_ERROR } state = strm.state; if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR } state.head = head; head.done = false; return Z_OK } exports.inflateReset = inflateReset; exports.inflateReset2 = inflateReset2; exports.inflateResetKeep = inflateResetKeep; exports.inflateInit = inflateInit; exports.inflateInit2 = inflateInit2; exports.inflate = inflate; exports.inflateEnd = inflateEnd; exports.inflateGetHeader = inflateGetHeader;
            exports.inflateInfo = "pako inflate (from Nodeca project)"
        }, { "../utils/common": 27, "./adler32": 29, "./crc32": 31, "./inffast": 34, "./inftrees": 36 }], 36: [function (_dereq_, module, exports) { "use strict"; var utils = _dereq_("../utils/common"); var MAXBITS = 15; var ENOUGH_LENS = 852; var ENOUGH_DISTS = 592; var CODES = 0; var LENS = 1; var DISTS = 2; var lbase = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0]; var lext = [16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78]; var dbase = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0]; var dext = [16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64]; module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) { var bits = opts.bits; var len = 0; var sym = 0; var min = 0, max = 0; var root = 0; var curr = 0; var drop = 0; var left = 0; var used = 0; var huff = 0; var incr; var fill; var low; var mask; var next; var base = null; var base_index = 0; var end; var count = new utils.Buf16(MAXBITS + 1); var offs = new utils.Buf16(MAXBITS + 1); var extra = null; var extra_index = 0; var here_bits, here_op, here_val; for (len = 0; len <= MAXBITS; len++) { count[len] = 0 } for (sym = 0; sym < codes; sym++) { count[lens[lens_index + sym]]++ } root = bits; for (max = MAXBITS; max >= 1; max--) { if (count[max] !== 0) { break } } if (root > max) { root = max } if (max === 0) { table[table_index++] = 1 << 24 | 64 << 16 | 0; table[table_index++] = 1 << 24 | 64 << 16 | 0; opts.bits = 1; return 0 } for (min = 1; min < max; min++) { if (count[min] !== 0) { break } } if (root < min) { root = min } left = 1; for (len = 1; len <= MAXBITS; len++) { left <<= 1; left -= count[len]; if (left < 0) { return -1 } } if (left > 0 && (type === CODES || max !== 1)) { return -1 } offs[1] = 0; for (len = 1; len < MAXBITS; len++) { offs[len + 1] = offs[len] + count[len] } for (sym = 0; sym < codes; sym++) { if (lens[lens_index + sym] !== 0) { work[offs[lens[lens_index + sym]]++] = sym } } if (type === CODES) { base = extra = work; end = 19 } else if (type === LENS) { base = lbase; base_index -= 257; extra = lext; extra_index -= 257; end = 256 } else { base = dbase; extra = dext; end = -1 } huff = 0; sym = 0; len = min; next = table_index; curr = root; drop = 0; low = -1; used = 1 << root; mask = used - 1; if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) { return 1 } var i = 0; for (; ;) { i++; here_bits = len - drop; if (work[sym] < end) { here_op = 0; here_val = work[sym] } else if (work[sym] > end) { here_op = extra[extra_index + work[sym]]; here_val = base[base_index + work[sym]] } else { here_op = 32 + 64; here_val = 0 } incr = 1 << len - drop; fill = 1 << curr; min = fill; do { fill -= incr; table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0 } while (fill !== 0); incr = 1 << len - 1; while (huff & incr) { incr >>= 1 } if (incr !== 0) { huff &= incr - 1; huff += incr } else { huff = 0 } sym++; if (--count[len] === 0) { if (len === max) { break } len = lens[lens_index + work[sym]] } if (len > root && (huff & mask) !== low) { if (drop === 0) { drop = root } next += min; curr = len - drop; left = 1 << curr; while (curr + drop < max) { left -= count[curr + drop]; if (left <= 0) { break } curr++; left <<= 1 } used += 1 << curr; if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) { return 1 } low = huff & mask; table[low] = root << 24 | curr << 16 | next - table_index | 0 } } if (huff !== 0) { table[next + huff] = len - drop << 24 | 64 << 16 | 0 } opts.bits = root; return 0 } }, { "../utils/common": 27 }], 37: [function (_dereq_, module, exports) { "use strict"; module.exports = { 2: "need dictionary", 1: "stream end", 0: "", "-1": "file error", "-2": "stream error", "-3": "data error", "-4": "insufficient memory", "-5": "buffer error", "-6": "incompatible version" } }, {}], 38: [function (_dereq_, module, exports) { "use strict"; var utils = _dereq_("../utils/common"); var Z_FIXED = 4; var Z_BINARY = 0; var Z_TEXT = 1; var Z_UNKNOWN = 2; function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0 } } var STORED_BLOCK = 0; var STATIC_TREES = 1; var DYN_TREES = 2; var MIN_MATCH = 3; var MAX_MATCH = 258; var LENGTH_CODES = 29; var LITERALS = 256; var L_CODES = LITERALS + 1 + LENGTH_CODES; var D_CODES = 30; var BL_CODES = 19; var HEAP_SIZE = 2 * L_CODES + 1; var MAX_BITS = 15; var Buf_size = 16; var MAX_BL_BITS = 7; var END_BLOCK = 256; var REP_3_6 = 16; var REPZ_3_10 = 17; var REPZ_11_138 = 18; var extra_lbits = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0]; var extra_dbits = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]; var extra_blbits = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7]; var bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]; var DIST_CODE_LEN = 512; var static_ltree = new Array((L_CODES + 2) * 2); zero(static_ltree); var static_dtree = new Array(D_CODES * 2); zero(static_dtree); var _dist_code = new Array(DIST_CODE_LEN); zero(_dist_code); var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1); zero(_length_code); var base_length = new Array(LENGTH_CODES); zero(base_length); var base_dist = new Array(D_CODES); zero(base_dist); var StaticTreeDesc = function (static_tree, extra_bits, extra_base, elems, max_length) { this.static_tree = static_tree; this.extra_bits = extra_bits; this.extra_base = extra_base; this.elems = elems; this.max_length = max_length; this.has_stree = static_tree && static_tree.length }; var static_l_desc; var static_d_desc; var static_bl_desc; var TreeDesc = function (dyn_tree, stat_desc) { this.dyn_tree = dyn_tree; this.max_code = 0; this.stat_desc = stat_desc }; function d_code(dist) { return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)] } function put_short(s, w) { s.pending_buf[s.pending++] = w & 255; s.pending_buf[s.pending++] = w >>> 8 & 255 } function send_bits(s, value, length) { if (s.bi_valid > Buf_size - length) { s.bi_buf |= value << s.bi_valid & 65535; put_short(s, s.bi_buf); s.bi_buf = value >> Buf_size - s.bi_valid; s.bi_valid += length - Buf_size } else { s.bi_buf |= value << s.bi_valid & 65535; s.bi_valid += length } } function send_code(s, c, tree) { send_bits(s, tree[c * 2], tree[c * 2 + 1]) } function bi_reverse(code, len) { var res = 0; do { res |= code & 1; code >>>= 1; res <<= 1 } while (--len > 0); return res >>> 1 } function bi_flush(s) { if (s.bi_valid === 16) { put_short(s, s.bi_buf); s.bi_buf = 0; s.bi_valid = 0 } else if (s.bi_valid >= 8) { s.pending_buf[s.pending++] = s.bi_buf & 255; s.bi_buf >>= 8; s.bi_valid -= 8 } } function gen_bitlen(s, desc) { var tree = desc.dyn_tree; var max_code = desc.max_code; var stree = desc.stat_desc.static_tree; var has_stree = desc.stat_desc.has_stree; var extra = desc.stat_desc.extra_bits; var base = desc.stat_desc.extra_base; var max_length = desc.stat_desc.max_length; var h; var n, m; var bits; var xbits; var f; var overflow = 0; for (bits = 0; bits <= MAX_BITS; bits++) { s.bl_count[bits] = 0 } tree[s.heap[s.heap_max] * 2 + 1] = 0; for (h = s.heap_max + 1; h < HEAP_SIZE; h++) { n = s.heap[h]; bits = tree[tree[n * 2 + 1] * 2 + 1] + 1; if (bits > max_length) { bits = max_length; overflow++ } tree[n * 2 + 1] = bits; if (n > max_code) { continue } s.bl_count[bits]++; xbits = 0; if (n >= base) { xbits = extra[n - base] } f = tree[n * 2]; s.opt_len += f * (bits + xbits); if (has_stree) { s.static_len += f * (stree[n * 2 + 1] + xbits) } } if (overflow === 0) { return } do { bits = max_length - 1; while (s.bl_count[bits] === 0) { bits-- } s.bl_count[bits]--; s.bl_count[bits + 1] += 2; s.bl_count[max_length]--; overflow -= 2 } while (overflow > 0); for (bits = max_length; bits !== 0; bits--) { n = s.bl_count[bits]; while (n !== 0) { m = s.heap[--h]; if (m > max_code) { continue } if (tree[m * 2 + 1] !== bits) { s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2]; tree[m * 2 + 1] = bits } n-- } } } function gen_codes(tree, max_code, bl_count) { var next_code = new Array(MAX_BITS + 1); var code = 0; var bits; var n; for (bits = 1; bits <= MAX_BITS; bits++) { next_code[bits] = code = code + bl_count[bits - 1] << 1 } for (n = 0; n <= max_code; n++) { var len = tree[n * 2 + 1]; if (len === 0) { continue } tree[n * 2] = bi_reverse(next_code[len]++, len) } } function tr_static_init() { var n; var bits; var length; var code; var dist; var bl_count = new Array(MAX_BITS + 1); length = 0; for (code = 0; code < LENGTH_CODES - 1; code++) { base_length[code] = length; for (n = 0; n < 1 << extra_lbits[code]; n++) { _length_code[length++] = code } } _length_code[length - 1] = code; dist = 0; for (code = 0; code < 16; code++) { base_dist[code] = dist; for (n = 0; n < 1 << extra_dbits[code]; n++) { _dist_code[dist++] = code } } dist >>= 7; for (; code < D_CODES; code++) { base_dist[code] = dist << 7; for (n = 0; n < 1 << extra_dbits[code] - 7; n++) { _dist_code[256 + dist++] = code } } for (bits = 0; bits <= MAX_BITS; bits++) { bl_count[bits] = 0 } n = 0; while (n <= 143) { static_ltree[n * 2 + 1] = 8; n++; bl_count[8]++ } while (n <= 255) { static_ltree[n * 2 + 1] = 9; n++; bl_count[9]++ } while (n <= 279) { static_ltree[n * 2 + 1] = 7; n++; bl_count[7]++ } while (n <= 287) { static_ltree[n * 2 + 1] = 8; n++; bl_count[8]++ } gen_codes(static_ltree, L_CODES + 1, bl_count); for (n = 0; n < D_CODES; n++) { static_dtree[n * 2 + 1] = 5; static_dtree[n * 2] = bi_reverse(n, 5) } static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS); static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS); static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS) } function init_block(s) { var n; for (n = 0; n < L_CODES; n++) { s.dyn_ltree[n * 2] = 0 } for (n = 0; n < D_CODES; n++) { s.dyn_dtree[n * 2] = 0 } for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2] = 0 } s.dyn_ltree[END_BLOCK * 2] = 1; s.opt_len = s.static_len = 0; s.last_lit = s.matches = 0 } function bi_windup(s) { if (s.bi_valid > 8) { put_short(s, s.bi_buf) } else if (s.bi_valid > 0) { s.pending_buf[s.pending++] = s.bi_buf } s.bi_buf = 0; s.bi_valid = 0 } function copy_block(s, buf, len, header) { bi_windup(s); if (header) { put_short(s, len); put_short(s, ~len) } utils.arraySet(s.pending_buf, s.window, buf, len, s.pending); s.pending += len } function smaller(tree, n, m, depth) { var _n2 = n * 2; var _m2 = m * 2; return tree[_n2] < tree[_m2] || tree[_n2] === tree[_m2] && depth[n] <= depth[m] } function pqdownheap(s, tree, k) { var v = s.heap[k]; var j = k << 1; while (j <= s.heap_len) { if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) { j++ } if (smaller(tree, v, s.heap[j], s.depth)) { break } s.heap[k] = s.heap[j]; k = j; j <<= 1 } s.heap[k] = v } function compress_block(s, ltree, dtree) { var dist; var lc; var lx = 0; var code; var extra; if (s.last_lit !== 0) { do { dist = s.pending_buf[s.d_buf + lx * 2] << 8 | s.pending_buf[s.d_buf + lx * 2 + 1]; lc = s.pending_buf[s.l_buf + lx]; lx++; if (dist === 0) { send_code(s, lc, ltree) } else { code = _length_code[lc]; send_code(s, code + LITERALS + 1, ltree); extra = extra_lbits[code]; if (extra !== 0) { lc -= base_length[code]; send_bits(s, lc, extra) } dist--; code = d_code(dist); send_code(s, code, dtree); extra = extra_dbits[code]; if (extra !== 0) { dist -= base_dist[code]; send_bits(s, dist, extra) } } } while (lx < s.last_lit) } send_code(s, END_BLOCK, ltree) } function build_tree(s, desc) { var tree = desc.dyn_tree; var stree = desc.stat_desc.static_tree; var has_stree = desc.stat_desc.has_stree; var elems = desc.stat_desc.elems; var n, m; var max_code = -1; var node; s.heap_len = 0; s.heap_max = HEAP_SIZE; for (n = 0; n < elems; n++) { if (tree[n * 2] !== 0) { s.heap[++s.heap_len] = max_code = n; s.depth[n] = 0 } else { tree[n * 2 + 1] = 0 } } while (s.heap_len < 2) { node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0; tree[node * 2] = 1; s.depth[node] = 0; s.opt_len--; if (has_stree) { s.static_len -= stree[node * 2 + 1] } } desc.max_code = max_code; for (n = s.heap_len >> 1; n >= 1; n--) { pqdownheap(s, tree, n) } node = elems; do { n = s.heap[1]; s.heap[1] = s.heap[s.heap_len--]; pqdownheap(s, tree, 1); m = s.heap[1]; s.heap[--s.heap_max] = n; s.heap[--s.heap_max] = m; tree[node * 2] = tree[n * 2] + tree[m * 2]; s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1; tree[n * 2 + 1] = tree[m * 2 + 1] = node; s.heap[1] = node++; pqdownheap(s, tree, 1) } while (s.heap_len >= 2); s.heap[--s.heap_max] = s.heap[1]; gen_bitlen(s, desc); gen_codes(tree, max_code, s.bl_count) } function scan_tree(s, tree, max_code) { var n; var prevlen = -1; var curlen; var nextlen = tree[0 * 2 + 1]; var count = 0; var max_count = 7; var min_count = 4; if (nextlen === 0) { max_count = 138; min_count = 3 } tree[(max_code + 1) * 2 + 1] = 65535; for (n = 0; n <= max_code; n++) { curlen = nextlen; nextlen = tree[(n + 1) * 2 + 1]; if (++count < max_count && curlen === nextlen) { continue } else if (count < min_count) { s.bl_tree[curlen * 2] += count } else if (curlen !== 0) { if (curlen !== prevlen) { s.bl_tree[curlen * 2]++ } s.bl_tree[REP_3_6 * 2]++ } else if (count <= 10) { s.bl_tree[REPZ_3_10 * 2]++ } else { s.bl_tree[REPZ_11_138 * 2]++ } count = 0; prevlen = curlen; if (nextlen === 0) { max_count = 138; min_count = 3 } else if (curlen === nextlen) { max_count = 6; min_count = 3 } else { max_count = 7; min_count = 4 } } } function send_tree(s, tree, max_code) { var n; var prevlen = -1; var curlen; var nextlen = tree[0 * 2 + 1]; var count = 0; var max_count = 7; var min_count = 4; if (nextlen === 0) { max_count = 138; min_count = 3 } for (n = 0; n <= max_code; n++) { curlen = nextlen; nextlen = tree[(n + 1) * 2 + 1]; if (++count < max_count && curlen === nextlen) { continue } else if (count < min_count) { do { send_code(s, curlen, s.bl_tree) } while (--count !== 0) } else if (curlen !== 0) { if (curlen !== prevlen) { send_code(s, curlen, s.bl_tree); count-- } send_code(s, REP_3_6, s.bl_tree); send_bits(s, count - 3, 2) } else if (count <= 10) { send_code(s, REPZ_3_10, s.bl_tree); send_bits(s, count - 3, 3) } else { send_code(s, REPZ_11_138, s.bl_tree); send_bits(s, count - 11, 7) } count = 0; prevlen = curlen; if (nextlen === 0) { max_count = 138; min_count = 3 } else if (curlen === nextlen) { max_count = 6; min_count = 3 } else { max_count = 7; min_count = 4 } } } function build_bl_tree(s) { var max_blindex; scan_tree(s, s.dyn_ltree, s.l_desc.max_code); scan_tree(s, s.dyn_dtree, s.d_desc.max_code); build_tree(s, s.bl_desc); for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) { if (s.bl_tree[bl_order[max_blindex] * 2 + 1] !== 0) { break } } s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4; return max_blindex } function send_all_trees(s, lcodes, dcodes, blcodes) { var rank; send_bits(s, lcodes - 257, 5); send_bits(s, dcodes - 1, 5); send_bits(s, blcodes - 4, 4); for (rank = 0; rank < blcodes; rank++) { send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1], 3) } send_tree(s, s.dyn_ltree, lcodes - 1); send_tree(s, s.dyn_dtree, dcodes - 1) } function detect_data_type(s) { var black_mask = 4093624447; var n; for (n = 0; n <= 31; n++, black_mask >>>= 1) { if (black_mask & 1 && s.dyn_ltree[n * 2] !== 0) { return Z_BINARY } } if (s.dyn_ltree[9 * 2] !== 0 || s.dyn_ltree[10 * 2] !== 0 || s.dyn_ltree[13 * 2] !== 0) { return Z_TEXT } for (n = 32; n < LITERALS; n++) { if (s.dyn_ltree[n * 2] !== 0) { return Z_TEXT } } return Z_BINARY } var static_init_done = false; function _tr_init(s) { if (!static_init_done) { tr_static_init(); static_init_done = true } s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc); s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc); s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc); s.bi_buf = 0; s.bi_valid = 0; init_block(s) } function _tr_stored_block(s, buf, stored_len, last) { send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3); copy_block(s, buf, stored_len, true) } function _tr_align(s) { send_bits(s, STATIC_TREES << 1, 3); send_code(s, END_BLOCK, static_ltree); bi_flush(s) } function _tr_flush_block(s, buf, stored_len, last) { var opt_lenb, static_lenb; var max_blindex = 0; if (s.level > 0) { if (s.strm.data_type === Z_UNKNOWN) { s.strm.data_type = detect_data_type(s) } build_tree(s, s.l_desc); build_tree(s, s.d_desc); max_blindex = build_bl_tree(s); opt_lenb = s.opt_len + 3 + 7 >>> 3; static_lenb = s.static_len + 3 + 7 >>> 3; if (static_lenb <= opt_lenb) { opt_lenb = static_lenb } } else { opt_lenb = static_lenb = stored_len + 5 } if (stored_len + 4 <= opt_lenb && buf !== -1) { _tr_stored_block(s, buf, stored_len, last) } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) { send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3); compress_block(s, static_ltree, static_dtree) } else { send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3); send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1); compress_block(s, s.dyn_ltree, s.dyn_dtree) } init_block(s); if (last) { bi_windup(s) } } function _tr_tally(s, dist, lc) { s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 255; s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 255; s.pending_buf[s.l_buf + s.last_lit] = lc & 255; s.last_lit++; if (dist === 0) { s.dyn_ltree[lc * 2]++ } else { s.matches++; dist--; s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]++; s.dyn_dtree[d_code(dist) * 2]++ } return s.last_lit === s.lit_bufsize - 1 } exports._tr_init = _tr_init; exports._tr_stored_block = _tr_stored_block; exports._tr_flush_block = _tr_flush_block; exports._tr_tally = _tr_tally; exports._tr_align = _tr_align }, { "../utils/common": 27 }], 39: [function (_dereq_, module, exports) { "use strict"; function ZStream() { this.input = null; this.next_in = 0; this.avail_in = 0; this.total_in = 0; this.output = null; this.next_out = 0; this.avail_out = 0; this.total_out = 0; this.msg = ""; this.state = null; this.data_type = 2; this.adler = 0 } module.exports = ZStream }, {}]
    }, {}, [9])(9)
}); var cptable = { version: "1.9.0" }; cptable[437] = function () { var d = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ", D = [], e = {}; for (var i = 0; i != d.length; ++i) { if (d.charCodeAt(i) !== 65533) e[d.charAt(i)] = i; D[i] = d.charAt(i) } return { enc: e, dec: D } }(); cptable[620] = function () { var d = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàąçêëèïîćÄĄĘęłôöĆûùŚÖÜ¢Ł¥śƒŹŻóÓńŃźż¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ", D = [], e = {}; for (var i = 0; i != d.length; ++i) { if (d.charCodeAt(i) !== 65533) e[d.charAt(i)] = i; D[i] = d.charAt(i) } return { enc: e, dec: D } }(); cptable[737] = function () { var d = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ ", D = [], e = {}; for (var i = 0; i != d.length; ++i) { if (d.charCodeAt(i) !== 65533) e[d.charAt(i)] = i; D[i] = d.charAt(i) } return { enc: e, dec: D } }(); cptable[850] = function () { var d = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ ", D = [], e = {}; for (var i = 0; i != d.length; ++i) { if (d.charCodeAt(i) !== 65533) e[d.charAt(i)] = i; D[i] = d.charAt(i) } return { enc: e, dec: D } }(); cptable[852] = function () { var d = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ ", D = [], e = {}; for (var i = 0; i != d.length; ++i) { if (d.charCodeAt(i) !== 65533) e[d.charAt(i)] = i; D[i] = d.charAt(i) } return { enc: e, dec: D } }(); cptable[857] = function () { var d = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ ", D = [], e = {}; for (var i = 0; i != d.length; ++i) { if (d.charCodeAt(i) !== 65533) e[d.charAt(i)] = i; D[i] = d.charAt(i) } return { enc: e, dec: D } }(); cptable[861] = function () { var d = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ", D = [], e = {}; for (var i = 0; i != d.length; ++i) { if (d.charCodeAt(i) !== 65533) e[d.charAt(i)] = i; D[i] = d.charAt(i) } return { enc: e, dec: D } }(); cptable[865] = function () { var d = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ", D = [], e = {}; for (var i = 0; i != d.length; ++i) { if (d.charCodeAt(i) !== 65533) e[d.charAt(i)] = i; D[i] = d.charAt(i) } return { enc: e, dec: D } }(); cptable[866] = function () { var d = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ ", D = [], e = {}; for (var i = 0; i != d.length; ++i) { if (d.charCodeAt(i) !== 65533) e[d.charAt(i)] = i; D[i] = d.charAt(i) } return { enc: e, dec: D } }(); cptable[874] = function () { var d = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����", D = [], e = {}; for (var i = 0; i != d.length; ++i) { if (d.charCodeAt(i) !== 65533) e[d.charAt(i)] = i; D[i] = d.charAt(i) } return { enc: e, dec: D } }(); cptable[895] = function () { var d = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ČüéďäĎŤčěĚĹÍľǪÄÁÉžŽôöÓůÚýÖÜŠĽÝŘťáíóúňŇŮÔšřŕŔ¼§«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ", D = [], e = {}; for (var i = 0; i != d.length; ++i) { if (d.charCodeAt(i) !== 65533) e[d.charAt(i)] = i; D[i] = d.charAt(i) } return { enc: e, dec: D } }(); cptable[932] = function () {
    var d = [], e = {}, D = [], j; D[0] = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~���������������������������������｡｢｣､･ｦｧｨｩｪｫｬｭｮｯｰｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜﾝﾞﾟ��������������������������������".split(""); for (j = 0; j != D[0].length; ++j) if (D[0][j].charCodeAt(0) !== 65533) { e[D[0][j]] = 0 + j; d[0 + j] = D[0][j] } D[129] = "����������������������������������������������������������������　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈〉《》「」『』【】＋－±×�÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇◆□■△▲▽▼※〒→←↑↓〓�����������∈∋⊆⊇⊂⊃∪∩��������∧∨￢⇒⇔∀∃�����������∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬�������Å‰♯♭♪†‡¶����◯���".split(""); for (j = 0; j != D[129].length; ++j) if (D[129][j].charCodeAt(0) !== 65533) { e[D[129][j]] = 33024 + j; d[33024 + j] = D[129][j] } D[130] = "�������������������������������������������������������������������������������０１２３４５６７８９�������ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ�������ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ����ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをん��������������".split(""); for (j = 0; j != D[130].length; ++j) if (D[130][j].charCodeAt(0) !== 65533) { e[D[130][j]] = 33280 + j; d[33280 + j] = D[130][j] } D[131] = "����������������������������������������������������������������ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミ�ムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶ��������ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ��������αβγδεζηθικλμνξοπρστυφχψω�����������������������������������������".split(""); for (j = 0; j != D[131].length; ++j) if (D[131][j].charCodeAt(0) !== 65533) { e[D[131][j]] = 33536 + j; d[33536 + j] = D[131][j] } D[132] = "����������������������������������������������������������������АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ���������������абвгдеёжзийклмн�опрстуфхцчшщъыьэюя�������������─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂�����������������������������������������������������������������".split(""); for (j = 0; j != D[132].length; ++j) if (D[132][j].charCodeAt(0) !== 65533) { e[D[132][j]] = 33792 + j; d[33792 + j] = D[132][j] } D[135] = "����������������������������������������������������������������①②③④⑤⑥⑦⑧⑨⑩⑪⑫⑬⑭⑮⑯⑰⑱⑲⑳ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩ�㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡��������㍻�〝〟№㏍℡㊤㊥㊦㊧㊨㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪���������������������������������������������������������������������������������������������������".split(""); for (j = 0; j != D[135].length; ++j) if (D[135][j].charCodeAt(0) !== 65533) { e[D[135][j]] = 34560 + j; d[34560 + j] = D[135][j] } D[136] = "���������������������������������������������������������������������������������������������������������������������������������������������������������������亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭���".split(""); for (j = 0; j != D[136].length; ++j) if (D[136][j].charCodeAt(0) !== 65533) { e[D[136][j]] = 34816 + j; d[34816 + j] = D[136][j] } D[137] = "����������������������������������������������������������������院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円�園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改���".split(""); for (j = 0; j != D[137].length; ++j) if (D[137][j].charCodeAt(0) !== 65533) { e[D[137][j]] = 35072 + j; d[35072 + j] = D[137][j] } D[138] = "����������������������������������������������������������������魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫�橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄���".split(""); for (j = 0; j != D[138].length; ++j) if (D[138][j].charCodeAt(0) !== 65533) { e[D[138][j]] = 35328 + j; d[35328 + j] = D[138][j] } D[139] = "����������������������������������������������������������������機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救�朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈���".split(""); for (j = 0; j != D[139].length; ++j) if (D[139][j].charCodeAt(0) !== 65533) { e[D[139][j]] = 35584 + j; d[35584 + j] = D[139][j] } D[140] = "����������������������������������������������������������������掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨�劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向���".split(""); for (j = 0; j != D[140].length; ++j) if (D[140][j].charCodeAt(0) !== 65533) { e[D[140][j]] = 35840 + j; d[35840 + j] = D[140][j] } D[141] = "����������������������������������������������������������������后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降�項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷���".split(""); for (j = 0; j != D[141].length; ++j) if (D[141][j].charCodeAt(0) !== 65533) { e[D[141][j]] = 36096 + j; d[36096 + j] = D[141][j] } D[142] = "����������������������������������������������������������������察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止�死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周���".split(""); for (j = 0; j != D[142].length; ++j) if (D[142][j].charCodeAt(0) !== 65533) { e[D[142][j]] = 36352 + j; d[36352 + j] = D[142][j] } D[143] = "����������������������������������������������������������������宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳�準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾���".split(""); for (j = 0; j != D[143].length; ++j) if (D[143][j].charCodeAt(0) !== 65533) { e[D[143][j]] = 36608 + j; d[36608 + j] = D[143][j] } D[144] = "����������������������������������������������������������������拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨�逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線���".split(""); for (j = 0; j != D[144].length; ++j) if (D[144][j].charCodeAt(0) !== 65533) { e[D[144][j]] = 36864 + j; d[36864 + j] = D[144][j] } D[145] = "����������������������������������������������������������������繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻�操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只���".split(""); for (j = 0; j != D[145].length; ++j) if (D[145][j].charCodeAt(0) !== 65533) { e[D[145][j]] = 37120 + j; d[37120 + j] = D[145][j] } D[146] = "����������������������������������������������������������������叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄�逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓���".split(""); for (j = 0; j != D[146].length; ++j) if (D[146][j].charCodeAt(0) !== 65533) { e[D[146][j]] = 37376 + j; d[37376 + j] = D[146][j] } D[147] = "����������������������������������������������������������������邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬�凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入���".split(""); for (j = 0; j != D[147].length; ++j) if (D[147][j].charCodeAt(0) !== 65533) { e[D[147][j]] = 37632 + j; d[37632 + j] = D[147][j] } D[148] = "����������������������������������������������������������������如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅�楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美���".split(""); for (j = 0; j != D[148].length; ++j) if (D[148][j].charCodeAt(0) !== 65533) { e[D[148][j]] = 37888 + j; d[37888 + j] = D[148][j] } D[149] = "����������������������������������������������������������������鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷�斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋���".split(""); for (j = 0; j != D[149].length; ++j) if (D[149][j].charCodeAt(0) !== 65533) { e[D[149][j]] = 38144 + j; d[38144 + j] = D[149][j] } D[150] = "����������������������������������������������������������������法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆�摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒���".split(""); for (j = 0; j != D[150].length; ++j) if (D[150][j].charCodeAt(0) !== 65533) { e[D[150][j]] = 38400 + j; d[38400 + j] = D[150][j] } D[151] = "����������������������������������������������������������������諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲�沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯���".split(""); for (j = 0; j != D[151].length; ++j) if (D[151][j].charCodeAt(0) !== 65533) { e[D[151][j]] = 38656 + j; d[38656 + j] = D[151][j] } D[152] = "����������������������������������������������������������������蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕��������������������������������������������弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲���".split(""); for (j = 0; j != D[152].length; ++j) if (D[152][j].charCodeAt(0) !== 65533) { e[D[152][j]] = 38912 + j; d[38912 + j] = D[152][j] } D[153] = "����������������������������������������������������������������僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭�凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨���".split(""); for (j = 0; j != D[153].length; ++j) if (D[153][j].charCodeAt(0) !== 65533) { e[D[153][j]] = 39168 + j; d[39168 + j] = D[153][j] } D[154] = "����������������������������������������������������������������咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸�噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩���".split(""); for (j = 0; j != D[154].length; ++j) if (D[154][j].charCodeAt(0) !== 65533) { e[D[154][j]] = 39424 + j; d[39424 + j] = D[154][j] } D[155] = "����������������������������������������������������������������奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀�它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏���".split(""); for (j = 0; j != D[155].length; ++j) if (D[155][j].charCodeAt(0) !== 65533) { e[D[155][j]] = 39680 + j; d[39680 + j] = D[155][j] } D[156] = "����������������������������������������������������������������廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠�怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛���".split(""); for (j = 0; j != D[156].length; ++j) if (D[156][j].charCodeAt(0) !== 65533) { e[D[156][j]] = 39936 + j; d[39936 + j] = D[156][j] } D[157] = "����������������������������������������������������������������戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫�捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼���".split(""); for (j = 0; j != D[157].length; ++j) if (D[157][j].charCodeAt(0) !== 65533) { e[D[157][j]] = 40192 + j; d[40192 + j] = D[157][j] } D[158] = "����������������������������������������������������������������曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎�梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣���".split(""); for (j = 0; j != D[158].length; ++j) if (D[158][j].charCodeAt(0) !== 65533) { e[D[158][j]] = 40448 + j; d[40448 + j] = D[158][j] } D[159] = "����������������������������������������������������������������檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯�麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌���".split(""); for (j = 0; j != D[159].length; ++j) if (D[159][j].charCodeAt(0) !== 65533) { e[D[159][j]] = 40704 + j; d[40704 + j] = D[159][j] } D[224] = "����������������������������������������������������������������漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝�烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱���".split(""); for (j = 0; j != D[224].length; ++j) if (D[224][j].charCodeAt(0) !== 65533) { e[D[224][j]] = 57344 + j; d[57344 + j] = D[224][j] } D[225] = "����������������������������������������������������������������瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿�痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬���".split("");
    for (j = 0; j != D[225].length; ++j) if (D[225][j].charCodeAt(0) !== 65533) { e[D[225][j]] = 57600 + j; d[57600 + j] = D[225][j] } D[226] = "����������������������������������������������������������������磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰�窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆���".split(""); for (j = 0; j != D[226].length; ++j) if (D[226][j].charCodeAt(0) !== 65533) { e[D[226][j]] = 57856 + j; d[57856 + j] = D[226][j] } D[227] = "����������������������������������������������������������������紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷�縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋���".split(""); for (j = 0; j != D[227].length; ++j) if (D[227][j].charCodeAt(0) !== 65533) { e[D[227][j]] = 58112 + j; d[58112 + j] = D[227][j] } D[228] = "����������������������������������������������������������������隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤�艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈���".split(""); for (j = 0; j != D[228].length; ++j) if (D[228][j].charCodeAt(0) !== 65533) { e[D[228][j]] = 58368 + j; d[58368 + j] = D[228][j] } D[229] = "����������������������������������������������������������������蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬�蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞���".split(""); for (j = 0; j != D[229].length; ++j) if (D[229][j].charCodeAt(0) !== 65533) { e[D[229][j]] = 58624 + j; d[58624 + j] = D[229][j] } D[230] = "����������������������������������������������������������������襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧�諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊���".split(""); for (j = 0; j != D[230].length; ++j) if (D[230][j].charCodeAt(0) !== 65533) { e[D[230][j]] = 58880 + j; d[58880 + j] = D[230][j] } D[231] = "����������������������������������������������������������������蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜�轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮���".split(""); for (j = 0; j != D[231].length; ++j) if (D[231][j].charCodeAt(0) !== 65533) { e[D[231][j]] = 59136 + j; d[59136 + j] = D[231][j] } D[232] = "����������������������������������������������������������������錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙�閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰���".split(""); for (j = 0; j != D[232].length; ++j) if (D[232][j].charCodeAt(0) !== 65533) { e[D[232][j]] = 59392 + j; d[59392 + j] = D[232][j] } D[233] = "����������������������������������������������������������������顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃�騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈���".split(""); for (j = 0; j != D[233].length; ++j) if (D[233][j].charCodeAt(0) !== 65533) { e[D[233][j]] = 59648 + j; d[59648 + j] = D[233][j] } D[234] = "����������������������������������������������������������������鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯�黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠堯槇遙瑤凜熙�������������������������������������������������������������������������������������������".split(""); for (j = 0; j != D[234].length; ++j) if (D[234][j].charCodeAt(0) !== 65533) { e[D[234][j]] = 59904 + j; d[59904 + j] = D[234][j] } D[237] = "����������������������������������������������������������������纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏�塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱���".split(""); for (j = 0; j != D[237].length; ++j) if (D[237][j].charCodeAt(0) !== 65533) { e[D[237][j]] = 60672 + j; d[60672 + j] = D[237][j] } D[238] = "����������������������������������������������������������������犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙�蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑��ⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹ￢￤＇＂���".split(""); for (j = 0; j != D[238].length; ++j) if (D[238][j].charCodeAt(0) !== 65533) { e[D[238][j]] = 60928 + j; d[60928 + j] = D[238][j] } D[250] = "����������������������������������������������������������������ⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩ￢￤＇＂㈱№℡∵纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊�兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯���".split(""); for (j = 0; j != D[250].length; ++j) if (D[250][j].charCodeAt(0) !== 65533) { e[D[250][j]] = 64e3 + j; d[64e3 + j] = D[250][j] } D[251] = "����������������������������������������������������������������涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神�祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙���".split(""); for (j = 0; j != D[251].length; ++j) if (D[251][j].charCodeAt(0) !== 65533) { e[D[251][j]] = 64256 + j; d[64256 + j] = D[251][j] } D[252] = "����������������������������������������������������������������髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������".split(""); for (j = 0; j != D[252].length; ++j) if (D[252][j].charCodeAt(0) !== 65533) { e[D[252][j]] = 64512 + j; d[64512 + j] = D[252][j] } return { enc: e, dec: d }
}(); cptable[936] = function () {
    var d = [], e = {}, D = [], j; D[0] = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�������������������������������������������������������������������������������������������������������������������������������".split(""); for (j = 0; j != D[0].length; ++j) if (D[0][j].charCodeAt(0) !== 65533) { e[D[0][j]] = 0 + j; d[0 + j] = D[0][j] } D[129] = "����������������������������������������������������������������丂丄丅丆丏丒丗丟丠両丣並丩丮丯丱丳丵丷丼乀乁乂乄乆乊乑乕乗乚乛乢乣乤乥乧乨乪乫乬乭乮乯乲乴乵乶乷乸乹乺乻乼乽乿亀亁亂亃亄亅亇亊�亐亖亗亙亜亝亞亣亪亯亰亱亴亶亷亸亹亼亽亾仈仌仏仐仒仚仛仜仠仢仦仧仩仭仮仯仱仴仸仹仺仼仾伀伂伃伄伅伆伇伈伋伌伒伓伔伕伖伜伝伡伣伨伩伬伭伮伱伳伵伷伹伻伾伿佀佁佂佄佅佇佈佉佊佋佌佒佔佖佡佢佦佨佪佫佭佮佱佲併佷佸佹佺佽侀侁侂侅來侇侊侌侎侐侒侓侕侖侘侙侚侜侞侟価侢�".split(""); for (j = 0; j != D[129].length; ++j) if (D[129][j].charCodeAt(0) !== 65533) { e[D[129][j]] = 33024 + j; d[33024 + j] = D[129][j] } D[130] = "����������������������������������������������������������������侤侫侭侰侱侲侳侴侶侷侸侹侺侻侼侽侾俀俁係俆俇俈俉俋俌俍俒俓俔俕俖俙俛俠俢俤俥俧俫俬俰俲俴俵俶俷俹俻俼俽俿倀倁倂倃倄倅倆倇倈倉倊�個倎倐們倓倕倖倗倛倝倞倠倢倣値倧倫倯倰倱倲倳倴倵倶倷倸倹倻倽倿偀偁偂偄偅偆偉偊偋偍偐偑偒偓偔偖偗偘偙偛偝偞偟偠偡偢偣偤偦偧偨偩偪偫偭偮偯偰偱偲偳側偵偸偹偺偼偽傁傂傃傄傆傇傉傊傋傌傎傏傐傑傒傓傔傕傖傗傘備傚傛傜傝傞傟傠傡傢傤傦傪傫傭傮傯傰傱傳傴債傶傷傸傹傼�".split(""); for (j = 0; j != D[130].length; ++j) if (D[130][j].charCodeAt(0) !== 65533) { e[D[130][j]] = 33280 + j; d[33280 + j] = D[130][j] } D[131] = "����������������������������������������������������������������傽傾傿僀僁僂僃僄僅僆僇僈僉僊僋僌働僎僐僑僒僓僔僕僗僘僙僛僜僝僞僟僠僡僢僣僤僥僨僩僪僫僯僰僱僲僴僶僷僸價僺僼僽僾僿儀儁儂儃億儅儈�儉儊儌儍儎儏儐儑儓儔儕儖儗儘儙儚儛儜儝儞償儠儢儣儤儥儦儧儨儩優儫儬儭儮儯儰儱儲儳儴儵儶儷儸儹儺儻儼儽儾兂兇兊兌兎兏児兒兓兗兘兙兛兝兞兟兠兡兣兤兦內兩兪兯兲兺兾兿冃冄円冇冊冋冎冏冐冑冓冔冘冚冝冞冟冡冣冦冧冨冩冪冭冮冴冸冹冺冾冿凁凂凃凅凈凊凍凎凐凒凓凔凕凖凗�".split(""); for (j = 0; j != D[131].length; ++j) if (D[131][j].charCodeAt(0) !== 65533) { e[D[131][j]] = 33536 + j; d[33536 + j] = D[131][j] } D[132] = "����������������������������������������������������������������凘凙凚凜凞凟凢凣凥処凧凨凩凪凬凮凱凲凴凷凾刄刅刉刋刌刏刐刓刔刕刜刞刟刡刢刣別刦刧刪刬刯刱刲刴刵刼刾剄剅剆則剈剉剋剎剏剒剓剕剗剘�剙剚剛剝剟剠剢剣剤剦剨剫剬剭剮剰剱剳剴創剶剷剸剹剺剻剼剾劀劃劄劅劆劇劉劊劋劌劍劎劏劑劒劔劕劖劗劘劙劚劜劤劥劦劧劮劯劰労劵劶劷劸効劺劻劼劽勀勁勂勄勅勆勈勊勌勍勎勏勑勓勔動勗務勚勛勜勝勞勠勡勢勣勥勦勧勨勩勪勫勬勭勮勯勱勲勳勴勵勶勷勸勻勼勽匁匂匃匄匇匉匊匋匌匎�".split(""); for (j = 0; j != D[132].length; ++j) if (D[132][j].charCodeAt(0) !== 65533) { e[D[132][j]] = 33792 + j; d[33792 + j] = D[132][j] } D[133] = "����������������������������������������������������������������匑匒匓匔匘匛匜匞匟匢匤匥匧匨匩匫匬匭匯匰匱匲匳匴匵匶匷匸匼匽區卂卄卆卋卌卍卐協単卙卛卝卥卨卪卬卭卲卶卹卻卼卽卾厀厁厃厇厈厊厎厏�厐厑厒厓厔厖厗厙厛厜厞厠厡厤厧厪厫厬厭厯厰厱厲厳厴厵厷厸厹厺厼厽厾叀參叄叅叆叇収叏叐叒叓叕叚叜叝叞叡叢叧叴叺叾叿吀吂吅吇吋吔吘吙吚吜吢吤吥吪吰吳吶吷吺吽吿呁呂呄呅呇呉呌呍呎呏呑呚呝呞呟呠呡呣呥呧呩呪呫呬呭呮呯呰呴呹呺呾呿咁咃咅咇咈咉咊咍咑咓咗咘咜咞咟咠咡�".split(""); for (j = 0; j != D[133].length; ++j) if (D[133][j].charCodeAt(0) !== 65533) { e[D[133][j]] = 34048 + j; d[34048 + j] = D[133][j] } D[134] = "����������������������������������������������������������������咢咥咮咰咲咵咶咷咹咺咼咾哃哅哊哋哖哘哛哠員哢哣哤哫哬哯哰哱哴哵哶哷哸哹哻哾唀唂唃唄唅唈唊唋唌唍唎唒唓唕唖唗唘唙唚唜唝唞唟唡唥唦�唨唩唫唭唲唴唵唶唸唹唺唻唽啀啂啅啇啈啋啌啍啎問啑啒啓啔啗啘啙啚啛啝啞啟啠啢啣啨啩啫啯啰啱啲啳啴啹啺啽啿喅喆喌喍喎喐喒喓喕喖喗喚喛喞喠喡喢喣喤喥喦喨喩喪喫喬喭單喯喰喲喴営喸喺喼喿嗀嗁嗂嗃嗆嗇嗈嗊嗋嗎嗏嗐嗕嗗嗘嗙嗚嗛嗞嗠嗢嗧嗩嗭嗮嗰嗱嗴嗶嗸嗹嗺嗻嗼嗿嘂嘃嘄嘅�".split(""); for (j = 0; j != D[134].length; ++j) if (D[134][j].charCodeAt(0) !== 65533) { e[D[134][j]] = 34304 + j; d[34304 + j] = D[134][j] } D[135] = "����������������������������������������������������������������嘆嘇嘊嘋嘍嘐嘑嘒嘓嘔嘕嘖嘗嘙嘚嘜嘝嘠嘡嘢嘥嘦嘨嘩嘪嘫嘮嘯嘰嘳嘵嘷嘸嘺嘼嘽嘾噀噁噂噃噄噅噆噇噈噉噊噋噏噐噑噒噓噕噖噚噛噝噞噟噠噡�噣噥噦噧噭噮噯噰噲噳噴噵噷噸噹噺噽噾噿嚀嚁嚂嚃嚄嚇嚈嚉嚊嚋嚌嚍嚐嚑嚒嚔嚕嚖嚗嚘嚙嚚嚛嚜嚝嚞嚟嚠嚡嚢嚤嚥嚦嚧嚨嚩嚪嚫嚬嚭嚮嚰嚱嚲嚳嚴嚵嚶嚸嚹嚺嚻嚽嚾嚿囀囁囂囃囄囅囆囇囈囉囋囌囍囎囏囐囑囒囓囕囖囘囙囜団囥囦囧囨囩囪囬囮囯囲図囶囷囸囻囼圀圁圂圅圇國圌圍圎圏圐圑�".split(""); for (j = 0; j != D[135].length; ++j) if (D[135][j].charCodeAt(0) !== 65533) { e[D[135][j]] = 34560 + j; d[34560 + j] = D[135][j] } D[136] = "����������������������������������������������������������������園圓圔圕圖圗團圙圚圛圝圞圠圡圢圤圥圦圧圫圱圲圴圵圶圷圸圼圽圿坁坃坄坅坆坈坉坋坒坓坔坕坖坘坙坢坣坥坧坬坮坰坱坲坴坵坸坹坺坽坾坿垀�垁垇垈垉垊垍垎垏垐垑垔垕垖垗垘垙垚垜垝垞垟垥垨垪垬垯垰垱垳垵垶垷垹垺垻垼垽垾垿埀埁埄埅埆埇埈埉埊埌埍埐埑埓埖埗埛埜埞埡埢埣埥埦埧埨埩埪埫埬埮埰埱埲埳埵埶執埻埼埾埿堁堃堄堅堈堉堊堌堎堏堐堒堓堔堖堗堘堚堛堜堝堟堢堣堥堦堧堨堩堫堬堭堮堯報堲堳場堶堷堸堹堺堻堼堽�".split(""); for (j = 0; j != D[136].length; ++j) if (D[136][j].charCodeAt(0) !== 65533) { e[D[136][j]] = 34816 + j; d[34816 + j] = D[136][j] } D[137] = "����������������������������������������������������������������堾堿塀塁塂塃塅塆塇塈塉塊塋塎塏塐塒塓塕塖塗塙塚塛塜塝塟塠塡塢塣塤塦塧塨塩塪塭塮塯塰塱塲塳塴塵塶塷塸塹塺塻塼塽塿墂墄墆墇墈墊墋墌�墍墎墏墐墑墔墕墖増墘墛墜墝墠墡墢墣墤墥墦墧墪墫墬墭墮墯墰墱墲墳墴墵墶墷墸墹墺墻墽墾墿壀壂壃壄壆壇壈壉壊壋壌壍壎壏壐壒壓壔壖壗壘壙壚壛壜壝壞壟壠壡壢壣壥壦壧壨壩壪壭壯壱売壴壵壷壸壺壻壼壽壾壿夀夁夃夅夆夈変夊夋夌夎夐夑夒夓夗夘夛夝夞夠夡夢夣夦夨夬夰夲夳夵夶夻�".split(""); for (j = 0; j != D[137].length; ++j) if (D[137][j].charCodeAt(0) !== 65533) { e[D[137][j]] = 35072 + j; d[35072 + j] = D[137][j] } D[138] = "����������������������������������������������������������������夽夾夿奀奃奅奆奊奌奍奐奒奓奙奛奜奝奞奟奡奣奤奦奧奨奩奪奫奬奭奮奯奰奱奲奵奷奺奻奼奾奿妀妅妉妋妌妎妏妐妑妔妕妘妚妛妜妝妟妠妡妢妦�妧妬妭妰妱妳妴妵妶妷妸妺妼妽妿姀姁姂姃姄姅姇姈姉姌姍姎姏姕姖姙姛姞姟姠姡姢姤姦姧姩姪姫姭姮姯姰姱姲姳姴姵姶姷姸姺姼姽姾娀娂娊娋娍娎娏娐娒娔娕娖娗娙娚娛娝娞娡娢娤娦娧娨娪娫娬娭娮娯娰娳娵娷娸娹娺娻娽娾娿婁婂婃婄婅婇婈婋婌婍婎婏婐婑婒婓婔婖婗婘婙婛婜婝婞婟婠�".split(""); for (j = 0; j != D[138].length; ++j) if (D[138][j].charCodeAt(0) !== 65533) { e[D[138][j]] = 35328 + j; d[35328 + j] = D[138][j] } D[139] = "����������������������������������������������������������������婡婣婤婥婦婨婩婫婬婭婮婯婰婱婲婳婸婹婻婼婽婾媀媁媂媃媄媅媆媇媈媉媊媋媌媍媎媏媐媑媓媔媕媖媗媘媙媜媝媞媟媠媡媢媣媤媥媦媧媨媩媫媬�媭媮媯媰媱媴媶媷媹媺媻媼媽媿嫀嫃嫄嫅嫆嫇嫈嫊嫋嫍嫎嫏嫐嫑嫓嫕嫗嫙嫚嫛嫝嫞嫟嫢嫤嫥嫧嫨嫪嫬嫭嫮嫯嫰嫲嫳嫴嫵嫶嫷嫸嫹嫺嫻嫼嫽嫾嫿嬀嬁嬂嬃嬄嬅嬆嬇嬈嬊嬋嬌嬍嬎嬏嬐嬑嬒嬓嬔嬕嬘嬙嬚嬛嬜嬝嬞嬟嬠嬡嬢嬣嬤嬥嬦嬧嬨嬩嬪嬫嬬嬭嬮嬯嬰嬱嬳嬵嬶嬸嬹嬺嬻嬼嬽嬾嬿孁孂孃孄孅孆孇�".split(""); for (j = 0; j != D[139].length; ++j) if (D[139][j].charCodeAt(0) !== 65533) { e[D[139][j]] = 35584 + j; d[35584 + j] = D[139][j] } D[140] = "����������������������������������������������������������������孈孉孊孋孌孍孎孏孒孖孞孠孡孧孨孫孭孮孯孲孴孶孷學孹孻孼孾孿宂宆宊宍宎宐宑宒宔宖実宧宨宩宬宭宮宯宱宲宷宺宻宼寀寁寃寈寉寊寋寍寎寏�寑寔寕寖寗寘寙寚寛寜寠寢寣實寧審寪寫寬寭寯寱寲寳寴寵寶寷寽対尀専尃尅將專尋尌對導尐尒尓尗尙尛尞尟尠尡尣尦尨尩尪尫尭尮尯尰尲尳尵尶尷屃屄屆屇屌屍屒屓屔屖屗屘屚屛屜屝屟屢層屧屨屩屪屫屬屭屰屲屳屴屵屶屷屸屻屼屽屾岀岃岄岅岆岇岉岊岋岎岏岒岓岕岝岞岟岠岡岤岥岦岧岨�".split(""); for (j = 0; j != D[140].length; ++j) if (D[140][j].charCodeAt(0) !== 65533) { e[D[140][j]] = 35840 + j; d[35840 + j] = D[140][j] } D[141] = "����������������������������������������������������������������岪岮岯岰岲岴岶岹岺岻岼岾峀峂峃峅峆峇峈峉峊峌峍峎峏峐峑峓峔峕峖峗峘峚峛峜峝峞峟峠峢峣峧峩峫峬峮峯峱峲峳峴峵島峷峸峹峺峼峽峾峿崀�崁崄崅崈崉崊崋崌崍崏崐崑崒崓崕崗崘崙崚崜崝崟崠崡崢崣崥崨崪崫崬崯崰崱崲崳崵崶崷崸崹崺崻崼崿嵀嵁嵂嵃嵄嵅嵆嵈嵉嵍嵎嵏嵐嵑嵒嵓嵔嵕嵖嵗嵙嵚嵜嵞嵟嵠嵡嵢嵣嵤嵥嵦嵧嵨嵪嵭嵮嵰嵱嵲嵳嵵嵶嵷嵸嵹嵺嵻嵼嵽嵾嵿嶀嶁嶃嶄嶅嶆嶇嶈嶉嶊嶋嶌嶍嶎嶏嶐嶑嶒嶓嶔嶕嶖嶗嶘嶚嶛嶜嶞嶟嶠�".split(""); for (j = 0; j != D[141].length; ++j) if (D[141][j].charCodeAt(0) !== 65533) { e[D[141][j]] = 36096 + j; d[36096 + j] = D[141][j] } D[142] = "����������������������������������������������������������������嶡嶢嶣嶤嶥嶦嶧嶨嶩嶪嶫嶬嶭嶮嶯嶰嶱嶲嶳嶴嶵嶶嶸嶹嶺嶻嶼嶽嶾嶿巀巁巂巃巄巆巇巈巉巊巋巌巎巏巐巑巒巓巔巕巖巗巘巙巚巜巟巠巣巤巪巬巭�巰巵巶巸巹巺巻巼巿帀帄帇帉帊帋帍帎帒帓帗帞帟帠帡帢帣帤帥帨帩帪師帬帯帰帲帳帴帵帶帹帺帾帿幀幁幃幆幇幈幉幊幋幍幎幏幐幑幒幓幖幗幘幙幚幜幝幟幠幣幤幥幦幧幨幩幪幫幬幭幮幯幰幱幵幷幹幾庁庂広庅庈庉庌庍庎庒庘庛庝庡庢庣庤庨庩庪庫庬庮庯庰庱庲庴庺庻庼庽庿廀廁廂廃廄廅�".split(""); for (j = 0; j != D[142].length; ++j) if (D[142][j].charCodeAt(0) !== 65533) { e[D[142][j]] = 36352 + j; d[36352 + j] = D[142][j] } D[143] = "����������������������������������������������������������������廆廇廈廋廌廍廎廏廐廔廕廗廘廙廚廜廝廞廟廠廡廢廣廤廥廦廧廩廫廬廭廮廯廰廱廲廳廵廸廹廻廼廽弅弆弇弉弌弍弎弐弒弔弖弙弚弜弝弞弡弢弣弤�弨弫弬弮弰弲弳弴張弶強弸弻弽弾弿彁彂彃彄彅彆彇彈彉彊彋彌彍彎彏彑彔彙彚彛彜彞彟彠彣彥彧彨彫彮彯彲彴彵彶彸彺彽彾彿徃徆徍徎徏徑従徔徖徚徛徝從徟徠徢徣徤徥徦徧復徫徬徯徰徱徲徳徴徶徸徹徺徻徾徿忀忁忂忇忈忊忋忎忓忔忕忚忛応忞忟忢忣忥忦忨忩忬忯忰忲忳忴忶忷忹忺忼怇�".split(""); for (j = 0; j != D[143].length; ++j) if (D[143][j].charCodeAt(0) !== 65533) { e[D[143][j]] = 36608 + j; d[36608 + j] = D[143][j] } D[144] = "����������������������������������������������������������������怈怉怋怌怐怑怓怗怘怚怞怟怢怣怤怬怭怮怰怱怲怳怴怶怷怸怹怺怽怾恀恄恅恆恇恈恉恊恌恎恏恑恓恔恖恗恘恛恜恞恟恠恡恥恦恮恱恲恴恵恷恾悀�悁悂悅悆悇悈悊悋悎悏悐悑悓悕悗悘悙悜悞悡悢悤悥悧悩悪悮悰悳悵悶悷悹悺悽悾悿惀惁惂惃惄惇惈惉惌惍惎惏惐惒惓惔惖惗惙惛惞惡惢惣惤惥惪惱惲惵惷惸惻惼惽惾惿愂愃愄愅愇愊愋愌愐愑愒愓愔愖愗愘愙愛愜愝愞愡愢愥愨愩愪愬愭愮愯愰愱愲愳愴愵愶愷愸愹愺愻愼愽愾慀慁慂慃慄慅慆�".split(""); for (j = 0; j != D[144].length; ++j) if (D[144][j].charCodeAt(0) !== 65533) { e[D[144][j]] = 36864 + j; d[36864 + j] = D[144][j] } D[145] = "����������������������������������������������������������������慇慉態慍慏慐慒慓慔慖慗慘慙慚慛慜慞慟慠慡慣慤慥慦慩慪慫慬慭慮慯慱慲慳慴慶慸慹慺慻慼慽慾慿憀憁憂憃憄憅憆憇憈憉憊憌憍憏憐憑憒憓憕�憖憗憘憙憚憛憜憞憟憠憡憢憣憤憥憦憪憫憭憮憯憰憱憲憳憴憵憶憸憹憺憻憼憽憿懀懁懃懄懅懆懇應懌懍懎懏懐懓懕懖懗懘懙懚懛懜懝懞懟懠懡懢懣懤懥懧懨懩懪懫懬懭懮懯懰懱懲懳懴懶懷懸懹懺懻懼懽懾戀戁戂戃戄戅戇戉戓戔戙戜戝戞戠戣戦戧戨戩戫戭戯戰戱戲戵戶戸戹戺戻戼扂扄扅扆扊�".split(""); for (j = 0; j != D[145].length; ++j) if (D[145][j].charCodeAt(0) !== 65533) { e[D[145][j]] = 37120 + j; d[37120 + j] = D[145][j] } D[146] = "����������������������������������������������������������������扏扐払扖扗扙扚扜扝扞扟扠扡扢扤扥扨扱扲扴扵扷扸扺扻扽抁抂抃抅抆抇抈抋抌抍抎抏抐抔抙抜抝択抣抦抧抩抪抭抮抯抰抲抳抴抶抷抸抺抾拀拁�拃拋拏拑拕拝拞拠拡拤拪拫拰拲拵拸拹拺拻挀挃挄挅挆挊挋挌挍挏挐挒挓挔挕挗挘挙挜挦挧挩挬挭挮挰挱挳挴挵挶挷挸挻挼挾挿捀捁捄捇捈捊捑捒捓捔捖捗捘捙捚捛捜捝捠捤捥捦捨捪捫捬捯捰捲捳捴捵捸捹捼捽捾捿掁掃掄掅掆掋掍掑掓掔掕掗掙掚掛掜掝掞掟採掤掦掫掯掱掲掵掶掹掻掽掿揀�".split(""); for (j = 0; j != D[146].length; ++j) if (D[146][j].charCodeAt(0) !== 65533) { e[D[146][j]] = 37376 + j; d[37376 + j] = D[146][j] } D[147] = "����������������������������������������������������������������揁揂揃揅揇揈揊揋揌揑揓揔揕揗揘揙揚換揜揝揟揢揤揥揦揧揨揫揬揮揯揰揱揳揵揷揹揺揻揼揾搃搄搆搇搈搉搊損搎搑搒搕搖搗搘搙搚搝搟搢搣搤�搥搧搨搩搫搮搯搰搱搲搳搵搶搷搸搹搻搼搾摀摂摃摉摋摌摍摎摏摐摑摓摕摖摗摙摚摛摜摝摟摠摡摢摣摤摥摦摨摪摫摬摮摯摰摱摲摳摴摵摶摷摻摼摽摾摿撀撁撃撆撈撉撊撋撌撍撎撏撐撓撔撗撘撚撛撜撝撟撠撡撢撣撥撦撧撨撪撫撯撱撲撳撴撶撹撻撽撾撿擁擃擄擆擇擈擉擊擋擌擏擑擓擔擕擖擙據�".split(""); for (j = 0; j != D[147].length; ++j) if (D[147][j].charCodeAt(0) !== 65533) { e[D[147][j]] = 37632 + j; d[37632 + j] = D[147][j] } D[148] = "����������������������������������������������������������������擛擜擝擟擠擡擣擥擧擨擩擪擫擬擭擮擯擰擱擲擳擴擵擶擷擸擹擺擻擼擽擾擿攁攂攃攄攅攆攇攈攊攋攌攍攎攏攐攑攓攔攕攖攗攙攚攛攜攝攞攟攠攡�攢攣攤攦攧攨攩攪攬攭攰攱攲攳攷攺攼攽敀敁敂敃敄敆敇敊敋敍敎敐敒敓敔敗敘敚敜敟敠敡敤敥敧敨敩敪敭敮敯敱敳敵敶數敹敺敻敼敽敾敿斀斁斂斃斄斅斆斈斉斊斍斎斏斒斔斕斖斘斚斝斞斠斢斣斦斨斪斬斮斱斲斳斴斵斶斷斸斺斻斾斿旀旂旇旈旉旊旍旐旑旓旔旕旘旙旚旛旜旝旞旟旡旣旤旪旫�".split(""); for (j = 0; j != D[148].length; ++j) if (D[148][j].charCodeAt(0) !== 65533) { e[D[148][j]] = 37888 + j; d[37888 + j] = D[148][j] } D[149] = "����������������������������������������������������������������旲旳旴旵旸旹旻旼旽旾旿昁昄昅昇昈昉昋昍昐昑昒昖昗昘昚昛昜昞昡昢昣昤昦昩昪昫昬昮昰昲昳昷昸昹昺昻昽昿晀時晄晅晆晇晈晉晊晍晎晐晑晘�晙晛晜晝晞晠晢晣晥晧晩晪晫晬晭晱晲晳晵晸晹晻晼晽晿暀暁暃暅暆暈暉暊暋暍暎暏暐暒暓暔暕暘暙暚暛暜暞暟暠暡暢暣暤暥暦暩暪暫暬暭暯暰暱暲暳暵暶暷暸暺暻暼暽暿曀曁曂曃曄曅曆曇曈曉曊曋曌曍曎曏曐曑曒曓曔曕曖曗曘曚曞曟曠曡曢曣曤曥曧曨曪曫曬曭曮曯曱曵曶書曺曻曽朁朂會�".split(""); for (j = 0; j != D[149].length; ++j) if (D[149][j].charCodeAt(0) !== 65533) { e[D[149][j]] = 38144 + j; d[38144 + j] = D[149][j] } D[150] = "����������������������������������������������������������������朄朅朆朇朌朎朏朑朒朓朖朘朙朚朜朞朠朡朢朣朤朥朧朩朮朰朲朳朶朷朸朹朻朼朾朿杁杄杅杇杊杋杍杒杔杕杗杘杙杚杛杝杢杣杤杦杧杫杬杮東杴杶�杸杹杺杻杽枀枂枃枅枆枈枊枌枍枎枏枑枒枓枔枖枙枛枟枠枡枤枦枩枬枮枱枲枴枹枺枻枼枽枾枿柀柂柅柆柇柈柉柊柋柌柍柎柕柖柗柛柟柡柣柤柦柧柨柪柫柭柮柲柵柶柷柸柹柺査柼柾栁栂栃栄栆栍栐栒栔栕栘栙栚栛栜栞栟栠栢栣栤栥栦栧栨栫栬栭栮栯栰栱栴栵栶栺栻栿桇桋桍桏桒桖桗桘桙桚桛�".split(""); for (j = 0; j != D[150].length; ++j) if (D[150][j].charCodeAt(0) !== 65533) { e[D[150][j]] = 38400 + j; d[38400 + j] = D[150][j] } D[151] = "����������������������������������������������������������������桜桝桞桟桪桬桭桮桯桰桱桲桳桵桸桹桺桻桼桽桾桿梀梂梄梇梈梉梊梋梌梍梎梐梑梒梔梕梖梘梙梚梛梜條梞梟梠梡梣梤梥梩梪梫梬梮梱梲梴梶梷梸�梹梺梻梼梽梾梿棁棃棄棅棆棇棈棊棌棎棏棐棑棓棔棖棗棙棛棜棝棞棟棡棢棤棥棦棧棨棩棪棫棬棭棯棲棳棴棶棷棸棻棽棾棿椀椂椃椄椆椇椈椉椊椌椏椑椓椔椕椖椗椘椙椚椛検椝椞椡椢椣椥椦椧椨椩椪椫椬椮椯椱椲椳椵椶椷椸椺椻椼椾楀楁楃楄楅楆楇楈楉楊楋楌楍楎楏楐楑楒楓楕楖楘楙楛楜楟�".split(""); for (j = 0; j != D[151].length; ++j) if (D[151][j].charCodeAt(0) !== 65533) { e[D[151][j]] = 38656 + j; d[38656 + j] = D[151][j] } D[152] = "����������������������������������������������������������������楡楢楤楥楧楨楩楪楬業楯楰楲楳楴極楶楺楻楽楾楿榁榃榅榊榋榌榎榏榐榑榒榓榖榗榙榚榝榞榟榠榡榢榣榤榥榦榩榪榬榮榯榰榲榳榵榶榸榹榺榼榽�榾榿槀槂槃槄槅槆槇槈槉構槍槏槑槒槓槕槖槗様槙槚槜槝槞槡槢槣槤槥槦槧槨槩槪槫槬槮槯槰槱槳槴槵槶槷槸槹槺槻槼槾樀樁樂樃樄樅樆樇樈樉樋樌樍樎樏樐樑樒樓樔樕樖標樚樛樜樝樞樠樢樣樤樥樦樧権樫樬樭樮樰樲樳樴樶樷樸樹樺樻樼樿橀橁橂橃橅橆橈橉橊橋橌橍橎橏橑橒橓橔橕橖橗橚�".split(""); for (j = 0; j != D[152].length; ++j) if (D[152][j].charCodeAt(0) !== 65533) { e[D[152][j]] = 38912 + j; d[38912 + j] = D[152][j] } D[153] = "����������������������������������������������������������������橜橝橞機橠橢橣橤橦橧橨橩橪橫橬橭橮橯橰橲橳橴橵橶橷橸橺橻橽橾橿檁檂檃檅檆檇檈檉檊檋檌檍檏檒檓檔檕檖檘檙檚檛檜檝檞檟檡檢檣檤檥檦�檧檨檪檭檮檯檰檱檲檳檴檵檶檷檸檹檺檻檼檽檾檿櫀櫁櫂櫃櫄櫅櫆櫇櫈櫉櫊櫋櫌櫍櫎櫏櫐櫑櫒櫓櫔櫕櫖櫗櫘櫙櫚櫛櫜櫝櫞櫟櫠櫡櫢櫣櫤櫥櫦櫧櫨櫩櫪櫫櫬櫭櫮櫯櫰櫱櫲櫳櫴櫵櫶櫷櫸櫹櫺櫻櫼櫽櫾櫿欀欁欂欃欄欅欆欇欈欉權欋欌欍欎欏欐欑欒欓欔欕欖欗欘欙欚欛欜欝欞欟欥欦欨欩欪欫欬欭欮�".split(""); for (j = 0; j != D[153].length; ++j) if (D[153][j].charCodeAt(0) !== 65533) { e[D[153][j]] = 39168 + j; d[39168 + j] = D[153][j] } D[154] = "����������������������������������������������������������������欯欰欱欳欴欵欶欸欻欼欽欿歀歁歂歄歅歈歊歋歍歎歏歐歑歒歓歔歕歖歗歘歚歛歜歝歞歟歠歡歨歩歫歬歭歮歯歰歱歲歳歴歵歶歷歸歺歽歾歿殀殅殈�殌殎殏殐殑殔殕殗殘殙殜殝殞殟殠殢殣殤殥殦殧殨殩殫殬殭殮殯殰殱殲殶殸殹殺殻殼殽殾毀毃毄毆毇毈毉毊毌毎毐毑毘毚毜毝毞毟毠毢毣毤毥毦毧毨毩毬毭毮毰毱毲毴毶毷毸毺毻毼毾毿氀氁氂氃氄氈氉氊氋氌氎氒気氜氝氞氠氣氥氫氬氭氱氳氶氷氹氺氻氼氾氿汃汄汅汈汋汌汍汎汏汑汒汓汖汘�".split(""); for (j = 0; j != D[154].length; ++j) if (D[154][j].charCodeAt(0) !== 65533) { e[D[154][j]] = 39424 + j; d[39424 + j] = D[154][j] } D[155] = "����������������������������������������������������������������汙汚汢汣汥汦汧汫汬汭汮汯汱汳汵汷汸決汻汼汿沀沄沇沊沋沍沎沑沒沕沖沗沘沚沜沝沞沠沢沨沬沯沰沴沵沶沷沺泀況泂泃泆泇泈泋泍泎泏泑泒泘�泙泚泜泝泟泤泦泧泩泬泭泲泴泹泿洀洂洃洅洆洈洉洊洍洏洐洑洓洔洕洖洘洜洝洟洠洡洢洣洤洦洨洩洬洭洯洰洴洶洷洸洺洿浀浂浄浉浌浐浕浖浗浘浛浝浟浡浢浤浥浧浨浫浬浭浰浱浲浳浵浶浹浺浻浽浾浿涀涁涃涄涆涇涊涋涍涏涐涒涖涗涘涙涚涜涢涥涬涭涰涱涳涴涶涷涹涺涻涼涽涾淁淂淃淈淉淊�".split(""); for (j = 0; j != D[155].length; ++j) if (D[155][j].charCodeAt(0) !== 65533) { e[D[155][j]] = 39680 + j; d[39680 + j] = D[155][j] } D[156] = "����������������������������������������������������������������淍淎淏淐淒淓淔淕淗淚淛淜淟淢淣淥淧淨淩淪淭淯淰淲淴淵淶淸淺淽淾淿渀渁渂渃渄渆渇済渉渋渏渒渓渕渘渙減渜渞渟渢渦渧渨渪測渮渰渱渳渵�渶渷渹渻渼渽渾渿湀湁湂湅湆湇湈湉湊湋湌湏湐湑湒湕湗湙湚湜湝湞湠湡湢湣湤湥湦湧湨湩湪湬湭湯湰湱湲湳湴湵湶湷湸湹湺湻湼湽満溁溂溄溇溈溊溋溌溍溎溑溒溓溔溕準溗溙溚溛溝溞溠溡溣溤溦溨溩溫溬溭溮溰溳溵溸溹溼溾溿滀滃滄滅滆滈滉滊滌滍滎滐滒滖滘滙滛滜滝滣滧滪滫滬滭滮滯�".split(""); for (j = 0; j != D[156].length; ++j) if (D[156][j].charCodeAt(0) !== 65533) { e[D[156][j]] = 39936 + j; d[39936 + j] = D[156][j] } D[157] = "����������������������������������������������������������������滰滱滲滳滵滶滷滸滺滻滼滽滾滿漀漁漃漄漅漇漈漊漋漌漍漎漐漑漒漖漗漘漙漚漛漜漝漞漟漡漢漣漥漦漧漨漬漮漰漲漴漵漷漸漹漺漻漼漽漿潀潁潂�潃潄潅潈潉潊潌潎潏潐潑潒潓潔潕潖潗潙潚潛潝潟潠潡潣潤潥潧潨潩潪潫潬潯潰潱潳潵潶潷潹潻潽潾潿澀澁澂澃澅澆澇澊澋澏澐澑澒澓澔澕澖澗澘澙澚澛澝澞澟澠澢澣澤澥澦澨澩澪澫澬澭澮澯澰澱澲澴澵澷澸澺澻澼澽澾澿濁濃濄濅濆濇濈濊濋濌濍濎濏濐濓濔濕濖濗濘濙濚濛濜濝濟濢濣濤濥�".split(""); for (j = 0; j != D[157].length; ++j) if (D[157][j].charCodeAt(0) !== 65533) { e[D[157][j]] = 40192 + j; d[40192 + j] = D[157][j] } D[158] = "����������������������������������������������������������������濦濧濨濩濪濫濬濭濰濱濲濳濴濵濶濷濸濹濺濻濼濽濾濿瀀瀁瀂瀃瀄瀅瀆瀇瀈瀉瀊瀋瀌瀍瀎瀏瀐瀒瀓瀔瀕瀖瀗瀘瀙瀜瀝瀞瀟瀠瀡瀢瀤瀥瀦瀧瀨瀩瀪�瀫瀬瀭瀮瀯瀰瀱瀲瀳瀴瀶瀷瀸瀺瀻瀼瀽瀾瀿灀灁灂灃灄灅灆灇灈灉灊灋灍灎灐灑灒灓灔灕灖灗灘灙灚灛灜灝灟灠灡灢灣灤灥灦灧灨灩灪灮灱灲灳灴灷灹灺灻災炁炂炃炄炆炇炈炋炌炍炏炐炑炓炗炘炚炛炞炟炠炡炢炣炤炥炦炧炨炩炪炰炲炴炵炶為炾炿烄烅烆烇烉烋烌烍烎烏烐烑烒烓烔烕烖烗烚�".split(""); for (j = 0; j != D[158].length; ++j) if (D[158][j].charCodeAt(0) !== 65533) { e[D[158][j]] = 40448 + j; d[40448 + j] = D[158][j] } D[159] = "����������������������������������������������������������������烜烝烞烠烡烢烣烥烪烮烰烱烲烳烴烵烶烸烺烻烼烾烿焀焁焂焃焄焅焆焇焈焋焌焍焎焏焑焒焔焗焛焜焝焞焟焠無焢焣焤焥焧焨焩焪焫焬焭焮焲焳焴�焵焷焸焹焺焻焼焽焾焿煀煁煂煃煄煆煇煈煉煋煍煏煐煑煒煓煔煕煖煗煘煙煚煛煝煟煠煡煢煣煥煩煪煫煬煭煯煰煱煴煵煶煷煹煻煼煾煿熀熁熂熃熅熆熇熈熉熋熌熍熎熐熑熒熓熕熖熗熚熛熜熝熞熡熢熣熤熥熦熧熩熪熫熭熮熯熰熱熲熴熶熷熸熺熻熼熽熾熿燀燁燂燄燅燆燇燈燉燊燋燌燍燏燐燑燒燓�".split(""); for (j = 0; j != D[159].length; ++j) if (D[159][j].charCodeAt(0) !== 65533) { e[D[159][j]] = 40704 + j; d[40704 + j] = D[159][j] } D[160] = "����������������������������������������������������������������燖燗燘燙燚燛燜燝燞營燡燢燣燤燦燨燩燪燫燬燭燯燰燱燲燳燴燵燶燷燸燺燻燼燽燾燿爀爁爂爃爄爅爇爈爉爊爋爌爍爎爏爐爑爒爓爔爕爖爗爘爙爚�爛爜爞爟爠爡爢爣爤爥爦爧爩爫爭爮爯爲爳爴爺爼爾牀牁牂牃牄牅牆牉牊牋牎牏牐牑牓牔牕牗牘牚牜牞牠牣牤牥牨牪牫牬牭牰牱牳牴牶牷牸牻牼牽犂犃犅犆犇犈犉犌犎犐犑犓犔犕犖犗犘犙犚犛犜犝犞犠犡犢犣犤犥犦犧犨犩犪犫犮犱犲犳犵犺犻犼犽犾犿狀狅狆狇狉狊狋狌狏狑狓狔狕狖狘狚狛�".split(""); for (j = 0; j != D[160].length; ++j) if (D[160][j].charCodeAt(0) !== 65533) { e[D[160][j]] = 40960 + j; d[40960 + j] = D[160][j] } D[161] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������　、。·ˉˇ¨〃々—～‖…‘’“”〔〕〈〉《》「」『』〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓�".split(""); for (j = 0; j != D[161].length; ++j) if (D[161][j].charCodeAt(0) !== 65533) { e[D[161][j]] = 41216 + j; d[41216 + j] = D[161][j] } D[162] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������ⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹ������⒈⒉⒊⒋⒌⒍⒎⒏⒐⒑⒒⒓⒔⒕⒖⒗⒘⒙⒚⒛⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂⒃⒄⒅⒆⒇①②③④⑤⑥⑦⑧⑨⑩��㈠㈡㈢㈣㈤㈥㈦㈧㈨㈩��ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ���".split(""); for (j = 0; j != D[162].length; ++j) if (D[162][j].charCodeAt(0) !== 65533) { e[D[162][j]] = 41472 + j; d[41472 + j] = D[162][j] } D[163] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������！＂＃￥％＆＇（）＊＋，－．／０１２３４５６７８９：；＜＝＞？＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［＼］＾＿｀ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝￣�".split(""); for (j = 0; j != D[163].length; ++j) if (D[163][j].charCodeAt(0) !== 65533) { e[D[163][j]] = 41728 + j; d[41728 + j] = D[163][j] } D[164] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをん������������".split(""); for (j = 0; j != D[164].length; ++j) if (D[164][j].charCodeAt(0) !== 65533) { e[D[164][j]] = 41984 + j; d[41984 + j] = D[164][j] } D[165] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶ���������".split(""); for (j = 0; j != D[165].length; ++j) if (D[165][j].charCodeAt(0) !== 65533) { e[D[165][j]] = 42240 + j; d[42240 + j] = D[165][j] } D[166] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ��������αβγδεζηθικλμνξοπρστυφχψω�������︵︶︹︺︿﹀︽︾﹁﹂﹃﹄��︻︼︷︸︱�︳︴����������".split(""); for (j = 0; j != D[166].length; ++j) if (D[166][j].charCodeAt(0) !== 65533) { e[D[166][j]] = 42496 + j; d[42496 + j] = D[166][j] } D[167] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ���������������абвгдеёжзийклмнопрстуфхцчшщъыьэюя��������������".split(""); for (j = 0; j != D[167].length; ++j) if (D[167][j].charCodeAt(0) !== 65533) { e[D[167][j]] = 42752 + j; d[42752 + j] = D[167][j] } D[168] = "����������������������������������������������������������������ˊˋ˙–―‥‵℅℉↖↗↘↙∕∟∣≒≦≧⊿═║╒╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡╢╣╤╥╦╧╨╩╪╫╬╭╮╯╰╱╲╳▁▂▃▄▅▆▇�█▉▊▋▌▍▎▏▓▔▕▼▽◢◣◤◥☉⊕〒〝〞�����������āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüêɑ�ńň�ɡ����ㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦㄧㄨㄩ����������������������".split(""); for (j = 0; j != D[168].length; ++j) if (D[168][j].charCodeAt(0) !== 65533) { e[D[168][j]] = 43008 + j; d[43008 + j] = D[168][j] } D[169] = "����������������������������������������������������������������〡〢〣〤〥〦〧〨〩㊣㎎㎏㎜㎝㎞㎡㏄㏎㏑㏒㏕︰￢￤�℡㈱�‐���ー゛゜ヽヾ〆ゝゞ﹉﹊﹋﹌﹍﹎﹏﹐﹑﹒﹔﹕﹖﹗﹙﹚﹛﹜﹝﹞﹟﹠﹡�﹢﹣﹤﹥﹦﹨﹩﹪﹫�������������〇�������������─━│┃┄┅┆┇┈┉┊┋┌┍┎┏┐┑┒┓└┕┖┗┘┙┚┛├┝┞┟┠┡┢┣┤┥┦┧┨┩┪┫┬┭┮┯┰┱┲┳┴┵┶┷┸┹┺┻┼┽┾┿╀╁╂╃╄╅╆╇╈╉╊╋����������������".split(""); for (j = 0; j != D[169].length; ++j) if (D[169][j].charCodeAt(0) !== 65533) { e[D[169][j]] = 43264 + j; d[43264 + j] = D[169][j] } D[170] = "����������������������������������������������������������������狜狝狟狢狣狤狥狦狧狪狫狵狶狹狽狾狿猀猂猄猅猆猇猈猉猋猌猍猏猐猑猒猔猘猙猚猟猠猣猤猦猧猨猭猯猰猲猳猵猶猺猻猼猽獀獁獂獃獄獅獆獇獈�獉獊獋獌獎獏獑獓獔獕獖獘獙獚獛獜獝獞獟獡獢獣獤獥獦獧獨獩獪獫獮獰獱�����������������������������������������������������������������������������������������������".split(""); for (j = 0; j != D[170].length; ++j) if (D[170][j].charCodeAt(0) !== 65533) { e[D[170][j]] = 43520 + j; d[43520 + j] = D[170][j] } D[171] = "����������������������������������������������������������������獲獳獴獵獶獷獸獹獺獻獼獽獿玀玁玂玃玅玆玈玊玌玍玏玐玒玓玔玕玗玘玙玚玜玝玞玠玡玣玤玥玦玧玨玪玬玭玱玴玵玶玸玹玼玽玾玿珁珃珄珅珆珇�珋珌珎珒珓珔珕珖珗珘珚珛珜珝珟珡珢珣珤珦珨珪珫珬珮珯珰珱珳珴珵珶珷�����������������������������������������������������������������������������������������������".split(""); for (j = 0; j != D[171].length; ++j) if (D[171][j].charCodeAt(0) !== 65533) { e[D[171][j]] = 43776 + j; d[43776 + j] = D[171][j] } D[172] = "����������������������������������������������������������������珸珹珺珻珼珽現珿琀琁琂琄琇琈琋琌琍琎琑琒琓琔琕琖琗琘琙琜琝琞琟琠琡琣琤琧琩琫琭琯琱琲琷琸琹琺琻琽琾琿瑀瑂瑃瑄瑅瑆瑇瑈瑉瑊瑋瑌瑍�瑎瑏瑐瑑瑒瑓瑔瑖瑘瑝瑠瑡瑢瑣瑤瑥瑦瑧瑨瑩瑪瑫瑬瑮瑯瑱瑲瑳瑴瑵瑸瑹瑺�����������������������������������������������������������������������������������������������".split(""); for (j = 0; j != D[172].length; ++j) if (D[172][j].charCodeAt(0) !== 65533) { e[D[172][j]] = 44032 + j; d[44032 + j] = D[172][j] } D[173] = "����������������������������������������������������������������瑻瑼瑽瑿璂璄璅璆璈璉璊璌璍璏璑璒璓璔璕璖璗璘璙璚璛璝璟璠璡璢璣璤璥璦璪璫璬璭璮璯環璱璲璳璴璵璶璷璸璹璻璼璽璾璿瓀瓁瓂瓃瓄瓅瓆瓇�瓈瓉瓊瓋瓌瓍瓎瓏瓐瓑瓓瓔瓕瓖瓗瓘瓙瓚瓛瓝瓟瓡瓥瓧瓨瓩瓪瓫瓬瓭瓰瓱瓲�����������������������������������������������������������������������������������������������".split(""); for (j = 0; j != D[173].length; ++j) if (D[173][j].charCodeAt(0) !== 65533) { e[D[173][j]] = 44288 + j; d[44288 + j] = D[173][j] } D[174] = "����������������������������������������������������������������瓳瓵瓸瓹瓺瓻瓼瓽瓾甀甁甂甃甅甆甇甈甉甊甋甌甎甐甒甔甕甖甗甛甝甞甠甡產産甤甦甧甪甮甴甶甹甼甽甿畁畂畃畄畆畇畉畊畍畐畑畒畓畕畖畗畘�畝畞畟畠畡畢畣畤畧畨畩畫畬畭畮畯異畱畳畵當畷畺畻畼畽畾疀疁疂疄疅疇�����������������������������������������������������������������������������������������������".split(""); for (j = 0; j != D[174].length; ++j) if (D[174][j].charCodeAt(0) !== 65533) { e[D[174][j]] = 44544 + j; d[44544 + j] = D[174][j] } D[175] = "����������������������������������������������������������������疈疉疊疌疍疎疐疓疕疘疛疜疞疢疦疧疨疩疪疭疶疷疺疻疿痀痁痆痋痌痎痏痐痑痓痗痙痚痜痝痟痠痡痥痩痬痭痮痯痲痳痵痶痷痸痺痻痽痾瘂瘄瘆瘇�瘈瘉瘋瘍瘎瘏瘑瘒瘓瘔瘖瘚瘜瘝瘞瘡瘣瘧瘨瘬瘮瘯瘱瘲瘶瘷瘹瘺瘻瘽癁療癄�����������������������������������������������������������������������������������������������".split(""); for (j = 0; j != D[175].length; ++j) if (D[175][j].charCodeAt(0) !== 65533) { e[D[175][j]] = 44800 + j; d[44800 + j] = D[175][j] } D[176] = "����������������������������������������������������������������癅癆癇癈癉癊癋癎癏癐癑癒癓癕癗癘癙癚癛癝癟癠癡癢癤癥癦癧癨癩癪癬癭癮癰癱癲癳癴癵癶癷癹発發癿皀皁皃皅皉皊皌皍皏皐皒皔皕皗皘皚皛�皜皝皞皟皠皡皢皣皥皦皧皨皩皪皫皬皭皯皰皳皵皶皷皸皹皺皻皼皽皾盀盁盃啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥�".split(""); for (j = 0; j != D[176].length; ++j) if (D[176][j].charCodeAt(0) !== 65533) { e[D[176][j]] = 45056 + j; d[45056 + j] = D[176][j] } D[177] = "����������������������������������������������������������������盄盇盉盋盌盓盕盙盚盜盝盞盠盡盢監盤盦盧盨盩盪盫盬盭盰盳盵盶盷盺盻盽盿眀眂眃眅眆眊県眎眏眐眑眒眓眔眕眖眗眘眛眜眝眞眡眣眤眥眧眪眫�眬眮眰眱眲眳眴眹眻眽眾眿睂睄睅睆睈睉睊睋睌睍睎睏睒睓睔睕睖睗睘睙睜薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳�".split(""); for (j = 0; j != D[177].length; ++j) if (D[177][j].charCodeAt(0) !== 65533) { e[D[177][j]] = 45312 + j; d[45312 + j] = D[177][j] } D[178] = "����������������������������������������������������������������睝睞睟睠睤睧睩睪睭睮睯睰睱睲睳睴睵睶睷睸睺睻睼瞁瞂瞃瞆瞇瞈瞉瞊瞋瞏瞐瞓瞔瞕瞖瞗瞘瞙瞚瞛瞜瞝瞞瞡瞣瞤瞦瞨瞫瞭瞮瞯瞱瞲瞴瞶瞷瞸瞹瞺�瞼瞾矀矁矂矃矄矅矆矇矈矉矊矋矌矎矏矐矑矒矓矔矕矖矘矙矚矝矞矟矠矡矤病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖�".split(""); for (j = 0; j != D[178].length; ++j) if (D[178][j].charCodeAt(0) !== 65533) { e[D[178][j]] = 45568 + j; d[45568 + j] = D[178][j] } D[179] = "����������������������������������������������������������������矦矨矪矯矰矱矲矴矵矷矹矺矻矼砃砄砅砆砇砈砊砋砎砏砐砓砕砙砛砞砠砡砢砤砨砪砫砮砯砱砲砳砵砶砽砿硁硂硃硄硆硈硉硊硋硍硏硑硓硔硘硙硚�硛硜硞硟硠硡硢硣硤硥硦硧硨硩硯硰硱硲硳硴硵硶硸硹硺硻硽硾硿碀碁碂碃场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚�".split(""); for (j = 0; j != D[179].length; ++j) if (D[179][j].charCodeAt(0) !== 65533) { e[D[179][j]] = 45824 + j; d[45824 + j] = D[179][j] } D[180] = "����������������������������������������������������������������碄碅碆碈碊碋碏碐碒碔碕碖碙碝碞碠碢碤碦碨碩碪碫碬碭碮碯碵碶碷碸確碻碼碽碿磀磂磃磄磆磇磈磌磍磎磏磑磒磓磖磗磘磚磛磜磝磞磟磠磡磢磣�磤磥磦磧磩磪磫磭磮磯磰磱磳磵磶磸磹磻磼磽磾磿礀礂礃礄礆礇礈礉礊礋礌础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮�".split(""); for (j = 0; j != D[180].length; ++j) if (D[180][j].charCodeAt(0) !== 65533) { e[D[180][j]] = 46080 + j; d[46080 + j] = D[180][j] } D[181] = "����������������������������������������������������������������礍礎礏礐礑礒礔礕礖礗礘礙礚礛礜礝礟礠礡礢礣礥礦礧礨礩礪礫礬礭礮礯礰礱礲礳礵礶礷礸礹礽礿祂祃祄祅祇祊祋祌祍祎祏祐祑祒祔祕祘祙祡祣�祤祦祩祪祫祬祮祰祱祲祳祴祵祶祹祻祼祽祾祿禂禃禆禇禈禉禋禌禍禎禐禑禒怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠�".split(""); for (j = 0; j != D[181].length; ++j) if (D[181][j].charCodeAt(0) !== 65533) { e[D[181][j]] = 46336 + j; d[46336 + j] = D[181][j] } D[182] = "����������������������������������������������������������������禓禔禕禖禗禘禙禛禜禝禞禟禠禡禢禣禤禥禦禨禩禪禫禬禭禮禯禰禱禲禴禵禶禷禸禼禿秂秄秅秇秈秊秌秎秏秐秓秔秖秗秙秚秛秜秝秞秠秡秢秥秨秪�秬秮秱秲秳秴秵秶秷秹秺秼秾秿稁稄稅稇稈稉稊稌稏稐稑稒稓稕稖稘稙稛稜丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二�".split(""); for (j = 0; j != D[182].length; ++j) if (D[182][j].charCodeAt(0) !== 65533) { e[D[182][j]] = 46592 + j; d[46592 + j] = D[182][j] } D[183] = "����������������������������������������������������������������稝稟稡稢稤稥稦稧稨稩稪稫稬稭種稯稰稱稲稴稵稶稸稺稾穀穁穂穃穄穅穇穈穉穊穋穌積穎穏穐穒穓穔穕穖穘穙穚穛穜穝穞穟穠穡穢穣穤穥穦穧穨�穩穪穫穬穭穮穯穱穲穳穵穻穼穽穾窂窅窇窉窊窋窌窎窏窐窓窔窙窚窛窞窡窢贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服�".split(""); for (j = 0; j != D[183].length; ++j) if (D[183][j].charCodeAt(0) !== 65533) { e[D[183][j]] = 46848 + j; d[46848 + j] = D[183][j] } D[184] = "����������������������������������������������������������������窣窤窧窩窪窫窮窯窰窱窲窴窵窶窷窸窹窺窻窼窽窾竀竁竂竃竄竅竆竇竈竉竊竌竍竎竏竐竑竒竓竔竕竗竘竚竛竜竝竡竢竤竧竨竩竪竫竬竮竰竱竲竳�竴竵競竷竸竻竼竾笀笁笂笅笇笉笌笍笎笐笒笓笖笗笘笚笜笝笟笡笢笣笧笩笭浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹�".split(""); for (j = 0; j != D[184].length; ++j) if (D[184][j].charCodeAt(0) !== 65533) { e[D[184][j]] = 47104 + j; d[47104 + j] = D[184][j] } D[185] = "����������������������������������������������������������������笯笰笲笴笵笶笷笹笻笽笿筀筁筂筃筄筆筈筊筍筎筓筕筗筙筜筞筟筡筣筤筥筦筧筨筩筪筫筬筭筯筰筳筴筶筸筺筼筽筿箁箂箃箄箆箇箈箉箊箋箌箎箏�箑箒箓箖箘箙箚箛箞箟箠箣箤箥箮箯箰箲箳箵箶箷箹箺箻箼箽箾箿節篂篃範埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈�".split(""); for (j = 0; j != D[185].length; ++j) if (D[185][j].charCodeAt(0) !== 65533) { e[D[185][j]] = 47360 + j; d[47360 + j] = D[185][j] } D[186] = "����������������������������������������������������������������篅篈築篊篋篍篎篏篐篒篔篕篖篗篘篛篜篞篟篠篢篣篤篧篨篩篫篬篭篯篰篲篳篴篵篶篸篹篺篻篽篿簀簁簂簃簄簅簆簈簉簊簍簎簐簑簒簓簔簕簗簘簙�簚簛簜簝簞簠簡簢簣簤簥簨簩簫簬簭簮簯簰簱簲簳簴簵簶簷簹簺簻簼簽簾籂骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖�".split(""); for (j = 0; j != D[186].length; ++j) if (D[186][j].charCodeAt(0) !== 65533) { e[D[186][j]] = 47616 + j; d[47616 + j] = D[186][j] } D[187] = "����������������������������������������������������������������籃籄籅籆籇籈籉籊籋籌籎籏籐籑籒籓籔籕籖籗籘籙籚籛籜籝籞籟籠籡籢籣籤籥籦籧籨籩籪籫籬籭籮籯籰籱籲籵籶籷籸籹籺籾籿粀粁粂粃粄粅粆粇�粈粊粋粌粍粎粏粐粓粔粖粙粚粛粠粡粣粦粧粨粩粫粬粭粯粰粴粵粶粷粸粺粻弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕�".split(""); for (j = 0; j != D[187].length; ++j) if (D[187][j].charCodeAt(0) !== 65533) { e[D[187][j]] = 47872 + j; d[47872 + j] = D[187][j] } D[188] = "����������������������������������������������������������������粿糀糂糃糄糆糉糋糎糏糐糑糒糓糔糘糚糛糝糞糡糢糣糤糥糦糧糩糪糫糬糭糮糰糱糲糳糴糵糶糷糹糺糼糽糾糿紀紁紂紃約紅紆紇紈紉紋紌納紎紏紐�紑紒紓純紕紖紗紘紙級紛紜紝紞紟紡紣紤紥紦紨紩紪紬紭紮細紱紲紳紴紵紶肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件�".split(""); for (j = 0; j != D[188].length; ++j) if (D[188][j].charCodeAt(0) !== 65533) { e[D[188][j]] = 48128 + j; d[48128 + j] = D[188][j] } D[189] = "����������������������������������������������������������������紷紸紹紺紻紼紽紾紿絀絁終絃組絅絆絇絈絉絊絋経絍絎絏結絑絒絓絔絕絖絗絘絙絚絛絜絝絞絟絠絡絢絣絤絥給絧絨絩絪絫絬絭絯絰統絲絳絴絵絶�絸絹絺絻絼絽絾絿綀綁綂綃綄綅綆綇綈綉綊綋綌綍綎綏綐綑綒經綔綕綖綗綘健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸�".split(""); for (j = 0; j != D[189].length; ++j) if (D[189][j].charCodeAt(0) !== 65533) { e[D[189][j]] = 48384 + j; d[48384 + j] = D[189][j] } D[190] = "����������������������������������������������������������������継続綛綜綝綞綟綠綡綢綣綤綥綧綨綩綪綫綬維綯綰綱網綳綴綵綶綷綸綹綺綻綼綽綾綿緀緁緂緃緄緅緆緇緈緉緊緋緌緍緎総緐緑緒緓緔緕緖緗緘緙�線緛緜緝緞緟締緡緢緣緤緥緦緧編緩緪緫緬緭緮緯緰緱緲緳練緵緶緷緸緹緺尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻�".split(""); for (j = 0; j != D[190].length; ++j) if (D[190][j].charCodeAt(0) !== 65533) { e[D[190][j]] = 48640 + j; d[48640 + j] = D[190][j] } D[191] = "����������������������������������������������������������������緻緼緽緾緿縀縁縂縃縄縅縆縇縈縉縊縋縌縍縎縏縐縑縒縓縔縕縖縗縘縙縚縛縜縝縞縟縠縡縢縣縤縥縦縧縨縩縪縫縬縭縮縯縰縱縲縳縴縵縶縷縸縹�縺縼總績縿繀繂繃繄繅繆繈繉繊繋繌繍繎繏繐繑繒繓織繕繖繗繘繙繚繛繜繝俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀�".split(""); for (j = 0; j != D[191].length; ++j) if (D[191][j].charCodeAt(0) !== 65533) { e[D[191][j]] = 48896 + j; d[48896 + j] = D[191][j] } D[192] = "����������������������������������������������������������������繞繟繠繡繢繣繤繥繦繧繨繩繪繫繬繭繮繯繰繱繲繳繴繵繶繷繸繹繺繻繼繽繾繿纀纁纃纄纅纆纇纈纉纊纋續纍纎纏纐纑纒纓纔纕纖纗纘纙纚纜纝纞�纮纴纻纼绖绤绬绹缊缐缞缷缹缻缼缽缾缿罀罁罃罆罇罈罉罊罋罌罍罎罏罒罓馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐�".split(""); for (j = 0; j != D[192].length; ++j) if (D[192][j].charCodeAt(0) !== 65533) { e[D[192][j]] = 49152 + j; d[49152 + j] = D[192][j] } D[193] = "����������������������������������������������������������������罖罙罛罜罝罞罠罣罤罥罦罧罫罬罭罯罰罳罵罶罷罸罺罻罼罽罿羀羂羃羄羅羆羇羈羉羋羍羏羐羑羒羓羕羖羗羘羙羛羜羠羢羣羥羦羨義羪羫羬羭羮羱�羳羴羵羶羷羺羻羾翀翂翃翄翆翇翈翉翋翍翏翐翑習翓翖翗翙翚翛翜翝翞翢翣痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿�".split(""); for (j = 0; j != D[193].length; ++j) if (D[193][j].charCodeAt(0) !== 65533) { e[D[193][j]] = 49408 + j; d[49408 + j] = D[193][j] } D[194] = "����������������������������������������������������������������翤翧翨翪翫翬翭翯翲翴翵翶翷翸翹翺翽翾翿耂耇耈耉耊耎耏耑耓耚耛耝耞耟耡耣耤耫耬耭耮耯耰耲耴耹耺耼耾聀聁聄聅聇聈聉聎聏聐聑聓聕聖聗�聙聛聜聝聞聟聠聡聢聣聤聥聦聧聨聫聬聭聮聯聰聲聳聴聵聶職聸聹聺聻聼聽隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫�".split(""); for (j = 0; j != D[194].length; ++j) if (D[194][j].charCodeAt(0) !== 65533) { e[D[194][j]] = 49664 + j; d[49664 + j] = D[194][j] } D[195] = "����������������������������������������������������������������聾肁肂肅肈肊肍肎肏肐肑肒肔肕肗肙肞肣肦肧肨肬肰肳肵肶肸肹肻胅胇胈胉胊胋胏胐胑胒胓胔胕胘胟胠胢胣胦胮胵胷胹胻胾胿脀脁脃脄脅脇脈脋�脌脕脗脙脛脜脝脟脠脡脢脣脤脥脦脧脨脩脪脫脭脮脰脳脴脵脷脹脺脻脼脽脿谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸�".split(""); for (j = 0; j != D[195].length; ++j) if (D[195][j].charCodeAt(0) !== 65533) { e[D[195][j]] = 49920 + j; d[49920 + j] = D[195][j] } D[196] = "����������������������������������������������������������������腀腁腂腃腄腅腇腉腍腎腏腒腖腗腘腛腜腝腞腟腡腢腣腤腦腨腪腫腬腯腲腳腵腶腷腸膁膃膄膅膆膇膉膋膌膍膎膐膒膓膔膕膖膗膙膚膞膟膠膡膢膤膥�膧膩膫膬膭膮膯膰膱膲膴膵膶膷膸膹膼膽膾膿臄臅臇臈臉臋臍臎臏臐臑臒臓摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁�".split(""); for (j = 0; j != D[196].length; ++j) if (D[196][j].charCodeAt(0) !== 65533) { e[D[196][j]] = 50176 + j; d[50176 + j] = D[196][j] } D[197] = "����������������������������������������������������������������臔臕臖臗臘臙臚臛臜臝臞臟臠臡臢臤臥臦臨臩臫臮臯臰臱臲臵臶臷臸臹臺臽臿舃與興舉舊舋舎舏舑舓舕舖舗舘舙舚舝舠舤舥舦舧舩舮舲舺舼舽舿�艀艁艂艃艅艆艈艊艌艍艎艐艑艒艓艔艕艖艗艙艛艜艝艞艠艡艢艣艤艥艦艧艩拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗�".split("");
    for (j = 0; j != D[197].length; ++j) if (D[197][j].charCodeAt(0) !== 65533) { e[D[197][j]] = 50432 + j; d[50432 + j] = D[197][j] } D[198] = "����������������������������������������������������������������艪艫艬艭艱艵艶艷艸艻艼芀芁芃芅芆芇芉芌芐芓芔芕芖芚芛芞芠芢芣芧芲芵芶芺芻芼芿苀苂苃苅苆苉苐苖苙苚苝苢苧苨苩苪苬苭苮苰苲苳苵苶苸�苺苼苽苾苿茀茊茋茍茐茒茓茖茘茙茝茞茟茠茡茢茣茤茥茦茩茪茮茰茲茷茻茽啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐�".split(""); for (j = 0; j != D[198].length; ++j) if (D[198][j].charCodeAt(0) !== 65533) { e[D[198][j]] = 50688 + j; d[50688 + j] = D[198][j] } D[199] = "����������������������������������������������������������������茾茿荁荂荄荅荈荊荋荌荍荎荓荕荖荗荘荙荝荢荰荱荲荳荴荵荶荹荺荾荿莀莁莂莃莄莇莈莊莋莌莍莏莐莑莔莕莖莗莙莚莝莟莡莢莣莤莥莦莧莬莭莮�莯莵莻莾莿菂菃菄菆菈菉菋菍菎菐菑菒菓菕菗菙菚菛菞菢菣菤菦菧菨菫菬菭恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠�".split(""); for (j = 0; j != D[199].length; ++j) if (D[199][j].charCodeAt(0) !== 65533) { e[D[199][j]] = 50944 + j; d[50944 + j] = D[199][j] } D[200] = "����������������������������������������������������������������菮華菳菴菵菶菷菺菻菼菾菿萀萂萅萇萈萉萊萐萒萓萔萕萖萗萙萚萛萞萟萠萡萢萣萩萪萫萬萭萮萯萰萲萳萴萵萶萷萹萺萻萾萿葀葁葂葃葄葅葇葈葉�葊葋葌葍葎葏葐葒葓葔葕葖葘葝葞葟葠葢葤葥葦葧葨葪葮葯葰葲葴葷葹葻葼取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁�".split(""); for (j = 0; j != D[200].length; ++j) if (D[200][j].charCodeAt(0) !== 65533) { e[D[200][j]] = 51200 + j; d[51200 + j] = D[200][j] } D[201] = "����������������������������������������������������������������葽葾葿蒀蒁蒃蒄蒅蒆蒊蒍蒏蒐蒑蒒蒓蒔蒕蒖蒘蒚蒛蒝蒞蒟蒠蒢蒣蒤蒥蒦蒧蒨蒩蒪蒫蒬蒭蒮蒰蒱蒳蒵蒶蒷蒻蒼蒾蓀蓂蓃蓅蓆蓇蓈蓋蓌蓎蓏蓒蓔蓕蓗�蓘蓙蓚蓛蓜蓞蓡蓢蓤蓧蓨蓩蓪蓫蓭蓮蓯蓱蓲蓳蓴蓵蓶蓷蓸蓹蓺蓻蓽蓾蔀蔁蔂伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳�".split(""); for (j = 0; j != D[201].length; ++j) if (D[201][j].charCodeAt(0) !== 65533) { e[D[201][j]] = 51456 + j; d[51456 + j] = D[201][j] } D[202] = "����������������������������������������������������������������蔃蔄蔅蔆蔇蔈蔉蔊蔋蔍蔎蔏蔐蔒蔔蔕蔖蔘蔙蔛蔜蔝蔞蔠蔢蔣蔤蔥蔦蔧蔨蔩蔪蔭蔮蔯蔰蔱蔲蔳蔴蔵蔶蔾蔿蕀蕁蕂蕄蕅蕆蕇蕋蕌蕍蕎蕏蕐蕑蕒蕓蕔蕕�蕗蕘蕚蕛蕜蕝蕟蕠蕡蕢蕣蕥蕦蕧蕩蕪蕫蕬蕭蕮蕯蕰蕱蕳蕵蕶蕷蕸蕼蕽蕿薀薁省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱�".split(""); for (j = 0; j != D[202].length; ++j) if (D[202][j].charCodeAt(0) !== 65533) { e[D[202][j]] = 51712 + j; d[51712 + j] = D[202][j] } D[203] = "����������������������������������������������������������������薂薃薆薈薉薊薋薌薍薎薐薑薒薓薔薕薖薗薘薙薚薝薞薟薠薡薢薣薥薦薧薩薫薬薭薱薲薳薴薵薶薸薺薻薼薽薾薿藀藂藃藄藅藆藇藈藊藋藌藍藎藑藒�藔藖藗藘藙藚藛藝藞藟藠藡藢藣藥藦藧藨藪藫藬藭藮藯藰藱藲藳藴藵藶藷藸恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔�".split(""); for (j = 0; j != D[203].length; ++j) if (D[203][j].charCodeAt(0) !== 65533) { e[D[203][j]] = 51968 + j; d[51968 + j] = D[203][j] } D[204] = "����������������������������������������������������������������藹藺藼藽藾蘀蘁蘂蘃蘄蘆蘇蘈蘉蘊蘋蘌蘍蘎蘏蘐蘒蘓蘔蘕蘗蘘蘙蘚蘛蘜蘝蘞蘟蘠蘡蘢蘣蘤蘥蘦蘨蘪蘫蘬蘭蘮蘯蘰蘱蘲蘳蘴蘵蘶蘷蘹蘺蘻蘽蘾蘿虀�虁虂虃虄虅虆虇虈虉虊虋虌虒虓處虖虗虘虙虛虜虝號虠虡虣虤虥虦虧虨虩虪獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃�".split(""); for (j = 0; j != D[204].length; ++j) if (D[204][j].charCodeAt(0) !== 65533) { e[D[204][j]] = 52224 + j; d[52224 + j] = D[204][j] } D[205] = "����������������������������������������������������������������虭虯虰虲虳虴虵虶虷虸蚃蚄蚅蚆蚇蚈蚉蚎蚏蚐蚑蚒蚔蚖蚗蚘蚙蚚蚛蚞蚟蚠蚡蚢蚥蚦蚫蚭蚮蚲蚳蚷蚸蚹蚻蚼蚽蚾蚿蛁蛂蛃蛅蛈蛌蛍蛒蛓蛕蛖蛗蛚蛜�蛝蛠蛡蛢蛣蛥蛦蛧蛨蛪蛫蛬蛯蛵蛶蛷蛺蛻蛼蛽蛿蜁蜄蜅蜆蜋蜌蜎蜏蜐蜑蜔蜖汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威�".split(""); for (j = 0; j != D[205].length; ++j) if (D[205][j].charCodeAt(0) !== 65533) { e[D[205][j]] = 52480 + j; d[52480 + j] = D[205][j] } D[206] = "����������������������������������������������������������������蜙蜛蜝蜟蜠蜤蜦蜧蜨蜪蜫蜬蜭蜯蜰蜲蜳蜵蜶蜸蜹蜺蜼蜽蝀蝁蝂蝃蝄蝅蝆蝊蝋蝍蝏蝐蝑蝒蝔蝕蝖蝘蝚蝛蝜蝝蝞蝟蝡蝢蝦蝧蝨蝩蝪蝫蝬蝭蝯蝱蝲蝳蝵�蝷蝸蝹蝺蝿螀螁螄螆螇螉螊螌螎螏螐螑螒螔螕螖螘螙螚螛螜螝螞螠螡螢螣螤巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺�".split(""); for (j = 0; j != D[206].length; ++j) if (D[206][j].charCodeAt(0) !== 65533) { e[D[206][j]] = 52736 + j; d[52736 + j] = D[206][j] } D[207] = "����������������������������������������������������������������螥螦螧螩螪螮螰螱螲螴螶螷螸螹螻螼螾螿蟁蟂蟃蟄蟅蟇蟈蟉蟌蟍蟎蟏蟐蟔蟕蟖蟗蟘蟙蟚蟜蟝蟞蟟蟡蟢蟣蟤蟦蟧蟨蟩蟫蟬蟭蟯蟰蟱蟲蟳蟴蟵蟶蟷蟸�蟺蟻蟼蟽蟿蠀蠁蠂蠄蠅蠆蠇蠈蠉蠋蠌蠍蠎蠏蠐蠑蠒蠔蠗蠘蠙蠚蠜蠝蠞蠟蠠蠣稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓�".split(""); for (j = 0; j != D[207].length; ++j) if (D[207][j].charCodeAt(0) !== 65533) { e[D[207][j]] = 52992 + j; d[52992 + j] = D[207][j] } D[208] = "����������������������������������������������������������������蠤蠥蠦蠧蠨蠩蠪蠫蠬蠭蠮蠯蠰蠱蠳蠴蠵蠶蠷蠸蠺蠻蠽蠾蠿衁衂衃衆衇衈衉衊衋衎衏衐衑衒術衕衖衘衚衛衜衝衞衟衠衦衧衪衭衯衱衳衴衵衶衸衹衺�衻衼袀袃袆袇袉袊袌袎袏袐袑袓袔袕袗袘袙袚袛袝袞袟袠袡袣袥袦袧袨袩袪小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄�".split(""); for (j = 0; j != D[208].length; ++j) if (D[208][j].charCodeAt(0) !== 65533) { e[D[208][j]] = 53248 + j; d[53248 + j] = D[208][j] } D[209] = "����������������������������������������������������������������袬袮袯袰袲袳袴袵袶袸袹袺袻袽袾袿裀裃裄裇裈裊裋裌裍裏裐裑裓裖裗裚裛補裝裞裠裡裦裧裩裪裫裬裭裮裯裲裵裶裷裺裻製裿褀褁褃褄褅褆複褈�褉褋褌褍褎褏褑褔褕褖褗褘褜褝褞褟褠褢褣褤褦褧褨褩褬褭褮褯褱褲褳褵褷选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶�".split(""); for (j = 0; j != D[209].length; ++j) if (D[209][j].charCodeAt(0) !== 65533) { e[D[209][j]] = 53504 + j; d[53504 + j] = D[209][j] } D[210] = "����������������������������������������������������������������褸褹褺褻褼褽褾褿襀襂襃襅襆襇襈襉襊襋襌襍襎襏襐襑襒襓襔襕襖襗襘襙襚襛襜襝襠襡襢襣襤襥襧襨襩襪襫襬襭襮襯襰襱襲襳襴襵襶襷襸襹襺襼�襽襾覀覂覄覅覇覈覉覊見覌覍覎規覐覑覒覓覔覕視覗覘覙覚覛覜覝覞覟覠覡摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐�".split(""); for (j = 0; j != D[210].length; ++j) if (D[210][j].charCodeAt(0) !== 65533) { e[D[210][j]] = 53760 + j; d[53760 + j] = D[210][j] } D[211] = "����������������������������������������������������������������覢覣覤覥覦覧覨覩親覫覬覭覮覯覰覱覲観覴覵覶覷覸覹覺覻覼覽覾覿觀觃觍觓觔觕觗觘觙觛觝觟觠觡觢觤觧觨觩觪觬觭觮觰觱觲觴觵觶觷觸觹觺�觻觼觽觾觿訁訂訃訄訅訆計訉訊訋訌訍討訏訐訑訒訓訔訕訖託記訙訚訛訜訝印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉�".split(""); for (j = 0; j != D[211].length; ++j) if (D[211][j].charCodeAt(0) !== 65533) { e[D[211][j]] = 54016 + j; d[54016 + j] = D[211][j] } D[212] = "����������������������������������������������������������������訞訟訠訡訢訣訤訥訦訧訨訩訪訫訬設訮訯訰許訲訳訴訵訶訷訸訹診註証訽訿詀詁詂詃詄詅詆詇詉詊詋詌詍詎詏詐詑詒詓詔評詖詗詘詙詚詛詜詝詞�詟詠詡詢詣詤詥試詧詨詩詪詫詬詭詮詯詰話該詳詴詵詶詷詸詺詻詼詽詾詿誀浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧�".split(""); for (j = 0; j != D[212].length; ++j) if (D[212][j].charCodeAt(0) !== 65533) { e[D[212][j]] = 54272 + j; d[54272 + j] = D[212][j] } D[213] = "����������������������������������������������������������������誁誂誃誄誅誆誇誈誋誌認誎誏誐誑誒誔誕誖誗誘誙誚誛誜誝語誟誠誡誢誣誤誥誦誧誨誩說誫説読誮誯誰誱課誳誴誵誶誷誸誹誺誻誼誽誾調諀諁諂�諃諄諅諆談諈諉諊請諌諍諎諏諐諑諒諓諔諕論諗諘諙諚諛諜諝諞諟諠諡諢諣铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政�".split(""); for (j = 0; j != D[213].length; ++j) if (D[213][j].charCodeAt(0) !== 65533) { e[D[213][j]] = 54528 + j; d[54528 + j] = D[213][j] } D[214] = "����������������������������������������������������������������諤諥諦諧諨諩諪諫諬諭諮諯諰諱諲諳諴諵諶諷諸諹諺諻諼諽諾諿謀謁謂謃謄謅謆謈謉謊謋謌謍謎謏謐謑謒謓謔謕謖謗謘謙謚講謜謝謞謟謠謡謢謣�謤謥謧謨謩謪謫謬謭謮謯謰謱謲謳謴謵謶謷謸謹謺謻謼謽謾謿譀譁譂譃譄譅帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑�".split(""); for (j = 0; j != D[214].length; ++j) if (D[214][j].charCodeAt(0) !== 65533) { e[D[214][j]] = 54784 + j; d[54784 + j] = D[214][j] } D[215] = "����������������������������������������������������������������譆譇譈證譊譋譌譍譎譏譐譑譒譓譔譕譖譗識譙譚譛譜譝譞譟譠譡譢譣譤譥譧譨譩譪譫譭譮譯議譱譲譳譴譵譶護譸譹譺譻譼譽譾譿讀讁讂讃讄讅讆�讇讈讉變讋讌讍讎讏讐讑讒讓讔讕讖讗讘讙讚讛讜讝讞讟讬讱讻诇诐诪谉谞住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座������".split(""); for (j = 0; j != D[215].length; ++j) if (D[215][j].charCodeAt(0) !== 65533) { e[D[215][j]] = 55040 + j; d[55040 + j] = D[215][j] } D[216] = "����������������������������������������������������������������谸谹谺谻谼谽谾谿豀豂豃豄豅豈豊豋豍豎豏豐豑豒豓豔豖豗豘豙豛豜豝豞豟豠豣豤豥豦豧豨豩豬豭豮豯豰豱豲豴豵豶豷豻豼豽豾豿貀貁貃貄貆貇�貈貋貍貎貏貐貑貒貓貕貖貗貙貚貛貜貝貞貟負財貢貣貤貥貦貧貨販貪貫責貭亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝�".split(""); for (j = 0; j != D[216].length; ++j) if (D[216][j].charCodeAt(0) !== 65533) { e[D[216][j]] = 55296 + j; d[55296 + j] = D[216][j] } D[217] = "����������������������������������������������������������������貮貯貰貱貲貳貴貵貶買貸貹貺費貼貽貾貿賀賁賂賃賄賅賆資賈賉賊賋賌賍賎賏賐賑賒賓賔賕賖賗賘賙賚賛賜賝賞賟賠賡賢賣賤賥賦賧賨賩質賫賬�賭賮賯賰賱賲賳賴賵賶賷賸賹賺賻購賽賾賿贀贁贂贃贄贅贆贇贈贉贊贋贌贍佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼�".split(""); for (j = 0; j != D[217].length; ++j) if (D[217][j].charCodeAt(0) !== 65533) { e[D[217][j]] = 55552 + j; d[55552 + j] = D[217][j] } D[218] = "����������������������������������������������������������������贎贏贐贑贒贓贔贕贖贗贘贙贚贛贜贠赑赒赗赟赥赨赩赪赬赮赯赱赲赸赹赺赻赼赽赾赿趀趂趃趆趇趈趉趌趍趎趏趐趒趓趕趖趗趘趙趚趛趜趝趞趠趡�趢趤趥趦趧趨趩趪趫趬趭趮趯趰趲趶趷趹趻趽跀跁跂跅跇跈跉跊跍跐跒跓跔凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺�".split(""); for (j = 0; j != D[218].length; ++j) if (D[218][j].charCodeAt(0) !== 65533) { e[D[218][j]] = 55808 + j; d[55808 + j] = D[218][j] } D[219] = "����������������������������������������������������������������跕跘跙跜跠跡跢跥跦跧跩跭跮跰跱跲跴跶跼跾跿踀踁踂踃踄踆踇踈踋踍踎踐踑踒踓踕踖踗踘踙踚踛踜踠踡踤踥踦踧踨踫踭踰踲踳踴踶踷踸踻踼踾�踿蹃蹅蹆蹌蹍蹎蹏蹐蹓蹔蹕蹖蹗蹘蹚蹛蹜蹝蹞蹟蹠蹡蹢蹣蹤蹥蹧蹨蹪蹫蹮蹱邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝�".split(""); for (j = 0; j != D[219].length; ++j) if (D[219][j].charCodeAt(0) !== 65533) { e[D[219][j]] = 56064 + j; d[56064 + j] = D[219][j] } D[220] = "����������������������������������������������������������������蹳蹵蹷蹸蹹蹺蹻蹽蹾躀躂躃躄躆躈躉躊躋躌躍躎躑躒躓躕躖躗躘躙躚躛躝躟躠躡躢躣躤躥躦躧躨躩躪躭躮躰躱躳躴躵躶躷躸躹躻躼躽躾躿軀軁軂�軃軄軅軆軇軈軉車軋軌軍軏軐軑軒軓軔軕軖軗軘軙軚軛軜軝軞軟軠軡転軣軤堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥�".split(""); for (j = 0; j != D[220].length; ++j) if (D[220][j].charCodeAt(0) !== 65533) { e[D[220][j]] = 56320 + j; d[56320 + j] = D[220][j] } D[221] = "����������������������������������������������������������������軥軦軧軨軩軪軫軬軭軮軯軰軱軲軳軴軵軶軷軸軹軺軻軼軽軾軿輀輁輂較輄輅輆輇輈載輊輋輌輍輎輏輐輑輒輓輔輕輖輗輘輙輚輛輜輝輞輟輠輡輢輣�輤輥輦輧輨輩輪輫輬輭輮輯輰輱輲輳輴輵輶輷輸輹輺輻輼輽輾輿轀轁轂轃轄荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺�".split(""); for (j = 0; j != D[221].length; ++j) if (D[221][j].charCodeAt(0) !== 65533) { e[D[221][j]] = 56576 + j; d[56576 + j] = D[221][j] } D[222] = "����������������������������������������������������������������轅轆轇轈轉轊轋轌轍轎轏轐轑轒轓轔轕轖轗轘轙轚轛轜轝轞轟轠轡轢轣轤轥轪辀辌辒辝辠辡辢辤辥辦辧辪辬辭辮辯農辳辴辵辷辸辺辻込辿迀迃迆�迉迊迋迌迍迏迒迖迗迚迠迡迣迧迬迯迱迲迴迵迶迺迻迼迾迿逇逈逌逎逓逕逘蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖�".split(""); for (j = 0; j != D[222].length; ++j) if (D[222][j].charCodeAt(0) !== 65533) { e[D[222][j]] = 56832 + j; d[56832 + j] = D[222][j] } D[223] = "����������������������������������������������������������������這逜連逤逥逧逨逩逪逫逬逰週進逳逴逷逹逺逽逿遀遃遅遆遈遉遊運遌過達違遖遙遚遜遝遞遟遠遡遤遦遧適遪遫遬遯遰遱遲遳遶遷選遹遺遻遼遾邁�還邅邆邇邉邊邌邍邎邏邐邒邔邖邘邚邜邞邟邠邤邥邧邨邩邫邭邲邷邼邽邿郀摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼�".split(""); for (j = 0; j != D[223].length; ++j) if (D[223][j].charCodeAt(0) !== 65533) { e[D[223][j]] = 57088 + j; d[57088 + j] = D[223][j] } D[224] = "����������������������������������������������������������������郂郃郆郈郉郋郌郍郒郔郕郖郘郙郚郞郟郠郣郤郥郩郪郬郮郰郱郲郳郵郶郷郹郺郻郼郿鄀鄁鄃鄅鄆鄇鄈鄉鄊鄋鄌鄍鄎鄏鄐鄑鄒鄓鄔鄕鄖鄗鄘鄚鄛鄜�鄝鄟鄠鄡鄤鄥鄦鄧鄨鄩鄪鄫鄬鄭鄮鄰鄲鄳鄴鄵鄶鄷鄸鄺鄻鄼鄽鄾鄿酀酁酂酄唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼�".split(""); for (j = 0; j != D[224].length; ++j) if (D[224][j].charCodeAt(0) !== 65533) { e[D[224][j]] = 57344 + j; d[57344 + j] = D[224][j] } D[225] = "����������������������������������������������������������������酅酇酈酑酓酔酕酖酘酙酛酜酟酠酦酧酨酫酭酳酺酻酼醀醁醂醃醄醆醈醊醎醏醓醔醕醖醗醘醙醜醝醞醟醠醡醤醥醦醧醨醩醫醬醰醱醲醳醶醷醸醹醻�醼醽醾醿釀釁釂釃釄釅釆釈釋釐釒釓釔釕釖釗釘釙釚釛針釞釟釠釡釢釣釤釥帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺�".split(""); for (j = 0; j != D[225].length; ++j) if (D[225][j].charCodeAt(0) !== 65533) { e[D[225][j]] = 57600 + j; d[57600 + j] = D[225][j] } D[226] = "����������������������������������������������������������������釦釧釨釩釪釫釬釭釮釯釰釱釲釳釴釵釶釷釸釹釺釻釼釽釾釿鈀鈁鈂鈃鈄鈅鈆鈇鈈鈉鈊鈋鈌鈍鈎鈏鈐鈑鈒鈓鈔鈕鈖鈗鈘鈙鈚鈛鈜鈝鈞鈟鈠鈡鈢鈣鈤�鈥鈦鈧鈨鈩鈪鈫鈬鈭鈮鈯鈰鈱鈲鈳鈴鈵鈶鈷鈸鈹鈺鈻鈼鈽鈾鈿鉀鉁鉂鉃鉄鉅狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧饨饩饪饫饬饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂�".split(""); for (j = 0; j != D[226].length; ++j) if (D[226][j].charCodeAt(0) !== 65533) { e[D[226][j]] = 57856 + j; d[57856 + j] = D[226][j] } D[227] = "����������������������������������������������������������������鉆鉇鉈鉉鉊鉋鉌鉍鉎鉏鉐鉑鉒鉓鉔鉕鉖鉗鉘鉙鉚鉛鉜鉝鉞鉟鉠鉡鉢鉣鉤鉥鉦鉧鉨鉩鉪鉫鉬鉭鉮鉯鉰鉱鉲鉳鉵鉶鉷鉸鉹鉺鉻鉼鉽鉾鉿銀銁銂銃銄銅�銆銇銈銉銊銋銌銍銏銐銑銒銓銔銕銖銗銘銙銚銛銜銝銞銟銠銡銢銣銤銥銦銧恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾�".split(""); for (j = 0; j != D[227].length; ++j) if (D[227][j].charCodeAt(0) !== 65533) { e[D[227][j]] = 58112 + j; d[58112 + j] = D[227][j] } D[228] = "����������������������������������������������������������������銨銩銪銫銬銭銯銰銱銲銳銴銵銶銷銸銹銺銻銼銽銾銿鋀鋁鋂鋃鋄鋅鋆鋇鋉鋊鋋鋌鋍鋎鋏鋐鋑鋒鋓鋔鋕鋖鋗鋘鋙鋚鋛鋜鋝鋞鋟鋠鋡鋢鋣鋤鋥鋦鋧鋨�鋩鋪鋫鋬鋭鋮鋯鋰鋱鋲鋳鋴鋵鋶鋷鋸鋹鋺鋻鋼鋽鋾鋿錀錁錂錃錄錅錆錇錈錉洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑�".split(""); for (j = 0; j != D[228].length; ++j) if (D[228][j].charCodeAt(0) !== 65533) { e[D[228][j]] = 58368 + j; d[58368 + j] = D[228][j] } D[229] = "����������������������������������������������������������������錊錋錌錍錎錏錐錑錒錓錔錕錖錗錘錙錚錛錜錝錞錟錠錡錢錣錤錥錦錧錨錩錪錫錬錭錮錯錰錱録錳錴錵錶錷錸錹錺錻錼錽錿鍀鍁鍂鍃鍄鍅鍆鍇鍈鍉�鍊鍋鍌鍍鍎鍏鍐鍑鍒鍓鍔鍕鍖鍗鍘鍙鍚鍛鍜鍝鍞鍟鍠鍡鍢鍣鍤鍥鍦鍧鍨鍩鍫濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣�".split(""); for (j = 0; j != D[229].length; ++j) if (D[229][j].charCodeAt(0) !== 65533) { e[D[229][j]] = 58624 + j; d[58624 + j] = D[229][j] } D[230] = "����������������������������������������������������������������鍬鍭鍮鍯鍰鍱鍲鍳鍴鍵鍶鍷鍸鍹鍺鍻鍼鍽鍾鍿鎀鎁鎂鎃鎄鎅鎆鎇鎈鎉鎊鎋鎌鎍鎎鎐鎑鎒鎓鎔鎕鎖鎗鎘鎙鎚鎛鎜鎝鎞鎟鎠鎡鎢鎣鎤鎥鎦鎧鎨鎩鎪鎫�鎬鎭鎮鎯鎰鎱鎲鎳鎴鎵鎶鎷鎸鎹鎺鎻鎼鎽鎾鎿鏀鏁鏂鏃鏄鏅鏆鏇鏈鏉鏋鏌鏍妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩�".split(""); for (j = 0; j != D[230].length; ++j) if (D[230][j].charCodeAt(0) !== 65533) { e[D[230][j]] = 58880 + j; d[58880 + j] = D[230][j] } D[231] = "����������������������������������������������������������������鏎鏏鏐鏑鏒鏓鏔鏕鏗鏘鏙鏚鏛鏜鏝鏞鏟鏠鏡鏢鏣鏤鏥鏦鏧鏨鏩鏪鏫鏬鏭鏮鏯鏰鏱鏲鏳鏴鏵鏶鏷鏸鏹鏺鏻鏼鏽鏾鏿鐀鐁鐂鐃鐄鐅鐆鐇鐈鐉鐊鐋鐌鐍�鐎鐏鐐鐑鐒鐓鐔鐕鐖鐗鐘鐙鐚鐛鐜鐝鐞鐟鐠鐡鐢鐣鐤鐥鐦鐧鐨鐩鐪鐫鐬鐭鐮纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡缢缣缤缥缦缧缪缫缬缭缯缰缱缲缳缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬�".split(""); for (j = 0; j != D[231].length; ++j) if (D[231][j].charCodeAt(0) !== 65533) { e[D[231][j]] = 59136 + j; d[59136 + j] = D[231][j] } D[232] = "����������������������������������������������������������������鐯鐰鐱鐲鐳鐴鐵鐶鐷鐸鐹鐺鐻鐼鐽鐿鑀鑁鑂鑃鑄鑅鑆鑇鑈鑉鑊鑋鑌鑍鑎鑏鑐鑑鑒鑓鑔鑕鑖鑗鑘鑙鑚鑛鑜鑝鑞鑟鑠鑡鑢鑣鑤鑥鑦鑧鑨鑩鑪鑬鑭鑮鑯�鑰鑱鑲鑳鑴鑵鑶鑷鑸鑹鑺鑻鑼鑽鑾鑿钀钁钂钃钄钑钖钘铇铏铓铔铚铦铻锜锠琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹�".split(""); for (j = 0; j != D[232].length; ++j) if (D[232][j].charCodeAt(0) !== 65533) { e[D[232][j]] = 59392 + j; d[59392 + j] = D[232][j] } D[233] = "����������������������������������������������������������������锧锳锽镃镈镋镕镚镠镮镴镵長镸镹镺镻镼镽镾門閁閂閃閄閅閆閇閈閉閊開閌閍閎閏閐閑閒間閔閕閖閗閘閙閚閛閜閝閞閟閠閡関閣閤閥閦閧閨閩閪�閫閬閭閮閯閰閱閲閳閴閵閶閷閸閹閺閻閼閽閾閿闀闁闂闃闄闅闆闇闈闉闊闋椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋�".split(""); for (j = 0; j != D[233].length; ++j) if (D[233][j].charCodeAt(0) !== 65533) { e[D[233][j]] = 59648 + j; d[59648 + j] = D[233][j] } D[234] = "����������������������������������������������������������������闌闍闎闏闐闑闒闓闔闕闖闗闘闙闚闛關闝闞闟闠闡闢闣闤闥闦闧闬闿阇阓阘阛阞阠阣阤阥阦阧阨阩阫阬阭阯阰阷阸阹阺阾陁陃陊陎陏陑陒陓陖陗�陘陙陚陜陝陞陠陣陥陦陫陭陮陯陰陱陳陸陹険陻陼陽陾陿隀隁隂隃隄隇隉隊辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰�".split(""); for (j = 0; j != D[234].length; ++j) if (D[234][j].charCodeAt(0) !== 65533) { e[D[234][j]] = 59904 + j; d[59904 + j] = D[234][j] } D[235] = "����������������������������������������������������������������隌階隑隒隓隕隖隚際隝隞隟隠隡隢隣隤隥隦隨隩險隫隬隭隮隯隱隲隴隵隷隸隺隻隿雂雃雈雊雋雐雑雓雔雖雗雘雙雚雛雜雝雞雟雡離難雤雥雦雧雫�雬雭雮雰雱雲雴雵雸雺電雼雽雿霂霃霅霊霋霌霐霑霒霔霕霗霘霙霚霛霝霟霠搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻�".split(""); for (j = 0; j != D[235].length; ++j) if (D[235][j].charCodeAt(0) !== 65533) { e[D[235][j]] = 60160 + j; d[60160 + j] = D[235][j] } D[236] = "����������������������������������������������������������������霡霢霣霤霥霦霧霨霩霫霬霮霯霱霳霴霵霶霷霺霻霼霽霿靀靁靂靃靄靅靆靇靈靉靊靋靌靍靎靏靐靑靔靕靗靘靚靜靝靟靣靤靦靧靨靪靫靬靭靮靯靰靱�靲靵靷靸靹靺靻靽靾靿鞀鞁鞂鞃鞄鞆鞇鞈鞉鞊鞌鞎鞏鞐鞓鞕鞖鞗鞙鞚鞛鞜鞝臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐�".split(""); for (j = 0; j != D[236].length; ++j) if (D[236][j].charCodeAt(0) !== 65533) { e[D[236][j]] = 60416 + j; d[60416 + j] = D[236][j] } D[237] = "����������������������������������������������������������������鞞鞟鞡鞢鞤鞥鞦鞧鞨鞩鞪鞬鞮鞰鞱鞳鞵鞶鞷鞸鞹鞺鞻鞼鞽鞾鞿韀韁韂韃韄韅韆韇韈韉韊韋韌韍韎韏韐韑韒韓韔韕韖韗韘韙韚韛韜韝韞韟韠韡韢韣�韤韥韨韮韯韰韱韲韴韷韸韹韺韻韼韽韾響頀頁頂頃頄項順頇須頉頊頋頌頍頎怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨�".split(""); for (j = 0; j != D[237].length; ++j) if (D[237][j].charCodeAt(0) !== 65533) { e[D[237][j]] = 60672 + j; d[60672 + j] = D[237][j] } D[238] = "����������������������������������������������������������������頏預頑頒頓頔頕頖頗領頙頚頛頜頝頞頟頠頡頢頣頤頥頦頧頨頩頪頫頬頭頮頯頰頱頲頳頴頵頶頷頸頹頺頻頼頽頾頿顀顁顂顃顄顅顆顇顈顉顊顋題額�顎顏顐顑顒顓顔顕顖顗願顙顚顛顜顝類顟顠顡顢顣顤顥顦顧顨顩顪顫顬顭顮睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶钷钸钹钺钼钽钿铄铈铉铊铋铌铍铎铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪�".split(""); for (j = 0; j != D[238].length; ++j) if (D[238][j].charCodeAt(0) !== 65533) { e[D[238][j]] = 60928 + j; d[60928 + j] = D[238][j] } D[239] = "����������������������������������������������������������������顯顰顱顲顳顴颋颎颒颕颙颣風颩颪颫颬颭颮颯颰颱颲颳颴颵颶颷颸颹颺颻颼颽颾颿飀飁飂飃飄飅飆飇飈飉飊飋飌飍飏飐飔飖飗飛飜飝飠飡飢飣飤�飥飦飩飪飫飬飭飮飯飰飱飲飳飴飵飶飷飸飹飺飻飼飽飾飿餀餁餂餃餄餅餆餇铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒锓锔锕锖锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤镥镦镧镨镩镪镫镬镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔�".split(""); for (j = 0; j != D[239].length; ++j) if (D[239][j].charCodeAt(0) !== 65533) { e[D[239][j]] = 61184 + j; d[61184 + j] = D[239][j] } D[240] = "����������������������������������������������������������������餈餉養餋餌餎餏餑餒餓餔餕餖餗餘餙餚餛餜餝餞餟餠餡餢餣餤餥餦餧館餩餪餫餬餭餯餰餱餲餳餴餵餶餷餸餹餺餻餼餽餾餿饀饁饂饃饄饅饆饇饈饉�饊饋饌饍饎饏饐饑饒饓饖饗饘饙饚饛饜饝饞饟饠饡饢饤饦饳饸饹饻饾馂馃馉稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨鸩鸪鸫鸬鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦鹧鹨鹩鹪鹫鹬鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙�".split(""); for (j = 0; j != D[240].length; ++j) if (D[240][j].charCodeAt(0) !== 65533) { e[D[240][j]] = 61440 + j; d[61440 + j] = D[240][j] } D[241] = "����������������������������������������������������������������馌馎馚馛馜馝馞馟馠馡馢馣馤馦馧馩馪馫馬馭馮馯馰馱馲馳馴馵馶馷馸馹馺馻馼馽馾馿駀駁駂駃駄駅駆駇駈駉駊駋駌駍駎駏駐駑駒駓駔駕駖駗駘�駙駚駛駜駝駞駟駠駡駢駣駤駥駦駧駨駩駪駫駬駭駮駯駰駱駲駳駴駵駶駷駸駹瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃�".split(""); for (j = 0; j != D[241].length; ++j) if (D[241][j].charCodeAt(0) !== 65533) { e[D[241][j]] = 61696 + j; d[61696 + j] = D[241][j] } D[242] = "����������������������������������������������������������������駺駻駼駽駾駿騀騁騂騃騄騅騆騇騈騉騊騋騌騍騎騏騐騑騒験騔騕騖騗騘騙騚騛騜騝騞騟騠騡騢騣騤騥騦騧騨騩騪騫騬騭騮騯騰騱騲騳騴騵騶騷騸�騹騺騻騼騽騾騿驀驁驂驃驄驅驆驇驈驉驊驋驌驍驎驏驐驑驒驓驔驕驖驗驘驙颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒�".split(""); for (j = 0; j != D[242].length; ++j) if (D[242][j].charCodeAt(0) !== 65533) { e[D[242][j]] = 61952 + j; d[61952 + j] = D[242][j] } D[243] = "����������������������������������������������������������������驚驛驜驝驞驟驠驡驢驣驤驥驦驧驨驩驪驫驲骃骉骍骎骔骕骙骦骩骪骫骬骭骮骯骲骳骴骵骹骻骽骾骿髃髄髆髇髈髉髊髍髎髏髐髒體髕髖髗髙髚髛髜�髝髞髠髢髣髤髥髧髨髩髪髬髮髰髱髲髳髴髵髶髷髸髺髼髽髾髿鬀鬁鬂鬄鬅鬆蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋�".split(""); for (j = 0; j != D[243].length; ++j) if (D[243][j].charCodeAt(0) !== 65533) { e[D[243][j]] = 62208 + j; d[62208 + j] = D[243][j] } D[244] = "����������������������������������������������������������������鬇鬉鬊鬋鬌鬍鬎鬐鬑鬒鬔鬕鬖鬗鬘鬙鬚鬛鬜鬝鬞鬠鬡鬢鬤鬥鬦鬧鬨鬩鬪鬫鬬鬭鬮鬰鬱鬳鬴鬵鬶鬷鬸鬹鬺鬽鬾鬿魀魆魊魋魌魎魐魒魓魕魖魗魘魙魚�魛魜魝魞魟魠魡魢魣魤魥魦魧魨魩魪魫魬魭魮魯魰魱魲魳魴魵魶魷魸魹魺魻簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤�".split(""); for (j = 0; j != D[244].length; ++j) if (D[244][j].charCodeAt(0) !== 65533) { e[D[244][j]] = 62464 + j; d[62464 + j] = D[244][j] } D[245] = "����������������������������������������������������������������魼魽魾魿鮀鮁鮂鮃鮄鮅鮆鮇鮈鮉鮊鮋鮌鮍鮎鮏鮐鮑鮒鮓鮔鮕鮖鮗鮘鮙鮚鮛鮜鮝鮞鮟鮠鮡鮢鮣鮤鮥鮦鮧鮨鮩鮪鮫鮬鮭鮮鮯鮰鮱鮲鮳鮴鮵鮶鮷鮸鮹鮺�鮻鮼鮽鮾鮿鯀鯁鯂鯃鯄鯅鯆鯇鯈鯉鯊鯋鯌鯍鯎鯏鯐鯑鯒鯓鯔鯕鯖鯗鯘鯙鯚鯛酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜�".split(""); for (j = 0; j != D[245].length; ++j) if (D[245][j].charCodeAt(0) !== 65533) { e[D[245][j]] = 62720 + j; d[62720 + j] = D[245][j] } D[246] = "����������������������������������������������������������������鯜鯝鯞鯟鯠鯡鯢鯣鯤鯥鯦鯧鯨鯩鯪鯫鯬鯭鯮鯯鯰鯱鯲鯳鯴鯵鯶鯷鯸鯹鯺鯻鯼鯽鯾鯿鰀鰁鰂鰃鰄鰅鰆鰇鰈鰉鰊鰋鰌鰍鰎鰏鰐鰑鰒鰓鰔鰕鰖鰗鰘鰙鰚�鰛鰜鰝鰞鰟鰠鰡鰢鰣鰤鰥鰦鰧鰨鰩鰪鰫鰬鰭鰮鰯鰰鰱鰲鰳鰴鰵鰶鰷鰸鰹鰺鰻觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅龆龇龈龉龊龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞鲟鲠鲡鲢鲣鲥鲦鲧鲨鲩鲫鲭鲮鲰鲱鲲鲳鲴鲵鲶鲷鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋�".split(""); for (j = 0; j != D[246].length; ++j) if (D[246][j].charCodeAt(0) !== 65533) { e[D[246][j]] = 62976 + j; d[62976 + j] = D[246][j] } D[247] = "����������������������������������������������������������������鰼鰽鰾鰿鱀鱁鱂鱃鱄鱅鱆鱇鱈鱉鱊鱋鱌鱍鱎鱏鱐鱑鱒鱓鱔鱕鱖鱗鱘鱙鱚鱛鱜鱝鱞鱟鱠鱡鱢鱣鱤鱥鱦鱧鱨鱩鱪鱫鱬鱭鱮鱯鱰鱱鱲鱳鱴鱵鱶鱷鱸鱹鱺�鱻鱽鱾鲀鲃鲄鲉鲊鲌鲏鲓鲖鲗鲘鲙鲝鲪鲬鲯鲹鲾鲿鳀鳁鳂鳈鳉鳑鳒鳚鳛鳠鳡鳌鳍鳎鳏鳐鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄�".split(""); for (j = 0; j != D[247].length; ++j) if (D[247][j].charCodeAt(0) !== 65533) { e[D[247][j]] = 63232 + j; d[63232 + j] = D[247][j] } D[248] = "����������������������������������������������������������������鳣鳤鳥鳦鳧鳨鳩鳪鳫鳬鳭鳮鳯鳰鳱鳲鳳鳴鳵鳶鳷鳸鳹鳺鳻鳼鳽鳾鳿鴀鴁鴂鴃鴄鴅鴆鴇鴈鴉鴊鴋鴌鴍鴎鴏鴐鴑鴒鴓鴔鴕鴖鴗鴘鴙鴚鴛鴜鴝鴞鴟鴠鴡�鴢鴣鴤鴥鴦鴧鴨鴩鴪鴫鴬鴭鴮鴯鴰鴱鴲鴳鴴鴵鴶鴷鴸鴹鴺鴻鴼鴽鴾鴿鵀鵁鵂�����������������������������������������������������������������������������������������������".split(""); for (j = 0; j != D[248].length; ++j) if (D[248][j].charCodeAt(0) !== 65533) { e[D[248][j]] = 63488 + j; d[63488 + j] = D[248][j] } D[249] = "����������������������������������������������������������������鵃鵄鵅鵆鵇鵈鵉鵊鵋鵌鵍鵎鵏鵐鵑鵒鵓鵔鵕鵖鵗鵘鵙鵚鵛鵜鵝鵞鵟鵠鵡鵢鵣鵤鵥鵦鵧鵨鵩鵪鵫鵬鵭鵮鵯鵰鵱鵲鵳鵴鵵鵶鵷鵸鵹鵺鵻鵼鵽鵾鵿鶀鶁�鶂鶃鶄鶅鶆鶇鶈鶉鶊鶋鶌鶍鶎鶏鶐鶑鶒鶓鶔鶕鶖鶗鶘鶙鶚鶛鶜鶝鶞鶟鶠鶡鶢�����������������������������������������������������������������������������������������������".split(""); for (j = 0; j != D[249].length; ++j) if (D[249][j].charCodeAt(0) !== 65533) { e[D[249][j]] = 63744 + j; d[63744 + j] = D[249][j] } D[250] = "����������������������������������������������������������������鶣鶤鶥鶦鶧鶨鶩鶪鶫鶬鶭鶮鶯鶰鶱鶲鶳鶴鶵鶶鶷鶸鶹鶺鶻鶼鶽鶾鶿鷀鷁鷂鷃鷄鷅鷆鷇鷈鷉鷊鷋鷌鷍鷎鷏鷐鷑鷒鷓鷔鷕鷖鷗鷘鷙鷚鷛鷜鷝鷞鷟鷠鷡�鷢鷣鷤鷥鷦鷧鷨鷩鷪鷫鷬鷭鷮鷯鷰鷱鷲鷳鷴鷵鷶鷷鷸鷹鷺鷻鷼鷽鷾鷿鸀鸁鸂�����������������������������������������������������������������������������������������������".split(""); for (j = 0; j != D[250].length; ++j) if (D[250][j].charCodeAt(0) !== 65533) { e[D[250][j]] = 64e3 + j; d[64e3 + j] = D[250][j] } D[251] = "����������������������������������������������������������������鸃鸄鸅鸆鸇鸈鸉鸊鸋鸌鸍鸎鸏鸐鸑鸒鸓鸔鸕鸖鸗鸘鸙鸚鸛鸜鸝鸞鸤鸧鸮鸰鸴鸻鸼鹀鹍鹐鹒鹓鹔鹖鹙鹝鹟鹠鹡鹢鹥鹮鹯鹲鹴鹵鹶鹷鹸鹹鹺鹻鹼鹽麀�麁麃麄麅麆麉麊麌麍麎麏麐麑麔麕麖麗麘麙麚麛麜麞麠麡麢麣麤麥麧麨麩麪�����������������������������������������������������������������������������������������������".split(""); for (j = 0; j != D[251].length; ++j) if (D[251][j].charCodeAt(0) !== 65533) { e[D[251][j]] = 64256 + j; d[64256 + j] = D[251][j] } D[252] = "����������������������������������������������������������������麫麬麭麮麯麰麱麲麳麵麶麷麹麺麼麿黀黁黂黃黅黆黇黈黊黋黌黐黒黓黕黖黗黙黚點黡黣黤黦黨黫黬黭黮黰黱黲黳黴黵黶黷黸黺黽黿鼀鼁鼂鼃鼄鼅�鼆鼇鼈鼉鼊鼌鼏鼑鼒鼔鼕鼖鼘鼚鼛鼜鼝鼞鼟鼡鼣鼤鼥鼦鼧鼨鼩鼪鼫鼭鼮鼰鼱�����������������������������������������������������������������������������������������������".split(""); for (j = 0; j != D[252].length; ++j) if (D[252][j].charCodeAt(0) !== 65533) { e[D[252][j]] = 64512 + j; d[64512 + j] = D[252][j] } D[253] = "����������������������������������������������������������������鼲鼳鼴鼵鼶鼸鼺鼼鼿齀齁齂齃齅齆齇齈齉齊齋齌齍齎齏齒齓齔齕齖齗齘齙齚齛齜齝齞齟齠齡齢齣齤齥齦齧齨齩齪齫齬齭齮齯齰齱齲齳齴齵齶齷齸�齹齺齻齼齽齾龁龂龍龎龏龐龑龒龓龔龕龖龗龘龜龝龞龡龢龣龤龥郎凉秊裏隣�����������������������������������������������������������������������������������������������".split(""); for (j = 0; j != D[253].length; ++j) if (D[253][j].charCodeAt(0) !== 65533) { e[D[253][j]] = 64768 + j; d[64768 + j] = D[253][j] } D[254] = "����������������������������������������������������������������兀嗀﨎﨏﨑﨓﨔礼﨟蘒﨡﨣﨤﨧﨨﨩��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������".split(""); for (j = 0; j != D[254].length; ++j) if (D[254][j].charCodeAt(0) !== 65533) { e[D[254][j]] = 65024 + j; d[65024 + j] = D[254][j] } return { enc: e, dec: d }
}(); cptable[949] = function () {
    var d = [], e = {}, D = [], j; D[0] = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~��������������������������������������������������������������������������������������������������������������������������������".split(""); for (j = 0; j != D[0].length; ++j) if (D[0][j].charCodeAt(0) !== 65533) { e[D[0][j]] = 0 + j; d[0 + j] = D[0][j] } D[129] = "�����������������������������������������������������������������갂갃갅갆갋갌갍갎갏갘갞갟갡갢갣갥갦갧갨갩갪갫갮갲갳갴������갵갶갷갺갻갽갾갿걁걂걃걄걅걆걇걈걉걊걌걎걏걐걑걒걓걕������걖걗걙걚걛걝걞걟걠걡걢걣걤걥걦걧걨걩걪걫걬걭걮걯걲걳걵걶걹걻걼걽걾걿겂겇겈겍겎겏겑겒겓겕겖겗겘겙겚겛겞겢겣겤겥겦겧겫겭겮겱겲겳겴겵겶겷겺겾겿곀곂곃곅곆곇곉곊곋곍곎곏곐곑곒곓곔곖곘곙곚곛곜곝곞곟곢곣곥곦곩곫곭곮곲곴곷곸곹곺곻곾곿괁괂괃괅괇괈괉괊괋괎괐괒괓�".split(""); for (j = 0; j != D[129].length; ++j) if (D[129][j].charCodeAt(0) !== 65533) { e[D[129][j]] = 33024 + j; d[33024 + j] = D[129][j] } D[130] = "�����������������������������������������������������������������괔괕괖괗괙괚괛괝괞괟괡괢괣괤괥괦괧괨괪괫괮괯괰괱괲괳������괶괷괹괺괻괽괾괿굀굁굂굃굆굈굊굋굌굍굎굏굑굒굓굕굖굗������굙굚굛굜굝굞굟굠굢굤굥굦굧굨굩굪굫굮굯굱굲굷굸굹굺굾궀궃궄궅궆궇궊궋궍궎궏궑궒궓궔궕궖궗궘궙궚궛궞궟궠궡궢궣궥궦궧궨궩궪궫궬궭궮궯궰궱궲궳궴궵궶궸궹궺궻궼궽궾궿귂귃귅귆귇귉귊귋귌귍귎귏귒귔귕귖귗귘귙귚귛귝귞귟귡귢귣귥귦귧귨귩귪귫귬귭귮귯귰귱귲귳귴귵귶귷�".split(""); for (j = 0; j != D[130].length; ++j) if (D[130][j].charCodeAt(0) !== 65533) { e[D[130][j]] = 33280 + j; d[33280 + j] = D[130][j] } D[131] = "�����������������������������������������������������������������귺귻귽귾긂긃긄긅긆긇긊긌긎긏긐긑긒긓긕긖긗긘긙긚긛긜������긝긞긟긠긡긢긣긤긥긦긧긨긩긪긫긬긭긮긯긲긳긵긶긹긻긼������긽긾긿깂깄깇깈깉깋깏깑깒깓깕깗깘깙깚깛깞깢깣깤깦깧깪깫깭깮깯깱깲깳깴깵깶깷깺깾깿꺀꺁꺂꺃꺆꺇꺈꺉꺊꺋꺍꺎꺏꺐꺑꺒꺓꺔꺕꺖꺗꺘꺙꺚꺛꺜꺝꺞꺟꺠꺡꺢꺣꺤꺥꺦꺧꺨꺩꺪꺫꺬꺭꺮꺯꺰꺱꺲꺳꺴꺵꺶꺷꺸꺹꺺꺻꺿껁껂껃껅껆껇껈껉껊껋껎껒껓껔껕껖껗껚껛껝껞껟껠껡껢껣껤껥�".split(""); for (j = 0; j != D[131].length; ++j) if (D[131][j].charCodeAt(0) !== 65533) { e[D[131][j]] = 33536 + j; d[33536 + j] = D[131][j] } D[132] = "�����������������������������������������������������������������껦껧껩껪껬껮껯껰껱껲껳껵껶껷껹껺껻껽껾껿꼀꼁꼂꼃꼄꼅������꼆꼉꼊꼋꼌꼎꼏꼑꼒꼓꼔꼕꼖꼗꼘꼙꼚꼛꼜꼝꼞꼟꼠꼡꼢꼣������꼤꼥꼦꼧꼨꼩꼪꼫꼮꼯꼱꼳꼵꼶꼷꼸꼹꼺꼻꼾꽀꽄꽅꽆꽇꽊꽋꽌꽍꽎꽏꽑꽒꽓꽔꽕꽖꽗꽘꽙꽚꽛꽞꽟꽠꽡꽢꽣꽦꽧꽨꽩꽪꽫꽬꽭꽮꽯꽰꽱꽲꽳꽴꽵꽶꽷꽸꽺꽻꽼꽽꽾꽿꾁꾂꾃꾅꾆꾇꾉꾊꾋꾌꾍꾎꾏꾒꾓꾔꾖꾗꾘꾙꾚꾛꾝꾞꾟꾠꾡꾢꾣꾤꾥꾦꾧꾨꾩꾪꾫꾬꾭꾮꾯꾰꾱꾲꾳꾴꾵꾶꾷꾺꾻꾽꾾�".split(""); for (j = 0; j != D[132].length; ++j) if (D[132][j].charCodeAt(0) !== 65533) { e[D[132][j]] = 33792 + j; d[33792 + j] = D[132][j] } D[133] = "�����������������������������������������������������������������꾿꿁꿂꿃꿄꿅꿆꿊꿌꿏꿐꿑꿒꿓꿕꿖꿗꿘꿙꿚꿛꿝꿞꿟꿠꿡������꿢꿣꿤꿥꿦꿧꿪꿫꿬꿭꿮꿯꿲꿳꿵꿶꿷꿹꿺꿻꿼꿽꿾꿿뀂뀃������뀅뀆뀇뀈뀉뀊뀋뀍뀎뀏뀑뀒뀓뀕뀖뀗뀘뀙뀚뀛뀞뀟뀠뀡뀢뀣뀤뀥뀦뀧뀩뀪뀫뀬뀭뀮뀯뀰뀱뀲뀳뀴뀵뀶뀷뀸뀹뀺뀻뀼뀽뀾뀿끀끁끂끃끆끇끉끋끍끏끐끑끒끖끘끚끛끜끞끟끠끡끢끣끤끥끦끧끨끩끪끫끬끭끮끯끰끱끲끳끴끵끶끷끸끹끺끻끾끿낁낂낃낅낆낇낈낉낊낋낎낐낒낓낔낕낖낗낛낝낞낣낤�".split(""); for (j = 0; j != D[133].length; ++j) if (D[133][j].charCodeAt(0) !== 65533) { e[D[133][j]] = 34048 + j; d[34048 + j] = D[133][j] } D[134] = "�����������������������������������������������������������������낥낦낧낪낰낲낶낷낹낺낻낽낾낿냀냁냂냃냆냊냋냌냍냎냏냒������냓냕냖냗냙냚냛냜냝냞냟냡냢냣냤냦냧냨냩냪냫냬냭냮냯냰������냱냲냳냴냵냶냷냸냹냺냻냼냽냾냿넀넁넂넃넄넅넆넇넊넍넎넏넑넔넕넖넗넚넞넟넠넡넢넦넧넩넪넫넭넮넯넰넱넲넳넶넺넻넼넽넾넿녂녃녅녆녇녉녊녋녌녍녎녏녒녓녖녗녙녚녛녝녞녟녡녢녣녤녥녦녧녨녩녪녫녬녭녮녯녰녱녲녳녴녵녶녷녺녻녽녾녿놁놃놄놅놆놇놊놌놎놏놐놑놕놖놗놙놚놛놝�".split(""); for (j = 0; j != D[134].length; ++j) if (D[134][j].charCodeAt(0) !== 65533) { e[D[134][j]] = 34304 + j; d[34304 + j] = D[134][j] } D[135] = "�����������������������������������������������������������������놞놟놠놡놢놣놤놥놦놧놩놪놫놬놭놮놯놰놱놲놳놴놵놶놷놸������놹놺놻놼놽놾놿뇀뇁뇂뇃뇄뇅뇆뇇뇈뇉뇊뇋뇍뇎뇏뇑뇒뇓뇕������뇖뇗뇘뇙뇚뇛뇞뇠뇡뇢뇣뇤뇥뇦뇧뇪뇫뇭뇮뇯뇱뇲뇳뇴뇵뇶뇷뇸뇺뇼뇾뇿눀눁눂눃눆눇눉눊눍눎눏눐눑눒눓눖눘눚눛눜눝눞눟눡눢눣눤눥눦눧눨눩눪눫눬눭눮눯눰눱눲눳눵눶눷눸눹눺눻눽눾눿뉀뉁뉂뉃뉄뉅뉆뉇뉈뉉뉊뉋뉌뉍뉎뉏뉐뉑뉒뉓뉔뉕뉖뉗뉙뉚뉛뉝뉞뉟뉡뉢뉣뉤뉥뉦뉧뉪뉫뉬뉭뉮�".split(""); for (j = 0; j != D[135].length; ++j) if (D[135][j].charCodeAt(0) !== 65533) { e[D[135][j]] = 34560 + j; d[34560 + j] = D[135][j] } D[136] = "�����������������������������������������������������������������뉯뉰뉱뉲뉳뉶뉷뉸뉹뉺뉻뉽뉾뉿늀늁늂늃늆늇늈늊늋늌늍늎������늏늒늓늕늖늗늛늜늝늞늟늢늤늧늨늩늫늭늮늯늱늲늳늵늶늷������늸늹늺늻늼늽늾늿닀닁닂닃닄닅닆닇닊닋닍닎닏닑닓닔닕닖닗닚닜닞닟닠닡닣닧닩닪닰닱닲닶닼닽닾댂댃댅댆댇댉댊댋댌댍댎댏댒댖댗댘댙댚댛댝댞댟댠댡댢댣댤댥댦댧댨댩댪댫댬댭댮댯댰댱댲댳댴댵댶댷댸댹댺댻댼댽댾댿덀덁덂덃덄덅덆덇덈덉덊덋덌덍덎덏덐덑덒덓덗덙덚덝덠덡덢덣�".split(""); for (j = 0; j != D[136].length; ++j) if (D[136][j].charCodeAt(0) !== 65533) { e[D[136][j]] = 34816 + j; d[34816 + j] = D[136][j] } D[137] = "�����������������������������������������������������������������덦덨덪덬덭덯덲덳덵덶덷덹덺덻덼덽덾덿뎂뎆뎇뎈뎉뎊뎋뎍������뎎뎏뎑뎒뎓뎕뎖뎗뎘뎙뎚뎛뎜뎝뎞뎟뎢뎣뎤뎥뎦뎧뎩뎪뎫뎭������뎮뎯뎰뎱뎲뎳뎴뎵뎶뎷뎸뎹뎺뎻뎼뎽뎾뎿돀돁돂돃돆돇돉돊돍돏돑돒돓돖돘돚돜돞돟돡돢돣돥돦돧돩돪돫돬돭돮돯돰돱돲돳돴돵돶돷돸돹돺돻돽돾돿됀됁됂됃됄됅됆됇됈됉됊됋됌됍됎됏됑됒됓됔됕됖됗됙됚됛됝됞됟됡됢됣됤됥됦됧됪됬됭됮됯됰됱됲됳됵됶됷됸됹됺됻됼됽됾됿둀둁둂둃둄�".split(""); for (j = 0; j != D[137].length; ++j) if (D[137][j].charCodeAt(0) !== 65533) { e[D[137][j]] = 35072 + j; d[35072 + j] = D[137][j] } D[138] = "�����������������������������������������������������������������둅둆둇둈둉둊둋둌둍둎둏둒둓둕둖둗둙둚둛둜둝둞둟둢둤둦������둧둨둩둪둫둭둮둯둰둱둲둳둴둵둶둷둸둹둺둻둼둽둾둿뒁뒂������뒃뒄뒅뒆뒇뒉뒊뒋뒌뒍뒎뒏뒐뒑뒒뒓뒔뒕뒖뒗뒘뒙뒚뒛뒜뒞뒟뒠뒡뒢뒣뒥뒦뒧뒩뒪뒫뒭뒮뒯뒰뒱뒲뒳뒴뒶뒸뒺뒻뒼뒽뒾뒿듁듂듃듅듆듇듉듊듋듌듍듎듏듑듒듓듔듖듗듘듙듚듛듞듟듡듢듥듧듨듩듪듫듮듰듲듳듴듵듶듷듹듺듻듼듽듾듿딀딁딂딃딄딅딆딇딈딉딊딋딌딍딎딏딐딑딒딓딖딗딙딚딝�".split(""); for (j = 0; j != D[138].length; ++j) if (D[138][j].charCodeAt(0) !== 65533) { e[D[138][j]] = 35328 + j; d[35328 + j] = D[138][j] } D[139] = "�����������������������������������������������������������������딞딟딠딡딢딣딦딫딬딭딮딯딲딳딵딶딷딹딺딻딼딽딾딿땂땆������땇땈땉땊땎땏땑땒땓땕땖땗땘땙땚땛땞땢땣땤땥땦땧땨땩땪������땫땬땭땮땯땰땱땲땳땴땵땶땷땸땹땺땻땼땽땾땿떀떁떂떃떄떅떆떇떈떉떊떋떌떍떎떏떐떑떒떓떔떕떖떗떘떙떚떛떜떝떞떟떢떣떥떦떧떩떬떭떮떯떲떶떷떸떹떺떾떿뗁뗂뗃뗅뗆뗇뗈뗉뗊뗋뗎뗒뗓뗔뗕뗖뗗뗙뗚뗛뗜뗝뗞뗟뗠뗡뗢뗣뗤뗥뗦뗧뗨뗩뗪뗫뗭뗮뗯뗰뗱뗲뗳뗴뗵뗶뗷뗸뗹뗺뗻뗼뗽뗾뗿�".split(""); for (j = 0; j != D[139].length; ++j) if (D[139][j].charCodeAt(0) !== 65533) { e[D[139][j]] = 35584 + j; d[35584 + j] = D[139][j] } D[140] = "�����������������������������������������������������������������똀똁똂똃똄똅똆똇똈똉똊똋똌똍똎똏똒똓똕똖똗똙똚똛똜똝������똞똟똠똡똢똣똤똦똧똨똩똪똫똭똮똯똰똱똲똳똵똶똷똸똹똺������똻똼똽똾똿뙀뙁뙂뙃뙄뙅뙆뙇뙉뙊뙋뙌뙍뙎뙏뙐뙑뙒뙓뙔뙕뙖뙗뙘뙙뙚뙛뙜뙝뙞뙟뙠뙡뙢뙣뙥뙦뙧뙩뙪뙫뙬뙭뙮뙯뙰뙱뙲뙳뙴뙵뙶뙷뙸뙹뙺뙻뙼뙽뙾뙿뚀뚁뚂뚃뚄뚅뚆뚇뚈뚉뚊뚋뚌뚍뚎뚏뚐뚑뚒뚓뚔뚕뚖뚗뚘뚙뚚뚛뚞뚟뚡뚢뚣뚥뚦뚧뚨뚩뚪뚭뚮뚯뚰뚲뚳뚴뚵뚶뚷뚸뚹뚺뚻뚼뚽뚾뚿뛀뛁뛂�".split(""); for (j = 0; j != D[140].length; ++j) if (D[140][j].charCodeAt(0) !== 65533) { e[D[140][j]] = 35840 + j; d[35840 + j] = D[140][j] } D[141] = "�����������������������������������������������������������������뛃뛄뛅뛆뛇뛈뛉뛊뛋뛌뛍뛎뛏뛐뛑뛒뛓뛕뛖뛗뛘뛙뛚뛛뛜뛝������뛞뛟뛠뛡뛢뛣뛤뛥뛦뛧뛨뛩뛪뛫뛬뛭뛮뛯뛱뛲뛳뛵뛶뛷뛹뛺������뛻뛼뛽뛾뛿뜂뜃뜄뜆뜇뜈뜉뜊뜋뜌뜍뜎뜏뜐뜑뜒뜓뜔뜕뜖뜗뜘뜙뜚뜛뜜뜝뜞뜟뜠뜡뜢뜣뜤뜥뜦뜧뜪뜫뜭뜮뜱뜲뜳뜴뜵뜶뜷뜺뜼뜽뜾뜿띀띁띂띃띅띆띇띉띊띋띍띎띏띐띑띒띓띖띗띘띙띚띛띜띝띞띟띡띢띣띥띦띧띩띪띫띬띭띮띯띲띴띶띷띸띹띺띻띾띿랁랂랃랅랆랇랈랉랊랋랎랓랔랕랚랛랝랞�".split(""); for (j = 0; j != D[141].length; ++j) if (D[141][j].charCodeAt(0) !== 65533) { e[D[141][j]] = 36096 + j; d[36096 + j] = D[141][j] } D[142] = "�����������������������������������������������������������������랟랡랢랣랤랥랦랧랪랮랯랰랱랲랳랶랷랹랺랻랼랽랾랿럀럁������럂럃럄럅럆럈럊럋럌럍럎럏럐럑럒럓럔럕럖럗럘럙럚럛럜럝������럞럟럠럡럢럣럤럥럦럧럨럩럪럫럮럯럱럲럳럵럶럷럸럹럺럻럾렂렃렄렅렆렊렋렍렎렏렑렒렓렔렕렖렗렚렜렞렟렠렡렢렣렦렧렩렪렫렭렮렯렰렱렲렳렶렺렻렼렽렾렿롁롂롃롅롆롇롈롉롊롋롌롍롎롏롐롒롔롕롖롗롘롙롚롛롞롟롡롢롣롥롦롧롨롩롪롫롮롰롲롳롴롵롶롷롹롺롻롽롾롿뢀뢁뢂뢃뢄�".split(""); for (j = 0; j != D[142].length; ++j) if (D[142][j].charCodeAt(0) !== 65533) { e[D[142][j]] = 36352 + j; d[36352 + j] = D[142][j] } D[143] = "�����������������������������������������������������������������뢅뢆뢇뢈뢉뢊뢋뢌뢎뢏뢐뢑뢒뢓뢔뢕뢖뢗뢘뢙뢚뢛뢜뢝뢞뢟������뢠뢡뢢뢣뢤뢥뢦뢧뢩뢪뢫뢬뢭뢮뢯뢱뢲뢳뢵뢶뢷뢹뢺뢻뢼뢽������뢾뢿룂룄룆룇룈룉룊룋룍룎룏룑룒룓룕룖룗룘룙룚룛룜룞룠룢룣룤룥룦룧룪룫룭룮룯룱룲룳룴룵룶룷룺룼룾룿뤀뤁뤂뤃뤅뤆뤇뤈뤉뤊뤋뤌뤍뤎뤏뤐뤑뤒뤓뤔뤕뤖뤗뤙뤚뤛뤜뤝뤞뤟뤡뤢뤣뤤뤥뤦뤧뤨뤩뤪뤫뤬뤭뤮뤯뤰뤱뤲뤳뤴뤵뤶뤷뤸뤹뤺뤻뤾뤿륁륂륃륅륆륇륈륉륊륋륍륎륐륒륓륔륕륖륗�".split(""); for (j = 0; j != D[143].length; ++j) if (D[143][j].charCodeAt(0) !== 65533) { e[D[143][j]] = 36608 + j; d[36608 + j] = D[143][j] } D[144] = "�����������������������������������������������������������������륚륛륝륞륟륡륢륣륤륥륦륧륪륬륮륯륰륱륲륳륶륷륹륺륻륽������륾륿릀릁릂릃릆릈릋릌릏릐릑릒릓릔릕릖릗릘릙릚릛릜릝릞������릟릠릡릢릣릤릥릦릧릨릩릪릫릮릯릱릲릳릵릶릷릸릹릺릻릾맀맂맃맄맅맆맇맊맋맍맓맔맕맖맗맚맜맟맠맢맦맧맩맪맫맭맮맯맰맱맲맳맶맻맼맽맾맿먂먃먄먅먆먇먉먊먋먌먍먎먏먐먑먒먓먔먖먗먘먙먚먛먜먝먞먟먠먡먢먣먤먥먦먧먨먩먪먫먬먭먮먯먰먱먲먳먴먵먶먷먺먻먽먾먿멁멃멄멅멆�".split(""); for (j = 0; j != D[144].length; ++j) if (D[144][j].charCodeAt(0) !== 65533) { e[D[144][j]] = 36864 + j; d[36864 + j] = D[144][j] } D[145] = "�����������������������������������������������������������������멇멊멌멏멐멑멒멖멗멙멚멛멝멞멟멠멡멢멣멦멪멫멬멭멮멯������멲멳멵멶멷멹멺멻멼멽멾멿몀몁몂몆몈몉몊몋몍몎몏몐몑몒������몓몔몕몖몗몘몙몚몛몜몝몞몟몠몡몢몣몤몥몦몧몪몭몮몯몱몳몴몵몶몷몺몼몾몿뫀뫁뫂뫃뫅뫆뫇뫉뫊뫋뫌뫍뫎뫏뫐뫑뫒뫓뫔뫕뫖뫗뫚뫛뫜뫝뫞뫟뫠뫡뫢뫣뫤뫥뫦뫧뫨뫩뫪뫫뫬뫭뫮뫯뫰뫱뫲뫳뫴뫵뫶뫷뫸뫹뫺뫻뫽뫾뫿묁묂묃묅묆묇묈묉묊묋묌묎묐묒묓묔묕묖묗묙묚묛묝묞묟묡묢묣묤묥묦묧�".split(""); for (j = 0; j != D[145].length; ++j) if (D[145][j].charCodeAt(0) !== 65533) { e[D[145][j]] = 37120 + j; d[37120 + j] = D[145][j] } D[146] = "�����������������������������������������������������������������묨묪묬묭묮묯묰묱묲묳묷묹묺묿뭀뭁뭂뭃뭆뭈뭊뭋뭌뭎뭑뭒������뭓뭕뭖뭗뭙뭚뭛뭜뭝뭞뭟뭠뭢뭤뭥뭦뭧뭨뭩뭪뭫뭭뭮뭯뭰뭱������뭲뭳뭴뭵뭶뭷뭸뭹뭺뭻뭼뭽뭾뭿뮀뮁뮂뮃뮄뮅뮆뮇뮉뮊뮋뮍뮎뮏뮑뮒뮓뮔뮕뮖뮗뮘뮙뮚뮛뮜뮝뮞뮟뮠뮡뮢뮣뮥뮦뮧뮩뮪뮫뮭뮮뮯뮰뮱뮲뮳뮵뮶뮸뮹뮺뮻뮼뮽뮾뮿믁믂믃믅믆믇믉믊믋믌믍믎믏믑믒믔믕믖믗믘믙믚믛믜믝믞믟믠믡믢믣믤믥믦믧믨믩믪믫믬믭믮믯믰믱믲믳믴믵믶믷믺믻믽믾밁�".split(""); for (j = 0; j != D[146].length; ++j) if (D[146][j].charCodeAt(0) !== 65533) { e[D[146][j]] = 37376 + j; d[37376 + j] = D[146][j] } D[147] = "�����������������������������������������������������������������밃밄밅밆밇밊밎밐밒밓밙밚밠밡밢밣밦밨밪밫밬밮밯밲밳밵������밶밷밹밺밻밼밽밾밿뱂뱆뱇뱈뱊뱋뱎뱏뱑뱒뱓뱔뱕뱖뱗뱘뱙������뱚뱛뱜뱞뱟뱠뱡뱢뱣뱤뱥뱦뱧뱨뱩뱪뱫뱬뱭뱮뱯뱰뱱뱲뱳뱴뱵뱶뱷뱸뱹뱺뱻뱼뱽뱾뱿벀벁벂벃벆벇벉벊벍벏벐벑벒벓벖벘벛벜벝벞벟벢벣벥벦벩벪벫벬벭벮벯벲벶벷벸벹벺벻벾벿볁볂볃볅볆볇볈볉볊볋볌볎볒볓볔볖볗볙볚볛볝볞볟볠볡볢볣볤볥볦볧볨볩볪볫볬볭볮볯볰볱볲볳볷볹볺볻볽�".split(""); for (j = 0; j != D[147].length; ++j) if (D[147][j].charCodeAt(0) !== 65533) { e[D[147][j]] = 37632 + j; d[37632 + j] = D[147][j] } D[148] = "�����������������������������������������������������������������볾볿봀봁봂봃봆봈봊봋봌봍봎봏봑봒봓봕봖봗봘봙봚봛봜봝������봞봟봠봡봢봣봥봦봧봨봩봪봫봭봮봯봰봱봲봳봴봵봶봷봸봹������봺봻봼봽봾봿뵁뵂뵃뵄뵅뵆뵇뵊뵋뵍뵎뵏뵑뵒뵓뵔뵕뵖뵗뵚뵛뵜뵝뵞뵟뵠뵡뵢뵣뵥뵦뵧뵩뵪뵫뵬뵭뵮뵯뵰뵱뵲뵳뵴뵵뵶뵷뵸뵹뵺뵻뵼뵽뵾뵿붂붃붅붆붋붌붍붎붏붒붔붖붗붘붛붝붞붟붠붡붢붣붥붦붧붨붩붪붫붬붭붮붯붱붲붳붴붵붶붷붹붺붻붼붽붾붿뷀뷁뷂뷃뷄뷅뷆뷇뷈뷉뷊뷋뷌뷍뷎뷏뷐뷑�".split(""); for (j = 0; j != D[148].length; ++j) if (D[148][j].charCodeAt(0) !== 65533) { e[D[148][j]] = 37888 + j; d[37888 + j] = D[148][j] } D[149] = "�����������������������������������������������������������������뷒뷓뷖뷗뷙뷚뷛뷝뷞뷟뷠뷡뷢뷣뷤뷥뷦뷧뷨뷪뷫뷬뷭뷮뷯뷱������뷲뷳뷵뷶뷷뷹뷺뷻뷼뷽뷾뷿븁븂븄븆븇븈븉븊븋븎븏븑븒븓������븕븖븗븘븙븚븛븞븠븡븢븣븤븥븦븧븨븩븪븫븬븭븮븯븰븱븲븳븴븵븶븷븸븹븺븻븼븽븾븿빀빁빂빃빆빇빉빊빋빍빏빐빑빒빓빖빘빜빝빞빟빢빣빥빦빧빩빫빬빭빮빯빲빶빷빸빹빺빾빿뺁뺂뺃뺅뺆뺇뺈뺉뺊뺋뺎뺒뺓뺔뺕뺖뺗뺚뺛뺜뺝뺞뺟뺠뺡뺢뺣뺤뺥뺦뺧뺩뺪뺫뺬뺭뺮뺯뺰뺱뺲뺳뺴뺵뺶뺷�".split(""); for (j = 0; j != D[149].length; ++j) if (D[149][j].charCodeAt(0) !== 65533) { e[D[149][j]] = 38144 + j; d[38144 + j] = D[149][j] } D[150] = "�����������������������������������������������������������������뺸뺹뺺뺻뺼뺽뺾뺿뻀뻁뻂뻃뻄뻅뻆뻇뻈뻉뻊뻋뻌뻍뻎뻏뻒뻓������뻕뻖뻙뻚뻛뻜뻝뻞뻟뻡뻢뻦뻧뻨뻩뻪뻫뻭뻮뻯뻰뻱뻲뻳뻴뻵������뻶뻷뻸뻹뻺뻻뻼뻽뻾뻿뼀뼂뼃뼄뼅뼆뼇뼊뼋뼌뼍뼎뼏뼐뼑뼒뼓뼔뼕뼖뼗뼚뼞뼟뼠뼡뼢뼣뼤뼥뼦뼧뼨뼩뼪뼫뼬뼭뼮뼯뼰뼱뼲뼳뼴뼵뼶뼷뼸뼹뼺뼻뼼뼽뼾뼿뽂뽃뽅뽆뽇뽉뽊뽋뽌뽍뽎뽏뽒뽓뽔뽖뽗뽘뽙뽚뽛뽜뽝뽞뽟뽠뽡뽢뽣뽤뽥뽦뽧뽨뽩뽪뽫뽬뽭뽮뽯뽰뽱뽲뽳뽴뽵뽶뽷뽸뽹뽺뽻뽼뽽뽾뽿뾀뾁뾂�".split(""); for (j = 0; j != D[150].length; ++j) if (D[150][j].charCodeAt(0) !== 65533) { e[D[150][j]] = 38400 + j; d[38400 + j] = D[150][j] } D[151] = "�����������������������������������������������������������������뾃뾄뾅뾆뾇뾈뾉뾊뾋뾌뾍뾎뾏뾐뾑뾒뾓뾕뾖뾗뾘뾙뾚뾛뾜뾝������뾞뾟뾠뾡뾢뾣뾤뾥뾦뾧뾨뾩뾪뾫뾬뾭뾮뾯뾱뾲뾳뾴뾵뾶뾷뾸������뾹뾺뾻뾼뾽뾾뾿뿀뿁뿂뿃뿄뿆뿇뿈뿉뿊뿋뿎뿏뿑뿒뿓뿕뿖뿗뿘뿙뿚뿛뿝뿞뿠뿢뿣뿤뿥뿦뿧뿨뿩뿪뿫뿬뿭뿮뿯뿰뿱뿲뿳뿴뿵뿶뿷뿸뿹뿺뿻뿼뿽뿾뿿쀀쀁쀂쀃쀄쀅쀆쀇쀈쀉쀊쀋쀌쀍쀎쀏쀐쀑쀒쀓쀔쀕쀖쀗쀘쀙쀚쀛쀜쀝쀞쀟쀠쀡쀢쀣쀤쀥쀦쀧쀨쀩쀪쀫쀬쀭쀮쀯쀰쀱쀲쀳쀴쀵쀶쀷쀸쀹쀺쀻쀽쀾쀿�".split(""); for (j = 0; j != D[151].length; ++j) if (D[151][j].charCodeAt(0) !== 65533) { e[D[151][j]] = 38656 + j; d[38656 + j] = D[151][j] } D[152] = "�����������������������������������������������������������������쁀쁁쁂쁃쁄쁅쁆쁇쁈쁉쁊쁋쁌쁍쁎쁏쁐쁒쁓쁔쁕쁖쁗쁙쁚쁛������쁝쁞쁟쁡쁢쁣쁤쁥쁦쁧쁪쁫쁬쁭쁮쁯쁰쁱쁲쁳쁴쁵쁶쁷쁸쁹������쁺쁻쁼쁽쁾쁿삀삁삂삃삄삅삆삇삈삉삊삋삌삍삎삏삒삓삕삖삗삙삚삛삜삝삞삟삢삤삦삧삨삩삪삫삮삱삲삷삸삹삺삻삾샂샃샄샆샇샊샋샍샎샏샑샒샓샔샕샖샗샚샞샟샠샡샢샣샦샧샩샪샫샭샮샯샰샱샲샳샶샸샺샻샼샽샾샿섁섂섃섅섆섇섉섊섋섌섍섎섏섑섒섓섔섖섗섘섙섚섛섡섢섥섨섩섪섫섮�".split(""); for (j = 0; j != D[152].length; ++j) if (D[152][j].charCodeAt(0) !== 65533) { e[D[152][j]] = 38912 + j; d[38912 + j] = D[152][j] } D[153] = "�����������������������������������������������������������������섲섳섴섵섷섺섻섽섾섿셁셂셃셄셅셆셇셊셎셏셐셑셒셓셖셗������셙셚셛셝셞셟셠셡셢셣셦셪셫셬셭셮셯셱셲셳셵셶셷셹셺셻������셼셽셾셿솀솁솂솃솄솆솇솈솉솊솋솏솑솒솓솕솗솘솙솚솛솞솠솢솣솤솦솧솪솫솭솮솯솱솲솳솴솵솶솷솸솹솺솻솼솾솿쇀쇁쇂쇃쇅쇆쇇쇉쇊쇋쇍쇎쇏쇐쇑쇒쇓쇕쇖쇙쇚쇛쇜쇝쇞쇟쇡쇢쇣쇥쇦쇧쇩쇪쇫쇬쇭쇮쇯쇲쇴쇵쇶쇷쇸쇹쇺쇻쇾쇿숁숂숃숅숆숇숈숉숊숋숎숐숒숓숔숕숖숗숚숛숝숞숡숢숣�".split(""); for (j = 0; j != D[153].length; ++j) if (D[153][j].charCodeAt(0) !== 65533) { e[D[153][j]] = 39168 + j; d[39168 + j] = D[153][j] } D[154] = "�����������������������������������������������������������������숤숥숦숧숪숬숮숰숳숵숶숷숸숹숺숻숼숽숾숿쉀쉁쉂쉃쉄쉅������쉆쉇쉉쉊쉋쉌쉍쉎쉏쉒쉓쉕쉖쉗쉙쉚쉛쉜쉝쉞쉟쉡쉢쉣쉤쉦������쉧쉨쉩쉪쉫쉮쉯쉱쉲쉳쉵쉶쉷쉸쉹쉺쉻쉾슀슂슃슄슅슆슇슊슋슌슍슎슏슑슒슓슔슕슖슗슙슚슜슞슟슠슡슢슣슦슧슩슪슫슮슯슰슱슲슳슶슸슺슻슼슽슾슿싀싁싂싃싄싅싆싇싈싉싊싋싌싍싎싏싐싑싒싓싔싕싖싗싘싙싚싛싞싟싡싢싥싦싧싨싩싪싮싰싲싳싴싵싷싺싽싾싿쌁쌂쌃쌄쌅쌆쌇쌊쌋쌎쌏�".split("");
    for (j = 0; j != D[154].length; ++j) if (D[154][j].charCodeAt(0) !== 65533) { e[D[154][j]] = 39424 + j; d[39424 + j] = D[154][j] } D[155] = "�����������������������������������������������������������������쌐쌑쌒쌖쌗쌙쌚쌛쌝쌞쌟쌠쌡쌢쌣쌦쌧쌪쌫쌬쌭쌮쌯쌰쌱쌲������쌳쌴쌵쌶쌷쌸쌹쌺쌻쌼쌽쌾쌿썀썁썂썃썄썆썇썈썉썊썋썌썍������썎썏썐썑썒썓썔썕썖썗썘썙썚썛썜썝썞썟썠썡썢썣썤썥썦썧썪썫썭썮썯썱썳썴썵썶썷썺썻썾썿쎀쎁쎂쎃쎅쎆쎇쎉쎊쎋쎍쎎쎏쎐쎑쎒쎓쎔쎕쎖쎗쎘쎙쎚쎛쎜쎝쎞쎟쎠쎡쎢쎣쎤쎥쎦쎧쎨쎩쎪쎫쎬쎭쎮쎯쎰쎱쎲쎳쎴쎵쎶쎷쎸쎹쎺쎻쎼쎽쎾쎿쏁쏂쏃쏄쏅쏆쏇쏈쏉쏊쏋쏌쏍쏎쏏쏐쏑쏒쏓쏔쏕쏖쏗쏚�".split(""); for (j = 0; j != D[155].length; ++j) if (D[155][j].charCodeAt(0) !== 65533) { e[D[155][j]] = 39680 + j; d[39680 + j] = D[155][j] } D[156] = "�����������������������������������������������������������������쏛쏝쏞쏡쏣쏤쏥쏦쏧쏪쏫쏬쏮쏯쏰쏱쏲쏳쏶쏷쏹쏺쏻쏼쏽쏾������쏿쐀쐁쐂쐃쐄쐅쐆쐇쐉쐊쐋쐌쐍쐎쐏쐑쐒쐓쐔쐕쐖쐗쐘쐙쐚������쐛쐜쐝쐞쐟쐠쐡쐢쐣쐥쐦쐧쐨쐩쐪쐫쐭쐮쐯쐱쐲쐳쐵쐶쐷쐸쐹쐺쐻쐾쐿쑀쑁쑂쑃쑄쑅쑆쑇쑉쑊쑋쑌쑍쑎쑏쑐쑑쑒쑓쑔쑕쑖쑗쑘쑙쑚쑛쑜쑝쑞쑟쑠쑡쑢쑣쑦쑧쑩쑪쑫쑭쑮쑯쑰쑱쑲쑳쑶쑷쑸쑺쑻쑼쑽쑾쑿쒁쒂쒃쒄쒅쒆쒇쒈쒉쒊쒋쒌쒍쒎쒏쒐쒑쒒쒓쒕쒖쒗쒘쒙쒚쒛쒝쒞쒟쒠쒡쒢쒣쒤쒥쒦쒧쒨쒩�".split(""); for (j = 0; j != D[156].length; ++j) if (D[156][j].charCodeAt(0) !== 65533) { e[D[156][j]] = 39936 + j; d[39936 + j] = D[156][j] } D[157] = "�����������������������������������������������������������������쒪쒫쒬쒭쒮쒯쒰쒱쒲쒳쒴쒵쒶쒷쒹쒺쒻쒽쒾쒿쓀쓁쓂쓃쓄쓅������쓆쓇쓈쓉쓊쓋쓌쓍쓎쓏쓐쓑쓒쓓쓔쓕쓖쓗쓘쓙쓚쓛쓜쓝쓞쓟������쓠쓡쓢쓣쓤쓥쓦쓧쓨쓪쓫쓬쓭쓮쓯쓲쓳쓵쓶쓷쓹쓻쓼쓽쓾씂씃씄씅씆씇씈씉씊씋씍씎씏씑씒씓씕씖씗씘씙씚씛씝씞씟씠씡씢씣씤씥씦씧씪씫씭씮씯씱씲씳씴씵씶씷씺씼씾씿앀앁앂앃앆앇앋앏앐앑앒앖앚앛앜앟앢앣앥앦앧앩앪앫앬앭앮앯앲앶앷앸앹앺앻앾앿얁얂얃얅얆얈얉얊얋얎얐얒얓얔�".split(""); for (j = 0; j != D[157].length; ++j) if (D[157][j].charCodeAt(0) !== 65533) { e[D[157][j]] = 40192 + j; d[40192 + j] = D[157][j] } D[158] = "�����������������������������������������������������������������얖얙얚얛얝얞얟얡얢얣얤얥얦얧얨얪얫얬얭얮얯얰얱얲얳얶������얷얺얿엀엁엂엃엋엍엏엒엓엕엖엗엙엚엛엜엝엞엟엢엤엦엧������엨엩엪엫엯엱엲엳엵엸엹엺엻옂옃옄옉옊옋옍옎옏옑옒옓옔옕옖옗옚옝옞옟옠옡옢옣옦옧옩옪옫옯옱옲옶옸옺옼옽옾옿왂왃왅왆왇왉왊왋왌왍왎왏왒왖왗왘왙왚왛왞왟왡왢왣왤왥왦왧왨왩왪왫왭왮왰왲왳왴왵왶왷왺왻왽왾왿욁욂욃욄욅욆욇욊욌욎욏욐욑욒욓욖욗욙욚욛욝욞욟욠욡욢욣욦�".split(""); for (j = 0; j != D[158].length; ++j) if (D[158][j].charCodeAt(0) !== 65533) { e[D[158][j]] = 40448 + j; d[40448 + j] = D[158][j] } D[159] = "�����������������������������������������������������������������욨욪욫욬욭욮욯욲욳욵욶욷욻욼욽욾욿웂웄웆웇웈웉웊웋웎������웏웑웒웓웕웖웗웘웙웚웛웞웟웢웣웤웥웦웧웪웫웭웮웯웱웲������웳웴웵웶웷웺웻웼웾웿윀윁윂윃윆윇윉윊윋윍윎윏윐윑윒윓윖윘윚윛윜윝윞윟윢윣윥윦윧윩윪윫윬윭윮윯윲윴윶윸윹윺윻윾윿읁읂읃읅읆읇읈읉읋읎읐읙읚읛읝읞읟읡읢읣읤읥읦읧읩읪읬읭읮읯읰읱읲읳읶읷읹읺읻읿잀잁잂잆잋잌잍잏잒잓잕잙잛잜잝잞잟잢잧잨잩잪잫잮잯잱잲잳잵잶잷�".split(""); for (j = 0; j != D[159].length; ++j) if (D[159][j].charCodeAt(0) !== 65533) { e[D[159][j]] = 40704 + j; d[40704 + j] = D[159][j] } D[160] = "�����������������������������������������������������������������잸잹잺잻잾쟂쟃쟄쟅쟆쟇쟊쟋쟍쟏쟑쟒쟓쟔쟕쟖쟗쟙쟚쟛쟜������쟞쟟쟠쟡쟢쟣쟥쟦쟧쟩쟪쟫쟭쟮쟯쟰쟱쟲쟳쟴쟵쟶쟷쟸쟹쟺������쟻쟼쟽쟾쟿젂젃젅젆젇젉젋젌젍젎젏젒젔젗젘젙젚젛젞젟젡젢젣젥젦젧젨젩젪젫젮젰젲젳젴젵젶젷젹젺젻젽젾젿졁졂졃졄졅졆졇졊졋졎졏졐졑졒졓졕졖졗졘졙졚졛졜졝졞졟졠졡졢졣졤졥졦졧졨졩졪졫졬졭졮졯졲졳졵졶졷졹졻졼졽졾졿좂좄좈좉좊좎좏좐좑좒좓좕좖좗좘좙좚좛좜좞좠좢좣좤�".split(""); for (j = 0; j != D[160].length; ++j) if (D[160][j].charCodeAt(0) !== 65533) { e[D[160][j]] = 40960 + j; d[40960 + j] = D[160][j] } D[161] = "�����������������������������������������������������������������좥좦좧좩좪좫좬좭좮좯좰좱좲좳좴좵좶좷좸좹좺좻좾좿죀죁������죂죃죅죆죇죉죊죋죍죎죏죐죑죒죓죖죘죚죛죜죝죞죟죢죣죥������죦죧죨죩죪죫죬죭죮죯죰죱죲죳죴죶죷죸죹죺죻죾죿줁줂줃줇줈줉줊줋줎　、。·‥…¨〃­―∥＼∼‘’“”〔〕〈〉《》「」『』【】±×÷≠≤≥∞∴°′″℃Å￠￡￥♂♀∠⊥⌒∂∇≡≒§※☆★○●◎◇◆□■△▲▽▼→←↑↓↔〓≪≫√∽∝∵∫∬∈∋⊆⊇⊂⊃∪∩∧∨￢�".split(""); for (j = 0; j != D[161].length; ++j) if (D[161][j].charCodeAt(0) !== 65533) { e[D[161][j]] = 41216 + j; d[41216 + j] = D[161][j] } D[162] = "�����������������������������������������������������������������줐줒줓줔줕줖줗줙줚줛줜줝줞줟줠줡줢줣줤줥줦줧줨줩줪줫������줭줮줯줰줱줲줳줵줶줷줸줹줺줻줼줽줾줿쥀쥁쥂쥃쥄쥅쥆쥇������쥈쥉쥊쥋쥌쥍쥎쥏쥒쥓쥕쥖쥗쥙쥚쥛쥜쥝쥞쥟쥢쥤쥥쥦쥧쥨쥩쥪쥫쥭쥮쥯⇒⇔∀∃´～ˇ˘˝˚˙¸˛¡¿ː∮∑∏¤℉‰◁◀▷▶♤♠♡♥♧♣⊙◈▣◐◑▒▤▥▨▧▦▩♨☏☎☜☞¶†‡↕↗↙↖↘♭♩♪♬㉿㈜№㏇™㏂㏘℡€®������������������������".split(""); for (j = 0; j != D[162].length; ++j) if (D[162][j].charCodeAt(0) !== 65533) { e[D[162][j]] = 41472 + j; d[41472 + j] = D[162][j] } D[163] = "�����������������������������������������������������������������쥱쥲쥳쥵쥶쥷쥸쥹쥺쥻쥽쥾쥿즀즁즂즃즄즅즆즇즊즋즍즎즏������즑즒즓즔즕즖즗즚즜즞즟즠즡즢즣즤즥즦즧즨즩즪즫즬즭즮������즯즰즱즲즳즴즵즶즷즸즹즺즻즼즽즾즿짂짃짅짆짉짋짌짍짎짏짒짔짗짘짛！＂＃＄％＆＇（）＊＋，－．／０１２３４５６７８９：；＜＝＞？＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［￦］＾＿｀ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝￣�".split(""); for (j = 0; j != D[163].length; ++j) if (D[163][j].charCodeAt(0) !== 65533) { e[D[163][j]] = 41728 + j; d[41728 + j] = D[163][j] } D[164] = "�����������������������������������������������������������������짞짟짡짣짥짦짨짩짪짫짮짲짳짴짵짶짷짺짻짽짾짿쨁쨂쨃쨄������쨅쨆쨇쨊쨎쨏쨐쨑쨒쨓쨕쨖쨗쨙쨚쨛쨜쨝쨞쨟쨠쨡쨢쨣쨤쨥������쨦쨧쨨쨪쨫쨬쨭쨮쨯쨰쨱쨲쨳쨴쨵쨶쨷쨸쨹쨺쨻쨼쨽쨾쨿쩀쩁쩂쩃쩄쩅쩆ㄱㄲㄳㄴㄵㄶㄷㄸㄹㄺㄻㄼㄽㄾㄿㅀㅁㅂㅃㅄㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎㅏㅐㅑㅒㅓㅔㅕㅖㅗㅘㅙㅚㅛㅜㅝㅞㅟㅠㅡㅢㅣㅤㅥㅦㅧㅨㅩㅪㅫㅬㅭㅮㅯㅰㅱㅲㅳㅴㅵㅶㅷㅸㅹㅺㅻㅼㅽㅾㅿㆀㆁㆂㆃㆄㆅㆆㆇㆈㆉㆊㆋㆌㆍㆎ�".split(""); for (j = 0; j != D[164].length; ++j) if (D[164][j].charCodeAt(0) !== 65533) { e[D[164][j]] = 41984 + j; d[41984 + j] = D[164][j] } D[165] = "�����������������������������������������������������������������쩇쩈쩉쩊쩋쩎쩏쩑쩒쩓쩕쩖쩗쩘쩙쩚쩛쩞쩢쩣쩤쩥쩦쩧쩩쩪������쩫쩬쩭쩮쩯쩰쩱쩲쩳쩴쩵쩶쩷쩸쩹쩺쩻쩼쩾쩿쪀쪁쪂쪃쪅쪆������쪇쪈쪉쪊쪋쪌쪍쪎쪏쪐쪑쪒쪓쪔쪕쪖쪗쪙쪚쪛쪜쪝쪞쪟쪠쪡쪢쪣쪤쪥쪦쪧ⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹ�����ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩ�������ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ��������αβγδεζηθικλμνξοπρστυφχψω�������".split(""); for (j = 0; j != D[165].length; ++j) if (D[165][j].charCodeAt(0) !== 65533) { e[D[165][j]] = 42240 + j; d[42240 + j] = D[165][j] } D[166] = "�����������������������������������������������������������������쪨쪩쪪쪫쪬쪭쪮쪯쪰쪱쪲쪳쪴쪵쪶쪷쪸쪹쪺쪻쪾쪿쫁쫂쫃쫅������쫆쫇쫈쫉쫊쫋쫎쫐쫒쫔쫕쫖쫗쫚쫛쫜쫝쫞쫟쫡쫢쫣쫤쫥쫦쫧������쫨쫩쫪쫫쫭쫮쫯쫰쫱쫲쫳쫵쫶쫷쫸쫹쫺쫻쫼쫽쫾쫿쬀쬁쬂쬃쬄쬅쬆쬇쬉쬊─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂┒┑┚┙┖┕┎┍┞┟┡┢┦┧┩┪┭┮┱┲┵┶┹┺┽┾╀╁╃╄╅╆╇╈╉╊���������������������������".split(""); for (j = 0; j != D[166].length; ++j) if (D[166][j].charCodeAt(0) !== 65533) { e[D[166][j]] = 42496 + j; d[42496 + j] = D[166][j] } D[167] = "�����������������������������������������������������������������쬋쬌쬍쬎쬏쬑쬒쬓쬕쬖쬗쬙쬚쬛쬜쬝쬞쬟쬢쬣쬤쬥쬦쬧쬨쬩������쬪쬫쬬쬭쬮쬯쬰쬱쬲쬳쬴쬵쬶쬷쬸쬹쬺쬻쬼쬽쬾쬿쭀쭂쭃쭄������쭅쭆쭇쭊쭋쭍쭎쭏쭑쭒쭓쭔쭕쭖쭗쭚쭛쭜쭞쭟쭠쭡쭢쭣쭥쭦쭧쭨쭩쭪쭫쭬㎕㎖㎗ℓ㎘㏄㎣㎤㎥㎦㎙㎚㎛㎜㎝㎞㎟㎠㎡㎢㏊㎍㎎㎏㏏㎈㎉㏈㎧㎨㎰㎱㎲㎳㎴㎵㎶㎷㎸㎹㎀㎁㎂㎃㎄㎺㎻㎼㎽㎾㎿㎐㎑㎒㎓㎔Ω㏀㏁㎊㎋㎌㏖㏅㎭㎮㎯㏛㎩㎪㎫㎬㏝㏐㏓㏃㏉㏜㏆����������������".split(""); for (j = 0; j != D[167].length; ++j) if (D[167][j].charCodeAt(0) !== 65533) { e[D[167][j]] = 42752 + j; d[42752 + j] = D[167][j] } D[168] = "�����������������������������������������������������������������쭭쭮쭯쭰쭱쭲쭳쭴쭵쭶쭷쭺쭻쭼쭽쭾쭿쮀쮁쮂쮃쮄쮅쮆쮇쮈������쮉쮊쮋쮌쮍쮎쮏쮐쮑쮒쮓쮔쮕쮖쮗쮘쮙쮚쮛쮝쮞쮟쮠쮡쮢쮣������쮤쮥쮦쮧쮨쮩쮪쮫쮬쮭쮮쮯쮰쮱쮲쮳쮴쮵쮶쮷쮹쮺쮻쮼쮽쮾쮿쯀쯁쯂쯃쯄ÆÐªĦ�Ĳ�ĿŁØŒºÞŦŊ�㉠㉡㉢㉣㉤㉥㉦㉧㉨㉩㉪㉫㉬㉭㉮㉯㉰㉱㉲㉳㉴㉵㉶㉷㉸㉹㉺㉻ⓐⓑⓒⓓⓔⓕⓖⓗⓘⓙⓚⓛⓜⓝⓞⓟⓠⓡⓢⓣⓤⓥⓦⓧⓨⓩ①②③④⑤⑥⑦⑧⑨⑩⑪⑫⑬⑭⑮½⅓⅔¼¾⅛⅜⅝⅞�".split(""); for (j = 0; j != D[168].length; ++j) if (D[168][j].charCodeAt(0) !== 65533) { e[D[168][j]] = 43008 + j; d[43008 + j] = D[168][j] } D[169] = "�����������������������������������������������������������������쯅쯆쯇쯈쯉쯊쯋쯌쯍쯎쯏쯐쯑쯒쯓쯕쯖쯗쯘쯙쯚쯛쯜쯝쯞쯟������쯠쯡쯢쯣쯥쯦쯨쯪쯫쯬쯭쯮쯯쯰쯱쯲쯳쯴쯵쯶쯷쯸쯹쯺쯻쯼������쯽쯾쯿찀찁찂찃찄찅찆찇찈찉찊찋찎찏찑찒찓찕찖찗찘찙찚찛찞찟찠찣찤æđðħıĳĸŀłøœßþŧŋŉ㈀㈁㈂㈃㈄㈅㈆㈇㈈㈉㈊㈋㈌㈍㈎㈏㈐㈑㈒㈓㈔㈕㈖㈗㈘㈙㈚㈛⒜⒝⒞⒟⒠⒡⒢⒣⒤⒥⒦⒧⒨⒩⒪⒫⒬⒭⒮⒯⒰⒱⒲⒳⒴⒵⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂¹²³⁴ⁿ₁₂₃₄�".split(""); for (j = 0; j != D[169].length; ++j) if (D[169][j].charCodeAt(0) !== 65533) { e[D[169][j]] = 43264 + j; d[43264 + j] = D[169][j] } D[170] = "�����������������������������������������������������������������찥찦찪찫찭찯찱찲찳찴찵찶찷찺찿챀챁챂챃챆챇챉챊챋챍챎������챏챐챑챒챓챖챚챛챜챝챞챟챡챢챣챥챧챩챪챫챬챭챮챯챱챲������챳챴챶챷챸챹챺챻챼챽챾챿첀첁첂첃첄첅첆첇첈첉첊첋첌첍첎첏첐첑첒첓ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをん������������".split(""); for (j = 0; j != D[170].length; ++j) if (D[170][j].charCodeAt(0) !== 65533) { e[D[170][j]] = 43520 + j; d[43520 + j] = D[170][j] } D[171] = "�����������������������������������������������������������������첔첕첖첗첚첛첝첞첟첡첢첣첤첥첦첧첪첮첯첰첱첲첳첶첷첹������첺첻첽첾첿쳀쳁쳂쳃쳆쳈쳊쳋쳌쳍쳎쳏쳑쳒쳓쳕쳖쳗쳘쳙쳚������쳛쳜쳝쳞쳟쳠쳡쳢쳣쳥쳦쳧쳨쳩쳪쳫쳭쳮쳯쳱쳲쳳쳴쳵쳶쳷쳸쳹쳺쳻쳼쳽ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶ���������".split(""); for (j = 0; j != D[171].length; ++j) if (D[171][j].charCodeAt(0) !== 65533) { e[D[171][j]] = 43776 + j; d[43776 + j] = D[171][j] } D[172] = "�����������������������������������������������������������������쳾쳿촀촂촃촄촅촆촇촊촋촍촎촏촑촒촓촔촕촖촗촚촜촞촟촠������촡촢촣촥촦촧촩촪촫촭촮촯촰촱촲촳촴촵촶촷촸촺촻촼촽촾������촿쵀쵁쵂쵃쵄쵅쵆쵇쵈쵉쵊쵋쵌쵍쵎쵏쵐쵑쵒쵓쵔쵕쵖쵗쵘쵙쵚쵛쵝쵞쵟АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ���������������абвгдеёжзийклмнопрстуфхцчшщъыьэюя��������������".split(""); for (j = 0; j != D[172].length; ++j) if (D[172][j].charCodeAt(0) !== 65533) { e[D[172][j]] = 44032 + j; d[44032 + j] = D[172][j] } D[173] = "�����������������������������������������������������������������쵡쵢쵣쵥쵦쵧쵨쵩쵪쵫쵮쵰쵲쵳쵴쵵쵶쵷쵹쵺쵻쵼쵽쵾쵿춀������춁춂춃춄춅춆춇춉춊춋춌춍춎춏춐춑춒춓춖춗춙춚춛춝춞춟������춠춡춢춣춦춨춪춫춬춭춮춯춱춲춳춴춵춶춷춸춹춺춻춼춽춾춿췀췁췂췃췅�����������������������������������������������������������������������������������������������".split(""); for (j = 0; j != D[173].length; ++j) if (D[173][j].charCodeAt(0) !== 65533) { e[D[173][j]] = 44288 + j; d[44288 + j] = D[173][j] } D[174] = "�����������������������������������������������������������������췆췇췈췉췊췋췍췎췏췑췒췓췔췕췖췗췘췙췚췛췜췝췞췟췠췡������췢췣췤췥췦췧췩췪췫췭췮췯췱췲췳췴췵췶췷췺췼췾췿츀츁츂������츃츅츆츇츉츊츋츍츎츏츐츑츒츓츕츖츗츘츚츛츜츝츞츟츢츣츥츦츧츩츪츫�����������������������������������������������������������������������������������������������".split(""); for (j = 0; j != D[174].length; ++j) if (D[174][j].charCodeAt(0) !== 65533) { e[D[174][j]] = 44544 + j; d[44544 + j] = D[174][j] } D[175] = "�����������������������������������������������������������������츬츭츮츯츲츴츶츷츸츹츺츻츼츽츾츿칀칁칂칃칄칅칆칇칈칉������칊칋칌칍칎칏칐칑칒칓칔칕칖칗칚칛칝칞칢칣칤칥칦칧칪칬������칮칯칰칱칲칳칶칷칹칺칻칽칾칿캀캁캂캃캆캈캊캋캌캍캎캏캒캓캕캖캗캙�����������������������������������������������������������������������������������������������".split(""); for (j = 0; j != D[175].length; ++j) if (D[175][j].charCodeAt(0) !== 65533) { e[D[175][j]] = 44800 + j; d[44800 + j] = D[175][j] } D[176] = "�����������������������������������������������������������������캚캛캜캝캞캟캢캦캧캨캩캪캫캮캯캰캱캲캳캴캵캶캷캸캹캺������캻캼캽캾캿컀컂컃컄컅컆컇컈컉컊컋컌컍컎컏컐컑컒컓컔컕������컖컗컘컙컚컛컜컝컞컟컠컡컢컣컦컧컩컪컭컮컯컰컱컲컳컶컺컻컼컽컾컿가각간갇갈갉갊감갑값갓갔강갖갗같갚갛개객갠갤갬갭갯갰갱갸갹갼걀걋걍걔걘걜거걱건걷걸걺검겁것겄겅겆겉겊겋게겐겔겜겝겟겠겡겨격겪견겯결겸겹겻겼경곁계곈곌곕곗고곡곤곧골곪곬곯곰곱곳공곶과곽관괄괆�".split(""); for (j = 0; j != D[176].length; ++j) if (D[176][j].charCodeAt(0) !== 65533) { e[D[176][j]] = 45056 + j; d[45056 + j] = D[176][j] } D[177] = "�����������������������������������������������������������������켂켃켅켆켇켉켊켋켌켍켎켏켒켔켖켗켘켙켚켛켝켞켟켡켢켣������켥켦켧켨켩켪켫켮켲켳켴켵켶켷켹켺켻켼켽켾켿콀콁콂콃콄������콅콆콇콈콉콊콋콌콍콎콏콐콑콒콓콖콗콙콚콛콝콞콟콠콡콢콣콦콨콪콫콬괌괍괏광괘괜괠괩괬괭괴괵괸괼굄굅굇굉교굔굘굡굣구국군굳굴굵굶굻굼굽굿궁궂궈궉권궐궜궝궤궷귀귁귄귈귐귑귓규균귤그극근귿글긁금급긋긍긔기긱긴긷길긺김깁깃깅깆깊까깍깎깐깔깖깜깝깟깠깡깥깨깩깬깰깸�".split(""); for (j = 0; j != D[177].length; ++j) if (D[177][j].charCodeAt(0) !== 65533) { e[D[177][j]] = 45312 + j; d[45312 + j] = D[177][j] } D[178] = "�����������������������������������������������������������������콭콮콯콲콳콵콶콷콹콺콻콼콽콾콿쾁쾂쾃쾄쾆쾇쾈쾉쾊쾋쾍������쾎쾏쾐쾑쾒쾓쾔쾕쾖쾗쾘쾙쾚쾛쾜쾝쾞쾟쾠쾢쾣쾤쾥쾦쾧쾩������쾪쾫쾬쾭쾮쾯쾱쾲쾳쾴쾵쾶쾷쾸쾹쾺쾻쾼쾽쾾쾿쿀쿁쿂쿃쿅쿆쿇쿈쿉쿊쿋깹깻깼깽꺄꺅꺌꺼꺽꺾껀껄껌껍껏껐껑께껙껜껨껫껭껴껸껼꼇꼈꼍꼐꼬꼭꼰꼲꼴꼼꼽꼿꽁꽂꽃꽈꽉꽐꽜꽝꽤꽥꽹꾀꾄꾈꾐꾑꾕꾜꾸꾹꾼꿀꿇꿈꿉꿋꿍꿎꿔꿜꿨꿩꿰꿱꿴꿸뀀뀁뀄뀌뀐뀔뀜뀝뀨끄끅끈끊끌끎끓끔끕끗끙�".split(""); for (j = 0; j != D[178].length; ++j) if (D[178][j].charCodeAt(0) !== 65533) { e[D[178][j]] = 45568 + j; d[45568 + j] = D[178][j] } D[179] = "�����������������������������������������������������������������쿌쿍쿎쿏쿐쿑쿒쿓쿔쿕쿖쿗쿘쿙쿚쿛쿜쿝쿞쿟쿢쿣쿥쿦쿧쿩������쿪쿫쿬쿭쿮쿯쿲쿴쿶쿷쿸쿹쿺쿻쿽쿾쿿퀁퀂퀃퀅퀆퀇퀈퀉퀊������퀋퀌퀍퀎퀏퀐퀒퀓퀔퀕퀖퀗퀙퀚퀛퀜퀝퀞퀟퀠퀡퀢퀣퀤퀥퀦퀧퀨퀩퀪퀫퀬끝끼끽낀낄낌낍낏낑나낙낚난낟날낡낢남납낫났낭낮낯낱낳내낵낸낼냄냅냇냈냉냐냑냔냘냠냥너넉넋넌널넒넓넘넙넛넜넝넣네넥넨넬넴넵넷넸넹녀녁년녈념녑녔녕녘녜녠노녹논놀놂놈놉놋농높놓놔놘놜놨뇌뇐뇔뇜뇝�".split(""); for (j = 0; j != D[179].length; ++j) if (D[179][j].charCodeAt(0) !== 65533) { e[D[179][j]] = 45824 + j; d[45824 + j] = D[179][j] } D[180] = "�����������������������������������������������������������������퀮퀯퀰퀱퀲퀳퀶퀷퀹퀺퀻퀽퀾퀿큀큁큂큃큆큈큊큋큌큍큎큏������큑큒큓큕큖큗큙큚큛큜큝큞큟큡큢큣큤큥큦큧큨큩큪큫큮큯������큱큲큳큵큶큷큸큹큺큻큾큿킀킂킃킄킅킆킇킈킉킊킋킌킍킎킏킐킑킒킓킔뇟뇨뇩뇬뇰뇹뇻뇽누눅눈눋눌눔눕눗눙눠눴눼뉘뉜뉠뉨뉩뉴뉵뉼늄늅늉느늑는늘늙늚늠늡늣능늦늪늬늰늴니닉닌닐닒님닙닛닝닢다닥닦단닫달닭닮닯닳담답닷닸당닺닻닿대댁댄댈댐댑댓댔댕댜더덕덖던덛덜덞덟덤덥�".split(""); for (j = 0; j != D[180].length; ++j) if (D[180][j].charCodeAt(0) !== 65533) { e[D[180][j]] = 46080 + j; d[46080 + j] = D[180][j] } D[181] = "�����������������������������������������������������������������킕킖킗킘킙킚킛킜킝킞킟킠킡킢킣킦킧킩킪킫킭킮킯킰킱킲������킳킶킸킺킻킼킽킾킿탂탃탅탆탇탊탋탌탍탎탏탒탖탗탘탙탚������탛탞탟탡탢탣탥탦탧탨탩탪탫탮탲탳탴탵탶탷탹탺탻탼탽탾탿턀턁턂턃턄덧덩덫덮데덱덴델뎀뎁뎃뎄뎅뎌뎐뎔뎠뎡뎨뎬도독돈돋돌돎돐돔돕돗동돛돝돠돤돨돼됐되된될됨됩됫됴두둑둔둘둠둡둣둥둬뒀뒈뒝뒤뒨뒬뒵뒷뒹듀듄듈듐듕드득든듣들듦듬듭듯등듸디딕딘딛딜딤딥딧딨딩딪따딱딴딸�".split(""); for (j = 0; j != D[181].length; ++j) if (D[181][j].charCodeAt(0) !== 65533) { e[D[181][j]] = 46336 + j; d[46336 + j] = D[181][j] } D[182] = "�����������������������������������������������������������������턅턆턇턈턉턊턋턌턎턏턐턑턒턓턔턕턖턗턘턙턚턛턜턝턞턟������턠턡턢턣턤턥턦턧턨턩턪턫턬턭턮턯턲턳턵턶턷턹턻턼턽턾������턿텂텆텇텈텉텊텋텎텏텑텒텓텕텖텗텘텙텚텛텞텠텢텣텤텥텦텧텩텪텫텭땀땁땃땄땅땋때땍땐땔땜땝땟땠땡떠떡떤떨떪떫떰떱떳떴떵떻떼떽뗀뗄뗌뗍뗏뗐뗑뗘뗬또똑똔똘똥똬똴뙈뙤뙨뚜뚝뚠뚤뚫뚬뚱뛔뛰뛴뛸뜀뜁뜅뜨뜩뜬뜯뜰뜸뜹뜻띄띈띌띔띕띠띤띨띰띱띳띵라락란랄람랍랏랐랑랒랖랗�".split(""); for (j = 0; j != D[182].length; ++j) if (D[182][j].charCodeAt(0) !== 65533) { e[D[182][j]] = 46592 + j; d[46592 + j] = D[182][j] } D[183] = "�����������������������������������������������������������������텮텯텰텱텲텳텴텵텶텷텸텹텺텻텽텾텿톀톁톂톃톅톆톇톉톊������톋톌톍톎톏톐톑톒톓톔톕톖톗톘톙톚톛톜톝톞톟톢톣톥톦톧������톩톪톫톬톭톮톯톲톴톶톷톸톹톻톽톾톿퇁퇂퇃퇄퇅퇆퇇퇈퇉퇊퇋퇌퇍퇎퇏래랙랜랠램랩랫랬랭랴략랸럇량러럭런럴럼럽럿렀렁렇레렉렌렐렘렙렛렝려력련렬렴렵렷렸령례롄롑롓로록론롤롬롭롯롱롸롼뢍뢨뢰뢴뢸룀룁룃룅료룐룔룝룟룡루룩룬룰룸룹룻룽뤄뤘뤠뤼뤽륀륄륌륏륑류륙륜률륨륩�".split(""); for (j = 0; j != D[183].length; ++j) if (D[183][j].charCodeAt(0) !== 65533) { e[D[183][j]] = 46848 + j; d[46848 + j] = D[183][j] } D[184] = "�����������������������������������������������������������������퇐퇑퇒퇓퇔퇕퇖퇗퇙퇚퇛퇜퇝퇞퇟퇠퇡퇢퇣퇤퇥퇦퇧퇨퇩퇪������퇫퇬퇭퇮퇯퇰퇱퇲퇳퇵퇶퇷퇹퇺퇻퇼퇽퇾퇿툀툁툂툃툄툅툆������툈툊툋툌툍툎툏툑툒툓툔툕툖툗툘툙툚툛툜툝툞툟툠툡툢툣툤툥툦툧툨툩륫륭르륵른를름릅릇릉릊릍릎리릭린릴림립릿링마막만많맏말맑맒맘맙맛망맞맡맣매맥맨맬맴맵맷맸맹맺먀먁먈먕머먹먼멀멂멈멉멋멍멎멓메멕멘멜멤멥멧멨멩며멱면멸몃몄명몇몌모목몫몬몰몲몸몹못몽뫄뫈뫘뫙뫼�".split(""); for (j = 0; j != D[184].length; ++j) if (D[184][j].charCodeAt(0) !== 65533) { e[D[184][j]] = 47104 + j; d[47104 + j] = D[184][j] } D[185] = "�����������������������������������������������������������������툪툫툮툯툱툲툳툵툶툷툸툹툺툻툾퉀퉂퉃퉄퉅퉆퉇퉉퉊퉋퉌������퉍퉎퉏퉐퉑퉒퉓퉔퉕퉖퉗퉘퉙퉚퉛퉝퉞퉟퉠퉡퉢퉣퉥퉦퉧퉨������퉩퉪퉫퉬퉭퉮퉯퉰퉱퉲퉳퉴퉵퉶퉷퉸퉹퉺퉻퉼퉽퉾퉿튂튃튅튆튇튉튊튋튌묀묄묍묏묑묘묜묠묩묫무묵묶문묻물묽묾뭄뭅뭇뭉뭍뭏뭐뭔뭘뭡뭣뭬뮈뮌뮐뮤뮨뮬뮴뮷므믄믈믐믓미믹민믿밀밂밈밉밋밌밍및밑바박밖밗반받발밝밞밟밤밥밧방밭배백밴밸뱀뱁뱃뱄뱅뱉뱌뱍뱐뱝버벅번벋벌벎범법벗�".split(""); for (j = 0; j != D[185].length; ++j) if (D[185][j].charCodeAt(0) !== 65533) { e[D[185][j]] = 47360 + j; d[47360 + j] = D[185][j] } D[186] = "�����������������������������������������������������������������튍튎튏튒튓튔튖튗튘튙튚튛튝튞튟튡튢튣튥튦튧튨튩튪튫튭������튮튯튰튲튳튴튵튶튷튺튻튽튾틁틃틄틅틆틇틊틌틍틎틏틐틑������틒틓틕틖틗틙틚틛틝틞틟틠틡틢틣틦틧틨틩틪틫틬틭틮틯틲틳틵틶틷틹틺벙벚베벡벤벧벨벰벱벳벴벵벼벽변별볍볏볐병볕볘볜보복볶본볼봄봅봇봉봐봔봤봬뵀뵈뵉뵌뵐뵘뵙뵤뵨부북분붇불붉붊붐붑붓붕붙붚붜붤붰붸뷔뷕뷘뷜뷩뷰뷴뷸븀븃븅브븍븐블븜븝븟비빅빈빌빎빔빕빗빙빚빛빠빡빤�".split(""); for (j = 0; j != D[186].length; ++j) if (D[186][j].charCodeAt(0) !== 65533) { e[D[186][j]] = 47616 + j; d[47616 + j] = D[186][j] } D[187] = "�����������������������������������������������������������������틻틼틽틾틿팂팄팆팇팈팉팊팋팏팑팒팓팕팗팘팙팚팛팞팢팣������팤팦팧팪팫팭팮팯팱팲팳팴팵팶팷팺팾팿퍀퍁퍂퍃퍆퍇퍈퍉������퍊퍋퍌퍍퍎퍏퍐퍑퍒퍓퍔퍕퍖퍗퍘퍙퍚퍛퍜퍝퍞퍟퍠퍡퍢퍣퍤퍥퍦퍧퍨퍩빨빪빰빱빳빴빵빻빼빽뺀뺄뺌뺍뺏뺐뺑뺘뺙뺨뻐뻑뻔뻗뻘뻠뻣뻤뻥뻬뼁뼈뼉뼘뼙뼛뼜뼝뽀뽁뽄뽈뽐뽑뽕뾔뾰뿅뿌뿍뿐뿔뿜뿟뿡쀼쁑쁘쁜쁠쁨쁩삐삑삔삘삠삡삣삥사삭삯산삳살삵삶삼삽삿샀상샅새색샌샐샘샙샛샜생샤�".split(""); for (j = 0; j != D[187].length; ++j) if (D[187][j].charCodeAt(0) !== 65533) { e[D[187][j]] = 47872 + j; d[47872 + j] = D[187][j] } D[188] = "�����������������������������������������������������������������퍪퍫퍬퍭퍮퍯퍰퍱퍲퍳퍴퍵퍶퍷퍸퍹퍺퍻퍾퍿펁펂펃펅펆펇������펈펉펊펋펎펒펓펔펕펖펗펚펛펝펞펟펡펢펣펤펥펦펧펪펬펮������펯펰펱펲펳펵펶펷펹펺펻펽펾펿폀폁폂폃폆폇폊폋폌폍폎폏폑폒폓폔폕폖샥샨샬샴샵샷샹섀섄섈섐섕서석섞섟선섣설섦섧섬섭섯섰성섶세섹센셀셈셉셋셌셍셔셕션셜셤셥셧셨셩셰셴셸솅소속솎손솔솖솜솝솟송솥솨솩솬솰솽쇄쇈쇌쇔쇗쇘쇠쇤쇨쇰쇱쇳쇼쇽숀숄숌숍숏숑수숙순숟술숨숩숫숭�".split(""); for (j = 0; j != D[188].length; ++j) if (D[188][j].charCodeAt(0) !== 65533) { e[D[188][j]] = 48128 + j; d[48128 + j] = D[188][j] } D[189] = "�����������������������������������������������������������������폗폙폚폛폜폝폞폟폠폢폤폥폦폧폨폩폪폫폮폯폱폲폳폵폶폷������폸폹폺폻폾퐀퐂퐃퐄퐅퐆퐇퐉퐊퐋퐌퐍퐎퐏퐐퐑퐒퐓퐔퐕퐖������퐗퐘퐙퐚퐛퐜퐞퐟퐠퐡퐢퐣퐤퐥퐦퐧퐨퐩퐪퐫퐬퐭퐮퐯퐰퐱퐲퐳퐴퐵퐶퐷숯숱숲숴쉈쉐쉑쉔쉘쉠쉥쉬쉭쉰쉴쉼쉽쉿슁슈슉슐슘슛슝스슥슨슬슭슴습슷승시식신싣실싫심십싯싱싶싸싹싻싼쌀쌈쌉쌌쌍쌓쌔쌕쌘쌜쌤쌥쌨쌩썅써썩썬썰썲썸썹썼썽쎄쎈쎌쏀쏘쏙쏜쏟쏠쏢쏨쏩쏭쏴쏵쏸쐈쐐쐤쐬쐰�".split(""); for (j = 0; j != D[189].length; ++j) if (D[189][j].charCodeAt(0) !== 65533) { e[D[189][j]] = 48384 + j; d[48384 + j] = D[189][j] } D[190] = "�����������������������������������������������������������������퐸퐹퐺퐻퐼퐽퐾퐿푁푂푃푅푆푇푈푉푊푋푌푍푎푏푐푑푒푓������푔푕푖푗푘푙푚푛푝푞푟푡푢푣푥푦푧푨푩푪푫푬푮푰푱푲������푳푴푵푶푷푺푻푽푾풁풃풄풅풆풇풊풌풎풏풐풑풒풓풕풖풗풘풙풚풛풜풝쐴쐼쐽쑈쑤쑥쑨쑬쑴쑵쑹쒀쒔쒜쒸쒼쓩쓰쓱쓴쓸쓺쓿씀씁씌씐씔씜씨씩씬씰씸씹씻씽아악안앉않알앍앎앓암압앗았앙앝앞애액앤앨앰앱앳앴앵야약얀얄얇얌얍얏양얕얗얘얜얠얩어억언얹얻얼얽얾엄업없엇었엉엊엌엎�".split(""); for (j = 0; j != D[190].length; ++j) if (D[190][j].charCodeAt(0) !== 65533) { e[D[190][j]] = 48640 + j; d[48640 + j] = D[190][j] } D[191] = "�����������������������������������������������������������������풞풟풠풡풢풣풤풥풦풧풨풪풫풬풭풮풯풰풱풲풳풴풵풶풷풸������풹풺풻풼풽풾풿퓀퓁퓂퓃퓄퓅퓆퓇퓈퓉퓊퓋퓍퓎퓏퓑퓒퓓퓕������퓖퓗퓘퓙퓚퓛퓝퓞퓠퓡퓢퓣퓤퓥퓦퓧퓩퓪퓫퓭퓮퓯퓱퓲퓳퓴퓵퓶퓷퓹퓺퓼에엑엔엘엠엡엣엥여역엮연열엶엷염엽엾엿였영옅옆옇예옌옐옘옙옛옜오옥온올옭옮옰옳옴옵옷옹옻와왁완왈왐왑왓왔왕왜왝왠왬왯왱외왹왼욀욈욉욋욍요욕욘욜욤욥욧용우욱운울욹욺움웁웃웅워웍원월웜웝웠웡웨�".split(""); for (j = 0; j != D[191].length; ++j) if (D[191][j].charCodeAt(0) !== 65533) { e[D[191][j]] = 48896 + j; d[48896 + j] = D[191][j] } D[192] = "�����������������������������������������������������������������퓾퓿픀픁픂픃픅픆픇픉픊픋픍픎픏픐픑픒픓픖픘픙픚픛픜픝������픞픟픠픡픢픣픤픥픦픧픨픩픪픫픬픭픮픯픰픱픲픳픴픵픶픷������픸픹픺픻픾픿핁핂핃핅핆핇핈핉핊핋핎핐핒핓핔핕핖핗핚핛핝핞핟핡핢핣웩웬웰웸웹웽위윅윈윌윔윕윗윙유육윤율윰윱윳융윷으윽은을읊음읍읏응읒읓읔읕읖읗의읜읠읨읫이익인일읽읾잃임입잇있잉잊잎자작잔잖잗잘잚잠잡잣잤장잦재잭잰잴잼잽잿쟀쟁쟈쟉쟌쟎쟐쟘쟝쟤쟨쟬저적전절젊�".split(""); for (j = 0; j != D[192].length; ++j) if (D[192][j].charCodeAt(0) !== 65533) { e[D[192][j]] = 49152 + j; d[49152 + j] = D[192][j] } D[193] = "�����������������������������������������������������������������핤핦핧핪핬핮핯핰핱핲핳핶핷핹핺핻핽핾핿햀햁햂햃햆햊햋������햌햍햎햏햑햒햓햔햕햖햗햘햙햚햛햜햝햞햟햠햡햢햣햤햦햧������햨햩햪햫햬햭햮햯햰햱햲햳햴햵햶햷햸햹햺햻햼햽햾햿헀헁헂헃헄헅헆헇점접젓정젖제젝젠젤젬젭젯젱져젼졀졈졉졌졍졔조족존졸졺좀좁좃종좆좇좋좌좍좔좝좟좡좨좼좽죄죈죌죔죕죗죙죠죡죤죵주죽준줄줅줆줌줍줏중줘줬줴쥐쥑쥔쥘쥠쥡쥣쥬쥰쥴쥼즈즉즌즐즘즙즛증지직진짇질짊짐집짓�".split(""); for (j = 0; j != D[193].length; ++j) if (D[193][j].charCodeAt(0) !== 65533) { e[D[193][j]] = 49408 + j; d[49408 + j] = D[193][j] } D[194] = "�����������������������������������������������������������������헊헋헍헎헏헑헓헔헕헖헗헚헜헞헟헠헡헢헣헦헧헩헪헫헭헮������헯헰헱헲헳헶헸헺헻헼헽헾헿혂혃혅혆혇혉혊혋혌혍혎혏혒������혖혗혘혙혚혛혝혞혟혡혢혣혥혦혧혨혩혪혫혬혮혯혰혱혲혳혴혵혶혷혺혻징짖짙짚짜짝짠짢짤짧짬짭짯짰짱째짹짼쨀쨈쨉쨋쨌쨍쨔쨘쨩쩌쩍쩐쩔쩜쩝쩟쩠쩡쩨쩽쪄쪘쪼쪽쫀쫄쫌쫍쫏쫑쫓쫘쫙쫠쫬쫴쬈쬐쬔쬘쬠쬡쭁쭈쭉쭌쭐쭘쭙쭝쭤쭸쭹쮜쮸쯔쯤쯧쯩찌찍찐찔찜찝찡찢찧차착찬찮찰참찹찻�".split(""); for (j = 0; j != D[194].length; ++j) if (D[194][j].charCodeAt(0) !== 65533) { e[D[194][j]] = 49664 + j; d[49664 + j] = D[194][j] } D[195] = "�����������������������������������������������������������������혽혾혿홁홂홃홄홆홇홊홌홎홏홐홒홓홖홗홙홚홛홝홞홟홠홡������홢홣홤홥홦홨홪홫홬홭홮홯홲홳홵홶홷홸홹홺홻홼홽홾홿횀������횁횂횄횆횇횈횉횊횋횎횏횑횒횓횕횖횗횘횙횚횛횜횞횠횢횣횤횥횦횧횩횪찼창찾채책챈챌챔챕챗챘챙챠챤챦챨챰챵처척천철첨첩첫첬청체첵첸첼쳄쳅쳇쳉쳐쳔쳤쳬쳰촁초촉촌촐촘촙촛총촤촨촬촹최쵠쵤쵬쵭쵯쵱쵸춈추축춘출춤춥춧충춰췄췌췐취췬췰췸췹췻췽츄츈츌츔츙츠측츤츨츰츱츳층�".split(""); for (j = 0; j != D[195].length; ++j) if (D[195][j].charCodeAt(0) !== 65533) { e[D[195][j]] = 49920 + j; d[49920 + j] = D[195][j] } D[196] = "�����������������������������������������������������������������횫횭횮횯횱횲횳횴횵횶횷횸횺횼횽횾횿훀훁훂훃훆훇훉훊훋������훍훎훏훐훒훓훕훖훘훚훛훜훝훞훟훡훢훣훥훦훧훩훪훫훬훭������훮훯훱훲훳훴훶훷훸훹훺훻훾훿휁휂휃휅휆휇휈휉휊휋휌휍휎휏휐휒휓휔치칙친칟칠칡침칩칫칭카칵칸칼캄캅캇캉캐캑캔캘캠캡캣캤캥캬캭컁커컥컨컫컬컴컵컷컸컹케켁켄켈켐켑켓켕켜켠켤켬켭켯켰켱켸코콕콘콜콤콥콧콩콰콱콴콸쾀쾅쾌쾡쾨쾰쿄쿠쿡쿤쿨쿰쿱쿳쿵쿼퀀퀄퀑퀘퀭퀴퀵퀸퀼�".split(""); for (j = 0; j != D[196].length; ++j) if (D[196][j].charCodeAt(0) !== 65533) { e[D[196][j]] = 50176 + j; d[50176 + j] = D[196][j] } D[197] = "�����������������������������������������������������������������휕휖휗휚휛휝휞휟휡휢휣휤휥휦휧휪휬휮휯휰휱휲휳휶휷휹������휺휻휽휾휿흀흁흂흃흅흆흈흊흋흌흍흎흏흒흓흕흚흛흜흝흞������흟흢흤흦흧흨흪흫흭흮흯흱흲흳흵흶흷흸흹흺흻흾흿힀힂힃힄힅힆힇힊힋큄큅큇큉큐큔큘큠크큭큰클큼큽킁키킥킨킬킴킵킷킹타탁탄탈탉탐탑탓탔탕태택탠탤탬탭탯탰탱탸턍터턱턴털턺텀텁텃텄텅테텍텐텔템텝텟텡텨텬텼톄톈토톡톤톨톰톱톳통톺톼퇀퇘퇴퇸툇툉툐투툭툰툴툼툽툿퉁퉈퉜�".split(""); for (j = 0; j != D[197].length; ++j) if (D[197][j].charCodeAt(0) !== 65533) { e[D[197][j]] = 50432 + j; d[50432 + j] = D[197][j] } D[198] = "�����������������������������������������������������������������힍힎힏힑힒힓힔힕힖힗힚힜힞힟힠힡힢힣������������������������������������������������������������������������������퉤튀튁튄튈튐튑튕튜튠튤튬튱트특튼튿틀틂틈틉틋틔틘틜틤틥티틱틴틸팀팁팃팅파팍팎판팔팖팜팝팟팠팡팥패팩팬팰팸팹팻팼팽퍄퍅퍼퍽펀펄펌펍펏펐펑페펙펜펠펨펩펫펭펴편펼폄폅폈평폐폘폡폣포폭폰폴폼폽폿퐁�".split(""); for (j = 0; j != D[198].length; ++j) if (D[198][j].charCodeAt(0) !== 65533) { e[D[198][j]] = 50688 + j; d[50688 + j] = D[198][j] } D[199] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������퐈퐝푀푄표푠푤푭푯푸푹푼푿풀풂품풉풋풍풔풩퓌퓐퓔퓜퓟퓨퓬퓰퓸퓻퓽프픈플픔픕픗피픽핀필핌핍핏핑하학한할핥함합핫항해핵핸핼햄햅햇했행햐향허헉헌헐헒험헙헛헝헤헥헨헬헴헵헷헹혀혁현혈혐협혓혔형혜혠�".split(""); for (j = 0; j != D[199].length; ++j) if (D[199][j].charCodeAt(0) !== 65533) { e[D[199][j]] = 50944 + j; d[50944 + j] = D[199][j] } D[200] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������혤혭호혹혼홀홅홈홉홋홍홑화확환활홧황홰홱홴횃횅회획횐횔횝횟횡효횬횰횹횻후훅훈훌훑훔훗훙훠훤훨훰훵훼훽휀휄휑휘휙휜휠휨휩휫휭휴휵휸휼흄흇흉흐흑흔흖흗흘흙흠흡흣흥흩희흰흴흼흽힁히힉힌힐힘힙힛힝�".split(""); for (j = 0; j != D[200].length; ++j) if (D[200][j].charCodeAt(0) !== 65533) { e[D[200][j]] = 51200 + j; d[51200 + j] = D[200][j] } D[202] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������伽佳假價加可呵哥嘉嫁家暇架枷柯歌珂痂稼苛茄街袈訶賈跏軻迦駕刻却各恪慤殼珏脚覺角閣侃刊墾奸姦干幹懇揀杆柬桿澗癎看磵稈竿簡肝艮艱諫間乫喝曷渴碣竭葛褐蝎鞨勘坎堪嵌感憾戡敢柑橄減甘疳監瞰紺邯鑑鑒龕�".split(""); for (j = 0; j != D[202].length; ++j) if (D[202][j].charCodeAt(0) !== 65533) { e[D[202][j]] = 51712 + j; d[51712 + j] = D[202][j] } D[203] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������匣岬甲胛鉀閘剛堈姜岡崗康强彊慷江畺疆糠絳綱羌腔舡薑襁講鋼降鱇介价個凱塏愷愾慨改槪漑疥皆盖箇芥蓋豈鎧開喀客坑更粳羹醵倨去居巨拒据據擧渠炬祛距踞車遽鉅鋸乾件健巾建愆楗腱虔蹇鍵騫乞傑杰桀儉劍劒檢�".split(""); for (j = 0; j != D[203].length; ++j) if (D[203][j].charCodeAt(0) !== 65533) { e[D[203][j]] = 51968 + j; d[51968 + j] = D[203][j] } D[204] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������瞼鈐黔劫怯迲偈憩揭擊格檄激膈覡隔堅牽犬甄絹繭肩見譴遣鵑抉決潔結缺訣兼慊箝謙鉗鎌京俓倞傾儆勁勍卿坰境庚徑慶憬擎敬景暻更梗涇炅烱璟璥瓊痙硬磬竟競絅經耕耿脛莖警輕逕鏡頃頸驚鯨係啓堺契季屆悸戒桂械�".split(""); for (j = 0; j != D[204].length; ++j) if (D[204][j].charCodeAt(0) !== 65533) { e[D[204][j]] = 52224 + j; d[52224 + j] = D[204][j] } D[205] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������棨溪界癸磎稽系繫繼計誡谿階鷄古叩告呱固姑孤尻庫拷攷故敲暠枯槁沽痼皐睾稿羔考股膏苦苽菰藁蠱袴誥賈辜錮雇顧高鼓哭斛曲梏穀谷鵠困坤崑昆梱棍滾琨袞鯤汨滑骨供公共功孔工恐恭拱控攻珙空蚣貢鞏串寡戈果瓜�".split(""); for (j = 0; j != D[205].length; ++j) if (D[205][j].charCodeAt(0) !== 65533) { e[D[205][j]] = 52480 + j; d[52480 + j] = D[205][j] } D[206] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������科菓誇課跨過鍋顆廓槨藿郭串冠官寬慣棺款灌琯瓘管罐菅觀貫關館刮恝括适侊光匡壙廣曠洸炚狂珖筐胱鑛卦掛罫乖傀塊壞怪愧拐槐魁宏紘肱轟交僑咬喬嬌嶠巧攪敎校橋狡皎矯絞翹膠蕎蛟較轎郊餃驕鮫丘久九仇俱具勾�".split(""); for (j = 0; j != D[206].length; ++j) if (D[206][j].charCodeAt(0) !== 65533) { e[D[206][j]] = 52736 + j; d[52736 + j] = D[206][j] } D[207] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������區口句咎嘔坵垢寇嶇廐懼拘救枸柩構歐毆毬求溝灸狗玖球瞿矩究絿耉臼舅舊苟衢謳購軀逑邱鉤銶駒驅鳩鷗龜國局菊鞠鞫麴君窘群裙軍郡堀屈掘窟宮弓穹窮芎躬倦券勸卷圈拳捲權淃眷厥獗蕨蹶闕机櫃潰詭軌饋句晷歸貴�".split(""); for (j = 0; j != D[207].length; ++j) if (D[207][j].charCodeAt(0) !== 65533) { e[D[207][j]] = 52992 + j; d[52992 + j] = D[207][j] } D[208] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������鬼龜叫圭奎揆槻珪硅窺竅糾葵規赳逵閨勻均畇筠菌鈞龜橘克剋劇戟棘極隙僅劤勤懃斤根槿瑾筋芹菫覲謹近饉契今妗擒昑檎琴禁禽芩衾衿襟金錦伋及急扱汲級給亘兢矜肯企伎其冀嗜器圻基埼夔奇妓寄岐崎己幾忌技旗旣�".split(""); for (j = 0; j != D[208].length; ++j) if (D[208][j].charCodeAt(0) !== 65533) { e[D[208][j]] = 53248 + j; d[53248 + j] = D[208][j] } D[209] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������朞期杞棋棄機欺氣汽沂淇玘琦琪璂璣畸畿碁磯祁祇祈祺箕紀綺羈耆耭肌記譏豈起錡錤飢饑騎騏驥麒緊佶吉拮桔金喫儺喇奈娜懦懶拏拿癩羅蘿螺裸邏那樂洛烙珞落諾酪駱亂卵暖欄煖爛蘭難鸞捏捺南嵐枏楠湳濫男藍襤拉�".split(""); for (j = 0; j != D[209].length; ++j) if (D[209][j].charCodeAt(0) !== 65533) { e[D[209][j]] = 53504 + j; d[53504 + j] = D[209][j] } D[210] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������納臘蠟衲囊娘廊朗浪狼郎乃來內奈柰耐冷女年撚秊念恬拈捻寧寗努勞奴弩怒擄櫓爐瑙盧老蘆虜路露駑魯鷺碌祿綠菉錄鹿論壟弄濃籠聾膿農惱牢磊腦賂雷尿壘屢樓淚漏累縷陋嫩訥杻紐勒肋凜凌稜綾能菱陵尼泥匿溺多茶�".split(""); for (j = 0; j != D[210].length; ++j) if (D[210][j].charCodeAt(0) !== 65533) { e[D[210][j]] = 53760 + j; d[53760 + j] = D[210][j] } D[211] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������丹亶但單團壇彖斷旦檀段湍短端簞緞蛋袒鄲鍛撻澾獺疸達啖坍憺擔曇淡湛潭澹痰聃膽蕁覃談譚錟沓畓答踏遝唐堂塘幢戇撞棠當糖螳黨代垈坮大對岱帶待戴擡玳臺袋貸隊黛宅德悳倒刀到圖堵塗導屠島嶋度徒悼挑掉搗桃�".split(""); for (j = 0; j != D[211].length; ++j) if (D[211][j].charCodeAt(0) !== 65533) { e[D[211][j]] = 54016 + j; d[54016 + j] = D[211][j] } D[212] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������棹櫂淘渡滔濤燾盜睹禱稻萄覩賭跳蹈逃途道都鍍陶韜毒瀆牘犢獨督禿篤纛讀墩惇敦旽暾沌焞燉豚頓乭突仝冬凍動同憧東桐棟洞潼疼瞳童胴董銅兜斗杜枓痘竇荳讀豆逗頭屯臀芚遁遯鈍得嶝橙燈登等藤謄鄧騰喇懶拏癩羅�".split(""); for (j = 0; j != D[212].length; ++j) if (D[212][j].charCodeAt(0) !== 65533) { e[D[212][j]] = 54272 + j; d[54272 + j] = D[212][j] } D[213] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������蘿螺裸邏樂洛烙珞絡落諾酪駱丹亂卵欄欒瀾爛蘭鸞剌辣嵐擥攬欖濫籃纜藍襤覽拉臘蠟廊朗浪狼琅瑯螂郞來崍徠萊冷掠略亮倆兩凉梁樑粮粱糧良諒輛量侶儷勵呂廬慮戾旅櫚濾礪藜蠣閭驢驪麗黎力曆歷瀝礫轢靂憐戀攣漣�".split(""); for (j = 0; j != D[213].length; ++j) if (D[213][j].charCodeAt(0) !== 65533) { e[D[213][j]] = 54528 + j; d[54528 + j] = D[213][j] } D[214] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������煉璉練聯蓮輦連鍊冽列劣洌烈裂廉斂殮濂簾獵令伶囹寧岺嶺怜玲笭羚翎聆逞鈴零靈領齡例澧禮醴隷勞怒撈擄櫓潞瀘爐盧老蘆虜路輅露魯鷺鹵碌祿綠菉錄鹿麓論壟弄朧瀧瓏籠聾儡瀨牢磊賂賚賴雷了僚寮廖料燎療瞭聊蓼�".split(""); for (j = 0; j != D[214].length; ++j) if (D[214][j].charCodeAt(0) !== 65533) { e[D[214][j]] = 54784 + j; d[54784 + j] = D[214][j] } D[215] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������遼鬧龍壘婁屢樓淚漏瘻累縷蔞褸鏤陋劉旒柳榴流溜瀏琉瑠留瘤硫謬類六戮陸侖倫崙淪綸輪律慄栗率隆勒肋凜凌楞稜綾菱陵俚利厘吏唎履悧李梨浬犁狸理璃異痢籬罹羸莉裏裡里釐離鯉吝潾燐璘藺躪隣鱗麟林淋琳臨霖砬�".split(""); for (j = 0; j != D[215].length; ++j) if (D[215][j].charCodeAt(0) !== 65533) { e[D[215][j]] = 55040 + j; d[55040 + j] = D[215][j] } D[216] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������立笠粒摩瑪痲碼磨馬魔麻寞幕漠膜莫邈万卍娩巒彎慢挽晩曼滿漫灣瞞萬蔓蠻輓饅鰻唜抹末沫茉襪靺亡妄忘忙望網罔芒茫莽輞邙埋妹媒寐昧枚梅每煤罵買賣邁魅脈貊陌驀麥孟氓猛盲盟萌冪覓免冕勉棉沔眄眠綿緬面麵滅�".split(""); for (j = 0; j != D[216].length; ++j) if (D[216][j].charCodeAt(0) !== 65533) { e[D[216][j]] = 55296 + j; d[55296 + j] = D[216][j] } D[217] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������蔑冥名命明暝椧溟皿瞑茗蓂螟酩銘鳴袂侮冒募姆帽慕摸摹暮某模母毛牟牡瑁眸矛耗芼茅謀謨貌木沐牧目睦穆鶩歿沒夢朦蒙卯墓妙廟描昴杳渺猫竗苗錨務巫憮懋戊拇撫无楙武毋無珷畝繆舞茂蕪誣貿霧鵡墨默們刎吻問文�".split(""); for (j = 0; j != D[217].length; ++j) if (D[217][j].charCodeAt(0) !== 65533) { e[D[217][j]] = 55552 + j; d[55552 + j] = D[217][j] } D[218] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������汶紊紋聞蚊門雯勿沕物味媚尾嵋彌微未梶楣渼湄眉米美薇謎迷靡黴岷悶愍憫敏旻旼民泯玟珉緡閔密蜜謐剝博拍搏撲朴樸泊珀璞箔粕縛膊舶薄迫雹駁伴半反叛拌搬攀斑槃泮潘班畔瘢盤盼磐磻礬絆般蟠返頒飯勃拔撥渤潑�".split(""); for (j = 0; j != D[218].length; ++j) if (D[218][j].charCodeAt(0) !== 65533) { e[D[218][j]] = 55808 + j; d[55808 + j] = D[218][j] } D[219] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������發跋醱鉢髮魃倣傍坊妨尨幇彷房放方旁昉枋榜滂磅紡肪膀舫芳蒡蚌訪謗邦防龐倍俳北培徘拜排杯湃焙盃背胚裴裵褙賠輩配陪伯佰帛柏栢白百魄幡樊煩燔番磻繁蕃藩飜伐筏罰閥凡帆梵氾汎泛犯範范法琺僻劈壁擘檗璧癖�".split(""); for (j = 0; j != D[219].length; ++j) if (D[219][j].charCodeAt(0) !== 65533) { e[D[219][j]] = 56064 + j; d[56064 + j] = D[219][j] } D[220] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������碧蘗闢霹便卞弁變辨辯邊別瞥鱉鼈丙倂兵屛幷昞昺柄棅炳甁病秉竝輧餠騈保堡報寶普步洑湺潽珤甫菩補褓譜輔伏僕匐卜宓復服福腹茯蔔複覆輹輻馥鰒本乶俸奉封峯峰捧棒烽熢琫縫蓬蜂逢鋒鳳不付俯傅剖副否咐埠夫婦�".split(""); for (j = 0; j != D[220].length; ++j) if (D[220][j].charCodeAt(0) !== 65533) { e[D[220][j]] = 56320 + j; d[56320 + j] = D[220][j] } D[221] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������孚孵富府復扶敷斧浮溥父符簿缶腐腑膚艀芙莩訃負賦賻赴趺部釜阜附駙鳧北分吩噴墳奔奮忿憤扮昐汾焚盆粉糞紛芬賁雰不佛弗彿拂崩朋棚硼繃鵬丕備匕匪卑妃婢庇悲憊扉批斐枇榧比毖毗毘沸泌琵痺砒碑秕秘粃緋翡肥�".split(""); for (j = 0; j != D[221].length; ++j) if (D[221][j].charCodeAt(0) !== 65533) { e[D[221][j]] = 56576 + j; d[56576 + j] = D[221][j] } D[222] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������脾臂菲蜚裨誹譬費鄙非飛鼻嚬嬪彬斌檳殯浜濱瀕牝玭貧賓頻憑氷聘騁乍事些仕伺似使俟僿史司唆嗣四士奢娑寫寺射巳師徙思捨斜斯柶査梭死沙泗渣瀉獅砂社祀祠私篩紗絲肆舍莎蓑蛇裟詐詞謝賜赦辭邪飼駟麝削數朔索�".split(""); for (j = 0; j != D[222].length; ++j) if (D[222][j].charCodeAt(0) !== 65533) { e[D[222][j]] = 56832 + j; d[56832 + j] = D[222][j] } D[223] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������傘刪山散汕珊産疝算蒜酸霰乷撒殺煞薩三參杉森渗芟蔘衫揷澁鈒颯上傷像償商喪嘗孀尙峠常床庠廂想桑橡湘爽牀狀相祥箱翔裳觴詳象賞霜塞璽賽嗇塞穡索色牲生甥省笙墅壻嶼序庶徐恕抒捿敍暑曙書栖棲犀瑞筮絮緖署�".split(""); for (j = 0; j != D[223].length; ++j) if (D[223][j].charCodeAt(0) !== 65533) { e[D[223][j]] = 57088 + j; d[57088 + j] = D[223][j] } D[224] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������胥舒薯西誓逝鋤黍鼠夕奭席惜昔晳析汐淅潟石碩蓆釋錫仙僊先善嬋宣扇敾旋渲煽琁瑄璇璿癬禪線繕羨腺膳船蘚蟬詵跣選銑鐥饍鮮卨屑楔泄洩渫舌薛褻設說雪齧剡暹殲纖蟾贍閃陝攝涉燮葉城姓宬性惺成星晟猩珹盛省筬�".split(""); for (j = 0; j != D[224].length; ++j) if (D[224][j].charCodeAt(0) !== 65533) { e[D[224][j]] = 57344 + j; d[57344 + j] = D[224][j] } D[225] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������聖聲腥誠醒世勢歲洗稅笹細說貰召嘯塑宵小少巢所掃搔昭梳沼消溯瀟炤燒甦疏疎瘙笑篠簫素紹蔬蕭蘇訴逍遡邵銷韶騷俗屬束涑粟續謖贖速孫巽損蓀遜飡率宋悚松淞訟誦送頌刷殺灑碎鎖衰釗修受嗽囚垂壽嫂守岫峀帥愁�".split(""); for (j = 0; j != D[225].length; ++j) if (D[225][j].charCodeAt(0) !== 65533) { e[D[225][j]] = 57600 + j; d[57600 + j] = D[225][j] } D[226] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������戍手授搜收數樹殊水洙漱燧狩獸琇璲瘦睡秀穗竪粹綏綬繡羞脩茱蒐蓚藪袖誰讐輸遂邃酬銖銹隋隧隨雖需須首髓鬚叔塾夙孰宿淑潚熟琡璹肅菽巡徇循恂旬栒楯橓殉洵淳珣盾瞬筍純脣舜荀蓴蕣詢諄醇錞順馴戌術述鉥崇崧�".split(""); for (j = 0; j != D[226].length; ++j) if (D[226][j].charCodeAt(0) !== 65533) { e[D[226][j]] = 57856 + j; d[57856 + j] = D[226][j] } D[227] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������嵩瑟膝蝨濕拾習褶襲丞乘僧勝升承昇繩蠅陞侍匙嘶始媤尸屎屍市弑恃施是時枾柴猜矢示翅蒔蓍視試詩諡豕豺埴寔式息拭植殖湜熄篒蝕識軾食飾伸侁信呻娠宸愼新晨燼申神紳腎臣莘薪藎蜃訊身辛辰迅失室實悉審尋心沁�".split(""); for (j = 0; j != D[227].length; ++j) if (D[227][j].charCodeAt(0) !== 65533) { e[D[227][j]] = 58112 + j; d[58112 + j] = D[227][j] } D[228] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������沈深瀋甚芯諶什十拾雙氏亞俄兒啞娥峨我牙芽莪蛾衙訝阿雅餓鴉鵝堊岳嶽幄惡愕握樂渥鄂鍔顎鰐齷安岸按晏案眼雁鞍顔鮟斡謁軋閼唵岩巖庵暗癌菴闇壓押狎鴨仰央怏昻殃秧鴦厓哀埃崖愛曖涯碍艾隘靄厄扼掖液縊腋額�".split(""); for (j = 0; j != D[228].length; ++j) if (D[228][j].charCodeAt(0) !== 65533) { e[D[228][j]] = 58368 + j; d[58368 + j] = D[228][j] } D[229] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������櫻罌鶯鸚也倻冶夜惹揶椰爺耶若野弱掠略約若葯蒻藥躍亮佯兩凉壤孃恙揚攘敭暘梁楊樣洋瀁煬痒瘍禳穰糧羊良襄諒讓釀陽量養圄御於漁瘀禦語馭魚齬億憶抑檍臆偃堰彦焉言諺孼蘖俺儼嚴奄掩淹嶪業円予余勵呂女如廬�".split(""); for (j = 0; j != D[229].length; ++j) if (D[229][j].charCodeAt(0) !== 65533) { e[D[229][j]] = 58624 + j; d[58624 + j] = D[229][j] } D[230] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������旅歟汝濾璵礖礪與艅茹輿轝閭餘驪麗黎亦力域役易曆歷疫繹譯轢逆驛嚥堧姸娟宴年延憐戀捐挻撚椽沇沿涎涓淵演漣烟然煙煉燃燕璉硏硯秊筵緣練縯聯衍軟輦蓮連鉛鍊鳶列劣咽悅涅烈熱裂說閱厭廉念捻染殮炎焰琰艶苒�".split(""); for (j = 0; j != D[230].length; ++j) if (D[230][j].charCodeAt(0) !== 65533) { e[D[230][j]] = 58880 + j; d[58880 + j] = D[230][j] } D[231] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������簾閻髥鹽曄獵燁葉令囹塋寧嶺嶸影怜映暎楹榮永泳渶潁濚瀛瀯煐營獰玲瑛瑩瓔盈穎纓羚聆英詠迎鈴鍈零霙靈領乂倪例刈叡曳汭濊猊睿穢芮藝蘂禮裔詣譽豫醴銳隸霓預五伍俉傲午吾吳嗚塢墺奧娛寤悟惡懊敖旿晤梧汚澳�".split(""); for (j = 0; j != D[231].length; ++j) if (D[231][j].charCodeAt(0) !== 65533) { e[D[231][j]] = 59136 + j; d[59136 + j] = D[231][j] } D[232] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������烏熬獒筽蜈誤鰲鼇屋沃獄玉鈺溫瑥瘟穩縕蘊兀壅擁瓮甕癰翁邕雍饔渦瓦窩窪臥蛙蝸訛婉完宛梡椀浣玩琓琬碗緩翫脘腕莞豌阮頑曰往旺枉汪王倭娃歪矮外嵬巍猥畏了僚僥凹堯夭妖姚寥寮尿嶢拗搖撓擾料曜樂橈燎燿瑤療�".split(""); for (j = 0; j != D[232].length; ++j) if (D[232][j].charCodeAt(0) !== 65533) { e[D[232][j]] = 59392 + j; d[59392 + j] = D[232][j] } D[233] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������窈窯繇繞耀腰蓼蟯要謠遙遼邀饒慾欲浴縟褥辱俑傭冗勇埇墉容庸慂榕涌湧溶熔瑢用甬聳茸蓉踊鎔鏞龍于佑偶優又友右宇寓尤愚憂旴牛玗瑀盂祐禑禹紆羽芋藕虞迂遇郵釪隅雨雩勖彧旭昱栯煜稶郁頊云暈橒殞澐熉耘芸蕓�".split(""); for (j = 0; j != D[233].length; ++j) if (D[233][j].charCodeAt(0) !== 65533) { e[D[233][j]] = 59648 + j; d[59648 + j] = D[233][j] } D[234] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������運隕雲韻蔚鬱亐熊雄元原員圓園垣媛嫄寃怨愿援沅洹湲源爰猿瑗苑袁轅遠阮院願鴛月越鉞位偉僞危圍委威尉慰暐渭爲瑋緯胃萎葦蔿蝟衛褘謂違韋魏乳侑儒兪劉唯喩孺宥幼幽庾悠惟愈愉揄攸有杻柔柚柳楡楢油洧流游溜�".split(""); for (j = 0; j != D[234].length; ++j) if (D[234][j].charCodeAt(0) !== 65533) { e[D[234][j]] = 59904 + j; d[59904 + j] = D[234][j] } D[235] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������濡猶猷琉瑜由留癒硫紐維臾萸裕誘諛諭踰蹂遊逾遺酉釉鍮類六堉戮毓肉育陸倫允奫尹崙淪潤玧胤贇輪鈗閏律慄栗率聿戎瀜絨融隆垠恩慇殷誾銀隱乙吟淫蔭陰音飮揖泣邑凝應膺鷹依倚儀宜意懿擬椅毅疑矣義艤薏蟻衣誼�".split(""); for (j = 0; j != D[235].length; ++j) if (D[235][j].charCodeAt(0) !== 65533) { e[D[235][j]] = 60160 + j; d[60160 + j] = D[235][j] } D[236] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������議醫二以伊利吏夷姨履已弛彛怡易李梨泥爾珥理異痍痢移罹而耳肄苡荑裏裡貽貳邇里離飴餌匿溺瀷益翊翌翼謚人仁刃印吝咽因姻寅引忍湮燐璘絪茵藺蚓認隣靭靷鱗麟一佚佾壹日溢逸鎰馹任壬妊姙恁林淋稔臨荏賃入卄�".split(""); for (j = 0; j != D[236].length; ++j) if (D[236][j].charCodeAt(0) !== 65533) { e[D[236][j]] = 60416 + j; d[60416 + j] = D[236][j] } D[237] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������立笠粒仍剩孕芿仔刺咨姉姿子字孜恣慈滋炙煮玆瓷疵磁紫者自茨蔗藉諮資雌作勺嚼斫昨灼炸爵綽芍酌雀鵲孱棧殘潺盞岑暫潛箴簪蠶雜丈仗匠場墻壯奬將帳庄張掌暲杖樟檣欌漿牆狀獐璋章粧腸臟臧莊葬蔣薔藏裝贓醬長�".split(""); for (j = 0; j != D[237].length; ++j) if (D[237][j].charCodeAt(0) !== 65533) { e[D[237][j]] = 60672 + j; d[60672 + j] = D[237][j] } D[238] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������障再哉在宰才材栽梓渽滓災縡裁財載齋齎爭箏諍錚佇低儲咀姐底抵杵楮樗沮渚狙猪疽箸紵苧菹著藷詛貯躇這邸雎齟勣吊嫡寂摘敵滴狄炙的積笛籍績翟荻謫賊赤跡蹟迪迹適鏑佃佺傳全典前剪塡塼奠專展廛悛戰栓殿氈澱�".split(""); for (j = 0; j != D[238].length; ++j) if (D[238][j].charCodeAt(0) !== 65533) { e[D[238][j]] = 60928 + j; d[60928 + j] = D[238][j] } D[239] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������煎琠田甸畑癲筌箋箭篆纏詮輾轉鈿銓錢鐫電顚顫餞切截折浙癤竊節絶占岾店漸点粘霑鮎點接摺蝶丁井亭停偵呈姃定幀庭廷征情挺政整旌晶晸柾楨檉正汀淀淨渟湞瀞炡玎珽町睛碇禎程穽精綎艇訂諪貞鄭酊釘鉦鋌錠霆靖�".split("");
    for (j = 0; j != D[239].length; ++j) if (D[239][j].charCodeAt(0) !== 65533) { e[D[239][j]] = 61184 + j; d[61184 + j] = D[239][j] } D[240] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������靜頂鼎制劑啼堤帝弟悌提梯濟祭第臍薺製諸蹄醍除際霽題齊俎兆凋助嘲弔彫措操早晁曺曹朝條棗槽漕潮照燥爪璪眺祖祚租稠窕粗糟組繰肇藻蚤詔調趙躁造遭釣阻雕鳥族簇足鏃存尊卒拙猝倧宗從悰慫棕淙琮種終綜縱腫�".split(""); for (j = 0; j != D[240].length; ++j) if (D[240][j].charCodeAt(0) !== 65533) { e[D[240][j]] = 61440 + j; d[61440 + j] = D[240][j] } D[241] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������踪踵鍾鐘佐坐左座挫罪主住侏做姝胄呪周嗾奏宙州廚晝朱柱株注洲湊澍炷珠疇籌紂紬綢舟蛛註誅走躊輳週酎酒鑄駐竹粥俊儁准埈寯峻晙樽浚準濬焌畯竣蠢逡遵雋駿茁中仲衆重卽櫛楫汁葺增憎曾拯烝甑症繒蒸證贈之只�".split(""); for (j = 0; j != D[241].length; ++j) if (D[241][j].charCodeAt(0) !== 65533) { e[D[241][j]] = 61696 + j; d[61696 + j] = D[241][j] } D[242] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������咫地址志持指摯支旨智枝枳止池沚漬知砥祉祗紙肢脂至芝芷蜘誌識贄趾遲直稙稷織職唇嗔塵振搢晉晋桭榛殄津溱珍瑨璡畛疹盡眞瞋秦縉縝臻蔯袗診賑軫辰進鎭陣陳震侄叱姪嫉帙桎瓆疾秩窒膣蛭質跌迭斟朕什執潗緝輯�".split(""); for (j = 0; j != D[242].length; ++j) if (D[242][j].charCodeAt(0) !== 65533) { e[D[242][j]] = 61952 + j; d[61952 + j] = D[242][j] } D[243] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������鏶集徵懲澄且侘借叉嗟嵯差次此磋箚茶蹉車遮捉搾着窄錯鑿齪撰澯燦璨瓚竄簒纂粲纘讚贊鑽餐饌刹察擦札紮僭參塹慘慙懺斬站讒讖倉倡創唱娼廠彰愴敞昌昶暢槍滄漲猖瘡窓脹艙菖蒼債埰寀寨彩採砦綵菜蔡采釵冊柵策�".split(""); for (j = 0; j != D[243].length; ++j) if (D[243][j].charCodeAt(0) !== 65533) { e[D[243][j]] = 62208 + j; d[62208 + j] = D[243][j] } D[244] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������責凄妻悽處倜刺剔尺慽戚拓擲斥滌瘠脊蹠陟隻仟千喘天川擅泉淺玔穿舛薦賤踐遷釧闡阡韆凸哲喆徹撤澈綴輟轍鐵僉尖沾添甛瞻簽籤詹諂堞妾帖捷牒疊睫諜貼輒廳晴淸聽菁請靑鯖切剃替涕滯締諦逮遞體初剿哨憔抄招梢�".split(""); for (j = 0; j != D[244].length; ++j) if (D[244][j].charCodeAt(0) !== 65533) { e[D[244][j]] = 62464 + j; d[62464 + j] = D[244][j] } D[245] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������椒楚樵炒焦硝礁礎秒稍肖艸苕草蕉貂超酢醋醮促囑燭矗蜀觸寸忖村邨叢塚寵悤憁摠總聰蔥銃撮催崔最墜抽推椎楸樞湫皺秋芻萩諏趨追鄒酋醜錐錘鎚雛騶鰍丑畜祝竺筑築縮蓄蹙蹴軸逐春椿瑃出朮黜充忠沖蟲衝衷悴膵萃�".split(""); for (j = 0; j != D[245].length; ++j) if (D[245][j].charCodeAt(0) !== 65533) { e[D[245][j]] = 62720 + j; d[62720 + j] = D[245][j] } D[246] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������贅取吹嘴娶就炊翠聚脆臭趣醉驟鷲側仄厠惻測層侈値嗤峙幟恥梔治淄熾痔痴癡稚穉緇緻置致蚩輜雉馳齒則勅飭親七柒漆侵寢枕沈浸琛砧針鍼蟄秤稱快他咤唾墮妥惰打拖朶楕舵陀馱駝倬卓啄坼度托拓擢晫柝濁濯琢琸託�".split(""); for (j = 0; j != D[246].length; ++j) if (D[246][j].charCodeAt(0) !== 65533) { e[D[246][j]] = 62976 + j; d[62976 + j] = D[246][j] } D[247] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������鐸呑嘆坦彈憚歎灘炭綻誕奪脫探眈耽貪塔搭榻宕帑湯糖蕩兌台太怠態殆汰泰笞胎苔跆邰颱宅擇澤撑攄兎吐土討慟桶洞痛筒統通堆槌腿褪退頹偸套妬投透鬪慝特闖坡婆巴把播擺杷波派爬琶破罷芭跛頗判坂板版瓣販辦鈑�".split(""); for (j = 0; j != D[247].length; ++j) if (D[247][j].charCodeAt(0) !== 65533) { e[D[247][j]] = 63232 + j; d[63232 + j] = D[247][j] } D[248] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������阪八叭捌佩唄悖敗沛浿牌狽稗覇貝彭澎烹膨愎便偏扁片篇編翩遍鞭騙貶坪平枰萍評吠嬖幣廢弊斃肺蔽閉陛佈包匍匏咆哺圃布怖抛抱捕暴泡浦疱砲胞脯苞葡蒲袍褒逋鋪飽鮑幅暴曝瀑爆輻俵剽彪慓杓標漂瓢票表豹飇飄驃�".split(""); for (j = 0; j != D[248].length; ++j) if (D[248][j].charCodeAt(0) !== 65533) { e[D[248][j]] = 63488 + j; d[63488 + j] = D[248][j] } D[249] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������品稟楓諷豊風馮彼披疲皮被避陂匹弼必泌珌畢疋筆苾馝乏逼下何厦夏廈昰河瑕荷蝦賀遐霞鰕壑學虐謔鶴寒恨悍旱汗漢澣瀚罕翰閑閒限韓割轄函含咸啣喊檻涵緘艦銜陷鹹合哈盒蛤閤闔陜亢伉姮嫦巷恒抗杭桁沆港缸肛航�".split(""); for (j = 0; j != D[249].length; ++j) if (D[249][j].charCodeAt(0) !== 65533) { e[D[249][j]] = 63744 + j; d[63744 + j] = D[249][j] } D[250] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������行降項亥偕咳垓奚孩害懈楷海瀣蟹解該諧邂駭骸劾核倖幸杏荇行享向嚮珦鄕響餉饗香噓墟虛許憲櫶獻軒歇險驗奕爀赫革俔峴弦懸晛泫炫玄玹現眩睍絃絢縣舷衒見賢鉉顯孑穴血頁嫌俠協夾峽挾浹狹脅脇莢鋏頰亨兄刑型�".split(""); for (j = 0; j != D[250].length; ++j) if (D[250][j].charCodeAt(0) !== 65533) { e[D[250][j]] = 64e3 + j; d[64e3 + j] = D[250][j] } D[251] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������形泂滎瀅灐炯熒珩瑩荊螢衡逈邢鎣馨兮彗惠慧暳蕙蹊醯鞋乎互呼壕壺好岵弧戶扈昊晧毫浩淏湖滸澔濠濩灝狐琥瑚瓠皓祜糊縞胡芦葫蒿虎號蝴護豪鎬頀顥惑或酷婚昏混渾琿魂忽惚笏哄弘汞泓洪烘紅虹訌鴻化和嬅樺火畵�".split(""); for (j = 0; j != D[251].length; ++j) if (D[251][j].charCodeAt(0) !== 65533) { e[D[251][j]] = 64256 + j; d[64256 + j] = D[251][j] } D[252] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������禍禾花華話譁貨靴廓擴攫確碻穫丸喚奐宦幻患換歡晥桓渙煥環紈還驩鰥活滑猾豁闊凰幌徨恍惶愰慌晃晄榥況湟滉潢煌璜皇篁簧荒蝗遑隍黃匯回廻徊恢悔懷晦會檜淮澮灰獪繪膾茴蛔誨賄劃獲宖橫鐄哮嚆孝效斅曉梟涍淆�".split(""); for (j = 0; j != D[252].length; ++j) if (D[252][j].charCodeAt(0) !== 65533) { e[D[252][j]] = 64512 + j; d[64512 + j] = D[252][j] } D[253] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������爻肴酵驍侯候厚后吼喉嗅帿後朽煦珝逅勛勳塤壎焄熏燻薰訓暈薨喧暄煊萱卉喙毁彙徽揮暉煇諱輝麾休携烋畦虧恤譎鷸兇凶匈洶胸黑昕欣炘痕吃屹紇訖欠欽歆吸恰洽翕興僖凞喜噫囍姬嬉希憙憘戱晞曦熙熹熺犧禧稀羲詰�".split(""); for (j = 0; j != D[253].length; ++j) if (D[253][j].charCodeAt(0) !== 65533) { e[D[253][j]] = 64768 + j; d[64768 + j] = D[253][j] } return { enc: e, dec: d }
}(); cptable[950] = function () {
    var d = [], e = {}, D = [], j; D[0] = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~��������������������������������������������������������������������������������������������������������������������������������".split(""); for (j = 0; j != D[0].length; ++j) if (D[0][j].charCodeAt(0) !== 65533) { e[D[0][j]] = 0 + j; d[0 + j] = D[0][j] } D[161] = "����������������������������������������������������������������　，、。．‧；：？！︰…‥﹐﹑﹒·﹔﹕﹖﹗｜–︱—︳╴︴﹏（）︵︶｛｝︷︸〔〕︹︺【】︻︼《》︽︾〈〉︿﹀「」﹁﹂『』﹃﹄﹙﹚����������������������������������﹛﹜﹝﹞‘’“”〝〞‵′＃＆＊※§〃○●△▲◎☆★◇◆□■▽▼㊣℅¯￣＿ˍ﹉﹊﹍﹎﹋﹌﹟﹠﹡＋－×÷±√＜＞＝≦≧≠∞≒≡﹢﹣﹤﹥﹦～∩∪⊥∠∟⊿㏒㏑∫∮∵∴♀♂⊕⊙↑↓←→↖↗↙↘∥∣／�".split(""); for (j = 0; j != D[161].length; ++j) if (D[161][j].charCodeAt(0) !== 65533) { e[D[161][j]] = 41216 + j; d[41216 + j] = D[161][j] } D[162] = "����������������������������������������������������������������＼∕﹨＄￥〒￠￡％＠℃℉﹩﹪﹫㏕㎜㎝㎞㏎㎡㎎㎏㏄°兙兛兞兝兡兣嗧瓩糎▁▂▃▄▅▆▇█▏▎▍▌▋▊▉┼┴┬┤├▔─│▕┌┐└┘╭����������������������������������╮╰╯═╞╪╡◢◣◥◤╱╲╳０１２３４５６７８９ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩ〡〢〣〤〥〦〧〨〩十卄卅ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖ�".split(""); for (j = 0; j != D[162].length; ++j) if (D[162][j].charCodeAt(0) !== 65533) { e[D[162][j]] = 41472 + j; d[41472 + j] = D[162][j] } D[163] = "����������������������������������������������������������������ｗｘｙｚΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρστυφχψωㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏ����������������������������������ㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦㄧㄨㄩ˙ˉˊˇˋ���������������������������������€������������������������������".split(""); for (j = 0; j != D[163].length; ++j) if (D[163][j].charCodeAt(0) !== 65533) { e[D[163][j]] = 41728 + j; d[41728 + j] = D[163][j] } D[164] = "����������������������������������������������������������������一乙丁七乃九了二人儿入八几刀刁力匕十卜又三下丈上丫丸凡久么也乞于亡兀刃勺千叉口土士夕大女子孑孓寸小尢尸山川工己已巳巾干廾弋弓才����������������������������������丑丐不中丰丹之尹予云井互五亢仁什仃仆仇仍今介仄元允內六兮公冗凶分切刈勻勾勿化匹午升卅卞厄友及反壬天夫太夭孔少尤尺屯巴幻廿弔引心戈戶手扎支文斗斤方日曰月木欠止歹毋比毛氏水火爪父爻片牙牛犬王丙�".split(""); for (j = 0; j != D[164].length; ++j) if (D[164][j].charCodeAt(0) !== 65533) { e[D[164][j]] = 41984 + j; d[41984 + j] = D[164][j] } D[165] = "����������������������������������������������������������������世丕且丘主乍乏乎以付仔仕他仗代令仙仞充兄冉冊冬凹出凸刊加功包匆北匝仟半卉卡占卯卮去可古右召叮叩叨叼司叵叫另只史叱台句叭叻四囚外����������������������������������央失奴奶孕它尼巨巧左市布平幼弁弘弗必戊打扔扒扑斥旦朮本未末札正母民氐永汁汀氾犯玄玉瓜瓦甘生用甩田由甲申疋白皮皿目矛矢石示禾穴立丞丟乒乓乩亙交亦亥仿伉伙伊伕伍伐休伏仲件任仰仳份企伋光兇兆先全�".split(""); for (j = 0; j != D[165].length; ++j) if (D[165][j].charCodeAt(0) !== 65533) { e[D[165][j]] = 42240 + j; d[42240 + j] = D[165][j] } D[166] = "����������������������������������������������������������������共再冰列刑划刎刖劣匈匡匠印危吉吏同吊吐吁吋各向名合吃后吆吒因回囝圳地在圭圬圯圩夙多夷夸妄奸妃好她如妁字存宇守宅安寺尖屹州帆并年����������������������������������式弛忙忖戎戌戍成扣扛托收早旨旬旭曲曳有朽朴朱朵次此死氖汝汗汙江池汐汕污汛汍汎灰牟牝百竹米糸缶羊羽老考而耒耳聿肉肋肌臣自至臼舌舛舟艮色艾虫血行衣西阡串亨位住佇佗佞伴佛何估佐佑伽伺伸佃佔似但佣�".split(""); for (j = 0; j != D[166].length; ++j) if (D[166][j].charCodeAt(0) !== 65533) { e[D[166][j]] = 42496 + j; d[42496 + j] = D[166][j] } D[167] = "����������������������������������������������������������������作你伯低伶余佝佈佚兌克免兵冶冷別判利刪刨劫助努劬匣即卵吝吭吞吾否呎吧呆呃吳呈呂君吩告吹吻吸吮吵吶吠吼呀吱含吟听囪困囤囫坊坑址坍����������������������������������均坎圾坐坏圻壯夾妝妒妨妞妣妙妖妍妤妓妊妥孝孜孚孛完宋宏尬局屁尿尾岐岑岔岌巫希序庇床廷弄弟彤形彷役忘忌志忍忱快忸忪戒我抄抗抖技扶抉扭把扼找批扳抒扯折扮投抓抑抆改攻攸旱更束李杏材村杜杖杞杉杆杠�".split(""); for (j = 0; j != D[167].length; ++j) if (D[167][j].charCodeAt(0) !== 65533) { e[D[167][j]] = 42752 + j; d[42752 + j] = D[167][j] } D[168] = "����������������������������������������������������������������杓杗步每求汞沙沁沈沉沅沛汪決沐汰沌汨沖沒汽沃汲汾汴沆汶沍沔沘沂灶灼災灸牢牡牠狄狂玖甬甫男甸皂盯矣私秀禿究系罕肖肓肝肘肛肚育良芒����������������������������������芋芍見角言谷豆豕貝赤走足身車辛辰迂迆迅迄巡邑邢邪邦那酉釆里防阮阱阪阬並乖乳事些亞享京佯依侍佳使佬供例來侃佰併侈佩佻侖佾侏侑佺兔兒兕兩具其典冽函刻券刷刺到刮制剁劾劻卒協卓卑卦卷卸卹取叔受味呵�".split(""); for (j = 0; j != D[168].length; ++j) if (D[168][j].charCodeAt(0) !== 65533) { e[D[168][j]] = 43008 + j; d[43008 + j] = D[168][j] } D[169] = "����������������������������������������������������������������咖呸咕咀呻呷咄咒咆呼咐呱呶和咚呢周咋命咎固垃坷坪坩坡坦坤坼夜奉奇奈奄奔妾妻委妹妮姑姆姐姍始姓姊妯妳姒姅孟孤季宗定官宜宙宛尚屈居����������������������������������屆岷岡岸岩岫岱岳帘帚帖帕帛帑幸庚店府底庖延弦弧弩往征彿彼忝忠忽念忿怏怔怯怵怖怪怕怡性怩怫怛或戕房戾所承拉拌拄抿拂抹拒招披拓拔拋拈抨抽押拐拙拇拍抵拚抱拘拖拗拆抬拎放斧於旺昔易昌昆昂明昀昏昕昊�".split(""); for (j = 0; j != D[169].length; ++j) if (D[169][j].charCodeAt(0) !== 65533) { e[D[169][j]] = 43264 + j; d[43264 + j] = D[169][j] } D[170] = "����������������������������������������������������������������昇服朋杭枋枕東果杳杷枇枝林杯杰板枉松析杵枚枓杼杪杲欣武歧歿氓氛泣注泳沱泌泥河沽沾沼波沫法泓沸泄油況沮泗泅泱沿治泡泛泊沬泯泜泖泠����������������������������������炕炎炒炊炙爬爭爸版牧物狀狎狙狗狐玩玨玟玫玥甽疝疙疚的盂盲直知矽社祀祁秉秈空穹竺糾罔羌羋者肺肥肢肱股肫肩肴肪肯臥臾舍芳芝芙芭芽芟芹花芬芥芯芸芣芰芾芷虎虱初表軋迎返近邵邸邱邶采金長門阜陀阿阻附�".split(""); for (j = 0; j != D[170].length; ++j) if (D[170][j].charCodeAt(0) !== 65533) { e[D[170][j]] = 43520 + j; d[43520 + j] = D[170][j] } D[171] = "����������������������������������������������������������������陂隹雨青非亟亭亮信侵侯便俠俑俏保促侶俘俟俊俗侮俐俄係俚俎俞侷兗冒冑冠剎剃削前剌剋則勇勉勃勁匍南卻厚叛咬哀咨哎哉咸咦咳哇哂咽咪品����������������������������������哄哈咯咫咱咻咩咧咿囿垂型垠垣垢城垮垓奕契奏奎奐姜姘姿姣姨娃姥姪姚姦威姻孩宣宦室客宥封屎屏屍屋峙峒巷帝帥帟幽庠度建弈弭彥很待徊律徇後徉怒思怠急怎怨恍恰恨恢恆恃恬恫恪恤扁拜挖按拼拭持拮拽指拱拷�".split(""); for (j = 0; j != D[171].length; ++j) if (D[171][j].charCodeAt(0) !== 65533) { e[D[171][j]] = 43776 + j; d[43776 + j] = D[171][j] } D[172] = "����������������������������������������������������������������拯括拾拴挑挂政故斫施既春昭映昧是星昨昱昤曷柿染柱柔某柬架枯柵柩柯柄柑枴柚查枸柏柞柳枰柙柢柝柒歪殃殆段毒毗氟泉洋洲洪流津洌洱洞洗����������������������������������活洽派洶洛泵洹洧洸洩洮洵洎洫炫為炳炬炯炭炸炮炤爰牲牯牴狩狠狡玷珊玻玲珍珀玳甚甭畏界畎畋疫疤疥疢疣癸皆皇皈盈盆盃盅省盹相眉看盾盼眇矜砂研砌砍祆祉祈祇禹禺科秒秋穿突竿竽籽紂紅紀紉紇約紆缸美羿耄�".split(""); for (j = 0; j != D[172].length; ++j) if (D[172][j].charCodeAt(0) !== 65533) { e[D[172][j]] = 44032 + j; d[44032 + j] = D[172][j] } D[173] = "����������������������������������������������������������������耐耍耑耶胖胥胚胃胄背胡胛胎胞胤胝致舢苧范茅苣苛苦茄若茂茉苒苗英茁苜苔苑苞苓苟苯茆虐虹虻虺衍衫要觔計訂訃貞負赴赳趴軍軌述迦迢迪迥����������������������������������迭迫迤迨郊郎郁郃酋酊重閂限陋陌降面革韋韭音頁風飛食首香乘亳倌倍倣俯倦倥俸倩倖倆值借倚倒們俺倀倔倨俱倡個候倘俳修倭倪俾倫倉兼冤冥冢凍凌准凋剖剜剔剛剝匪卿原厝叟哨唐唁唷哼哥哲唆哺唔哩哭員唉哮哪�".split(""); for (j = 0; j != D[173].length; ++j) if (D[173][j].charCodeAt(0) !== 65533) { e[D[173][j]] = 44288 + j; d[44288 + j] = D[173][j] } D[174] = "����������������������������������������������������������������哦唧唇哽唏圃圄埂埔埋埃堉夏套奘奚娑娘娜娟娛娓姬娠娣娩娥娌娉孫屘宰害家宴宮宵容宸射屑展屐峭峽峻峪峨峰島崁峴差席師庫庭座弱徒徑徐恙����������������������������������恣恥恐恕恭恩息悄悟悚悍悔悌悅悖扇拳挈拿捎挾振捕捂捆捏捉挺捐挽挪挫挨捍捌效敉料旁旅時晉晏晃晒晌晅晁書朔朕朗校核案框桓根桂桔栩梳栗桌桑栽柴桐桀格桃株桅栓栘桁殊殉殷氣氧氨氦氤泰浪涕消涇浦浸海浙涓�".split(""); for (j = 0; j != D[174].length; ++j) if (D[174][j].charCodeAt(0) !== 65533) { e[D[174][j]] = 44544 + j; d[44544 + j] = D[174][j] } D[175] = "����������������������������������������������������������������浬涉浮浚浴浩涌涊浹涅浥涔烊烘烤烙烈烏爹特狼狹狽狸狷玆班琉珮珠珪珞畔畝畜畚留疾病症疲疳疽疼疹痂疸皋皰益盍盎眩真眠眨矩砰砧砸砝破砷����������������������������������砥砭砠砟砲祕祐祠祟祖神祝祗祚秤秣秧租秦秩秘窄窈站笆笑粉紡紗紋紊素索純紐紕級紜納紙紛缺罟羔翅翁耆耘耕耙耗耽耿胱脂胰脅胭胴脆胸胳脈能脊胼胯臭臬舀舐航舫舨般芻茫荒荔荊茸荐草茵茴荏茲茹茶茗荀茱茨荃�".split(""); for (j = 0; j != D[175].length; ++j) if (D[175][j].charCodeAt(0) !== 65533) { e[D[175][j]] = 44800 + j; d[44800 + j] = D[175][j] } D[176] = "����������������������������������������������������������������虔蚊蚪蚓蚤蚩蚌蚣蚜衰衷袁袂衽衹記訐討訌訕訊託訓訖訏訑豈豺豹財貢起躬軒軔軏辱送逆迷退迺迴逃追逅迸邕郡郝郢酒配酌釘針釗釜釙閃院陣陡����������������������������������陛陝除陘陞隻飢馬骨高鬥鬲鬼乾偺偽停假偃偌做偉健偶偎偕偵側偷偏倏偯偭兜冕凰剪副勒務勘動匐匏匙匿區匾參曼商啪啦啄啞啡啃啊唱啖問啕唯啤唸售啜唬啣唳啁啗圈國圉域堅堊堆埠埤基堂堵執培夠奢娶婁婉婦婪婀�".split(""); for (j = 0; j != D[176].length; ++j) if (D[176][j].charCodeAt(0) !== 65533) { e[D[176][j]] = 45056 + j; d[45056 + j] = D[176][j] } D[177] = "����������������������������������������������������������������娼婢婚婆婊孰寇寅寄寂宿密尉專將屠屜屝崇崆崎崛崖崢崑崩崔崙崤崧崗巢常帶帳帷康庸庶庵庾張強彗彬彩彫得徙從徘御徠徜恿患悉悠您惋悴惦悽����������������������������������情悻悵惜悼惘惕惆惟悸惚惇戚戛扈掠控捲掖探接捷捧掘措捱掩掉掃掛捫推掄授掙採掬排掏掀捻捩捨捺敝敖救教敗啟敏敘敕敔斜斛斬族旋旌旎晝晚晤晨晦晞曹勗望梁梯梢梓梵桿桶梱梧梗械梃棄梭梆梅梔條梨梟梡梂欲殺�".split(""); for (j = 0; j != D[177].length; ++j) if (D[177][j].charCodeAt(0) !== 65533) { e[D[177][j]] = 45312 + j; d[45312 + j] = D[177][j] } D[178] = "����������������������������������������������������������������毫毬氫涎涼淳淙液淡淌淤添淺清淇淋涯淑涮淞淹涸混淵淅淒渚涵淚淫淘淪深淮淨淆淄涪淬涿淦烹焉焊烽烯爽牽犁猜猛猖猓猙率琅琊球理現琍瓠瓶����������������������������������瓷甜產略畦畢異疏痔痕疵痊痍皎盔盒盛眷眾眼眶眸眺硫硃硎祥票祭移窒窕笠笨笛第符笙笞笮粒粗粕絆絃統紮紹紼絀細紳組累終紲紱缽羞羚翌翎習耜聊聆脯脖脣脫脩脰脤舂舵舷舶船莎莞莘荸莢莖莽莫莒莊莓莉莠荷荻荼�".split(""); for (j = 0; j != D[178].length; ++j) if (D[178][j].charCodeAt(0) !== 65533) { e[D[178][j]] = 45568 + j; d[45568 + j] = D[178][j] } D[179] = "����������������������������������������������������������������莆莧處彪蛇蛀蚶蛄蚵蛆蛋蚱蚯蛉術袞袈被袒袖袍袋覓規訪訝訣訥許設訟訛訢豉豚販責貫貨貪貧赧赦趾趺軛軟這逍通逗連速逝逐逕逞造透逢逖逛途����������������������������������部郭都酗野釵釦釣釧釭釩閉陪陵陳陸陰陴陶陷陬雀雪雩章竟頂頃魚鳥鹵鹿麥麻傢傍傅備傑傀傖傘傚最凱割剴創剩勞勝勛博厥啻喀喧啼喊喝喘喂喜喪喔喇喋喃喳單喟唾喲喚喻喬喱啾喉喫喙圍堯堪場堤堰報堡堝堠壹壺奠�".split(""); for (j = 0; j != D[179].length; ++j) if (D[179][j].charCodeAt(0) !== 65533) { e[D[179][j]] = 45824 + j; d[45824 + j] = D[179][j] } D[180] = "����������������������������������������������������������������婷媚婿媒媛媧孳孱寒富寓寐尊尋就嵌嵐崴嵇巽幅帽幀幃幾廊廁廂廄弼彭復循徨惑惡悲悶惠愜愣惺愕惰惻惴慨惱愎惶愉愀愒戟扉掣掌描揀揩揉揆揍����������������������������������插揣提握揖揭揮捶援揪換摒揚揹敞敦敢散斑斐斯普晰晴晶景暑智晾晷曾替期朝棺棕棠棘棗椅棟棵森棧棹棒棲棣棋棍植椒椎棉棚楮棻款欺欽殘殖殼毯氮氯氬港游湔渡渲湧湊渠渥渣減湛湘渤湖湮渭渦湯渴湍渺測湃渝渾滋�".split(""); for (j = 0; j != D[180].length; ++j) if (D[180][j].charCodeAt(0) !== 65533) { e[D[180][j]] = 46080 + j; d[46080 + j] = D[180][j] } D[181] = "����������������������������������������������������������������溉渙湎湣湄湲湩湟焙焚焦焰無然煮焜牌犄犀猶猥猴猩琺琪琳琢琥琵琶琴琯琛琦琨甥甦畫番痢痛痣痙痘痞痠登發皖皓皴盜睏短硝硬硯稍稈程稅稀窘����������������������������������窗窖童竣等策筆筐筒答筍筋筏筑粟粥絞結絨絕紫絮絲絡給絢絰絳善翔翕耋聒肅腕腔腋腑腎脹腆脾腌腓腴舒舜菩萃菸萍菠菅萋菁華菱菴著萊菰萌菌菽菲菊萸萎萄菜萇菔菟虛蛟蛙蛭蛔蛛蛤蛐蛞街裁裂袱覃視註詠評詞証詁�".split(""); for (j = 0; j != D[181].length; ++j) if (D[181][j].charCodeAt(0) !== 65533) { e[D[181][j]] = 46336 + j; d[46336 + j] = D[181][j] } D[182] = "����������������������������������������������������������������詔詛詐詆訴診訶詖象貂貯貼貳貽賁費賀貴買貶貿貸越超趁跎距跋跚跑跌跛跆軻軸軼辜逮逵週逸進逶鄂郵鄉郾酣酥量鈔鈕鈣鈉鈞鈍鈐鈇鈑閔閏開閑����������������������������������間閒閎隊階隋陽隅隆隍陲隄雁雅雄集雇雯雲韌項順須飧飪飯飩飲飭馮馭黃黍黑亂傭債傲傳僅傾催傷傻傯僇剿剷剽募勦勤勢勣匯嗟嗨嗓嗦嗎嗜嗇嗑嗣嗤嗯嗚嗡嗅嗆嗥嗉園圓塞塑塘塗塚塔填塌塭塊塢塒塋奧嫁嫉嫌媾媽媼�".split(""); for (j = 0; j != D[182].length; ++j) if (D[182][j].charCodeAt(0) !== 65533) { e[D[182][j]] = 46592 + j; d[46592 + j] = D[182][j] } D[183] = "����������������������������������������������������������������媳嫂媲嵩嵯幌幹廉廈弒彙徬微愚意慈感想愛惹愁愈慎慌慄慍愾愴愧愍愆愷戡戢搓搾搞搪搭搽搬搏搜搔損搶搖搗搆敬斟新暗暉暇暈暖暄暘暍會榔業����������������������������������楚楷楠楔極椰概楊楨楫楞楓楹榆楝楣楛歇歲毀殿毓毽溢溯滓溶滂源溝滇滅溥溘溼溺溫滑準溜滄滔溪溧溴煎煙煩煤煉照煜煬煦煌煥煞煆煨煖爺牒猷獅猿猾瑯瑚瑕瑟瑞瑁琿瑙瑛瑜當畸瘀痰瘁痲痱痺痿痴痳盞盟睛睫睦睞督�".split(""); for (j = 0; j != D[183].length; ++j) if (D[183][j].charCodeAt(0) !== 65533) { e[D[183][j]] = 46848 + j; d[46848 + j] = D[183][j] } D[184] = "����������������������������������������������������������������睹睪睬睜睥睨睢矮碎碰碗碘碌碉硼碑碓硿祺祿禁萬禽稜稚稠稔稟稞窟窠筷節筠筮筧粱粳粵經絹綑綁綏絛置罩罪署義羨群聖聘肆肄腱腰腸腥腮腳腫����������������������������������腹腺腦舅艇蒂葷落萱葵葦葫葉葬葛萼萵葡董葩葭葆虞虜號蛹蜓蜈蜇蜀蛾蛻蜂蜃蜆蜊衙裟裔裙補裘裝裡裊裕裒覜解詫該詳試詩詰誇詼詣誠話誅詭詢詮詬詹詻訾詨豢貊貉賊資賈賄貲賃賂賅跡跟跨路跳跺跪跤跦躲較載軾輊�".split(""); for (j = 0; j != D[184].length; ++j) if (D[184][j].charCodeAt(0) !== 65533) { e[D[184][j]] = 47104 + j; d[47104 + j] = D[184][j] } D[185] = "����������������������������������������������������������������辟農運遊道遂達逼違遐遇遏過遍遑逾遁鄒鄗酬酪酩釉鈷鉗鈸鈽鉀鈾鉛鉋鉤鉑鈴鉉鉍鉅鈹鈿鉚閘隘隔隕雍雋雉雊雷電雹零靖靴靶預頑頓頊頒頌飼飴����������������������������������飽飾馳馱馴髡鳩麂鼎鼓鼠僧僮僥僖僭僚僕像僑僱僎僩兢凳劃劂匱厭嗾嘀嘛嘗嗽嘔嘆嘉嘍嘎嗷嘖嘟嘈嘐嗶團圖塵塾境墓墊塹墅塽壽夥夢夤奪奩嫡嫦嫩嫗嫖嫘嫣孵寞寧寡寥實寨寢寤察對屢嶄嶇幛幣幕幗幔廓廖弊彆彰徹慇�".split(""); for (j = 0; j != D[185].length; ++j) if (D[185][j].charCodeAt(0) !== 65533) { e[D[185][j]] = 47360 + j; d[47360 + j] = D[185][j] } D[186] = "����������������������������������������������������������������愿態慷慢慣慟慚慘慵截撇摘摔撤摸摟摺摑摧搴摭摻敲斡旗旖暢暨暝榜榨榕槁榮槓構榛榷榻榫榴槐槍榭槌榦槃榣歉歌氳漳演滾漓滴漩漾漠漬漏漂漢����������������������������������滿滯漆漱漸漲漣漕漫漯澈漪滬漁滲滌滷熔熙煽熊熄熒爾犒犖獄獐瑤瑣瑪瑰瑭甄疑瘧瘍瘋瘉瘓盡監瞄睽睿睡磁碟碧碳碩碣禎福禍種稱窪窩竭端管箕箋筵算箝箔箏箸箇箄粹粽精綻綰綜綽綾綠緊綴網綱綺綢綿綵綸維緒緇綬�".split(""); for (j = 0; j != D[186].length; ++j) if (D[186][j].charCodeAt(0) !== 65533) { e[D[186][j]] = 47616 + j; d[47616 + j] = D[186][j] } D[187] = "����������������������������������������������������������������罰翠翡翟聞聚肇腐膀膏膈膊腿膂臧臺與舔舞艋蓉蒿蓆蓄蒙蒞蒲蒜蓋蒸蓀蓓蒐蒼蓑蓊蜿蜜蜻蜢蜥蜴蜘蝕蜷蜩裳褂裴裹裸製裨褚裯誦誌語誣認誡誓誤����������������������������������說誥誨誘誑誚誧豪貍貌賓賑賒赫趙趕跼輔輒輕輓辣遠遘遜遣遙遞遢遝遛鄙鄘鄞酵酸酷酴鉸銀銅銘銖鉻銓銜銨鉼銑閡閨閩閣閥閤隙障際雌雒需靼鞅韶頗領颯颱餃餅餌餉駁骯骰髦魁魂鳴鳶鳳麼鼻齊億儀僻僵價儂儈儉儅凜�".split(""); for (j = 0; j != D[187].length; ++j) if (D[187][j].charCodeAt(0) !== 65533) { e[D[187][j]] = 47872 + j; d[47872 + j] = D[187][j] } D[188] = "����������������������������������������������������������������劇劈劉劍劊勰厲嘮嘻嘹嘲嘿嘴嘩噓噎噗噴嘶嘯嘰墀墟增墳墜墮墩墦奭嬉嫻嬋嫵嬌嬈寮寬審寫層履嶝嶔幢幟幡廢廚廟廝廣廠彈影德徵慶慧慮慝慕憂����������������������������������慼慰慫慾憧憐憫憎憬憚憤憔憮戮摩摯摹撞撲撈撐撰撥撓撕撩撒撮播撫撚撬撙撢撳敵敷數暮暫暴暱樣樟槨樁樞標槽模樓樊槳樂樅槭樑歐歎殤毅毆漿潼澄潑潦潔澆潭潛潸潮澎潺潰潤澗潘滕潯潠潟熟熬熱熨牖犛獎獗瑩璋璃�".split(""); for (j = 0; j != D[188].length; ++j) if (D[188][j].charCodeAt(0) !== 65533) { e[D[188][j]] = 48128 + j; d[48128 + j] = D[188][j] } D[189] = "����������������������������������������������������������������瑾璀畿瘠瘩瘟瘤瘦瘡瘢皚皺盤瞎瞇瞌瞑瞋磋磅確磊碾磕碼磐稿稼穀稽稷稻窯窮箭箱範箴篆篇篁箠篌糊締練緯緻緘緬緝編緣線緞緩綞緙緲緹罵罷羯����������������������������������翩耦膛膜膝膠膚膘蔗蔽蔚蓮蔬蔭蔓蔑蔣蔡蔔蓬蔥蓿蔆螂蝴蝶蝠蝦蝸蝨蝙蝗蝌蝓衛衝褐複褒褓褕褊誼諒談諄誕請諸課諉諂調誰論諍誶誹諛豌豎豬賠賞賦賤賬賭賢賣賜質賡赭趟趣踫踐踝踢踏踩踟踡踞躺輝輛輟輩輦輪輜輞�".split(""); for (j = 0; j != D[189].length; ++j) if (D[189][j].charCodeAt(0) !== 65533) { e[D[189][j]] = 48384 + j; d[48384 + j] = D[189][j] } D[190] = "����������������������������������������������������������������輥適遮遨遭遷鄰鄭鄧鄱醇醉醋醃鋅銻銷鋪銬鋤鋁銳銼鋒鋇鋰銲閭閱霄霆震霉靠鞍鞋鞏頡頫頜颳養餓餒餘駝駐駟駛駑駕駒駙骷髮髯鬧魅魄魷魯鴆鴉����������������������������������鴃麩麾黎墨齒儒儘儔儐儕冀冪凝劑劓勳噙噫噹噩噤噸噪器噥噱噯噬噢噶壁墾壇壅奮嬝嬴學寰導彊憲憑憩憊懍憶憾懊懈戰擅擁擋撻撼據擄擇擂操撿擒擔撾整曆曉暹曄曇暸樽樸樺橙橫橘樹橄橢橡橋橇樵機橈歙歷氅濂澱澡�".split(""); for (j = 0; j != D[190].length; ++j) if (D[190][j].charCodeAt(0) !== 65533) { e[D[190][j]] = 48640 + j; d[48640 + j] = D[190][j] } D[191] = "����������������������������������������������������������������濃澤濁澧澳激澹澶澦澠澴熾燉燐燒燈燕熹燎燙燜燃燄獨璜璣璘璟璞瓢甌甍瘴瘸瘺盧盥瞠瞞瞟瞥磨磚磬磧禦積穎穆穌穋窺篙簑築篤篛篡篩篦糕糖縊����������������������������������縑縈縛縣縞縝縉縐罹羲翰翱翮耨膳膩膨臻興艘艙蕊蕙蕈蕨蕩蕃蕉蕭蕪蕞螃螟螞螢融衡褪褲褥褫褡親覦諦諺諫諱謀諜諧諮諾謁謂諷諭諳諶諼豫豭貓賴蹄踱踴蹂踹踵輻輯輸輳辨辦遵遴選遲遼遺鄴醒錠錶鋸錳錯錢鋼錫錄錚�".split(""); for (j = 0; j != D[191].length; ++j) if (D[191][j].charCodeAt(0) !== 65533) { e[D[191][j]] = 48896 + j; d[48896 + j] = D[191][j] } D[192] = "����������������������������������������������������������������錐錦錡錕錮錙閻隧隨險雕霎霑霖霍霓霏靛靜靦鞘頰頸頻頷頭頹頤餐館餞餛餡餚駭駢駱骸骼髻髭鬨鮑鴕鴣鴦鴨鴒鴛默黔龍龜優償儡儲勵嚎嚀嚐嚅嚇����������������������������������嚏壕壓壑壎嬰嬪嬤孺尷屨嶼嶺嶽嶸幫彌徽應懂懇懦懋戲戴擎擊擘擠擰擦擬擱擢擭斂斃曙曖檀檔檄檢檜櫛檣橾檗檐檠歜殮毚氈濘濱濟濠濛濤濫濯澀濬濡濩濕濮濰燧營燮燦燥燭燬燴燠爵牆獰獲璩環璦璨癆療癌盪瞳瞪瞰瞬�".split(""); for (j = 0; j != D[192].length; ++j) if (D[192][j].charCodeAt(0) !== 65533) { e[D[192][j]] = 49152 + j; d[49152 + j] = D[192][j] } D[193] = "����������������������������������������������������������������瞧瞭矯磷磺磴磯礁禧禪穗窿簇簍篾篷簌篠糠糜糞糢糟糙糝縮績繆縷縲繃縫總縱繅繁縴縹繈縵縿縯罄翳翼聱聲聰聯聳臆臃膺臂臀膿膽臉膾臨舉艱薪����������������������������������薄蕾薜薑薔薯薛薇薨薊虧蟀蟑螳蟒蟆螫螻螺蟈蟋褻褶襄褸褽覬謎謗謙講謊謠謝謄謐豁谿豳賺賽購賸賻趨蹉蹋蹈蹊轄輾轂轅輿避遽還邁邂邀鄹醣醞醜鍍鎂錨鍵鍊鍥鍋錘鍾鍬鍛鍰鍚鍔闊闋闌闈闆隱隸雖霜霞鞠韓顆颶餵騁�".split(""); for (j = 0; j != D[193].length; ++j) if (D[193][j].charCodeAt(0) !== 65533) { e[D[193][j]] = 49408 + j; d[49408 + j] = D[193][j] } D[194] = "����������������������������������������������������������������駿鮮鮫鮪鮭鴻鴿麋黏點黜黝黛鼾齋叢嚕嚮壙壘嬸彝懣戳擴擲擾攆擺擻擷斷曜朦檳檬櫃檻檸櫂檮檯歟歸殯瀉瀋濾瀆濺瀑瀏燻燼燾燸獷獵璧璿甕癖癘����������������������������������癒瞽瞿瞻瞼礎禮穡穢穠竄竅簫簧簪簞簣簡糧織繕繞繚繡繒繙罈翹翻職聶臍臏舊藏薩藍藐藉薰薺薹薦蟯蟬蟲蟠覆覲觴謨謹謬謫豐贅蹙蹣蹦蹤蹟蹕軀轉轍邇邃邈醫醬釐鎔鎊鎖鎢鎳鎮鎬鎰鎘鎚鎗闔闖闐闕離雜雙雛雞霤鞣鞦�".split(""); for (j = 0; j != D[194].length; ++j) if (D[194][j].charCodeAt(0) !== 65533) { e[D[194][j]] = 49664 + j; d[49664 + j] = D[194][j] } D[195] = "����������������������������������������������������������������鞭韹額顏題顎顓颺餾餿餽餮馥騎髁鬃鬆魏魎魍鯊鯉鯽鯈鯀鵑鵝鵠黠鼕鼬儳嚥壞壟壢寵龐廬懲懷懶懵攀攏曠曝櫥櫝櫚櫓瀛瀟瀨瀚瀝瀕瀘爆爍牘犢獸����������������������������������獺璽瓊瓣疇疆癟癡矇礙禱穫穩簾簿簸簽簷籀繫繭繹繩繪羅繳羶羹羸臘藩藝藪藕藤藥藷蟻蠅蠍蟹蟾襠襟襖襞譁譜識證譚譎譏譆譙贈贊蹼蹲躇蹶蹬蹺蹴轔轎辭邊邋醱醮鏡鏑鏟鏃鏈鏜鏝鏖鏢鏍鏘鏤鏗鏨關隴難霪霧靡韜韻類�".split(""); for (j = 0; j != D[195].length; ++j) if (D[195][j].charCodeAt(0) !== 65533) { e[D[195][j]] = 49920 + j; d[49920 + j] = D[195][j] } D[196] = "����������������������������������������������������������������願顛颼饅饉騖騙鬍鯨鯧鯖鯛鶉鵡鵲鵪鵬麒麗麓麴勸嚨嚷嚶嚴嚼壤孀孃孽寶巉懸懺攘攔攙曦朧櫬瀾瀰瀲爐獻瓏癢癥礦礪礬礫竇競籌籃籍糯糰辮繽繼����������������������������������纂罌耀臚艦藻藹蘑藺蘆蘋蘇蘊蠔蠕襤覺觸議譬警譯譟譫贏贍躉躁躅躂醴釋鐘鐃鏽闡霰飄饒饑馨騫騰騷騵鰓鰍鹹麵黨鼯齟齣齡儷儸囁囀囂夔屬巍懼懾攝攜斕曩櫻欄櫺殲灌爛犧瓖瓔癩矓籐纏續羼蘗蘭蘚蠣蠢蠡蠟襪襬覽譴�".split(""); for (j = 0; j != D[196].length; ++j) if (D[196][j].charCodeAt(0) !== 65533) { e[D[196][j]] = 50176 + j; d[50176 + j] = D[196][j] } D[197] = "����������������������������������������������������������������護譽贓躊躍躋轟辯醺鐮鐳鐵鐺鐸鐲鐫闢霸霹露響顧顥饗驅驃驀騾髏魔魑鰭鰥鶯鶴鷂鶸麝黯鼙齜齦齧儼儻囈囊囉孿巔巒彎懿攤權歡灑灘玀瓤疊癮癬����������������������������������禳籠籟聾聽臟襲襯觼讀贖贗躑躓轡酈鑄鑑鑒霽霾韃韁顫饕驕驍髒鬚鱉鰱鰾鰻鷓鷗鼴齬齪龔囌巖戀攣攫攪曬欐瓚竊籤籣籥纓纖纔臢蘸蘿蠱變邐邏鑣鑠鑤靨顯饜驚驛驗髓體髑鱔鱗鱖鷥麟黴囑壩攬灞癱癲矗罐羈蠶蠹衢讓讒�".split(""); for (j = 0; j != D[197].length; ++j) if (D[197][j].charCodeAt(0) !== 65533) { e[D[197][j]] = 50432 + j; d[50432 + j] = D[197][j] } D[198] = "����������������������������������������������������������������讖艷贛釀鑪靂靈靄韆顰驟鬢魘鱟鷹鷺鹼鹽鼇齷齲廳欖灣籬籮蠻觀躡釁鑲鑰顱饞髖鬣黌灤矚讚鑷韉驢驥纜讜躪釅鑽鑾鑼鱷鱸黷豔鑿鸚爨驪鬱鸛鸞籲���������������������������������������������������������������������������������������������������������������������������������".split(""); for (j = 0; j != D[198].length; ++j) if (D[198][j].charCodeAt(0) !== 65533) { e[D[198][j]] = 50688 + j; d[50688 + j] = D[198][j] } D[201] = "����������������������������������������������������������������乂乜凵匚厂万丌乇亍囗兀屮彳丏冇与丮亓仂仉仈冘勼卬厹圠夃夬尐巿旡殳毌气爿丱丼仨仜仩仡仝仚刌匜卌圢圣夗夯宁宄尒尻屴屳帄庀庂忉戉扐氕����������������������������������氶汃氿氻犮犰玊禸肊阞伎优伬仵伔仱伀价伈伝伂伅伢伓伄仴伒冱刓刉刐劦匢匟卍厊吇囡囟圮圪圴夼妀奼妅奻奾奷奿孖尕尥屼屺屻屾巟幵庄异弚彴忕忔忏扜扞扤扡扦扢扙扠扚扥旯旮朾朹朸朻机朿朼朳氘汆汒汜汏汊汔汋�".split(""); for (j = 0; j != D[201].length; ++j) if (D[201][j].charCodeAt(0) !== 65533) { e[D[201][j]] = 51456 + j; d[51456 + j] = D[201][j] } D[202] = "����������������������������������������������������������������汌灱牞犴犵玎甪癿穵网艸艼芀艽艿虍襾邙邗邘邛邔阢阤阠阣佖伻佢佉体佤伾佧佒佟佁佘伭伳伿佡冏冹刜刞刡劭劮匉卣卲厎厏吰吷吪呔呅吙吜吥吘����������������������������������吽呏呁吨吤呇囮囧囥坁坅坌坉坋坒夆奀妦妘妠妗妎妢妐妏妧妡宎宒尨尪岍岏岈岋岉岒岊岆岓岕巠帊帎庋庉庌庈庍弅弝彸彶忒忑忐忭忨忮忳忡忤忣忺忯忷忻怀忴戺抃抌抎抏抔抇扱扻扺扰抁抈扷扽扲扴攷旰旴旳旲旵杅杇�".split(""); for (j = 0; j != D[202].length; ++j) if (D[202][j].charCodeAt(0) !== 65533) { e[D[202][j]] = 51712 + j; d[51712 + j] = D[202][j] } D[203] = "����������������������������������������������������������������杙杕杌杈杝杍杚杋毐氙氚汸汧汫沄沋沏汱汯汩沚汭沇沕沜汦汳汥汻沎灴灺牣犿犽狃狆狁犺狅玕玗玓玔玒町甹疔疕皁礽耴肕肙肐肒肜芐芏芅芎芑芓����������������������������������芊芃芄豸迉辿邟邡邥邞邧邠阰阨阯阭丳侘佼侅佽侀侇佶佴侉侄佷佌侗佪侚佹侁佸侐侜侔侞侒侂侕佫佮冞冼冾刵刲刳剆刱劼匊匋匼厒厔咇呿咁咑咂咈呫呺呾呥呬呴呦咍呯呡呠咘呣呧呤囷囹坯坲坭坫坱坰坶垀坵坻坳坴坢�".split(""); for (j = 0; j != D[203].length; ++j) if (D[203][j].charCodeAt(0) !== 65533) { e[D[203][j]] = 51968 + j; d[51968 + j] = D[203][j] } D[204] = "����������������������������������������������������������������坨坽夌奅妵妺姏姎妲姌姁妶妼姃姖妱妽姀姈妴姇孢孥宓宕屄屇岮岤岠岵岯岨岬岟岣岭岢岪岧岝岥岶岰岦帗帔帙弨弢弣弤彔徂彾彽忞忥怭怦怙怲怋����������������������������������怴怊怗怳怚怞怬怢怍怐怮怓怑怌怉怜戔戽抭抴拑抾抪抶拊抮抳抯抻抩抰抸攽斨斻昉旼昄昒昈旻昃昋昍昅旽昑昐曶朊枅杬枎枒杶杻枘枆构杴枍枌杺枟枑枙枃杽极杸杹枔欥殀歾毞氝沓泬泫泮泙沶泔沭泧沷泐泂沺泃泆泭泲�".split(""); for (j = 0; j != D[204].length; ++j) if (D[204][j].charCodeAt(0) !== 65533) { e[D[204][j]] = 52224 + j; d[52224 + j] = D[204][j] } D[205] = "����������������������������������������������������������������泒泝沴沊沝沀泞泀洰泍泇沰泹泏泩泑炔炘炅炓炆炄炑炖炂炚炃牪狖狋狘狉狜狒狔狚狌狑玤玡玭玦玢玠玬玝瓝瓨甿畀甾疌疘皯盳盱盰盵矸矼矹矻矺����������������������������������矷祂礿秅穸穻竻籵糽耵肏肮肣肸肵肭舠芠苀芫芚芘芛芵芧芮芼芞芺芴芨芡芩苂芤苃芶芢虰虯虭虮豖迒迋迓迍迖迕迗邲邴邯邳邰阹阽阼阺陃俍俅俓侲俉俋俁俔俜俙侻侳俛俇俖侺俀侹俬剄剉勀勂匽卼厗厖厙厘咺咡咭咥哏�".split(""); for (j = 0; j != D[205].length; ++j) if (D[205][j].charCodeAt(0) !== 65533) { e[D[205][j]] = 52480 + j; d[52480 + j] = D[205][j] } D[206] = "����������������������������������������������������������������哃茍咷咮哖咶哅哆咠呰咼咢咾呲哞咰垵垞垟垤垌垗垝垛垔垘垏垙垥垚垕壴复奓姡姞姮娀姱姝姺姽姼姶姤姲姷姛姩姳姵姠姾姴姭宨屌峐峘峌峗峋峛����������������������������������峞峚峉峇峊峖峓峔峏峈峆峎峟峸巹帡帢帣帠帤庰庤庢庛庣庥弇弮彖徆怷怹恔恲恞恅恓恇恉恛恌恀恂恟怤恄恘恦恮扂扃拏挍挋拵挎挃拫拹挏挌拸拶挀挓挔拺挕拻拰敁敃斪斿昶昡昲昵昜昦昢昳昫昺昝昴昹昮朏朐柁柲柈枺�".split(""); for (j = 0; j != D[206].length; ++j) if (D[206][j].charCodeAt(0) !== 65533) { e[D[206][j]] = 52736 + j; d[52736 + j] = D[206][j] } D[207] = "����������������������������������������������������������������柜枻柸柘柀枷柅柫柤柟枵柍枳柷柶柮柣柂枹柎柧柰枲柼柆柭柌枮柦柛柺柉柊柃柪柋欨殂殄殶毖毘毠氠氡洨洴洭洟洼洿洒洊泚洳洄洙洺洚洑洀洝浂����������������������������������洁洘洷洃洏浀洇洠洬洈洢洉洐炷炟炾炱炰炡炴炵炩牁牉牊牬牰牳牮狊狤狨狫狟狪狦狣玅珌珂珈珅玹玶玵玴珫玿珇玾珃珆玸珋瓬瓮甮畇畈疧疪癹盄眈眃眄眅眊盷盻盺矧矨砆砑砒砅砐砏砎砉砃砓祊祌祋祅祄秕种秏秖秎窀�".split(""); for (j = 0; j != D[207].length; ++j) if (D[207][j].charCodeAt(0) !== 65533) { e[D[207][j]] = 52992 + j; d[52992 + j] = D[207][j] } D[208] = "����������������������������������������������������������������穾竑笀笁籺籸籹籿粀粁紃紈紁罘羑羍羾耇耎耏耔耷胘胇胠胑胈胂胐胅胣胙胜胊胕胉胏胗胦胍臿舡芔苙苾苹茇苨茀苕茺苫苖苴苬苡苲苵茌苻苶苰苪����������������������������������苤苠苺苳苭虷虴虼虳衁衎衧衪衩觓訄訇赲迣迡迮迠郱邽邿郕郅邾郇郋郈釔釓陔陏陑陓陊陎倞倅倇倓倢倰倛俵俴倳倷倬俶俷倗倜倠倧倵倯倱倎党冔冓凊凄凅凈凎剡剚剒剞剟剕剢勍匎厞唦哢唗唒哧哳哤唚哿唄唈哫唑唅哱�".split(""); for (j = 0; j != D[208].length; ++j) if (D[208][j].charCodeAt(0) !== 65533) { e[D[208][j]] = 53248 + j; d[53248 + j] = D[208][j] } D[209] = "����������������������������������������������������������������唊哻哷哸哠唎唃唋圁圂埌堲埕埒垺埆垽垼垸垶垿埇埐垹埁夎奊娙娖娭娮娕娏娗娊娞娳孬宧宭宬尃屖屔峬峿峮峱峷崀峹帩帨庨庮庪庬弳弰彧恝恚恧����������������������������������恁悢悈悀悒悁悝悃悕悛悗悇悜悎戙扆拲挐捖挬捄捅挶捃揤挹捋捊挼挩捁挴捘捔捙挭捇挳捚捑挸捗捀捈敊敆旆旃旄旂晊晟晇晑朒朓栟栚桉栲栳栻桋桏栖栱栜栵栫栭栯桎桄栴栝栒栔栦栨栮桍栺栥栠欬欯欭欱欴歭肂殈毦毤�".split(""); for (j = 0; j != D[209].length; ++j) if (D[209][j].charCodeAt(0) !== 65533) { e[D[209][j]] = 53504 + j; d[53504 + j] = D[209][j] } D[210] = "����������������������������������������������������������������毨毣毢毧氥浺浣浤浶洍浡涒浘浢浭浯涑涍淯浿涆浞浧浠涗浰浼浟涂涘洯浨涋浾涀涄洖涃浻浽浵涐烜烓烑烝烋缹烢烗烒烞烠烔烍烅烆烇烚烎烡牂牸����������������������������������牷牶猀狺狴狾狶狳狻猁珓珙珥珖玼珧珣珩珜珒珛珔珝珚珗珘珨瓞瓟瓴瓵甡畛畟疰痁疻痄痀疿疶疺皊盉眝眛眐眓眒眣眑眕眙眚眢眧砣砬砢砵砯砨砮砫砡砩砳砪砱祔祛祏祜祓祒祑秫秬秠秮秭秪秜秞秝窆窉窅窋窌窊窇竘笐�".split(""); for (j = 0; j != D[210].length; ++j) if (D[210][j].charCodeAt(0) !== 65533) { e[D[210][j]] = 53760 + j; d[53760 + j] = D[210][j] } D[211] = "����������������������������������������������������������������笄笓笅笏笈笊笎笉笒粄粑粊粌粈粍粅紞紝紑紎紘紖紓紟紒紏紌罜罡罞罠罝罛羖羒翃翂翀耖耾耹胺胲胹胵脁胻脀舁舯舥茳茭荄茙荑茥荖茿荁茦茜茢����������������������������������荂荎茛茪茈茼荍茖茤茠茷茯茩荇荅荌荓茞茬荋茧荈虓虒蚢蚨蚖蚍蚑蚞蚇蚗蚆蚋蚚蚅蚥蚙蚡蚧蚕蚘蚎蚝蚐蚔衃衄衭衵衶衲袀衱衿衯袃衾衴衼訒豇豗豻貤貣赶赸趵趷趶軑軓迾迵适迿迻逄迼迶郖郠郙郚郣郟郥郘郛郗郜郤酐�".split(""); for (j = 0; j != D[211].length; ++j) if (D[211][j].charCodeAt(0) !== 65533) { e[D[211][j]] = 54016 + j; d[54016 + j] = D[211][j] } D[212] = "����������������������������������������������������������������酎酏釕釢釚陜陟隼飣髟鬯乿偰偪偡偞偠偓偋偝偲偈偍偁偛偊偢倕偅偟偩偫偣偤偆偀偮偳偗偑凐剫剭剬剮勖勓匭厜啵啶唼啍啐唴唪啑啢唶唵唰啒啅����������������������������������唌唲啥啎唹啈唭唻啀啋圊圇埻堔埢埶埜埴堀埭埽堈埸堋埳埏堇埮埣埲埥埬埡堎埼堐埧堁堌埱埩埰堍堄奜婠婘婕婧婞娸娵婭婐婟婥婬婓婤婗婃婝婒婄婛婈媎娾婍娹婌婰婩婇婑婖婂婜孲孮寁寀屙崞崋崝崚崠崌崨崍崦崥崏�".split(""); for (j = 0; j != D[212].length; ++j) if (D[212][j].charCodeAt(0) !== 65533) { e[D[212][j]] = 54272 + j; d[54272 + j] = D[212][j] } D[213] = "����������������������������������������������������������������崰崒崣崟崮帾帴庱庴庹庲庳弶弸徛徖徟悊悐悆悾悰悺惓惔惏惤惙惝惈悱惛悷惊悿惃惍惀挲捥掊掂捽掽掞掭掝掗掫掎捯掇掐据掯捵掜捭掮捼掤挻掟����������������������������������捸掅掁掑掍捰敓旍晥晡晛晙晜晢朘桹梇梐梜桭桮梮梫楖桯梣梬梩桵桴梲梏桷梒桼桫桲梪梀桱桾梛梖梋梠梉梤桸桻梑梌梊桽欶欳欷欸殑殏殍殎殌氪淀涫涴涳湴涬淩淢涷淶淔渀淈淠淟淖涾淥淜淝淛淴淊涽淭淰涺淕淂淏淉�".split(""); for (j = 0; j != D[213].length; ++j) if (D[213][j].charCodeAt(0) !== 65533) { e[D[213][j]] = 54528 + j; d[54528 + j] = D[213][j] } D[214] = "����������������������������������������������������������������淐淲淓淽淗淍淣涻烺焍烷焗烴焌烰焄烳焐烼烿焆焓焀烸烶焋焂焎牾牻牼牿猝猗猇猑猘猊猈狿猏猞玈珶珸珵琄琁珽琇琀珺珼珿琌琋珴琈畤畣痎痒痏����������������������������������痋痌痑痐皏皉盓眹眯眭眱眲眴眳眽眥眻眵硈硒硉硍硊硌砦硅硐祤祧祩祪祣祫祡离秺秸秶秷窏窔窐笵筇笴笥笰笢笤笳笘笪笝笱笫笭笯笲笸笚笣粔粘粖粣紵紽紸紶紺絅紬紩絁絇紾紿絊紻紨罣羕羜羝羛翊翋翍翐翑翇翏翉耟�".split(""); for (j = 0; j != D[214].length; ++j) if (D[214][j].charCodeAt(0) !== 65533) { e[D[214][j]] = 54784 + j; d[54784 + j] = D[214][j] } D[215] = "����������������������������������������������������������������耞耛聇聃聈脘脥脙脛脭脟脬脞脡脕脧脝脢舑舸舳舺舴舲艴莐莣莨莍荺荳莤荴莏莁莕莙荵莔莩荽莃莌莝莛莪莋荾莥莯莈莗莰荿莦莇莮荶莚虙虖蚿蚷����������������������������������蛂蛁蛅蚺蚰蛈蚹蚳蚸蛌蚴蚻蚼蛃蚽蚾衒袉袕袨袢袪袚袑袡袟袘袧袙袛袗袤袬袌袓袎覂觖觙觕訰訧訬訞谹谻豜豝豽貥赽赻赹趼跂趹趿跁軘軞軝軜軗軠軡逤逋逑逜逌逡郯郪郰郴郲郳郔郫郬郩酖酘酚酓酕釬釴釱釳釸釤釹釪�".split(""); for (j = 0; j != D[215].length; ++j) if (D[215][j].charCodeAt(0) !== 65533) { e[D[215][j]] = 55040 + j; d[55040 + j] = D[215][j] } D[216] = "����������������������������������������������������������������釫釷釨釮镺閆閈陼陭陫陱陯隿靪頄飥馗傛傕傔傞傋傣傃傌傎傝偨傜傒傂傇兟凔匒匑厤厧喑喨喥喭啷噅喢喓喈喏喵喁喣喒喤啽喌喦啿喕喡喎圌堩堷����������������������������������堙堞堧堣堨埵塈堥堜堛堳堿堶堮堹堸堭堬堻奡媯媔媟婺媢媞婸媦婼媥媬媕媮娷媄媊媗媃媋媩婻婽媌媜媏媓媝寪寍寋寔寑寊寎尌尰崷嵃嵫嵁嵋崿崵嵑嵎嵕崳崺嵒崽崱嵙嵂崹嵉崸崼崲崶嵀嵅幄幁彘徦徥徫惉悹惌惢惎惄愔�".split(""); for (j = 0; j != D[216].length; ++j) if (D[216][j].charCodeAt(0) !== 65533) { e[D[216][j]] = 55296 + j; d[55296 + j] = D[216][j] } D[217] = "����������������������������������������������������������������惲愊愖愅惵愓惸惼惾惁愃愘愝愐惿愄愋扊掔掱掰揎揥揨揯揃撝揳揊揠揶揕揲揵摡揟掾揝揜揄揘揓揂揇揌揋揈揰揗揙攲敧敪敤敜敨敥斌斝斞斮旐旒����������������������������������晼晬晻暀晱晹晪晲朁椌棓椄棜椪棬棪棱椏棖棷棫棤棶椓椐棳棡椇棌椈楰梴椑棯棆椔棸棐棽棼棨椋椊椗棎棈棝棞棦棴棑椆棔棩椕椥棇欹欻欿欼殔殗殙殕殽毰毲毳氰淼湆湇渟湉溈渼渽湅湢渫渿湁湝湳渜渳湋湀湑渻渃渮湞�".split(""); for (j = 0; j != D[217].length; ++j) if (D[217][j].charCodeAt(0) !== 65533) { e[D[217][j]] = 55552 + j; d[55552 + j] = D[217][j] } D[218] = "����������������������������������������������������������������湨湜湡渱渨湠湱湫渹渢渰湓湥渧湸湤湷湕湹湒湦渵渶湚焠焞焯烻焮焱焣焥焢焲焟焨焺焛牋牚犈犉犆犅犋猒猋猰猢猱猳猧猲猭猦猣猵猌琮琬琰琫琖����������������������������������琚琡琭琱琤琣琝琩琠琲瓻甯畯畬痧痚痡痦痝痟痤痗皕皒盚睆睇睄睍睅睊睎睋睌矞矬硠硤硥硜硭硱硪确硰硩硨硞硢祴祳祲祰稂稊稃稌稄窙竦竤筊笻筄筈筌筎筀筘筅粢粞粨粡絘絯絣絓絖絧絪絏絭絜絫絒絔絩絑絟絎缾缿罥�".split(""); for (j = 0; j != D[218].length; ++j) if (D[218][j].charCodeAt(0) !== 65533) { e[D[218][j]] = 55808 + j; d[55808 + j] = D[218][j] } D[219] = "����������������������������������������������������������������罦羢羠羡翗聑聏聐胾胔腃腊腒腏腇脽腍脺臦臮臷臸臹舄舼舽舿艵茻菏菹萣菀菨萒菧菤菼菶萐菆菈菫菣莿萁菝菥菘菿菡菋菎菖菵菉萉萏菞萑萆菂菳����������������������������������菕菺菇菑菪萓菃菬菮菄菻菗菢萛菛菾蛘蛢蛦蛓蛣蛚蛪蛝蛫蛜蛬蛩蛗蛨蛑衈衖衕袺裗袹袸裀袾袶袼袷袽袲褁裉覕覘覗觝觚觛詎詍訹詙詀詗詘詄詅詒詈詑詊詌詏豟貁貀貺貾貰貹貵趄趀趉跘跓跍跇跖跜跏跕跙跈跗跅軯軷軺�".split(""); for (j = 0; j != D[219].length; ++j) if (D[219][j].charCodeAt(0) !== 65533) { e[D[219][j]] = 56064 + j; d[56064 + j] = D[219][j] } D[220] = "����������������������������������������������������������������軹軦軮軥軵軧軨軶軫軱軬軴軩逭逴逯鄆鄬鄄郿郼鄈郹郻鄁鄀鄇鄅鄃酡酤酟酢酠鈁鈊鈥鈃鈚鈦鈏鈌鈀鈒釿釽鈆鈄鈧鈂鈜鈤鈙鈗鈅鈖镻閍閌閐隇陾隈����������������������������������隉隃隀雂雈雃雱雰靬靰靮頇颩飫鳦黹亃亄亶傽傿僆傮僄僊傴僈僂傰僁傺傱僋僉傶傸凗剺剸剻剼嗃嗛嗌嗐嗋嗊嗝嗀嗔嗄嗩喿嗒喍嗏嗕嗢嗖嗈嗲嗍嗙嗂圔塓塨塤塏塍塉塯塕塎塝塙塥塛堽塣塱壼嫇嫄嫋媺媸媱媵媰媿嫈媻嫆�".split(""); for (j = 0; j != D[220].length; ++j) if (D[220][j].charCodeAt(0) !== 65533) { e[D[220][j]] = 56320 + j; d[56320 + j] = D[220][j] } D[221] = "����������������������������������������������������������������媷嫀嫊媴媶嫍媹媐寖寘寙尟尳嵱嵣嵊嵥嵲嵬嵞嵨嵧嵢巰幏幎幊幍幋廅廌廆廋廇彀徯徭惷慉慊愫慅愶愲愮慆愯慏愩慀戠酨戣戥戤揅揱揫搐搒搉搠搤����������������������������������搳摃搟搕搘搹搷搢搣搌搦搰搨摁搵搯搊搚摀搥搧搋揧搛搮搡搎敯斒旓暆暌暕暐暋暊暙暔晸朠楦楟椸楎楢楱椿楅楪椹楂楗楙楺楈楉椵楬椳椽楥棰楸椴楩楀楯楄楶楘楁楴楌椻楋椷楜楏楑椲楒椯楻椼歆歅歃歂歈歁殛嗀毻毼�".split(""); for (j = 0; j != D[221].length; ++j) if (D[221][j].charCodeAt(0) !== 65533) { e[D[221][j]] = 56576 + j; d[56576 + j] = D[221][j] } D[222] = "����������������������������������������������������������������毹毷毸溛滖滈溏滀溟溓溔溠溱溹滆滒溽滁溞滉溷溰滍溦滏溲溾滃滜滘溙溒溎溍溤溡溿溳滐滊溗溮溣煇煔煒煣煠煁煝煢煲煸煪煡煂煘煃煋煰煟煐煓����������������������������������煄煍煚牏犍犌犑犐犎猼獂猻猺獀獊獉瑄瑊瑋瑒瑑瑗瑀瑏瑐瑎瑂瑆瑍瑔瓡瓿瓾瓽甝畹畷榃痯瘏瘃痷痾痼痹痸瘐痻痶痭痵痽皙皵盝睕睟睠睒睖睚睩睧睔睙睭矠碇碚碔碏碄碕碅碆碡碃硹碙碀碖硻祼禂祽祹稑稘稙稒稗稕稢稓�".split(""); for (j = 0; j != D[222].length; ++j) if (D[222][j].charCodeAt(0) !== 65533) { e[D[222][j]] = 56832 + j; d[56832 + j] = D[222][j] } D[223] = "����������������������������������������������������������������稛稐窣窢窞竫筦筤筭筴筩筲筥筳筱筰筡筸筶筣粲粴粯綈綆綀綍絿綅絺綎絻綃絼綌綔綄絽綒罭罫罧罨罬羦羥羧翛翜耡腤腠腷腜腩腛腢腲朡腞腶腧腯����������������������������������腄腡舝艉艄艀艂艅蓱萿葖葶葹蒏蒍葥葑葀蒆葧萰葍葽葚葙葴葳葝蔇葞萷萺萴葺葃葸萲葅萩菙葋萯葂萭葟葰萹葎葌葒葯蓅蒎萻葇萶萳葨葾葄萫葠葔葮葐蜋蜄蛷蜌蛺蛖蛵蝍蛸蜎蜉蜁蛶蜍蜅裖裋裍裎裞裛裚裌裐覅覛觟觥觤�".split(""); for (j = 0; j != D[223].length; ++j) if (D[223][j].charCodeAt(0) !== 65533) { e[D[223][j]] = 57088 + j; d[57088 + j] = D[223][j] } D[224] = "����������������������������������������������������������������觡觠觢觜触詶誆詿詡訿詷誂誄詵誃誁詴詺谼豋豊豥豤豦貆貄貅賌赨赩趑趌趎趏趍趓趔趐趒跰跠跬跱跮跐跩跣跢跧跲跫跴輆軿輁輀輅輇輈輂輋遒逿����������������������������������遄遉逽鄐鄍鄏鄑鄖鄔鄋鄎酮酯鉈鉒鈰鈺鉦鈳鉥鉞銃鈮鉊鉆鉭鉬鉏鉠鉧鉯鈶鉡鉰鈱鉔鉣鉐鉲鉎鉓鉌鉖鈲閟閜閞閛隒隓隑隗雎雺雽雸雵靳靷靸靲頏頍頎颬飶飹馯馲馰馵骭骫魛鳪鳭鳧麀黽僦僔僗僨僳僛僪僝僤僓僬僰僯僣僠�".split(""); for (j = 0; j != D[224].length; ++j) if (D[224][j].charCodeAt(0) !== 65533) { e[D[224][j]] = 57344 + j; d[57344 + j] = D[224][j] } D[225] = "����������������������������������������������������������������凘劀劁勩勫匰厬嘧嘕嘌嘒嗼嘏嘜嘁嘓嘂嗺嘝嘄嗿嗹墉塼墐墘墆墁塿塴墋塺墇墑墎塶墂墈塻墔墏壾奫嫜嫮嫥嫕嫪嫚嫭嫫嫳嫢嫠嫛嫬嫞嫝嫙嫨嫟孷寠����������������������������������寣屣嶂嶀嵽嶆嵺嶁嵷嶊嶉嶈嵾嵼嶍嵹嵿幘幙幓廘廑廗廎廜廕廙廒廔彄彃彯徶愬愨慁慞慱慳慒慓慲慬憀慴慔慺慛慥愻慪慡慖戩戧戫搫摍摛摝摴摶摲摳摽摵摦撦摎撂摞摜摋摓摠摐摿搿摬摫摙摥摷敳斠暡暠暟朅朄朢榱榶槉�".split(""); for (j = 0; j != D[225].length; ++j) if (D[225][j].charCodeAt(0) !== 65533) { e[D[225][j]] = 57600 + j; d[57600 + j] = D[225][j] } D[226] = "����������������������������������������������������������������榠槎榖榰榬榼榑榙榎榧榍榩榾榯榿槄榽榤槔榹槊榚槏榳榓榪榡榞槙榗榐槂榵榥槆歊歍歋殞殟殠毃毄毾滎滵滱漃漥滸漷滻漮漉潎漙漚漧漘漻漒滭漊����������������������������������漶潳滹滮漭潀漰漼漵滫漇漎潃漅滽滶漹漜滼漺漟漍漞漈漡熇熐熉熀熅熂熏煻熆熁熗牄牓犗犕犓獃獍獑獌瑢瑳瑱瑵瑲瑧瑮甀甂甃畽疐瘖瘈瘌瘕瘑瘊瘔皸瞁睼瞅瞂睮瞀睯睾瞃碲碪碴碭碨硾碫碞碥碠碬碢碤禘禊禋禖禕禔禓�".split(""); for (j = 0; j != D[226].length; ++j) if (D[226][j].charCodeAt(0) !== 65533) { e[D[226][j]] = 57856 + j; d[57856 + j] = D[226][j] } D[227] = "����������������������������������������������������������������禗禈禒禐稫穊稰稯稨稦窨窫窬竮箈箜箊箑箐箖箍箌箛箎箅箘劄箙箤箂粻粿粼粺綧綷緂綣綪緁緀緅綝緎緄緆緋緌綯綹綖綼綟綦綮綩綡緉罳翢翣翥翞����������������������������������耤聝聜膉膆膃膇膍膌膋舕蒗蒤蒡蒟蒺蓎蓂蒬蒮蒫蒹蒴蓁蓍蒪蒚蒱蓐蒝蒧蒻蒢蒔蓇蓌蒛蒩蒯蒨蓖蒘蒶蓏蒠蓗蓔蓒蓛蒰蒑虡蜳蜣蜨蝫蝀蜮蜞蜡蜙蜛蝃蜬蝁蜾蝆蜠蜲蜪蜭蜼蜒蜺蜱蜵蝂蜦蜧蜸蜤蜚蜰蜑裷裧裱裲裺裾裮裼裶裻�".split(""); for (j = 0; j != D[227].length; ++j) if (D[227][j].charCodeAt(0) !== 65533) { e[D[227][j]] = 58112 + j; d[58112 + j] = D[227][j] } D[228] = "����������������������������������������������������������������裰裬裫覝覡覟覞觩觫觨誫誙誋誒誏誖谽豨豩賕賏賗趖踉踂跿踍跽踊踃踇踆踅跾踀踄輐輑輎輍鄣鄜鄠鄢鄟鄝鄚鄤鄡鄛酺酲酹酳銥銤鉶銛鉺銠銔銪銍����������������������������������銦銚銫鉹銗鉿銣鋮銎銂銕銢鉽銈銡銊銆銌銙銧鉾銇銩銝銋鈭隞隡雿靘靽靺靾鞃鞀鞂靻鞄鞁靿韎韍頖颭颮餂餀餇馝馜駃馹馻馺駂馽駇骱髣髧鬾鬿魠魡魟鳱鳲鳵麧僿儃儰僸儆儇僶僾儋儌僽儊劋劌勱勯噈噂噌嘵噁噊噉噆噘�".split(""); for (j = 0; j != D[228].length; ++j) if (D[228][j].charCodeAt(0) !== 65533) { e[D[228][j]] = 58368 + j; d[58368 + j] = D[228][j] } D[229] = "����������������������������������������������������������������噚噀嘳嘽嘬嘾嘸嘪嘺圚墫墝墱墠墣墯墬墥墡壿嫿嫴嫽嫷嫶嬃嫸嬂嫹嬁嬇嬅嬏屧嶙嶗嶟嶒嶢嶓嶕嶠嶜嶡嶚嶞幩幝幠幜緳廛廞廡彉徲憋憃慹憱憰憢憉����������������������������������憛憓憯憭憟憒憪憡憍慦憳戭摮摰撖撠撅撗撜撏撋撊撌撣撟摨撱撘敶敺敹敻斲斳暵暰暩暲暷暪暯樀樆樗槥槸樕槱槤樠槿槬槢樛樝槾樧槲槮樔槷槧橀樈槦槻樍槼槫樉樄樘樥樏槶樦樇槴樖歑殥殣殢殦氁氀毿氂潁漦潾澇濆澒�".split(""); for (j = 0; j != D[229].length; ++j) if (D[229][j].charCodeAt(0) !== 65533) { e[D[229][j]] = 58624 + j; d[58624 + j] = D[229][j] } D[230] = "����������������������������������������������������������������澍澉澌潢潏澅潚澖潶潬澂潕潲潒潐潗澔澓潝漀潡潫潽潧澐潓澋潩潿澕潣潷潪潻熲熯熛熰熠熚熩熵熝熥熞熤熡熪熜熧熳犘犚獘獒獞獟獠獝獛獡獚獙����������������������������������獢璇璉璊璆璁瑽璅璈瑼瑹甈甇畾瘥瘞瘙瘝瘜瘣瘚瘨瘛皜皝皞皛瞍瞏瞉瞈磍碻磏磌磑磎磔磈磃磄磉禚禡禠禜禢禛歶稹窲窴窳箷篋箾箬篎箯箹篊箵糅糈糌糋緷緛緪緧緗緡縃緺緦緶緱緰緮緟罶羬羰羭翭翫翪翬翦翨聤聧膣膟�".split(""); for (j = 0; j != D[230].length; ++j) if (D[230][j].charCodeAt(0) !== 65533) { e[D[230][j]] = 58880 + j; d[58880 + j] = D[230][j] } D[231] = "����������������������������������������������������������������膞膕膢膙膗舖艏艓艒艐艎艑蔤蔻蔏蔀蔩蔎蔉蔍蔟蔊蔧蔜蓻蔫蓺蔈蔌蓴蔪蓲蔕蓷蓫蓳蓼蔒蓪蓩蔖蓾蔨蔝蔮蔂蓽蔞蓶蔱蔦蓧蓨蓰蓯蓹蔘蔠蔰蔋蔙蔯虢����������������������������������蝖蝣蝤蝷蟡蝳蝘蝔蝛蝒蝡蝚蝑蝞蝭蝪蝐蝎蝟蝝蝯蝬蝺蝮蝜蝥蝏蝻蝵蝢蝧蝩衚褅褌褔褋褗褘褙褆褖褑褎褉覢覤覣觭觰觬諏諆誸諓諑諔諕誻諗誾諀諅諘諃誺誽諙谾豍貏賥賟賙賨賚賝賧趠趜趡趛踠踣踥踤踮踕踛踖踑踙踦踧�".split("");
    for (j = 0; j != D[231].length; ++j) if (D[231][j].charCodeAt(0) !== 65533) { e[D[231][j]] = 59136 + j; d[59136 + j] = D[231][j] } D[232] = "����������������������������������������������������������������踔踒踘踓踜踗踚輬輤輘輚輠輣輖輗遳遰遯遧遫鄯鄫鄩鄪鄲鄦鄮醅醆醊醁醂醄醀鋐鋃鋄鋀鋙銶鋏鋱鋟鋘鋩鋗鋝鋌鋯鋂鋨鋊鋈鋎鋦鋍鋕鋉鋠鋞鋧鋑鋓����������������������������������銵鋡鋆銴镼閬閫閮閰隤隢雓霅霈霂靚鞊鞎鞈韐韏頞頝頦頩頨頠頛頧颲餈飺餑餔餖餗餕駜駍駏駓駔駎駉駖駘駋駗駌骳髬髫髳髲髱魆魃魧魴魱魦魶魵魰魨魤魬鳼鳺鳽鳿鳷鴇鴀鳹鳻鴈鴅鴄麃黓鼏鼐儜儓儗儚儑凞匴叡噰噠噮�".split(""); for (j = 0; j != D[232].length; ++j) if (D[232][j].charCodeAt(0) !== 65533) { e[D[232][j]] = 59392 + j; d[59392 + j] = D[232][j] } D[233] = "����������������������������������������������������������������噳噦噣噭噲噞噷圜圛壈墽壉墿墺壂墼壆嬗嬙嬛嬡嬔嬓嬐嬖嬨嬚嬠嬞寯嶬嶱嶩嶧嶵嶰嶮嶪嶨嶲嶭嶯嶴幧幨幦幯廩廧廦廨廥彋徼憝憨憖懅憴懆懁懌憺����������������������������������憿憸憌擗擖擐擏擉撽撉擃擛擳擙攳敿敼斢曈暾曀曊曋曏暽暻暺曌朣樴橦橉橧樲橨樾橝橭橶橛橑樨橚樻樿橁橪橤橐橏橔橯橩橠樼橞橖橕橍橎橆歕歔歖殧殪殫毈毇氄氃氆澭濋澣濇澼濎濈潞濄澽澞濊澨瀄澥澮澺澬澪濏澿澸�".split(""); for (j = 0; j != D[233].length; ++j) if (D[233][j].charCodeAt(0) !== 65533) { e[D[233][j]] = 59648 + j; d[59648 + j] = D[233][j] } D[234] = "����������������������������������������������������������������澢濉澫濍澯澲澰燅燂熿熸燖燀燁燋燔燊燇燏熽燘熼燆燚燛犝犞獩獦獧獬獥獫獪瑿璚璠璔璒璕璡甋疀瘯瘭瘱瘽瘳瘼瘵瘲瘰皻盦瞚瞝瞡瞜瞛瞢瞣瞕瞙����������������������������������瞗磝磩磥磪磞磣磛磡磢磭磟磠禤穄穈穇窶窸窵窱窷篞篣篧篝篕篥篚篨篹篔篪篢篜篫篘篟糒糔糗糐糑縒縡縗縌縟縠縓縎縜縕縚縢縋縏縖縍縔縥縤罃罻罼罺羱翯耪耩聬膱膦膮膹膵膫膰膬膴膲膷膧臲艕艖艗蕖蕅蕫蕍蕓蕡蕘�".split(""); for (j = 0; j != D[234].length; ++j) if (D[234][j].charCodeAt(0) !== 65533) { e[D[234][j]] = 59904 + j; d[59904 + j] = D[234][j] } D[235] = "����������������������������������������������������������������蕀蕆蕤蕁蕢蕄蕑蕇蕣蔾蕛蕱蕎蕮蕵蕕蕧蕠薌蕦蕝蕔蕥蕬虣虥虤螛螏螗螓螒螈螁螖螘蝹螇螣螅螐螑螝螄螔螜螚螉褞褦褰褭褮褧褱褢褩褣褯褬褟觱諠����������������������������������諢諲諴諵諝謔諤諟諰諈諞諡諨諿諯諻貑貒貐賵賮賱賰賳赬赮趥趧踳踾踸蹀蹅踶踼踽蹁踰踿躽輶輮輵輲輹輷輴遶遹遻邆郺鄳鄵鄶醓醐醑醍醏錧錞錈錟錆錏鍺錸錼錛錣錒錁鍆錭錎錍鋋錝鋺錥錓鋹鋷錴錂錤鋿錩錹錵錪錔錌�".split(""); for (j = 0; j != D[235].length; ++j) if (D[235][j].charCodeAt(0) !== 65533) { e[D[235][j]] = 60160 + j; d[60160 + j] = D[235][j] } D[236] = "����������������������������������������������������������������錋鋾錉錀鋻錖閼闍閾閹閺閶閿閵閽隩雔霋霒霐鞙鞗鞔韰韸頵頯頲餤餟餧餩馞駮駬駥駤駰駣駪駩駧骹骿骴骻髶髺髹髷鬳鮀鮅鮇魼魾魻鮂鮓鮒鮐魺鮕����������������������������������魽鮈鴥鴗鴠鴞鴔鴩鴝鴘鴢鴐鴙鴟麈麆麇麮麭黕黖黺鼒鼽儦儥儢儤儠儩勴嚓嚌嚍嚆嚄嚃噾嚂噿嚁壖壔壏壒嬭嬥嬲嬣嬬嬧嬦嬯嬮孻寱寲嶷幬幪徾徻懃憵憼懧懠懥懤懨懞擯擩擣擫擤擨斁斀斶旚曒檍檖檁檥檉檟檛檡檞檇檓檎�".split(""); for (j = 0; j != D[236].length; ++j) if (D[236][j].charCodeAt(0) !== 65533) { e[D[236][j]] = 60416 + j; d[60416 + j] = D[236][j] } D[237] = "����������������������������������������������������������������檕檃檨檤檑橿檦檚檅檌檒歛殭氉濌澩濴濔濣濜濭濧濦濞濲濝濢濨燡燱燨燲燤燰燢獳獮獯璗璲璫璐璪璭璱璥璯甐甑甒甏疄癃癈癉癇皤盩瞵瞫瞲瞷瞶����������������������������������瞴瞱瞨矰磳磽礂磻磼磲礅磹磾礄禫禨穜穛穖穘穔穚窾竀竁簅簏篲簀篿篻簎篴簋篳簂簉簃簁篸篽簆篰篱簐簊糨縭縼繂縳顈縸縪繉繀繇縩繌縰縻縶繄縺罅罿罾罽翴翲耬膻臄臌臊臅臇膼臩艛艚艜薃薀薏薧薕薠薋薣蕻薤薚薞�".split(""); for (j = 0; j != D[237].length; ++j) if (D[237][j].charCodeAt(0) !== 65533) { e[D[237][j]] = 60672 + j; d[60672 + j] = D[237][j] } D[238] = "����������������������������������������������������������������蕷蕼薉薡蕺蕸蕗薎薖薆薍薙薝薁薢薂薈薅蕹蕶薘薐薟虨螾螪螭蟅螰螬螹螵螼螮蟉蟃蟂蟌螷螯蟄蟊螴螶螿螸螽蟞螲褵褳褼褾襁襒褷襂覭覯覮觲觳謞����������������������������������謘謖謑謅謋謢謏謒謕謇謍謈謆謜謓謚豏豰豲豱豯貕貔賹赯蹎蹍蹓蹐蹌蹇轃轀邅遾鄸醚醢醛醙醟醡醝醠鎡鎃鎯鍤鍖鍇鍼鍘鍜鍶鍉鍐鍑鍠鍭鎏鍌鍪鍹鍗鍕鍒鍏鍱鍷鍻鍡鍞鍣鍧鎀鍎鍙闇闀闉闃闅閷隮隰隬霠霟霘霝霙鞚鞡鞜�".split(""); for (j = 0; j != D[238].length; ++j) if (D[238][j].charCodeAt(0) !== 65533) { e[D[238][j]] = 60928 + j; d[60928 + j] = D[238][j] } D[239] = "����������������������������������������������������������������鞞鞝韕韔韱顁顄顊顉顅顃餥餫餬餪餳餲餯餭餱餰馘馣馡騂駺駴駷駹駸駶駻駽駾駼騃骾髾髽鬁髼魈鮚鮨鮞鮛鮦鮡鮥鮤鮆鮢鮠鮯鴳鵁鵧鴶鴮鴯鴱鴸鴰����������������������������������鵅鵂鵃鴾鴷鵀鴽翵鴭麊麉麍麰黈黚黻黿鼤鼣鼢齔龠儱儭儮嚘嚜嚗嚚嚝嚙奰嬼屩屪巀幭幮懘懟懭懮懱懪懰懫懖懩擿攄擽擸攁攃擼斔旛曚曛曘櫅檹檽櫡櫆檺檶檷櫇檴檭歞毉氋瀇瀌瀍瀁瀅瀔瀎濿瀀濻瀦濼濷瀊爁燿燹爃燽獶�".split(""); for (j = 0; j != D[239].length; ++j) if (D[239][j].charCodeAt(0) !== 65533) { e[D[239][j]] = 61184 + j; d[61184 + j] = D[239][j] } D[240] = "����������������������������������������������������������������璸瓀璵瓁璾璶璻瓂甔甓癜癤癙癐癓癗癚皦皽盬矂瞺磿礌礓礔礉礐礒礑禭禬穟簜簩簙簠簟簭簝簦簨簢簥簰繜繐繖繣繘繢繟繑繠繗繓羵羳翷翸聵臑臒����������������������������������臐艟艞薴藆藀藃藂薳薵薽藇藄薿藋藎藈藅薱薶藒蘤薸薷薾虩蟧蟦蟢蟛蟫蟪蟥蟟蟳蟤蟔蟜蟓蟭蟘蟣螤蟗蟙蠁蟴蟨蟝襓襋襏襌襆襐襑襉謪謧謣謳謰謵譇謯謼謾謱謥謷謦謶謮謤謻謽謺豂豵貙貘貗賾贄贂贀蹜蹢蹠蹗蹖蹞蹥蹧�".split(""); for (j = 0; j != D[240].length; ++j) if (D[240][j].charCodeAt(0) !== 65533) { e[D[240][j]] = 61440 + j; d[61440 + j] = D[240][j] } D[241] = "����������������������������������������������������������������蹛蹚蹡蹝蹩蹔轆轇轈轋鄨鄺鄻鄾醨醥醧醯醪鎵鎌鎒鎷鎛鎝鎉鎧鎎鎪鎞鎦鎕鎈鎙鎟鎍鎱鎑鎲鎤鎨鎴鎣鎥闒闓闑隳雗雚巂雟雘雝霣霢霥鞬鞮鞨鞫鞤鞪����������������������������������鞢鞥韗韙韖韘韺顐顑顒颸饁餼餺騏騋騉騍騄騑騊騅騇騆髀髜鬈鬄鬅鬩鬵魊魌魋鯇鯆鯃鮿鯁鮵鮸鯓鮶鯄鮹鮽鵜鵓鵏鵊鵛鵋鵙鵖鵌鵗鵒鵔鵟鵘鵚麎麌黟鼁鼀鼖鼥鼫鼪鼩鼨齌齕儴儵劖勷厴嚫嚭嚦嚧嚪嚬壚壝壛夒嬽嬾嬿巃幰�".split(""); for (j = 0; j != D[241].length; ++j) if (D[241][j].charCodeAt(0) !== 65533) { e[D[241][j]] = 61696 + j; d[61696 + j] = D[241][j] } D[242] = "����������������������������������������������������������������徿懻攇攐攍攉攌攎斄旞旝曞櫧櫠櫌櫑櫙櫋櫟櫜櫐櫫櫏櫍櫞歠殰氌瀙瀧瀠瀖瀫瀡瀢瀣瀩瀗瀤瀜瀪爌爊爇爂爅犥犦犤犣犡瓋瓅璷瓃甖癠矉矊矄矱礝礛����������������������������������礡礜礗礞禰穧穨簳簼簹簬簻糬糪繶繵繸繰繷繯繺繲繴繨罋罊羃羆羷翽翾聸臗臕艤艡艣藫藱藭藙藡藨藚藗藬藲藸藘藟藣藜藑藰藦藯藞藢蠀蟺蠃蟶蟷蠉蠌蠋蠆蟼蠈蟿蠊蠂襢襚襛襗襡襜襘襝襙覈覷覶觶譐譈譊譀譓譖譔譋譕�".split(""); for (j = 0; j != D[242].length; ++j) if (D[242][j].charCodeAt(0) !== 65533) { e[D[242][j]] = 61952 + j; d[61952 + j] = D[242][j] } D[243] = "����������������������������������������������������������������譑譂譒譗豃豷豶貚贆贇贉趬趪趭趫蹭蹸蹳蹪蹯蹻軂轒轑轏轐轓辴酀鄿醰醭鏞鏇鏏鏂鏚鏐鏹鏬鏌鏙鎩鏦鏊鏔鏮鏣鏕鏄鏎鏀鏒鏧镽闚闛雡霩霫霬霨霦����������������������������������鞳鞷鞶韝韞韟顜顙顝顗颿颽颻颾饈饇饃馦馧騚騕騥騝騤騛騢騠騧騣騞騜騔髂鬋鬊鬎鬌鬷鯪鯫鯠鯞鯤鯦鯢鯰鯔鯗鯬鯜鯙鯥鯕鯡鯚鵷鶁鶊鶄鶈鵱鶀鵸鶆鶋鶌鵽鵫鵴鵵鵰鵩鶅鵳鵻鶂鵯鵹鵿鶇鵨麔麑黀黼鼭齀齁齍齖齗齘匷嚲�".split(""); for (j = 0; j != D[243].length; ++j) if (D[243][j].charCodeAt(0) !== 65533) { e[D[243][j]] = 62208 + j; d[62208 + j] = D[243][j] } D[244] = "����������������������������������������������������������������嚵嚳壣孅巆巇廮廯忀忁懹攗攖攕攓旟曨曣曤櫳櫰櫪櫨櫹櫱櫮櫯瀼瀵瀯瀷瀴瀱灂瀸瀿瀺瀹灀瀻瀳灁爓爔犨獽獼璺皫皪皾盭矌矎矏矍矲礥礣礧礨礤礩����������������������������������禲穮穬穭竷籉籈籊籇籅糮繻繾纁纀羺翿聹臛臙舋艨艩蘢藿蘁藾蘛蘀藶蘄蘉蘅蘌藽蠙蠐蠑蠗蠓蠖襣襦覹觷譠譪譝譨譣譥譧譭趮躆躈躄轙轖轗轕轘轚邍酃酁醷醵醲醳鐋鐓鏻鐠鐏鐔鏾鐕鐐鐨鐙鐍鏵鐀鏷鐇鐎鐖鐒鏺鐉鏸鐊鏿�".split(""); for (j = 0; j != D[244].length; ++j) if (D[244][j].charCodeAt(0) !== 65533) { e[D[244][j]] = 62464 + j; d[62464 + j] = D[244][j] } D[245] = "����������������������������������������������������������������鏼鐌鏶鐑鐆闞闠闟霮霯鞹鞻韽韾顠顢顣顟飁飂饐饎饙饌饋饓騲騴騱騬騪騶騩騮騸騭髇髊髆鬐鬒鬑鰋鰈鯷鰅鰒鯸鱀鰇鰎鰆鰗鰔鰉鶟鶙鶤鶝鶒鶘鶐鶛����������������������������������鶠鶔鶜鶪鶗鶡鶚鶢鶨鶞鶣鶿鶩鶖鶦鶧麙麛麚黥黤黧黦鼰鼮齛齠齞齝齙龑儺儹劘劗囃嚽嚾孈孇巋巏廱懽攛欂櫼欃櫸欀灃灄灊灈灉灅灆爝爚爙獾甗癪矐礭礱礯籔籓糲纊纇纈纋纆纍罍羻耰臝蘘蘪蘦蘟蘣蘜蘙蘧蘮蘡蘠蘩蘞蘥�".split(""); for (j = 0; j != D[245].length; ++j) if (D[245][j].charCodeAt(0) !== 65533) { e[D[245][j]] = 62720 + j; d[62720 + j] = D[245][j] } D[246] = "����������������������������������������������������������������蠩蠝蠛蠠蠤蠜蠫衊襭襩襮襫觺譹譸譅譺譻贐贔趯躎躌轞轛轝酆酄酅醹鐿鐻鐶鐩鐽鐼鐰鐹鐪鐷鐬鑀鐱闥闤闣霵霺鞿韡顤飉飆飀饘饖騹騽驆驄驂驁騺����������������������������������騿髍鬕鬗鬘鬖鬺魒鰫鰝鰜鰬鰣鰨鰩鰤鰡鶷鶶鶼鷁鷇鷊鷏鶾鷅鷃鶻鶵鷎鶹鶺鶬鷈鶱鶭鷌鶳鷍鶲鹺麜黫黮黭鼛鼘鼚鼱齎齥齤龒亹囆囅囋奱孋孌巕巑廲攡攠攦攢欋欈欉氍灕灖灗灒爞爟犩獿瓘瓕瓙瓗癭皭礵禴穰穱籗籜籙籛籚�".split(""); for (j = 0; j != D[246].length; ++j) if (D[246][j].charCodeAt(0) !== 65533) { e[D[246][j]] = 62976 + j; d[62976 + j] = D[246][j] } D[247] = "����������������������������������������������������������������糴糱纑罏羇臞艫蘴蘵蘳蘬蘲蘶蠬蠨蠦蠪蠥襱覿覾觻譾讄讂讆讅譿贕躕躔躚躒躐躖躗轠轢酇鑌鑐鑊鑋鑏鑇鑅鑈鑉鑆霿韣顪顩飋饔饛驎驓驔驌驏驈驊����������������������������������驉驒驐髐鬙鬫鬻魖魕鱆鱈鰿鱄鰹鰳鱁鰼鰷鰴鰲鰽鰶鷛鷒鷞鷚鷋鷐鷜鷑鷟鷩鷙鷘鷖鷵鷕鷝麶黰鼵鼳鼲齂齫龕龢儽劙壨壧奲孍巘蠯彏戁戃戄攩攥斖曫欑欒欏毊灛灚爢玂玁玃癰矔籧籦纕艬蘺虀蘹蘼蘱蘻蘾蠰蠲蠮蠳襶襴襳觾�".split(""); for (j = 0; j != D[247].length; ++j) if (D[247][j].charCodeAt(0) !== 65533) { e[D[247][j]] = 63232 + j; d[63232 + j] = D[247][j] } D[248] = "����������������������������������������������������������������讌讎讋讈豅贙躘轤轣醼鑢鑕鑝鑗鑞韄韅頀驖驙鬞鬟鬠鱒鱘鱐鱊鱍鱋鱕鱙鱌鱎鷻鷷鷯鷣鷫鷸鷤鷶鷡鷮鷦鷲鷰鷢鷬鷴鷳鷨鷭黂黐黲黳鼆鼜鼸鼷鼶齃齏����������������������������������齱齰齮齯囓囍孎屭攭曭曮欓灟灡灝灠爣瓛瓥矕礸禷禶籪纗羉艭虃蠸蠷蠵衋讔讕躞躟躠躝醾醽釂鑫鑨鑩雥靆靃靇韇韥驞髕魙鱣鱧鱦鱢鱞鱠鸂鷾鸇鸃鸆鸅鸀鸁鸉鷿鷽鸄麠鼞齆齴齵齶囔攮斸欘欙欗欚灢爦犪矘矙礹籩籫糶纚�".split(""); for (j = 0; j != D[248].length; ++j) if (D[248][j].charCodeAt(0) !== 65533) { e[D[248][j]] = 63488 + j; d[63488 + j] = D[248][j] } D[249] = "����������������������������������������������������������������纘纛纙臠臡虆虇虈襹襺襼襻觿讘讙躥躤躣鑮鑭鑯鑱鑳靉顲饟鱨鱮鱭鸋鸍鸐鸏鸒鸑麡黵鼉齇齸齻齺齹圞灦籯蠼趲躦釃鑴鑸鑶鑵驠鱴鱳鱱鱵鸔鸓黶鼊����������������������������������龤灨灥糷虪蠾蠽蠿讞貜躩軉靋顳顴飌饡馫驤驦驧鬤鸕鸗齈戇欞爧虌躨钂钀钁驩驨鬮鸙爩虋讟钃鱹麷癵驫鱺鸝灩灪麤齾齉龘碁銹裏墻恒粧嫺╔╦╗╠╬╣╚╩╝╒╤╕╞╪╡╘╧╛╓╥╖╟╫╢╙╨╜║═╭╮╰╯▓�".split(""); for (j = 0; j != D[249].length; ++j) if (D[249][j].charCodeAt(0) !== 65533) { e[D[249][j]] = 63744 + j; d[63744 + j] = D[249][j] } return { enc: e, dec: d }
}(); cptable[1250] = function () { var d = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙", D = [], e = {}; for (var i = 0; i != d.length; ++i) { if (d.charCodeAt(i) !== 65533) e[d.charAt(i)] = i; D[i] = d.charAt(i) } return { enc: e, dec: D } }(); cptable[1251] = function () { var d = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя", D = [], e = {}; for (var i = 0; i != d.length; ++i) { if (d.charCodeAt(i) !== 65533) e[d.charAt(i)] = i; D[i] = d.charAt(i) } return { enc: e, dec: D } }(); cptable[1252] = function () { var d = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ", D = [], e = {}; for (var i = 0; i != d.length; ++i) { if (d.charCodeAt(i) !== 65533) e[d.charAt(i)] = i; D[i] = d.charAt(i) } return { enc: e, dec: D } }(); cptable[1253] = function () { var d = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�", D = [], e = {}; for (var i = 0; i != d.length; ++i) { if (d.charCodeAt(i) !== 65533) e[d.charAt(i)] = i; D[i] = d.charAt(i) } return { enc: e, dec: D } }(); cptable[1254] = function () { var d = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ", D = [], e = {}; for (var i = 0; i != d.length; ++i) { if (d.charCodeAt(i) !== 65533) e[d.charAt(i)] = i; D[i] = d.charAt(i) } return { enc: e, dec: D } }(); cptable[1255] = function () { var d = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹ�ֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�", D = [], e = {}; for (var i = 0; i != d.length; ++i) { if (d.charCodeAt(i) !== 65533) e[d.charAt(i)] = i; D[i] = d.charAt(i) } return { enc: e, dec: D } }(); cptable[1256] = function () { var d = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے", D = [], e = {}; for (var i = 0; i != d.length; ++i) { if (d.charCodeAt(i) !== 65533) e[d.charAt(i)] = i; D[i] = d.charAt(i) } return { enc: e, dec: D } }(); cptable[1257] = function () { var d = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙", D = [], e = {}; for (var i = 0; i != d.length; ++i) { if (d.charCodeAt(i) !== 65533) e[d.charAt(i)] = i; D[i] = d.charAt(i) } return { enc: e, dec: D } }(); cptable[1258] = function () { var d = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ", D = [], e = {}; for (var i = 0; i != d.length; ++i) { if (d.charCodeAt(i) !== 65533) e[d.charAt(i)] = i; D[i] = d.charAt(i) } return { enc: e, dec: D } }(); cptable[1e4] = function () { var d = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ", D = [], e = {}; for (var i = 0; i != d.length; ++i) { if (d.charCodeAt(i) !== 65533) e[d.charAt(i)] = i; D[i] = d.charAt(i) } return { enc: e, dec: D } }(); cptable[10006] = function () { var d = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�", D = [], e = {}; for (var i = 0; i != d.length; ++i) { if (d.charCodeAt(i) !== 65533) e[d.charAt(i)] = i; D[i] = d.charAt(i) } return { enc: e, dec: D } }(); cptable[10007] = function () { var d = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤", D = [], e = {}; for (var i = 0; i != d.length; ++i) { if (d.charCodeAt(i) !== 65533) e[d.charAt(i)] = i; D[i] = d.charAt(i) } return { enc: e, dec: D } }(); cptable[10008] = function () {
    var d = [], e = {}, D = [], j; D[0] = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~���������������������������������������������������������������������������������������".split(""); for (j = 0; j != D[0].length; ++j) if (D[0][j].charCodeAt(0) !== 65533) { e[D[0][j]] = 0 + j; d[0 + j] = D[0][j] } D[161] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������　、。・ˉˇ¨〃々―～�…‘’“”〔〕〈〉《》「」『』〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓�".split(""); for (j = 0; j != D[161].length; ++j) if (D[161][j].charCodeAt(0) !== 65533) { e[D[161][j]] = 41216 + j; d[41216 + j] = D[161][j] } D[162] = "���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������⒈⒉⒊⒋⒌⒍⒎⒏⒐⒑⒒⒓⒔⒕⒖⒗⒘⒙⒚⒛⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂⒃⒄⒅⒆⒇①②③④⑤⑥⑦⑧⑨⑩��㈠㈡㈢㈣㈤㈥㈦㈧㈨㈩��ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ���".split(""); for (j = 0; j != D[162].length; ++j) if (D[162][j].charCodeAt(0) !== 65533) { e[D[162][j]] = 41472 + j; d[41472 + j] = D[162][j] } D[163] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������！＂＃￥％＆＇（）＊＋，－．／０１２３４５６７８９：；＜＝＞？＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［＼］＾＿｀ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝￣�".split(""); for (j = 0; j != D[163].length; ++j) if (D[163][j].charCodeAt(0) !== 65533) { e[D[163][j]] = 41728 + j; d[41728 + j] = D[163][j] } D[164] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをん������������".split(""); for (j = 0; j != D[164].length; ++j) if (D[164][j].charCodeAt(0) !== 65533) { e[D[164][j]] = 41984 + j; d[41984 + j] = D[164][j] } D[165] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶ���������".split(""); for (j = 0; j != D[165].length; ++j) if (D[165][j].charCodeAt(0) !== 65533) { e[D[165][j]] = 42240 + j; d[42240 + j] = D[165][j] } D[166] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ��������αβγδεζηθικλμνξοπρστυφχψω���������������������������������������".split(""); for (j = 0; j != D[166].length; ++j) if (D[166][j].charCodeAt(0) !== 65533) { e[D[166][j]] = 42496 + j; d[42496 + j] = D[166][j] } D[167] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ���������������абвгдеёжзийклмнопрстуфхцчшщъыьэюя��������������".split(""); for (j = 0; j != D[167].length; ++j) if (D[167][j].charCodeAt(0) !== 65533) { e[D[167][j]] = 42752 + j; d[42752 + j] = D[167][j] } D[168] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüê����������ㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦㄧㄨㄩ����������������������".split(""); for (j = 0; j != D[168].length; ++j) if (D[168][j].charCodeAt(0) !== 65533) { e[D[168][j]] = 43008 + j; d[43008 + j] = D[168][j] } D[169] = "��������������������������������������������������������������������������������������������������������������������������������������������������������������������─━│┃┄┅┆┇┈┉┊┋┌┍┎┏┐┑┒┓└┕┖┗┘┙┚┛├┝┞┟┠┡┢┣┤┥┦┧┨┩┪┫┬┭┮┯┰┱┲┳┴┵┶┷┸┹┺┻┼┽┾┿╀╁╂╃╄╅╆╇╈╉╊╋����������������".split(""); for (j = 0; j != D[169].length; ++j) if (D[169][j].charCodeAt(0) !== 65533) { e[D[169][j]] = 43264 + j; d[43264 + j] = D[169][j] } D[176] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥�".split(""); for (j = 0; j != D[176].length; ++j) if (D[176][j].charCodeAt(0) !== 65533) { e[D[176][j]] = 45056 + j; d[45056 + j] = D[176][j] } D[177] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳�".split(""); for (j = 0; j != D[177].length; ++j) if (D[177][j].charCodeAt(0) !== 65533) { e[D[177][j]] = 45312 + j; d[45312 + j] = D[177][j] } D[178] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖�".split(""); for (j = 0; j != D[178].length; ++j) if (D[178][j].charCodeAt(0) !== 65533) { e[D[178][j]] = 45568 + j; d[45568 + j] = D[178][j] } D[179] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚�".split(""); for (j = 0; j != D[179].length; ++j) if (D[179][j].charCodeAt(0) !== 65533) { e[D[179][j]] = 45824 + j; d[45824 + j] = D[179][j] } D[180] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮�".split(""); for (j = 0; j != D[180].length; ++j) if (D[180][j].charCodeAt(0) !== 65533) { e[D[180][j]] = 46080 + j; d[46080 + j] = D[180][j] } D[181] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠�".split(""); for (j = 0; j != D[181].length; ++j) if (D[181][j].charCodeAt(0) !== 65533) { e[D[181][j]] = 46336 + j; d[46336 + j] = D[181][j] } D[182] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二�".split(""); for (j = 0; j != D[182].length; ++j) if (D[182][j].charCodeAt(0) !== 65533) { e[D[182][j]] = 46592 + j; d[46592 + j] = D[182][j] } D[183] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服�".split(""); for (j = 0; j != D[183].length; ++j) if (D[183][j].charCodeAt(0) !== 65533) { e[D[183][j]] = 46848 + j; d[46848 + j] = D[183][j] } D[184] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹�".split(""); for (j = 0; j != D[184].length; ++j) if (D[184][j].charCodeAt(0) !== 65533) { e[D[184][j]] = 47104 + j; d[47104 + j] = D[184][j] } D[185] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈�".split(""); for (j = 0; j != D[185].length; ++j) if (D[185][j].charCodeAt(0) !== 65533) { e[D[185][j]] = 47360 + j; d[47360 + j] = D[185][j] } D[186] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖�".split(""); for (j = 0; j != D[186].length; ++j) if (D[186][j].charCodeAt(0) !== 65533) { e[D[186][j]] = 47616 + j; d[47616 + j] = D[186][j] } D[187] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕�".split(""); for (j = 0; j != D[187].length; ++j) if (D[187][j].charCodeAt(0) !== 65533) { e[D[187][j]] = 47872 + j; d[47872 + j] = D[187][j] } D[188] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件�".split(""); for (j = 0; j != D[188].length; ++j) if (D[188][j].charCodeAt(0) !== 65533) { e[D[188][j]] = 48128 + j; d[48128 + j] = D[188][j] } D[189] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸�".split(""); for (j = 0; j != D[189].length; ++j) if (D[189][j].charCodeAt(0) !== 65533) { e[D[189][j]] = 48384 + j; d[48384 + j] = D[189][j] } D[190] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻�".split(""); for (j = 0; j != D[190].length; ++j) if (D[190][j].charCodeAt(0) !== 65533) { e[D[190][j]] = 48640 + j; d[48640 + j] = D[190][j] } D[191] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀�".split(""); for (j = 0; j != D[191].length; ++j) if (D[191][j].charCodeAt(0) !== 65533) { e[D[191][j]] = 48896 + j; d[48896 + j] = D[191][j] } D[192] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐�".split(""); for (j = 0; j != D[192].length; ++j) if (D[192][j].charCodeAt(0) !== 65533) { e[D[192][j]] = 49152 + j; d[49152 + j] = D[192][j] } D[193] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿�".split(""); for (j = 0; j != D[193].length; ++j) if (D[193][j].charCodeAt(0) !== 65533) { e[D[193][j]] = 49408 + j; d[49408 + j] = D[193][j] } D[194] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫�".split(""); for (j = 0; j != D[194].length; ++j) if (D[194][j].charCodeAt(0) !== 65533) { e[D[194][j]] = 49664 + j; d[49664 + j] = D[194][j] } D[195] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸�".split(""); for (j = 0; j != D[195].length; ++j) if (D[195][j].charCodeAt(0) !== 65533) { e[D[195][j]] = 49920 + j; d[49920 + j] = D[195][j] } D[196] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁�".split(""); for (j = 0; j != D[196].length; ++j) if (D[196][j].charCodeAt(0) !== 65533) { e[D[196][j]] = 50176 + j; d[50176 + j] = D[196][j] } D[197] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗�".split(""); for (j = 0; j != D[197].length; ++j) if (D[197][j].charCodeAt(0) !== 65533) { e[D[197][j]] = 50432 + j; d[50432 + j] = D[197][j] } D[198] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐�".split(""); for (j = 0; j != D[198].length; ++j) if (D[198][j].charCodeAt(0) !== 65533) { e[D[198][j]] = 50688 + j; d[50688 + j] = D[198][j] } D[199] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠�".split(""); for (j = 0; j != D[199].length; ++j) if (D[199][j].charCodeAt(0) !== 65533) { e[D[199][j]] = 50944 + j; d[50944 + j] = D[199][j] } D[200] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁�".split(""); for (j = 0; j != D[200].length; ++j) if (D[200][j].charCodeAt(0) !== 65533) { e[D[200][j]] = 51200 + j; d[51200 + j] = D[200][j] } D[201] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳�".split(""); for (j = 0; j != D[201].length; ++j) if (D[201][j].charCodeAt(0) !== 65533) { e[D[201][j]] = 51456 + j; d[51456 + j] = D[201][j] } D[202] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱�".split(""); for (j = 0; j != D[202].length; ++j) if (D[202][j].charCodeAt(0) !== 65533) { e[D[202][j]] = 51712 + j; d[51712 + j] = D[202][j] } D[203] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔�".split(""); for (j = 0; j != D[203].length; ++j) if (D[203][j].charCodeAt(0) !== 65533) { e[D[203][j]] = 51968 + j; d[51968 + j] = D[203][j] } D[204] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃�".split(""); for (j = 0; j != D[204].length; ++j) if (D[204][j].charCodeAt(0) !== 65533) { e[D[204][j]] = 52224 + j; d[52224 + j] = D[204][j] } D[205] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威�".split(""); for (j = 0; j != D[205].length; ++j) if (D[205][j].charCodeAt(0) !== 65533) { e[D[205][j]] = 52480 + j; d[52480 + j] = D[205][j] } D[206] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺�".split(""); for (j = 0; j != D[206].length; ++j) if (D[206][j].charCodeAt(0) !== 65533) { e[D[206][j]] = 52736 + j; d[52736 + j] = D[206][j] } D[207] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓�".split(""); for (j = 0; j != D[207].length; ++j) if (D[207][j].charCodeAt(0) !== 65533) { e[D[207][j]] = 52992 + j; d[52992 + j] = D[207][j] } D[208] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄�".split(""); for (j = 0; j != D[208].length; ++j) if (D[208][j].charCodeAt(0) !== 65533) { e[D[208][j]] = 53248 + j; d[53248 + j] = D[208][j] } D[209] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶�".split(""); for (j = 0; j != D[209].length; ++j) if (D[209][j].charCodeAt(0) !== 65533) { e[D[209][j]] = 53504 + j; d[53504 + j] = D[209][j] } D[210] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐�".split(""); for (j = 0; j != D[210].length; ++j) if (D[210][j].charCodeAt(0) !== 65533) { e[D[210][j]] = 53760 + j; d[53760 + j] = D[210][j] } D[211] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉�".split(""); for (j = 0; j != D[211].length; ++j) if (D[211][j].charCodeAt(0) !== 65533) { e[D[211][j]] = 54016 + j; d[54016 + j] = D[211][j] } D[212] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧�".split(""); for (j = 0; j != D[212].length; ++j) if (D[212][j].charCodeAt(0) !== 65533) { e[D[212][j]] = 54272 + j; d[54272 + j] = D[212][j] } D[213] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政�".split(""); for (j = 0; j != D[213].length; ++j) if (D[213][j].charCodeAt(0) !== 65533) { e[D[213][j]] = 54528 + j; d[54528 + j] = D[213][j] } D[214] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑�".split(""); for (j = 0; j != D[214].length; ++j) if (D[214][j].charCodeAt(0) !== 65533) { e[D[214][j]] = 54784 + j; d[54784 + j] = D[214][j] } D[215] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座������".split(""); for (j = 0; j != D[215].length; ++j) if (D[215][j].charCodeAt(0) !== 65533) { e[D[215][j]] = 55040 + j; d[55040 + j] = D[215][j] } D[216] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝�".split(""); for (j = 0; j != D[216].length; ++j) if (D[216][j].charCodeAt(0) !== 65533) { e[D[216][j]] = 55296 + j; d[55296 + j] = D[216][j] } D[217] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼�".split(""); for (j = 0; j != D[217].length; ++j) if (D[217][j].charCodeAt(0) !== 65533) {
        e[D[217][j]] = 55552 + j; d[55552 + j] = D[217][j]
    } D[218] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺�".split(""); for (j = 0; j != D[218].length; ++j) if (D[218][j].charCodeAt(0) !== 65533) { e[D[218][j]] = 55808 + j; d[55808 + j] = D[218][j] } D[219] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝�".split(""); for (j = 0; j != D[219].length; ++j) if (D[219][j].charCodeAt(0) !== 65533) { e[D[219][j]] = 56064 + j; d[56064 + j] = D[219][j] } D[220] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥�".split(""); for (j = 0; j != D[220].length; ++j) if (D[220][j].charCodeAt(0) !== 65533) { e[D[220][j]] = 56320 + j; d[56320 + j] = D[220][j] } D[221] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺�".split(""); for (j = 0; j != D[221].length; ++j) if (D[221][j].charCodeAt(0) !== 65533) { e[D[221][j]] = 56576 + j; d[56576 + j] = D[221][j] } D[222] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖�".split(""); for (j = 0; j != D[222].length; ++j) if (D[222][j].charCodeAt(0) !== 65533) { e[D[222][j]] = 56832 + j; d[56832 + j] = D[222][j] } D[223] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼�".split(""); for (j = 0; j != D[223].length; ++j) if (D[223][j].charCodeAt(0) !== 65533) { e[D[223][j]] = 57088 + j; d[57088 + j] = D[223][j] } D[224] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼�".split(""); for (j = 0; j != D[224].length; ++j) if (D[224][j].charCodeAt(0) !== 65533) { e[D[224][j]] = 57344 + j; d[57344 + j] = D[224][j] } D[225] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺�".split(""); for (j = 0; j != D[225].length; ++j) if (D[225][j].charCodeAt(0) !== 65533) { e[D[225][j]] = 57600 + j; d[57600 + j] = D[225][j] } D[226] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧饨饩饪饫饬饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂�".split(""); for (j = 0; j != D[226].length; ++j) if (D[226][j].charCodeAt(0) !== 65533) { e[D[226][j]] = 57856 + j; d[57856 + j] = D[226][j] } D[227] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾�".split(""); for (j = 0; j != D[227].length; ++j) if (D[227][j].charCodeAt(0) !== 65533) { e[D[227][j]] = 58112 + j; d[58112 + j] = D[227][j] } D[228] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑�".split(""); for (j = 0; j != D[228].length; ++j) if (D[228][j].charCodeAt(0) !== 65533) { e[D[228][j]] = 58368 + j; d[58368 + j] = D[228][j] } D[229] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣�".split(""); for (j = 0; j != D[229].length; ++j) if (D[229][j].charCodeAt(0) !== 65533) { e[D[229][j]] = 58624 + j; d[58624 + j] = D[229][j] } D[230] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩�".split(""); for (j = 0; j != D[230].length; ++j) if (D[230][j].charCodeAt(0) !== 65533) { e[D[230][j]] = 58880 + j; d[58880 + j] = D[230][j] } D[231] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡缢缣缤缥缦缧缪缫缬缭缯缰缱缲缳缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬�".split(""); for (j = 0; j != D[231].length; ++j) if (D[231][j].charCodeAt(0) !== 65533) { e[D[231][j]] = 59136 + j; d[59136 + j] = D[231][j] } D[232] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹�".split(""); for (j = 0; j != D[232].length; ++j) if (D[232][j].charCodeAt(0) !== 65533) { e[D[232][j]] = 59392 + j; d[59392 + j] = D[232][j] } D[233] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋�".split(""); for (j = 0; j != D[233].length; ++j) if (D[233][j].charCodeAt(0) !== 65533) { e[D[233][j]] = 59648 + j; d[59648 + j] = D[233][j] } D[234] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰�".split(""); for (j = 0; j != D[234].length; ++j) if (D[234][j].charCodeAt(0) !== 65533) { e[D[234][j]] = 59904 + j; d[59904 + j] = D[234][j] } D[235] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻�".split(""); for (j = 0; j != D[235].length; ++j) if (D[235][j].charCodeAt(0) !== 65533) { e[D[235][j]] = 60160 + j; d[60160 + j] = D[235][j] } D[236] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐�".split(""); for (j = 0; j != D[236].length; ++j) if (D[236][j].charCodeAt(0) !== 65533) { e[D[236][j]] = 60416 + j; d[60416 + j] = D[236][j] } D[237] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨�".split(""); for (j = 0; j != D[237].length; ++j) if (D[237][j].charCodeAt(0) !== 65533) { e[D[237][j]] = 60672 + j; d[60672 + j] = D[237][j] } D[238] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶钷钸钹钺钼钽钿铄铈铉铊铋铌铍铎铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪�".split(""); for (j = 0; j != D[238].length; ++j) if (D[238][j].charCodeAt(0) !== 65533) { e[D[238][j]] = 60928 + j; d[60928 + j] = D[238][j] } D[239] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒锓锔锕锖锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤镥镦镧镨镩镪镫镬镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔�".split(""); for (j = 0; j != D[239].length; ++j) if (D[239][j].charCodeAt(0) !== 65533) { e[D[239][j]] = 61184 + j; d[61184 + j] = D[239][j] } D[240] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨鸩鸪鸫鸬鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦鹧鹨鹩鹪鹫鹬鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙�".split(""); for (j = 0; j != D[240].length; ++j) if (D[240][j].charCodeAt(0) !== 65533) { e[D[240][j]] = 61440 + j; d[61440 + j] = D[240][j] } D[241] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃�".split(""); for (j = 0; j != D[241].length; ++j) if (D[241][j].charCodeAt(0) !== 65533) { e[D[241][j]] = 61696 + j; d[61696 + j] = D[241][j] } D[242] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒�".split(""); for (j = 0; j != D[242].length; ++j) if (D[242][j].charCodeAt(0) !== 65533) { e[D[242][j]] = 61952 + j; d[61952 + j] = D[242][j] } D[243] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋�".split(""); for (j = 0; j != D[243].length; ++j) if (D[243][j].charCodeAt(0) !== 65533) { e[D[243][j]] = 62208 + j; d[62208 + j] = D[243][j] } D[244] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤�".split(""); for (j = 0; j != D[244].length; ++j) if (D[244][j].charCodeAt(0) !== 65533) { e[D[244][j]] = 62464 + j; d[62464 + j] = D[244][j] } D[245] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜�".split(""); for (j = 0; j != D[245].length; ++j) if (D[245][j].charCodeAt(0) !== 65533) { e[D[245][j]] = 62720 + j; d[62720 + j] = D[245][j] } D[246] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅龆龇龈龉龊龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞鲟鲠鲡鲢鲣鲥鲦鲧鲨鲩鲫鲭鲮鲰鲱鲲鲳鲴鲵鲶鲷鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋�".split(""); for (j = 0; j != D[246].length; ++j) if (D[246][j].charCodeAt(0) !== 65533) { e[D[246][j]] = 62976 + j; d[62976 + j] = D[246][j] } D[247] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������鳌鳍鳎鳏鳐鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄�".split(""); for (j = 0; j != D[247].length; ++j) if (D[247][j].charCodeAt(0) !== 65533) { e[D[247][j]] = 63232 + j; d[63232 + j] = D[247][j] } return { enc: e, dec: d }
}(); cptable[10029] = function () { var d = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ", D = [], e = {}; for (var i = 0; i != d.length; ++i) { if (d.charCodeAt(i) !== 65533) e[d.charAt(i)] = i; D[i] = d.charAt(i) } return { enc: e, dec: D } }(); cptable[10079] = function () { var d = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ", D = [], e = {}; for (var i = 0; i != d.length; ++i) { if (d.charCodeAt(i) !== 65533) e[d.charAt(i)] = i; D[i] = d.charAt(i) } return { enc: e, dec: D } }(); cptable[10081] = function () { var d = "\0\b\t\n\x0B\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ", D = [], e = {}; for (var i = 0; i != d.length; ++i) { if (d.charCodeAt(i) !== 65533) e[d.charAt(i)] = i; D[i] = d.charAt(i) } return { enc: e, dec: D } }(); if (typeof module !== "undefined" && module.exports) module.exports = cptable; (function (root, factory) { "use strict"; if (typeof cptable === "undefined") { if (typeof require !== "undefined") { var cpt = cptable; if (typeof module !== "undefined" && module.exports) module.exports = factory(cpt); else root.cptable = factory(cpt) } else throw new Error("cptable not found") } else cptable = factory(cptable) })(this, function (cpt) { "use strict"; var magic = { 1200: "utf16le", 1201: "utf16be", 12000: "utf32le", 12001: "utf32be", 16969: "utf64le", 20127: "ascii", 65000: "utf7", 65001: "utf8" }; var sbcs_cache = [874, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1e4]; var dbcs_cache = [932, 936, 949, 950]; var magic_cache = [65001]; var magic_decode = {}; var magic_encode = {}; var cpdcache = {}; var cpecache = {}; var sfcc = function sfcc(x) { return String.fromCharCode(x) }; var cca = function cca(x) { return x.charCodeAt(0) }; var has_buf = typeof Buffer !== "undefined"; if (has_buf) { var mdl = 1024, mdb = new Buffer(mdl); var make_EE = function make_EE(E) { var EE = new Buffer(65536); for (var i = 0; i < 65536; ++i) EE[i] = 0; var keys = Object.keys(E), len = keys.length; for (var ee = 0, e = keys[ee]; ee < len; ++ee) { if (!(e = keys[ee])) continue; EE[e.charCodeAt(0)] = E[e] } return EE }; var sbcs_encode = function make_sbcs_encode(cp) { var EE = make_EE(cpt[cp].enc); return function sbcs_e(data, ofmt) { var len = data.length; var out, i = 0, j = 0, D = 0, w = 0; if (typeof data === "string") { out = new Buffer(len); for (i = 0; i < len; ++i) out[i] = EE[data.charCodeAt(i)] } else if (Buffer.isBuffer(data)) { out = new Buffer(2 * len); j = 0; for (i = 0; i < len; ++i) { D = data[i]; if (D < 128) out[j++] = EE[D]; else if (D < 224) { out[j++] = EE[((D & 31) << 6) + (data[i + 1] & 63)]; ++i } else if (D < 240) { out[j++] = EE[((D & 15) << 12) + ((data[i + 1] & 63) << 6) + (data[i + 2] & 63)]; i += 2 } else { w = ((D & 7) << 18) + ((data[i + 1] & 63) << 12) + ((data[i + 2] & 63) << 6) + (data[i + 3] & 63); i += 3; if (w < 65536) out[j++] = EE[w]; else { w -= 65536; out[j++] = EE[55296 + (w >> 10 & 1023)]; out[j++] = EE[56320 + (w & 1023)] } } } out = out.slice(0, j) } else { out = new Buffer(len); for (i = 0; i < len; ++i) out[i] = EE[data[i].charCodeAt(0)] } if (!ofmt || ofmt === "buf") return out; if (ofmt !== "arr") return out.toString("binary"); return [].slice.call(out) } }; var sbcs_decode = function make_sbcs_decode(cp) { var D = cpt[cp].dec; var DD = new Buffer(131072), d = 0, c = ""; for (d = 0; d < D.length; ++d) { if (!(c = D[d])) continue; var w = c.charCodeAt(0); DD[2 * d] = w & 255; DD[2 * d + 1] = w >> 8 } return function sbcs_d(data) { var len = data.length, i = 0, j = 0; if (2 * len > mdl) { mdl = 2 * len; mdb = new Buffer(mdl) } if (Buffer.isBuffer(data)) { for (i = 0; i < len; i++) { j = 2 * data[i]; mdb[2 * i] = DD[j]; mdb[2 * i + 1] = DD[j + 1] } } else if (typeof data === "string") { for (i = 0; i < len; i++) { j = 2 * data.charCodeAt(i); mdb[2 * i] = DD[j]; mdb[2 * i + 1] = DD[j + 1] } } else { for (i = 0; i < len; i++) { j = 2 * data[i]; mdb[2 * i] = DD[j]; mdb[2 * i + 1] = DD[j + 1] } } return mdb.slice(0, 2 * len).toString("ucs2") } }; var dbcs_encode = function make_dbcs_encode(cp) { var E = cpt[cp].enc; var EE = new Buffer(131072); for (var i = 0; i < 131072; ++i) EE[i] = 0; var keys = Object.keys(E); for (var ee = 0, e = keys[ee]; ee < keys.length; ++ee) { if (!(e = keys[ee])) continue; var f = e.charCodeAt(0); EE[2 * f] = E[e] & 255; EE[2 * f + 1] = E[e] >> 8 } return function dbcs_e(data, ofmt) { var len = data.length, out = new Buffer(2 * len), i = 0, j = 0, jj = 0, k = 0, D = 0; if (typeof data === "string") { for (i = k = 0; i < len; ++i) { j = data.charCodeAt(i) * 2; out[k++] = EE[j + 1] || EE[j]; if (EE[j + 1] > 0) out[k++] = EE[j] } out = out.slice(0, k) } else if (Buffer.isBuffer(data)) { for (i = k = 0; i < len; ++i) { D = data[i]; if (D < 128) j = D; else if (D < 224) { j = ((D & 31) << 6) + (data[i + 1] & 63); ++i } else if (D < 240) { j = ((D & 15) << 12) + ((data[i + 1] & 63) << 6) + (data[i + 2] & 63); i += 2 } else { j = ((D & 7) << 18) + ((data[i + 1] & 63) << 12) + ((data[i + 2] & 63) << 6) + (data[i + 3] & 63); i += 3 } if (j < 65536) { j *= 2; out[k++] = EE[j + 1] || EE[j]; if (EE[j + 1] > 0) out[k++] = EE[j] } else { jj = j - 65536; j = 2 * (55296 + (jj >> 10 & 1023)); out[k++] = EE[j + 1] || EE[j]; if (EE[j + 1] > 0) out[k++] = EE[j]; j = 2 * (56320 + (jj & 1023)); out[k++] = EE[j + 1] || EE[j]; if (EE[j + 1] > 0) out[k++] = EE[j] } } out = out.slice(0, k) } else { for (i = k = 0; i < len; i++) { j = data[i].charCodeAt(0) * 2; out[k++] = EE[j + 1] || EE[j]; if (EE[j + 1] > 0) out[k++] = EE[j] } } if (!ofmt || ofmt === "buf") return out; if (ofmt !== "arr") return out.toString("binary"); return [].slice.call(out) } }; var dbcs_decode = function make_dbcs_decode(cp) { var D = cpt[cp].dec; var DD = new Buffer(131072), d = 0, c, w = 0, j = 0, i = 0; for (i = 0; i < 65536; ++i) { DD[2 * i] = 255; DD[2 * i + 1] = 253 } for (d = 0; d < D.length; ++d) { if (!(c = D[d])) continue; w = c.charCodeAt(0); j = 2 * d; DD[j] = w & 255; DD[j + 1] = w >> 8 } return function dbcs_d(data) { var len = data.length, out = new Buffer(2 * len), i = 0, j = 0, k = 0; if (Buffer.isBuffer(data)) { for (i = 0; i < len; i++) { j = 2 * data[i]; if (DD[j] === 255 && DD[j + 1] === 253) { j = 2 * ((data[i] << 8) + data[i + 1]); ++i } out[k++] = DD[j]; out[k++] = DD[j + 1] } } else if (typeof data === "string") { for (i = 0; i < len; i++) { j = 2 * data.charCodeAt(i); if (DD[j] === 255 && DD[j + 1] === 253) { j = 2 * ((data.charCodeAt(i) << 8) + data.charCodeAt(i + 1)); ++i } out[k++] = DD[j]; out[k++] = DD[j + 1] } } else { for (i = 0; i < len; i++) { j = 2 * data[i]; if (DD[j] === 255 && DD[j + 1] === 253) { j = 2 * ((data[i] << 8) + data[i + 1]); ++i } out[k++] = DD[j]; out[k++] = DD[j + 1] } } return out.slice(0, k).toString("ucs2") } }; magic_decode[65001] = function utf8_d(data) { if (typeof data === "string") return utf8_d(data.split("").map(cca)); var len = data.length, w = 0, ww = 0; if (4 * len > mdl) { mdl = 4 * len; mdb = new Buffer(mdl) } var i = 0; if (len >= 3 && data[0] == 239) if (data[1] == 187 && data[2] == 191) i = 3; for (var j = 1, k = 0, D = 0; i < len; i += j) { j = 1; D = data[i]; if (D < 128) w = D; else if (D < 224) { w = (D & 31) * 64 + (data[i + 1] & 63); j = 2 } else if (D < 240) { w = ((D & 15) << 12) + (data[i + 1] & 63) * 64 + (data[i + 2] & 63); j = 3 } else { w = (D & 7) * 262144 + ((data[i + 1] & 63) << 12) + (data[i + 2] & 63) * 64 + (data[i + 3] & 63); j = 4 } if (w < 65536) { mdb[k++] = w & 255; mdb[k++] = w >> 8 } else { w -= 65536; ww = 55296 + (w >> 10 & 1023); w = 56320 + (w & 1023); mdb[k++] = ww & 255; mdb[k++] = ww >>> 8; mdb[k++] = w & 255; mdb[k++] = w >>> 8 & 255 } } return mdb.slice(0, k).toString("ucs2") }; magic_encode[65001] = function utf8_e(data, ofmt) { if (has_buf && Buffer.isBuffer(data)) { if (!ofmt || ofmt === "buf") return data; if (ofmt !== "arr") return data.toString("binary"); return [].slice.call(data) } var len = data.length, w = 0, ww = 0, j = 0; var direct = typeof data === "string"; if (4 * len > mdl) { mdl = 4 * len; mdb = new Buffer(mdl) } for (var i = 0; i < len; ++i) { w = direct ? data.charCodeAt(i) : data[i].charCodeAt(0); if (w <= 127) mdb[j++] = w; else if (w <= 2047) { mdb[j++] = 192 + (w >> 6); mdb[j++] = 128 + (w & 63) } else if (w >= 55296 && w <= 57343) { w -= 55296; ++i; ww = (direct ? data.charCodeAt(i) : data[i].charCodeAt(0)) - 56320 + (w << 10); mdb[j++] = 240 + (ww >>> 18 & 7); mdb[j++] = 144 + (ww >>> 12 & 63); mdb[j++] = 128 + (ww >>> 6 & 63); mdb[j++] = 128 + (ww & 63) } else { mdb[j++] = 224 + (w >> 12); mdb[j++] = 128 + (w >> 6 & 63); mdb[j++] = 128 + (w & 63) } } if (!ofmt || ofmt === "buf") return mdb.slice(0, j); if (ofmt !== "arr") return mdb.slice(0, j).toString("binary"); return [].slice.call(mdb, 0, j) } } var encache = function encache() { if (has_buf) { if (cpdcache[sbcs_cache[0]]) return; var i = 0, s = 0; for (i = 0; i < sbcs_cache.length; ++i) { s = sbcs_cache[i]; if (cpt[s]) { cpdcache[s] = sbcs_decode(s); cpecache[s] = sbcs_encode(s) } } for (i = 0; i < dbcs_cache.length; ++i) { s = dbcs_cache[i]; if (cpt[s]) { cpdcache[s] = dbcs_decode(s); cpecache[s] = dbcs_encode(s) } } for (i = 0; i < magic_cache.length; ++i) { s = magic_cache[i]; if (magic_decode[s]) cpdcache[s] = magic_decode[s]; if (magic_encode[s]) cpecache[s] = magic_encode[s] } } }; var null_enc = function (data, ofmt) { return "" }; var cp_decache = function cp_decache(cp) { delete cpdcache[cp]; delete cpecache[cp] }; var decache = function decache() { if (has_buf) { if (!cpdcache[sbcs_cache[0]]) return; sbcs_cache.forEach(cp_decache); dbcs_cache.forEach(cp_decache); magic_cache.forEach(cp_decache) } last_enc = null_enc; last_cp = 0 }; var cache = { encache: encache, decache: decache, sbcs: sbcs_cache, dbcs: dbcs_cache }; encache(); var BM = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"; var SetD = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'(),-./:?"; var last_enc = null_enc, last_cp = 0; var encode = function encode(cp, data, ofmt) { if (cp === last_cp && last_enc) { return last_enc(data, ofmt) } if (cpecache[cp]) { last_enc = cpecache[last_cp = cp]; return last_enc(data, ofmt) } if (has_buf && Buffer.isBuffer(data)) data = data.toString("utf8"); var len = data.length; var out = has_buf ? new Buffer(4 * len) : [], w = 0, i = 0, j = 0, ww = 0; var C = cpt[cp], E, M = ""; var isstr = typeof data === "string"; if (C && (E = C.enc)) for (i = 0; i < len; ++i, ++j) { w = E[isstr ? data.charAt(i) : data[i]]; if (w > 255) { out[j] = w >> 8; out[++j] = w & 255 } else out[j] = w & 255 } else if (M = magic[cp]) switch (M) { case "utf8": if (has_buf && isstr) { out = new Buffer(data, M); j = out.length; break } for (i = 0; i < len; ++i, ++j) { w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0); if (w <= 127) out[j] = w; else if (w <= 2047) { out[j] = 192 + (w >> 6); out[++j] = 128 + (w & 63) } else if (w >= 55296 && w <= 57343) { w -= 55296; ww = (isstr ? data.charCodeAt(++i) : data[++i].charCodeAt(0)) - 56320 + (w << 10); out[j] = 240 + (ww >>> 18 & 7); out[++j] = 144 + (ww >>> 12 & 63); out[++j] = 128 + (ww >>> 6 & 63); out[++j] = 128 + (ww & 63) } else { out[j] = 224 + (w >> 12); out[++j] = 128 + (w >> 6 & 63); out[++j] = 128 + (w & 63) } } break; case "ascii": if (has_buf && typeof data === "string") { out = new Buffer(data, M); j = out.length; break } for (i = 0; i < len; ++i, ++j) { w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0); if (w <= 127) out[j] = w; else throw new Error("bad ascii " + w) } break; case "utf16le": if (has_buf && typeof data === "string") { out = new Buffer(data, M); j = out.length; break } for (i = 0; i < len; ++i) { w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0); out[j++] = w & 255; out[j++] = w >> 8 } break; case "utf16be": for (i = 0; i < len; ++i) { w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0); out[j++] = w >> 8; out[j++] = w & 255 } break; case "utf32le": for (i = 0; i < len; ++i) { w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0); if (w >= 55296 && w <= 57343) w = 65536 + (w - 55296 << 10) + (data[++i].charCodeAt(0) - 56320); out[j++] = w & 255; w >>= 8; out[j++] = w & 255; w >>= 8; out[j++] = w & 255; w >>= 8; out[j++] = w & 255 } break; case "utf32be": for (i = 0; i < len; ++i) { w = isstr ? data.charCodeAt(i) : data[i].charCodeAt(0); if (w >= 55296 && w <= 57343) w = 65536 + (w - 55296 << 10) + (data[++i].charCodeAt(0) - 56320); out[j + 3] = w & 255; w >>= 8; out[j + 2] = w & 255; w >>= 8; out[j + 1] = w & 255; w >>= 8; out[j] = w & 255; j += 4 } break; case "utf7": for (i = 0; i < len; i++) { var c = isstr ? data.charAt(i) : data[i].charAt(0); if (c === "+") { out[j++] = 43; out[j++] = 45; continue } if (SetD.indexOf(c) > -1) { out[j++] = c.charCodeAt(0); continue } var tt = encode(1201, c); out[j++] = 43; out[j++] = BM.charCodeAt(tt[0] >> 2); out[j++] = BM.charCodeAt(((tt[0] & 3) << 4) + ((tt[1] || 0) >> 4)); out[j++] = BM.charCodeAt(((tt[1] & 15) << 2) + ((tt[2] || 0) >> 6)); out[j++] = 45 } break; default: throw new Error("Unsupported magic: " + cp + " " + magic[cp]); } else throw new Error("Unrecognized CP: " + cp); out = out.slice(0, j); if (!has_buf) return ofmt == "str" ? out.map(sfcc).join("") : out; if (!ofmt || ofmt === "buf") return out; if (ofmt !== "arr") return out.toString("binary"); return [].slice.call(out) }; var decode = function decode(cp, data) { var F; if (F = cpdcache[cp]) return F(data); if (typeof data === "string") return decode(cp, data.split("").map(cca)); var len = data.length, out = new Array(len), s = "", w = 0, i = 0, j = 1, k = 0, ww = 0; var C = cpt[cp], D, M = ""; if (C && (D = C.dec)) { for (i = 0; i < len; i += j) { j = 2; s = D[(data[i] << 8) + data[i + 1]]; if (!s) { j = 1; s = D[data[i]] } if (!s) throw new Error("Unrecognized code: " + data[i] + " " + data[i + j - 1] + " " + i + " " + j + " " + D[data[i]]); out[k++] = s } } else if (M = magic[cp]) switch (M) { case "utf8": if (len >= 3 && data[0] == 239) if (data[1] == 187 && data[2] == 191) i = 3; for (; i < len; i += j) { j = 1; if (data[i] < 128) w = data[i]; else if (data[i] < 224) { w = (data[i] & 31) * 64 + (data[i + 1] & 63); j = 2 } else if (data[i] < 240) { w = ((data[i] & 15) << 12) + (data[i + 1] & 63) * 64 + (data[i + 2] & 63); j = 3 } else { w = (data[i] & 7) * 262144 + ((data[i + 1] & 63) << 12) + (data[i + 2] & 63) * 64 + (data[i + 3] & 63); j = 4 } if (w < 65536) { out[k++] = String.fromCharCode(w) } else { w -= 65536; ww = 55296 + (w >> 10 & 1023); w = 56320 + (w & 1023); out[k++] = String.fromCharCode(ww); out[k++] = String.fromCharCode(w) } } break; case "ascii": if (has_buf && Buffer.isBuffer(data)) return data.toString(M); for (i = 0; i < len; i++) out[i] = String.fromCharCode(data[i]); k = len; break; case "utf16le": if (len >= 2 && data[0] == 255) if (data[1] == 254) i = 2; if (has_buf && Buffer.isBuffer(data)) return data.toString(M); j = 2; for (; i + 1 < len; i += j) { out[k++] = String.fromCharCode((data[i + 1] << 8) + data[i]) } break; case "utf16be": if (len >= 2 && data[0] == 254) if (data[1] == 255) i = 2; j = 2; for (; i + 1 < len; i += j) { out[k++] = String.fromCharCode((data[i] << 8) + data[i + 1]) } break; case "utf32le": if (len >= 4 && data[0] == 255) if (data[1] == 254 && data[2] === 0 && data[3] === 0) i = 4; j = 4; for (; i < len; i += j) { w = (data[i + 3] << 24) + (data[i + 2] << 16) + (data[i + 1] << 8) + data[i]; if (w > 65535) { w -= 65536; out[k++] = String.fromCharCode(55296 + (w >> 10 & 1023)); out[k++] = String.fromCharCode(56320 + (w & 1023)) } else out[k++] = String.fromCharCode(w) } break; case "utf32be": if (len >= 4 && data[3] == 255) if (data[2] == 254 && data[1] === 0 && data[0] === 0) i = 4; j = 4; for (; i < len; i += j) { w = (data[i] << 24) + (data[i + 1] << 16) + (data[i + 2] << 8) + data[i + 3]; if (w > 65535) { w -= 65536; out[k++] = String.fromCharCode(55296 + (w >> 10 & 1023)); out[k++] = String.fromCharCode(56320 + (w & 1023)) } else out[k++] = String.fromCharCode(w) } break; case "utf7": if (len >= 4 && data[0] == 43 && data[1] == 47 && data[2] == 118) { if (len >= 5 && data[3] == 56 && data[4] == 45) i = 5; else if (data[3] == 56 || data[3] == 57 || data[3] == 43 || data[3] == 47) i = 4 } for (; i < len; i += j) { if (data[i] !== 43) { j = 1; out[k++] = String.fromCharCode(data[i]); continue } j = 1; if (data[i + 1] === 45) { j = 2; out[k++] = "+"; continue } while (String.fromCharCode(data[i + j]).match(/[A-Za-z0-9+\/]/)) j++; var dash = 0; if (data[i + j] === 45) { ++j; dash = 1 } var tt = []; var o64 = ""; var c1 = 0, c2 = 0, c3 = 0; var e1 = 0, e2 = 0, e3 = 0, e4 = 0; for (var l = 1; l < j - dash;) { e1 = BM.indexOf(String.fromCharCode(data[i + l++])); e2 = BM.indexOf(String.fromCharCode(data[i + l++])); c1 = e1 << 2 | e2 >> 4; tt.push(c1); e3 = BM.indexOf(String.fromCharCode(data[i + l++])); if (e3 === -1) break; c2 = (e2 & 15) << 4 | e3 >> 2; tt.push(c2); e4 = BM.indexOf(String.fromCharCode(data[i + l++])); if (e4 === -1) break; c3 = (e3 & 3) << 6 | e4; if (e4 < 64) tt.push(c3) } o64 = decode(1201, tt); for (l = 0; l < o64.length; ++l) out[k++] = o64.charAt(l) } break; default: throw new Error("Unsupported magic: " + cp + " " + magic[cp]); } else throw new Error("Unrecognized CP: " + cp); return out.slice(0, k).join("") }; var hascp = function hascp(cp) { return !!(cpt[cp] || magic[cp]) }; cpt.utils = { decode: decode, encode: encode, hascp: hascp, magic: magic, cache: cache }; return cpt }); var XLSX = {}; (function make_xlsx(XLSX) {
    XLSX.version = "0.10.8"; var current_codepage = 1200; if (typeof module !== "undefined" && typeof require !== "undefined") { if (typeof cptable === "undefined") global.cptable = require("./dist/cpexcel.js") } function reset_cp() { set_cp(1200) } var set_cp = function (cp) { current_codepage = cp }; function char_codes(data) { var o = []; for (var i = 0, len = data.length; i < len; ++i) o[i] = data.charCodeAt(i); return o } function utf16leread(data) { var o = []; for (var i = 0; i < data.length >> 1; ++i) o[i] = String.fromCharCode(data.charCodeAt(2 * i) + (data.charCodeAt(2 * i + 1) << 8)); return o.join("") } function utf16beread(data) { var o = []; for (var i = 0; i < data.length >> 1; ++i) o[i] = String.fromCharCode(data.charCodeAt(2 * i + 1) + (data.charCodeAt(2 * i) << 8)); return o.join("") } var debom = function (data) { var c1 = data.charCodeAt(0), c2 = data.charCodeAt(1); if (c1 == 255 && c2 == 254) return utf16leread(data.substr(2)); if (c1 == 254 && c2 == 255) return utf16beread(data.substr(2)); if (c1 == 65279) return data.substr(1); return data }; var _getchar = function _gc1(x) { return String.fromCharCode(x) }; if (typeof cptable !== "undefined") { set_cp = function (cp) { current_codepage = cp }; debom = function (data) { if (data.charCodeAt(0) === 255 && data.charCodeAt(1) === 254) { return cptable.utils.decode(1200, char_codes(data.substr(2))) } return data }; _getchar = function _gc2(x) { if (current_codepage === 1200) return String.fromCharCode(x); return cptable.utils.decode(current_codepage, [x & 255, x >> 8])[0] } } var DENSE = null; var DIF_XL = true; var Base64 = function make_b64() { var map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="; return { encode: function (input) { var o = ""; var c1, c2, c3, e1, e2, e3, e4; for (var i = 0; i < input.length;) { c1 = input.charCodeAt(i++); c2 = input.charCodeAt(i++); c3 = input.charCodeAt(i++); e1 = c1 >> 2; e2 = (c1 & 3) << 4 | c2 >> 4; e3 = (c2 & 15) << 2 | c3 >> 6; e4 = c3 & 63; if (isNaN(c2)) { e3 = e4 = 64 } else if (isNaN(c3)) { e4 = 64 } o += map.charAt(e1) + map.charAt(e2) + map.charAt(e3) + map.charAt(e4) } return o }, decode: function b64_decode(input) { var o = ""; var c1, c2, c3; var e1, e2, e3, e4; input = input.replace(/[^A-Za-z0-9\+\/\=]/g, ""); for (var i = 0; i < input.length;) { e1 = map.indexOf(input.charAt(i++)); e2 = map.indexOf(input.charAt(i++)); e3 = map.indexOf(input.charAt(i++)); e4 = map.indexOf(input.charAt(i++)); c1 = e1 << 2 | e2 >> 4; c2 = (e2 & 15) << 4 | e3 >> 2; c3 = (e3 & 3) << 6 | e4; o += String.fromCharCode(c1); if (e3 != 64) { o += String.fromCharCode(c2) } if (e4 != 64) { o += String.fromCharCode(c3) } } return o } } }(); var has_buf = typeof Buffer !== "undefined" && typeof process !== "undefined" && typeof process.versions !== "undefined" && process.versions.node; function new_raw_buf(len) { return new (has_buf ? Buffer : Array)(len) } function s2a(s) { if (has_buf) return new Buffer(s, "binary"); return s.split("").map(function (x) { return x.charCodeAt(0) & 255 }) } var bconcat = function (bufs) { return [].concat.apply([], bufs) }; var chr0 = /\u0000/g, chr1 = /[\u0001-\u0006]/; var SSF = {}; var make_ssf = function make_ssf(SSF) {
        SSF.version = "0.9.4"; function _strrev(x) { var o = "", i = x.length - 1; while (i >= 0) o += x.charAt(i--); return o } function fill(c, l) { var o = ""; while (o.length < l) o += c; return o } function pad0(v, d) { var t = "" + v; return t.length >= d ? t : fill("0", d - t.length) + t } function pad_(v, d) { var t = "" + v; return t.length >= d ? t : fill(" ", d - t.length) + t } function rpad_(v, d) { var t = "" + v; return t.length >= d ? t : t + fill(" ", d - t.length) } function pad0r1(v, d) { var t = "" + Math.round(v); return t.length >= d ? t : fill("0", d - t.length) + t } function pad0r2(v, d) { var t = "" + v; return t.length >= d ? t : fill("0", d - t.length) + t } var p2_32 = Math.pow(2, 32); function pad0r(v, d) { if (v > p2_32 || v < -p2_32) return pad0r1(v, d); var i = Math.round(v); return pad0r2(i, d) } function isgeneral(s, i) { i = i || 0; return s.length >= 7 + i && (s.charCodeAt(i) | 32) === 103 && (s.charCodeAt(i + 1) | 32) === 101 && (s.charCodeAt(i + 2) | 32) === 110 && (s.charCodeAt(i + 3) | 32) === 101 && (s.charCodeAt(i + 4) | 32) === 114 && (s.charCodeAt(i + 5) | 32) === 97 && (s.charCodeAt(i + 6) | 32) === 108 } var opts_fmt = [["date1904", 0], ["output", ""], ["WTF", false]]; function fixopts(o) { for (var y = 0; y != opts_fmt.length; ++y) if (o[opts_fmt[y][0]] === undefined) o[opts_fmt[y][0]] = opts_fmt[y][1] } SSF.opts = opts_fmt; var days = [["Sun", "Sunday"], ["Mon", "Monday"], ["Tue", "Tuesday"], ["Wed", "Wednesday"], ["Thu", "Thursday"], ["Fri", "Friday"], ["Sat", "Saturday"]]; var months = [["J", "Jan", "January"], ["F", "Feb", "February"], ["M", "Mar", "March"], ["A", "Apr", "April"], ["M", "May", "May"], ["J", "Jun", "June"], ["J", "Jul", "July"], ["A", "Aug", "August"], ["S", "Sep", "September"], ["O", "Oct", "October"], ["N", "Nov", "November"], ["D", "Dec", "December"]]; function init_table(t) { t[0] = "General"; t[1] = "0"; t[2] = "0.00"; t[3] = "#,##0"; t[4] = "#,##0.00"; t[9] = "0%"; t[10] = "0.00%"; t[11] = "0.00E+00"; t[12] = "# ?/?"; t[13] = "# ??/??"; t[14] = "m/d/yy"; t[15] = "d-mmm-yy"; t[16] = "d-mmm"; t[17] = "mmm-yy"; t[18] = "h:mm AM/PM"; t[19] = "h:mm:ss AM/PM"; t[20] = "h:mm"; t[21] = "h:mm:ss"; t[22] = "m/d/yy h:mm"; t[37] = "#,##0 ;(#,##0)"; t[38] = "#,##0 ;[Red](#,##0)"; t[39] = "#,##0.00;(#,##0.00)"; t[40] = "#,##0.00;[Red](#,##0.00)"; t[45] = "mm:ss"; t[46] = "[h]:mm:ss"; t[47] = "mmss.0"; t[48] = "##0.0E+0"; t[49] = "@"; t[56] = '"上午/下午 "hh"時"mm"分"ss"秒 "'; t[65535] = "General" } var table_fmt = {}; init_table(table_fmt); function frac(x, D, mixed) { var sgn = x < 0 ? -1 : 1; var B = x * sgn; var P_2 = 0, P_1 = 1, P = 0; var Q_2 = 1, Q_1 = 0, Q = 0; var A = Math.floor(B); while (Q_1 < D) { A = Math.floor(B); P = A * P_1 + P_2; Q = A * Q_1 + Q_2; if (B - A < 5e-8) break; B = 1 / (B - A); P_2 = P_1; P_1 = P; Q_2 = Q_1; Q_1 = Q } if (Q > D) { if (Q_1 > D) { Q = Q_2; P = P_2 } else { Q = Q_1; P = P_1 } } if (!mixed) return [0, sgn * P, Q]; var q = Math.floor(sgn * P / Q); return [q, sgn * P - q * Q, Q] } function general_fmt_int(v) { return "" + v } SSF._general_int = general_fmt_int; var general_fmt_num = function make_general_fmt_num() {
            var gnr1 = /\.(\d*[1-9])0+$/, gnr2 = /\.0*$/, gnr4 = /\.(\d*[1-9])0+/, gnr5 = /\.0*[Ee]/, gnr6 = /(E[+-])(\d)$/; function gfn2(v) { var w = v < 0 ? 12 : 11; var o = gfn5(v.toFixed(12)); if (o.length <= w) return o; o = v.toPrecision(10); if (o.length <= w) return o; return v.toExponential(5) } function gfn3(v) { var o = v.toFixed(11).replace(gnr1, ".$1"); if (o.length > (v < 0 ? 12 : 11)) o = v.toPrecision(6); return o } function gfn4(o) {
                for (var i = 0; i != o.length; ++i) if ((o.charCodeAt(i) | 32) === 101) return o.replace(gnr4, ".$1").replace(gnr5, "E").replace("e", "E").replace(gnr6, "$10$2");
                return o
            } function gfn5(o) { return o.indexOf(".") > -1 ? o.replace(gnr2, "").replace(gnr1, ".$1") : o } return function general_fmt_num(v) { var V = Math.floor(Math.log(Math.abs(v)) * Math.LOG10E), o; if (V >= -4 && V <= -1) o = v.toPrecision(10 + V); else if (Math.abs(V) <= 9) o = gfn2(v); else if (V === 10) o = v.toFixed(10).substr(0, 12); else o = gfn3(v); return gfn5(gfn4(o)) }
        }(); SSF._general_num = general_fmt_num; function general_fmt(v) { switch (typeof v) { case "string": return v; case "boolean": return v ? "TRUE" : "FALSE"; case "number": return (v | 0) === v ? general_fmt_int(v) : general_fmt_num(v); case "undefined": return ""; case "object": if (v == null) return ""; } throw new Error("unsupported value in General format: " + v) } SSF._general = general_fmt; function fix_hijri() { return 0 } function parse_date_code(v, opts, b2) { if (v > 2958465 || v < 0) return null; var date = v | 0, time = Math.floor(86400 * (v - date)), dow = 0; var dout = []; var out = { D: date, T: time, u: 86400 * (v - date) - time, y: 0, m: 0, d: 0, H: 0, M: 0, S: 0, q: 0 }; if (Math.abs(out.u) < 1e-6) out.u = 0; fixopts(opts != null ? opts : opts = []); if (opts.date1904) date += 1462; if (out.u > .9999) { out.u = 0; if (++time == 86400) { out.T = time = 0; ++date; ++out.D } } if (date === 60) { dout = b2 ? [1317, 10, 29] : [1900, 2, 29]; dow = 3 } else if (date === 0) { dout = b2 ? [1317, 8, 29] : [1900, 1, 0]; dow = 6 } else { if (date > 60)--date; var d = new Date(1900, 0, 1); d.setDate(d.getDate() + date - 1); dout = [d.getFullYear(), d.getMonth() + 1, d.getDate()]; dow = d.getDay(); if (date < 60) dow = (dow + 6) % 7; if (b2) dow = fix_hijri(d, dout) } out.y = dout[0]; out.m = dout[1]; out.d = dout[2]; out.S = time % 60; time = Math.floor(time / 60); out.M = time % 60; time = Math.floor(time / 60); out.H = time; out.q = dow; return out } SSF.parse_date_code = parse_date_code; function write_date(type, fmt, val, ss0) { var o = "", ss = 0, tt = 0, y = val.y, out, outl = 0; switch (type) { case 98: y = val.y + 543; case 121: switch (fmt.length) { case 1:; case 2: out = y % 100; outl = 2; break; default: out = y % 1e4; outl = 4; break; } break; case 109: switch (fmt.length) { case 1:; case 2: out = val.m; outl = fmt.length; break; case 3: return months[val.m - 1][1]; case 5: return months[val.m - 1][0]; default: return months[val.m - 1][2]; } break; case 100: switch (fmt.length) { case 1:; case 2: out = val.d; outl = fmt.length; break; case 3: return days[val.q][0]; default: return days[val.q][1]; } break; case 104: switch (fmt.length) { case 1:; case 2: out = 1 + (val.H + 11) % 12; outl = fmt.length; break; default: throw "bad hour format: " + fmt; } break; case 72: switch (fmt.length) { case 1:; case 2: out = val.H; outl = fmt.length; break; default: throw "bad hour format: " + fmt; } break; case 77: switch (fmt.length) { case 1:; case 2: out = val.M; outl = fmt.length; break; default: throw "bad minute format: " + fmt; } break; case 115: if (val.u === 0) switch (fmt) { case "s":; case "ss": return pad0(val.S, fmt.length); case ".0":; case ".00":; case ".000":; } switch (fmt) { case "s":; case "ss":; case ".0":; case ".00":; case ".000": if (ss0 >= 2) tt = ss0 === 3 ? 1e3 : 100; else tt = ss0 === 1 ? 10 : 1; ss = Math.round(tt * (val.S + val.u)); if (ss >= 60 * tt) ss = 0; if (fmt === "s") return ss === 0 ? "0" : "" + ss / tt; o = pad0(ss, 2 + ss0); if (fmt === "ss") return o.substr(0, 2); return "." + o.substr(2, fmt.length - 1); default: throw "bad second format: " + fmt; }; case 90: switch (fmt) { case "[h]":; case "[hh]": out = val.D * 24 + val.H; break; case "[m]":; case "[mm]": out = (val.D * 24 + val.H) * 60 + val.M; break; case "[s]":; case "[ss]": out = ((val.D * 24 + val.H) * 60 + val.M) * 60 + Math.round(val.S + val.u); break; default: throw "bad abstime format: " + fmt; } outl = fmt.length === 3 ? 1 : 2; break; case 101: out = y; outl = 1; } if (outl > 0) return pad0(out, outl); else return "" } function commaify(s) { if (s.length <= 3) return s; var j = s.length % 3, o = s.substr(0, j); for (; j != s.length; j += 3) o += (o.length > 0 ? "," : "") + s.substr(j, 3); return o } var write_num = function make_write_num() { var pct1 = /%/g; function write_num_pct(type, fmt, val) { var sfmt = fmt.replace(pct1, ""), mul = fmt.length - sfmt.length; return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill("%", mul) } function write_num_cm(type, fmt, val) { var idx = fmt.length - 1; while (fmt.charCodeAt(idx - 1) === 44)--idx; return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx))) } function write_num_exp(fmt, val) { var o; var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1; if (fmt.match(/^#+0.0E\+0$/)) { if (val == 0) return "0.0E+0"; else if (val < 0) return "-" + write_num_exp(fmt, -val); var period = fmt.indexOf("."); if (period === -1) period = fmt.indexOf("E"); var ee = Math.floor(Math.log(val) * Math.LOG10E) % period; if (ee < 0) ee += period; o = (val / Math.pow(10, ee)).toPrecision(idx + 1 + (period + ee) % period); if (o.indexOf("e") === -1) { var fakee = Math.floor(Math.log(val) * Math.LOG10E); if (o.indexOf(".") === -1) o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length + ee); else o += "E+" + (fakee - ee); while (o.substr(0, 2) === "0.") { o = o.charAt(0) + o.substr(2, period) + "." + o.substr(2 + period); o = o.replace(/^0+([1-9])/, "$1").replace(/^0+\./, "0.") } o = o.replace(/\+-/, "-") } o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function ($$, $1, $2, $3) { return $1 + $2 + $3.substr(0, (period + ee) % period) + "." + $3.substr(ee) + "E" }) } else o = val.toExponential(idx); if (fmt.match(/E\+00$/) && o.match(/e[+-]\d$/)) o = o.substr(0, o.length - 1) + "0" + o.charAt(o.length - 1); if (fmt.match(/E\-/) && o.match(/e\+/)) o = o.replace(/e\+/, "e"); return o.replace("e", "E") } var frac1 = /# (\?+)( ?)\/( ?)(\d+)/; function write_num_f1(r, aval, sign) { var den = parseInt(r[4], 10), rr = Math.round(aval * den), base = Math.floor(rr / den); var myn = rr - base * den, myd = den; return sign + (base === 0 ? "" : "" + base) + " " + (myn === 0 ? fill(" ", r[1].length + 1 + r[4].length) : pad_(myn, r[1].length) + r[2] + "/" + r[3] + pad0(myd, r[4].length)) } function write_num_f2(r, aval, sign) { return sign + (aval === 0 ? "" : "" + aval) + fill(" ", r[1].length + 2 + r[4].length) } var dec1 = /^#*0*\.([0#]+)/; var closeparen = /\).*[0#]/; var phone = /\(###\) ###\\?-####/; function hashq(str) { var o = "", cc; for (var i = 0; i != str.length; ++i) switch (cc = str.charCodeAt(i)) { case 35: break; case 63: o += " "; break; case 48: o += "0"; break; default: o += String.fromCharCode(cc); } return o } function rnd(val, d) { var dd = Math.pow(10, d); return "" + Math.round(val * dd) / dd } function dec(val, d) { if (d < ("" + Math.round((val - Math.floor(val)) * Math.pow(10, d))).length) { return 0 } return Math.round((val - Math.floor(val)) * Math.pow(10, d)) } function carry(val, d) { if (d < ("" + Math.round((val - Math.floor(val)) * Math.pow(10, d))).length) { return 1 } return 0 } function flr(val) { if (val < 2147483647 && val > -2147483648) return "" + (val >= 0 ? val | 0 : val - 1 | 0); return "" + Math.floor(val) } function write_num_flt(type, fmt, val) { if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) { var ffmt = fmt.replace(/\( */, "").replace(/ \)/, "").replace(/\)/, ""); if (val >= 0) return write_num_flt("n", ffmt, val); return "(" + write_num_flt("n", ffmt, -val) + ")" } if (fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm(type, fmt, val); if (fmt.indexOf("%") !== -1) return write_num_pct(type, fmt, val); if (fmt.indexOf("E") !== -1) return write_num_exp(fmt, val); if (fmt.charCodeAt(0) === 36) return "$" + write_num_flt(type, fmt.substr(fmt.charAt(1) == " " ? 2 : 1), val); var o; var r, ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : ""; if (fmt.match(/^00+$/)) return sign + pad0r(aval, fmt.length); if (fmt.match(/^[#?]+$/)) { o = pad0r(val, 0); if (o === "0") o = ""; return o.length > fmt.length ? o : hashq(fmt.substr(0, fmt.length - o.length)) + o } if (r = fmt.match(frac1)) return write_num_f1(r, aval, sign); if (fmt.match(/^#+0+$/)) return sign + pad0r(aval, fmt.length - fmt.indexOf("0")); if (r = fmt.match(dec1)) { o = rnd(val, r[1].length).replace(/^([^\.]+)$/, "$1." + hashq(r[1])).replace(/\.$/, "." + hashq(r[1])).replace(/\.(\d*)$/, function ($$, $1) { return "." + $1 + fill("0", hashq(r[1]).length - $1.length) }); return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./, ".") } fmt = fmt.replace(/^#+([0.])/, "$1"); if (r = fmt.match(/^(0*)\.(#*)$/)) { return sign + rnd(aval, r[2].length).replace(/\.(\d*[1-9])0*$/, ".$1").replace(/^(-?\d*)$/, "$1.").replace(/^0\./, r[1].length ? "0." : ".") } if (r = fmt.match(/^#{1,3},##0(\.?)$/)) return sign + commaify(pad0r(aval, 0)); if (r = fmt.match(/^#,##0\.([#0]*0)$/)) { return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify("" + (Math.floor(val) + carry(val, r[1].length))) + "." + pad0(dec(val, r[1].length), r[1].length) } if (r = fmt.match(/^#,#*,#0/)) return write_num_flt(type, fmt.replace(/^#,#*,/, ""), val); if (r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/)) { o = _strrev(write_num_flt(type, fmt.replace(/[\\-]/g, ""), val)); ri = 0; return _strrev(_strrev(fmt.replace(/\\/g, "")).replace(/[0#]/g, function (x) { return ri < o.length ? o.charAt(ri++) : x === "0" ? "0" : "" })) } if (fmt.match(phone)) { o = write_num_flt(type, "##########", val); return "(" + o.substr(0, 3) + ") " + o.substr(3, 3) + "-" + o.substr(6) } var oa = ""; if (r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/)) { ri = Math.min(r[4].length, 7); ff = frac(aval, Math.pow(10, ri) - 1, false); o = "" + sign; oa = write_num("n", r[1], ff[1]); if (oa.charAt(oa.length - 1) == " ") oa = oa.substr(0, oa.length - 1) + "0"; o += oa + r[2] + "/" + r[3]; oa = rpad_(ff[2], ri); if (oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length - oa.length)) + oa; o += oa; return o } if (r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/)) { ri = Math.min(Math.max(r[1].length, r[4].length), 7); ff = frac(aval, Math.pow(10, ri) - 1, true); return sign + (ff[0] || (ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1], ri) + r[2] + "/" + r[3] + rpad_(ff[2], ri) : fill(" ", 2 * ri + 1 + r[2].length + r[3].length)) } if (r = fmt.match(/^[#0?]+$/)) { o = pad0r(val, 0); if (fmt.length <= o.length) return o; return hashq(fmt.substr(0, fmt.length - o.length)) + o } if (r = fmt.match(/^([#0?]+)\.([#0]+)$/)) { o = "" + val.toFixed(Math.min(r[2].length, 10)).replace(/([^0])0+$/, "$1"); ri = o.indexOf("."); var lres = fmt.indexOf(".") - ri, rres = fmt.length - o.length - lres; return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres)) } if (r = fmt.match(/^00,000\.([#0]*0)$/)) { ri = dec(val, r[1].length); return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify(flr(val)).replace(/^\d,\d{3}$/, "0$&").replace(/^\d*$/, function ($$) { return "00," + ($$.length < 3 ? pad0(0, 3 - $$.length) : "") + $$ }) + "." + pad0(ri, r[1].length) } switch (fmt) { case "###,##0.00": return write_num_flt(type, "#,##0.00", val); case "###,###":; case "##,###":; case "#,###": var x = commaify(pad0r(aval, 0)); return x !== "0" ? sign + x : ""; case "###,###.00": return write_num_flt(type, "###,##0.00", val).replace(/^0\./, "."); case "#,###.00": return write_num_flt(type, "#,##0.00", val).replace(/^0\./, "."); default:; } throw new Error("unsupported format |" + fmt + "|") } function write_num_cm2(type, fmt, val) { var idx = fmt.length - 1; while (fmt.charCodeAt(idx - 1) === 44)--idx; return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx))) } function write_num_pct2(type, fmt, val) { var sfmt = fmt.replace(pct1, ""), mul = fmt.length - sfmt.length; return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill("%", mul) } function write_num_exp2(fmt, val) { var o; var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1; if (fmt.match(/^#+0.0E\+0$/)) { if (val == 0) return "0.0E+0"; else if (val < 0) return "-" + write_num_exp2(fmt, -val); var period = fmt.indexOf("."); if (period === -1) period = fmt.indexOf("E"); var ee = Math.floor(Math.log(val) * Math.LOG10E) % period; if (ee < 0) ee += period; o = (val / Math.pow(10, ee)).toPrecision(idx + 1 + (period + ee) % period); if (!o.match(/[Ee]/)) { var fakee = Math.floor(Math.log(val) * Math.LOG10E); if (o.indexOf(".") === -1) o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length + ee); else o += "E+" + (fakee - ee); o = o.replace(/\+-/, "-") } o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function ($$, $1, $2, $3) { return $1 + $2 + $3.substr(0, (period + ee) % period) + "." + $3.substr(ee) + "E" }) } else o = val.toExponential(idx); if (fmt.match(/E\+00$/) && o.match(/e[+-]\d$/)) o = o.substr(0, o.length - 1) + "0" + o.charAt(o.length - 1); if (fmt.match(/E\-/) && o.match(/e\+/)) o = o.replace(/e\+/, "e"); return o.replace("e", "E") } function write_num_int(type, fmt, val) { if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) { var ffmt = fmt.replace(/\( */, "").replace(/ \)/, "").replace(/\)/, ""); if (val >= 0) return write_num_int("n", ffmt, val); return "(" + write_num_int("n", ffmt, -val) + ")" } if (fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm2(type, fmt, val); if (fmt.indexOf("%") !== -1) return write_num_pct2(type, fmt, val); if (fmt.indexOf("E") !== -1) return write_num_exp2(fmt, val); if (fmt.charCodeAt(0) === 36) return "$" + write_num_int(type, fmt.substr(fmt.charAt(1) == " " ? 2 : 1), val); var o; var r, ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : ""; if (fmt.match(/^00+$/)) return sign + pad0(aval, fmt.length); if (fmt.match(/^[#?]+$/)) { o = "" + val; if (val === 0) o = ""; return o.length > fmt.length ? o : hashq(fmt.substr(0, fmt.length - o.length)) + o } if (r = fmt.match(frac1)) return write_num_f2(r, aval, sign); if (fmt.match(/^#+0+$/)) return sign + pad0(aval, fmt.length - fmt.indexOf("0")); if (r = fmt.match(dec1)) { o = ("" + val).replace(/^([^\.]+)$/, "$1." + hashq(r[1])).replace(/\.$/, "." + hashq(r[1])); o = o.replace(/\.(\d*)$/, function ($$, $1) { return "." + $1 + fill("0", hashq(r[1]).length - $1.length) }); return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./, ".") } fmt = fmt.replace(/^#+([0.])/, "$1"); if (r = fmt.match(/^(0*)\.(#*)$/)) { return sign + ("" + aval).replace(/\.(\d*[1-9])0*$/, ".$1").replace(/^(-?\d*)$/, "$1.").replace(/^0\./, r[1].length ? "0." : ".") } if (r = fmt.match(/^#{1,3},##0(\.?)$/)) return sign + commaify("" + aval); if (r = fmt.match(/^#,##0\.([#0]*0)$/)) { return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify("" + val) + "." + fill("0", r[1].length) } if (r = fmt.match(/^#,#*,#0/)) return write_num_int(type, fmt.replace(/^#,#*,/, ""), val); if (r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/)) { o = _strrev(write_num_int(type, fmt.replace(/[\\-]/g, ""), val)); ri = 0; return _strrev(_strrev(fmt.replace(/\\/g, "")).replace(/[0#]/g, function (x) { return ri < o.length ? o.charAt(ri++) : x === "0" ? "0" : "" })) } if (fmt.match(phone)) { o = write_num_int(type, "##########", val); return "(" + o.substr(0, 3) + ") " + o.substr(3, 3) + "-" + o.substr(6) } var oa = ""; if (r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/)) { ri = Math.min(r[4].length, 7); ff = frac(aval, Math.pow(10, ri) - 1, false); o = "" + sign; oa = write_num("n", r[1], ff[1]); if (oa.charAt(oa.length - 1) == " ") oa = oa.substr(0, oa.length - 1) + "0"; o += oa + r[2] + "/" + r[3]; oa = rpad_(ff[2], ri); if (oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length - oa.length)) + oa; o += oa; return o } if (r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/)) { ri = Math.min(Math.max(r[1].length, r[4].length), 7); ff = frac(aval, Math.pow(10, ri) - 1, true); return sign + (ff[0] || (ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1], ri) + r[2] + "/" + r[3] + rpad_(ff[2], ri) : fill(" ", 2 * ri + 1 + r[2].length + r[3].length)) } if (r = fmt.match(/^[#0?]+$/)) { o = "" + val; if (fmt.length <= o.length) return o; return hashq(fmt.substr(0, fmt.length - o.length)) + o } if (r = fmt.match(/^([#0]+)\.([#0]+)$/)) { o = "" + val.toFixed(Math.min(r[2].length, 10)).replace(/([^0])0+$/, "$1"); ri = o.indexOf("."); var lres = fmt.indexOf(".") - ri, rres = fmt.length - o.length - lres; return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres)) } if (r = fmt.match(/^00,000\.([#0]*0)$/)) { return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify("" + val).replace(/^\d,\d{3}$/, "0$&").replace(/^\d*$/, function ($$) { return "00," + ($$.length < 3 ? pad0(0, 3 - $$.length) : "") + $$ }) + "." + pad0(0, r[1].length) } switch (fmt) { case "###,###":; case "##,###":; case "#,###": var x = commaify("" + aval); return x !== "0" ? sign + x : ""; default: if (fmt.match(/\.[0#?]*$/)) return write_num_int(type, fmt.slice(0, fmt.lastIndexOf(".")), val) + hashq(fmt.slice(fmt.lastIndexOf("."))); } throw new Error("unsupported format |" + fmt + "|") } return function write_num(type, fmt, val) { return (val | 0) === val ? write_num_int(type, fmt, val) : write_num_flt(type, fmt, val) } }(); function split_fmt(fmt) { var out = []; var in_str = false; for (var i = 0, j = 0; i < fmt.length; ++i) switch (fmt.charCodeAt(i)) { case 34: in_str = !in_str; break; case 95:; case 42:; case 92: ++i; break; case 59: out[out.length] = fmt.substr(j, i - j); j = i + 1; } out[out.length] = fmt.substr(j); if (in_str === true) throw new Error("Format |" + fmt + "| unterminated string "); return out } SSF._split = split_fmt; var abstime = /\[[HhMmSs]*\]/; function fmt_is_date(fmt) { var i = 0, c = "", o = ""; while (i < fmt.length) { switch (c = fmt.charAt(i)) { case "G": if (isgeneral(fmt, i)) i += 6; i++; break; case '"': for (; fmt.charCodeAt(++i) !== 34 && i < fmt.length;)++i; ++i; break; case "\\": i += 2; break; case "_": i += 2; break; case "@": ++i; break; case "B":; case "b": if (fmt.charAt(i + 1) === "1" || fmt.charAt(i + 1) === "2") return true; case "M":; case "D":; case "Y":; case "H":; case "S":; case "E":; case "m":; case "d":; case "y":; case "h":; case "s":; case "e":; case "g": return true; case "A":; case "a": if (fmt.substr(i, 3).toUpperCase() === "A/P") return true; if (fmt.substr(i, 5).toUpperCase() === "AM/PM") return true; ++i; break; case "[": o = c; while (fmt.charAt(i++) !== "]" && i < fmt.length) o += fmt.charAt(i); if (o.match(abstime)) return true; break; case ".":; case "0":; case "#": while (i < fmt.length && ("0#?.,E+-%".indexOf(c = fmt.charAt(++i)) > -1 || c == "\\" && fmt.charAt(i + 1) == "-" && "0#".indexOf(fmt.charAt(i + 2)) > -1)) { } break; case "?": while (fmt.charAt(++i) === c) { } break; case "*": ++i; if (fmt.charAt(i) == " " || fmt.charAt(i) == "*")++i; break; case "(":; case ")": ++i; break; case "1":; case "2":; case "3":; case "4":; case "5":; case "6":; case "7":; case "8":; case "9": while (i < fmt.length && "0123456789".indexOf(fmt.charAt(++i)) > -1) { } break; case " ": ++i; break; default: ++i; break; } } return false } SSF.is_date = fmt_is_date; function eval_fmt(fmt, v, opts, flen) { var out = [], o = "", i = 0, c = "", lst = "t", q, dt, j, cc; var hr = "H"; while (i < fmt.length) { switch (c = fmt.charAt(i)) { case "G": if (!isgeneral(fmt, i)) throw new Error("unrecognized character " + c + " in " + fmt); out[out.length] = { t: "G", v: "General" }; i += 7; break; case '"': for (o = ""; (cc = fmt.charCodeAt(++i)) !== 34 && i < fmt.length;) o += String.fromCharCode(cc); out[out.length] = { t: "t", v: o }; ++i; break; case "\\": var w = fmt.charAt(++i), t = w === "(" || w === ")" ? w : "t"; out[out.length] = { t: t, v: w }; ++i; break; case "_": out[out.length] = { t: "t", v: " " }; i += 2; break; case "@": out[out.length] = { t: "T", v: v }; ++i; break; case "B":; case "b": if (fmt.charAt(i + 1) === "1" || fmt.charAt(i + 1) === "2") { if (dt == null) { dt = parse_date_code(v, opts, fmt.charAt(i + 1) === "2"); if (dt == null) return "" } out[out.length] = { t: "X", v: fmt.substr(i, 2) }; lst = c; i += 2; break }; case "M":; case "D":; case "Y":; case "H":; case "S":; case "E": c = c.toLowerCase(); case "m":; case "d":; case "y":; case "h":; case "s":; case "e":; case "g": if (v < 0) return ""; if (dt == null) { dt = parse_date_code(v, opts); if (dt == null) return "" } o = c; while (++i < fmt.length && fmt.charAt(i).toLowerCase() === c) o += c; if (c === "m" && lst.toLowerCase() === "h") c = "M"; if (c === "h") c = hr; out[out.length] = { t: c, v: o }; lst = c; break; case "A":; case "a": q = { t: c, v: c }; if (dt == null) dt = parse_date_code(v, opts); if (fmt.substr(i, 3).toUpperCase() === "A/P") { if (dt != null) q.v = dt.H >= 12 ? "P" : "A"; q.t = "T"; hr = "h"; i += 3 } else if (fmt.substr(i, 5).toUpperCase() === "AM/PM") { if (dt != null) q.v = dt.H >= 12 ? "PM" : "AM"; q.t = "T"; i += 5; hr = "h" } else { q.t = "t"; ++i } if (dt == null && q.t === "T") return ""; out[out.length] = q; lst = c; break; case "[": o = c; while (fmt.charAt(i++) !== "]" && i < fmt.length) o += fmt.charAt(i); if (o.slice(-1) !== "]") throw 'unterminated "[" block: |' + o + "|"; if (o.match(abstime)) { if (dt == null) { dt = parse_date_code(v, opts); if (dt == null) return "" } out[out.length] = { t: "Z", v: o.toLowerCase() }; lst = o.charAt(1) } else if (o.indexOf("$") > -1) { o = (o.match(/\$([^-\[\]]*)/) || [])[1] || "$"; if (!fmt_is_date(fmt)) out[out.length] = { t: "t", v: o } } break; case ".": if (dt != null) { o = c; while ((c = fmt.charAt(++i)) === "0") o += c; out[out.length] = { t: "s", v: o }; break }; case "0":; case "#": o = c; while (++i < fmt.length && "0#?.,E+-%".indexOf(c = fmt.charAt(i)) > -1 || c == "\\" && fmt.charAt(i + 1) == "-" && i < fmt.length - 2 && "0#".indexOf(fmt.charAt(i + 2)) > -1) o += c; out[out.length] = { t: "n", v: o }; break; case "?": o = c; while (fmt.charAt(++i) === c) o += c; q = { t: c, v: o }; out[out.length] = q; lst = c; break; case "*": ++i; if (fmt.charAt(i) == " " || fmt.charAt(i) == "*")++i; break; case "(":; case ")": out[out.length] = { t: flen === 1 ? "t" : c, v: c }; ++i; break; case "1":; case "2":; case "3":; case "4":; case "5":; case "6":; case "7":; case "8":; case "9": o = c; while (i < fmt.length && "0123456789".indexOf(fmt.charAt(++i)) > -1) o += fmt.charAt(i); out[out.length] = { t: "D", v: o }; break; case " ": out[out.length] = { t: c, v: c }; ++i; break; default: if (",$-+/():!^&'~{}<>=€acfijklopqrtuvwxzP".indexOf(c) === -1) throw new Error("unrecognized character " + c + " in " + fmt); out[out.length] = { t: "t", v: c }; ++i; break; } } var bt = 0, ss0 = 0, ssm; for (i = out.length - 1, lst = "t"; i >= 0; --i) { switch (out[i].t) { case "h":; case "H": out[i].t = hr; lst = "h"; if (bt < 1) bt = 1; break; case "s": if (ssm = out[i].v.match(/\.0+$/)) ss0 = Math.max(ss0, ssm[0].length - 1); if (bt < 3) bt = 3; case "d":; case "y":; case "M":; case "e": lst = out[i].t; break; case "m": if (lst === "s") { out[i].t = "M"; if (bt < 2) bt = 2 } break; case "X": break; case "Z": if (bt < 1 && out[i].v.match(/[Hh]/)) bt = 1; if (bt < 2 && out[i].v.match(/[Mm]/)) bt = 2; if (bt < 3 && out[i].v.match(/[Ss]/)) bt = 3; } } switch (bt) { case 0: break; case 1: if (dt.u >= .5) { dt.u = 0; ++dt.S } if (dt.S >= 60) { dt.S = 0; ++dt.M } if (dt.M >= 60) { dt.M = 0; ++dt.H } break; case 2: if (dt.u >= .5) { dt.u = 0; ++dt.S } if (dt.S >= 60) { dt.S = 0; ++dt.M } break; } var nstr = "", jj; for (i = 0; i < out.length; ++i) { switch (out[i].t) { case "t":; case "T":; case " ":; case "D": break; case "X": out[i].v = ""; out[i].t = ";"; break; case "d":; case "m":; case "y":; case "h":; case "H":; case "M":; case "s":; case "e":; case "b":; case "Z": out[i].v = write_date(out[i].t.charCodeAt(0), out[i].v, dt, ss0); out[i].t = "t"; break; case "n":; case "(":; case "?": jj = i + 1; while (out[jj] != null && ((c = out[jj].t) === "?" || c === "D" || (c === " " || c === "t") && out[jj + 1] != null && (out[jj + 1].t === "?" || out[jj + 1].t === "t" && out[jj + 1].v === "/") || out[i].t === "(" && (c === " " || c === "n" || c === ")") || c === "t" && (out[jj].v === "/" || out[jj].v === " " && out[jj + 1] != null && out[jj + 1].t == "?"))) { out[i].v += out[jj].v; out[jj] = { v: "", t: ";" }; ++jj } nstr += out[i].v; i = jj - 1; break; case "G": out[i].t = "t"; out[i].v = general_fmt(v, opts); break; } } var vv = "", myv, ostr; if (nstr.length > 0) { if (nstr.charCodeAt(0) == 40) { myv = v < 0 && nstr.charCodeAt(0) === 45 ? -v : v; ostr = write_num("(", nstr, myv) } else { myv = v < 0 && flen > 1 ? -v : v; ostr = write_num("n", nstr, myv); if (myv < 0 && out[0] && out[0].t == "t") { ostr = ostr.substr(1); out[0].v = "-" + out[0].v } } jj = ostr.length - 1; var decpt = out.length; for (i = 0; i < out.length; ++i) if (out[i] != null && out[i].t != "t" && out[i].v.indexOf(".") > -1) { decpt = i; break } var lasti = out.length; if (decpt === out.length && ostr.indexOf("E") === -1) { for (i = out.length - 1; i >= 0; --i) { if (out[i] == null || "n?(".indexOf(out[i].t) === -1) continue; if (jj >= out[i].v.length - 1) { jj -= out[i].v.length; out[i].v = ostr.substr(jj + 1, out[i].v.length) } else if (jj < 0) out[i].v = ""; else { out[i].v = ostr.substr(0, jj + 1); jj = -1 } out[i].t = "t"; lasti = i } if (jj >= 0 && lasti < out.length) out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v } else if (decpt !== out.length && ostr.indexOf("E") === -1) { jj = ostr.indexOf(".") - 1; for (i = decpt; i >= 0; --i) { if (out[i] == null || "n?(".indexOf(out[i].t) === -1) continue; j = out[i].v.indexOf(".") > -1 && i === decpt ? out[i].v.indexOf(".") - 1 : out[i].v.length - 1; vv = out[i].v.substr(j + 1); for (; j >= 0; --j) { if (jj >= 0 && (out[i].v.charAt(j) === "0" || out[i].v.charAt(j) === "#")) vv = ostr.charAt(jj--) + vv } out[i].v = vv; out[i].t = "t"; lasti = i } if (jj >= 0 && lasti < out.length) out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v; jj = ostr.indexOf(".") + 1; for (i = decpt; i < out.length; ++i) { if (out[i] == null || "n?(".indexOf(out[i].t) === -1 && i !== decpt) continue; j = out[i].v.indexOf(".") > -1 && i === decpt ? out[i].v.indexOf(".") + 1 : 0; vv = out[i].v.substr(0, j); for (; j < out[i].v.length; ++j) { if (jj < ostr.length) vv += ostr.charAt(jj++) } out[i].v = vv; out[i].t = "t"; lasti = i } } } for (i = 0; i < out.length; ++i) if (out[i] != null && "n(?".indexOf(out[i].t) > -1) { myv = flen > 1 && v < 0 && i > 0 && out[i - 1].v === "-" ? -v : v; out[i].v = write_num(out[i].t, out[i].v, myv); out[i].t = "t" } var retval = ""; for (i = 0; i !== out.length; ++i) if (out[i] != null) retval += out[i].v; return retval } SSF._eval = eval_fmt; var cfregex = /\[[=<>]/; var cfregex2 = /\[([=<>]*)(-?\d+\.?\d*)\]/; function chkcond(v, rr) { if (rr == null) return false; var thresh = parseFloat(rr[2]); switch (rr[1]) { case "=": if (v == thresh) return true; break; case ">": if (v > thresh) return true; break; case "<": if (v < thresh) return true; break; case "<>": if (v != thresh) return true; break; case ">=": if (v >= thresh) return true; break; case "<=": if (v <= thresh) return true; break; } return false } function choose_fmt(f, v) { var fmt = split_fmt(f); var l = fmt.length, lat = fmt[l - 1].indexOf("@"); if (l < 4 && lat > -1)--l; if (fmt.length > 4) throw new Error("cannot find right format for |" + fmt.join("|") + "|"); if (typeof v !== "number") return [4, fmt.length === 4 || lat > -1 ? fmt[fmt.length - 1] : "@"]; switch (fmt.length) { case 1: fmt = lat > -1 ? ["General", "General", "General", fmt[0]] : [fmt[0], fmt[0], fmt[0], "@"]; break; case 2: fmt = lat > -1 ? [fmt[0], fmt[0], fmt[0], fmt[1]] : [fmt[0], fmt[1], fmt[0], "@"]; break; case 3: fmt = lat > -1 ? [fmt[0], fmt[1], fmt[0], fmt[2]] : [fmt[0], fmt[1], fmt[2], "@"]; break; case 4: break; } var ff = v > 0 ? fmt[0] : v < 0 ? fmt[1] : fmt[2]; if (fmt[0].indexOf("[") === -1 && fmt[1].indexOf("[") === -1) return [l, ff]; if (fmt[0].match(cfregex) != null || fmt[1].match(cfregex) != null) { var m1 = fmt[0].match(cfregex2); var m2 = fmt[1].match(cfregex2); return chkcond(v, m1) ? [l, fmt[0]] : chkcond(v, m2) ? [l, fmt[1]] : [l, fmt[m1 != null && m2 != null ? 2 : 1]] } return [l, ff] } function format(fmt, v, o) { if (o == null) o = {}; var sfmt = ""; switch (typeof fmt) { case "string": if (fmt == "m/d/yy" && o.dateNF) sfmt = o.dateNF; else sfmt = fmt; break; case "number": if (fmt == 14 && o.dateNF) sfmt = o.dateNF; else sfmt = (o.table != null ? o.table : table_fmt)[fmt]; break; } if (isgeneral(sfmt, 0)) return general_fmt(v, o); var f = choose_fmt(sfmt, v); if (isgeneral(f[1])) return general_fmt(v, o); if (v === true) v = "TRUE"; else if (v === false) v = "FALSE"; else if (v === "" || v == null) return ""; return eval_fmt(f[1], v, o, f[0]) } SSF._table = table_fmt; SSF.load = function load_entry(fmt, idx) { table_fmt[idx] = fmt }; SSF.format = format; SSF.get_table = function get_table() { return table_fmt }; SSF.load_table = function load_table(tbl) { for (var i = 0; i != 392; ++i) if (tbl[i] !== undefined) SSF.load(tbl[i], i) }; SSF.init_table = init_table
    }; make_ssf(SSF); var XLMLFormatMap = { "General Number": "General", "General Date": SSF._table[22], "Long Date": "dddd, mmmm dd, yyyy", "Medium Date": SSF._table[15], "Short Date": SSF._table[14], "Long Time": SSF._table[19], "Medium Time": SSF._table[18], "Short Time": SSF._table[20], Currency: '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)', Fixed: SSF._table[2], Standard: SSF._table[4], Percent: SSF._table[10], Scientific: SSF._table[11], "Yes/No": '"Yes";"Yes";"No";@', "True/False": '"True";"True";"False";@', "On/Off": '"Yes";"Yes";"No";@' }; var dateNFregex = /[dD]+|[mM]+|[yYeE]+|[Hh]+|[Ss]+/g; function dateNF_regex(dateNF) { var fmt = typeof dateNF == "number" ? SSF._table[dateNF] : dateNF; fmt = fmt.replace(dateNFregex, "(\\d+)"); return new RegExp("^" + fmt + "$") } function dateNF_fix(str, dateNF, match) { var Y = -1, m = -1, d = -1, H = -1, M = -1, S = -1; (dateNF.match(dateNFregex) || []).forEach(function (n, i) { var v = parseInt(match[i + 1], 10); switch (n.toLowerCase().charAt(0)) { case "y": Y = v; break; case "d": d = v; break; case "h": H = v; break; case "s": S = v; break; case "m": if (H >= 0) M = v; else m = v; break; } }); if (S >= 0 && M == -1 && m >= 0) { M = m; m = -1 } var datestr = ("" + (Y >= 0 ? Y : (new Date).getFullYear())).slice(-4) + "-" + ("00" + (m >= 1 ? m : 1)).slice(-2) + "-" + ("00" + (d >= 1 ? d : 1)).slice(-2); if (datestr.length == 7) datestr = "0" + datestr; if (datestr.length == 8) datestr = "20" + datestr; var timestr = ("00" + (H >= 0 ? H : 0)).slice(-2) + ":" + ("00" + (M >= 0 ? M : 0)).slice(-2) + ":" + ("00" + (S >= 0 ? S : 0)).slice(-2); if (H == -1 && M == -1 && S == -1) return datestr; if (Y == -1 && m == -1 && d == -1) return timestr; return datestr + "T" + timestr } var DO_NOT_EXPORT_CFB = true; var CFB = function _CFB() {
        var exports = {}; exports.version = "0.11.1"; function parse(file) { var mver = 3; var ssz = 512; var nmfs = 0; var ndfs = 0; var dir_start = 0; var minifat_start = 0; var difat_start = 0; var fat_addrs = []; var blob = file.slice(0, 512); prep_blob(blob, 0); var mv = check_get_mver(blob); mver = mv[0]; switch (mver) { case 3: ssz = 512; break; case 4: ssz = 4096; break; default: throw new Error("Major Version: Expected 3 or 4 saw " + mver); } if (ssz !== 512) { blob = file.slice(0, ssz); prep_blob(blob, 28) } var header = file.slice(0, ssz); check_shifts(blob, mver); var nds = blob.read_shift(4, "i"); if (mver === 3 && nds !== 0) throw new Error("# Directory Sectors: Expected 0 saw " + nds); blob.l += 4; dir_start = blob.read_shift(4, "i"); blob.l += 4; blob.chk("00100000", "Mini Stream Cutoff Size: "); minifat_start = blob.read_shift(4, "i"); nmfs = blob.read_shift(4, "i"); difat_start = blob.read_shift(4, "i"); ndfs = blob.read_shift(4, "i"); for (var q, j = 0; j < 109; ++j) { q = blob.read_shift(4, "i"); if (q < 0) break; fat_addrs[j] = q } var sectors = sectorify(file, ssz); sleuth_fat(difat_start, ndfs, sectors, ssz, fat_addrs); var sector_list = make_sector_list(sectors, dir_start, fat_addrs, ssz); sector_list[dir_start].name = "!Directory"; if (nmfs > 0 && minifat_start !== ENDOFCHAIN) sector_list[minifat_start].name = "!MiniFAT"; sector_list[fat_addrs[0]].name = "!FAT"; sector_list.fat_addrs = fat_addrs; sector_list.ssz = ssz; var files = {}, Paths = [], FileIndex = [], FullPaths = [], FullPathDir = {}; read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex); build_full_paths(FileIndex, FullPathDir, FullPaths, Paths); var root_name = Paths.shift(); Paths.root = root_name; var find_path = make_find_path(FullPaths, Paths, FileIndex, files, root_name); return { raw: { header: header, sectors: sectors }, FileIndex: FileIndex, FullPaths: FullPaths, FullPathDir: FullPathDir, find: find_path } } function check_get_mver(blob) { blob.chk(HEADER_SIGNATURE, "Header Signature: "); blob.chk(HEADER_CLSID, "CLSID: "); var mver = blob.read_shift(2, "u"); return [blob.read_shift(2, "u"), mver] } function check_shifts(blob, mver) { var shift = 9; blob.l += 2; switch (shift = blob.read_shift(2)) { case 9: if (mver != 3) throw new Error("Sector Shift: Expected 9 saw " + shift); break; case 12: if (mver != 4) throw new Error("Sector Shift: Expected 12 saw " + shift); break; default: throw new Error("Sector Shift: Expected 9 or 12 saw " + shift); } blob.chk("0600", "Mini Sector Shift: "); blob.chk("000000000000", "Reserved: ") } function sectorify(file, ssz) { var nsectors = Math.ceil(file.length / ssz) - 1; var sectors = new Array(nsectors); for (var i = 1; i < nsectors; ++i) sectors[i - 1] = file.slice(i * ssz, (i + 1) * ssz); sectors[nsectors - 1] = file.slice(nsectors * ssz); return sectors } function build_full_paths(FI, FPD, FP, Paths) { var i = 0, L = 0, R = 0, C = 0, j = 0, pl = Paths.length; var dad = new Array(pl), q = new Array(pl); for (; i < pl; ++i) { dad[i] = q[i] = i; FP[i] = Paths[i] } for (; j < q.length; ++j) { i = q[j]; L = FI[i].L; R = FI[i].R; C = FI[i].C; if (dad[i] === i) { if (L !== -1 && dad[L] !== L) dad[i] = dad[L]; if (R !== -1 && dad[R] !== R) dad[i] = dad[R] } if (C !== -1) dad[C] = i; if (L !== -1) { dad[L] = dad[i]; q.push(L) } if (R !== -1) { dad[R] = dad[i]; q.push(R) } } for (i = 1; i !== pl; ++i) if (dad[i] === i) { if (R !== -1 && dad[R] !== R) dad[i] = dad[R]; else if (L !== -1 && dad[L] !== L) dad[i] = dad[L] } for (i = 1; i < pl; ++i) { if (FI[i].type === 0) continue; j = dad[i]; if (j === 0) FP[i] = FP[0] + "/" + FP[i]; else while (j !== 0) { FP[i] = FP[j] + "/" + FP[i]; j = dad[j] } dad[i] = 0 } FP[0] += "/"; for (i = 1; i < pl; ++i) { if (FI[i].type !== 2) FP[i] += "/"; FPD[FP[i]] = FI[i] } } function make_find_path(FullPaths, Paths, FileIndex, files, root_name) { var UCFullPaths = new Array(FullPaths.length); var UCPaths = new Array(Paths.length), i; for (i = 0; i < FullPaths.length; ++i) UCFullPaths[i] = FullPaths[i].toUpperCase().replace(chr0, "").replace(chr1, "!"); for (i = 0; i < Paths.length; ++i) UCPaths[i] = Paths[i].toUpperCase().replace(chr0, "").replace(chr1, "!"); return function find_path(path) { var k; if (path.charCodeAt(0) === 47) { k = true; path = root_name + path } else k = path.indexOf("/") !== -1; var UCPath = path.toUpperCase().replace(chr0, "").replace(chr1, "!"); var w = k === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath); if (w === -1) return null; return k === true ? FileIndex[w] : files[Paths[w]] } } function sleuth_fat(idx, cnt, sectors, ssz, fat_addrs) { var q; if (idx === ENDOFCHAIN) { if (cnt !== 0) throw new Error("DIFAT chain shorter than expected") } else if (idx !== -1) { var sector = sectors[idx], m = (ssz >>> 2) - 1; if (!sector) return; for (var i = 0; i < m; ++i) { if ((q = __readInt32LE(sector, i * 4)) === ENDOFCHAIN) break; fat_addrs.push(q) } sleuth_fat(__readInt32LE(sector, ssz - 4), cnt - 1, sectors, ssz, fat_addrs) } } function get_sector_list(sectors, start, fat_addrs, ssz, chkd) { var sl = sectors.length; var buf, buf_chain; if (!chkd) chkd = new Array(sl); var modulus = ssz - 1, j, jj; buf = []; buf_chain = []; for (j = start; j >= 0;) { chkd[j] = true; buf[buf.length] = j; buf_chain.push(sectors[j]); var addr = fat_addrs[Math.floor(j * 4 / ssz)]; jj = j * 4 & modulus; if (ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j + " 4 " + ssz); if (!sectors[addr]) break; j = __readInt32LE(sectors[addr], jj) } return { nodes: buf, data: __toBuffer([buf_chain]) } } function make_sector_list(sectors, dir_start, fat_addrs, ssz) { var sl = sectors.length, sector_list = new Array(sl); var chkd = new Array(sl), buf, buf_chain; var modulus = ssz - 1, i, j, k, jj; for (i = 0; i < sl; ++i) { buf = []; k = i + dir_start; if (k >= sl) k -= sl; if (chkd[k] === true) continue; buf_chain = []; for (j = k; j >= 0;) { chkd[j] = true; buf[buf.length] = j; buf_chain.push(sectors[j]); var addr = fat_addrs[Math.floor(j * 4 / ssz)]; jj = j * 4 & modulus; if (ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j + " 4 " + ssz); if (!sectors[addr]) break; j = __readInt32LE(sectors[addr], jj) } sector_list[k] = { nodes: buf, data: __toBuffer([buf_chain]) } } return sector_list } function read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex) {
            var blob; var minifat_store = 0, pl = Paths.length ? 2 : 0; var sector = sector_list[dir_start].data; var i = 0, namelen = 0, name, o, ctime, mtime; for (; i < sector.length; i += 128) {
                blob = sector.slice(i, i + 128); prep_blob(blob, 64); namelen = blob.read_shift(2); if (namelen === 0) continue; name = __utf16le(blob, 0, namelen - pl); Paths.push(name); o = { name: name, type: blob.read_shift(1), color: blob.read_shift(1), L: blob.read_shift(4, "i"), R: blob.read_shift(4, "i"), C: blob.read_shift(4, "i"), clsid: blob.read_shift(16), state: blob.read_shift(4, "i") }; ctime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2); if (ctime !== 0) { o.ctime = ctime; o.ct = read_date(blob, blob.l - 8) } mtime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2); if (mtime !== 0) { o.mtime = mtime; o.mt = read_date(blob, blob.l - 8) } o.start = blob.read_shift(4, "i"); o.size = blob.read_shift(4, "i");
                if (o.type === 5) { minifat_store = o.start; if (nmfs > 0 && minifat_store !== ENDOFCHAIN) sector_list[minifat_store].name = "!StreamData" } else if (o.size >= 4096) { o.storage = "fat"; if (sector_list[o.start] === undefined) sector_list[o.start] = get_sector_list(sectors, o.start, sector_list.fat_addrs, sector_list.ssz); sector_list[o.start].name = o.name; o.content = sector_list[o.start].data.slice(0, o.size); prep_blob(o.content, 0) } else { o.storage = "minifat"; if (minifat_store !== ENDOFCHAIN && o.start !== ENDOFCHAIN) { o.content = sector_list[minifat_store].data.slice(o.start * MSSZ, o.start * MSSZ + o.size); prep_blob(o.content, 0) } } files[name] = o; FileIndex.push(o)
            }
        } function read_date(blob, offset) { return new Date((__readUInt32LE(blob, offset + 4) / 1e7 * Math.pow(2, 32) + __readUInt32LE(blob, offset) / 1e7 - 11644473600) * 1e3) } var fs; function readFileSync(filename, options) { if (fs === undefined) fs = require("fs"); return parse(fs.readFileSync(filename), options) } function readSync(blob, options) { switch (options !== undefined && options.type !== undefined ? options.type : "base64") { case "file": return readFileSync(blob, options); case "base64": return parse(s2a(Base64.decode(blob)), options); case "binary": return parse(s2a(blob), options); } return parse(blob) } var MSSZ = 64; var ENDOFCHAIN = -2; var HEADER_SIGNATURE = "d0cf11e0a1b11ae1"; var HEADER_CLSID = "00000000000000000000000000000000"; var consts = { MAXREGSECT: -6, DIFSECT: -4, FATSECT: -3, ENDOFCHAIN: ENDOFCHAIN, FREESECT: -1, HEADER_SIGNATURE: HEADER_SIGNATURE, HEADER_MINOR_VERSION: "3e00", MAXREGSID: -6, NOSTREAM: -1, HEADER_CLSID: HEADER_CLSID, EntryTypes: ["unknown", "storage", "stream", "lockbytes", "property", "root"] }; exports.read = readSync; exports.parse = parse; exports.utils = { ReadShift: ReadShift, CheckField: CheckField, prep_blob: prep_blob, bconcat: bconcat, consts: consts }; return exports
    }(); if (typeof require !== "undefined" && typeof module !== "undefined" && typeof DO_NOT_EXPORT_CFB === "undefined") { module.exports = CFB } function isval(x) { return x !== undefined && x !== null } function keys(o) { return Object.keys(o) } function evert_key(obj, key) { var o = [], K = keys(obj); for (var i = 0; i !== K.length; ++i) o[obj[K[i]][key]] = K[i]; return o } function evert(obj) { var o = [], K = keys(obj); for (var i = 0; i !== K.length; ++i) o[obj[K[i]]] = K[i]; return o } function evert_num(obj) { var o = [], K = keys(obj); for (var i = 0; i !== K.length; ++i) o[obj[K[i]]] = parseInt(K[i], 10); return o } function evert_arr(obj) { var o = [], K = keys(obj); for (var i = 0; i !== K.length; ++i) { if (o[obj[K[i]]] == null) o[obj[K[i]]] = []; o[obj[K[i]]].push(K[i]) } return o } var basedate = new Date(1899, 11, 30, 0, 0, 0); var dnthresh = basedate.getTime() + ((new Date).getTimezoneOffset() - basedate.getTimezoneOffset()) * 6e4; function datenum(v, date1904) { var epoch = v.getTime(); if (date1904) epoch += 1462 * 24 * 60 * 60 * 1e3; return (epoch - dnthresh) / (24 * 60 * 60 * 1e3) } function numdate(v) { var out = new Date; out.setTime(v * 24 * 60 * 60 * 1e3 + dnthresh); return out } function parse_isodur(s) { var sec = 0, mt = 0, time = false; var m = s.match(/P([0-9\.]+Y)?([0-9\.]+M)?([0-9\.]+D)?T([0-9\.]+H)?([0-9\.]+M)?([0-9\.]+S)?/); if (!m) throw new Error("|" + s + "| is not an ISO8601 Duration"); for (var i = 1; i != m.length; ++i) { if (!m[i]) continue; mt = 1; if (i > 3) time = true; switch (m[i].substr(m[i].length - 1)) { case "Y": throw new Error("Unsupported ISO Duration Field: " + m[i].substr(m[i].length - 1)); case "D": mt *= 24; case "H": mt *= 60; case "M": if (!time) throw new Error("Unsupported ISO Duration Field: M"); else mt *= 60; case "S": break; } sec += mt * parseInt(m[i], 10) } return sec } var good_pd_date = new Date("2017-02-19T19:06:09.000Z"); if (isNaN(good_pd_date.getFullYear())) good_pd_date = new Date("2/19/17"); var good_pd = good_pd_date.getFullYear() == 2017; function parseDate(str, fixdate) { var d = new Date(str); if (good_pd) { if (fixdate > 0) d.setTime(d.getTime() + d.getTimezoneOffset() * 60 * 1e3); else if (fixdate < 0) d.setTime(d.getTime() - d.getTimezoneOffset() * 60 * 1e3); return d } if (str instanceof Date) return str; if (good_pd_date.getFullYear() == 1917 && !isNaN(d.getFullYear())) { var s = d.getFullYear(); if (str.indexOf("" + s) > -1) return d; d.setFullYear(d.getFullYear() + 100); return d } var n = str.match(/\d+/g) || ["2017", "2", "19", "0", "0", "0"]; return new Date(+n[0], +n[1] - 1, +n[2], +n[3] || 0, +n[4] || 0, +n[5] || 0) } function cc2str(arr) { var o = ""; for (var i = 0; i != arr.length; ++i) o += String.fromCharCode(arr[i]); return o } function str2cc(str) { var o = []; for (var i = 0; i != str.length; ++i) o.push(str.charCodeAt(i)); return o } function dup(o) { if (typeof JSON != "undefined" && !Array.isArray(o)) return JSON.parse(JSON.stringify(o)); if (typeof o != "object" || o == null) return o; var out = {}; for (var k in o) if (o.hasOwnProperty(k)) out[k] = dup(o[k]); return out } function fill(c, l) { var o = ""; while (o.length < l) o += c; return o } function fuzzydate(s) { var o = new Date(s), n = new Date(NaN); var y = o.getYear(), m = o.getMonth(), d = o.getDate(); if (isNaN(d)) return n; if (y < 0 || y > 8099) return n; if ((m > 0 || d > 1) && y != 101) return o; if (s.toLowerCase().match(/jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec/)) return o; if (!s.match(/[a-zA-Z]/)) return o; return n } function getdatastr(data) { if (!data) return null; if (data.data) return debom(data.data); if (data.asNodeBuffer && has_buf) return debom(data.asNodeBuffer().toString("binary")); if (data.asBinary) return debom(data.asBinary()); if (data._data && data._data.getContent) return debom(cc2str(Array.prototype.slice.call(data._data.getContent(), 0))); return null } function getdatabin(data) { if (!data) return null; if (data.data) return char_codes(data.data); if (data.asNodeBuffer && has_buf) return data.asNodeBuffer(); if (data._data && data._data.getContent) { var o = data._data.getContent(); if (typeof o == "string") return str2cc(o); return Array.prototype.slice.call(o) } return null } function getdata(data) { return data && data.name.slice(-4) === ".bin" ? getdatabin(data) : getdatastr(data) } function safegetzipfile(zip, file) { var k = keys(zip.files); var f = file.toLowerCase(), g = f.replace(/\//g, "\\"); for (var i = 0; i < k.length; ++i) { var n = k[i].toLowerCase(); if (f == n || g == n) return zip.files[k[i]] } return null } function getzipfile(zip, file) { var o = safegetzipfile(zip, file); if (o == null) throw new Error("Cannot find file " + file + " in zip"); return o } function getzipdata(zip, file, safe) { if (!safe) return getdata(getzipfile(zip, file)); if (!file) return null; try { return getzipdata(zip, file) } catch (e) { return null } } function getzipstr(zip, file, safe) { if (!safe) return getdatastr(getzipfile(zip, file)); if (!file) return null; try { return getzipstr(zip, file) } catch (e) { return null } } var _fs, jszip; if (typeof JSZip !== "undefined") jszip = JSZip; if (typeof exports !== "undefined") { if (typeof module !== "undefined" && module.exports) { if (typeof jszip === "undefined") jszip = require("./jszip.js"); _fs = require("fs") } } function resolve_path(path, base) { var result = base.split("/"); if (base.slice(-1) != "/") result.pop(); var target = path.split("/"); while (target.length !== 0) { var step = target.shift(); if (step === "..") result.pop(); else if (step !== ".") result.push(step) } return result.join("/") } var attregexg = /([^"\s?>\/]+)=((?:")([^"]*)(?:")|(?:')([^']*)(?:')|([^'">\s]+))/g; var tagregex = /<[^>]*>/g; var nsregex = /<\w*:/, nsregex2 = /<(\/?)\w+:/; function parsexmltag(tag, skip_root) { var z = {}; var eq = 0, c = 0; for (; eq !== tag.length; ++eq) if ((c = tag.charCodeAt(eq)) === 32 || c === 10 || c === 13) break; if (!skip_root) z[0] = tag.substr(0, eq); if (eq === tag.length) return z; var m = tag.match(attregexg), j = 0, v = "", i = 0, q = "", cc = "", quot = 1; if (m) for (i = 0; i != m.length; ++i) { cc = m[i]; for (c = 0; c != cc.length; ++c) if (cc.charCodeAt(c) === 61) break; q = cc.substr(0, c); quot = (eq = cc.charCodeAt(c + 1)) == 34 || eq == 39 ? 1 : 0; v = cc.substring(c + 1 + quot, cc.length - quot); for (j = 0; j != q.length; ++j) if (q.charCodeAt(j) === 58) break; if (j === q.length) { if (q.indexOf("_") > 0) q = q.substr(0, q.indexOf("_")); z[q] = v } else { var k = (j === 5 && q.substr(0, 5) === "xmlns" ? "xmlns" : "") + q.substr(j + 1); if (z[k] && q.substr(j - 3, 3) == "ext") continue; z[k] = v } } return z } function strip_ns(x) { return x.replace(nsregex2, "<$1") } var encodings = { "&quot;": '"', "&apos;": "'", "&gt;": ">", "&lt;": "<", "&amp;": "&" }; var rencoding = evert(encodings); var unescapexml = function () { var encregex = /&(?:quot|apos|gt|lt|amp|#x?([\da-fA-F]+));/g, coderegex = /_x([\da-fA-F]{4})_/g; return function unescapexml(text) { var s = text + ""; return s.replace(encregex, function ($$, $1) { return encodings[$$] || String.fromCharCode(parseInt($1, $$.indexOf("x") > -1 ? 16 : 10)) || $$ }).replace(coderegex, function (m, c) { return String.fromCharCode(parseInt(c, 16)) }) } }(); var decregex = /[&<>'"]/g, charegex = /[\u0000-\u0008\u000b-\u001f]/g; function escapexml(text, xml) { var s = text + ""; return s.replace(decregex, function (y) { return rencoding[y] }).replace(charegex, function (s) { return "_x" + ("000" + s.charCodeAt(0).toString(16)).slice(-4) + "_" }) } function escapexmltag(text) { return escapexml(text).replace(/ /g, "_x0020_") } var htmlcharegex = /[\u0000-\u001f]/g; function escapehtml(text) { var s = text + ""; return s.replace(decregex, function (y) { return rencoding[y] }).replace(htmlcharegex, function (s) { return "&#x" + ("000" + s.charCodeAt(0).toString(16)).slice(-4) + ";" }) } var xlml_fixstr = function () { var entregex = /&#(\d+);/g; function entrepl($$, $1) { return String.fromCharCode(parseInt($1, 10)) } return function xlml_fixstr(str) { return str.replace(entregex, entrepl) } }(); var xlml_unfixstr = function () { return function xlml_unfixstr(str) { return str.replace(/(\r\n|[\r\n])/g, "&#10;") } }(); function parsexmlbool(value, tag) { switch (value) { case 1:; case true:; case "1":; case "true":; case "TRUE": return true; default: return false; } } var utf8read = function utf8reada(orig) { var out = "", i = 0, c = 0, d = 0, e = 0, f = 0, w = 0; while (i < orig.length) { c = orig.charCodeAt(i++); if (c < 128) { out += String.fromCharCode(c); continue } d = orig.charCodeAt(i++); if (c > 191 && c < 224) { f = (c & 31) << 6; f |= d & 63; out += String.fromCharCode(f); continue } e = orig.charCodeAt(i++); if (c < 240) { out += String.fromCharCode((c & 15) << 12 | (d & 63) << 6 | e & 63); continue } f = orig.charCodeAt(i++); w = ((c & 7) << 18 | (d & 63) << 12 | (e & 63) << 6 | f & 63) - 65536; out += String.fromCharCode(55296 + (w >>> 10 & 1023)); out += String.fromCharCode(56320 + (w & 1023)) } return out }; if (has_buf) { var utf8readb = function utf8readb(data) { var out = new Buffer(2 * data.length), w, i, j = 1, k = 0, ww = 0, c; for (i = 0; i < data.length; i += j) { j = 1; if ((c = data.charCodeAt(i)) < 128) w = c; else if (c < 224) { w = (c & 31) * 64 + (data.charCodeAt(i + 1) & 63); j = 2 } else if (c < 240) { w = (c & 15) * 4096 + (data.charCodeAt(i + 1) & 63) * 64 + (data.charCodeAt(i + 2) & 63); j = 3 } else { j = 4; w = (c & 7) * 262144 + (data.charCodeAt(i + 1) & 63) * 4096 + (data.charCodeAt(i + 2) & 63) * 64 + (data.charCodeAt(i + 3) & 63); w -= 65536; ww = 55296 + (w >>> 10 & 1023); w = 56320 + (w & 1023) } if (ww !== 0) { out[k++] = ww & 255; out[k++] = ww >>> 8; ww = 0 } out[k++] = w % 256; out[k++] = w >>> 8 } return out.slice(0, k).toString("ucs2") }; var corpus = "foo bar bazâð£"; if (utf8read(corpus) == utf8readb(corpus)) utf8read = utf8readb; var utf8readc = function utf8readc(data) { return Buffer(data, "binary").toString("utf8") }; if (utf8read(corpus) == utf8readc(corpus)) utf8read = utf8readc } var matchtag = function () { var mtcache = {}; return function matchtag(f, g) { var t = f + "|" + (g || ""); if (mtcache[t]) return mtcache[t]; return mtcache[t] = new RegExp("<(?:\\w+:)?" + f + '(?: xml:space="preserve")?(?:[^>]*)>([\\s\\S]*?)</(?:\\w+:)?' + f + ">", g || "") } }(); var vtregex = function () { var vt_cache = {}; return function vt_regex(bt) { if (vt_cache[bt] !== undefined) return vt_cache[bt]; return vt_cache[bt] = new RegExp("<(?:vt:)?" + bt + ">([\\s\\S]*?)</(?:vt:)?" + bt + ">", "g") } }(); var vtvregex = /<\/?(?:vt:)?variant>/g, vtmregex = /<(?:vt:)([^>]*)>([\s\S]*)</; function parseVector(data) { var h = parsexmltag(data); var matches = data.match(vtregex(h.baseType)) || []; if (matches.length != h.size) throw new Error("unexpected vector length " + matches.length + " != " + h.size); var res = []; matches.forEach(function (x) { var v = x.replace(vtvregex, "").match(vtmregex); res.push({ v: utf8read(v[2]), t: v[1] }) }); return res } var wtregex = /(^\s|\s$|\n)/; function writetag(f, g) { return "<" + f + (g.match(wtregex) ? ' xml:space="preserve"' : "") + ">" + g + "</" + f + ">" } function wxt_helper(h) { return keys(h).map(function (k) { return " " + k + '="' + h[k] + '"' }).join("") } function writextag(f, g, h) { return "<" + f + (isval(h) ? wxt_helper(h) : "") + (isval(g) ? (g.match(wtregex) ? ' xml:space="preserve"' : "") + ">" + g + "</" + f : "/") + ">" } function write_w3cdtf(d, t) { try { return d.toISOString().replace(/\.\d*/, "") } catch (e) { if (t) throw e } return "" } function write_vt(s) { switch (typeof s) { case "string": return writextag("vt:lpwstr", s); case "number": return writextag((s | 0) == s ? "vt:i4" : "vt:r8", String(s)); case "boolean": return writextag("vt:bool", s ? "true" : "false"); } if (s instanceof Date) return writextag("vt:filetime", write_w3cdtf(s)); throw new Error("Unable to serialize " + s) } var XML_HEADER = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r\n'; var XMLNS = { dc: "http://purl.org/dc/elements/1.1/", dcterms: "http://purl.org/dc/terms/", dcmitype: "http://purl.org/dc/dcmitype/", mx: "http://schemas.microsoft.com/office/mac/excel/2008/main", r: "http://schemas.openxmlformats.org/officeDocument/2006/relationships", sjs: "http://schemas.openxmlformats.org/package/2006/sheetjs/core-properties", vt: "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes", xsi: "http://www.w3.org/2001/XMLSchema-instance", xsd: "http://www.w3.org/2001/XMLSchema" }; XMLNS.main = ["http://schemas.openxmlformats.org/spreadsheetml/2006/main", "http://purl.oclc.org/ooxml/spreadsheetml/main", "http://schemas.microsoft.com/office/excel/2006/main", "http://schemas.microsoft.com/office/excel/2006/2"]; var XLMLNS = { o: "urn:schemas-microsoft-com:office:office", x: "urn:schemas-microsoft-com:office:excel", ss: "urn:schemas-microsoft-com:office:spreadsheet", dt: "uuid:C2F41010-65B3-11d1-A29F-00AA00C14882", mv: "http://macVmlSchemaUri", v: "urn:schemas-microsoft-com:vml", html: "http://www.w3.org/TR/REC-html40" }; function read_double_le(b, idx) { var s = 1 - 2 * (b[idx + 7] >>> 7); var e = ((b[idx + 7] & 127) << 4) + (b[idx + 6] >>> 4 & 15); var m = b[idx + 6] & 15; for (var i = 5; i >= 0; --i) m = m * 256 + b[idx + i]; if (e == 2047) return m == 0 ? s * Infinity : NaN; if (e == 0) e = -1022; else { e -= 1023; m += Math.pow(2, 52) } return s * Math.pow(2, e - 52) * m } function write_double_le(b, v, idx) { var bs = (v < 0 || 1 / v == -Infinity ? 1 : 0) << 7, e = 0, m = 0; var av = bs ? -v : v; if (!isFinite(av)) { e = 2047; m = isNaN(v) ? 26985 : 0 } else { e = Math.floor(Math.log(av) * Math.LOG2E); m = v * Math.pow(2, 52 - e); if (e <= -1023 && (!isFinite(m) || m < Math.pow(2, 52))) { e = -1022 } else { m -= Math.pow(2, 52); e += 1023 } } for (var i = 0; i <= 5; ++i, m /= 256) b[idx + i] = m & 255; b[idx + 6] = (e & 15) << 4 | m & 15; b[idx + 7] = e >> 4 | bs } var __toBuffer, ___toBuffer; __toBuffer = ___toBuffer = function toBuffer_(bufs) { var x = []; for (var i = 0; i < bufs[0].length; ++i) { x.push.apply(x, bufs[0][i]) } return x }; var __utf16le, ___utf16le; __utf16le = ___utf16le = function utf16le_(b, s, e) { var ss = []; for (var i = s; i < e; i += 2) ss.push(String.fromCharCode(__readUInt16LE(b, i))); return ss.join("") }; var __hexlify, ___hexlify; __hexlify = ___hexlify = function hexlify_(b, s, l) { return b.slice(s, s + l).map(function (x) { return (x < 16 ? "0" : "") + x.toString(16) }).join("") }; var __utf8, ___utf8; __utf8 = ___utf8 = function (b, s, e) { var ss = []; for (var i = s; i < e; i++) ss.push(String.fromCharCode(__readUInt8(b, i))); return ss.join("") }; var __lpstr, ___lpstr; __lpstr = ___lpstr = function lpstr_(b, i) { var len = __readUInt32LE(b, i); return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : "" }; var __lpwstr, ___lpwstr; __lpwstr = ___lpwstr = function lpwstr_(b, i) { var len = 2 * __readUInt32LE(b, i); return len > 0 ? __utf8(b, i + 4, i + 4 + len - 1) : "" }; var __lpp4, ___lpp4; __lpp4 = ___lpp4 = function lpp4_(b, i) { var len = __readUInt32LE(b, i); return len > 0 ? __utf16le(b, i + 4, i + 4 + len) : "" }; var __8lpp4, ___8lpp4; __8lpp4 = ___8lpp4 = function lpp4_8(b, i) { var len = __readUInt32LE(b, i); return len > 0 ? __utf8(b, i + 4, i + 4 + len) : "" }; var __double, ___double; __double = ___double = function (b, idx) { return read_double_le(b, idx) }; var is_buf = function is_buf_a(a) { return Array.isArray(a) }; if (has_buf) { __utf16le = function utf16le_b(b, s, e) { if (!Buffer.isBuffer(b)) return ___utf16le(b, s, e); return b.toString("utf16le", s, e) }; __hexlify = function (b, s, l) { return Buffer.isBuffer(b) ? b.toString("hex", s, s + l) : ___hexlify(b, s, l) }; __lpstr = function lpstr_b(b, i) { if (!Buffer.isBuffer(b)) return ___lpstr(b, i); var len = b.readUInt32LE(i); return len > 0 ? b.toString("utf8", i + 4, i + 4 + len - 1) : "" }; __lpwstr = function lpwstr_b(b, i) { if (!Buffer.isBuffer(b)) return ___lpwstr(b, i); var len = 2 * b.readUInt32LE(i); return b.toString("utf16le", i + 4, i + 4 + len - 1) }; __lpp4 = function lpp4_b(b, i) { if (!Buffer.isBuffer(b)) return ___lpp4(b, i); var len = b.readUInt32LE(i); return b.toString("utf16le", i + 4, i + 4 + len) }; __8lpp4 = function lpp4_8b(b, i) { if (!Buffer.isBuffer(b)) return ___8lpp4(b, i); var len = b.readUInt32LE(i); return b.toString("utf8", i + 4, i + 4 + len) }; __utf8 = function utf8_b(b, s, e) { return b.toString("utf8", s, e) }; __toBuffer = function (bufs) { return bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0]) ? Buffer.concat(bufs[0]) : ___toBuffer(bufs) }; bconcat = function (bufs) { return Buffer.isBuffer(bufs[0]) ? Buffer.concat(bufs) : [].concat.apply([], bufs) }; __double = function double_(b, i) { if (Buffer.isBuffer(b)) return b.readDoubleLE(i); return ___double(b, i) }; is_buf = function is_buf_b(a) { return Buffer.isBuffer(a) || Array.isArray(a) } } if (typeof cptable !== "undefined") { __utf16le = function (b, s, e) { return cptable.utils.decode(1200, b.slice(s, e)) }; __utf8 = function (b, s, e) { return cptable.utils.decode(65001, b.slice(s, e)) }; __lpstr = function (b, i) { var len = __readUInt32LE(b, i); return len > 0 ? cptable.utils.decode(current_codepage, b.slice(i + 4, i + 4 + len - 1)) : "" }; __lpwstr = function (b, i) { var len = 2 * __readUInt32LE(b, i); return len > 0 ? cptable.utils.decode(1200, b.slice(i + 4, i + 4 + len - 1)) : "" }; __lpp4 = function (b, i) { var len = __readUInt32LE(b, i); return len > 0 ? cptable.utils.decode(1200, b.slice(i + 4, i + 4 + len)) : "" }; __8lpp4 = function (b, i) { var len = __readUInt32LE(b, i); return len > 0 ? cptable.utils.decode(65001, b.slice(i + 4, i + 4 + len)) : "" } } var __readUInt8 = function (b, idx) { return b[idx] }; var __readUInt16LE = function (b, idx) { return b[idx + 1] * (1 << 8) + b[idx] }; var __readInt16LE = function (b, idx) { var u = b[idx + 1] * (1 << 8) + b[idx]; return u < 32768 ? u : (65535 - u + 1) * -1 }; var __readUInt32LE = function (b, idx) { return b[idx + 3] * (1 << 24) + (b[idx + 2] << 16) + (b[idx + 1] << 8) + b[idx] }; var __readInt32LE = function (b, idx) { return b[idx + 3] << 24 | b[idx + 2] << 16 | b[idx + 1] << 8 | b[idx] }; var ___unhexlify = function (s) { return s.match(/../g).map(function (x) { return parseInt(x, 16) }) }; var __unhexlify = typeof Buffer !== "undefined" ? function (s) { return Buffer.isBuffer(s) ? new Buffer(s, "hex") : ___unhexlify(s) } : ___unhexlify; function ReadShift(size, t) { var o = "", oI, oR, oo = [], w, vv, i, loc; switch (t) { case "dbcs": loc = this.l; if (has_buf && Buffer.isBuffer(this)) o = this.slice(this.l, this.l + 2 * size).toString("utf16le"); else for (i = 0; i != size; ++i) { o += String.fromCharCode(__readUInt16LE(this, loc)); loc += 2 } size *= 2; break; case "utf8": o = __utf8(this, this.l, this.l + size); break; case "utf16le": size *= 2; o = __utf16le(this, this.l, this.l + size); break; case "wstr": if (typeof cptable !== "undefined") o = cptable.utils.decode(current_codepage, this.slice(this.l, this.l + 2 * size)); else return ReadShift.call(this, size, "dbcs"); size = 2 * size; break; case "lpstr": o = __lpstr(this, this.l); size = 5 + o.length; break; case "lpwstr": o = __lpwstr(this, this.l); size = 5 + o.length; if (o[o.length - 1] == "\0") size += 2; break; case "lpp4": size = 4 + __readUInt32LE(this, this.l); o = __lpp4(this, this.l); if (size & 2) size += 2; break; case "8lpp4": size = 4 + __readUInt32LE(this, this.l); o = __8lpp4(this, this.l); if (size & 3) size += 4 - (size & 3); break; case "cstr": size = 0; o = ""; while ((w = __readUInt8(this, this.l + size++)) !== 0) oo.push(_getchar(w)); o = oo.join(""); break; case "_wstr": size = 0; o = ""; while ((w = __readUInt16LE(this, this.l + size)) !== 0) { oo.push(_getchar(w)); size += 2 } size += 2; o = oo.join(""); break; case "dbcs-cont": o = ""; loc = this.l; for (i = 0; i != size; ++i) { if (this.lens && this.lens.indexOf(loc) !== -1) { w = __readUInt8(this, loc); this.l = loc + 1; vv = ReadShift.call(this, size - i, w ? "dbcs-cont" : "sbcs-cont"); return oo.join("") + vv } oo.push(_getchar(__readUInt16LE(this, loc))); loc += 2 } o = oo.join(""); size *= 2; break; case "sbcs-cont": o = ""; loc = this.l; for (i = 0; i != size; ++i) { if (this.lens && this.lens.indexOf(loc) !== -1) { w = __readUInt8(this, loc); this.l = loc + 1; vv = ReadShift.call(this, size - i, w ? "dbcs-cont" : "sbcs-cont"); return oo.join("") + vv } oo.push(_getchar(__readUInt8(this, loc))); loc += 1 } o = oo.join(""); break; default: switch (size) { case 1: oI = __readUInt8(this, this.l); this.l++; return oI; case 2: oI = (t === "i" ? __readInt16LE : __readUInt16LE)(this, this.l); this.l += 2; return oI; case 4: if (t === "i" || (this[this.l + 3] & 128) === 0) { oI = __readInt32LE(this, this.l); this.l += 4; return oI } else { oR = __readUInt32LE(this, this.l); this.l += 4 } return oR; case 8: if (t === "f") { oR = __double(this, this.l); this.l += 8; return oR }; case 16: o = __hexlify(this, this.l, size); break; }; } this.l += size; return o } var __writeUInt16LE = function (b, val, idx) { b[idx] = val & 255; b[idx + 1] = val >>> 8 & 255 }; var __writeUInt32LE = function (b, val, idx) { b[idx] = val & 255; b[idx + 1] = val >>> 8 & 255; b[idx + 2] = val >>> 16 & 255; b[idx + 3] = val >>> 24 & 255 }; var __writeInt32LE = function (b, val, idx) { b[idx] = val & 255; b[idx + 1] = val >> 8 & 255; b[idx + 2] = val >> 16 & 255; b[idx + 3] = val >> 24 & 255 }; function WriteShift(t, val, f) { var size = 0, i = 0; if (f === "dbcs") { for (i = 0; i != val.length; ++i) __writeUInt16LE(this, val.charCodeAt(i), this.l + 2 * i); size = 2 * val.length } else if (f === "sbcs") { for (i = 0; i != val.length; ++i) this[this.l + i] = val.charCodeAt(i) & 255; size = val.length } else switch (t) { case 1: size = 1; this[this.l] = val & 255; break; case 2: size = 2; this[this.l] = val & 255; val >>>= 8; this[this.l + 1] = val & 255; break; case 3: size = 3; this[this.l] = val & 255; val >>>= 8; this[this.l + 1] = val & 255; val >>>= 8; this[this.l + 2] = val & 255; break; case 4: size = 4; __writeUInt32LE(this, val, this.l); break; case 8: size = 8; if (f === "f") { write_double_le(this, val, this.l); break }; case 16: break; case -4: size = 4; __writeInt32LE(this, val, this.l); break; } this.l += size; return this } function CheckField(hexstr, fld) { var m = __hexlify(this, this.l, hexstr.length >> 1); if (m !== hexstr) throw fld + "Expected " + hexstr + " saw " + m; this.l += hexstr.length >> 1 } function prep_blob(blob, pos) { blob.l = pos; blob.read_shift = ReadShift; blob.chk = CheckField; blob.write_shift = WriteShift } function parsenoop(blob, length) { blob.l += length } function parsenooplog(blob, length) { if (typeof console != "undefined") console.log(blob.slice(blob.l, blob.l + length)); blob.l += length } function writenoop(blob, length) { blob.l += length } function new_buf(sz) { var o = new_raw_buf(sz); prep_blob(o, 0); return o } function recordhopper(data, cb, opts) { if (!data) return; var tmpbyte, cntbyte, length; prep_blob(data, data.l || 0); var L = data.length, RT = 0, tgt = 0; while (data.l < L) { RT = data.read_shift(1); if (RT & 128) RT = (RT & 127) + ((data.read_shift(1) & 127) << 7); var R = XLSBRecordEnum[RT] || XLSBRecordEnum[65535]; tmpbyte = data.read_shift(1); length = tmpbyte & 127; for (cntbyte = 1; cntbyte < 4 && tmpbyte & 128; ++cntbyte) length += ((tmpbyte = data.read_shift(1)) & 127) << 7 * cntbyte; tgt = data.l + length; var d = R.f(data, length, opts); data.l = tgt; if (cb(d, R.n, RT)) return } } function buf_array() { var bufs = [], blksz = 2048; var newblk = function ba_newblk(sz) { var o = new_buf(sz); prep_blob(o, 0); return o }; var curbuf = newblk(blksz); var endbuf = function ba_endbuf() { if (!curbuf) return; if (curbuf.length > curbuf.l) curbuf = curbuf.slice(0, curbuf.l); if (curbuf.length > 0) bufs.push(curbuf); curbuf = null }; var next = function ba_next(sz) { if (curbuf && sz < curbuf.length - curbuf.l) return curbuf; endbuf(); return curbuf = newblk(Math.max(sz + 1, blksz)) }; var end = function ba_end() { endbuf(); return __toBuffer([bufs]) }; var push = function ba_push(buf) { endbuf(); curbuf = buf; next(blksz) }; return { next: next, push: push, end: end, _bufs: bufs } } function write_record(ba, type, payload, length) { var t = Number(evert_RE[type]), l; if (isNaN(t)) return; if (!length) length = XLSBRecordEnum[t].p || (payload || []).length || 0; l = 1 + (t >= 128 ? 1 : 0) + 1 + length; if (length >= 128)++l; if (length >= 16384)++l; if (length >= 2097152)++l; var o = ba.next(l); if (t <= 127) o.write_shift(1, t); else { o.write_shift(1, (t & 127) + 128); o.write_shift(1, t >> 7) } for (var i = 0; i != 4; ++i) { if (length >= 128) { o.write_shift(1, (length & 127) + 128); length >>= 7 } else { o.write_shift(1, length); break } } if (length > 0 && is_buf(payload)) ba.push(payload) } function shift_cell_xls(cell, tgt, opts) { var out = dup(cell); if (tgt.s) { if (out.cRel) out.c += tgt.s.c; if (out.rRel) out.r += tgt.s.r } else { out.c += tgt.c; out.r += tgt.r } if (!opts || opts.biff < 12) { while (out.c >= 256) out.c -= 256; while (out.r >= 65536) out.r -= 65536 } return out } function shift_range_xls(cell, range, opts) { var out = dup(cell); out.s = shift_cell_xls(out.s, range.s, opts); out.e = shift_cell_xls(out.e, range.s, opts); return out } function encode_cell_xls(c) { var s = encode_cell(c); if (c.cRel === 0) s = fix_col(s); if (c.rRel === 0) s = fix_row(s); return s } function encode_range_xls(r, opts) { if (r.s.r == 0 && !r.s.rRel) { if (r.e.r == opts.biff >= 12 ? 1048575 : 65535 && !r.e.rRel) { return (r.s.cRel ? "" : "$") + encode_col(r.s.c) + ":" + (r.e.cRel ? "" : "$") + encode_col(r.e.c) } } if (r.s.c == 0 && !r.s.cRel) { if (r.e.c == opts.biff >= 12 ? 65535 : 255 && !r.e.cRel) { return (r.s.rRel ? "" : "$") + encode_row(r.s.r) + ":" + (r.e.rRel ? "" : "$") + encode_row(r.e.r) } } return encode_cell_xls(r.s) + ":" + encode_cell_xls(r.e) } var OFFCRYPTO = {}; var make_offcrypto = function (O, _crypto) { var crypto; if (typeof _crypto !== "undefined") crypto = _crypto; else if (typeof require !== "undefined") { try { crypto = require("crypto") } catch (e) { crypto = null } } O.rc4 = function (key, data) { var S = new Array(256); var c = 0, i = 0, j = 0, t = 0; for (i = 0; i != 256; ++i) S[i] = i; for (i = 0; i != 256; ++i) { j = j + S[i] + key[i % key.length].charCodeAt(0) & 255; t = S[i]; S[i] = S[j]; S[j] = t } i = j = 0; var out = Buffer(data.length); for (c = 0; c != data.length; ++c) { i = i + 1 & 255; j = (j + S[i]) % 256; t = S[i]; S[i] = S[j]; S[j] = t; out[c] = data[c] ^ S[S[i] + S[j] & 255] } return out }; O.md5 = function (hex) { if (!crypto) throw new Error("Unsupported crypto"); return crypto.createHash("md5").update(hex).digest("hex") } }; make_offcrypto(OFFCRYPTO, typeof crypto !== "undefined" ? crypto : undefined); function decode_row(rowstr) { return parseInt(unfix_row(rowstr), 10) - 1 } function encode_row(row) { return "" + (row + 1) } function fix_row(cstr) { return cstr.replace(/([A-Z]|^)(\d+)$/, "$1$$$2") } function unfix_row(cstr) { return cstr.replace(/\$(\d+)$/, "$1") } function decode_col(colstr) { var c = unfix_col(colstr), d = 0, i = 0; for (; i !== c.length; ++i) d = 26 * d + c.charCodeAt(i) - 64; return d - 1 } function encode_col(col) { var s = ""; for (++col; col; col = Math.floor((col - 1) / 26)) s = String.fromCharCode((col - 1) % 26 + 65) + s; return s } function fix_col(cstr) { return cstr.replace(/^([A-Z])/, "$$$1") } function unfix_col(cstr) { return cstr.replace(/^\$([A-Z])/, "$1") } function split_cell(cstr) { return cstr.replace(/(\$?[A-Z]*)(\$?\d*)/, "$1,$2").split(",") } function decode_cell(cstr) { var splt = split_cell(cstr); return { c: decode_col(splt[0]), r: decode_row(splt[1]) } } function encode_cell(cell) { return encode_col(cell.c) + encode_row(cell.r) } function fix_cell(cstr) { return fix_col(fix_row(cstr)) } function unfix_cell(cstr) { return unfix_col(unfix_row(cstr)) } function decode_range(range) { var x = range.split(":").map(decode_cell); return { s: x[0], e: x[x.length - 1] } } function encode_range(cs, ce) { if (typeof ce === "undefined" || typeof ce === "number") { return encode_range(cs.s, cs.e) } if (typeof cs !== "string") cs = encode_cell(cs); if (typeof ce !== "string") ce = encode_cell(ce); return cs == ce ? cs : cs + ":" + ce } function safe_decode_range(range) { var o = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } }; var idx = 0, i = 0, cc = 0; var len = range.length; for (idx = 0; i < len; ++i) { if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26) break; idx = 26 * idx + cc } o.s.c = --idx; for (idx = 0; i < len; ++i) { if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9) break; idx = 10 * idx + cc } o.s.r = --idx; if (i === len || range.charCodeAt(++i) === 58) { o.e.c = o.s.c; o.e.r = o.s.r; return o } for (idx = 0; i != len; ++i) { if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26) break; idx = 26 * idx + cc } o.e.c = --idx; for (idx = 0; i != len; ++i) { if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9) break; idx = 10 * idx + cc } o.e.r = --idx; return o } function safe_format_cell(cell, v) { var q = cell.t == "d" && v instanceof Date; if (cell.z != null) try { return cell.w = SSF.format(cell.z, q ? datenum(v) : v) } catch (e) { } try { return cell.w = SSF.format((cell.XF || {}).ifmt || (q ? 14 : 0), q ? datenum(v) : v) } catch (e) { return "" + v } } function format_cell(cell, v, o) { if (cell == null || cell.t == null || cell.t == "z") return ""; if (cell.w !== undefined) return cell.w; if (cell.t == "d" && !cell.z && o && o.dateNF) cell.z = o.dateNF; if (v == undefined) return safe_format_cell(cell, cell.v, o); return safe_format_cell(cell, v, o) } function sheet_to_workbook(sheet, opts) { var n = opts && opts.sheet ? opts.sheet : "Sheet1"; var sheets = {}; sheets[n] = sheet; return { SheetNames: [n], Sheets: sheets } } function aoa_to_sheet(data, opts) { var o = opts || {}; if (DENSE != null && o.dense == null) o.dense = DENSE; var ws = o.dense ? [] : {}; var range = { s: { c: 1e7, r: 1e7 }, e: { c: 0, r: 0 } }; for (var R = 0; R != data.length; ++R) { for (var C = 0; C != data[R].length; ++C) { if (typeof data[R][C] === "undefined") continue; var cell = { v: data[R][C] }; if (Array.isArray(cell.v)) { cell.f = data[R][C][1]; cell.v = cell.v[0] } if (range.s.r > R) range.s.r = R; if (range.s.c > C) range.s.c = C; if (range.e.r < R) range.e.r = R; if (range.e.c < C) range.e.c = C; if (cell.v === null) { if (cell.f) cell.t = "n"; else if (!o.cellStubs) continue; else cell.t = "z" } else if (typeof cell.v === "number") cell.t = "n"; else if (typeof cell.v === "boolean") cell.t = "b"; else if (cell.v instanceof Date) { cell.z = o.dateNF || SSF._table[14]; if (o.cellDates) { cell.t = "d"; cell.w = SSF.format(cell.z, datenum(cell.v)) } else { cell.t = "n"; cell.v = datenum(cell.v); cell.w = SSF.format(cell.z, cell.v) } } else cell.t = "s"; if (o.dense) { if (!ws[R]) ws[R] = []; ws[R][C] = cell } else { var cell_ref = encode_cell({ c: C, r: R }); ws[cell_ref] = cell } } } if (range.s.c < 1e7) ws["!ref"] = encode_range(range); return ws } function write_UInt32LE(x, o) { if (!o) o = new_buf(4); o.write_shift(4, x); return o } function parse_XLWideString(data) { var cchCharacters = data.read_shift(4); return cchCharacters === 0 ? "" : data.read_shift(cchCharacters, "dbcs") } function write_XLWideString(data, o) { var _null = false; if (o == null) { _null = true; o = new_buf(4 + 2 * data.length) } o.write_shift(4, data.length); if (data.length > 0) o.write_shift(0, data, "dbcs"); return _null ? o.slice(0, o.l) : o } function parse_StrRun(data, length) { return { ich: data.read_shift(2), ifnt: data.read_shift(2) } } function write_StrRun(run, o) { if (!o) o = new_buf(4); o.write_shift(2, run.ich || 0); o.write_shift(2, run.ifnt || 0); return o } function parse_RichStr(data, length) { var start = data.l; var flags = data.read_shift(1); var str = parse_XLWideString(data); var rgsStrRun = []; var z = { t: str, h: str }; if ((flags & 1) !== 0) { var dwSizeStrRun = data.read_shift(4); for (var i = 0; i != dwSizeStrRun; ++i) rgsStrRun.push(parse_StrRun(data)); z.r = rgsStrRun } else z.r = [{ ich: 0, ifnt: 0 }]; data.l = start + length; return z } function write_RichStr(str, o) { var _null = false; if (o == null) { _null = true; o = new_buf(15 + 4 * str.t.length) } o.write_shift(1, 0); write_XLWideString(str.t, o); return _null ? o.slice(0, o.l) : o } var parse_BrtCommentText = parse_RichStr; function write_BrtCommentText(str, o) { var _null = false; if (o == null) { _null = true; o = new_buf(23 + 4 * str.t.length) } o.write_shift(1, 1); write_XLWideString(str.t, o); o.write_shift(4, 1); write_StrRun({ ich: 0, ifnt: 0 }, o); return _null ? o.slice(0, o.l) : o } function parse_XLSBCell(data) { var col = data.read_shift(4); var iStyleRef = data.read_shift(2); iStyleRef += data.read_shift(1) << 16; var fPhShow = data.read_shift(1); return { c: col, iStyleRef: iStyleRef } } function write_XLSBCell(cell, o) { if (o == null) o = new_buf(8); o.write_shift(-4, cell.c); o.write_shift(3, cell.iStyleRef || cell.s); o.write_shift(1, 0); return o } var parse_XLSBCodeName = parse_XLWideString; var write_XLSBCodeName = write_XLWideString; function parse_XLNullableWideString(data) { var cchCharacters = data.read_shift(4); return cchCharacters === 0 || cchCharacters === 4294967295 ? "" : data.read_shift(cchCharacters, "dbcs") } function write_XLNullableWideString(data, o) { var _null = false; if (o == null) { _null = true; o = new_buf(127) } o.write_shift(4, data.length > 0 ? data.length : 4294967295); if (data.length > 0) o.write_shift(0, data, "dbcs"); return _null ? o.slice(0, o.l) : o } var parse_XLNameWideString = parse_XLWideString; var write_XLNameWideString = write_XLWideString; var parse_RelID = parse_XLNullableWideString; var write_RelID = write_XLNullableWideString; function parse_RkNumber(data) { var b = data.slice(data.l, data.l + 4); var fX100 = b[0] & 1, fInt = b[0] & 2; data.l += 4; b[0] &= 252; var RK = fInt === 0 ? __double([0, 0, 0, 0, b[0], b[1], b[2], b[3]], 0) : __readInt32LE(b, 0) >> 2; return fX100 ? RK / 100 : RK } function write_RkNumber(data, o) { if (o == null) o = new_buf(4); var fX100 = 0, fInt = 0, d100 = data * 100; if (data == (data | 0) && data >= -(1 << 29) && data < 1 << 29) { fInt = 1 } else if (d100 == (d100 | 0) && d100 >= -(1 << 29) && d100 < 1 << 29) { fInt = 1; fX100 = 1 } if (fInt) o.write_shift(-4, ((fX100 ? d100 : data) << 2) + (fX100 + 2)); else throw new Error("unsupported RkNumber " + data) } function parse_RfX(data) { var cell = { s: {}, e: {} }; cell.s.r = data.read_shift(4); cell.e.r = data.read_shift(4); cell.s.c = data.read_shift(4); cell.e.c = data.read_shift(4); return cell } function write_RfX(r, o) { if (!o) o = new_buf(16); o.write_shift(4, r.s.r); o.write_shift(4, r.e.r); o.write_shift(4, r.s.c); o.write_shift(4, r.e.c); return o } var parse_UncheckedRfX = parse_RfX; var write_UncheckedRfX = write_RfX; function parse_Xnum(data, length) { return data.read_shift(8, "f") } function write_Xnum(data, o) { return (o || new_buf(8)).write_shift(8, data, "f") } var BErr = { 0: "#NULL!", 7: "#DIV/0!", 15: "#VALUE!", 23: "#REF!", 29: "#NAME?", 36: "#NUM!", 42: "#N/A", 43: "#GETTING_DATA", 255: "#WTF?" }; var RBErr = evert_num(BErr); function parse_BrtColor(data, length) {
        var out = {}; var d = data.read_shift(1); var fValidRGB = d & 1; var xColorType = d >>> 1; var index = data.read_shift(1); var nTS = data.read_shift(2, "i"); var bR = data.read_shift(1); var bG = data.read_shift(1); var bB = data.read_shift(1);
        var bAlpha = data.read_shift(1); switch (xColorType) { case 0: out.auto = 1; break; case 1: out.index = index; var icv = XLSIcv[index]; if (icv) out.rgb = icv[0].toString(16) + icv[1].toString(16) + icv[2].toString(16); break; case 2: out.rgb = bR.toString(16) + bG.toString(16) + bB.toString(16); break; case 3: out.theme = index; break; } if (nTS != 0) out.tint = nTS > 0 ? nTS / 32767 : nTS / 32768; return out
    } function write_BrtColor(color, o) { if (!o) o = new_buf(8); if (!color || color.auto) { o.write_shift(4, 0); o.write_shift(4, 0); return o } if (color.index) { o.write_shift(1, 2); o.write_shift(1, color.index) } else if (color.theme) { o.write_shift(1, 6); o.write_shift(1, color.theme) } else { o.write_shift(1, 5); o.write_shift(1, 0) } var nTS = color.tint || 0; if (nTS > 0) nTS *= 32767; else if (nTS < 0) nTS *= 32768; o.write_shift(2, nTS); if (!color.rgb) { o.write_shift(2, 0); o.write_shift(1, 0); o.write_shift(1, 0) } else { var rgb = color.rgb || "FFFFFF"; o.write_shift(1, parseInt(rgb.substr(0, 2), 16)); o.write_shift(1, parseInt(rgb.substr(2, 2), 16)); o.write_shift(1, parseInt(rgb.substr(4, 2), 16)); o.write_shift(1, 255) } return o } function parse_FontFlags(data, length, opts) { var d = data.read_shift(1); data.l++; var out = { fItalic: d & 2, fStrikeout: d & 8, fOutline: d & 16, fShadow: d & 32, fCondense: d & 64, fExtend: d & 128 }; return out } function write_FontFlags(font, o) { if (!o) o = new_buf(2); var grbit = (font.italic ? 2 : 0) | (font.strike ? 8 : 0) | (font.outline ? 16 : 0) | (font.shadow ? 32 : 0) | (font.condense ? 64 : 0) | (font.extend ? 128 : 0); o.write_shift(1, grbit); o.write_shift(1, 0); return o } { var VT_I2 = 2; var VT_I4 = 3; var VT_BOOL = 11; var VT_VARIANT = 12; var VT_UI4 = 19; var VT_UI8 = 21; var VT_LPSTR = 30; var VT_FILETIME = 64; var VT_CF = 71; var VT_VECTOR = 4096; var VT_STRING = 80; var VT_USTR = 81; var VT_CUSTOM = [VT_STRING, VT_USTR] } var DocSummaryPIDDSI = { 1: { n: "CodePage", t: VT_I2 }, 2: { n: "Category", t: VT_STRING }, 3: { n: "PresentationFormat", t: VT_STRING }, 4: { n: "ByteCount", t: VT_I4 }, 5: { n: "LineCount", t: VT_I4 }, 6: { n: "ParagraphCount", t: VT_I4 }, 7: { n: "SlideCount", t: VT_I4 }, 8: { n: "NoteCount", t: VT_I4 }, 9: { n: "HiddenCount", t: VT_I4 }, 10: { n: "MultimediaClipCount", t: VT_I4 }, 11: { n: "Scale", t: VT_BOOL }, 12: { n: "HeadingPair", t: VT_VECTOR | VT_VARIANT }, 13: { n: "DocParts", t: VT_VECTOR | VT_LPSTR }, 14: { n: "Manager", t: VT_STRING }, 15: { n: "Company", t: VT_STRING }, 16: { n: "LinksDirty", t: VT_BOOL }, 17: { n: "CharacterCount", t: VT_I4 }, 19: { n: "SharedDoc", t: VT_BOOL }, 22: { n: "HLinksChanged", t: VT_BOOL }, 23: { n: "AppVersion", t: VT_I4, p: "version" }, 26: { n: "ContentType", t: VT_STRING }, 27: { n: "ContentStatus", t: VT_STRING }, 28: { n: "Language", t: VT_STRING }, 29: { n: "Version", t: VT_STRING }, 255: {} }; var SummaryPIDSI = { 1: { n: "CodePage", t: VT_I2 }, 2: { n: "Title", t: VT_STRING }, 3: { n: "Subject", t: VT_STRING }, 4: { n: "Author", t: VT_STRING }, 5: { n: "Keywords", t: VT_STRING }, 6: { n: "Comments", t: VT_STRING }, 7: { n: "Template", t: VT_STRING }, 8: { n: "LastAuthor", t: VT_STRING }, 9: { n: "RevNumber", t: VT_STRING }, 10: { n: "EditTime", t: VT_FILETIME }, 11: { n: "LastPrinted", t: VT_FILETIME }, 12: { n: "CreatedDate", t: VT_FILETIME }, 13: { n: "ModifiedDate", t: VT_FILETIME }, 14: { n: "PageCount", t: VT_I4 }, 15: { n: "WordCount", t: VT_I4 }, 16: { n: "CharCount", t: VT_I4 }, 17: { n: "Thumbnail", t: VT_CF }, 18: { n: "ApplicationName", t: VT_LPSTR }, 19: { n: "DocumentSecurity", t: VT_I4 }, 255: {} }; var SpecialProperties = { 2147483648: { n: "Locale", t: VT_UI4 }, 2147483651: { n: "Behavior", t: VT_UI4 }, 1919054434: {} }; (function () { for (var y in SpecialProperties) if (SpecialProperties.hasOwnProperty(y)) DocSummaryPIDDSI[y] = SummaryPIDSI[y] = SpecialProperties[y] })(); var CountryEnum = { 1: "US", 2: "CA", 3: "", 7: "RU", 20: "EG", 30: "GR", 31: "NL", 32: "BE", 33: "FR", 34: "ES", 36: "HU", 39: "IT", 41: "CH", 43: "AT", 44: "GB", 45: "DK", 46: "SE", 47: "NO", 48: "PL", 49: "DE", 52: "MX", 55: "BR", 61: "AU", 64: "NZ", 66: "TH", 81: "JP", 82: "KR", 84: "VN", 86: "CN", 90: "TR", 105: "JS", 213: "DZ", 216: "MA", 218: "LY", 351: "PT", 354: "IS", 358: "FI", 420: "CZ", 886: "TW", 961: "LB", 962: "JO", 963: "SY", 964: "IQ", 965: "KW", 966: "SA", 971: "AE", 972: "IL", 974: "QA", 981: "IR", 65535: "US" }; var XLSFillPattern = [null, "solid", "mediumGray", "darkGray", "lightGray", "darkHorizontal", "darkVertical", "darkDown", "darkUp", "darkGrid", "darkTrellis", "lightHorizontal", "lightVertical", "lightDown", "lightUp", "lightGrid", "lightTrellis", "gray125", "gray0625"]; function rgbify(arr) { return arr.map(function (x) { return [x >> 16 & 255, x >> 8 & 255, x & 255] }) } var XLSIcv = rgbify([0, 16777215, 16711680, 65280, 255, 16776960, 16711935, 65535, 0, 16777215, 16711680, 65280, 255, 16776960, 16711935, 65535, 8388608, 32768, 128, 8421376, 8388736, 32896, 12632256, 8421504, 10066431, 10040166, 16777164, 13434879, 6684774, 16744576, 26316, 13421823, 128, 16711935, 16776960, 65535, 8388736, 8388608, 32896, 255, 52479, 13434879, 13434828, 16777113, 10079487, 16751052, 13408767, 16764057, 3368703, 3394764, 10079232, 16763904, 16750848, 16737792, 6710937, 9868950, 13158, 3381606, 13056, 3355392, 10040064, 10040166, 3355545, 3355443, 16777215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]); var ct2type = { "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": "workbooks", "application/vnd.ms-excel.binIndexWs": "TODO", "application/vnd.ms-excel.intlmacrosheet": "TODO", "application/vnd.ms-excel.binIndexMs": "TODO", "application/vnd.openxmlformats-package.core-properties+xml": "coreprops", "application/vnd.openxmlformats-officedocument.custom-properties+xml": "custprops", "application/vnd.openxmlformats-officedocument.extended-properties+xml": "extprops", "application/vnd.openxmlformats-officedocument.customXmlProperties+xml": "TODO", "application/vnd.openxmlformats-officedocument.spreadsheetml.customProperty": "TODO", "application/vnd.ms-excel.pivotTable": "TODO", "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml": "TODO", "application/vnd.ms-office.chartcolorstyle+xml": "TODO", "application/vnd.ms-office.chartstyle+xml": "TODO", "application/vnd.ms-excel.calcChain": "calcchains", "application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml": "calcchains", "application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings": "TODO", "application/vnd.ms-office.activeX": "TODO", "application/vnd.ms-office.activeX+xml": "TODO", "application/vnd.ms-excel.attachedToolbars": "TODO", "application/vnd.ms-excel.connections": "TODO", "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": "TODO", "application/vnd.ms-excel.externalLink": "TODO", "application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml": "TODO", "application/vnd.ms-excel.sheetMetadata": "TODO", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml": "TODO", "application/vnd.ms-excel.pivotCacheDefinition": "TODO", "application/vnd.ms-excel.pivotCacheRecords": "TODO", "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml": "TODO", "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml": "TODO", "application/vnd.ms-excel.queryTable": "TODO", "application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml": "TODO", "application/vnd.ms-excel.userNames": "TODO", "application/vnd.ms-excel.revisionHeaders": "TODO", "application/vnd.ms-excel.revisionLog": "TODO", "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml": "TODO", "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml": "TODO", "application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml": "TODO", "application/vnd.ms-excel.tableSingleCells": "TODO", "application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml": "TODO", "application/vnd.ms-excel.slicer": "TODO", "application/vnd.ms-excel.slicerCache": "TODO", "application/vnd.ms-excel.slicer+xml": "TODO", "application/vnd.ms-excel.slicerCache+xml": "TODO", "application/vnd.ms-excel.wsSortMap": "TODO", "application/vnd.ms-excel.table": "TODO", "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": "TODO", "application/vnd.openxmlformats-officedocument.theme+xml": "themes", "application/vnd.openxmlformats-officedocument.themeOverride+xml": "TODO", "application/vnd.ms-excel.Timeline+xml": "TODO", "application/vnd.ms-excel.TimelineCache+xml": "TODO", "application/vnd.ms-office.vbaProject": "vba", "application/vnd.ms-office.vbaProjectSignature": "vba", "application/vnd.ms-office.volatileDependencies": "TODO", "application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml": "TODO", "application/vnd.ms-excel.controlproperties+xml": "TODO", "application/vnd.openxmlformats-officedocument.model+data": "TODO", "application/vnd.ms-excel.Survey+xml": "TODO", "application/vnd.openxmlformats-officedocument.drawing+xml": "drawings", "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": "TODO", "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": "TODO", "application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml": "TODO", "application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml": "TODO", "application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml": "TODO", "application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml": "TODO", "application/vnd.openxmlformats-officedocument.vmlDrawing": "TODO", "application/vnd.openxmlformats-package.relationships+xml": "rels", "application/vnd.openxmlformats-officedocument.oleObject": "TODO", "image/png": "TODO", sheet: "js" }; var CT_LIST = function () { var o = { workbooks: { xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml", xlsm: "application/vnd.ms-excel.sheet.macroEnabled.main+xml", xlsb: "application/vnd.ms-excel.sheet.binary.macroEnabled.main", xltx: "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml" }, strs: { xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml", xlsb: "application/vnd.ms-excel.sharedStrings" }, comments: { xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml", xlsb: "application/vnd.ms-excel.comments" }, sheets: { xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml", xlsb: "application/vnd.ms-excel.worksheet" }, charts: { xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml", xlsb: "application/vnd.ms-excel.chartsheet" }, dialogs: { xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml", xlsb: "application/vnd.ms-excel.dialogsheet" }, macros: { xlsx: "application/vnd.ms-excel.macrosheet+xml", xlsb: "application/vnd.ms-excel.macrosheet" }, styles: { xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml", xlsb: "application/vnd.ms-excel.styles" } }; keys(o).forEach(function (k) { if (!o[k].xlsm) o[k].xlsm = o[k].xlsx }); keys(o).forEach(function (k) { keys(o[k]).forEach(function (v) { ct2type[o[k][v]] = k }) }); return o }(); var type2ct = evert_arr(ct2type); XMLNS.CT = "http://schemas.openxmlformats.org/package/2006/content-types"; function parse_ct(data, opts) { var ct = { workbooks: [], sheets: [], charts: [], dialogs: [], macros: [], rels: [], strs: [], comments: [], coreprops: [], extprops: [], custprops: [], themes: [], styles: [], calcchains: [], vba: [], drawings: [], TODO: [], xmlns: "" }; if (!data || !data.match) return ct; var ctext = {}; (data.match(tagregex) || []).forEach(function (x) { var y = parsexmltag(x); switch (y[0].replace(nsregex, "<")) { case "<?xml": break; case "<Types": ct.xmlns = y["xmlns" + (y[0].match(/<(\w+):/) || ["", ""])[1]]; break; case "<Default": ctext[y.Extension] = y.ContentType; break; case "<Override": if (ct[ct2type[y.ContentType]] !== undefined) ct[ct2type[y.ContentType]].push(y.PartName); break; } }); if (ct.xmlns !== XMLNS.CT) throw new Error("Unknown Namespace: " + ct.xmlns); ct.calcchain = ct.calcchains.length > 0 ? ct.calcchains[0] : ""; ct.sst = ct.strs.length > 0 ? ct.strs[0] : ""; ct.style = ct.styles.length > 0 ? ct.styles[0] : ""; ct.defaults = ctext; delete ct.calcchains; return ct } var CTYPE_XML_ROOT = writextag("Types", null, { xmlns: XMLNS.CT, "xmlns:xsd": XMLNS.xsd, "xmlns:xsi": XMLNS.xsi }); var CTYPE_DEFAULTS = [["xml", "application/xml"], ["bin", "application/vnd.ms-excel.sheet.binary.macroEnabled.main"], ["vml", "application/vnd.openxmlformats-officedocument.vmlDrawing"], ["bmp", "image/bmp"], ["png", "image/png"], ["gif", "image/gif"], ["emf", "image/x-emf"], ["wmf", "image/x-wmf"], ["jpg", "image/jpeg"], ["jpeg", "image/jpeg"], ["tif", "image/tiff"], ["tiff", "image/tiff"], ["pdf", "application/pdf"], ["rels", type2ct.rels[0]]].map(function (x) { return writextag("Default", null, { Extension: x[0], ContentType: x[1] }) }); function write_ct(ct, opts) { var o = [], v; o[o.length] = XML_HEADER; o[o.length] = CTYPE_XML_ROOT; o = o.concat(CTYPE_DEFAULTS); var f1 = function (w) { if (ct[w] && ct[w].length > 0) { v = ct[w][0]; o[o.length] = writextag("Override", null, { PartName: (v[0] == "/" ? "" : "/") + v, ContentType: CT_LIST[w][opts.bookType || "xlsx"] }) } }; var f2 = function (w) { (ct[w] || []).forEach(function (v) { o[o.length] = writextag("Override", null, { PartName: (v[0] == "/" ? "" : "/") + v, ContentType: CT_LIST[w][opts.bookType || "xlsx"] }) }) }; var f3 = function (t) { (ct[t] || []).forEach(function (v) { o[o.length] = writextag("Override", null, { PartName: (v[0] == "/" ? "" : "/") + v, ContentType: type2ct[t][0] }) }) }; f1("workbooks"); f2("sheets"); f2("charts"); f3("themes");["strs", "styles"].forEach(f1);["coreprops", "extprops", "custprops"].forEach(f3); f3("vba"); f3("comments"); f3("drawings"); if (o.length > 2) { o[o.length] = "</Types>"; o[1] = o[1].replace("/>", ">") } return o.join("") } var RELS = { WB: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument", SHEET: "http://sheetjs.openxmlformats.org/officeDocument/2006/relationships/officeDocument", HLINK: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink", VML: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing", VBA: "http://schemas.microsoft.com/office/2006/relationships/vbaProject" }; function get_rels_path(file) { var n = file.lastIndexOf("/"); return file.substr(0, n + 1) + "_rels/" + file.substr(n + 1) + ".rels" } function parse_rels(data, currentFilePath) { if (!data) return data; if (currentFilePath.charAt(0) !== "/") { currentFilePath = "/" + currentFilePath } var rels = {}; var hash = {}; (data.match(tagregex) || []).forEach(function (x) { var y = parsexmltag(x); if (y[0] === "<Relationship") { var rel = {}; rel.Type = y.Type; rel.Target = y.Target; rel.Id = y.Id; rel.TargetMode = y.TargetMode; var canonictarget = y.TargetMode === "External" ? y.Target : resolve_path(y.Target, currentFilePath); rels[canonictarget] = rel; hash[y.Id] = rel } }); rels["!id"] = hash; return rels } XMLNS.RELS = "http://schemas.openxmlformats.org/package/2006/relationships"; var RELS_ROOT = writextag("Relationships", null, { xmlns: XMLNS.RELS }); function write_rels(rels) { var o = [XML_HEADER, RELS_ROOT]; keys(rels["!id"]).forEach(function (rid) { o[o.length] = writextag("Relationship", null, rels["!id"][rid]) }); if (o.length > 2) { o[o.length] = "</Relationships>"; o[1] = o[1].replace("/>", ">") } return o.join("") } function add_rels(rels, rId, f, type, relobj) { if (!relobj) relobj = {}; if (!rels["!id"]) rels["!id"] = {}; if (rId < 0) for (rId = 1; rels["!id"]["rId" + rId]; ++rId) { } relobj.Id = "rId" + rId; relobj.Type = type; relobj.Target = f; if (relobj.Type == RELS.HLINK) relobj.TargetMode = "External"; if (rels["!id"][relobj.Id]) throw new Error("Cannot rewrite rId " + rId); rels["!id"][relobj.Id] = relobj; rels[("/" + relobj.Target).replace("//", "/")] = relobj; return rId } var CT_ODS = "application/vnd.oasis.opendocument.spreadsheet"; function parse_manifest(d, opts) { var str = xlml_normalize(d); var Rn; var FEtag; while (Rn = xlmlregex.exec(str)) switch (Rn[3]) { case "manifest": break; case "file-entry": FEtag = parsexmltag(Rn[0], false); if (FEtag.path == "/" && FEtag.type !== CT_ODS) throw new Error("This OpenDocument is not a spreadsheet"); break; case "encryption-data":; case "algorithm":; case "start-key-generation":; case "key-derivation": throw new Error("Unsupported ODS Encryption"); default: if (opts && opts.WTF) throw Rn; } } function write_manifest(manifest, opts) { var o = [XML_HEADER]; o.push('<manifest:manifest xmlns:manifest="urn:oasis:names:tc:opendocument:xmlns:manifest:1.0" manifest:version="1.2">\n'); o.push('  <manifest:file-entry manifest:full-path="/" manifest:version="1.2" manifest:media-type="application/vnd.oasis.opendocument.spreadsheet"/>\n'); for (var i = 0; i < manifest.length; ++i) o.push('  <manifest:file-entry manifest:full-path="' + manifest[i][0] + '" manifest:media-type="' + manifest[i][1] + '"/>\n'); o.push("</manifest:manifest>"); return o.join("") } function write_rdf_type(file, res, tag) { return ['  <rdf:Description rdf:about="' + file + '">\n', '    <rdf:type rdf:resource="http://docs.oasis-open.org/ns/office/1.2/meta/' + (tag || "odf") + "#" + res + '"/>\n', "  </rdf:Description>\n"].join("") } function write_rdf_has(base, file) { return ['  <rdf:Description rdf:about="' + base + '">\n', '    <ns0:hasPart xmlns:ns0="http://docs.oasis-open.org/ns/office/1.2/meta/pkg#" rdf:resource="' + file + '"/>\n', "  </rdf:Description>\n"].join("") } function write_rdf(rdf, opts) { var o = [XML_HEADER]; o.push('<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">\n'); for (var i = 0; i != rdf.length; ++i) { o.push(write_rdf_type(rdf[i][0], rdf[i][1])); o.push(write_rdf_has("", rdf[i][0])) } o.push(write_rdf_type("", "Document", "pkg")); o.push("</rdf:RDF>"); return o.join("") } var write_meta_ods = function () { var payload = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><office:document-meta xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xlink="http://www.w3.org/1999/xlink" office:version="1.2"><office:meta><meta:generator>Sheet' + "JS " + XLSX.version + "</meta:generator></office:meta></office:document-meta>"; return function wmo(wb, opts) { return payload } }(); var CORE_PROPS = [["cp:category", "Category"], ["cp:contentStatus", "ContentStatus"], ["cp:keywords", "Keywords"], ["cp:lastModifiedBy", "LastAuthor"], ["cp:lastPrinted", "LastPrinted"], ["cp:revision", "RevNumber"], ["cp:version", "Version"], ["dc:creator", "Author"], ["dc:description", "Comments"], ["dc:identifier", "Identifier"], ["dc:language", "Language"], ["dc:subject", "Subject"], ["dc:title", "Title"], ["dcterms:created", "CreatedDate", "date"], ["dcterms:modified", "ModifiedDate", "date"]]; XMLNS.CORE_PROPS = "http://schemas.openxmlformats.org/package/2006/metadata/core-properties"; RELS.CORE_PROPS = "http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties"; var CORE_PROPS_REGEX = function () { var r = new Array(CORE_PROPS.length); for (var i = 0; i < CORE_PROPS.length; ++i) { var f = CORE_PROPS[i]; var g = "(?:" + f[0].substr(0, f[0].indexOf(":")) + ":)" + f[0].substr(f[0].indexOf(":") + 1); r[i] = new RegExp("<" + g + "[^>]*>([\\s\\S]*?)</" + g + ">") } return r }(); function parse_core_props(data) { var p = {}; for (var i = 0; i < CORE_PROPS.length; ++i) { var f = CORE_PROPS[i], cur = data.match(CORE_PROPS_REGEX[i]); if (cur != null && cur.length > 0) p[f[1]] = cur[1]; if (f[2] === "date" && p[f[1]]) p[f[1]] = parseDate(p[f[1]]) } return p } var CORE_PROPS_XML_ROOT = writextag("cp:coreProperties", null, { "xmlns:cp": XMLNS.CORE_PROPS, "xmlns:dc": XMLNS.dc, "xmlns:dcterms": XMLNS.dcterms, "xmlns:dcmitype": XMLNS.dcmitype, "xmlns:xsi": XMLNS.xsi }); function cp_doit(f, g, h, o, p) { if (p[f] != null || g == null || g === "") return; p[f] = g; o[o.length] = h ? writextag(f, g, h) : writetag(f, g) } function write_core_props(cp, _opts) { var opts = _opts || {}; var o = [XML_HEADER, CORE_PROPS_XML_ROOT], p = {}; if (!cp && !opts.Props) return o.join(""); if (cp) { if (cp.CreatedDate != null) cp_doit("dcterms:created", typeof cp.CreatedDate === "string" ? cp.CreatedDate : write_w3cdtf(cp.CreatedDate, opts.WTF), { "xsi:type": "dcterms:W3CDTF" }, o, p); if (cp.ModifiedDate != null) cp_doit("dcterms:modified", typeof cp.ModifiedDate === "string" ? cp.ModifiedDate : write_w3cdtf(cp.ModifiedDate, opts.WTF), { "xsi:type": "dcterms:W3CDTF" }, o, p) } for (var i = 0; i != CORE_PROPS.length; ++i) { var f = CORE_PROPS[i]; var v = opts.Props && opts.Props[f[1]] != null ? opts.Props[f[1]] : cp ? cp[f[1]] : null; if (v === true) v = "1"; else if (v === false) v = "0"; else if (typeof v == "number") v = String(v); if (v != null) cp_doit(f[0], v, null, o, p) } if (o.length > 2) { o[o.length] = "</cp:coreProperties>"; o[1] = o[1].replace("/>", ">") } return o.join("") } var EXT_PROPS = [["Application", "Application", "string"], ["AppVersion", "AppVersion", "string"], ["Company", "Company", "string"], ["DocSecurity", "DocSecurity", "string"], ["Manager", "Manager", "string"], ["HyperlinksChanged", "HyperlinksChanged", "bool"], ["SharedDoc", "SharedDoc", "bool"], ["LinksUpToDate", "LinksUpToDate", "bool"], ["ScaleCrop", "ScaleCrop", "bool"], ["HeadingPairs", "HeadingPairs", "raw"], ["TitlesOfParts", "TitlesOfParts", "raw"]]; XMLNS.EXT_PROPS = "http://schemas.openxmlformats.org/officeDocument/2006/extended-properties"; RELS.EXT_PROPS = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties"; function parse_ext_props(data, p) { var q = {}; if (!p) p = {}; EXT_PROPS.forEach(function (f) { switch (f[2]) { case "string": p[f[1]] = (data.match(matchtag(f[0])) || [])[1]; break; case "bool": p[f[1]] = (data.match(matchtag(f[0])) || [])[1] === "true"; break; case "raw": var cur = data.match(new RegExp("<" + f[0] + "[^>]*>([\\s\\S]*?)</" + f[0] + ">")); if (cur && cur.length > 0) q[f[1]] = cur[1]; break; } }); if (q.HeadingPairs && q.TitlesOfParts) { var v = parseVector(q.HeadingPairs); var parts = parseVector(q.TitlesOfParts).map(function (x) { return x.v }); var idx = 0, len = 0; for (var i = 0; i !== v.length; i += 2) { len = +v[i + 1].v; switch (v[i].v) { case "Worksheets":; case "工作表":; case "Листы":; case "أوراق العمل":; case "ワークシート":; case "גליונות עבודה":; case "Arbeitsblätter":; case "Çalışma Sayfaları":; case "Feuilles de calcul":; case "Fogli di lavoro":; case "Folhas de cálculo":; case "Planilhas":; case "Regneark":; case "Werkbladen": p.Worksheets = len; p.SheetNames = parts.slice(idx, idx + len); break; case "Named Ranges":; case "Benannte Bereiche":; case "Navngivne områder": p.NamedRanges = len; p.DefinedNames = parts.slice(idx, idx + len); break; case "Charts":; case "Diagramme": p.Chartsheets = len; p.ChartNames = parts.slice(idx, idx + len); break; } idx += len } } return p } var EXT_PROPS_XML_ROOT = writextag("Properties", null, { xmlns: XMLNS.EXT_PROPS, "xmlns:vt": XMLNS.vt }); function write_ext_props(cp, opts) { var o = [], p = {}, W = writextag; if (!cp) cp = {}; cp.Application = "SheetJS"; o[o.length] = XML_HEADER; o[o.length] = EXT_PROPS_XML_ROOT; EXT_PROPS.forEach(function (f) { if (cp[f[1]] === undefined) return; var v; switch (f[2]) { case "string": v = String(cp[f[1]]); break; case "bool": v = cp[f[1]] ? "true" : "false"; break; } if (v !== undefined) o[o.length] = W(f[0], v) }); o[o.length] = W("HeadingPairs", W("vt:vector", W("vt:variant", "<vt:lpstr>Worksheets</vt:lpstr>") + W("vt:variant", W("vt:i4", String(cp.Worksheets))), { size: 2, baseType: "variant" })); o[o.length] = W("TitlesOfParts", W("vt:vector", cp.SheetNames.map(function (s) { return "<vt:lpstr>" + escapexml(s) + "</vt:lpstr>" }).join(""), { size: cp.Worksheets, baseType: "lpstr" })); if (o.length > 2) { o[o.length] = "</Properties>"; o[1] = o[1].replace("/>", ">") } return o.join("") } XMLNS.CUST_PROPS = "http://schemas.openxmlformats.org/officeDocument/2006/custom-properties"; RELS.CUST_PROPS = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties"; var custregex = /<[^>]+>[^<]*/g; function parse_cust_props(data, opts) { var p = {}, name = ""; var m = data.match(custregex); if (m) for (var i = 0; i != m.length; ++i) { var x = m[i], y = parsexmltag(x); switch (y[0]) { case "<?xml": break; case "<Properties": break; case "<property": name = y.name; break; case "</property>": name = null; break; default: if (x.indexOf("<vt:") === 0) { var toks = x.split(">"); var type = toks[0].substring(4), text = toks[1]; switch (type) { case "lpstr":; case "bstr":; case "lpwstr": p[name] = unescapexml(text); break; case "bool": p[name] = parsexmlbool(text, "<vt:bool>"); break; case "i1":; case "i2":; case "i4":; case "i8":; case "int":; case "uint": p[name] = parseInt(text, 10); break; case "r4":; case "r8":; case "decimal": p[name] = parseFloat(text); break; case "filetime":; case "date": p[name] = parseDate(text); break; case "cy":; case "error": p[name] = unescapexml(text); break; default: if (opts.WTF && typeof console !== "undefined") console.warn("Unexpected", x, type, toks); } } else if (x.substr(0, 2) === "</") { } else if (opts.WTF) throw new Error(x); } } return p } var CUST_PROPS_XML_ROOT = writextag("Properties", null, { xmlns: XMLNS.CUST_PROPS, "xmlns:vt": XMLNS.vt }); function write_cust_props(cp, opts) { var o = [XML_HEADER, CUST_PROPS_XML_ROOT]; if (!cp) return o.join(""); var pid = 1; keys(cp).forEach(function custprop(k) { ++pid; o[o.length] = writextag("property", write_vt(cp[k]), { fmtid: "{D5CDD505-2E9C-101B-9397-08002B2CF9AE}", pid: pid, name: k }) }); if (o.length > 2) { o[o.length] = "</Properties>"; o[1] = o[1].replace("/>", ">") } return o.join("") } var XLMLDocPropsMap = { Title: "Title", Subject: "Subject", Author: "Author", Keywords: "Keywords", Comments: "Description", LastAuthor: "LastAuthor", RevNumber: "Revision", Application: "AppName", LastPrinted: "LastPrinted", CreatedDate: "Created", ModifiedDate: "LastSaved", Category: "Category", Manager: "Manager", Company: "Company", AppVersion: "Version", ContentStatus: "ContentStatus", Identifier: "Identifier", Language: "Language" }; var evert_XLMLDPM = evert(XLMLDocPropsMap); function xlml_set_prop(Props, tag, val) { tag = evert_XLMLDPM[tag] || tag; Props[tag] = val } function xlml_write_docprops(Props, opts) { var o = []; keys(XLMLDocPropsMap).map(function (m) { for (var i = 0; i < CORE_PROPS.length; ++i) if (CORE_PROPS[i][1] == m) return CORE_PROPS[i]; for (i = 0; i < EXT_PROPS.length; ++i) if (EXT_PROPS[i][1] == m) return EXT_PROPS[i]; throw m }).forEach(function (p) { if (Props[p[1]] == null) return; var m = opts && opts.Props && opts.Props[p[1]] != null ? opts.Props[p[1]] : Props[p[1]]; switch (p[2]) { case "date": m = new Date(m).toISOString().replace(/\.\d*Z/, "Z"); break; } if (typeof m == "number") m = String(m); else if (m === true || m === false) { m = m ? "1" : "0" } else if (m instanceof Date) m = new Date(m).toISOString().replace(/\.\d*Z/, ""); o.push(writetag(XLMLDocPropsMap[p[1]] || p[1], m)) }); return writextag("DocumentProperties", o.join(""), { xmlns: XLMLNS.o }) } function xlml_write_custprops(Props, Custprops, opts) { var BLACKLIST = ["Worksheets", "SheetNames"]; var T = "CustomDocumentProperties"; var o = []; if (Props) keys(Props).forEach(function (k) { if (!Props.hasOwnProperty(k)) return; for (var i = 0; i < CORE_PROPS.length; ++i) if (k == CORE_PROPS[i][1]) return; for (i = 0; i < EXT_PROPS.length; ++i) if (k == EXT_PROPS[i][1]) return; for (i = 0; i < BLACKLIST.length; ++i) if (k == BLACKLIST[i]) return; var m = Props[k]; var t = "string"; if (typeof m == "number") { t = "float"; m = String(m) } else if (m === true || m === false) { t = "boolean"; m = m ? "1" : "0" } else m = String(m); o.push(writextag(escapexmltag(k), m, { "dt:dt": t })) }); if (Custprops) keys(Custprops).forEach(function (k) { if (!Custprops.hasOwnProperty(k)) return; var m = Custprops[k]; var t = "string"; if (typeof m == "number") { t = "float"; m = String(m) } else if (m === true || m === false) { t = "boolean"; m = m ? "1" : "0" } else if (m instanceof Date) { t = "dateTime.tz"; m = m.toISOString() } else m = String(m); o.push(writextag(escapexmltag(k), m, { "dt:dt": t })) }); return "<" + T + ' xmlns="' + XLMLNS.o + '">' + o.join("") + "</" + T + ">" } function parse_FILETIME(blob) { var dwLowDateTime = blob.read_shift(4), dwHighDateTime = blob.read_shift(4); return new Date((dwHighDateTime / 1e7 * Math.pow(2, 32) + dwLowDateTime / 1e7 - 11644473600) * 1e3).toISOString().replace(/\.000/, "") } function parse_lpstr(blob, type, pad) { var str = blob.read_shift(0, "lpstr"); if (pad) blob.l += 4 - (str.length + 1 & 3) & 3; return str } function parse_lpwstr(blob, type, pad) { var str = blob.read_shift(0, "lpwstr"); if (pad) blob.l += 4 - (str.length + 1 & 3) & 3; return str } function parse_VtStringBase(blob, stringType, pad) { if (stringType === 31) return parse_lpwstr(blob); return parse_lpstr(blob, stringType, pad) } function parse_VtString(blob, t, pad) { return parse_VtStringBase(blob, t, pad === false ? 0 : 4) } function parse_VtUnalignedString(blob, t) { if (!t) throw new Error("dafuq?"); return parse_VtStringBase(blob, t, 0) } function parse_VtVecUnalignedLpstrValue(blob) { var length = blob.read_shift(4); var ret = []; for (var i = 0; i != length; ++i) ret[i] = blob.read_shift(0, "lpstr"); return ret } function parse_VtVecUnalignedLpstr(blob) { return parse_VtVecUnalignedLpstrValue(blob) } function parse_VtHeadingPair(blob) { var headingString = parse_TypedPropertyValue(blob, VT_USTR); var headerParts = parse_TypedPropertyValue(blob, VT_I4); return [headingString, headerParts] } function parse_VtVecHeadingPairValue(blob) { var cElements = blob.read_shift(4); var out = []; for (var i = 0; i != cElements / 2; ++i) out.push(parse_VtHeadingPair(blob)); return out } function parse_VtVecHeadingPair(blob) { return parse_VtVecHeadingPairValue(blob) } function parse_dictionary(blob, CodePage) { var cnt = blob.read_shift(4); var dict = {}; for (var j = 0; j != cnt; ++j) { var pid = blob.read_shift(4); var len = blob.read_shift(4); dict[pid] = blob.read_shift(len, CodePage === 1200 ? "utf16le" : "utf8").replace(chr0, "").replace(chr1, "!") } if (blob.l & 3) blob.l = blob.l >> 2 + 1 << 2; return dict } function parse_BLOB(blob) { var size = blob.read_shift(4); var bytes = blob.slice(blob.l, blob.l + size); if ((size & 3) > 0) blob.l += 4 - (size & 3) & 3; return bytes } function parse_ClipboardData(blob) { var o = {}; o.Size = blob.read_shift(4); blob.l += o.Size; return o } function parse_VtVector(blob, cb) { } function parse_TypedPropertyValue(blob, type, _opts) { var t = blob.read_shift(2), ret, opts = _opts || {}; blob.l += 2; if (type !== VT_VARIANT) if (t !== type && VT_CUSTOM.indexOf(type) === -1) throw new Error("Expected type " + type + " saw " + t); switch (type === VT_VARIANT ? t : type) { case 2: ret = blob.read_shift(2, "i"); if (!opts.raw) blob.l += 2; return ret; case 3: ret = blob.read_shift(4, "i"); return ret; case 11: return blob.read_shift(4) !== 0; case 19: ret = blob.read_shift(4); return ret; case 30: return parse_lpstr(blob, t, 4).replace(chr0, ""); case 31: return parse_lpwstr(blob); case 64: return parse_FILETIME(blob); case 65: return parse_BLOB(blob); case 71: return parse_ClipboardData(blob); case 80: return parse_VtString(blob, t, !opts.raw && 4).replace(chr0, ""); case 81: return parse_VtUnalignedString(blob, t).replace(chr0, ""); case 4108: return parse_VtVecHeadingPair(blob); case 4126: return parse_VtVecUnalignedLpstr(blob); default: throw new Error("TypedPropertyValue unrecognized type " + type + " " + t); } } function parse_PropertySet(blob, PIDSI) { var start_addr = blob.l; var size = blob.read_shift(4); var NumProps = blob.read_shift(4); var Props = [], i = 0; var CodePage = 0; var Dictionary = -1, DictObj = {}; for (i = 0; i != NumProps; ++i) { var PropID = blob.read_shift(4); var Offset = blob.read_shift(4); Props[i] = [PropID, Offset + start_addr] } var PropH = {}; for (i = 0; i != NumProps; ++i) { if (blob.l !== Props[i][1]) { var fail = true; if (i > 0 && PIDSI) switch (PIDSI[Props[i - 1][0]].t) { case 2: if (blob.l + 2 === Props[i][1]) { blob.l += 2; fail = false } break; case 80: if (blob.l <= Props[i][1]) { blob.l = Props[i][1]; fail = false } break; case 4108: if (blob.l <= Props[i][1]) { blob.l = Props[i][1]; fail = false } break; } if (!PIDSI && blob.l <= Props[i][1]) { fail = false; blob.l = Props[i][1] } if (fail) throw new Error("Read Error: Expected address " + Props[i][1] + " at " + blob.l + " :" + i) } if (PIDSI) { var piddsi = PIDSI[Props[i][0]]; PropH[piddsi.n] = parse_TypedPropertyValue(blob, piddsi.t, { raw: true }); if (piddsi.p === "version") PropH[piddsi.n] = String(PropH[piddsi.n] >> 16) + "." + String(PropH[piddsi.n] & 65535); if (piddsi.n == "CodePage") switch (PropH[piddsi.n]) { case 0: PropH[piddsi.n] = 1252; case 874:; case 932:; case 936:; case 949:; case 950:; case 1250:; case 1251:; case 1253:; case 1254:; case 1255:; case 1256:; case 1257:; case 1258:; case 1e4:; case 1200:; case 1201:; case 1252:; case 65e3:; case -536:; case 65001:; case -535: set_cp(CodePage = PropH[piddsi.n]); break; default: throw new Error("Unsupported CodePage: " + PropH[piddsi.n]); } } else { if (Props[i][0] === 1) { CodePage = PropH.CodePage = parse_TypedPropertyValue(blob, VT_I2); set_cp(CodePage); if (Dictionary !== -1) { var oldpos = blob.l; blob.l = Props[Dictionary][1]; DictObj = parse_dictionary(blob, CodePage); blob.l = oldpos } } else if (Props[i][0] === 0) { if (CodePage === 0) { Dictionary = i; blob.l = Props[i + 1][1]; continue } DictObj = parse_dictionary(blob, CodePage) } else { var name = DictObj[Props[i][0]]; var val; switch (blob[blob.l]) { case 65: blob.l += 4; val = parse_BLOB(blob); break; case 30: blob.l += 4; val = parse_VtString(blob, blob[blob.l - 4]); break; case 31: blob.l += 4; val = parse_VtString(blob, blob[blob.l - 4]); break; case 3: blob.l += 4; val = blob.read_shift(4, "i"); break; case 19: blob.l += 4; val = blob.read_shift(4); break; case 5: blob.l += 4; val = blob.read_shift(8, "f"); break; case 11: blob.l += 4; val = parsebool(blob, 4); break; case 64: blob.l += 4; val = parseDate(parse_FILETIME(blob)); break; default: throw new Error("unparsed value: " + blob[blob.l]); } PropH[name] = val } } } blob.l = start_addr + size; return PropH } function parse_PropertySetStream(file, PIDSI) {
        var blob = file.content; prep_blob(blob, 0); var NumSets, FMTID0, FMTID1, Offset0, Offset1 = 0; blob.chk("feff", "Byte Order: "); var vers = blob.read_shift(2); var SystemIdentifier = blob.read_shift(4); blob.chk(CFB.utils.consts.HEADER_CLSID, "CLSID: "); NumSets = blob.read_shift(4); if (NumSets !== 1 && NumSets !== 2) throw new Error("Unrecognized #Sets: " + NumSets); FMTID0 = blob.read_shift(16); Offset0 = blob.read_shift(4); if (NumSets === 1 && Offset0 !== blob.l) throw new Error("Length mismatch: " + Offset0 + " !== " + blob.l); else if (NumSets === 2) { FMTID1 = blob.read_shift(16); Offset1 = blob.read_shift(4) } var PSet0 = parse_PropertySet(blob, PIDSI); var rval = { SystemIdentifier: SystemIdentifier }; for (var y in PSet0) rval[y] = PSet0[y]; rval.FMTID = FMTID0; if (NumSets === 1) return rval; if (blob.l !== Offset1) throw new Error("Length mismatch 2: " + blob.l + " !== " + Offset1);
        var PSet1; try { PSet1 = parse_PropertySet(blob, null) } catch (e) { } for (y in PSet1) rval[y] = PSet1[y]; rval.FMTID = [FMTID0, FMTID1]; return rval
    } function parsenoop2(blob, length) { blob.read_shift(length); return null } function parslurp(blob, length, cb) { var arr = [], target = blob.l + length; while (blob.l < target) arr.push(cb(blob, target - blob.l)); if (target !== blob.l) throw new Error("Slurp error"); return arr } function parsebool(blob, length) { return blob.read_shift(length) === 1 } function parseuint16(blob) { return blob.read_shift(2, "u") } function parseuint16a(blob, length) { return parslurp(blob, length, parseuint16) } var parse_Boolean = parsebool; function parse_Bes(blob) { var v = blob.read_shift(1), t = blob.read_shift(1); return t === 1 ? v : v === 1 } function parse_ShortXLUnicodeString(blob, length, opts) { var cch = blob.read_shift(opts && opts.biff >= 12 ? 2 : 1); var width = 1, encoding = "sbcs-cont"; var cp = current_codepage; if (opts && opts.biff >= 8) current_codepage = 1200; if (!opts || opts.biff == 8) { var fHighByte = blob.read_shift(1); if (fHighByte) { width = 2; encoding = "dbcs-cont" } } else if (opts.biff == 12) { width = 2; encoding = "wstr" } var o = cch ? blob.read_shift(cch, encoding) : ""; current_codepage = cp; return o } function parse_XLUnicodeRichExtendedString(blob) { var cp = current_codepage; current_codepage = 1200; var cch = blob.read_shift(2), flags = blob.read_shift(1); var fHighByte = flags & 1, fExtSt = flags & 4, fRichSt = flags & 8; var width = 1 + (flags & 1); var cRun = 0, cbExtRst; var z = {}; if (fRichSt) cRun = blob.read_shift(2); if (fExtSt) cbExtRst = blob.read_shift(4); var encoding = flags & 1 ? "dbcs-cont" : "sbcs-cont"; var msg = cch === 0 ? "" : blob.read_shift(cch, encoding); if (fRichSt) blob.l += 4 * cRun; if (fExtSt) blob.l += cbExtRst; z.t = msg; if (!fRichSt) { z.raw = "<t>" + z.t + "</t>"; z.r = z.t } current_codepage = cp; return z } function parse_XLUnicodeStringNoCch(blob, cch, opts) { var retval; if (opts) { if (opts.biff >= 2 && opts.biff <= 5) return blob.read_shift(cch, "sbcs-cont"); if (opts.biff >= 12) return blob.read_shift(cch, "dbcs-cont") } var fHighByte = blob.read_shift(1); if (fHighByte === 0) { retval = blob.read_shift(cch, "sbcs-cont") } else { retval = blob.read_shift(cch, "dbcs-cont") } return retval } function parse_XLUnicodeString(blob, length, opts) { var cch = blob.read_shift(opts && opts.biff == 2 ? 1 : 2); if (cch === 0) { blob.l++; return "" } return parse_XLUnicodeStringNoCch(blob, cch, opts) } function parse_XLUnicodeString2(blob, length, opts) { if (opts.biff > 5) return parse_XLUnicodeString(blob, length, opts); var cch = blob.read_shift(1); if (cch === 0) { blob.l++; return "" } return blob.read_shift(cch, "sbcs-cont") } var parse_ControlInfo = parsenoop; var parse_URLMoniker = function (blob) { var len = blob.read_shift(4), start = blob.l; var extra = false; if (len > 24) { blob.l += len - 24; if (blob.read_shift(16) === "795881f43b1d7f48af2c825dc4852763") extra = true; blob.l = start } var url = blob.read_shift((extra ? len - 24 : len) >> 1, "utf16le").replace(chr0, ""); if (extra) blob.l += 24; return url }; var parse_FileMoniker = function (blob, length) { var cAnti = blob.read_shift(2); var ansiLength = blob.read_shift(4); var ansiPath = blob.read_shift(ansiLength, "cstr"); var endServer = blob.read_shift(2); var versionNumber = blob.read_shift(2); var cbUnicodePathSize = blob.read_shift(4); if (cbUnicodePathSize === 0) return ansiPath.replace(/\\/g, "/"); var cbUnicodePathBytes = blob.read_shift(4); var usKeyValue = blob.read_shift(2); var unicodePath = blob.read_shift(cbUnicodePathBytes >> 1, "utf16le").replace(chr0, ""); return unicodePath }; var parse_HyperlinkMoniker = function (blob, length) { var clsid = blob.read_shift(16); length -= 16; switch (clsid) { case "e0c9ea79f9bace118c8200aa004ba90b": return parse_URLMoniker(blob, length); case "0303000000000000c000000000000046": return parse_FileMoniker(blob, length); default: throw new Error("Unsupported Moniker " + clsid); } }; var parse_HyperlinkString = function (blob, length) { var len = blob.read_shift(4); var o = blob.read_shift(len, "utf16le").replace(chr0, ""); return o }; var parse_Hyperlink = function (blob, length) { var end = blob.l + length; var sVer = blob.read_shift(4); if (sVer !== 2) throw new Error("Unrecognized streamVersion: " + sVer); var flags = blob.read_shift(2); blob.l += 2; var displayName, targetFrameName, moniker, oleMoniker, location, guid, fileTime; if (flags & 16) displayName = parse_HyperlinkString(blob, end - blob.l); if (flags & 128) targetFrameName = parse_HyperlinkString(blob, end - blob.l); if ((flags & 257) === 257) moniker = parse_HyperlinkString(blob, end - blob.l); if ((flags & 257) === 1) oleMoniker = parse_HyperlinkMoniker(blob, end - blob.l); if (flags & 8) location = parse_HyperlinkString(blob, end - blob.l); if (flags & 32) guid = blob.read_shift(16); if (flags & 64) fileTime = parse_FILETIME(blob, 8); blob.l = end; var target = targetFrameName || moniker || oleMoniker; if (location) target += "#" + location; return { Target: target } }; function parse_LongRGBA(blob, length) { var r = blob.read_shift(1), g = blob.read_shift(1), b = blob.read_shift(1), a = blob.read_shift(1); return [r, g, b, a] } function parse_LongRGB(blob, length) { var x = parse_LongRGBA(blob, length); x[3] = 0; return x } function parse_XLSCell(blob, length) { var rw = blob.read_shift(2); var col = blob.read_shift(2); var ixfe = blob.read_shift(2); return { r: rw, c: col, ixfe: ixfe } } function parse_frtHeader(blob) { var rt = blob.read_shift(2); var flags = blob.read_shift(2); blob.l += 8; return { type: rt, flags: flags } } function parse_OptXLUnicodeString(blob, length, opts) { return length === 0 ? "" : parse_XLUnicodeString2(blob, length, opts) } var parse_HideObjEnum = parseuint16; function parse_XTI(blob, length) { var iSupBook = blob.read_shift(2), itabFirst = blob.read_shift(2, "i"), itabLast = blob.read_shift(2, "i"); return [iSupBook, itabFirst, itabLast] } function parse_RkRec(blob, length) { var ixfe = blob.read_shift(2); var RK = parse_RkNumber(blob); return [ixfe, RK] } function parse_AddinUdf(blob, length, opts) { blob.l += 4; length -= 4; var l = blob.l + length; var udfName = parse_ShortXLUnicodeString(blob, length, opts); var cb = blob.read_shift(2); l -= blob.l; if (cb !== l) throw new Error("Malformed AddinUdf: padding = " + l + " != " + cb); blob.l += cb; return udfName } function parse_Ref8U(blob, length) { var rwFirst = blob.read_shift(2); var rwLast = blob.read_shift(2); var colFirst = blob.read_shift(2); var colLast = blob.read_shift(2); return { s: { c: colFirst, r: rwFirst }, e: { c: colLast, r: rwLast } } } function parse_RefU(blob, length) { var rwFirst = blob.read_shift(2); var rwLast = blob.read_shift(2); var colFirst = blob.read_shift(1); var colLast = blob.read_shift(1); return { s: { c: colFirst, r: rwFirst }, e: { c: colLast, r: rwLast } } } var parse_Ref = parse_RefU; function parse_FtCmo(blob, length) { blob.l += 4; var ot = blob.read_shift(2); var id = blob.read_shift(2); var flags = blob.read_shift(2); blob.l += 12; return [id, ot, flags] } function parse_FtNts(blob, length) { var out = {}; blob.l += 4; blob.l += 16; out.fSharedNote = blob.read_shift(2); blob.l += 4; return out } function parse_FtCf(blob, length) { var out = {}; blob.l += 4; blob.cf = blob.read_shift(2); return out } function parse_FtSkip(blob, length) { blob.l += 2; blob.l += blob.read_shift(2) } var FtTab = { 0: parse_FtSkip, 4: parse_FtSkip, 5: parse_FtSkip, 6: parse_FtSkip, 7: parse_FtCf, 8: parse_FtSkip, 9: parse_FtSkip, 10: parse_FtSkip, 11: parse_FtSkip, 12: parse_FtSkip, 13: parse_FtNts, 14: parse_FtSkip, 15: parse_FtSkip, 16: parse_FtSkip, 17: parse_FtSkip, 18: parse_FtSkip, 19: parse_FtSkip, 20: parse_FtSkip, 21: parse_FtCmo }; function parse_FtArray(blob, length, ot) { var tgt = blob.l + length; var fts = []; while (blob.l < tgt) { var ft = blob.read_shift(2); blob.l -= 2; try { fts.push(FtTab[ft](blob, tgt - blob.l)) } catch (e) { blob.l = tgt; return fts } } if (blob.l != tgt) blob.l = tgt; return fts } var parse_FontIndex = parseuint16; function parse_BOF(blob, length) { var o = { BIFFVer: 0, dt: 0 }; o.BIFFVer = blob.read_shift(2); length -= 2; if (length >= 2) { o.dt = blob.read_shift(2); blob.l -= 2 } switch (o.BIFFVer) { case 1536:; case 1280:; case 2:; case 7: break; default: if (length > 6) throw new Error("Unexpected BIFF Ver " + o.BIFFVer); } blob.read_shift(length); return o } function parse_InterfaceHdr(blob, length) { if (length === 0) return 1200; var q; if ((q = blob.read_shift(2)) !== 1200) { } return 1200 } function parse_WriteAccess(blob, length, opts) { if (opts.enc) { blob.l += length; return "" } var l = blob.l; var UserName = parse_XLUnicodeString(blob, 0, opts); blob.read_shift(length + l - blob.l); return UserName } function parse_BoundSheet8(blob, length, opts) { var pos = blob.read_shift(4); var hidden = blob.read_shift(1) & 3; var dt = blob.read_shift(1); switch (dt) { case 0: dt = "Worksheet"; break; case 1: dt = "Macrosheet"; break; case 2: dt = "Chartsheet"; break; case 6: dt = "VBAModule"; break; } var name = parse_ShortXLUnicodeString(blob, 0, opts); if (name.length === 0) name = "Sheet1"; return { pos: pos, hs: hidden, dt: dt, name: name } } function parse_SST(blob, length) { var cnt = blob.read_shift(4); var ucnt = blob.read_shift(4); var strs = []; for (var i = 0; i != ucnt; ++i) { strs.push(parse_XLUnicodeRichExtendedString(blob)) } strs.Count = cnt; strs.Unique = ucnt; return strs } function parse_ExtSST(blob, length) { var extsst = {}; extsst.dsst = blob.read_shift(2); blob.l += length - 2; return extsst } function parse_Row(blob, length) { var z = {}; z.r = blob.read_shift(2); z.c = blob.read_shift(2); z.cnt = blob.read_shift(2) - z.c; var miyRw = blob.read_shift(2); blob.l += 4; var flags = blob.read_shift(1); blob.l += 3; if (flags & 7) z.level = flags & 7; if (flags & 32) z.hidden = true; if (flags & 64) z.hpt = miyRw / 20; return z } function parse_ForceFullCalculation(blob, length) { var header = parse_frtHeader(blob); if (header.type != 2211) throw new Error("Invalid Future Record " + header.type); var fullcalc = blob.read_shift(4); return fullcalc !== 0 } var parse_CompressPictures = parsenoop2; function parse_RecalcId(blob, length) { blob.read_shift(2); return blob.read_shift(4) } function parse_DefaultRowHeight(blob, length, opts) { var f = 0; if (!(opts && opts.biff == 2)) { f = blob.read_shift(2) } var miyRw = blob.read_shift(2); if (opts && opts.biff == 2) { f = 1 - (miyRw >> 15); miyRw &= 32767 } var fl = { Unsynced: f & 1, DyZero: (f & 2) >> 1, ExAsc: (f & 4) >> 2, ExDsc: (f & 8) >> 3 }; return [fl, miyRw] } function parse_Window1(blob, length) { var xWn = blob.read_shift(2), yWn = blob.read_shift(2), dxWn = blob.read_shift(2), dyWn = blob.read_shift(2); var flags = blob.read_shift(2), iTabCur = blob.read_shift(2), iTabFirst = blob.read_shift(2); var ctabSel = blob.read_shift(2), wTabRatio = blob.read_shift(2); return { Pos: [xWn, yWn], Dim: [dxWn, dyWn], Flags: flags, CurTab: iTabCur, FirstTab: iTabFirst, Selected: ctabSel, TabRatio: wTabRatio } } function parse_Font(blob, length, opts) { var o = { dyHeight: blob.read_shift(2), fl: blob.read_shift(2) }; switch (opts && opts.biff || 8) { case 2: break; case 3:; case 4: blob.l += 2; break; default: blob.l += 10; break; } o.name = parse_ShortXLUnicodeString(blob, 0, opts); return o } function parse_LabelSst(blob, length) { var cell = parse_XLSCell(blob); cell.isst = blob.read_shift(4); return cell } function parse_Label(blob, length, opts) { var target = blob.l + length; var cell = parse_XLSCell(blob, 6); if (opts.biff == 2) blob.l++; var str = parse_XLUnicodeString(blob, target - blob.l, opts); cell.val = str; return cell } function parse_Format(blob, length, opts) { var ifmt = blob.read_shift(2); var fmtstr = parse_XLUnicodeString2(blob, 0, opts); return [ifmt, fmtstr] } var parse_BIFF2Format = parse_XLUnicodeString2; function parse_Dimensions(blob, length, opts) { var end = blob.l + length; var w = opts.biff == 8 || !opts.biff ? 4 : 2; var r = blob.read_shift(w), R = blob.read_shift(w); var c = blob.read_shift(2), C = blob.read_shift(2); blob.l = end; return { s: { r: r, c: c }, e: { r: R, c: C } } } function parse_RK(blob, length) { var rw = blob.read_shift(2), col = blob.read_shift(2); var rkrec = parse_RkRec(blob); return { r: rw, c: col, ixfe: rkrec[0], rknum: rkrec[1] } } function parse_MulRk(blob, length) { var target = blob.l + length - 2; var rw = blob.read_shift(2), col = blob.read_shift(2); var rkrecs = []; while (blob.l < target) rkrecs.push(parse_RkRec(blob)); if (blob.l !== target) throw new Error("MulRK read error"); var lastcol = blob.read_shift(2); if (rkrecs.length != lastcol - col + 1) throw new Error("MulRK length mismatch"); return { r: rw, c: col, C: lastcol, rkrec: rkrecs } } function parse_MulBlank(blob, length) { var target = blob.l + length - 2; var rw = blob.read_shift(2), col = blob.read_shift(2); var ixfes = []; while (blob.l < target) ixfes.push(blob.read_shift(2)); if (blob.l !== target) throw new Error("MulBlank read error"); var lastcol = blob.read_shift(2); if (ixfes.length != lastcol - col + 1) throw new Error("MulBlank length mismatch"); return { r: rw, c: col, C: lastcol, ixfe: ixfes } } function parse_CellStyleXF(blob, length, style, opts) { var o = {}; var a = blob.read_shift(4), b = blob.read_shift(4); var c = blob.read_shift(4), d = blob.read_shift(2); o.patternType = XLSFillPattern[c >> 26]; if (!opts.cellStyles) return o; o.alc = a & 7; o.fWrap = a >> 3 & 1; o.alcV = a >> 4 & 7; o.fJustLast = a >> 7 & 1; o.trot = a >> 8 & 255; o.cIndent = a >> 16 & 15; o.fShrinkToFit = a >> 20 & 1; o.iReadOrder = a >> 22 & 2; o.fAtrNum = a >> 26 & 1; o.fAtrFnt = a >> 27 & 1; o.fAtrAlc = a >> 28 & 1; o.fAtrBdr = a >> 29 & 1; o.fAtrPat = a >> 30 & 1; o.fAtrProt = a >> 31 & 1; o.dgLeft = b & 15; o.dgRight = b >> 4 & 15; o.dgTop = b >> 8 & 15; o.dgBottom = b >> 12 & 15; o.icvLeft = b >> 16 & 127; o.icvRight = b >> 23 & 127; o.grbitDiag = b >> 30 & 3; o.icvTop = c & 127; o.icvBottom = c >> 7 & 127; o.icvDiag = c >> 14 & 127; o.dgDiag = c >> 21 & 15; o.icvFore = d & 127; o.icvBack = d >> 7 & 127; o.fsxButton = d >> 14 & 1; return o } function parse_CellXF(blob, length, opts) { return parse_CellStyleXF(blob, length, 0, opts) } function parse_StyleXF(blob, length, opts) { return parse_CellStyleXF(blob, length, 1, opts) } function parse_XF(blob, length, opts) { var o = {}; o.ifnt = blob.read_shift(2); o.ifmt = blob.read_shift(2); o.flags = blob.read_shift(2); o.fStyle = o.flags >> 2 & 1; length -= 6; o.data = parse_CellStyleXF(blob, length, o.fStyle, opts); return o } function parse_Guts(blob, length) { blob.l += 4; var out = [blob.read_shift(2), blob.read_shift(2)]; if (out[0] !== 0) out[0]--; if (out[1] !== 0) out[1]--; if (out[0] > 7 || out[1] > 7) throw new Error("Bad Gutters: " + out.join("|")); return out } function parse_BoolErr(blob, length, opts) { var cell = parse_XLSCell(blob, 6); if (opts.biff == 2)++blob.l; var val = parse_Bes(blob, 2); cell.val = val; cell.t = val === true || val === false ? "b" : "e"; return cell } function parse_Number(blob, length) { var cell = parse_XLSCell(blob, 6); var xnum = parse_Xnum(blob, 8); cell.val = xnum; return cell } var parse_XLHeaderFooter = parse_OptXLUnicodeString; function parse_SupBook(blob, length, opts) { var end = blob.l + length; var ctab = blob.read_shift(2); var cch = blob.read_shift(2); opts.sbcch = cch; if (cch == 1025 || cch == 14849) return [cch, ctab]; if (cch < 1 || cch > 255) throw new Error("Unexpected SupBook type: " + cch); var virtPath = parse_XLUnicodeStringNoCch(blob, cch); var rgst = blob.read_shift(end - blob.l); return [cch, ctab, virtPath, rgst] } function parse_ExternName(blob, length, opts) { var flags = blob.read_shift(2); var body; var o = { fBuiltIn: flags & 1, fWantAdvise: flags >>> 1 & 1, fWantPict: flags >>> 2 & 1, fOle: flags >>> 3 & 1, fOleLink: flags >>> 4 & 1, cf: flags >>> 5 & 1023, fIcon: flags >>> 15 & 1 }; if (opts.sbcch === 14849) body = parse_AddinUdf(blob, length - 2, opts); o.body = body || blob.read_shift(length - 2); if (typeof body === "string") o.Name = body; return o } var XLSLblBuiltIn = ["_xlnm.Consolidate_Area", "_xlnm.Auto_Open", "_xlnm.Auto_Close", "_xlnm.Extract", "_xlnm.Database", "_xlnm.Criteria", "_xlnm.Print_Area", "_xlnm.Print_Titles", "_xlnm.Recorder", "_xlnm.Data_Form", "_xlnm.Auto_Activate", "_xlnm.Auto_Deactivate", "_xlnm.Sheet_Title", "_xlnm._FilterDatabase"]; function parse_Lbl(blob, length, opts) { var target = blob.l + length; var flags = blob.read_shift(2); var chKey = blob.read_shift(1); var cch = blob.read_shift(1); var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2); var itab = 0; if (!opts || opts.biff >= 5) { blob.l += 2; itab = blob.read_shift(2); blob.l += 4 } var name = parse_XLUnicodeStringNoCch(blob, cch, opts); if (flags & 32) name = XLSLblBuiltIn[name.charCodeAt(0)]; var npflen = target - blob.l; if (opts && opts.biff == 2)--npflen; var rgce = target == blob.l || cce == 0 ? [] : parse_NameParsedFormula(blob, npflen, opts, cce); return { chKey: chKey, Name: name, itab: itab, rgce: rgce } } function parse_ExternSheet(blob, length, opts) { if (opts.biff < 8) return parse_ShortXLUnicodeString(blob, length, opts); var o = [], target = blob.l + length, len = blob.read_shift(2); while (len-- !== 0) o.push(parse_XTI(blob, 6)); var oo = []; return o } function parse_NameCmt(blob, length, opts) { if (opts.biff < 8) { blob.l += length; return } var cchName = blob.read_shift(2); var cchComment = blob.read_shift(2); var name = parse_XLUnicodeStringNoCch(blob, cchName, opts); var comment = parse_XLUnicodeStringNoCch(blob, cchComment, opts); return [name, comment] } function parse_ShrFmla(blob, length, opts) { var ref = parse_RefU(blob, 6); blob.l++; var cUse = blob.read_shift(1); length -= 8; return [parse_SharedParsedFormula(blob, length, opts), cUse] } function parse_Array(blob, length, opts) { var ref = parse_Ref(blob, 6); switch (opts.biff) { case 2: blob.l++; length -= 7; break; case 3:; case 4: blob.l += 2; length -= 8; break; default: blob.l += 6; length -= 12; } return [ref, parse_ArrayParsedFormula(blob, length, opts, ref)] } function parse_MTRSettings(blob, length) { var fMTREnabled = blob.read_shift(4) !== 0; var fUserSetThreadCount = blob.read_shift(4) !== 0; var cUserThreadCount = blob.read_shift(4); return [fMTREnabled, fUserSetThreadCount, cUserThreadCount] } function parse_NoteSh(blob, length, opts) { if (opts.biff < 8) return; var row = blob.read_shift(2), col = blob.read_shift(2); var flags = blob.read_shift(2), idObj = blob.read_shift(2); var stAuthor = parse_XLUnicodeString2(blob, 0, opts); if (opts.biff < 8) blob.read_shift(1); return [{ r: row, c: col }, stAuthor, idObj, flags] } function parse_Note(blob, length, opts) { return parse_NoteSh(blob, length, opts) } function parse_MergeCells(blob, length) { var merges = []; var cmcs = blob.read_shift(2); while (cmcs--) merges.push(parse_Ref8U(blob, length)); return merges } function parse_Obj(blob, length, opts) { if (opts && opts.biff < 8) return parse_BIFF5Obj(blob, length, opts); var cmo = parse_FtCmo(blob, 22); var fts = parse_FtArray(blob, length - 22, cmo[1]); return { cmo: cmo, ft: fts } } var parse_BIFF5OT = []; parse_BIFF5OT[8] = function (blob, length, opts) { var tgt = blob.l + length; blob.l += 10; var cf = blob.read_shift(2); blob.l += 4; var cbPictFmla = blob.read_shift(2); blob.l += 2; var grbit = blob.read_shift(2); blob.l += 4; var cchName = blob.read_shift(1); blob.l += cchName; blob.l = tgt; return { fmt: cf } }; function parse_BIFF5Obj(blob, length, opts) { var cnt = blob.read_shift(4); var ot = blob.read_shift(2); var id = blob.read_shift(2); var grbit = blob.read_shift(2); var colL = blob.read_shift(2); var dxL = blob.read_shift(2); var rwT = blob.read_shift(2); var dyT = blob.read_shift(2); var colR = blob.read_shift(2); var dxR = blob.read_shift(2); var rwB = blob.read_shift(2); var dyB = blob.read_shift(2); var cbMacro = blob.read_shift(2); blob.l += 6; length -= 36; var fts = []; fts.push((parse_BIFF5OT[ot] || parsenoop)(blob, length, opts)); return { cmo: [id, ot, grbit], ft: fts } } function parse_TxO(blob, length, opts) { var s = blob.l; var texts = ""; try { blob.l += 4; var ot = (opts.lastobj || { cmo: [0, 0] }).cmo[1]; var controlInfo; if ([0, 5, 7, 11, 12, 14].indexOf(ot) == -1) blob.l += 6; else controlInfo = parse_ControlInfo(blob, 6, opts); var cchText = blob.read_shift(2); var cbRuns = blob.read_shift(2); var ifntEmpty = parse_FontIndex(blob, 2); var len = blob.read_shift(2); blob.l += len; for (var i = 1; i < blob.lens.length - 1; ++i) { if (blob.l - s != blob.lens[i]) throw new Error("TxO: bad continue record"); var hdr = blob[blob.l]; var t = parse_XLUnicodeStringNoCch(blob, blob.lens[i + 1] - blob.lens[i] - 1); texts += t; if (texts.length >= (hdr ? cchText : 2 * cchText)) break } if (texts.length !== cchText && texts.length !== cchText * 2) { throw new Error("cchText: " + cchText + " != " + texts.length) } blob.l = s + length; return { t: texts } } catch (e) { blob.l = s + length; return { t: texts } } } var parse_HLink = function (blob, length) { var ref = parse_Ref8U(blob, 8); blob.l += 16; var hlink = parse_Hyperlink(blob, length - 24); return [ref, hlink] }; var parse_HLinkTooltip = function (blob, length) { var end = blob.l + length; blob.read_shift(2); var ref = parse_Ref8U(blob, 8); var wzTooltip = blob.read_shift((length - 10) / 2, "dbcs-cont"); wzTooltip = wzTooltip.replace(chr0, ""); return [ref, wzTooltip] }; function parse_Country(blob, length) { var o = [], d; d = blob.read_shift(2); o[0] = CountryEnum[d] || d; d = blob.read_shift(2); o[1] = CountryEnum[d] || d; return o } function parse_ClrtClient(blob, length) { var ccv = blob.read_shift(2); var o = []; while (ccv-- > 0) o.push(parse_LongRGB(blob, 8)); return o } function parse_Palette(blob, length) { var ccv = blob.read_shift(2); var o = []; while (ccv-- > 0) o.push(parse_LongRGB(blob, 8)); return o } function parse_XFCRC(blob, length) { blob.l += 2; var o = { cxfs: 0, crc: 0 }; o.cxfs = blob.read_shift(2); o.crc = blob.read_shift(4); return o } function parse_ColInfo(blob, length, opts) { if (!opts.cellStyles) return parsenoop(blob, length); var w = opts && opts.biff >= 12 ? 4 : 2; var colFirst = blob.read_shift(w); var colLast = blob.read_shift(w); var coldx = blob.read_shift(w); var ixfe = blob.read_shift(w); var flags = blob.read_shift(2); if (w == 2) blob.l += 2; return { s: colFirst, e: colLast, w: coldx, ixfe: ixfe, flags: flags } } function parse_Setup(blob, length, opts) { var o = {}; blob.l += 16; o.header = parse_Xnum(blob, 8); o.footer = parse_Xnum(blob, 8); blob.l += 2; return o } function parse_ShtProps(blob, length, opts) { var def = { area: false }; if (opts.biff != 5) { blob.l += length; return def } var d = blob.read_shift(1); blob.l += 3; if (d & 16) def.area = true; return def } var parse_Style = parsenoop; var parse_StyleExt = parsenoop; var parse_Window2 = parsenoop; var parse_Backup = parsebool; var parse_Blank = parse_XLSCell; var parse_BottomMargin = parse_Xnum; var parse_BuiltInFnGroupCount = parseuint16; var parse_CalcCount = parseuint16; var parse_CalcDelta = parse_Xnum; var parse_CalcIter = parsebool; var parse_CalcMode = parseuint16; var parse_CalcPrecision = parsebool; var parse_CalcRefMode = parsenoop2; var parse_CalcSaveRecalc = parsebool; var parse_CodePage = parseuint16; var parse_Compat12 = parsebool; var parse_Date1904 = parsebool; var parse_DefColWidth = parseuint16; var parse_DSF = parsenoop2; var parse_EntExU2 = parsenoop2; var parse_EOF = parsenoop2; var parse_Excel9File = parsenoop2; var parse_FeatHdr = parsenoop2; var parse_FontX = parseuint16; var parse_Footer = parse_XLHeaderFooter; var parse_GridSet = parseuint16; var parse_HCenter = parsebool; var parse_Header = parse_XLHeaderFooter; var parse_HideObj = parse_HideObjEnum; var parse_InterfaceEnd = parsenoop2; var parse_LeftMargin = parse_Xnum; var parse_Mms = parsenoop2; var parse_ObjProtect = parsebool; var parse_Password = parseuint16; var parse_PrintGrid = parsebool; var parse_PrintRowCol = parsebool; var parse_PrintSize = parseuint16; var parse_Prot4Rev = parsebool; var parse_Prot4RevPass = parseuint16; var parse_Protect = parsebool; var parse_RefreshAll = parsebool; var parse_RightMargin = parse_Xnum; var parse_RRTabId = parseuint16a; var parse_ScenarioProtect = parsebool; var parse_Scl = parseuint16a; var parse_String = parse_XLUnicodeString; var parse_SxBool = parsebool; var parse_TopMargin = parse_Xnum; var parse_UsesELFs = parsebool; var parse_VCenter = parsebool; var parse_WinProtect = parsebool; var parse_WriteProtect = parsenoop; var parse_VerticalPageBreaks = parsenoop; var parse_HorizontalPageBreaks = parsenoop; var parse_Selection = parsenoop; var parse_Continue = parsenoop; var parse_Pane = parsenoop; var parse_Pls = parsenoop; var parse_DCon = parsenoop; var parse_DConRef = parsenoop; var parse_DConName = parsenoop; var parse_XCT = parsenoop; var parse_CRN = parsenoop; var parse_FileSharing = parsenoop; var parse_Uncalced = parsenoop; var parse_Template = parsenoop; var parse_Intl = parsenoop; var parse_WsBool = parsenoop; var parse_Sort = parsenoop; var parse_Sync = parsenoop; var parse_LPr = parsenoop; var parse_DxGCol = parsenoop; var parse_FnGroupName = parsenoop; var parse_FilterMode = parsenoop; var parse_AutoFilterInfo = parsenoop; var parse_AutoFilter = parsenoop; var parse_ScenMan = parsenoop; var parse_SCENARIO = parsenoop; var parse_SxView = parsenoop; var parse_Sxvd = parsenoop; var parse_SXVI = parsenoop; var parse_SxIvd = parsenoop; var parse_SXLI = parsenoop; var parse_SXPI = parsenoop; var parse_DocRoute = parsenoop; var parse_RecipName = parsenoop; var parse_SXDI = parsenoop; var parse_SXDB = parsenoop; var parse_SXFDB = parsenoop; var parse_SXDBB = parsenoop; var parse_SXNum = parsenoop; var parse_SxErr = parsenoop; var parse_SXInt = parsenoop; var parse_SXString = parsenoop; var parse_SXDtr = parsenoop; var parse_SxNil = parsenoop; var parse_SXTbl = parsenoop; var parse_SXTBRGIITM = parsenoop; var parse_SxTbpg = parsenoop; var parse_ObProj = parsenoop; var parse_SXStreamID = parsenoop; var parse_DBCell = parsenoop; var parse_SXRng = parsenoop; var parse_SxIsxoper = parsenoop; var parse_BookBool = parsenoop; var parse_DbOrParamQry = parsenoop; var parse_OleObjectSize = parsenoop; var parse_SXVS = parsenoop; var parse_BkHim = parsenoop; var parse_MsoDrawingGroup = parsenoop; var parse_MsoDrawing = parsenoop; var parse_MsoDrawingSelection = parsenoop; var parse_PhoneticInfo = parsenoop; var parse_SxRule = parsenoop; var parse_SXEx = parsenoop; var parse_SxFilt = parsenoop; var parse_SxDXF = parsenoop; var parse_SxItm = parsenoop; var parse_SxName = parsenoop; var parse_SxSelect = parsenoop; var parse_SXPair = parsenoop; var parse_SxFmla = parsenoop; var parse_SxFormat = parsenoop; var parse_SXVDEx = parsenoop; var parse_SXFormula = parsenoop; var parse_SXDBEx = parsenoop; var parse_RRDInsDel = parsenoop; var parse_RRDHead = parsenoop; var parse_RRDChgCell = parsenoop; var parse_RRDRenSheet = parsenoop; var parse_RRSort = parsenoop; var parse_RRDMove = parsenoop; var parse_RRFormat = parsenoop; var parse_RRAutoFmt = parsenoop; var parse_RRInsertSh = parsenoop; var parse_RRDMoveBegin = parsenoop; var parse_RRDMoveEnd = parsenoop; var parse_RRDInsDelBegin = parsenoop; var parse_RRDInsDelEnd = parsenoop; var parse_RRDConflict = parsenoop; var parse_RRDDefName = parsenoop; var parse_RRDRstEtxp = parsenoop; var parse_LRng = parsenoop; var parse_CUsr = parsenoop; var parse_CbUsr = parsenoop; var parse_UsrInfo = parsenoop; var parse_UsrExcl = parsenoop; var parse_FileLock = parsenoop; var parse_RRDInfo = parsenoop; var parse_BCUsrs = parsenoop; var parse_UsrChk = parsenoop; var parse_UserBView = parsenoop; var parse_UserSViewBegin = parsenoop; var parse_UserSViewEnd = parsenoop; var parse_RRDUserView = parsenoop; var parse_Qsi = parsenoop; var parse_CondFmt = parsenoop; var parse_CF = parsenoop; var parse_DVal = parsenoop; var parse_DConBin = parsenoop; var parse_Lel = parsenoop; var parse_XLSCodeName = parse_XLUnicodeString; var parse_SXFDBType = parsenoop; var parse_ObNoMacros = parsenoop; var parse_Dv = parsenoop; var parse_Index = parsenoop; var parse_Table = parsenoop; var parse_BigName = parsenoop; var parse_ContinueBigName = parsenoop; var parse_WebPub = parsenoop; var parse_QsiSXTag = parsenoop; var parse_DBQueryExt = parsenoop; var parse_ExtString = parsenoop; var parse_TxtQry = parsenoop; var parse_Qsir = parsenoop; var parse_Qsif = parsenoop; var parse_RRDTQSIF = parsenoop; var parse_OleDbConn = parsenoop; var parse_WOpt = parsenoop; var parse_SXViewEx = parsenoop; var parse_SXTH = parsenoop; var parse_SXPIEx = parsenoop; var parse_SXVDTEx = parsenoop; var parse_SXViewEx9 = parsenoop; var parse_ContinueFrt = parsenoop; var parse_RealTimeData = parsenoop; var parse_ChartFrtInfo = parsenoop; var parse_FrtWrapper = parsenoop; var parse_StartBlock = parsenoop; var parse_EndBlock = parsenoop; var parse_StartObject = parsenoop; var parse_EndObject = parsenoop; var parse_CatLab = parsenoop; var parse_YMult = parsenoop; var parse_SXViewLink = parsenoop; var parse_PivotChartBits = parsenoop; var parse_FrtFontList = parsenoop; var parse_SheetExt = parsenoop; var parse_BookExt = parsenoop; var parse_SXAddl = parsenoop; var parse_CrErr = parsenoop; var parse_HFPicture = parsenoop; var parse_Feat = parsenoop; var parse_DataLabExt = parsenoop; var parse_DataLabExtContents = parsenoop; var parse_CellWatch = parsenoop; var parse_FeatHdr11 = parsenoop; var parse_Feature11 = parsenoop; var parse_DropDownObjIds = parsenoop; var parse_ContinueFrt11 = parsenoop; var parse_DConn = parsenoop; var parse_List12 = parsenoop; var parse_Feature12 = parsenoop; var parse_CondFmt12 = parsenoop; var parse_CF12 = parsenoop; var parse_CFEx = parsenoop; var parse_AutoFilter12 = parsenoop; var parse_ContinueFrt12 = parsenoop; var parse_MDTInfo = parsenoop; var parse_MDXStr = parsenoop; var parse_MDXTuple = parsenoop; var parse_MDXSet = parsenoop; var parse_MDXProp = parsenoop; var parse_MDXKPI = parsenoop; var parse_MDB = parsenoop; var parse_PLV = parsenoop; var parse_DXF = parsenoop; var parse_TableStyles = parsenoop; var parse_TableStyle = parsenoop; var parse_TableStyleElement = parsenoop; var parse_NamePublish = parsenoop; var parse_SortData = parsenoop; var parse_GUIDTypeLib = parsenoop; var parse_FnGrp12 = parsenoop; var parse_NameFnGrp12 = parsenoop; var parse_HeaderFooter = parsenoop; var parse_CrtLayout12 = parsenoop; var parse_CrtMlFrt = parsenoop; var parse_CrtMlFrtContinue = parsenoop; var parse_ShapePropsStream = parsenoop; var parse_TextPropsStream = parsenoop; var parse_RichTextStream = parsenoop; var parse_CrtLayout12A = parsenoop; var parse_Units = parsenoop; var parse_Chart = parsenoop; var parse_Series = parsenoop; var parse_DataFormat = parsenoop; var parse_LineFormat = parsenoop; var parse_MarkerFormat = parsenoop; var parse_AreaFormat = parsenoop; var parse_PieFormat = parsenoop; var parse_AttachedLabel = parsenoop; var parse_SeriesText = parsenoop; var parse_ChartFormat = parsenoop; var parse_Legend = parsenoop; var parse_SeriesList = parsenoop; var parse_Bar = parsenoop; var parse_Line = parsenoop; var parse_Pie = parsenoop; var parse_Area = parsenoop; var parse_Scatter = parsenoop; var parse_CrtLine = parsenoop; var parse_Axis = parsenoop; var parse_Tick = parsenoop; var parse_ValueRange = parsenoop; var parse_CatSerRange = parsenoop; var parse_AxisLine = parsenoop; var parse_CrtLink = parsenoop; var parse_DefaultText = parsenoop; var parse_Text = parsenoop; var parse_ObjectLink = parsenoop; var parse_Frame = parsenoop; var parse_Begin = parsenoop; var parse_End = parsenoop; var parse_PlotArea = parsenoop; var parse_Chart3d = parsenoop; var parse_PicF = parsenoop; var parse_DropBar = parsenoop; var parse_Radar = parsenoop; var parse_Surf = parsenoop; var parse_RadarArea = parsenoop; var parse_AxisParent = parsenoop; var parse_LegendException = parsenoop; var parse_SerToCrt = parsenoop; var parse_AxesUsed = parsenoop; var parse_SBaseRef = parsenoop; var parse_SerParent = parsenoop; var parse_SerAuxTrend = parsenoop; var parse_IFmtRecord = parsenoop; var parse_Pos = parsenoop; var parse_AlRuns = parsenoop; var parse_BRAI = parsenoop; var parse_SerAuxErrBar = parsenoop; var parse_SerFmt = parsenoop; var parse_Chart3DBarShape = parsenoop; var parse_Fbi = parsenoop; var parse_BopPop = parsenoop; var parse_AxcExt = parsenoop; var parse_Dat = parsenoop; var parse_PlotGrowth = parsenoop; var parse_SIIndex = parsenoop; var parse_GelFrame = parsenoop; var parse_BopPopCustom = parsenoop; var parse_Fbi2 = parsenoop; function parse_ImData(blob, length, opts) { var tgt = blob.l + length; var cf = blob.read_shift(2); var env = blob.read_shift(2); var lcb = blob.read_shift(4); var o = { fmt: cf, env: env, len: lcb, data: blob.slice(blob.l, blob.l + lcb) }; blob.l += lcb; return o } function parse_BIFF5String(blob) { var len = blob.read_shift(1); return blob.read_shift(len, "sbcs-cont") } function parse_BIFF2STR(blob, length, opts) { var cell = parse_XLSCell(blob, 6); ++blob.l; var str = parse_XLUnicodeString2(blob, length - 7, opts); cell.t = "str"; cell.val = str; return cell } function parse_BIFF2NUM(blob, length, opts) { var cell = parse_XLSCell(blob, 6); ++blob.l; var num = parse_Xnum(blob, 8); cell.t = "n"; cell.val = num; return cell } function parse_BIFF2INT(blob, length) { var cell = parse_XLSCell(blob, 6); ++blob.l; var num = blob.read_shift(2); cell.t = "n"; cell.val = num; return cell } function parse_BIFF2STRING(blob, length) { var cch = blob.read_shift(1); if (cch === 0) { blob.l++; return "" } return blob.read_shift(cch, "sbcs-cont") } function parse_BIFF2FONTXTRA(blob, length) { blob.l += 6; blob.l += 2; blob.l += 1; blob.l += 3; blob.l += 1; blob.l += length - 13 } function parse_RString(blob, length, opts) { var end = blob.l + length; var cell = parse_XLSCell(blob, 6); var cch = blob.read_shift(2); var str = parse_XLUnicodeStringNoCch(blob, cch, opts); blob.l = end; cell.t = "str"; cell.val = str; return cell } var DBF = function () {
        var dbf_codepage_map = { 1: 437, 2: 850, 3: 1252, 4: 1e4, 100: 852, 101: 866, 102: 865, 103: 861, 104: 895, 105: 620, 106: 737, 107: 857, 120: 950, 121: 949, 122: 936, 123: 932, 124: 874, 125: 1255, 126: 1256, 150: 10007, 151: 10029, 152: 10006, 200: 1250, 201: 1251, 202: 1254, 203: 1253, 0: 20127, 8: 865, 9: 437, 10: 850, 11: 437, 13: 437, 14: 850, 15: 437, 16: 850, 17: 437, 18: 850, 19: 932, 20: 850, 21: 437, 22: 850, 23: 865, 24: 437, 25: 437, 26: 850, 27: 437, 28: 863, 29: 850, 31: 852, 34: 852, 35: 852, 36: 860, 37: 850, 38: 866, 55: 850, 64: 852, 77: 936, 78: 949, 79: 950, 80: 874, 87: 1252, 88: 1252, 89: 1252, 255: 16969 }; function dbf_to_aoa(buf, opts) {
            var out = []; var d = new_raw_buf(1); switch (opts.type) { case "base64": d = s2a(Base64.decode(buf)); break; case "binary": d = s2a(buf); break; case "buffer":; case "array": d = buf; break; } prep_blob(d, 0); var ft = d.read_shift(1); var memo = false; var vfp = false; switch (ft) { case 2:; case 3: break; case 48: vfp = true; memo = true; break; case 49: vfp = true; break; case 131: memo = true; break; case 139: memo = true; break; case 245: memo = true; break; default: throw new Error("DBF Unsupported Version: " + ft.toString(16)); } var filedate = new Date, nrow = 0, fpos = 0; if (ft == 2) nrow = d.read_shift(2); filedate = new Date(d.read_shift(1) + 1900, d.read_shift(1) - 1, d.read_shift(1)); if (ft != 2) nrow = d.read_shift(4); if (ft != 2) fpos = d.read_shift(2); var rlen = d.read_shift(2); var flags = 0, current_cp = 1252; if (ft != 2) { d.l += 16; flags = d.read_shift(1); if (d[d.l] !== 0) current_cp = dbf_codepage_map[d[d.l]]; d.l += 1; d.l += 2 } var fields = [], field = {}; var hend = fpos - 10 - (vfp ? 264 : 0); while (ft == 2 ? d.l < d.length && d[d.l] != 13 : d.l < hend) {
                field = {}; field.name = cptable.utils.decode(current_cp, d.slice(d.l, d.l + 10)).replace(/[\u0000\r\n].*$/g, ""); d.l += 11; field.type = String.fromCharCode(d.read_shift(1)); if (ft != 2) field.offset = d.read_shift(4); field.len = d.read_shift(1); if (ft == 2) field.offset = d.read_shift(2); field.dec = d.read_shift(1); if (field.name.length) fields.push(field); if (ft != 2) d.l += 14; switch (field.type) {
                    case "C": break; case "D": break; case "F": break;
                        ; case "I": break; case "L": break; case "M": break; case "N": break; case "T": break; case "Y": break; case "0": break; case "+": break; case "@": break; default: throw new Error("Unknown Field Type: " + field.type);
                }
            } if (d[d.l] !== 13) d.l = fpos - 1; else if (ft == 2) d.l = 521; if (ft != 2) { if (d.read_shift(1) !== 13) throw new Error("DBF Terminator not found " + d.l + " " + d[d.l]); d.l = fpos } var R = 0, C = 0; out[0] = []; for (C = 0; C != fields.length; ++C) out[0][C] = fields[C].name; while (nrow-- > 0) { if (d[d.l] === 42) { d.l += rlen; continue } ++d.l; out[++R] = []; C = 0; for (C = 0; C != fields.length; ++C) { var dd = d.slice(d.l, d.l + fields[C].len); d.l += fields[C].len; prep_blob(dd, 0); var s = cptable.utils.decode(current_cp, dd); switch (fields[C].type) { case "C": out[R][C] = cptable.utils.decode(current_cp, dd); out[R][C] = out[R][C].trim(); break; case "D": if (s.length === 8) out[R][C] = new Date(+s.substr(0, 4), +s.substr(4, 2) - 1, +s.substr(6, 2)); else out[R][C] = s; break; case "F": out[R][C] = parseFloat(s.trim()); break; case "I": out[R][C] = dd.read_shift(4, "i"); break; case "L": switch (s.toUpperCase()) { case "Y":; case "T": out[R][C] = true; break; case "N":; case "F": out[R][C] = false; break; case " ":; case "?": out[R][C] = false; break; default: throw new Error("DBF Unrecognized L:|" + s + "|"); } break; case "M": if (!memo) throw new Error("DBF Unexpected MEMO for type " + ft.toString(16)); out[R][C] = "##MEMO##" + dd.read_shift(4); break; case "N": out[R][C] = +s.replace(/\u0000/g, "").trim(); break; case "T": var day = dd.read_shift(4), ms = dd.read_shift(4); throw new Error(day + " | " + ms); case "Y": out[R][C] = dd.read(4, "i") / 1e4; break; case "0": if (fields[C].name === "_NullFlags") break; default: throw new Error("DBF Unsupported data type " + fields[C].type); } } } if (ft != 2) if (d.l < d.length && d[d.l++] != 26) throw new Error("DBF EOF Marker missing " + (d.l - 1) + " of " + d.length + " " + d[d.l - 1].toString(16)); return out
        } function dbf_to_sheet(buf, opts) { var o = opts || {}; if (!o.dateNF) o.dateNF = "yyyymmdd"; return aoa_to_sheet(dbf_to_aoa(buf, o), o) } function dbf_to_workbook(buf, opts) { try { return sheet_to_workbook(dbf_to_sheet(buf, opts), opts) } catch (e) { if (opts && opts.WTF) throw e } return { SheetNames: [], Sheets: {} } } return { to_workbook: dbf_to_workbook, to_sheet: dbf_to_sheet }
    }(); var SYLK = function () { function sylk_to_aoa(d, opts) { switch (opts.type) { case "base64": return sylk_to_aoa_str(Base64.decode(d), opts); case "binary": return sylk_to_aoa_str(d, opts); case "buffer": return sylk_to_aoa_str(d.toString("binary"), opts); case "array": return sylk_to_aoa_str(cc2str(d), opts); } throw new Error("Unrecognized type " + opts.type) } function sylk_to_aoa_str(str, opts) { var records = str.split(/[\n\r]+/), R = -1, C = -1, ri = 0, rj = 0, arr = []; var formats = []; var next_cell_format = null; var sht = {}, rowinfo = [], colinfo = [], cw = []; var Mval = 0, j; for (; ri !== records.length; ++ri) { Mval = 0; var rstr = records[ri].trim(); var record = rstr.replace(/;;/g, "").split(";").map(function (x) { return x.replace(/\u0001/g, ";") }); var RT = record[0], val; if (rstr.length > 0) switch (RT) { case "ID": break; case "E": break; case "B": break; case "O": break; case "P": if (record[1].charAt(0) == "P") formats.push(rstr.substr(3).replace(/;;/g, ";")); break; case "C": for (rj = 1; rj < record.length; ++rj) switch (record[rj].charAt(0)) { case "X": C = parseInt(record[rj].substr(1)) - 1; break; case "Y": R = parseInt(record[rj].substr(1)) - 1; C = 0; for (j = arr.length; j <= R; ++j) arr[j] = []; break; case "K": val = record[rj].substr(1); if (val.charAt(0) === '"') val = val.substr(1, val.length - 2); else if (val === "TRUE") val = true; else if (val === "FALSE") val = false; else if (+val === +val) { val = +val; if (next_cell_format !== null && SSF.is_date(next_cell_format)) val = numdate(val) } else if (!isNaN(fuzzydate(val).getDate())) { val = parseDate(val) } arr[R][C] = val; next_cell_format = null; break; case "E": var formula = rc_to_a1(record[rj].substr(1), { r: R, c: C }); arr[R][C] = [arr[R][C], formula]; break; default: if (opts && opts.WTF) throw new Error("SYLK bad record " + rstr); } break; case "F": var F_seen = 0; for (rj = 1; rj < record.length; ++rj) switch (record[rj].charAt(0)) { case "X": C = parseInt(record[rj].substr(1)) - 1; ++F_seen; break; case "Y": R = parseInt(record[rj].substr(1)) - 1; for (j = arr.length; j <= R; ++j) arr[j] = []; break; case "M": Mval = parseInt(record[rj].substr(1)) / 20; break; case "F": break; case "P": next_cell_format = formats[parseInt(record[rj].substr(1))]; break; case "S": break; case "D": break; case "N": break; case "W": cw = record[rj].substr(1).split(" "); for (j = parseInt(cw[0], 10) ; j <= parseInt(cw[1], 10) ; ++j) { Mval = parseInt(cw[2], 10); colinfo[j - 1] = Mval == 0 ? { hidden: true } : { wch: Mval }; process_col(colinfo[j - 1]) } break; case "C": C = parseInt(record[rj].substr(1)) - 1; if (!colinfo[C]) colinfo[C] = {}; break; case "R": R = parseInt(record[rj].substr(1)) - 1; if (!rowinfo[R]) rowinfo[R] = {}; if (Mval > 0) { rowinfo[R].hpt = Mval; rowinfo[R].hpx = pt2px(Mval) } else if (Mval == 0) rowinfo[R].hidden = true; break; default: if (opts && opts.WTF) throw new Error("SYLK bad record " + rstr); } if (F_seen < 1) next_cell_format = null; break; default: if (opts && opts.WTF) throw new Error("SYLK bad record " + rstr); } } if (rowinfo.length > 0) sht["!rows"] = rowinfo; if (colinfo.length > 0) sht["!cols"] = colinfo; return [arr, sht] } function sylk_to_sheet(d, opts) { var aoasht = sylk_to_aoa(d, opts); var aoa = aoasht[0], ws = aoasht[1]; var o = aoa_to_sheet(aoa, opts); keys(ws).forEach(function (k) { o[k] = ws[k] }); return o } function sylk_to_workbook(d, opts) { return sheet_to_workbook(sylk_to_sheet(d, opts), opts) } function write_ws_cell_sylk(cell, ws, R, C, opts) { var o = "C;Y" + (R + 1) + ";X" + (C + 1) + ";K"; switch (cell.t) { case "n": o += cell.v || 0; if (cell.f && !cell.F) o += ";E" + a1_to_rc(cell.f, { r: R, c: C }); break; case "b": o += cell.v ? "TRUE" : "FALSE"; break; case "e": o += cell.w || cell.v; break; case "d": o += '"' + (cell.w || cell.v) + '"'; break; case "s": o += '"' + cell.v.replace(/"/g, "") + '"'; break; } return o } function write_ws_cols_sylk(out, cols) { cols.forEach(function (col, i) { var rec = "F;W" + (i + 1) + " " + (i + 1) + " "; if (col.hidden) rec += "0"; else { if (typeof col.width == "number") col.wpx = width2px(col.width); if (typeof col.wpx == "number") col.wch = px2char(col.wpx); if (typeof col.wch == "number") rec += Math.round(col.wch) } if (rec.charAt(rec.length - 1) != " ") out.push(rec) }) } function write_ws_rows_sylk(out, rows) { rows.forEach(function (row, i) { var rec = "F;"; if (row.hidden) rec += "M0;"; else if (row.hpt) rec += "M" + 20 * row.hpt + ";"; else if (row.hpx) rec += "M" + 20 * px2pt(row.hpx) + ";"; if (rec.length > 2) out.push(rec + "R" + (i + 1)) }) } function sheet_to_sylk(ws, opts) { var preamble = ["ID;PWXL;N;E"], o = []; var r = decode_range(ws["!ref"]), cell; var dense = Array.isArray(ws); var RS = "\r\n"; preamble.push("P;PGeneral"); preamble.push("F;P0;DG0G8;M255"); if (ws["!cols"]) write_ws_cols_sylk(preamble, ws["!cols"]); if (ws["!rows"]) write_ws_rows_sylk(preamble, ws["!rows"]); preamble.push("B;Y" + (r.e.r - r.s.r + 1) + ";X" + (r.e.c - r.s.c + 1) + ";D" + [r.s.c, r.s.r, r.e.c, r.e.r].join(" ")); for (var R = r.s.r; R <= r.e.r; ++R) { for (var C = r.s.c; C <= r.e.c; ++C) { var coord = encode_cell({ r: R, c: C }); cell = dense ? (ws[R] || [])[C] : ws[coord]; if (!cell || cell.v == null && (!cell.f || cell.F)) continue; o.push(write_ws_cell_sylk(cell, ws, R, C, opts)) } } return preamble.join(RS) + RS + o.join(RS) + RS + "E" + RS } return { to_workbook: sylk_to_workbook, to_sheet: sylk_to_sheet, from_sheet: sheet_to_sylk } }(); var DIF = function () { function dif_to_aoa(d, opts) { switch (opts.type) { case "base64": return dif_to_aoa_str(Base64.decode(d), opts); case "binary": return dif_to_aoa_str(d, opts); case "buffer": return dif_to_aoa_str(d.toString("binary"), opts); case "array": return dif_to_aoa_str(cc2str(d), opts); } throw new Error("Unrecognized type " + opts.type) } function dif_to_aoa_str(str, opts) { var records = str.split("\n"), R = -1, C = -1, ri = 0, arr = []; for (; ri !== records.length; ++ri) { if (records[ri].trim() === "BOT") { arr[++R] = []; C = 0; continue } if (R < 0) continue; var metadata = records[ri].trim().split(","); var type = metadata[0], value = metadata[1]; ++ri; var data = records[ri].trim(); switch (+type) { case -1: if (data === "BOT") { arr[++R] = []; C = 0; continue } else if (data !== "EOD") throw new Error("Unrecognized DIF special command " + data); break; case 0: if (data === "TRUE") arr[R][C] = true; else if (data === "FALSE") arr[R][C] = false; else if (+value == +value) arr[R][C] = +value; else if (!isNaN(fuzzydate(value).getDate())) arr[R][C] = parseDate(value); else arr[R][C] = value; ++C; break; case 1: data = data.substr(1, data.length - 2); arr[R][C++] = data !== "" ? data : null; break; } if (data === "EOD") break } return arr } function dif_to_sheet(str, opts) { return aoa_to_sheet(dif_to_aoa(str, opts), opts) } function dif_to_workbook(str, opts) { return sheet_to_workbook(dif_to_sheet(str, opts), opts) } var sheet_to_dif = function () { var push_field = function pf(o, topic, v, n, s) { o.push(topic); o.push(v + "," + n); o.push('"' + s.replace(/"/g, '""') + '"') }; var push_value = function po(o, type, v, s) { o.push(type + "," + v); o.push(type == 1 ? '"' + s.replace(/"/g, '""') + '"' : s) }; return function sheet_to_dif(ws, opts) { var o = []; var r = decode_range(ws["!ref"]), cell; var dense = Array.isArray(ws); push_field(o, "TABLE", 0, 1, "sheetjs"); push_field(o, "VECTORS", 0, r.e.r - r.s.r + 1, ""); push_field(o, "TUPLES", 0, r.e.c - r.s.c + 1, ""); push_field(o, "DATA", 0, 0, ""); for (var R = r.s.r; R <= r.e.r; ++R) { push_value(o, -1, 0, "BOT"); for (var C = r.s.c; C <= r.e.c; ++C) { var coord = encode_cell({ r: R, c: C }); cell = dense ? (ws[R] || [])[C] : ws[coord]; if (!cell) { push_value(o, 1, 0, ""); continue } switch (cell.t) { case "n": var val = DIF_XL ? cell.w : cell.v; if (!val && cell.v != null) val = cell.v; if (val == null) { if (DIF_XL && cell.f && !cell.F) push_value(o, 1, 0, "=" + cell.f); else push_value(o, 1, 0, "") } else push_value(o, 0, val, "V"); break; case "b": push_value(o, 0, cell.v ? 1 : 0, cell.v ? "TRUE" : "FALSE"); break; case "s": push_value(o, 1, 0, !DIF_XL || isNaN(cell.v) ? cell.v : '="' + cell.v + '"'); break; case "d": if (!cell.w) cell.w = SSF.format(cell.z || SSF._table[14], datenum(parseDate(cell.v))); if (DIF_XL) push_value(o, 0, cell.w, "V"); else push_value(o, 1, 0, cell.w); break; default: push_value(o, 1, 0, ""); } } } push_value(o, -1, 0, "EOD"); var RS = "\r\n"; var oo = o.join(RS); return oo } }(); return { to_workbook: dif_to_workbook, to_sheet: dif_to_sheet, from_sheet: sheet_to_dif } }(); var PRN = function () { function set_text_arr(data, arr, R, C) { if (data === "TRUE") arr[R][C] = true; else if (data === "FALSE") arr[R][C] = false; else if (data === "") { } else if (+data == +data) arr[R][C] = +data; else if (!isNaN(fuzzydate(data).getDate())) arr[R][C] = parseDate(data); else arr[R][C] = data } function prn_to_aoa_str(f, opts) { var arr = []; if (!f || f.length === 0) return arr; var lines = f.split(/[\r\n]/); var L = lines.length - 1; while (L >= 0 && lines[L].length === 0)--L; var start = 10, idx = 0; var R = 0; for (; R <= L; ++R) { idx = lines[R].indexOf(" "); if (idx == -1) idx = lines[R].length; else idx++; start = Math.max(start, idx) } for (R = 0; R <= L; ++R) { arr[R] = []; var C = 0; set_text_arr(lines[R].slice(0, start).trim(), arr, R, C); for (C = 1; C <= (lines[R].length - start) / 10 + 1; ++C) set_text_arr(lines[R].slice(start + (C - 1) * 10, start + C * 10).trim(), arr, R, C) } return arr } function dsv_to_sheet_str(str, opts) { var o = opts || {}; var sep = ""; if (DENSE != null && o.dense == null) o.dense = DENSE; var ws = o.dense ? [] : {}; var range = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } }; if (str.substr(0, 4) == "sep=" && str.charCodeAt(5) == 10) { sep = str.charAt(4); str = str.substr(6) } else if (str.substr(0, 1024).indexOf("\t") == -1) sep = ","; else sep = "\t"; var R = 0, C = 0, v = 0; var start = 0, end = 0, sepcc = sep.charCodeAt(0), instr = false, cc = 0; str = str.replace(/\r\n/gm, "\n"); var _re = o.dateNF != null ? dateNF_regex(o.dateNF) : null; function finish_cell() { var s = str.slice(start, end); var cell = {}; if (o.raw) { cell.t = "s"; cell.v = s } else if (s.charCodeAt(0) == 61) { cell.t = "n"; cell.f = s.substr(1) } else if (s == "TRUE") { cell.t = "b"; cell.v = true } else if (s == "FALSE") { cell.t = "b"; cell.v = false } else if (!isNaN(v = +s)) { cell.t = "n"; cell.w = s; cell.v = v } else if (!isNaN(fuzzydate(s).getDate()) || _re && s.match(_re)) { cell.z = o.dateNF || SSF._table[14]; var k = 0; if (_re && s.match(_re)) { s = dateNF_fix(s, o.dateNF, s.match(_re) || []); k = 1 } if (o.cellDates) { cell.t = "d"; cell.v = parseDate(s, k) } else { cell.t = "n"; cell.v = datenum(parseDate(s, k)) } cell.w = SSF.format(cell.z, cell.v instanceof Date ? datenum(cell.v) : cell.v) } else { cell.t = "s"; if (s.charAt(0) == '"' && s.charAt(s.length - 1) == '"') s = s.slice(1, -1).replace(/""/g, '"'); cell.v = s } if (o.dense) { if (!ws[R]) ws[R] = []; ws[R][C] = cell } else ws[encode_cell({ c: C, r: R })] = cell; start = end + 1; if (range.e.c < C) range.e.c = C; if (range.e.r < R) range.e.r = R; if (cc == sepcc)++C; else { C = 0; ++R } } for (; end < str.length; ++end) switch (cc = str.charCodeAt(end)) { case 34: instr = !instr; break; case sepcc:; case 10:; case 13: if (!instr) finish_cell(); break; default: break; } if (end - start > 0) finish_cell(); ws["!ref"] = encode_range(range); return ws } function prn_to_sheet_str(str, opts) { if (str.substr(0, 4) == "sep=") return dsv_to_sheet_str(str, opts); if (str.indexOf("\t") >= 0 || str.indexOf(",") >= 0) return dsv_to_sheet_str(str, opts); return aoa_to_sheet(prn_to_aoa_str(str, opts), opts) } function prn_to_sheet(d, opts) { var str = "", bytes = firstbyte(d, opts); switch (opts.type) { case "base64": str = Base64.decode(d); break; case "binary": str = d; break; case "buffer": str = d.toString("binary"); break; case "array": str = cc2str(d); break; default: throw new Error("Unrecognized type " + opts.type); } if (bytes[0] == 239 && bytes[1] == 187 && bytes[2] == 191) str = utf8read(str); return prn_to_sheet_str(str, opts) } function prn_to_workbook(d, opts) { return sheet_to_workbook(prn_to_sheet(d, opts), opts) } function sheet_to_prn(ws, opts) { var o = []; var r = decode_range(ws["!ref"]), cell; var dense = Array.isArray(ws); for (var R = r.s.r; R <= r.e.r; ++R) { var oo = []; for (var C = r.s.c; C <= r.e.c; ++C) { var coord = encode_cell({ r: R, c: C }); cell = dense ? (ws[R] || [])[C] : ws[coord]; if (!cell || cell.v == null) { oo.push("          "); continue } var w = (cell.w || (format_cell(cell), cell.w) || "").substr(0, 10); while (w.length < 10) w += " "; oo.push(w + (C == 0 ? " " : "")) } o.push(oo.join("")) } return o.join("\n") } return { to_workbook: prn_to_workbook, to_sheet: prn_to_sheet, from_sheet: sheet_to_prn } }(); function read_wb_ID(d, opts) { var o = opts || {}, OLD_WTF = !!o.WTF; o.WTF = true; try { var out = SYLK.to_workbook(d, o); o.WTF = OLD_WTF; return out } catch (e) { o.WTF = OLD_WTF; if (!e.message.match(/SYLK bad record ID/) && OLD_WTF) throw e; return PRN.to_workbook(d, opts) } } var WK_ = function () { function lotushopper(data, cb, opts) { if (!data) return; prep_blob(data, data.l || 0); var Enum = opts.Enum || WK1Enum; while (data.l < data.length) { var RT = data.read_shift(2); var R = Enum[RT] || Enum[255]; var length = data.read_shift(2); var tgt = data.l + length; var d = R.f(data, length, opts); data.l = tgt; if (cb(d, R.n, RT)) return } } function lotus_to_workbook(d, opts) { switch (opts.type) { case "base64": return lotus_to_workbook_buf(s2a(Base64.decode(d)), opts); case "binary": return lotus_to_workbook_buf(s2a(d), opts); case "buffer":; case "array": return lotus_to_workbook_buf(d, opts); } throw "Unsupported type " + opts.type } function lotus_to_workbook_buf(d, opts) { if (!d) return d; var o = opts || {}; if (DENSE != null && o.dense == null) o.dense = DENSE; var s = o.dense ? [] : {}, n = "Sheet1", sidx = 0; var sheets = {}, snames = [n]; var refguess = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } }; if (d[2] == 2) o.Enum = WK1Enum; else if (d[2] == 26) o.Enum = WK3Enum; else if (d[2] == 14) { o.Enum = WK3Enum; o.qpro = true; d.l = 0 } else throw new Error("Unrecognized LOTUS BOF " + d[2]); lotushopper(d, function (val, Rn, RT) { if (d[2] == 2) switch (RT) { case 0: o.vers = val; if (val >= 4096) o.qpro = true; break; case 6: refguess = val; break; case 15: if (!o.qpro) val[1].v = val[1].v.substr(1); case 13:; case 14:; case 16:; case 51: if (RT == 14 && (val[2] & 112) == 112 && (val[2] & 15) > 1 && (val[2] & 15) < 15) { val[1].z = o.dateNF || SSF._table[14]; if (o.cellDates) { val[1].t = "d"; val[1].v = numdate(val[1].v) } } if (o.dense) { if (!s[val[0].r]) s[val[0].r] = []; s[val[0].r][val[0].c] = val[1] } else s[encode_cell(val[0])] = val[1]; break; } else switch (RT) { case 22: val[1].v = val[1].v.substr(1); case 23:; case 24:; case 25:; case 37:; case 39:; case 40: if (val[3] > sidx) { s["!ref"] = encode_range(refguess); sheets[n] = s; s = o.dense ? [] : {}; refguess = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } }; sidx = val[3]; n = "Sheet" + (sidx + 1); snames.push(n) } s[encode_cell(val[0])] = val[1]; if (refguess.e.c < val[0].c) refguess.e.c = val[0].c; if (refguess.e.r < val[0].r) refguess.e.r = val[0].r; break; default: break; } }, o); s["!ref"] = encode_range(refguess); sheets[n] = s; return { SheetNames: snames, Sheets: sheets } } function parse_RANGE(blob, length) { var o = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } }; o.s.c = blob.read_shift(2); o.s.r = blob.read_shift(2); o.e.c = blob.read_shift(2); o.e.r = blob.read_shift(2); if (o.s.c == 65535) o.s.c = o.e.c = o.s.r = o.e.r = 0; return o } function parse_cell(blob, length, opts) { var o = [{ c: 0, r: 0 }, { t: "n", v: 0 }, 0]; if (opts.qpro && opts.vers != 20768) { o[0].c = blob.read_shift(1); blob.l++; o[0].r = blob.read_shift(2); blob.l += 2 } else { o[2] = blob.read_shift(1); o[0].c = blob.read_shift(2); o[0].r = blob.read_shift(2) } return o } function parse_LABEL(blob, length, opts) { var tgt = blob.l + length; var o = parse_cell(blob, length, opts); o[1].t = "s"; if (opts.vers == 20768) { blob.l++; var len = blob.read_shift(1); o[1].v = blob.read_shift(len, "utf8"); return o } if (opts.qpro) blob.l++; o[1].v = blob.read_shift(tgt - blob.l, "cstr"); return o } function parse_INTEGER(blob, length, opts) { var o = parse_cell(blob, length, opts); o[1].v = blob.read_shift(2, "i"); return o } function parse_NUMBER(blob, length, opts) { var o = parse_cell(blob, length, opts); o[1].v = blob.read_shift(8, "f"); return o } function parse_FORMULA(blob, length, opts) { var tgt = blob.l + length; var o = parse_cell(blob, length, opts); o[1].v = blob.read_shift(8, "f"); if (opts.qpro) blob.l = tgt; else { var flen = blob.read_shift(2); blob.l += flen } return o } function parse_cell_3(blob, length) { var o = [{ c: 0, r: 0 }, { t: "n", v: 0 }, 0]; o[0].r = blob.read_shift(2); o[3] = blob[blob.l++]; o[0].c = blob[blob.l++]; return o } function parse_LABEL_16(blob, length) { var o = parse_cell_3(blob, length); o[1].t = "s"; o[1].v = blob.read_shift(length - 4, "cstr"); return o } function parse_NUMBER_18(blob, length) { var o = parse_cell_3(blob, length); o[1].v = blob.read_shift(2); var v = o[1].v >> 1; if (o[1].v & 1) { switch (v & 7) { case 1: v = (v >> 3) * 500; break; case 2: v = (v >> 3) / 20; break; case 4: v = (v >> 3) / 2e3; break; case 6: v = (v >> 3) / 16; break; case 7: v = (v >> 3) / 64; break; default: throw "unknown NUMBER_18 encoding " + (v & 7); } } o[1].v = v; return o } function parse_NUMBER_17(blob, length) { var o = parse_cell_3(blob, length); var v1 = blob.read_shift(4); var v2 = blob.read_shift(4); var e = blob.read_shift(2); if (e == 65535) { o[1].v = 0; return o } var s = e & 32768; e = (e & 32767) - 16446; o[1].v = (e > 0 ? v2 << e : v2 >>> -e) + (e > -32 ? v1 << e + 32 : v1 >>> -(e + 32)); return o } function parse_FORMULA_19(blob, length) { var o = parse_NUMBER_17(blob, 14); blob.l += length - 14; return o } function parse_NUMBER_25(blob, length) { var o = parse_cell_3(blob, length); var v1 = blob.read_shift(4); o[1].v = v1 >> 6; return o } function parse_NUMBER_27(blob, length) { var o = parse_cell_3(blob, length); var v1 = blob.read_shift(8, "f"); o[1].v = v1; return o } function parse_FORMULA_28(blob, length) { var o = parse_NUMBER_27(blob, 14); blob.l += length - 10; return o } var WK1Enum = { 0: { n: "BOF", f: parseuint16 }, 1: { n: "EOF", f: parsenoop }, 2: { n: "CALCMODE", f: parsenoop }, 3: { n: "CALCORDER", f: parsenoop }, 4: { n: "SPLIT", f: parsenoop }, 5: { n: "SYNC", f: parsenoop }, 6: { n: "RANGE", f: parse_RANGE }, 7: { n: "WINDOW1", f: parsenoop }, 8: { n: "COLW1", f: parsenoop }, 9: { n: "WINTWO", f: parsenoop }, 10: { n: "COLW2", f: parsenoop }, 11: { n: "NAME", f: parsenoop }, 12: { n: "BLANK", f: parsenoop }, 13: { n: "INTEGER", f: parse_INTEGER }, 14: { n: "NUMBER", f: parse_NUMBER }, 15: { n: "LABEL", f: parse_LABEL }, 16: { n: "FORMULA", f: parse_FORMULA }, 24: { n: "TABLE", f: parsenoop }, 25: { n: "ORANGE", f: parsenoop }, 26: { n: "PRANGE", f: parsenoop }, 27: { n: "SRANGE", f: parsenoop }, 28: { n: "FRANGE", f: parsenoop }, 29: { n: "KRANGE1", f: parsenoop }, 32: { n: "HRANGE", f: parsenoop }, 35: { n: "KRANGE2", f: parsenoop }, 36: { n: "PROTEC", f: parsenoop }, 37: { n: "FOOTER", f: parsenoop }, 38: { n: "HEADER", f: parsenoop }, 39: { n: "SETUP", f: parsenoop }, 40: { n: "MARGINS", f: parsenoop }, 41: { n: "LABELFMT", f: parsenoop }, 42: { n: "TITLES", f: parsenoop }, 43: { n: "SHEETJS", f: parsenoop }, 45: { n: "GRAPH", f: parsenoop }, 46: { n: "NGRAPH", f: parsenoop }, 47: { n: "CALCCOUNT", f: parsenoop }, 48: { n: "UNFORMATTED", f: parsenoop }, 49: { n: "CURSORW12", f: parsenoop }, 50: { n: "WINDOW", f: parsenoop }, 51: { n: "STRING", f: parse_LABEL }, 55: { n: "PASSWORD", f: parsenoop }, 56: { n: "LOCKED", f: parsenoop }, 60: { n: "QUERY", f: parsenoop }, 61: { n: "QUERYNAME", f: parsenoop }, 62: { n: "PRINT", f: parsenoop }, 63: { n: "PRINTNAME", f: parsenoop }, 64: { n: "GRAPH2", f: parsenoop }, 65: { n: "GRAPHNAME", f: parsenoop }, 66: { n: "ZOOM", f: parsenoop }, 67: { n: "SYMSPLIT", f: parsenoop }, 68: { n: "NSROWS", f: parsenoop }, 69: { n: "NSCOLS", f: parsenoop }, 70: { n: "RULER", f: parsenoop }, 71: { n: "NNAME", f: parsenoop }, 72: { n: "ACOMM", f: parsenoop }, 73: { n: "AMACRO", f: parsenoop }, 74: { n: "PARSE", f: parsenoop }, 255: { n: "", f: parsenoop } }; var WK3Enum = { 0: { n: "BOF", f: parsenoop }, 1: { n: "EOF", f: parsenoop }, 3: { n: "??", f: parsenoop }, 4: { n: "??", f: parsenoop }, 5: { n: "??", f: parsenoop }, 6: { n: "??", f: parsenoop }, 7: { n: "??", f: parsenoop }, 9: { n: "??", f: parsenoop }, 10: { n: "??", f: parsenoop }, 11: { n: "??", f: parsenoop }, 12: { n: "??", f: parsenoop }, 14: { n: "??", f: parsenoop }, 15: { n: "??", f: parsenoop }, 16: { n: "??", f: parsenoop }, 17: { n: "??", f: parsenoop }, 18: { n: "??", f: parsenoop }, 19: { n: "??", f: parsenoop }, 21: { n: "??", f: parsenoop }, 22: { n: "LABEL16", f: parse_LABEL_16 }, 23: { n: "NUMBER17", f: parse_NUMBER_17 }, 24: { n: "NUMBER18", f: parse_NUMBER_18 }, 25: { n: "FORMULA19", f: parse_FORMULA_19 }, 26: { n: "??", f: parsenoop }, 27: { n: "??", f: parsenoop }, 28: { n: "??", f: parsenoop }, 29: { n: "??", f: parsenoop }, 30: { n: "??", f: parsenoop }, 31: { n: "??", f: parsenoop }, 33: { n: "??", f: parsenoop }, 37: { n: "NUMBER25", f: parse_NUMBER_25 }, 39: { n: "NUMBER27", f: parse_NUMBER_27 }, 40: { n: "FORMULA28", f: parse_FORMULA_28 }, 255: { n: "", f: parsenoop } }; return { to_workbook: lotus_to_workbook } }(); var CS2CP = { 0: 1252, 1: 65001, 2: 65001, 77: 1e4, 128: 932, 129: 949, 130: 1361, 134: 936, 136: 950, 161: 1253, 162: 1254, 163: 1258, 177: 1255, 178: 1256, 186: 1257, 204: 1251, 222: 874, 238: 1250, 255: 1252, 69: 6969 }; var parse_rs = function parse_rs_factory() { var tregex = matchtag("t"), rpregex = matchtag("rPr"), rregex = /<(?:\w+:)?r>/g, rend = /<\/(?:\w+:)?r>/, nlregex = /\r\n/g; var parse_rpr = function parse_rpr(rpr, intro, outro) { var font = {}, cp = 65001, align = ""; var m = rpr.match(tagregex), i = 0; if (m) for (; i != m.length; ++i) { var y = parsexmltag(m[i]); switch (y[0].replace(/\w*:/g, "")) { case "<condense": break; case "<extend": break; case "<shadow": if (!y.val) break; case "<shadow>":; case "<shadow/>": font.shadow = 1; break; case "</shadow>": break; case "<charset": if (y.val == "1") break; cp = CS2CP[parseInt(y.val, 10)]; break; case "<outline": if (!y.val) break; case "<outline>":; case "<outline/>": font.outline = 1; break; case "</outline>": break; case "<rFont": font.name = y.val; break; case "<sz": font.sz = y.val; break; case "<strike": if (!y.val) break; case "<strike>":; case "<strike/>": font.strike = 1; break; case "</strike>": break; case "<u": if (!y.val) break; switch (y.val) { case "double": font.uval = "double"; break; case "singleAccounting": font.uval = "single-accounting"; break; case "doubleAccounting": font.uval = "double-accounting"; break; }; case "<u>":; case "<u/>": font.u = 1; break; case "</u>": break; case "<b": if (y.val == "0") break; case "<b>":; case "<b/>": font.b = 1; break; case "</b>": break; case "<i": if (y.val == "0") break; case "<i>":; case "<i/>": font.i = 1; break; case "</i>": break; case "<color": if (y.rgb) font.color = y.rgb.substr(2, 6); break; case "<family": font.family = y.val; break; case "<vertAlign": align = y.val; break; case "<scheme": break; default: if (y[0].charCodeAt(1) !== 47) throw "Unrecognized rich format " + y[0]; } } var style = []; if (font.u) style.push("text-decoration: underline;"); if (font.uval) style.push("text-underline-style:" + font.uval + ";"); if (font.sz) style.push("font-size:" + font.sz + ";"); if (font.outline) style.push("text-effect: outline;"); if (font.shadow) style.push("text-shadow: auto;"); intro.push('<span style="' + style.join("") + '">'); if (font.b) { intro.push("<b>"); outro.push("</b>") } if (font.i) { intro.push("<i>"); outro.push("</i>") } if (font.strike) { intro.push("<s>"); outro.push("</s>") } if (align == "superscript") align = "sup"; else if (align == "subscript") align = "sub"; if (align != "") { intro.push("<" + align + ">"); outro.push("</" + align + ">") } outro.push("</span>"); return cp }; function parse_r(r) { var terms = [[], "", []]; var t = r.match(tregex), cp = 65001; if (!isval(t)) return ""; terms[1] = t[1]; var rpr = r.match(rpregex); if (isval(rpr)) cp = parse_rpr(rpr[1], terms[0], terms[2]); return terms[0].join("") + terms[1].replace(nlregex, "<br/>") + terms[2].join("") } return function parse_rs(rs) { return rs.replace(rregex, "").split(rend).map(parse_r).join("") } }(); var sitregex = /<(?:\w+:)?t[^>]*>([^<]*)<\/(?:\w+:)?t>/g, sirregex = /<(?:\w+:)?r>/; var sirphregex = /<(?:\w+:)?rPh.*?>([\s\S]*?)<\/(?:\w+:)?rPh>/g; function parse_si(x, opts) { var html = opts ? opts.cellHTML : true; var z = {}; if (!x) return null; var y; if (x.match(/^\s*<(?:\w+:)?t[^>]*>/)) { z.t = utf8read(unescapexml(x.substr(x.indexOf(">") + 1).split(/<\/(?:\w+:)?t>/)[0])); z.r = utf8read(x); if (html) z.h = escapehtml(z.t) } else if (y = x.match(sirregex)) { z.r = utf8read(x); z.t = utf8read(unescapexml((x.replace(sirphregex, "").match(sitregex) || []).join("").replace(tagregex, ""))); if (html) z.h = parse_rs(z.r) } return z } var sstr0 = /<(?:\w+:)?sst([^>]*)>([\s\S]*)<\/(?:\w+:)?sst>/; var sstr1 = /<(?:\w+:)?(?:si|sstItem)>/g; var sstr2 = /<\/(?:\w+:)?(?:si|sstItem)>/; function parse_sst_xml(data, opts) { var s = [], ss = ""; if (!data) return s; var sst = data.match(sstr0); if (isval(sst)) { ss = sst[2].replace(sstr1, "").split(sstr2); for (var i = 0; i != ss.length; ++i) { var o = parse_si(ss[i].trim(), opts); if (o != null) s[s.length] = o } sst = parsexmltag(sst[1]); s.Count = sst.count; s.Unique = sst.uniqueCount } return s } RELS.SST = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings"; var straywsregex = /^\s|\s$|[\t\n\r]/; function write_sst_xml(sst, opts) { if (!opts.bookSST) return ""; var o = [XML_HEADER]; o[o.length] = writextag("sst", null, { xmlns: XMLNS.main[0], count: sst.Count, uniqueCount: sst.Unique }); for (var i = 0; i != sst.length; ++i) { if (sst[i] == null) continue; var s = sst[i]; var sitag = "<si>"; if (s.r) sitag += s.r; else { sitag += "<t"; if (!s.t) s.t = ""; if (s.t.match(straywsregex)) sitag += ' xml:space="preserve"'; sitag += ">" + escapexml(s.t) + "</t>" } sitag += "</si>"; o[o.length] = sitag } if (o.length > 2) { o[o.length] = "</sst>"; o[1] = o[1].replace("/>", ">") } return o.join("") } function parse_BrtBeginSst(data, length) { return [data.read_shift(4), data.read_shift(4)] } function parse_sst_bin(data, opts) { var s = []; var pass = false; recordhopper(data, function hopper_sst(val, R_n, RT) { switch (RT) { case 159: s.Count = val[0]; s.Unique = val[1]; break; case 19: s.push(val); break; case 160: return true; case 35: pass = true; break; case 36: pass = false; break; default: if (R_n.indexOf("Begin") > 0) { } else if (R_n.indexOf("End") > 0) { } if (!pass || opts.WTF) throw new Error("Unexpected record " + RT + " " + R_n); } }); return s } function write_BrtBeginSst(sst, o) { if (!o) o = new_buf(8); o.write_shift(4, sst.Count); o.write_shift(4, sst.Unique); return o } var write_BrtSSTItem = write_RichStr; function write_sst_bin(sst, opts) { var ba = buf_array(); write_record(ba, "BrtBeginSst", write_BrtBeginSst(sst)); for (var i = 0; i < sst.length; ++i) write_record(ba, "BrtSSTItem", write_BrtSSTItem(sst[i])); write_record(ba, "BrtEndSst"); return ba.end() } function _JS2ANSI(str) { if (typeof cptable !== "undefined") return cptable.utils.encode(1252, str); var o = [], oo = str.split(""); for (var i = 0; i < oo.length; ++i) o[i] = oo[i].charCodeAt(0); return o } function parse_CRYPTOVersion(blob, length) { var o = {}; o.Major = blob.read_shift(2); o.Minor = blob.read_shift(2); if (length >= 4) blob.l += length - 4; return o } function parse_DataSpaceVersionInfo(blob, length) { var o = {}; o.id = blob.read_shift(0, "lpp4"); o.R = parse_CRYPTOVersion(blob, 4); o.U = parse_CRYPTOVersion(blob, 4); o.W = parse_CRYPTOVersion(blob, 4); return o } function parse_DataSpaceMapEntry(blob) { var len = blob.read_shift(4); var end = blob.l + len - 4; var o = {}; var cnt = blob.read_shift(4); var comps = []; while (cnt-- > 0) { var rc = {}; rc.t = blob.read_shift(4); rc.v = blob.read_shift(0, "lpp4"); comps.push(rc) } o.name = blob.read_shift(0, "lpp4"); o.comps = comps; return o } function parse_DataSpaceMap(blob, length) { var o = []; blob.l += 4; var cnt = blob.read_shift(4); while (cnt-- > 0) o.push(parse_DataSpaceMapEntry(blob)); return o } function parse_DataSpaceDefinition(blob, length) { var o = []; blob.l += 4; var cnt = blob.read_shift(4); while (cnt-- > 0) o.push(blob.read_shift(0, "lpp4")); return o } function parse_TransformInfoHeader(blob, length) { var o = {}; var len = blob.read_shift(4); var tgt = blob.l + len - 4; blob.l += 4; o.id = blob.read_shift(0, "lpp4"); o.name = blob.read_shift(0, "lpp4"); o.R = parse_CRYPTOVersion(blob, 4); o.U = parse_CRYPTOVersion(blob, 4); o.W = parse_CRYPTOVersion(blob, 4); return o } function parse_Primary(blob, length) { var hdr = parse_TransformInfoHeader(blob); hdr.ename = blob.read_shift(0, "8lpp4"); hdr.blksz = blob.read_shift(4); hdr.cmode = blob.read_shift(4); if (blob.read_shift(4) != 4) throw new Error("Bad !Primary record"); return hdr } function parse_EncryptionHeader(blob, length) { var tgt = blob.l + length; var o = {}; o.Flags = blob.read_shift(4) & 63; blob.l += 4; o.AlgID = blob.read_shift(4); var valid = false; switch (o.AlgID) { case 26126:; case 26127:; case 26128: valid = o.Flags == 36; break; case 26625: valid = o.Flags == 4; break; case 0: valid = o.Flags == 16 || o.Flags == 4 || o.Flags == 36; break; default: throw "Unrecognized encryption algorithm: " + o.AlgID; } if (!valid) throw new Error("Encryption Flags/AlgID mismatch"); o.AlgIDHash = blob.read_shift(4); o.KeySize = blob.read_shift(4); o.ProviderType = blob.read_shift(4); blob.l += 8; o.CSPName = blob.read_shift(tgt - blob.l >> 1, "utf16le").slice(0, -1); blob.l = tgt; return o } function parse_EncryptionVerifier(blob, length) { var o = {}; blob.l += 4; o.Salt = blob.slice(blob.l, blob.l + 16); blob.l += 16; o.Verifier = blob.slice(blob.l, blob.l + 16); blob.l += 16; var sz = blob.read_shift(4); o.VerifierHash = blob.slice(blob.l, blob.l + sz); blob.l += sz; return o } function parse_EncryptionInfo(blob, length) { var vers = parse_CRYPTOVersion(blob); switch (vers.Minor) { case 2: return parse_EncInfoStd(blob, vers); case 3: return parse_EncInfoExt(blob, vers); case 4: return parse_EncInfoAgl(blob, vers); } throw new Error("ECMA-376 Encryped file unrecognized Version: " + vers.Minor) } function parse_EncInfoStd(blob, vers) { var flags = blob.read_shift(4); if ((flags & 63) != 36) throw new Error("EncryptionInfo mismatch"); var sz = blob.read_shift(4); var tgt = blob.l + sz; var hdr = parse_EncryptionHeader(blob, sz); var verifier = parse_EncryptionVerifier(blob, blob.length - blob.l); return { t: "Std", h: hdr, v: verifier } } function parse_EncInfoExt(blob, vers) { throw new Error("File is password-protected: ECMA-376 Extensible") } function parse_EncInfoAgl(blob, vers) { throw new Error("File is password-protected: ECMA-376 Agile") } function parse_RC4CryptoHeader(blob, length) { var o = {}; var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4); length -= 4; if (vers.Minor != 2) throw "unrecognized minor version code: " + vers.Minor; if (vers.Major > 4 || vers.Major < 2) throw "unrecognized major version code: " + vers.Major; o.Flags = blob.read_shift(4); length -= 4; var sz = blob.read_shift(4); length -= 4; o.EncryptionHeader = parse_EncryptionHeader(blob, sz); length -= sz; o.EncryptionVerifier = parse_EncryptionVerifier(blob, length); return o } function parse_RC4Header(blob, length) { var o = {}; var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4); length -= 4; if (vers.Major != 1 || vers.Minor != 1) throw "unrecognized version code " + vers.Major + " : " + vers.Minor; o.Salt = blob.read_shift(16); o.EncryptedVerifier = blob.read_shift(16); o.EncryptedVerifierHash = blob.read_shift(16); return o } function crypto_CreatePasswordVerifier_Method1(Password) { var Verifier = 0, PasswordArray; var PasswordDecoded = _JS2ANSI(Password); var len = PasswordDecoded.length + 1, i, PasswordByte; var Intermediate1, Intermediate2, Intermediate3; PasswordArray = new_raw_buf(len); PasswordArray[0] = PasswordDecoded.length; for (i = 1; i != len; ++i) PasswordArray[i] = PasswordDecoded[i - 1]; for (i = len - 1; i >= 0; --i) { PasswordByte = PasswordArray[i]; Intermediate1 = (Verifier & 16384) === 0 ? 0 : 1; Intermediate2 = Verifier << 1 & 32767; Intermediate3 = Intermediate1 | Intermediate2; Verifier = Intermediate3 ^ PasswordByte } return Verifier ^ 52811 } var crypto_CreateXorArray_Method1 = function () {
        var PadArray = [187, 255, 255, 186, 255, 255, 185, 128, 0, 190, 15, 0, 191, 15, 0]; var InitialCode = [57840, 7439, 52380, 33984, 4364, 3600, 61902, 12606, 6258, 57657, 54287, 34041, 10252, 43370, 20163]; var XorMatrix = [44796, 19929, 39858, 10053, 20106, 40212, 10761, 31585, 63170, 64933, 60267, 50935, 40399, 11199, 17763, 35526, 1453, 2906, 5812, 11624, 23248, 885, 1770, 3540, 7080, 14160, 28320, 56640, 55369, 41139, 20807, 41614, 21821, 43642, 17621, 28485, 56970, 44341, 19019, 38038, 14605, 29210, 60195, 50791, 40175, 10751, 21502, 43004, 24537, 18387, 36774, 3949, 7898, 15796, 31592, 63184, 47201, 24803, 49606, 37805, 14203, 28406, 56812, 17824, 35648, 1697, 3394, 6788, 13576, 27152, 43601, 17539, 35078, 557, 1114, 2228, 4456, 30388, 60776, 51953, 34243, 7079, 14158, 28316, 14128, 28256, 56512, 43425, 17251, 34502, 7597, 13105, 26210, 52420, 35241, 883, 1766, 3532, 4129, 8258, 16516, 33032, 4657, 9314, 18628]; var Ror = function (Byte) { return (Byte / 2 | Byte * 128) & 255 }; var XorRor = function (byte1, byte2) { return Ror(byte1 ^ byte2) }; var CreateXorKey_Method1 = function (Password) { var XorKey = InitialCode[Password.length - 1]; var CurrentElement = 104; for (var i = Password.length - 1; i >= 0; --i) { var Char = Password[i]; for (var j = 0; j != 7; ++j) { if (Char & 64) XorKey ^= XorMatrix[CurrentElement]; Char *= 2; --CurrentElement } } return XorKey }; return function (password) {
            var Password = _JS2ANSI(password); var XorKey = CreateXorKey_Method1(Password); var Index = Password.length; var ObfuscationArray = new_raw_buf(16); for (var i = 0; i != 16; ++i) ObfuscationArray[i] = 0; var Temp, PasswordLastChar, PadIndex; if ((Index & 1) === 1) { Temp = XorKey >> 8; ObfuscationArray[Index] = XorRor(PadArray[0], Temp); --Index; Temp = XorKey & 255; PasswordLastChar = Password[Password.length - 1]; ObfuscationArray[Index] = XorRor(PasswordLastChar, Temp) } while (Index > 0) {
                --Index; Temp = XorKey >> 8; ObfuscationArray[Index] = XorRor(Password[Index], Temp);
                --Index; Temp = XorKey & 255; ObfuscationArray[Index] = XorRor(Password[Index], Temp)
            } Index = 15; PadIndex = 15 - Password.length; while (PadIndex > 0) { Temp = XorKey >> 8; ObfuscationArray[Index] = XorRor(PadArray[PadIndex], Temp); --Index; --PadIndex; Temp = XorKey & 255; ObfuscationArray[Index] = XorRor(Password[Index], Temp); --Index; --PadIndex } return ObfuscationArray
        }
    }(); var crypto_DecryptData_Method1 = function (password, Data, XorArrayIndex, XorArray, O) { if (!O) O = Data; if (!XorArray) XorArray = crypto_CreateXorArray_Method1(password); var Index, Value; for (Index = 0; Index != Data.length; ++Index) { Value = Data[Index]; Value ^= XorArray[XorArrayIndex]; Value = (Value >> 5 | Value << 3) & 255; O[Index] = Value; ++XorArrayIndex } return [O, XorArrayIndex, XorArray] }; var crypto_MakeXorDecryptor = function (password) { var XorArrayIndex = 0, XorArray = crypto_CreateXorArray_Method1(password); return function (Data) { var O = crypto_DecryptData_Method1("", Data, XorArrayIndex, XorArray); XorArrayIndex = O[1]; return O[0] } }; function parse_XORObfuscation(blob, length, opts, out) { var o = { key: parseuint16(blob), verificationBytes: parseuint16(blob) }; if (opts.password) o.verifier = crypto_CreatePasswordVerifier_Method1(opts.password); out.valid = o.verificationBytes === o.verifier; if (out.valid) out.insitu_decrypt = crypto_MakeXorDecryptor(opts.password); return o } function parse_FilePassHeader(blob, length, oo) { var o = oo || {}; o.Info = blob.read_shift(2); blob.l -= 2; if (o.Info === 1) o.Data = parse_RC4Header(blob, length); else o.Data = parse_RC4CryptoHeader(blob, length); return o } function parse_FilePass(blob, length, opts) { var o = { Type: blob.read_shift(2) }; if (o.Type) parse_FilePassHeader(blob, length - 2, o); else parse_XORObfuscation(blob, length - 2, opts, o); return o } function hex2RGB(h) { var o = h.substr(h[0] === "#" ? 1 : 0, 6); return [parseInt(o.substr(0, 2), 16), parseInt(o.substr(2, 2), 16), parseInt(o.substr(4, 2), 16)] } function rgb2Hex(rgb) { for (var i = 0, o = 1; i != 3; ++i) o = o * 256 + (rgb[i] > 255 ? 255 : rgb[i] < 0 ? 0 : rgb[i]); return o.toString(16).toUpperCase().substr(1) } function rgb2HSL(rgb) { var R = rgb[0] / 255, G = rgb[1] / 255, B = rgb[2] / 255; var M = Math.max(R, G, B), m = Math.min(R, G, B), C = M - m; if (C === 0) return [0, 0, R]; var H6 = 0, S = 0, L2 = M + m; S = C / (L2 > 1 ? 2 - L2 : L2); switch (M) { case R: H6 = ((G - B) / C + 6) % 6; break; case G: H6 = (B - R) / C + 2; break; case B: H6 = (R - G) / C + 4; break; } return [H6 / 6, S, L2 / 2] } function hsl2RGB(hsl) { var H = hsl[0], S = hsl[1], L = hsl[2]; var C = S * 2 * (L < .5 ? L : 1 - L), m = L - C / 2; var rgb = [m, m, m], h6 = 6 * H; var X; if (S !== 0) switch (h6 | 0) { case 0:; case 6: X = C * h6; rgb[0] += C; rgb[1] += X; break; case 1: X = C * (2 - h6); rgb[0] += X; rgb[1] += C; break; case 2: X = C * (h6 - 2); rgb[1] += C; rgb[2] += X; break; case 3: X = C * (4 - h6); rgb[1] += X; rgb[2] += C; break; case 4: X = C * (h6 - 4); rgb[2] += C; rgb[0] += X; break; case 5: X = C * (6 - h6); rgb[2] += X; rgb[0] += C; break; } for (var i = 0; i != 3; ++i) rgb[i] = Math.round(rgb[i] * 255); return rgb } function rgb_tint(hex, tint) { if (tint === 0) return hex; var hsl = rgb2HSL(hex2RGB(hex)); if (tint < 0) hsl[2] = hsl[2] * (1 + tint); else hsl[2] = 1 - (1 - hsl[2]) * (1 - tint); return rgb2Hex(hsl2RGB(hsl)) } var DEF_MDW = 6, MAX_MDW = 15, MIN_MDW = 1, MDW = DEF_MDW; function width2px(width) { return Math.floor((width + Math.round(128 / MDW) / 256) * MDW) } function px2char(px) { return Math.floor((px - 5) / MDW * 100 + .5) / 100 } function char2width(chr) { return Math.round((chr * MDW + 5) / MDW * 256) / 256 } function px2char_(px) { return ((px - 5) / MDW * 100 + .5) / 100 } function char2width_(chr) { return (chr * MDW + 5) / MDW * 256 / 256 } function cycle_width(collw) { return char2width(px2char(width2px(collw))) } function find_mdw_colw(collw) { var delta = Math.abs(collw - cycle_width(collw)), _MDW = MDW; if (delta > .005) for (MDW = MIN_MDW; MDW < MAX_MDW; ++MDW) if (Math.abs(collw - cycle_width(collw)) <= delta) { delta = Math.abs(collw - cycle_width(collw)); _MDW = MDW } MDW = _MDW } function find_mdw_wpx(wpx) { var delta = Infinity, guess = 0, _MDW = MIN_MDW; for (MDW = MIN_MDW; MDW < MAX_MDW; ++MDW) { guess = char2width_(px2char_(wpx)) * 256; guess = guess % 1; if (guess > .5) guess--; if (Math.abs(guess) < delta) { delta = Math.abs(guess); _MDW = MDW } } MDW = _MDW } function process_col(coll) { if (coll.width) { coll.wpx = width2px(coll.width); coll.wch = px2char(coll.wpx); coll.MDW = MDW } else if (coll.wpx) { coll.wch = px2char(coll.wpx); coll.width = char2width(coll.wch); coll.MDW = MDW } else if (typeof coll.wch == "number") { coll.width = char2width(coll.wch); coll.wpx = width2px(coll.width); coll.MDW = MDW } if (coll.customWidth) delete coll.customWidth } var DEF_PPI = 96, PPI = DEF_PPI; function px2pt(px) { return px * 96 / PPI } function pt2px(pt) { return pt * PPI / 96 } var XLMLPatternTypeMap = { None: "none", Solid: "solid", Gray50: "mediumGray", Gray75: "darkGray", Gray25: "lightGray", HorzStripe: "darkHorizontal", VertStripe: "darkVertical", ReverseDiagStripe: "darkDown", DiagStripe: "darkUp", DiagCross: "darkGrid", ThickDiagCross: "darkTrellis", ThinHorzStripe: "lightHorizontal", ThinVertStripe: "lightVertical", ThinReverseDiagStripe: "lightDown", ThinHorzCross: "lightGrid" }; function parse_borders(t, styles, themes, opts) { styles.Borders = []; var border = {}, sub_border = {}; t[0].match(tagregex).forEach(function (x) { var y = parsexmltag(x); switch (y[0]) { case "<borders":; case "<borders>":; case "</borders>": break; case "<border":; case "<border>": border = {}; if (y.diagonalUp) { border.diagonalUp = y.diagonalUp } if (y.diagonalDown) { border.diagonalDown = y.diagonalDown } styles.Borders.push(border); break; case "</border>": break; case "<left/>": break; case "<left":; case "<left>": break; case "</left>": break; case "<right/>": break; case "<right":; case "<right>": break; case "</right>": break; case "<top/>": break; case "<top":; case "<top>": break; case "</top>": break; case "<bottom/>": break; case "<bottom":; case "<bottom>": break; case "</bottom>": break; case "<diagonal":; case "<diagonal>":; case "<diagonal/>": break; case "</diagonal>": break; case "<horizontal":; case "<horizontal>":; case "<horizontal/>": break; case "</horizontal>": break; case "<vertical":; case "<vertical>":; case "<vertical/>": break; case "</vertical>": break; case "<start":; case "<start>":; case "<start/>": break; case "</start>": break; case "<end":; case "<end>":; case "<end/>": break; case "</end>": break; case "<color":; case "<color>": break; case "<color/>":; case "</color>": break; default: if (opts && opts.WTF) throw new Error("unrecognized " + y[0] + " in borders"); } }) } function parse_fills(t, styles, themes, opts) { styles.Fills = []; var fill = {}; t[0].match(tagregex).forEach(function (x) { var y = parsexmltag(x); switch (y[0]) { case "<fills":; case "<fills>":; case "</fills>": break; case "<fill>":; case "<fill": break; case "</fill>": styles.Fills.push(fill); fill = {}; break; case "<gradientFill>": break; case "</gradientFill>": styles.Fills.push(fill); fill = {}; break; case "<patternFill":; case "<patternFill>": if (y.patternType) fill.patternType = y.patternType; break; case "<patternFill/>":; case "</patternFill>": break; case "<bgColor": if (!fill.bgColor) fill.bgColor = {}; if (y.indexed) fill.bgColor.indexed = parseInt(y.indexed, 10); if (y.theme) fill.bgColor.theme = parseInt(y.theme, 10); if (y.tint) fill.bgColor.tint = parseFloat(y.tint); if (y.rgb) fill.bgColor.rgb = y.rgb.slice(-6); break; case "<bgColor/>":; case "</bgColor>": break; case "<fgColor": if (!fill.fgColor) fill.fgColor = {}; if (y.theme) fill.fgColor.theme = parseInt(y.theme, 10); if (y.tint) fill.fgColor.tint = parseFloat(y.tint); if (y.rgb) fill.fgColor.rgb = y.rgb.slice(-6); break; case "<fgColor/>":; case "</fgColor>": break; case "<stop":; case "<stop/>": break; case "</stop>": break; case "<color":; case "<color/>": break; case "</color>": break; default: if (opts && opts.WTF) throw new Error("unrecognized " + y[0] + " in fills"); } }) } function parse_fonts(t, styles, themes, opts) { styles.Fonts = []; var font = {}; t[0].match(tagregex).forEach(function (x) { var y = parsexmltag(x); switch (y[0]) { case "<fonts":; case "<fonts>":; case "</fonts>": break; case "<font":; case "<font>": break; case "</font>":; case "<font/>": styles.Fonts.push(font); font = {}; break; case "<name": if (y.val) font.name = y.val; break; case "<name/>":; case "</name>": break; case "<b": font.bold = y.val ? parsexmlbool(y.val) : 1; break; case "<b/>": font.bold = 1; break; case "<i": font.italic = y.val ? parsexmlbool(y.val) : 1; break; case "<i/>": font.italic = 1; break; case "<u": switch (y.val) { case "none": font.underline = 0; break; case "single": font.underline = 1; break; case "double": font.underline = 2; break; case "singleAccounting": font.underline = 33; break; case "doubleAccounting": font.underline = 34; break; } break; case "<u/>": font.underline = 1; break; case "<strike": font.strike = y.val ? parsexmlbool(y.val) : 1; break; case "<strike/>": font.strike = 1; break; case "<outline": font.outline = y.val ? parsexmlbool(y.val) : 1; break; case "<outline/>": font.outline = 1; break; case "<shadow": font.shadow = y.val ? parsexmlbool(y.val) : 1; break; case "<shadow/>": font.shadow = 1; break; case "<condense": font.condense = y.val ? parsexmlbool(y.val) : 1; break; case "<condense/>": font.condense = 1; break; case "<extend": font.extend = y.val ? parsexmlbool(y.val) : 1; break; case "<extend/>": font.extend = 1; break; case "<sz": if (y.val) font.sz = +y.val; break; case "<sz/>":; case "</sz>": break; case "<vertAlign": if (y.val) font.vertAlign = y.val; break; case "<vertAlign/>":; case "</vertAlign>": break; case "<family": if (y.val) font.family = parseInt(y.val, 10); break; case "<family/>":; case "</family>": break; case "<scheme": if (y.val) font.scheme = y.val; break; case "<scheme/>":; case "</scheme>": break; case "<charset": if (y.val == "1") break; y.codepage = CS2CP[parseInt(y.val, 10)]; break; case "<color": if (!font.color) font.color = {}; if (y.auto) font.color.auto = parsexmlbool(y.auto); if (y.rgb) font.color.rgb = y.rgb.slice(-6); else if (y.indexed) { font.color.index = parseInt(y.indexed, 10); var icv = XLSIcv[font.color.index]; if (font.color.index == 81) icv = XLSIcv[1]; if (!icv) throw new Error(x); font.color.rgb = icv[0].toString(16) + icv[1].toString(16) + icv[2].toString(16) } else if (y.theme) { font.color.theme = parseInt(y.theme, 10); if (y.tint) font.color.tint = parseFloat(y.tint); if (y.theme && themes.themeElements && themes.themeElements.clrScheme) { font.color.rgb = rgb_tint(themes.themeElements.clrScheme[font.color.theme].rgb, font.color.tint || 0) } } break; case "<color/>":; case "</color>": break; default: if (opts && opts.WTF) throw new Error("unrecognized " + y[0] + " in fonts"); } }) } function parse_numFmts(t, styles, opts) { styles.NumberFmt = []; var k = keys(SSF._table); for (var i = 0; i < k.length; ++i) styles.NumberFmt[k[i]] = SSF._table[k[i]]; var m = t[0].match(tagregex); if (!m) return; for (i = 0; i < m.length; ++i) { var y = parsexmltag(m[i]); switch (y[0]) { case "<numFmts":; case "</numFmts>":; case "<numFmts/>":; case "<numFmts>": break; case "<numFmt": { var f = unescapexml(utf8read(y.formatCode)), j = parseInt(y.numFmtId, 10); styles.NumberFmt[j] = f; if (j > 0) { if (j > 392) { for (j = 392; j > 60; --j) if (styles.NumberFmt[j] == null) break; styles.NumberFmt[j] = f } SSF.load(f, j) } } break; case "</numFmt>": break; default: if (opts.WTF) throw new Error("unrecognized " + y[0] + " in numFmts"); } } } function write_numFmts(NF, opts) { var o = ["<numFmts>"];[[5, 8], [23, 26], [41, 44], [50, 392]].forEach(function (r) { for (var i = r[0]; i <= r[1]; ++i) if (NF[i] != null) o[o.length] = writextag("numFmt", null, { numFmtId: i, formatCode: escapexml(NF[i]) }) }); if (o.length === 1) return ""; o[o.length] = "</numFmts>"; o[0] = writextag("numFmts", null, { count: o.length - 2 }).replace("/>", ">"); return o.join("") } var cellXF_uint = ["numFmtId", "fillId", "fontId", "borderId", "xfId"]; var cellXF_bool = ["applyAlignment", "applyBorder", "applyFill", "applyFont", "applyNumberFormat", "applyProtection", "pivotButton", "quotePrefix"]; function parse_cellXfs(t, styles, opts) { styles.CellXf = []; var xf; t[0].match(tagregex).forEach(function (x) { var y = parsexmltag(x), i = 0; switch (y[0]) { case "<cellXfs":; case "<cellXfs>":; case "<cellXfs/>":; case "</cellXfs>": break; case "<xf":; case "<xf/>": xf = y; delete xf[0]; for (i = 0; i < cellXF_uint.length; ++i) if (xf[cellXF_uint[i]]) xf[cellXF_uint[i]] = parseInt(xf[cellXF_uint[i]], 10); for (i = 0; i < cellXF_bool.length; ++i) if (xf[cellXF_bool[i]]) xf[cellXF_bool[i]] = parsexmlbool(xf[cellXF_bool[i]], ""); if (xf.numFmtId > 392) { for (i = 392; i > 60; --i) if (styles.NumberFmt[xf.numFmtId] == styles.NumberFmt[i]) { xf.numFmtId = i; break } } styles.CellXf.push(xf); break; case "</xf>": break; case "<alignment":; case "<alignment/>": var alignment = {}; if (y.vertical) alignment.vertical = y.vertical; if (y.horizontal) alignment.horizontal = y.horizontal; if (y.textRotation != null) alignment.textRotation = y.textRotation; if (y.indent) alignment.indent = y.indent; if (y.wrapText) alignment.wrapText = y.wrapText; xf.alignment = alignment; break; case "</alignment>": break; case "<protection":; case "</protection>":; case "<protection/>": break; case "<extLst":; case "</extLst>": break; case "<ext": break; default: if (opts.WTF) throw new Error("unrecognized " + y[0] + " in cellXfs"); } }) } function write_cellXfs(cellXfs) { var o = []; o[o.length] = writextag("cellXfs", null); cellXfs.forEach(function (c) { o[o.length] = writextag("xf", null, c) }); o[o.length] = "</cellXfs>"; if (o.length === 2) return ""; o[0] = writextag("cellXfs", null, { count: o.length - 2 }).replace("/>", ">"); return o.join("") } var parse_sty_xml = function make_pstyx() { var numFmtRegex = /<numFmts([^>]*)>[\S\s]*?<\/numFmts>/; var cellXfRegex = /<cellXfs([^>]*)>[\S\s]*?<\/cellXfs>/; var fillsRegex = /<fills([^>]*)>[\S\s]*?<\/fills>/; var fontsRegex = /<fonts([^>]*)>[\S\s]*?<\/fonts>/; var bordersRegex = /<borders([^>]*)>[\S\s]*?<\/borders>/; return function parse_sty_xml(data, themes, opts) { var styles = {}; if (!data) return styles; data = data.replace(/<!--([\s\S]*?)-->/gm, "").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm, ""); var t; if (t = data.match(numFmtRegex)) parse_numFmts(t, styles, opts); if (t = data.match(fontsRegex)) parse_fonts(t, styles, themes, opts); if (t = data.match(fillsRegex)) parse_fills(t, styles, themes, opts); if (t = data.match(bordersRegex)) parse_borders(t, styles, themes, opts); if (t = data.match(cellXfRegex)) parse_cellXfs(t, styles, opts); return styles } }(); var STYLES_XML_ROOT = writextag("styleSheet", null, { xmlns: XMLNS.main[0], "xmlns:vt": XMLNS.vt }); RELS.STY = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles"; function write_sty_xml(wb, opts) { var o = [XML_HEADER, STYLES_XML_ROOT], w; if (wb.SSF && (w = write_numFmts(wb.SSF)) != null) o[o.length] = w; o[o.length] = '<fonts count="1"><font><sz val="12"/><color theme="1"/><name val="Calibri"/><family val="2"/><scheme val="minor"/></font></fonts>'; o[o.length] = '<fills count="2"><fill><patternFill patternType="none"/></fill><fill><patternFill patternType="gray125"/></fill></fills>'; o[o.length] = '<borders count="1"><border><left/><right/><top/><bottom/><diagonal/></border></borders>'; o[o.length] = '<cellStyleXfs count="1"><xf numFmtId="0" fontId="0" fillId="0" borderId="0"/></cellStyleXfs>'; if (w = write_cellXfs(opts.cellXfs)) o[o.length] = w; o[o.length] = '<cellStyles count="1"><cellStyle name="Normal" xfId="0" builtinId="0"/></cellStyles>'; o[o.length] = '<dxfs count="0"/>'; o[o.length] = '<tableStyles count="0" defaultTableStyle="TableStyleMedium9" defaultPivotStyle="PivotStyleMedium4"/>'; if (o.length > 2) { o[o.length] = "</styleSheet>"; o[1] = o[1].replace("/>", ">") } return o.join("") } function parse_BrtFmt(data, length) { var ifmt = data.read_shift(2); var stFmtCode = parse_XLWideString(data, length - 2); return [ifmt, stFmtCode] } function write_BrtFmt(i, f, o) { if (!o) o = new_buf(6 + 4 * f.length); o.write_shift(2, i); write_XLWideString(f, o); return o.length > o.l ? o.slice(0, o.l) : o } function parse_BrtFont(data, length, opts) { var out = {}; out.sz = data.read_shift(2) / 20; var grbit = parse_FontFlags(data, 2, opts); if (grbit.fCondense) out.condense = 1; if (grbit.fExtend) out.extend = 1; if (grbit.fShadow) out.shadow = 1; if (grbit.fOutline) out.outline = 1; if (grbit.fStrikeout) out.strike = 1; if (grbit.fItalic) out.italic = 1; var bls = data.read_shift(2); if (bls === 700) out.bold = 1; switch (data.read_shift(2)) { case 1: out.vertAlign = "superscript"; break; case 2: out.vertAlign = "subscript"; break; } var underline = data.read_shift(1); if (underline != 0) out.underline = underline; var family = data.read_shift(1); if (family > 0) out.family = family; var bCharSet = data.read_shift(1); if (bCharSet > 0) out.charset = bCharSet; data.l++; out.color = parse_BrtColor(data, 8); switch (data.read_shift(1)) { case 1: out.scheme = "major"; break; case 2: out.scheme = "minor"; break; } out.name = parse_XLWideString(data, length - 21); return out } function write_BrtFont(font, o) { if (!o) o = new_buf(25 + 4 * 32); o.write_shift(2, font.sz * 20); write_FontFlags(font, o); o.write_shift(2, font.bold ? 700 : 400); var sss = 0; if (font.vertAlign == "superscript") sss = 1; else if (font.vertAlign == "subscript") sss = 2; o.write_shift(2, sss); o.write_shift(1, font.underline || 0); o.write_shift(1, font.family || 0); o.write_shift(1, font.charset || 0); o.write_shift(1, 0); write_BrtColor(font.color, o); var scheme = 0; if (font.scheme == "major") scheme = 1; if (font.scheme == "minor") scheme = 2; o.write_shift(1, scheme); write_XLWideString(font.name, o); return o.length > o.l ? o.slice(0, o.l) : o } var XLSBFillPTNames = ["none", "solid", "mediumGray", "darkGray", "lightGray", "darkHorizontal", "darkVertical", "darkDown", "darkUp", "darkGrid", "darkTrellis", "lightHorizontal", "lightVertical", "lightDown", "lightUp", "lightGrid", "lightTrellis", "gray125", "gray0625"]; var rev_XLSBFillPTNames = evert(XLSBFillPTNames); function write_BrtFill(fill, o) { if (!o) o = new_buf(4 * 3 + 8 * 7 + 16 * 1); var fls = rev_XLSBFillPTNames[fill.patternType]; if (fls == null) fls = 40; o.write_shift(4, fls); var j = 0; if (fls != 40) { write_BrtColor({ auto: 1 }, o); write_BrtColor({ auto: 1 }, o); for (; j < 12; ++j) o.write_shift(4, 0) } else { for (; j < 4; ++j) o.write_shift(4, 0); for (; j < 12; ++j) o.write_shift(4, 0) } return o.length > o.l ? o.slice(0, o.l) : o } function parse_BrtXF(data, length) { var ixfeParent = data.read_shift(2); var ifmt = data.read_shift(2); parsenoop(data, length - 4); return { ixfe: ixfeParent, ifmt: ifmt } } function write_BrtXF(data, ixfeP, o) { if (!o) o = new_buf(16); o.write_shift(2, ixfeP || 0); o.write_shift(2, data.numFmtId || 0); o.write_shift(2, 0); o.write_shift(2, 0); o.write_shift(2, 0); o.write_shift(1, 0); o.write_shift(1, 0); o.write_shift(1, 0); o.write_shift(1, 0); o.write_shift(1, 0); o.write_shift(1, 0); return o } function write_Blxf(data, o) { if (!o) o = new_buf(10); o.write_shift(1, 0); o.write_shift(1, 0); o.write_shift(4, 0); o.write_shift(4, 0); return o } function write_BrtBorder(border, o) { if (!o) o = new_buf(51); o.write_shift(1, 0); write_Blxf(null, o); write_Blxf(null, o); write_Blxf(null, o); write_Blxf(null, o); write_Blxf(null, o); return o.length > o.l ? o.slice(0, o.l) : o } function write_BrtStyle(style, o) { if (!o) o = new_buf(12 + 4 * 10); o.write_shift(4, style.xfId); o.write_shift(2, 1); o.write_shift(1, +style.builtinId); o.write_shift(1, 0); write_XLNullableWideString(style.name || "", o); return o.length > o.l ? o.slice(0, o.l) : o } function write_BrtBeginTableStyles(cnt, defTableStyle, defPivotStyle) { var o = new_buf(4 + 256 * 2 * 4); o.write_shift(4, cnt); write_XLNullableWideString(defTableStyle, o); write_XLNullableWideString(defPivotStyle, o); return o.length > o.l ? o.slice(0, o.l) : o } function parse_sty_bin(data, themes, opts) { var styles = {}; styles.NumberFmt = []; for (var y in SSF._table) styles.NumberFmt[y] = SSF._table[y]; styles.CellXf = []; styles.Fonts = []; var state = []; var pass = false; recordhopper(data, function hopper_sty(val, R_n, RT) { switch (RT) { case 44: styles.NumberFmt[val[0]] = val[1]; SSF.load(val[1], val[0]); break; case 43: styles.Fonts.push(val); if (val.color.theme != null && themes && themes.themeElements && themes.themeElements.clrScheme) { val.color.rgb = rgb_tint(themes.themeElements.clrScheme[val.color.theme].rgb, val.color.tint || 0) } break; case 1025: break; case 45: break; case 46: break; case 47: if (state[state.length - 1] == "BrtBeginCellXFs") { styles.CellXf.push(val) } break; case 48:; case 507:; case 572:; case 475: break; case 1171:; case 2102:; case 1130:; case 512:; case 2095: break; case 35: pass = true; break; case 36: pass = false; break; case 37: state.push(R_n); break; case 38: state.pop(); break; default: if ((R_n || "").indexOf("Begin") > 0) state.push(R_n); else if ((R_n || "").indexOf("End") > 0) state.pop(); else if (!pass || opts.WTF) throw new Error("Unexpected record " + RT + " " + R_n); } }); return styles } function write_FMTS_bin(ba, NF) { if (!NF) return; var cnt = 0;[[5, 8], [23, 26], [41, 44], [50, 392]].forEach(function (r) { for (var i = r[0]; i <= r[1]; ++i) if (NF[i] != null)++cnt }); if (cnt == 0) return; write_record(ba, "BrtBeginFmts", write_UInt32LE(cnt));[[5, 8], [23, 26], [41, 44], [50, 392]].forEach(function (r) { for (var i = r[0]; i <= r[1]; ++i) if (NF[i] != null) write_record(ba, "BrtFmt", write_BrtFmt(i, NF[i])) }); write_record(ba, "BrtEndFmts") } function write_FONTS_bin(ba, data) { var cnt = 1; if (cnt == 0) return; write_record(ba, "BrtBeginFonts", write_UInt32LE(cnt)); write_record(ba, "BrtFont", write_BrtFont({ sz: 12, color: { theme: 1 }, name: "Calibri", family: 2, scheme: "minor" })); write_record(ba, "BrtEndFonts") } function write_FILLS_bin(ba, data) { var cnt = 2; if (cnt == 0) return; write_record(ba, "BrtBeginFills", write_UInt32LE(cnt)); write_record(ba, "BrtFill", write_BrtFill({ patternType: "none" })); write_record(ba, "BrtFill", write_BrtFill({ patternType: "gray125" })); write_record(ba, "BrtEndFills") } function write_BORDERS_bin(ba, data) { var cnt = 1; if (cnt == 0) return; write_record(ba, "BrtBeginBorders", write_UInt32LE(cnt)); write_record(ba, "BrtBorder", write_BrtBorder({})); write_record(ba, "BrtEndBorders") } function write_CELLSTYLEXFS_bin(ba, data) { var cnt = 1; write_record(ba, "BrtBeginCellStyleXFs", write_UInt32LE(cnt)); write_record(ba, "BrtXF", write_BrtXF({ numFmtId: 0, fontId: 0, fillId: 0, borderId: 0 }, 65535)); write_record(ba, "BrtEndCellStyleXFs") } function write_CELLXFS_bin(ba, data) { write_record(ba, "BrtBeginCellXFs", write_UInt32LE(data.length)); data.forEach(function (c) { write_record(ba, "BrtXF", write_BrtXF(c, 0)) }); write_record(ba, "BrtEndCellXFs") } function write_STYLES_bin(ba, data) { var cnt = 1; write_record(ba, "BrtBeginStyles", write_UInt32LE(1)); write_record(ba, "BrtStyle", write_BrtStyle({ xfId: 0, builtinId: 0, name: "Normal" })); write_record(ba, "BrtEndStyles") } function write_DXFS_bin(ba, data) { var cnt = 0; write_record(ba, "BrtBeginDXFs", write_UInt32LE(cnt)); write_record(ba, "BrtEndDXFs") } function write_TABLESTYLES_bin(ba, data) { var cnt = 0; write_record(ba, "BrtBeginTableStyles", write_BrtBeginTableStyles(cnt, "TableStyleMedium9", "PivotStyleMedium4")); write_record(ba, "BrtEndTableStyles") } function write_COLORPALETTE_bin(ba, data) { return } function write_sty_bin(wb, opts) { var ba = buf_array(); write_record(ba, "BrtBeginStyleSheet"); write_FMTS_bin(ba, wb.SSF); write_FONTS_bin(ba, wb); write_FILLS_bin(ba, wb); write_BORDERS_bin(ba, wb); write_CELLSTYLEXFS_bin(ba, wb); write_CELLXFS_bin(ba, opts.cellXfs); write_STYLES_bin(ba, wb); write_DXFS_bin(ba, wb); write_TABLESTYLES_bin(ba, wb); write_COLORPALETTE_bin(ba, wb); write_record(ba, "BrtEndStyleSheet"); return ba.end() } RELS.THEME = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme"; function parse_clrScheme(t, themes, opts) { themes.themeElements.clrScheme = []; var color = {}; (t[0].match(tagregex) || []).forEach(function (x) { var y = parsexmltag(x); switch (y[0]) { case "<a:clrScheme":; case "</a:clrScheme>": break; case "<a:srgbClr": color.rgb = y.val; break; case "<a:sysClr": color.rgb = y.lastClr; break; case "<a:dk1>":; case "</a:dk1>":; case "<a:lt1>":; case "</a:lt1>":; case "<a:dk2>":; case "</a:dk2>":; case "<a:lt2>":; case "</a:lt2>":; case "<a:accent1>":; case "</a:accent1>":; case "<a:accent2>":; case "</a:accent2>":; case "<a:accent3>":; case "</a:accent3>":; case "<a:accent4>":; case "</a:accent4>":; case "<a:accent5>":; case "</a:accent5>":; case "<a:accent6>":; case "</a:accent6>":; case "<a:hlink>":; case "</a:hlink>":; case "<a:folHlink>":; case "</a:folHlink>": if (y[0].charAt(1) === "/") { themes.themeElements.clrScheme.push(color); color = {} } else { color.name = y[0].substring(3, y[0].length - 1) } break; default: if (opts && opts.WTF) throw new Error("Unrecognized " + y[0] + " in clrScheme"); } }) } function parse_fontScheme(t, themes, opts) { } function parse_fmtScheme(t, themes, opts) { } var clrsregex = /<a:clrScheme([^>]*)>[\s\S]*<\/a:clrScheme>/; var fntsregex = /<a:fontScheme([^>]*)>[\s\S]*<\/a:fontScheme>/; var fmtsregex = /<a:fmtScheme([^>]*)>[\s\S]*<\/a:fmtScheme>/; function parse_themeElements(data, themes, opts) { themes.themeElements = {}; var t;[["clrScheme", clrsregex, parse_clrScheme], ["fontScheme", fntsregex, parse_fontScheme], ["fmtScheme", fmtsregex, parse_fmtScheme]].forEach(function (m) { if (!(t = data.match(m[1]))) throw new Error(m[0] + " not found in themeElements"); m[2](t, themes, opts) }) } var themeltregex = /<a:themeElements([^>]*)>[\s\S]*<\/a:themeElements>/; function parse_theme_xml(data, opts) { if (!data || data.length === 0) return parse_theme_xml(write_theme()); var t; var themes = {}; if (!(t = data.match(themeltregex))) throw new Error("themeElements not found in theme"); parse_themeElements(t[0], themes, opts); return themes } function write_theme(Themes, opts) {
        if (opts && opts.themeXLSX) return opts.themeXLSX; var o = [XML_HEADER]; o[o.length] = '<a:theme xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" name="Office Theme">'; o[o.length] = "<a:themeElements>"; o[o.length] = '<a:clrScheme name="Office">'; o[o.length] = '<a:dk1><a:sysClr val="windowText" lastClr="000000"/></a:dk1>'; o[o.length] = '<a:lt1><a:sysClr val="window" lastClr="FFFFFF"/></a:lt1>'; o[o.length] = '<a:dk2><a:srgbClr val="1F497D"/></a:dk2>'; o[o.length] = '<a:lt2><a:srgbClr val="EEECE1"/></a:lt2>'; o[o.length] = '<a:accent1><a:srgbClr val="4F81BD"/></a:accent1>'; o[o.length] = '<a:accent2><a:srgbClr val="C0504D"/></a:accent2>'; o[o.length] = '<a:accent3><a:srgbClr val="9BBB59"/></a:accent3>'; o[o.length] = '<a:accent4><a:srgbClr val="8064A2"/></a:accent4>'; o[o.length] = '<a:accent5><a:srgbClr val="4BACC6"/></a:accent5>'; o[o.length] = '<a:accent6><a:srgbClr val="F79646"/></a:accent6>'; o[o.length] = '<a:hlink><a:srgbClr val="0000FF"/></a:hlink>'; o[o.length] = '<a:folHlink><a:srgbClr val="800080"/></a:folHlink>'; o[o.length] = "</a:clrScheme>"; o[o.length] = '<a:fontScheme name="Office">'; o[o.length] = "<a:majorFont>"; o[o.length] = '<a:latin typeface="Cambria"/>'; o[o.length] = '<a:ea typeface=""/>'; o[o.length] = '<a:cs typeface=""/>'; o[o.length] = '<a:font script="Jpan" typeface="ＭＳ Ｐゴシック"/>'; o[o.length] = '<a:font script="Hang" typeface="맑은 고딕"/>'; o[o.length] = '<a:font script="Hans" typeface="宋体"/>'; o[o.length] = '<a:font script="Hant" typeface="新細明體"/>'; o[o.length] = '<a:font script="Arab" typeface="Times New Roman"/>'; o[o.length] = '<a:font script="Hebr" typeface="Times New Roman"/>'; o[o.length] = '<a:font script="Thai" typeface="Tahoma"/>'; o[o.length] = '<a:font script="Ethi" typeface="Nyala"/>'; o[o.length] = '<a:font script="Beng" typeface="Vrinda"/>'; o[o.length] = '<a:font script="Gujr" typeface="Shruti"/>'; o[o.length] = '<a:font script="Khmr" typeface="MoolBoran"/>'; o[o.length] = '<a:font script="Knda" typeface="Tunga"/>'; o[o.length] = '<a:font script="Guru" typeface="Raavi"/>'; o[o.length] = '<a:font script="Cans" typeface="Euphemia"/>'; o[o.length] = '<a:font script="Cher" typeface="Plantagenet Cherokee"/>'; o[o.length] = '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>'; o[o.length] = '<a:font script="Tibt" typeface="Microsoft Himalaya"/>'; o[o.length] = '<a:font script="Thaa" typeface="MV Boli"/>'; o[o.length] = '<a:font script="Deva" typeface="Mangal"/>'; o[o.length] = '<a:font script="Telu" typeface="Gautami"/>'; o[o.length] = '<a:font script="Taml" typeface="Latha"/>'; o[o.length] = '<a:font script="Syrc" typeface="Estrangelo Edessa"/>'; o[o.length] = '<a:font script="Orya" typeface="Kalinga"/>'; o[o.length] = '<a:font script="Mlym" typeface="Kartika"/>'; o[o.length] = '<a:font script="Laoo" typeface="DokChampa"/>'; o[o.length] = '<a:font script="Sinh" typeface="Iskoola Pota"/>'; o[o.length] = '<a:font script="Mong" typeface="Mongolian Baiti"/>'; o[o.length] = '<a:font script="Viet" typeface="Times New Roman"/>'; o[o.length] = '<a:font script="Uigh" typeface="Microsoft Uighur"/>'; o[o.length] = '<a:font script="Geor" typeface="Sylfaen"/>'; o[o.length] = "</a:majorFont>"; o[o.length] = "<a:minorFont>"; o[o.length] = '<a:latin typeface="Calibri"/>'; o[o.length] = '<a:ea typeface=""/>'; o[o.length] = '<a:cs typeface=""/>'; o[o.length] = '<a:font script="Jpan" typeface="ＭＳ Ｐゴシック"/>'; o[o.length] = '<a:font script="Hang" typeface="맑은 고딕"/>'; o[o.length] = '<a:font script="Hans" typeface="宋体"/>'; o[o.length] = '<a:font script="Hant" typeface="新細明體"/>'; o[o.length] = '<a:font script="Arab" typeface="Arial"/>'; o[o.length] = '<a:font script="Hebr" typeface="Arial"/>'; o[o.length] = '<a:font script="Thai" typeface="Tahoma"/>'; o[o.length] = '<a:font script="Ethi" typeface="Nyala"/>'; o[o.length] = '<a:font script="Beng" typeface="Vrinda"/>'; o[o.length] = '<a:font script="Gujr" typeface="Shruti"/>'; o[o.length] = '<a:font script="Khmr" typeface="DaunPenh"/>'; o[o.length] = '<a:font script="Knda" typeface="Tunga"/>'; o[o.length] = '<a:font script="Guru" typeface="Raavi"/>'; o[o.length] = '<a:font script="Cans" typeface="Euphemia"/>'; o[o.length] = '<a:font script="Cher" typeface="Plantagenet Cherokee"/>'; o[o.length] = '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>'; o[o.length] = '<a:font script="Tibt" typeface="Microsoft Himalaya"/>'; o[o.length] = '<a:font script="Thaa" typeface="MV Boli"/>'; o[o.length] = '<a:font script="Deva" typeface="Mangal"/>'; o[o.length] = '<a:font script="Telu" typeface="Gautami"/>'; o[o.length] = '<a:font script="Taml" typeface="Latha"/>'; o[o.length] = '<a:font script="Syrc" typeface="Estrangelo Edessa"/>'; o[o.length] = '<a:font script="Orya" typeface="Kalinga"/>'; o[o.length] = '<a:font script="Mlym" typeface="Kartika"/>'; o[o.length] = '<a:font script="Laoo" typeface="DokChampa"/>'; o[o.length] = '<a:font script="Sinh" typeface="Iskoola Pota"/>'; o[o.length] = '<a:font script="Mong" typeface="Mongolian Baiti"/>'; o[o.length] = '<a:font script="Viet" typeface="Arial"/>'; o[o.length] = '<a:font script="Uigh" typeface="Microsoft Uighur"/>'; o[o.length] = '<a:font script="Geor" typeface="Sylfaen"/>'; o[o.length] = "</a:minorFont>"; o[o.length] = "</a:fontScheme>"; o[o.length] = '<a:fmtScheme name="Office">'; o[o.length] = "<a:fillStyleLst>"; o[o.length] = '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>'; o[o.length] = '<a:gradFill rotWithShape="1">'; o[o.length] = "<a:gsLst>"; o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="50000"/><a:satMod val="300000"/></a:schemeClr></a:gs>'; o[o.length] = '<a:gs pos="35000"><a:schemeClr val="phClr"><a:tint val="37000"/><a:satMod val="300000"/></a:schemeClr></a:gs>'; o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="15000"/><a:satMod val="350000"/></a:schemeClr></a:gs>'; o[o.length] = "</a:gsLst>"; o[o.length] = '<a:lin ang="16200000" scaled="1"/>'; o[o.length] = "</a:gradFill>"; o[o.length] = '<a:gradFill rotWithShape="1">'; o[o.length] = "<a:gsLst>"; o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="100000"/><a:shade val="100000"/><a:satMod val="130000"/></a:schemeClr></a:gs>'; o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="50000"/><a:shade val="100000"/><a:satMod val="350000"/></a:schemeClr></a:gs>'; o[o.length] = "</a:gsLst>"; o[o.length] = '<a:lin ang="16200000" scaled="0"/>'; o[o.length] = "</a:gradFill>"; o[o.length] = "</a:fillStyleLst>"; o[o.length] = "<a:lnStyleLst>"; o[o.length] = '<a:ln w="9525" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"><a:shade val="95000"/><a:satMod val="105000"/></a:schemeClr></a:solidFill><a:prstDash val="solid"/></a:ln>'; o[o.length] = '<a:ln w="25400" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>'; o[o.length] = '<a:ln w="38100" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>'; o[o.length] = "</a:lnStyleLst>"; o[o.length] = "<a:effectStyleLst>"; o[o.length] = "<a:effectStyle>"; o[o.length] = "<a:effectLst>"; o[o.length] = '<a:outerShdw blurRad="40000" dist="20000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="38000"/></a:srgbClr></a:outerShdw>'; o[o.length] = "</a:effectLst>"; o[o.length] = "</a:effectStyle>"; o[o.length] = "<a:effectStyle>"; o[o.length] = "<a:effectLst>"; o[o.length] = '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>'; o[o.length] = "</a:effectLst>"; o[o.length] = "</a:effectStyle>"; o[o.length] = "<a:effectStyle>"; o[o.length] = "<a:effectLst>"; o[o.length] = '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>'; o[o.length] = "</a:effectLst>"; o[o.length] = '<a:scene3d><a:camera prst="orthographicFront"><a:rot lat="0" lon="0" rev="0"/></a:camera><a:lightRig rig="threePt" dir="t"><a:rot lat="0" lon="0" rev="1200000"/></a:lightRig></a:scene3d>'; o[o.length] = '<a:sp3d><a:bevelT w="63500" h="25400"/></a:sp3d>'; o[o.length] = "</a:effectStyle>"; o[o.length] = "</a:effectStyleLst>"; o[o.length] = "<a:bgFillStyleLst>"; o[o.length] = '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>'; o[o.length] = '<a:gradFill rotWithShape="1">'; o[o.length] = "<a:gsLst>"; o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="40000"/><a:satMod val="350000"/></a:schemeClr></a:gs>'; o[o.length] = '<a:gs pos="40000"><a:schemeClr val="phClr"><a:tint val="45000"/><a:shade val="99000"/><a:satMod val="350000"/></a:schemeClr></a:gs>'; o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="20000"/><a:satMod val="255000"/></a:schemeClr></a:gs>'; o[o.length] = "</a:gsLst>"; o[o.length] = '<a:path path="circle"><a:fillToRect l="50000" t="-80000" r="50000" b="180000"/></a:path>'; o[o.length] = "</a:gradFill>";
        o[o.length] = '<a:gradFill rotWithShape="1">'; o[o.length] = "<a:gsLst>"; o[o.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="80000"/><a:satMod val="300000"/></a:schemeClr></a:gs>'; o[o.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="30000"/><a:satMod val="200000"/></a:schemeClr></a:gs>'; o[o.length] = "</a:gsLst>"; o[o.length] = '<a:path path="circle"><a:fillToRect l="50000" t="50000" r="50000" b="50000"/></a:path>'; o[o.length] = "</a:gradFill>"; o[o.length] = "</a:bgFillStyleLst>"; o[o.length] = "</a:fmtScheme>"; o[o.length] = "</a:themeElements>"; o[o.length] = "<a:objectDefaults>"; o[o.length] = "<a:spDef>"; o[o.length] = '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="1"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="3"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="2"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="lt1"/></a:fontRef></a:style>'; o[o.length] = "</a:spDef>"; o[o.length] = "<a:lnDef>"; o[o.length] = '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="2"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="0"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="1"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="tx1"/></a:fontRef></a:style>'; o[o.length] = "</a:lnDef>"; o[o.length] = "</a:objectDefaults>"; o[o.length] = "<a:extraClrSchemeLst/>"; o[o.length] = "</a:theme>"; return o.join("")
    } function parse_Theme(blob, length, opts) { var dwThemeVersion = blob.read_shift(4); if (dwThemeVersion === 124226) return; blob.l += length - 4 } function parse_ColorTheme(blob, length) { return blob.read_shift(4) } function parse_FullColorExt(blob, length) { var o = {}; o.xclrType = blob.read_shift(2); o.nTintShade = blob.read_shift(2); switch (o.xclrType) { case 0: blob.l += 4; break; case 1: o.xclrValue = parse_IcvXF(blob, 4); break; case 2: o.xclrValue = parse_LongRGBA(blob, 4); break; case 3: o.xclrValue = parse_ColorTheme(blob, 4); break; case 4: blob.l += 4; break; } blob.l += 8; return o } function parse_IcvXF(blob, length) { return parsenoop(blob, length) } function parse_XFExtGradient(blob, length) { return parsenoop(blob, length) } function parse_ExtProp(blob, length) { var extType = blob.read_shift(2); var cb = blob.read_shift(2); var o = [extType]; switch (extType) { case 4:; case 5:; case 7:; case 8:; case 9:; case 10:; case 11:; case 13: o[1] = parse_FullColorExt(blob, cb); break; case 6: o[1] = parse_XFExtGradient(blob, cb); break; case 14:; case 15: o[1] = blob.read_shift(cb === 5 ? 1 : 2); break; default: throw new Error("Unrecognized ExtProp type: " + extType + " " + cb); } return o } function parse_XFExt(blob, length) { var end = blob.l + length; blob.l += 2; var ixfe = blob.read_shift(2); blob.l += 2; var cexts = blob.read_shift(2); var ext = []; while (cexts-- > 0) ext.push(parse_ExtProp(blob, end - blob.l)); return { ixfe: ixfe, ext: ext } } function update_xfext(xf, xfext) { xfext.forEach(function (xfe) { switch (xfe[0]) { case 4: break; case 5: break; case 6: break; case 7: break; case 8: break; case 9: break; case 10: break; case 11: break; case 13: break; case 14: break; case 15: break; } }) } function parse_cc_xml(data, opts) { var d = []; if (!data) return d; var l = 0, i = 1; (data.match(tagregex) || []).forEach(function (x) { var y = parsexmltag(x); switch (y[0]) { case "<?xml": break; case "<calcChain":; case "<calcChain>":; case "</calcChain>": break; case "<c": delete y[0]; if (y.i) i = y.i; else y.i = i; d.push(y); break; } }); return d } function write_cc_xml(data, opts) { } function parse_BrtCalcChainItem$(data, length) { var out = {}; out.i = data.read_shift(4); var cell = {}; cell.r = data.read_shift(4); cell.c = data.read_shift(4); out.r = encode_cell(cell); var flags = data.read_shift(1); if (flags & 2) out.l = "1"; if (flags & 8) out.a = "1"; return out } function parse_cc_bin(data, opts) { var out = []; var pass = false; recordhopper(data, function hopper_cc(val, R_n, RT) { switch (RT) { case 63: out.push(val); break; default: if ((R_n || "").indexOf("Begin") > 0) { } else if ((R_n || "").indexOf("End") > 0) { } else if (!pass || opts.WTF) throw new Error("Unexpected record " + RT + " " + R_n); } }); return out } function write_cc_bin(data, opts) { } RELS.IMG = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image"; RELS.DRAW = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing"; function parse_drawing(data, rels) { if (!data) return "??"; var id = (data.match(/<c:chart [^>]*r:id="([^"]*)"/) || ["", ""])[1]; return rels["!id"][id].Target } var _shapeid = 1024; function write_comments_vml(rId, comments) { var csize = [21600, 21600]; var bbox = ["m0,0l0", csize[1], csize[0], csize[1], csize[0], "0xe"].join(","); var o = [writextag("xml", null, { "xmlns:v": XLMLNS.v, "xmlns:o": XLMLNS.o, "xmlns:x": XLMLNS.x, "xmlns:mv": XLMLNS.mv }).replace(/\/>/, ">"), writextag("o:shapelayout", writextag("o:idmap", null, { "v:ext": "edit", data: rId }), { "v:ext": "edit" }), writextag("v:shapetype", [writextag("v:stroke", null, { joinstyle: "miter" }), writextag("v:path", null, { gradientshapeok: "t", "o:connecttype": "rect" })].join(""), { id: "_x0000_t202", "o:spt": 202, coordsize: csize.join(","), path: bbox })]; while (_shapeid < rId * 1e3) _shapeid += 1e3; comments.map(function (x) { return decode_cell(x[0]) }).forEach(function (c, i) { o = o.concat(["<v:shape" + wxt_helper({ id: "_x0000_s" + ++_shapeid, type: "#_x0000_t202", style: "position:absolute; margin-left:80pt;margin-top:5pt;width:104pt;height:64pt;z-index:10;visibility:hidden", fillcolor: "#ECFAD4", strokecolor: "#edeaa1" }) + ">", writextag("v:fill", writextag("o:fill", null, { type: "gradientUnscaled", "v:ext": "view" }), { color2: "#BEFF82", angle: "-180", type: "gradient" }), writextag("v:shadow", null, { on: "t", obscured: "t" }), writextag("v:path", null, { "o:connecttype": "none" }), '<v:textbox><div style="text-align:left"></div></v:textbox>', '<x:ClientData ObjectType="Note">', "<x:MoveWithCells/>", "<x:SizeWithCells/>", writetag("x:Anchor", [c.c, 0, c.r, 0, c.c + 3, 100, c.r + 5, 100].join(",")), writetag("x:AutoFill", "False"), writetag("x:Row", String(c.r)), writetag("x:Column", String(c.c)), "<x:Visible/>", "</x:ClientData>", "</v:shape>"]) }); o.push("</xml>"); return o.join("") } RELS.CMNT = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments"; function parse_comments(zip, dirComments, sheets, sheetRels, opts) { for (var i = 0; i != dirComments.length; ++i) { var canonicalpath = dirComments[i]; var comments = parse_cmnt(getzipdata(zip, canonicalpath.replace(/^\//, ""), true), canonicalpath, opts); if (!comments || !comments.length) continue; var sheetNames = keys(sheets); for (var j = 0; j != sheetNames.length; ++j) { var sheetName = sheetNames[j]; var rels = sheetRels[sheetName]; if (rels) { var rel = rels[canonicalpath]; if (rel) insertCommentsIntoSheet(sheetName, sheets[sheetName], comments) } } } } function insertCommentsIntoSheet(sheetName, sheet, comments) { var dense = Array.isArray(sheet); var cell, r; comments.forEach(function (comment) { if (dense) { r = decode_cell(comment.ref); if (!sheet[r.r]) sheet[r.r] = []; cell = sheet[r.r][r.c] } else cell = sheet[comment.ref]; if (!cell) { cell = {}; if (dense) sheet[r.r][r.c] = cell; else sheet[comment.ref] = cell; var range = safe_decode_range(sheet["!ref"] || "BDWGO1000001:A1"); var thisCell = decode_cell(comment.ref); if (range.s.r > thisCell.r) range.s.r = thisCell.r; if (range.e.r < thisCell.r) range.e.r = thisCell.r; if (range.s.c > thisCell.c) range.s.c = thisCell.c; if (range.e.c < thisCell.c) range.e.c = thisCell.c; var encoded = encode_range(range); if (encoded !== sheet["!ref"]) sheet["!ref"] = encoded } if (!cell.c) cell.c = []; var o = { a: comment.author, t: comment.t, r: comment.r }; if (comment.h) o.h = comment.h; cell.c.push(o) }) } function parse_comments_xml(data, opts) { if (data.match(/<(?:\w+:)?comments *\/>/)) return []; var authors = []; var commentList = []; var authtag = data.match(/<(?:\w+:)?authors>([\s\S]*)<\/(?:\w+:)?authors>/); if (authtag && authtag[1]) authtag[1].split(/<\/\w*:?author>/).forEach(function (x) { if (x === "" || x.trim() === "") return; var a = x.match(/<(?:\w+:)?author[^>]*>(.*)/); if (a) authors.push(a[1]) }); var cmnttag = data.match(/<(?:\w+:)?commentList>([\s\S]*)<\/(?:\w+:)?commentList>/); if (cmnttag && cmnttag[1]) cmnttag[1].split(/<\/\w*:?comment>/).forEach(function (x, index) { if (x === "" || x.trim() === "") return; var cm = x.match(/<(?:\w+:)?comment[^>]*>/); if (!cm) return; var y = parsexmltag(cm[0]); var comment = { author: y.authorId && authors[y.authorId] ? authors[y.authorId] : "sheetjsghost", ref: y.ref, guid: y.guid }; var cell = decode_cell(y.ref); if (opts.sheetRows && opts.sheetRows <= cell.r) return; var textMatch = x.match(/<(?:\w+:)?text>([\s\S]*)<\/(?:\w+:)?text>/); var rt = !!textMatch && !!textMatch[1] && parse_si(textMatch[1]) || { r: "", t: "", h: "" }; comment.r = rt.r; if (rt.r == "<t></t>") rt.t = rt.h = ""; comment.t = rt.t.replace(/\r\n/g, "\n").replace(/\r/g, "\n"); if (opts.cellHTML) comment.h = rt.h; commentList.push(comment) }); return commentList } var CMNT_XML_ROOT = writextag("comments", null, { xmlns: XMLNS.main[0] }); function write_comments_xml(data, opts) { var o = [XML_HEADER, CMNT_XML_ROOT]; var iauthor = []; o.push("<authors>"); data.map(function (x) { return x[1] }).forEach(function (comment) { comment.map(function (x) { return escapexml(x.a) }).forEach(function (a) { if (iauthor.indexOf(a) > -1) return; iauthor.push(a); o.push("<author>" + a + "</author>") }) }); o.push("</authors>"); o.push("<commentList>"); data.forEach(function (d) { d[1].forEach(function (c) { o.push('<comment ref="' + d[0] + '" authorId="' + iauthor.indexOf(escapexml(c.a)) + '"><text>'); o.push(writetag("t", c.t == null ? "" : c.t)); o.push("</text></comment>") }) }); o.push("</commentList>"); if (o.length > 2) { o[o.length] = "</comments>"; o[1] = o[1].replace("/>", ">") } return o.join("") } function parse_BrtBeginComment(data, length) { var out = {}; out.iauthor = data.read_shift(4); var rfx = parse_UncheckedRfX(data, 16); out.rfx = rfx.s; out.ref = encode_cell(rfx.s); data.l += 16; return out } function write_BrtBeginComment(data, o) { if (o == null) o = new_buf(36); o.write_shift(4, data[1].iauthor); write_UncheckedRfX(data[0], o); o.write_shift(4, 0); o.write_shift(4, 0); o.write_shift(4, 0); o.write_shift(4, 0); return o } var parse_BrtCommentAuthor = parse_XLWideString; function parse_comments_bin(data, opts) { var out = []; var authors = []; var c = {}; var pass = false; recordhopper(data, function hopper_cmnt(val, R_n, RT) { switch (RT) { case 632: authors.push(val); break; case 635: c = val; break; case 637: c.t = val.t; c.h = val.h; c.r = val.r; break; case 636: c.author = authors[c.iauthor]; delete c.iauthor; if (opts.sheetRows && opts.sheetRows <= c.rfx.r) break; if (!c.t) c.t = ""; delete c.rfx; out.push(c); break; case 35: pass = true; break; case 36: pass = false; break; case 37: break; case 38: break; default: if ((R_n || "").indexOf("Begin") > 0) { } else if ((R_n || "").indexOf("End") > 0) { } else if (!pass || opts.WTF) throw new Error("Unexpected record " + RT + " " + R_n); } }); return out } function write_comments_bin(data, opts) { var ba = buf_array(); var iauthor = []; write_record(ba, "BrtBeginComments"); { write_record(ba, "BrtBeginCommentAuthors"); data.forEach(function (comment) { comment[1].forEach(function (c) { if (iauthor.indexOf(c.a) > -1) return; iauthor.push(c.a.substr(0, 54)); write_record(ba, "BrtCommentAuthor", write_XLWideString(c.a.substr(0, 54))) }) }); write_record(ba, "BrtEndCommentAuthors") } { write_record(ba, "BrtBeginCommentList"); data.forEach(function (comment) { comment[1].forEach(function (c) { c.iauthor = iauthor.indexOf(c.a); var range = { s: decode_cell(comment[0]), e: decode_cell(comment[0]) }; write_record(ba, "BrtBeginComment", write_BrtBeginComment([range, c])); if (c.t && c.t.length > 0) write_record(ba, "BrtCommentText", write_BrtCommentText(c)); write_record(ba, "BrtEndComment"); delete c.iauthor }) }); write_record(ba, "BrtEndCommentList") } write_record(ba, "BrtEndComments"); return ba.end() } RELS.DS = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/dialogsheet"; RELS.MS = "http://schemas.microsoft.com/office/2006/relationships/xlMacrosheet"; function parse_ds_bin(data, opts, rels, wb, themes, styles) { return { "!type": "dialog" } } function parse_ds_xml(data, opts, rels, wb, themes, styles) { return { "!type": "dialog" } } function parse_ms_bin(data, opts, rels, wb, themes, styles) { return { "!type": "macro" } } function parse_ms_xml(data, opts, rels, wb, themes, styles) { return { "!type": "macro" } } var rc_to_a1 = function () { var rcregex = /(^|[^A-Za-z])R(\[?)(-?\d+|)\]?C(\[?)(-?\d+|)\]?/g; var rcbase = { r: 0, c: 0 }; function rcfunc($$, $1, $2, $3, $4, $5) { var R = $3.length > 0 ? parseInt($3, 10) | 0 : 0, C = $5.length > 0 ? parseInt($5, 10) | 0 : 0; if (C < 0 && $4.length === 0) C = 0; var cRel = false, rRel = false; if ($4.length > 0 || $5.length == 0) cRel = true; if (cRel) C += rcbase.c; else --C; if ($2.length > 0 || $3.length == 0) rRel = true; if (rRel) R += rcbase.r; else --R; return $1 + (cRel ? "" : "$") + encode_col(C) + (rRel ? "" : "$") + encode_row(R) } return function rc_to_a1(fstr, base) { rcbase = base; return fstr.replace(rcregex, rcfunc) } }(); var crefregex = /(^|[^._A-Z0-9])([$]?)([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])([$]?)([1-9]\d{0,5}|10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6])(?![_.\(A-Za-z0-9])/g; var a1_to_rc = function () { return function a1_to_rc(fstr, base) { return fstr.replace(crefregex, function ($0, $1, $2, $3, $4, $5, off, str) { var c = decode_col($3) - base.c; var r = decode_row($5) - base.r; return $1 + "R" + (r == 0 ? "" : "[" + r + "]") + "C" + (c == 0 ? "" : "[" + c + "]") }) } }(); function shift_formula_str(f, delta) { return f.replace(crefregex, function ($0, $1, $2, $3, $4, $5, off, str) { return $1 + ($2 == "$" ? $2 + $3 : encode_col(decode_col($3) + delta.c)) + ($4 == "$" ? $4 + $5 : encode_row(decode_row($5) + delta.r)) }) } function shift_formula_xlsx(f, range, cell) { var r = decode_range(range), s = r.s, c = decode_cell(cell); var delta = { r: c.r - s.r, c: c.c - s.c }; return shift_formula_str(f, delta) } function parseread(l) { return function (blob, length) { blob.l += l; return } } function parseread1(blob) { blob.l += 1; return } function parse_ColRelU(blob, length) { var c = blob.read_shift(length == 1 ? 1 : 2); return [c & 16383, c >> 14 & 1, c >> 15 & 1] } function parse_RgceArea(blob, length, opts) { var w = 2; if (opts) { if (opts.biff >= 2 && opts.biff <= 5) return parse_RgceArea_BIFF2(blob, length, opts); else if (opts.biff == 12) w = 4 } var r = blob.read_shift(w), R = blob.read_shift(w); var c = parse_ColRelU(blob, 2); var C = parse_ColRelU(blob, 2); return { s: { r: r, c: c[0], cRel: c[1], rRel: c[2] }, e: { r: R, c: C[0], cRel: C[1], rRel: C[2] } } } function parse_RgceArea_BIFF2(blob) { var r = parse_ColRelU(blob, 2), R = parse_ColRelU(blob, 2); var c = blob.read_shift(1); var C = blob.read_shift(1); return { s: { r: r[0], c: c, cRel: r[1], rRel: r[2] }, e: { r: R[0], c: C, cRel: R[1], rRel: R[2] } } } function parse_RgceAreaRel(blob, length) { var r = blob.read_shift(length == 12 ? 4 : 2), R = blob.read_shift(length == 12 ? 4 : 2); var c = parse_ColRelU(blob, 2); var C = parse_ColRelU(blob, 2); return { s: { r: r, c: c[0], cRel: c[1], rRel: c[2] }, e: { r: R, c: C[0], cRel: C[1], rRel: C[2] } } } function parse_RgceLoc(blob, length, opts) { if (opts && opts.biff >= 2 && opts.biff <= 5) return parse_RgceLoc_BIFF2(blob, length, opts); var r = blob.read_shift(opts && opts.biff == 12 ? 4 : 2); var c = parse_ColRelU(blob, 2); return { r: r, c: c[0], cRel: c[1], rRel: c[2] } } function parse_RgceLoc_BIFF2(blob, length, opts) { var r = parse_ColRelU(blob, 2); var c = blob.read_shift(1); return { r: r[0], c: c, cRel: r[1], rRel: r[2] } } function parse_RgceLocRel(blob, length, opts) { var biff = opts && opts.biff ? opts.biff : 8; if (biff >= 2 && biff <= 5) return parse_RgceLocRel_BIFF2(blob, length, opts); var r = blob.read_shift(biff >= 12 ? 4 : 2); var cl = blob.read_shift(2); var cRel = (cl & 32768) >> 15, rRel = (cl & 16384) >> 14; cl &= 16383; if (rRel == 1) while (r > 524287) r -= 1048576; if (cRel == 1) while (cl > 8191) cl = cl - 16384; return { r: r, c: cl, cRel: cRel, rRel: rRel } } function parse_RgceLocRel_BIFF2(blob, length) { var rl = blob.read_shift(2); var c = blob.read_shift(1); var rRel = (rl & 32768) >> 15, cRel = (rl & 16384) >> 14; rl &= 16383; if (rRel == 1 && rl >= 8192) rl = rl - 16384; if (cRel == 1 && c >= 128) c = c - 256; return { r: rl, c: c, cRel: cRel, rRel: rRel } } function parse_PtgArea(blob, length, opts) { var type = (blob[blob.l++] & 96) >> 5; var area = parse_RgceArea(blob, opts.biff >= 2 && opts.biff <= 5 ? 6 : 8, opts); return [type, area] } function parse_PtgArea3d(blob, length, opts) { var type = (blob[blob.l++] & 96) >> 5; var ixti = blob.read_shift(2, "i"); var w = 8; if (opts) switch (opts.biff) { case 5: blob.l += 12; w = 6; break; case 12: w = 12; break; } var area = parse_RgceArea(blob, w, opts); return [type, ixti, area] } function parse_PtgAreaErr(blob, length, opts) { var type = (blob[blob.l++] & 96) >> 5; blob.l += opts && opts.biff > 8 ? 12 : 8; return [type] } function parse_PtgAreaErr3d(blob, length, opts) { var type = (blob[blob.l++] & 96) >> 5; var ixti = blob.read_shift(2); var w = 8; if (opts) switch (opts.biff) { case 5: blob.l += 12; w = 6; break; case 12: w = 12; break; } blob.l += w; return [type, ixti] } function parse_PtgAreaN(blob, length, opts) { var type = (blob[blob.l++] & 96) >> 5; var area = parse_RgceAreaRel(blob, opts && opts.biff > 8 ? 12 : 8, opts); return [type, area] } function parse_PtgArray(blob, length, opts) { var type = (blob[blob.l++] & 96) >> 5; blob.l += opts.biff == 2 ? 6 : opts.biff == 12 ? 14 : 7; return [type] } function parse_PtgAttrBaxcel(blob, length) { var bitSemi = blob[blob.l + 1] & 1; var bitBaxcel = 1; blob.l += 4; return [bitSemi, bitBaxcel] } function parse_PtgAttrChoose(blob, length, opts) { blob.l += 2; var offset = blob.read_shift(opts && opts.biff == 2 ? 1 : 2); var o = []; for (var i = 0; i <= offset; ++i) o.push(blob.read_shift(opts && opts.biff == 2 ? 1 : 2)); return o } function parse_PtgAttrGoto(blob, length, opts) { var bitGoto = blob[blob.l + 1] & 255 ? 1 : 0; blob.l += 2; return [bitGoto, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)] } function parse_PtgAttrIf(blob, length, opts) { var bitIf = blob[blob.l + 1] & 255 ? 1 : 0; blob.l += 2; return [bitIf, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)] } function parse_PtgAttrIfError(blob, length) { var bitIf = blob[blob.l + 1] & 255 ? 1 : 0; blob.l += 2; return [bitIf, blob.read_shift(2)] } function parse_PtgAttrSemi(blob, length, opts) { var bitSemi = blob[blob.l + 1] & 255 ? 1 : 0; blob.l += opts && opts.biff == 2 ? 3 : 4; return [bitSemi] } function parse_PtgAttrSpaceType(blob, length) { var type = blob.read_shift(1), cch = blob.read_shift(1); return [type, cch] } function parse_PtgAttrSpace(blob, length) { blob.read_shift(2); return parse_PtgAttrSpaceType(blob, 2) } function parse_PtgAttrSpaceSemi(blob, length) { blob.read_shift(2); return parse_PtgAttrSpaceType(blob, 2) } function parse_PtgRef(blob, length, opts) { var ptg = blob[blob.l] & 31; var type = (blob[blob.l] & 96) >> 5; blob.l += 1; var loc = parse_RgceLoc(blob, 0, opts); return [type, loc] } function parse_PtgRefN(blob, length, opts) { var type = (blob[blob.l] & 96) >> 5; blob.l += 1; var loc = parse_RgceLocRel(blob, 0, opts); return [type, loc] } function parse_PtgRef3d(blob, length, opts) { var type = (blob[blob.l] & 96) >> 5; blob.l += 1; var ixti = blob.read_shift(2); var loc = parse_RgceLoc(blob, 0, opts); return [type, ixti, loc] } function parse_PtgFunc(blob, length, opts) { var ptg = blob[blob.l] & 31; var type = (blob[blob.l] & 96) >> 5; blob.l += 1; var iftab = blob.read_shift(opts && opts.biff <= 3 ? 1 : 2); return [FtabArgc[iftab], Ftab[iftab], type] } function parse_PtgFuncVar(blob, length, opts) { blob.l++; var cparams = blob.read_shift(1), tab = opts && opts.biff <= 3 ? [0, blob.read_shift(1)] : parsetab(blob); return [cparams, (tab[0] === 0 ? Ftab : Cetab)[tab[1]]] } function parsetab(blob, length) { return [blob[blob.l + 1] >> 7, blob.read_shift(2) & 32767] } function parse_PtgAttrSum(blob, length, opts) { blob.l += opts && opts.biff == 2 ? 3 : 4; return } var parse_PtgConcat = parseread1; function parse_PtgExp(blob, length, opts) { blob.l++; if (opts && opts.biff == 12) return [blob.read_shift(4, "i"), 0]; var row = blob.read_shift(2); var col = blob.read_shift(opts && opts.biff == 2 ? 1 : 2); return [row, col] } function parse_PtgErr(blob, length) { blob.l++; return BErr[blob.read_shift(1)] } function parse_PtgInt(blob, length) { blob.l++; return blob.read_shift(2) } function parse_PtgBool(blob, length) { blob.l++; return blob.read_shift(1) !== 0 } function parse_PtgNum(blob, length) { blob.l++; return parse_Xnum(blob, 8) } function parse_PtgStr(blob, length, opts) { blob.l++; return parse_ShortXLUnicodeString(blob, length - 1, opts) } function parse_SerAr(blob, biff) { var val = [blob.read_shift(1)]; if (biff == 12) switch (val[0]) { case 2: val[0] = 4; break; case 4: val[0] = 16; break; case 0: val[0] = 1; break; case 1: val[0] = 2; break; } switch (val[0]) { case 4: val[1] = parsebool(blob, 1) ? "TRUE" : "FALSE"; blob.l += 7; break; case 16: val[1] = BErr[blob[blob.l]]; blob.l += 8; break; case 0: blob.l += 8; break; case 1: val[1] = parse_Xnum(blob, 8); break; case 2: val[1] = parse_XLUnicodeString2(blob, 0, { biff: biff > 0 && biff < 8 ? 2 : biff }); break; } return val } function parse_PtgExtraMem(blob, cce) { var count = blob.read_shift(2); var out = []; for (var i = 0; i != count; ++i) out.push(parse_Ref8U(blob, 8)); return out } function parse_PtgExtraArray(blob, length, opts) { var rows = 0, cols = 0; if (opts.biff == 12) { rows = blob.read_shift(4); cols = blob.read_shift(4) } else { cols = 1 + blob.read_shift(1); rows = 1 + blob.read_shift(2) } if (opts.biff >= 2 && opts.biff < 8) { --rows; if (--cols == 0) cols = 256 } for (var i = 0, o = []; i != rows && (o[i] = []) ; ++i) for (var j = 0; j != cols; ++j) o[i][j] = parse_SerAr(blob, opts.biff); return o } function parse_PtgName(blob, length, opts) { var type = blob.read_shift(1) >>> 5 & 3; var w = !opts || opts.biff >= 8 ? 4 : 2; var nameindex = blob.read_shift(w); switch (opts.biff) { case 2: blob.l += 5; break; case 3:; case 4: blob.l += 8; break; case 5: blob.l += 12; break; } return [type, 0, nameindex] } function parse_PtgNameX(blob, length, opts) { if (opts.biff == 5) return parse_PtgNameX_BIFF5(blob, length, opts); var type = blob.read_shift(1) >>> 5 & 3; var ixti = blob.read_shift(2); var nameindex = blob.read_shift(4); return [type, ixti, nameindex] } function parse_PtgNameX_BIFF5(blob, length, opts) { var type = blob.read_shift(1) >>> 5 & 3; var ixti = blob.read_shift(2, "i"); blob.l += 8; var nameindex = blob.read_shift(2); blob.l += 12; return [type, ixti, nameindex] } function parse_PtgMemArea(blob, length, opts) { var type = blob.read_shift(1) >>> 5 & 3; blob.l += opts && opts.biff == 2 ? 3 : 4; var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2); return [type, cce] } function parse_PtgMemFunc(blob, length, opts) { var type = blob.read_shift(1) >>> 5 & 3; var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2); return [type, cce] } function parse_PtgRefErr(blob, length, opts) { var type = blob.read_shift(1) >>> 5 & 3; blob.l += 4; if (opts.biff == 12) blob.l += 2; return [type] } function parse_PtgRefErr3d(blob, length, opts) { var type = (blob[blob.l++] & 96) >> 5; var ixti = blob.read_shift(2); var w = 4; if (opts) switch (opts.biff) { case 5: throw new Error("PtgRefErr3d -- 5"); case 12: w = 6; break; } blob.l += w; return [type, ixti] } var parse_PtgAdd = parseread1; var parse_PtgDiv = parseread1; var parse_PtgEq = parseread1; var parse_PtgGe = parseread1; var parse_PtgGt = parseread1; var parse_PtgIsect = parseread1; var parse_PtgLe = parseread1; var parse_PtgLt = parseread1; var parse_PtgMissArg = parseread1; var parse_PtgMul = parseread1; var parse_PtgNe = parseread1; var parse_PtgParen = parseread1; var parse_PtgPercent = parseread1; var parse_PtgPower = parseread1; var parse_PtgRange = parseread1; var parse_PtgSub = parseread1; var parse_PtgUminus = parseread1; var parse_PtgUnion = parseread1; var parse_PtgUplus = parseread1; var parse_PtgMemErr = parsenoop; var parse_PtgMemNoMem = parsenoop; var parse_PtgTbl = parsenoop; var PtgTypes = { 1: { n: "PtgExp", f: parse_PtgExp }, 2: { n: "PtgTbl", f: parse_PtgTbl }, 3: { n: "PtgAdd", f: parse_PtgAdd }, 4: { n: "PtgSub", f: parse_PtgSub }, 5: { n: "PtgMul", f: parse_PtgMul }, 6: { n: "PtgDiv", f: parse_PtgDiv }, 7: { n: "PtgPower", f: parse_PtgPower }, 8: { n: "PtgConcat", f: parse_PtgConcat }, 9: { n: "PtgLt", f: parse_PtgLt }, 10: { n: "PtgLe", f: parse_PtgLe }, 11: { n: "PtgEq", f: parse_PtgEq }, 12: { n: "PtgGe", f: parse_PtgGe }, 13: { n: "PtgGt", f: parse_PtgGt }, 14: { n: "PtgNe", f: parse_PtgNe }, 15: { n: "PtgIsect", f: parse_PtgIsect }, 16: { n: "PtgUnion", f: parse_PtgUnion }, 17: { n: "PtgRange", f: parse_PtgRange }, 18: { n: "PtgUplus", f: parse_PtgUplus }, 19: { n: "PtgUminus", f: parse_PtgUminus }, 20: { n: "PtgPercent", f: parse_PtgPercent }, 21: { n: "PtgParen", f: parse_PtgParen }, 22: { n: "PtgMissArg", f: parse_PtgMissArg }, 23: { n: "PtgStr", f: parse_PtgStr }, 28: { n: "PtgErr", f: parse_PtgErr }, 29: { n: "PtgBool", f: parse_PtgBool }, 30: { n: "PtgInt", f: parse_PtgInt }, 31: { n: "PtgNum", f: parse_PtgNum }, 32: { n: "PtgArray", f: parse_PtgArray }, 33: { n: "PtgFunc", f: parse_PtgFunc }, 34: { n: "PtgFuncVar", f: parse_PtgFuncVar }, 35: { n: "PtgName", f: parse_PtgName }, 36: { n: "PtgRef", f: parse_PtgRef }, 37: { n: "PtgArea", f: parse_PtgArea }, 38: { n: "PtgMemArea", f: parse_PtgMemArea }, 39: { n: "PtgMemErr", f: parse_PtgMemErr }, 40: { n: "PtgMemNoMem", f: parse_PtgMemNoMem }, 41: { n: "PtgMemFunc", f: parse_PtgMemFunc }, 42: { n: "PtgRefErr", f: parse_PtgRefErr }, 43: { n: "PtgAreaErr", f: parse_PtgAreaErr }, 44: { n: "PtgRefN", f: parse_PtgRefN }, 45: { n: "PtgAreaN", f: parse_PtgAreaN }, 57: { n: "PtgNameX", f: parse_PtgNameX }, 58: { n: "PtgRef3d", f: parse_PtgRef3d }, 59: { n: "PtgArea3d", f: parse_PtgArea3d }, 60: { n: "PtgRefErr3d", f: parse_PtgRefErr3d }, 61: { n: "PtgAreaErr3d", f: parse_PtgAreaErr3d }, 255: {} }; var PtgDupes = { 64: 32, 96: 32, 65: 33, 97: 33, 66: 34, 98: 34, 67: 35, 99: 35, 68: 36, 100: 36, 69: 37, 101: 37, 70: 38, 102: 38, 71: 39, 103: 39, 72: 40, 104: 40, 73: 41, 105: 41, 74: 42, 106: 42, 75: 43, 107: 43, 76: 44, 108: 44, 77: 45, 109: 45, 89: 57, 121: 57, 90: 58, 122: 58, 91: 59, 123: 59, 92: 60, 124: 60, 93: 61, 125: 61 }; (function () { for (var y in PtgDupes) PtgTypes[y] = PtgTypes[PtgDupes[y]] })(); var Ptg18 = {}; var Ptg19 = { 1: { n: "PtgAttrSemi", f: parse_PtgAttrSemi }, 2: { n: "PtgAttrIf", f: parse_PtgAttrIf }, 4: { n: "PtgAttrChoose", f: parse_PtgAttrChoose }, 8: { n: "PtgAttrGoto", f: parse_PtgAttrGoto }, 16: { n: "PtgAttrSum", f: parse_PtgAttrSum }, 32: { n: "PtgAttrBaxcel", f: parse_PtgAttrBaxcel }, 64: { n: "PtgAttrSpace", f: parse_PtgAttrSpace }, 65: { n: "PtgAttrSpaceSemi", f: parse_PtgAttrSpaceSemi }, 128: { n: "PtgAttrIfError", f: parse_PtgAttrIfError }, 255: {} }; function parse_Formula(blob, length, opts) { var end = blob.l + length; var cell = parse_XLSCell(blob, 6); if (opts.biff == 2)++blob.l; var val = parse_FormulaValue(blob, 8); var flags = blob.read_shift(1); if (opts.biff != 2) { blob.read_shift(1); if (opts.biff >= 5) { var chn = blob.read_shift(4) } } var cbf = parse_XLSCellParsedFormula(blob, end - blob.l, opts); return { cell: cell, val: val[0], formula: cbf, shared: flags >> 3 & 1, tt: val[1] } } function parse_FormulaValue(blob) { var b; if (__readUInt16LE(blob, blob.l + 6) !== 65535) return [parse_Xnum(blob), "n"]; switch (blob[blob.l]) { case 0: blob.l += 8; return ["String", "s"]; case 1: b = blob[blob.l + 2] === 1; blob.l += 8; return [b, "b"]; case 2: b = blob[blob.l + 2]; blob.l += 8; return [b, "e"]; case 3: blob.l += 8; return ["", "s"]; } return [] } function parse_RgbExtra(blob, length, rgce, opts) { if (opts.biff < 8) return parsenoop(blob, length); var target = blob.l + length; var o = []; for (var i = 0; i !== rgce.length; ++i) { switch (rgce[i][0]) { case "PtgArray": rgce[i][1] = parse_PtgExtraArray(blob, 0, opts); o.push(rgce[i][1]); break; case "PtgMemArea": rgce[i][2] = parse_PtgExtraMem(blob, rgce[i][1]); o.push(rgce[i][2]); break; case "PtgExp": if (opts && opts.biff == 12) { rgce[i][1][1] = blob.read_shift(4); o.push(rgce[i][1]) } break; default: break; } } length = target - blob.l; if (length !== 0) o.push(parsenoop(blob, length)); return o } function parse_NameParsedFormula(blob, length, opts, cce) { var target = blob.l + length; var rgce = parse_Rgce(blob, cce, opts); var rgcb; if (target !== blob.l) rgcb = parse_RgbExtra(blob, target - blob.l, rgce, opts); return [rgce, rgcb] } function parse_XLSCellParsedFormula(blob, length, opts) { var target = blob.l + length, len = opts.biff == 2 ? 1 : 2; var rgcb, cce = blob.read_shift(len); if (cce == 65535) return [[], parsenoop(blob, length - 2)]; var rgce = parse_Rgce(blob, cce, opts); if (length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts); return [rgce, rgcb] } function parse_SharedParsedFormula(blob, length, opts) { var target = blob.l + length; var rgcb, cce = blob.read_shift(2); var rgce = parse_Rgce(blob, cce, opts); if (cce == 65535) return [[], parsenoop(blob, length - 2)]; if (length !== cce + 2) rgcb = parse_RgbExtra(blob, target - cce - 2, rgce, opts); return [rgce, rgcb] } function parse_ArrayParsedFormula(blob, length, opts, ref) { var target = blob.l + length, len = opts.biff == 2 ? 1 : 2; var rgcb, cce = blob.read_shift(len); if (cce == 65535) return [[], parsenoop(blob, length - 2)]; var rgce = parse_Rgce(blob, cce, opts); if (length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts); return [rgce, rgcb] } function parse_Rgce(blob, length, opts) { var target = blob.l + length; var R, id, ptgs = []; while (target != blob.l) { length = target - blob.l; id = blob[blob.l]; R = PtgTypes[id]; if (id === 24 || id === 25) { id = blob[blob.l + 1]; R = (id === 24 ? Ptg18 : Ptg19)[id] } if (!R || !R.f) { parsenoop(blob, length) } else { ptgs.push([R.n, R.f(blob, length, opts)]) } } return ptgs } function stringify_array(f) { var o = []; for (var i = 0; i < f.length; ++i) { var x = f[i], r = []; for (var j = 0; j < x.length; ++j) { var y = x[j]; if (y) switch (y[0]) { case 2: r.push('"' + y[1].replace(/"/g, '""') + '"'); break; default: r.push(y[1]); } else r.push("") } o.push(r.join(",")) } return o.join(";") } var PtgBinOp = { PtgAdd: "+", PtgConcat: "&", PtgDiv: "/", PtgEq: "=", PtgGe: ">=", PtgGt: ">", PtgLe: "<=", PtgLt: "<", PtgMul: "*", PtgNe: "<>", PtgPower: "^", PtgSub: "-" }; function stringify_formula(formula, range, cell, supbooks, opts) {
        var _range = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } }; var stack = [], e1, e2, type, c, ixti = 0, nameidx = 0, r, sname = ""; if (!formula[0] || !formula[0][0]) return ""; var last_sp = -1, sp = ""; for (var ff = 0, fflen = formula[0].length; ff < fflen; ++ff) {
            var f = formula[0][ff]; switch (f[0]) {
                case "PtgUminus": stack.push("-" + stack.pop()); break; case "PtgUplus": stack.push("+" + stack.pop()); break; case "PtgPercent": stack.push(stack.pop() + "%"); break; case "PtgAdd":; case "PtgConcat":; case "PtgDiv":; case "PtgEq":; case "PtgGe":; case "PtgGt":; case "PtgLe":; case "PtgLt":; case "PtgMul":; case "PtgNe":; case "PtgPower":; case "PtgSub": e1 = stack.pop(); e2 = stack.pop(); if (last_sp >= 0) { switch (formula[0][last_sp][1][0]) { case 0: sp = fill(" ", formula[0][last_sp][1][1]); break; case 1: sp = fill("\r", formula[0][last_sp][1][1]); break; default: sp = ""; if (opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]); } e2 = e2 + sp; last_sp = -1 } stack.push(e2 + PtgBinOp[f[0]] + e1); break; case "PtgIsect": e1 = stack.pop(); e2 = stack.pop(); stack.push(e2 + " " + e1); break; case "PtgUnion": e1 = stack.pop(); e2 = stack.pop(); stack.push(e2 + "," + e1); break; case "PtgRange": e1 = stack.pop(); e2 = stack.pop(); stack.push(e2 + ":" + e1); break; case "PtgAttrChoose": break; case "PtgAttrGoto": break; case "PtgAttrIf": break; case "PtgAttrIfError": break; case "PtgRef": type = f[1][0]; c = shift_cell_xls(f[1][1], _range, opts); stack.push(encode_cell_xls(c)); break; case "PtgRefN": type = f[1][0]; c = cell ? shift_cell_xls(f[1][1], cell, opts) : f[1][1]; stack.push(encode_cell_xls(c)); break; case "PtgRef3d": type = f[1][0]; ixti = f[1][1]; c = shift_cell_xls(f[1][2], _range, opts); sname = supbooks.SheetNames[ixti]; var w = sname; stack.push(sname + "!" + encode_cell_xls(c)); break; case "PtgFunc":; case "PtgFuncVar": var argc = f[1][0], func = f[1][1]; if (!argc) argc = 0; var args = argc == 0 ? [] : stack.slice(-argc); stack.length -= argc; if (func === "User") func = args.shift(); stack.push(func + "(" + args.join(",") + ")"); break; case "PtgBool": stack.push(f[1] ? "TRUE" : "FALSE"); break; case "PtgInt": stack.push(f[1]); break; case "PtgNum": stack.push(String(f[1])); break; case "PtgStr": stack.push('"' + f[1] + '"'); break; case "PtgErr": stack.push(f[1]); break; case "PtgAreaN": type = f[1][0]; r = shift_range_xls(f[1][1], _range, opts); stack.push(encode_range_xls(r, opts)); break; case "PtgArea": type = f[1][0]; r = shift_range_xls(f[1][1], _range, opts); stack.push(encode_range_xls(r, opts)); break; case "PtgArea3d": type = f[1][0]; ixti = f[1][1]; r = f[1][2]; sname = supbooks && supbooks[1] ? supbooks[1][ixti + 1] : "**MISSING**"; stack.push(sname + "!" + encode_range(r)); break; case "PtgAttrSum": stack.push("SUM(" + stack.pop() + ")"); break; case "PtgAttrSemi": break; case "PtgName": nameidx = f[1][2]; var lbl = (supbooks.names || [])[nameidx - 1] || (supbooks[0] || [])[nameidx]; var name = lbl ? lbl.Name : "**MISSING**" + String(nameidx); if (name in XLSXFutureFunctions) name = XLSXFutureFunctions[name]; stack.push(name); break; case "PtgNameX": var bookidx = f[1][1]; nameidx = f[1][2]; var externbook; if (opts.biff <= 5) { if (bookidx < 0) bookidx = -bookidx; if (supbooks[bookidx]) externbook = supbooks[bookidx][nameidx] } else { var pnxname = supbooks.SheetNames[bookidx]; var o = ""; if (((supbooks[bookidx] || [])[0] || [])[0] == 14849) { } else if (((supbooks[bookidx] || [])[0] || [])[0] == 1025) { if (supbooks[bookidx][nameidx] && supbooks[bookidx][nameidx].itab > 0) { o = supbooks.SheetNames[supbooks[bookidx][nameidx].itab - 1] + "!" } } else o = supbooks.SheetNames[nameidx - 1] + "!"; if (supbooks[bookidx] && supbooks[bookidx][nameidx]) o += supbooks[bookidx][nameidx].Name; else if (supbooks[0] && supbooks[0][nameidx]) o += supbooks[0][nameidx].Name; else o += "??NAMEX??"; stack.push(o); break } if (!externbook) externbook = { Name: "??NAMEX??" }; stack.push(externbook.Name); break; case "PtgParen": var lp = "(", rp = ")"; if (last_sp >= 0) { sp = ""; switch (formula[0][last_sp][1][0]) { case 2: lp = fill(" ", formula[0][last_sp][1][1]) + lp; break; case 3: lp = fill("\r", formula[0][last_sp][1][1]) + lp; break; case 4: rp = fill(" ", formula[0][last_sp][1][1]) + rp; break; case 5: rp = fill("\r", formula[0][last_sp][1][1]) + rp; break; default: if (opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]); } last_sp = -1 } stack.push(lp + stack.pop() + rp); break; case "PtgRefErr": stack.push("#REF!"); break; case "PtgRefErr3d": stack.push("#REF!"); break; case "PtgExp": c = { c: f[1][1], r: f[1][0] }; var q = { c: cell.c, r: cell.r }; if (supbooks.sharedf[encode_cell(c)]) { var parsedf = supbooks.sharedf[encode_cell(c)]; stack.push(stringify_formula(parsedf, _range, q, supbooks, opts)) } else { var fnd = false; for (e1 = 0; e1 != supbooks.arrayf.length; ++e1) { e2 = supbooks.arrayf[e1]; if (c.c < e2[0].s.c || c.c > e2[0].e.c) continue; if (c.r < e2[0].s.r || c.r > e2[0].e.r) continue; stack.push(stringify_formula(e2[1], _range, q, supbooks, opts)); fnd = true; break } if (!fnd) stack.push(f[1]) } break; case "PtgArray": stack.push("{" + stringify_array(f[1]) + "}"); break; case "PtgMemArea": break; case "PtgAttrSpace":; case "PtgAttrSpaceSemi": last_sp = ff; break; case "PtgTbl": break; case "PtgMemErr": break; case "PtgMissArg": stack.push(""); break; case "PtgAreaErr": stack.push("#REF!"); break; case "PtgAreaErr3d": stack.push("#REF!");
                    break; case "PtgMemFunc": break; default: throw new Error("Unrecognized Formula Token: " + String(f));
            } var PtgNonDisp = ["PtgAttrSpace", "PtgAttrSpaceSemi", "PtgAttrGoto"]; if (last_sp >= 0 && PtgNonDisp.indexOf(formula[0][ff][0]) == -1) { f = formula[0][last_sp]; var _left = true; switch (f[1][0]) { case 4: _left = false; case 0: sp = fill(" ", f[1][1]); break; case 5: _left = false; case 1: sp = fill("\r", f[1][1]); break; default: sp = ""; if (opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + f[1][0]); } stack.push((_left ? sp : "") + stack.pop() + (_left ? "" : sp)); last_sp = -1 }
        } if (stack.length > 1 && opts.WTF) throw new Error("bad formula stack"); return stack[0]
    } function parse_XLSBParsedFormula(data, length, opts) { var end = data.l + length; var cce = data.read_shift(4); var rgce = parse_Rgce(data, cce, opts); var cb = data.read_shift(4); var rgcb = cb > 0 ? parse_RgbExtra(data, cb, rgce, opts) : null; return [rgce, rgcb] } var parse_XLSBArrayParsedFormula = parse_XLSBParsedFormula; var parse_XLSBCellParsedFormula = parse_XLSBParsedFormula; var parse_XLSBNameParsedFormula = parse_XLSBParsedFormula; var parse_XLSBSharedParsedFormula = parse_XLSBParsedFormula; var PtgDataType = { 1: "REFERENCE", 2: "VALUE", 3: "ARRAY" }; var Cetab = { 0: "BEEP", 1: "OPEN", 2: "OPEN.LINKS", 3: "CLOSE.ALL", 4: "SAVE", 5: "SAVE.AS", 6: "FILE.DELETE", 7: "PAGE.SETUP", 8: "PRINT", 9: "PRINTER.SETUP", 10: "QUIT", 11: "NEW.WINDOW", 12: "ARRANGE.ALL", 13: "WINDOW.SIZE", 14: "WINDOW.MOVE", 15: "FULL", 16: "CLOSE", 17: "RUN", 22: "SET.PRINT.AREA", 23: "SET.PRINT.TITLES", 24: "SET.PAGE.BREAK", 25: "REMOVE.PAGE.BREAK", 26: "FONT", 27: "DISPLAY", 28: "PROTECT.DOCUMENT", 29: "PRECISION", 30: "A1.R1C1", 31: "CALCULATE.NOW", 32: "CALCULATION", 34: "DATA.FIND", 35: "EXTRACT", 36: "DATA.DELETE", 37: "SET.DATABASE", 38: "SET.CRITERIA", 39: "SORT", 40: "DATA.SERIES", 41: "TABLE", 42: "FORMAT.NUMBER", 43: "ALIGNMENT", 44: "STYLE", 45: "BORDER", 46: "CELL.PROTECTION", 47: "COLUMN.WIDTH", 48: "UNDO", 49: "CUT", 50: "COPY", 51: "PASTE", 52: "CLEAR", 53: "PASTE.SPECIAL", 54: "EDIT.DELETE", 55: "INSERT", 56: "FILL.RIGHT", 57: "FILL.DOWN", 61: "DEFINE.NAME", 62: "CREATE.NAMES", 63: "FORMULA.GOTO", 64: "FORMULA.FIND", 65: "SELECT.LAST.CELL", 66: "SHOW.ACTIVE.CELL", 67: "GALLERY.AREA", 68: "GALLERY.BAR", 69: "GALLERY.COLUMN", 70: "GALLERY.LINE", 71: "GALLERY.PIE", 72: "GALLERY.SCATTER", 73: "COMBINATION", 74: "PREFERRED", 75: "ADD.OVERLAY", 76: "GRIDLINES", 77: "SET.PREFERRED", 78: "AXES", 79: "LEGEND", 80: "ATTACH.TEXT", 81: "ADD.ARROW", 82: "SELECT.CHART", 83: "SELECT.PLOT.AREA", 84: "PATTERNS", 85: "MAIN.CHART", 86: "OVERLAY", 87: "SCALE", 88: "FORMAT.LEGEND", 89: "FORMAT.TEXT", 90: "EDIT.REPEAT", 91: "PARSE", 92: "JUSTIFY", 93: "HIDE", 94: "UNHIDE", 95: "WORKSPACE", 96: "FORMULA", 97: "FORMULA.FILL", 98: "FORMULA.ARRAY", 99: "DATA.FIND.NEXT", 100: "DATA.FIND.PREV", 101: "FORMULA.FIND.NEXT", 102: "FORMULA.FIND.PREV", 103: "ACTIVATE", 104: "ACTIVATE.NEXT", 105: "ACTIVATE.PREV", 106: "UNLOCKED.NEXT", 107: "UNLOCKED.PREV", 108: "COPY.PICTURE", 109: "SELECT", 110: "DELETE.NAME", 111: "DELETE.FORMAT", 112: "VLINE", 113: "HLINE", 114: "VPAGE", 115: "HPAGE", 116: "VSCROLL", 117: "HSCROLL", 118: "ALERT", 119: "NEW", 120: "CANCEL.COPY", 121: "SHOW.CLIPBOARD", 122: "MESSAGE", 124: "PASTE.LINK", 125: "APP.ACTIVATE", 126: "DELETE.ARROW", 127: "ROW.HEIGHT", 128: "FORMAT.MOVE", 129: "FORMAT.SIZE", 130: "FORMULA.REPLACE", 131: "SEND.KEYS", 132: "SELECT.SPECIAL", 133: "APPLY.NAMES", 134: "REPLACE.FONT", 135: "FREEZE.PANES", 136: "SHOW.INFO", 137: "SPLIT", 138: "ON.WINDOW", 139: "ON.DATA", 140: "DISABLE.INPUT", 142: "OUTLINE", 143: "LIST.NAMES", 144: "FILE.CLOSE", 145: "SAVE.WORKBOOK", 146: "DATA.FORM", 147: "COPY.CHART", 148: "ON.TIME", 149: "WAIT", 150: "FORMAT.FONT", 151: "FILL.UP", 152: "FILL.LEFT", 153: "DELETE.OVERLAY", 155: "SHORT.MENUS", 159: "SET.UPDATE.STATUS", 161: "COLOR.PALETTE", 162: "DELETE.STYLE", 163: "WINDOW.RESTORE", 164: "WINDOW.MAXIMIZE", 166: "CHANGE.LINK", 167: "CALCULATE.DOCUMENT", 168: "ON.KEY", 169: "APP.RESTORE", 170: "APP.MOVE", 171: "APP.SIZE", 172: "APP.MINIMIZE", 173: "APP.MAXIMIZE", 174: "BRING.TO.FRONT", 175: "SEND.TO.BACK", 185: "MAIN.CHART.TYPE", 186: "OVERLAY.CHART.TYPE", 187: "SELECT.END", 188: "OPEN.MAIL", 189: "SEND.MAIL", 190: "STANDARD.FONT", 191: "CONSOLIDATE", 192: "SORT.SPECIAL", 193: "GALLERY.3D.AREA", 194: "GALLERY.3D.COLUMN", 195: "GALLERY.3D.LINE", 196: "GALLERY.3D.PIE", 197: "VIEW.3D", 198: "GOAL.SEEK", 199: "WORKGROUP", 200: "FILL.GROUP", 201: "UPDATE.LINK", 202: "PROMOTE", 203: "DEMOTE", 204: "SHOW.DETAIL", 206: "UNGROUP", 207: "OBJECT.PROPERTIES", 208: "SAVE.NEW.OBJECT", 209: "SHARE", 210: "SHARE.NAME", 211: "DUPLICATE", 212: "APPLY.STYLE", 213: "ASSIGN.TO.OBJECT", 214: "OBJECT.PROTECTION", 215: "HIDE.OBJECT", 216: "SET.EXTRACT", 217: "CREATE.PUBLISHER", 218: "SUBSCRIBE.TO", 219: "ATTRIBUTES", 220: "SHOW.TOOLBAR", 222: "PRINT.PREVIEW", 223: "EDIT.COLOR", 224: "SHOW.LEVELS", 225: "FORMAT.MAIN", 226: "FORMAT.OVERLAY", 227: "ON.RECALC", 228: "EDIT.SERIES", 229: "DEFINE.STYLE", 240: "LINE.PRINT", 243: "ENTER.DATA", 249: "GALLERY.RADAR", 250: "MERGE.STYLES", 251: "EDITION.OPTIONS", 252: "PASTE.PICTURE", 253: "PASTE.PICTURE.LINK", 254: "SPELLING", 256: "ZOOM", 259: "INSERT.OBJECT", 260: "WINDOW.MINIMIZE", 265: "SOUND.NOTE", 266: "SOUND.PLAY", 267: "FORMAT.SHAPE", 268: "EXTEND.POLYGON", 269: "FORMAT.AUTO", 272: "GALLERY.3D.BAR", 273: "GALLERY.3D.SURFACE", 274: "FILL.AUTO", 276: "CUSTOMIZE.TOOLBAR", 277: "ADD.TOOL", 278: "EDIT.OBJECT", 279: "ON.DOUBLECLICK", 280: "ON.ENTRY", 281: "WORKBOOK.ADD", 282: "WORKBOOK.MOVE", 283: "WORKBOOK.COPY", 284: "WORKBOOK.OPTIONS", 285: "SAVE.WORKSPACE", 288: "CHART.WIZARD", 289: "DELETE.TOOL", 290: "MOVE.TOOL", 291: "WORKBOOK.SELECT", 292: "WORKBOOK.ACTIVATE", 293: "ASSIGN.TO.TOOL", 295: "COPY.TOOL", 296: "RESET.TOOL", 297: "CONSTRAIN.NUMERIC", 298: "PASTE.TOOL", 302: "WORKBOOK.NEW", 305: "SCENARIO.CELLS", 306: "SCENARIO.DELETE", 307: "SCENARIO.ADD", 308: "SCENARIO.EDIT", 309: "SCENARIO.SHOW", 310: "SCENARIO.SHOW.NEXT", 311: "SCENARIO.SUMMARY", 312: "PIVOT.TABLE.WIZARD", 313: "PIVOT.FIELD.PROPERTIES", 314: "PIVOT.FIELD", 315: "PIVOT.ITEM", 316: "PIVOT.ADD.FIELDS", 318: "OPTIONS.CALCULATION", 319: "OPTIONS.EDIT", 320: "OPTIONS.VIEW", 321: "ADDIN.MANAGER", 322: "MENU.EDITOR", 323: "ATTACH.TOOLBARS", 324: "VBAActivate", 325: "OPTIONS.CHART", 328: "VBA.INSERT.FILE", 330: "VBA.PROCEDURE.DEFINITION", 336: "ROUTING.SLIP", 338: "ROUTE.DOCUMENT", 339: "MAIL.LOGON", 342: "INSERT.PICTURE", 343: "EDIT.TOOL", 344: "GALLERY.DOUGHNUT", 350: "CHART.TREND", 352: "PIVOT.ITEM.PROPERTIES", 354: "WORKBOOK.INSERT", 355: "OPTIONS.TRANSITION", 356: "OPTIONS.GENERAL", 370: "FILTER.ADVANCED", 373: "MAIL.ADD.MAILER", 374: "MAIL.DELETE.MAILER", 375: "MAIL.REPLY", 376: "MAIL.REPLY.ALL", 377: "MAIL.FORWARD", 378: "MAIL.NEXT.LETTER", 379: "DATA.LABEL", 380: "INSERT.TITLE", 381: "FONT.PROPERTIES", 382: "MACRO.OPTIONS", 383: "WORKBOOK.HIDE", 384: "WORKBOOK.UNHIDE", 385: "WORKBOOK.DELETE", 386: "WORKBOOK.NAME", 388: "GALLERY.CUSTOM", 390: "ADD.CHART.AUTOFORMAT", 391: "DELETE.CHART.AUTOFORMAT", 392: "CHART.ADD.DATA", 393: "AUTO.OUTLINE", 394: "TAB.ORDER", 395: "SHOW.DIALOG", 396: "SELECT.ALL", 397: "UNGROUP.SHEETS", 398: "SUBTOTAL.CREATE", 399: "SUBTOTAL.REMOVE", 400: "RENAME.OBJECT", 412: "WORKBOOK.SCROLL", 413: "WORKBOOK.NEXT", 414: "WORKBOOK.PREV", 415: "WORKBOOK.TAB.SPLIT", 416: "FULL.SCREEN", 417: "WORKBOOK.PROTECT", 420: "SCROLLBAR.PROPERTIES", 421: "PIVOT.SHOW.PAGES", 422: "TEXT.TO.COLUMNS", 423: "FORMAT.CHARTTYPE", 424: "LINK.FORMAT", 425: "TRACER.DISPLAY", 430: "TRACER.NAVIGATE", 431: "TRACER.CLEAR", 432: "TRACER.ERROR", 433: "PIVOT.FIELD.GROUP", 434: "PIVOT.FIELD.UNGROUP", 435: "CHECKBOX.PROPERTIES", 436: "LABEL.PROPERTIES", 437: "LISTBOX.PROPERTIES", 438: "EDITBOX.PROPERTIES", 439: "PIVOT.REFRESH", 440: "LINK.COMBO", 441: "OPEN.TEXT", 442: "HIDE.DIALOG", 443: "SET.DIALOG.FOCUS", 444: "ENABLE.OBJECT", 445: "PUSHBUTTON.PROPERTIES", 446: "SET.DIALOG.DEFAULT", 447: "FILTER", 448: "FILTER.SHOW.ALL", 449: "CLEAR.OUTLINE", 450: "FUNCTION.WIZARD", 451: "ADD.LIST.ITEM", 452: "SET.LIST.ITEM", 453: "REMOVE.LIST.ITEM", 454: "SELECT.LIST.ITEM", 455: "SET.CONTROL.VALUE", 456: "SAVE.COPY.AS", 458: "OPTIONS.LISTS.ADD", 459: "OPTIONS.LISTS.DELETE", 460: "SERIES.AXES", 461: "SERIES.X", 462: "SERIES.Y", 463: "ERRORBAR.X", 464: "ERRORBAR.Y", 465: "FORMAT.CHART", 466: "SERIES.ORDER", 467: "MAIL.LOGOFF", 468: "CLEAR.ROUTING.SLIP", 469: "APP.ACTIVATE.MICROSOFT", 470: "MAIL.EDIT.MAILER", 471: "ON.SHEET", 472: "STANDARD.WIDTH", 473: "SCENARIO.MERGE", 474: "SUMMARY.INFO", 475: "FIND.FILE", 476: "ACTIVE.CELL.FONT", 477: "ENABLE.TIPWIZARD", 478: "VBA.MAKE.ADDIN", 480: "INSERTDATATABLE", 481: "WORKGROUP.OPTIONS", 482: "MAIL.SEND.MAILER", 485: "AUTOCORRECT", 489: "POST.DOCUMENT", 491: "PICKLIST", 493: "VIEW.SHOW", 494: "VIEW.DEFINE", 495: "VIEW.DELETE", 509: "SHEET.BACKGROUND", 510: "INSERT.MAP.OBJECT", 511: "OPTIONS.MENONO", 517: "MSOCHECKS", 518: "NORMAL", 519: "LAYOUT", 520: "RM.PRINT.AREA", 521: "CLEAR.PRINT.AREA", 522: "ADD.PRINT.AREA", 523: "MOVE.BRK", 545: "HIDECURR.NOTE", 546: "HIDEALL.NOTES", 547: "DELETE.NOTE", 548: "TRAVERSE.NOTES", 549: "ACTIVATE.NOTES", 620: "PROTECT.REVISIONS", 621: "UNPROTECT.REVISIONS", 647: "OPTIONS.ME", 653: "WEB.PUBLISH", 667: "NEWWEBQUERY", 673: "PIVOT.TABLE.CHART", 753: "OPTIONS.SAVE", 755: "OPTIONS.SPELL", 808: "HIDEALL.INKANNOTS" }; var Ftab = { 0: "COUNT", 1: "IF", 2: "ISNA", 3: "ISERROR", 4: "SUM", 5: "AVERAGE", 6: "MIN", 7: "MAX", 8: "ROW", 9: "COLUMN", 10: "NA", 11: "NPV", 12: "STDEV", 13: "DOLLAR", 14: "FIXED", 15: "SIN", 16: "COS", 17: "TAN", 18: "ATAN", 19: "PI", 20: "SQRT", 21: "EXP", 22: "LN", 23: "LOG10", 24: "ABS", 25: "INT", 26: "SIGN", 27: "ROUND", 28: "LOOKUP", 29: "INDEX", 30: "REPT", 31: "MID", 32: "LEN", 33: "VALUE", 34: "TRUE", 35: "FALSE", 36: "AND", 37: "OR", 38: "NOT", 39: "MOD", 40: "DCOUNT", 41: "DSUM", 42: "DAVERAGE", 43: "DMIN", 44: "DMAX", 45: "DSTDEV", 46: "VAR", 47: "DVAR", 48: "TEXT", 49: "LINEST", 50: "TREND", 51: "LOGEST", 52: "GROWTH", 53: "GOTO", 54: "HALT", 55: "RETURN", 56: "PV", 57: "FV", 58: "NPER", 59: "PMT", 60: "RATE", 61: "MIRR", 62: "IRR", 63: "RAND", 64: "MATCH", 65: "DATE", 66: "TIME", 67: "DAY", 68: "MONTH", 69: "YEAR", 70: "WEEKDAY", 71: "HOUR", 72: "MINUTE", 73: "SECOND", 74: "NOW", 75: "AREAS", 76: "ROWS", 77: "COLUMNS", 78: "OFFSET", 79: "ABSREF", 80: "RELREF", 81: "ARGUMENT", 82: "SEARCH", 83: "TRANSPOSE", 84: "ERROR", 85: "STEP", 86: "TYPE", 87: "ECHO", 88: "SET.NAME", 89: "CALLER", 90: "DEREF", 91: "WINDOWS", 92: "SERIES", 93: "DOCUMENTS", 94: "ACTIVE.CELL", 95: "SELECTION", 96: "RESULT", 97: "ATAN2", 98: "ASIN", 99: "ACOS", 100: "CHOOSE", 101: "HLOOKUP", 102: "VLOOKUP", 103: "LINKS", 104: "INPUT", 105: "ISREF", 106: "GET.FORMULA", 107: "GET.NAME", 108: "SET.VALUE", 109: "LOG", 110: "EXEC", 111: "CHAR", 112: "LOWER", 113: "UPPER", 114: "PROPER", 115: "LEFT", 116: "RIGHT", 117: "EXACT", 118: "TRIM", 119: "REPLACE", 120: "SUBSTITUTE", 121: "CODE", 122: "NAMES", 123: "DIRECTORY", 124: "FIND", 125: "CELL", 126: "ISERR", 127: "ISTEXT", 128: "ISNUMBER", 129: "ISBLANK", 130: "T", 131: "N", 132: "FOPEN", 133: "FCLOSE", 134: "FSIZE", 135: "FREADLN", 136: "FREAD", 137: "FWRITELN", 138: "FWRITE", 139: "FPOS", 140: "DATEVALUE", 141: "TIMEVALUE", 142: "SLN", 143: "SYD", 144: "DDB", 145: "GET.DEF", 146: "REFTEXT", 147: "TEXTREF", 148: "INDIRECT", 149: "REGISTER", 150: "CALL", 151: "ADD.BAR", 152: "ADD.MENU", 153: "ADD.COMMAND", 154: "ENABLE.COMMAND", 155: "CHECK.COMMAND", 156: "RENAME.COMMAND", 157: "SHOW.BAR", 158: "DELETE.MENU", 159: "DELETE.COMMAND", 160: "GET.CHART.ITEM", 161: "DIALOG.BOX", 162: "CLEAN", 163: "MDETERM", 164: "MINVERSE", 165: "MMULT", 166: "FILES", 167: "IPMT", 168: "PPMT", 169: "COUNTA", 170: "CANCEL.KEY", 171: "FOR", 172: "WHILE", 173: "BREAK", 174: "NEXT", 175: "INITIATE", 176: "REQUEST", 177: "POKE", 178: "EXECUTE", 179: "TERMINATE", 180: "RESTART", 181: "HELP", 182: "GET.BAR", 183: "PRODUCT", 184: "FACT", 185: "GET.CELL", 186: "GET.WORKSPACE", 187: "GET.WINDOW", 188: "GET.DOCUMENT", 189: "DPRODUCT", 190: "ISNONTEXT", 191: "GET.NOTE", 192: "NOTE", 193: "STDEVP", 194: "VARP", 195: "DSTDEVP", 196: "DVARP", 197: "TRUNC", 198: "ISLOGICAL", 199: "DCOUNTA", 200: "DELETE.BAR", 201: "UNREGISTER", 204: "USDOLLAR", 205: "FINDB", 206: "SEARCHB", 207: "REPLACEB", 208: "LEFTB", 209: "RIGHTB", 210: "MIDB", 211: "LENB", 212: "ROUNDUP", 213: "ROUNDDOWN", 214: "ASC", 215: "DBCS", 216: "RANK", 219: "ADDRESS", 220: "DAYS360", 221: "TODAY", 222: "VDB", 223: "ELSE", 224: "ELSE.IF", 225: "END.IF", 226: "FOR.CELL", 227: "MEDIAN", 228: "SUMPRODUCT", 229: "SINH", 230: "COSH", 231: "TANH", 232: "ASINH", 233: "ACOSH", 234: "ATANH", 235: "DGET", 236: "CREATE.OBJECT", 237: "VOLATILE", 238: "LAST.ERROR", 239: "CUSTOM.UNDO", 240: "CUSTOM.REPEAT", 241: "FORMULA.CONVERT", 242: "GET.LINK.INFO", 243: "TEXT.BOX", 244: "INFO", 245: "GROUP", 246: "GET.OBJECT", 247: "DB", 248: "PAUSE", 251: "RESUME", 252: "FREQUENCY", 253: "ADD.TOOLBAR", 254: "DELETE.TOOLBAR", 255: "User", 256: "RESET.TOOLBAR", 257: "EVALUATE", 258: "GET.TOOLBAR", 259: "GET.TOOL", 260: "SPELLING.CHECK", 261: "ERROR.TYPE", 262: "APP.TITLE", 263: "WINDOW.TITLE", 264: "SAVE.TOOLBAR", 265: "ENABLE.TOOL", 266: "PRESS.TOOL", 267: "REGISTER.ID", 268: "GET.WORKBOOK", 269: "AVEDEV", 270: "BETADIST", 271: "GAMMALN", 272: "BETAINV", 273: "BINOMDIST", 274: "CHIDIST", 275: "CHIINV", 276: "COMBIN", 277: "CONFIDENCE", 278: "CRITBINOM", 279: "EVEN", 280: "EXPONDIST", 281: "FDIST", 282: "FINV", 283: "FISHER", 284: "FISHERINV", 285: "FLOOR", 286: "GAMMADIST", 287: "GAMMAINV", 288: "CEILING", 289: "HYPGEOMDIST", 290: "LOGNORMDIST", 291: "LOGINV", 292: "NEGBINOMDIST", 293: "NORMDIST", 294: "NORMSDIST", 295: "NORMINV", 296: "NORMSINV", 297: "STANDARDIZE", 298: "ODD", 299: "PERMUT", 300: "POISSON", 301: "TDIST", 302: "WEIBULL", 303: "SUMXMY2", 304: "SUMX2MY2", 305: "SUMX2PY2", 306: "CHITEST", 307: "CORREL", 308: "COVAR", 309: "FORECAST", 310: "FTEST", 311: "INTERCEPT", 312: "PEARSON", 313: "RSQ", 314: "STEYX", 315: "SLOPE", 316: "TTEST", 317: "PROB", 318: "DEVSQ", 319: "GEOMEAN", 320: "HARMEAN", 321: "SUMSQ", 322: "KURT", 323: "SKEW", 324: "ZTEST", 325: "LARGE", 326: "SMALL", 327: "QUARTILE", 328: "PERCENTILE", 329: "PERCENTRANK", 330: "MODE", 331: "TRIMMEAN", 332: "TINV", 334: "MOVIE.COMMAND", 335: "GET.MOVIE", 336: "CONCATENATE", 337: "POWER", 338: "PIVOT.ADD.DATA", 339: "GET.PIVOT.TABLE", 340: "GET.PIVOT.FIELD", 341: "GET.PIVOT.ITEM", 342: "RADIANS", 343: "DEGREES", 344: "SUBTOTAL", 345: "SUMIF", 346: "COUNTIF", 347: "COUNTBLANK", 348: "SCENARIO.GET", 349: "OPTIONS.LISTS.GET", 350: "ISPMT", 351: "DATEDIF", 352: "DATESTRING", 353: "NUMBERSTRING", 354: "ROMAN", 355: "OPEN.DIALOG", 356: "SAVE.DIALOG", 357: "VIEW.GET", 358: "GETPIVOTDATA", 359: "HYPERLINK", 360: "PHONETIC", 361: "AVERAGEA", 362: "MAXA", 363: "MINA", 364: "STDEVPA", 365: "VARPA", 366: "STDEVA", 367: "VARA", 368: "BAHTTEXT", 369: "THAIDAYOFWEEK", 370: "THAIDIGIT", 371: "THAIMONTHOFYEAR", 372: "THAINUMSOUND", 373: "THAINUMSTRING", 374: "THAISTRINGLENGTH", 375: "ISTHAIDIGIT", 376: "ROUNDBAHTDOWN", 377: "ROUNDBAHTUP", 378: "THAIYEAR", 379: "RTD", 380: "CUBEVALUE", 381: "CUBEMEMBER", 382: "CUBEMEMBERPROPERTY", 383: "CUBERANKEDMEMBER", 384: "HEX2BIN", 385: "HEX2DEC", 386: "HEX2OCT", 387: "DEC2BIN", 388: "DEC2HEX", 389: "DEC2OCT", 390: "OCT2BIN", 391: "OCT2HEX", 392: "OCT2DEC", 393: "BIN2DEC", 394: "BIN2OCT", 395: "BIN2HEX", 396: "IMSUB", 397: "IMDIV", 398: "IMPOWER", 399: "IMABS", 400: "IMSQRT", 401: "IMLN", 402: "IMLOG2", 403: "IMLOG10", 404: "IMSIN", 405: "IMCOS", 406: "IMEXP", 407: "IMARGUMENT", 408: "IMCONJUGATE", 409: "IMAGINARY", 410: "IMREAL", 411: "COMPLEX", 412: "IMSUM", 413: "IMPRODUCT", 414: "SERIESSUM", 415: "FACTDOUBLE", 416: "SQRTPI", 417: "QUOTIENT", 418: "DELTA", 419: "GESTEP", 420: "ISEVEN", 421: "ISODD", 422: "MROUND", 423: "ERF", 424: "ERFC", 425: "BESSELJ", 426: "BESSELK", 427: "BESSELY", 428: "BESSELI", 429: "XIRR", 430: "XNPV", 431: "PRICEMAT", 432: "YIELDMAT", 433: "INTRATE", 434: "RECEIVED", 435: "DISC", 436: "PRICEDISC", 437: "YIELDDISC", 438: "TBILLEQ", 439: "TBILLPRICE", 440: "TBILLYIELD", 441: "PRICE", 442: "YIELD", 443: "DOLLARDE", 444: "DOLLARFR", 445: "NOMINAL", 446: "EFFECT", 447: "CUMPRINC", 448: "CUMIPMT", 449: "EDATE", 450: "EOMONTH", 451: "YEARFRAC", 452: "COUPDAYBS", 453: "COUPDAYS", 454: "COUPDAYSNC", 455: "COUPNCD", 456: "COUPNUM", 457: "COUPPCD", 458: "DURATION", 459: "MDURATION", 460: "ODDLPRICE", 461: "ODDLYIELD", 462: "ODDFPRICE", 463: "ODDFYIELD", 464: "RANDBETWEEN", 465: "WEEKNUM", 466: "AMORDEGRC", 467: "AMORLINC", 468: "CONVERT", 724: "SHEETJS", 469: "ACCRINT", 470: "ACCRINTM", 471: "WORKDAY", 472: "NETWORKDAYS", 473: "GCD", 474: "MULTINOMIAL", 475: "LCM", 476: "FVSCHEDULE", 477: "CUBEKPIMEMBER", 478: "CUBESET", 479: "CUBESETCOUNT", 480: "IFERROR", 481: "COUNTIFS", 482: "SUMIFS", 483: "AVERAGEIF", 484: "AVERAGEIFS" }; var FtabArgc = { 2: 1, 3: 1, 15: 1, 16: 1, 17: 1, 18: 1, 19: 0, 20: 1, 21: 1, 22: 1, 23: 1, 24: 1, 25: 1, 26: 1, 27: 2, 30: 2, 31: 3, 32: 1, 33: 1, 38: 1, 39: 2, 40: 3, 41: 3, 42: 3, 43: 3, 44: 3, 45: 3, 47: 3, 48: 2, 53: 1, 61: 3, 65: 3, 66: 3, 67: 1, 68: 1, 69: 1, 70: 1, 71: 1, 72: 1, 73: 1, 75: 1, 76: 1, 77: 1, 79: 2, 80: 2, 83: 1, 85: 0, 86: 1, 90: 1, 97: 2, 98: 1, 99: 1, 101: 3, 102: 3, 105: 1, 111: 1, 112: 1, 113: 1, 114: 1, 117: 2, 118: 1, 119: 4, 121: 1, 126: 1, 127: 1, 128: 1, 129: 1, 130: 1, 131: 1, 133: 1, 134: 1, 135: 1, 136: 2, 137: 2, 138: 2, 140: 1, 141: 1, 142: 3, 143: 4, 144: 4, 162: 1, 163: 1, 164: 1, 165: 2, 172: 1, 175: 2, 176: 2, 177: 3, 178: 2, 179: 1, 184: 1, 189: 3, 190: 1, 195: 3, 196: 3, 197: 1, 198: 1, 199: 3, 201: 1, 207: 4, 210: 3, 211: 1, 212: 2, 213: 2, 214: 1, 215: 1, 229: 1, 230: 1, 231: 1, 232: 1, 233: 1, 234: 1, 235: 3, 244: 1, 247: 4, 252: 2, 257: 1, 261: 1, 271: 1, 273: 4, 274: 2, 275: 2, 276: 2, 277: 3, 278: 3, 279: 1, 280: 3, 281: 3, 282: 3, 283: 1, 284: 1, 285: 2, 286: 4, 287: 3, 288: 2, 289: 4, 290: 3, 291: 3, 292: 3, 293: 4, 294: 1, 295: 3, 296: 1, 297: 3, 298: 1, 299: 2, 300: 3, 301: 3, 302: 4, 303: 2, 304: 2, 305: 2, 306: 2, 307: 2, 308: 2, 309: 3, 310: 2, 311: 2, 312: 2, 313: 2, 314: 2, 315: 2, 316: 4, 325: 2, 326: 2, 327: 2, 328: 2, 331: 2, 332: 2, 337: 2, 342: 1, 343: 1, 346: 2, 347: 1, 350: 4, 351: 3, 352: 1, 353: 2, 360: 1, 368: 1, 369: 1, 370: 1, 371: 1, 372: 1, 373: 1, 374: 1, 375: 1, 376: 1, 377: 1, 378: 1, 382: 3, 385: 1, 392: 1, 393: 1, 396: 2, 397: 2, 398: 2, 399: 1, 400: 1, 401: 1, 402: 1, 403: 1, 404: 1, 405: 1, 406: 1, 407: 1, 408: 1, 409: 1, 410: 1, 414: 4, 415: 1, 416: 1, 417: 2, 420: 1, 421: 1, 422: 2, 424: 1, 425: 2, 426: 2, 427: 2, 428: 2, 430: 3, 438: 3, 439: 3, 440: 3, 443: 2, 444: 2, 445: 2, 446: 2, 447: 6, 448: 6, 449: 2, 450: 2, 464: 2, 468: 3, 476: 2, 479: 1, 480: 2, 65535: 0 }; var XLSXFutureFunctions = { "_xlfn.ACOT": "ACOT", "_xlfn.ACOTH": "ACOTH", "_xlfn.AGGREGATE": "AGGREGATE", "_xlfn.ARABIC": "ARABIC", "_xlfn.AVERAGEIF": "AVERAGEIF", "_xlfn.AVERAGEIFS": "AVERAGEIFS", "_xlfn.BASE": "BASE", "_xlfn.BETA.DIST": "BETA.DIST", "_xlfn.BETA.INV": "BETA.INV", "_xlfn.BINOM.DIST": "BINOM.DIST", "_xlfn.BINOM.DIST.RANGE": "BINOM.DIST.RANGE", "_xlfn.BINOM.INV": "BINOM.INV", "_xlfn.BITAND": "BITAND", "_xlfn.BITLSHIFT": "BITLSHIFT", "_xlfn.BITOR": "BITOR", "_xlfn.BITRSHIFT": "BITRSHIFT", "_xlfn.BITXOR": "BITXOR", "_xlfn.CEILING.MATH": "CEILING.MATH", "_xlfn.CEILING.PRECISE": "CEILING.PRECISE", "_xlfn.CHISQ.DIST": "CHISQ.DIST", "_xlfn.CHISQ.DIST.RT": "CHISQ.DIST.RT", "_xlfn.CHISQ.INV": "CHISQ.INV", "_xlfn.CHISQ.INV.RT": "CHISQ.INV.RT", "_xlfn.CHISQ.TEST": "CHISQ.TEST", "_xlfn.COMBINA": "COMBINA", "_xlfn.CONFIDENCE.NORM": "CONFIDENCE.NORM", "_xlfn.CONFIDENCE.T": "CONFIDENCE.T", "_xlfn.COT": "COT", "_xlfn.COTH": "COTH", "_xlfn.COUNTIFS": "COUNTIFS", "_xlfn.COVARIANCE.P": "COVARIANCE.P", "_xlfn.COVARIANCE.S": "COVARIANCE.S", "_xlfn.CSC": "CSC", "_xlfn.CSCH": "CSCH", "_xlfn.DAYS": "DAYS", "_xlfn.DECIMAL": "DECIMAL", "_xlfn.ECMA.CEILING": "ECMA.CEILING", "_xlfn.ERF.PRECISE": "ERF.PRECISE", "_xlfn.ERFC.PRECISE": "ERFC.PRECISE", "_xlfn.EXPON.DIST": "EXPON.DIST", "_xlfn.F.DIST": "F.DIST", "_xlfn.F.DIST.RT": "F.DIST.RT", "_xlfn.F.INV": "F.INV", "_xlfn.F.INV.RT": "F.INV.RT", "_xlfn.F.TEST": "F.TEST", "_xlfn.FILTERXML": "FILTERXML", "_xlfn.FLOOR.MATH": "FLOOR.MATH", "_xlfn.FLOOR.PRECISE": "FLOOR.PRECISE", "_xlfn.FORMULATEXT": "FORMULATEXT", "_xlfn.GAMMA": "GAMMA", "_xlfn.GAMMA.DIST": "GAMMA.DIST", "_xlfn.GAMMA.INV": "GAMMA.INV", "_xlfn.GAMMALN.PRECISE": "GAMMALN.PRECISE", "_xlfn.GAUSS": "GAUSS", "_xlfn.HYPGEOM.DIST": "HYPGEOM.DIST", "_xlfn.IFNA": "IFNA", "_xlfn.IFERROR": "IFERROR", "_xlfn.IMCOSH": "IMCOSH", "_xlfn.IMCOT": "IMCOT", "_xlfn.IMCSC": "IMCSC", "_xlfn.IMCSCH": "IMCSCH", "_xlfn.IMSEC": "IMSEC", "_xlfn.IMSECH": "IMSECH", "_xlfn.IMSINH": "IMSINH", "_xlfn.IMTAN": "IMTAN", "_xlfn.ISFORMULA": "ISFORMULA", "_xlfn.ISO.CEILING": "ISO.CEILING", "_xlfn.ISOWEEKNUM": "ISOWEEKNUM", "_xlfn.LOGNORM.DIST": "LOGNORM.DIST", "_xlfn.LOGNORM.INV": "LOGNORM.INV", "_xlfn.MODE.MULT": "MODE.MULT", "_xlfn.MODE.SNGL": "MODE.SNGL", "_xlfn.MUNIT": "MUNIT", "_xlfn.NEGBINOM.DIST": "NEGBINOM.DIST", "_xlfn.NETWORKDAYS.INTL": "NETWORKDAYS.INTL", "_xlfn.NIGBINOM": "NIGBINOM", "_xlfn.NORM.DIST": "NORM.DIST", "_xlfn.NORM.INV": "NORM.INV", "_xlfn.NORM.S.DIST": "NORM.S.DIST", "_xlfn.NORM.S.INV": "NORM.S.INV", "_xlfn.NUMBERVALUE": "NUMBERVALUE", "_xlfn.PDURATION": "PDURATION", "_xlfn.PERCENTILE.EXC": "PERCENTILE.EXC", "_xlfn.PERCENTILE.INC": "PERCENTILE.INC", "_xlfn.PERCENTRANK.EXC": "PERCENTRANK.EXC", "_xlfn.PERCENTRANK.INC": "PERCENTRANK.INC", "_xlfn.PERMUTATIONA": "PERMUTATIONA", "_xlfn.PHI": "PHI", "_xlfn.POISSON.DIST": "POISSON.DIST", "_xlfn.QUARTILE.EXC": "QUARTILE.EXC", "_xlfn.QUARTILE.INC": "QUARTILE.INC", "_xlfn.QUERYSTRING": "QUERYSTRING", "_xlfn.RANK.AVG": "RANK.AVG", "_xlfn.RANK.EQ": "RANK.EQ", "_xlfn.RRI": "RRI", "_xlfn.SEC": "SEC", "_xlfn.SECH": "SECH", "_xlfn.SHEET": "SHEET", "_xlfn.SHEETS": "SHEETS", "_xlfn.SKEW.P": "SKEW.P", "_xlfn.STDEV.P": "STDEV.P", "_xlfn.STDEV.S": "STDEV.S", "_xlfn.SUMIFS": "SUMIFS", "_xlfn.T.DIST": "T.DIST", "_xlfn.T.DIST.2T": "T.DIST.2T", "_xlfn.T.DIST.RT": "T.DIST.RT", "_xlfn.T.INV": "T.INV", "_xlfn.T.INV.2T": "T.INV.2T", "_xlfn.T.TEST": "T.TEST", "_xlfn.UNICHAR": "UNICHAR", "_xlfn.UNICODE": "UNICODE", "_xlfn.VAR.P": "VAR.P", "_xlfn.VAR.S": "VAR.S", "_xlfn.WEBSERVICE": "WEBSERVICE", "_xlfn.WEIBULL.DIST": "WEIBULL.DIST", "_xlfn.WORKDAY.INTL": "WORKDAY.INTL", "_xlfn.XOR": "XOR", "_xlfn.Z.TEST": "Z.TEST" }; function ods_to_csf_formula(f) { if (f.substr(0, 3) == "of:") f = f.substr(3); if (f.charCodeAt(0) == 61) { f = f.substr(1); if (f.charCodeAt(0) == 61) f = f.substr(1) } f = f.replace(/COM\.MICROSOFT\./g, ""); f = f.replace(/\[((?:\.[A-Z]+[0-9]+)(?::\.[A-Z]+[0-9]+)?)\]/g, function ($$, $1) { return $1.replace(/\./g, "") }); f = f.replace(/\[.(#[A-Z]*[?!])\]/g, "$1"); return f.replace(/[;~]/g, ",").replace(/\|/g, ";") } function csf_to_ods_formula(f) { var o = "of:=" + f.replace(crefregex, "$1[.$2$3$4$5]").replace(/\]:\[/g, ":"); return o.replace(/;/g, "|").replace(/,/g, ";") } function ods_to_csf_range_3D(r) { var a = r.split(":"); var s = a[0].split(".")[0]; return [s, a[0].split(".")[1] + ":" + a[1].split(".")[1]] } var strs = {}; var _ssfopts = {}; RELS.WS = ["http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet", "http://purl.oclc.org/ooxml/officeDocument/relationships/worksheet"]; function get_sst_id(sst, str) { for (var i = 0, len = sst.length; i < len; ++i) if (sst[i].t === str) { sst.Count++; return i } sst[len] = { t: str }; sst.Count++; sst.Unique++; return len } function col_obj_w(C, col) { var p = { min: C + 1, max: C + 1 }; var wch = -1; if (col.MDW) MDW = col.MDW; if (col.width != null) p.customWidth = 1; else if (col.wpx != null) wch = px2char(col.wpx); else if (col.wch != null) wch = col.wch; if (wch > -1) { p.width = char2width(wch); p.customWidth = 1 } else if (col.width != null) p.width = col.width; if (col.hidden) p.hidden = true; return p } function default_margins(margins, mode) { if (!margins) return; var defs = [.7, .7, .75, .75, .3, .3]; if (mode == "xlml") defs = [1, 1, 1, 1, .5, .5]; if (margins.left == null) margins.left = defs[0]; if (margins.right == null) margins.right = defs[1]; if (margins.top == null) margins.top = defs[2]; if (margins.bottom == null) margins.bottom = defs[3]; if (margins.header == null) margins.header = defs[4]; if (margins.footer == null) margins.footer = defs[5] } function get_cell_style(styles, cell, opts) { var z = opts.revssf[cell.z != null ? cell.z : "General"]; var i = 60, len = styles.length; if (z == null && opts.ssf) { for (; i < 392; ++i) if (opts.ssf[i] == null) { SSF.load(cell.z, i); opts.ssf[i] = cell.z; opts.revssf[cell.z] = z = i; break } } for (i = 0; i != len; ++i) if (styles[i].numFmtId === z) return i; styles[len] = { numFmtId: z, fontId: 0, fillId: 0, borderId: 0, xfId: 0, applyNumberFormat: 1 }; return len } function safe_format(p, fmtid, fillid, opts, themes, styles) { if (p.t === "z") return; if (p.t === "d" && typeof p.v === "string") p.v = parseDate(p.v); try { if (opts.cellNF) p.z = SSF._table[fmtid] } catch (e) { if (opts.WTF) throw e } if (!opts || opts.cellText !== false) try { if (p.t === "e") p.w = p.w || BErr[p.v]; else if (fmtid === 0) { if (p.t === "n") { if ((p.v | 0) === p.v) p.w = SSF._general_int(p.v, _ssfopts); else p.w = SSF._general_num(p.v, _ssfopts) } else if (p.t === "d") { var dd = datenum(p.v); if ((dd | 0) === dd) p.w = SSF._general_int(dd, _ssfopts); else p.w = SSF._general_num(dd, _ssfopts) } else if (p.v === undefined) return ""; else p.w = SSF._general(p.v, _ssfopts) } else if (p.t === "d") p.w = SSF.format(fmtid, datenum(p.v), _ssfopts); else p.w = SSF.format(fmtid, p.v, _ssfopts) } catch (e) { if (opts.WTF) throw e } if (fillid) try { p.s = styles.Fills[fillid]; if (p.s.fgColor && p.s.fgColor.theme && !p.s.fgColor.rgb) { p.s.fgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.fgColor.theme].rgb, p.s.fgColor.tint || 0); if (opts.WTF) p.s.fgColor.raw_rgb = themes.themeElements.clrScheme[p.s.fgColor.theme].rgb } if (p.s.bgColor && p.s.bgColor.theme) { p.s.bgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.bgColor.theme].rgb, p.s.bgColor.tint || 0); if (opts.WTF) p.s.bgColor.raw_rgb = themes.themeElements.clrScheme[p.s.bgColor.theme].rgb } } catch (e) { if (opts.WTF) throw e } } function parse_ws_xml_dim(ws, s) { var d = safe_decode_range(s); if (d.s.r <= d.e.r && d.s.c <= d.e.c && d.s.r >= 0 && d.s.c >= 0) ws["!ref"] = encode_range(d) } var mergecregex = /<(?:\w:)?mergeCell ref="[A-Z0-9:]+"\s*[\/]?>/g; var sheetdataregex = /<(?:\w+:)?sheetData>([\s\S]*)<\/(?:\w+:)?sheetData>/; var hlinkregex = /<(?:\w:)?hyperlink [^>]*>/gm; var dimregex = /"(\w*:\w*)"/; var colregex = /<(?:\w:)?col[^>]*[\/]?>/g; var afregex = /<(?:\w:)?autoFilter[^>]*([\/]|>([\s\S]*)<\/(?:\w:)?autoFilter)>/g; var marginregex = /<(?:\w:)?pageMargins[^>]*\/>/g; function parse_ws_xml(data, opts, rels, wb, themes, styles) { if (!data) return data; if (DENSE != null && opts.dense == null) opts.dense = DENSE; var s = opts.dense ? [] : {}; var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } }; var data1 = "", data2 = ""; var mtch = data.match(sheetdataregex); if (mtch) { data1 = data.substr(0, mtch.index); data2 = data.substr(mtch.index + mtch[0].length) } else data1 = data2 = data; var ridx = (data1.match(/<(?:\w*:)?dimension/) || { index: -1 }).index; if (ridx > 0) { var ref = data1.substr(ridx, 50).match(dimregex); if (ref) parse_ws_xml_dim(s, ref[1]) } var columns = []; if (opts.cellStyles) { var cols = data1.match(colregex); if (cols) parse_ws_xml_cols(columns, cols) } if (mtch) parse_ws_xml_data(mtch[1], s, opts, refguess, themes, styles); var afilter = data2.match(afregex); if (afilter) s["!autofilter"] = parse_ws_xml_autofilter(afilter[0]); var mergecells = []; var merges = data2.match(mergecregex); if (merges) for (ridx = 0; ridx != merges.length; ++ridx) mergecells[ridx] = safe_decode_range(merges[ridx].substr(merges[ridx].indexOf('"') + 1)); var hlink = data2.match(hlinkregex); if (hlink) parse_ws_xml_hlinks(s, hlink, rels); var margins = data2.match(marginregex); if (margins) s["!margins"] = parse_ws_xml_margins(parsexmltag(margins[0])); if (!s["!ref"] && refguess.e.c >= refguess.s.c && refguess.e.r >= refguess.s.r) s["!ref"] = encode_range(refguess); if (opts.sheetRows > 0 && s["!ref"]) { var tmpref = safe_decode_range(s["!ref"]); if (opts.sheetRows < +tmpref.e.r) { tmpref.e.r = opts.sheetRows - 1; if (tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r; if (tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r; if (tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c; if (tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c; s["!fullref"] = s["!ref"]; s["!ref"] = encode_range(tmpref) } } if (columns.length > 0) s["!cols"] = columns; if (mergecells.length > 0) s["!merges"] = mergecells; return s } function write_ws_xml_merges(merges) { if (merges.length == 0) return ""; var o = '<mergeCells count="' + merges.length + '">'; for (var i = 0; i != merges.length; ++i) o += '<mergeCell ref="' + encode_range(merges[i]) + '"/>'; return o + "</mergeCells>" } function write_ws_xml_protection(sp) { var o = { sheet: 1 }; var deffalse = ["objects", "scenarios", "selectLockedCells", "selectUnlockedCells"]; var deftrue = ["formatColumns", "formatRows", "formatCells", "insertColumns", "insertRows", "insertHyperlinks", "deleteColumns", "deleteRows", "sort", "autoFilter", "pivotTables"]; deffalse.forEach(function (n) { if (sp[n] != null && sp[n]) o[n] = "1" }); deftrue.forEach(function (n) { if (sp[n] != null && !sp[n]) o[n] = "0" }); if (sp.password) o.password = crypto_CreatePasswordVerifier_Method1(sp.password).toString(16).toUpperCase(); return writextag("sheetProtection", null, o) } function parse_ws_xml_hlinks(s, data, rels) { var dense = Array.isArray(s); for (var i = 0; i != data.length; ++i) { var val = parsexmltag(utf8read(data[i]), true); if (!val.ref) return; var rel = rels ? rels["!id"][val.id] : null; if (rel) { val.Target = rel.Target; if (val.location) val.Target += "#" + val.location; val.Rel = rel } else { val.Target = val.location; rel = { Target: val.location, TargetMode: "Internal" }; val.Rel = rel } if (val.tooltip) { val.Tooltip = val.tooltip; delete val.tooltip } var rng = safe_decode_range(val.ref); for (var R = rng.s.r; R <= rng.e.r; ++R) for (var C = rng.s.c; C <= rng.e.c; ++C) { var addr = encode_cell({ c: C, r: R }); if (dense) { if (!s[R]) s[R] = []; if (!s[R][C]) s[R][C] = { t: "z", v: undefined }; s[R][C].l = val } else { if (!s[addr]) s[addr] = { t: "z", v: undefined }; s[addr].l = val } } } } function parse_ws_xml_margins(margin) { var o = {};["left", "right", "top", "bottom", "header", "footer"].forEach(function (k) { if (margin[k]) o[k] = parseFloat(margin[k]) }); return o } function write_ws_xml_margins(margin) { default_margins(margin); return writextag("pageMargins", null, margin) } function parse_ws_xml_cols(columns, cols) { var seencol = false; for (var coli = 0; coli != cols.length; ++coli) { var coll = parsexmltag(cols[coli], true); if (coll.hidden) coll.hidden = parsexmlbool(coll.hidden); var colm = parseInt(coll.min, 10) - 1, colM = parseInt(coll.max, 10) - 1; delete coll.min; delete coll.max; coll.width = +coll.width; if (!seencol && coll.width) { seencol = true; find_mdw_colw(coll.width) } process_col(coll); while (colm <= colM) columns[colm++] = dup(coll) } } function write_ws_xml_cols(ws, cols) { var o = ["<cols>"], col, width; for (var i = 0; i != cols.length; ++i) { if (!(col = cols[i])) continue; o[o.length] = writextag("col", null, col_obj_w(i, col)) } o[o.length] = "</cols>"; return o.join("") } function parse_ws_xml_autofilter(data) { var o = { ref: (data.match(/ref="([^"]*)"/) || [])[1] }; return o } function write_ws_xml_autofilter(data) { return writextag("autoFilter", null, { ref: data.ref }) } function write_ws_xml_sheetviews(ws, opts, idx, wb) { return writextag("sheetViews", writextag("sheetView", null, { workbookViewId: "0" }), {}) } function write_ws_xml_cell(cell, ref, ws, opts, idx, wb) { if (cell.v === undefined && cell.f === undefined || cell.t === "z") return ""; var vv = ""; var oldt = cell.t, oldv = cell.v; switch (cell.t) { case "b": vv = cell.v ? "1" : "0"; break; case "n": vv = "" + cell.v; break; case "e": vv = BErr[cell.v]; break; case "d": if (opts.cellDates) vv = parseDate(cell.v, -1).toISOString(); else { cell.t = "n"; vv = "" + (cell.v = datenum(parseDate(cell.v))) } if (typeof cell.z === "undefined") cell.z = SSF._table[14]; break; default: vv = cell.v; break; } var v = writetag("v", escapexml(vv)), o = { r: ref }; var os = get_cell_style(opts.cellXfs, cell, opts); if (os !== 0) o.s = os; switch (cell.t) { case "n": break; case "d": o.t = "d"; break; case "b": o.t = "b"; break; case "e": o.t = "e"; break; default: if (cell.v == null) { delete cell.t; break } if (opts.bookSST) { v = writetag("v", "" + get_sst_id(opts.Strings, cell.v)); o.t = "s"; break } o.t = "str"; break; } if (cell.t != oldt) { cell.t = oldt; cell.v = oldv } if (cell.f) { var ff = cell.F && cell.F.substr(0, ref.length) == ref ? { t: "array", ref: cell.F } : null; v = writextag("f", escapexml(cell.f), ff) + (cell.v != null ? v : "") } if (cell.l) ws["!links"].push([ref, cell.l]); if (cell.c) ws["!comments"].push([ref, cell.c]); return writextag("c", v, o) } var parse_ws_xml_data = function parse_ws_xml_data_factory() {
        var cellregex = /<(?:\w+:)?c[ >]/, rowregex = /<\/(?:\w+:)?row>/; var rregex = /r=["']([^"']*)["']/, isregex = /<(?:\w+:)?is>([\S\s]*?)<\/(?:\w+:)?is>/; var refregex = /ref=["']([^"']*)["']/; var match_v = matchtag("v"), match_f = matchtag("f"); return function parse_ws_xml_data(sdata, s, opts, guess, themes, styles) {
            var ri = 0, x = "", cells = [], cref = [], idx = 0, i = 0, cc = 0, d = "", p; var tag, tagr = 0, tagc = 0; var sstr, ftag; var fmtid = 0, fillid = 0; var do_format = Array.isArray(styles.CellXf), cf; var arrayf = []; var sharedf = []; var dense = Array.isArray(s); var rows = [], rowobj = {}, rowrite = false; for (var marr = sdata.split(rowregex), mt = 0, marrlen = marr.length; mt != marrlen; ++mt) {
                x = marr[mt].trim(); var xlen = x.length; if (xlen === 0) continue; for (ri = 0; ri < xlen; ++ri) if (x.charCodeAt(ri) === 62) break; ++ri; tag = parsexmltag(x.substr(0, ri), true); tagr = tag.r != null ? parseInt(tag.r, 10) : tagr + 1; tagc = -1; if (opts.sheetRows && opts.sheetRows < tagr) continue; if (guess.s.r > tagr - 1) guess.s.r = tagr - 1; if (guess.e.r < tagr - 1) guess.e.r = tagr - 1; if (opts && opts.cellStyles) { rowobj = {}; rowrite = false; if (tag.ht) { rowrite = true; rowobj.hpt = parseFloat(tag.ht); rowobj.hpx = pt2px(rowobj.hpt) } if (tag.hidden == "1") { rowrite = true; rowobj.hidden = true } if (tag.outlineLevel != null) { rowrite = true; rowobj.level = +tag.outlineLevel } if (rowrite) rows[tagr - 1] = rowobj } cells = x.substr(ri).split(cellregex); for (ri = 0; ri != cells.length; ++ri) {
                    x = cells[ri].trim(); if (x.length === 0) continue; cref = x.match(rregex); idx = ri; i = 0; cc = 0; x = "<c " + (x.substr(0, 1) == "<" ? ">" : "") + x; if (cref != null && cref.length === 2) { idx = 0; d = cref[1]; for (i = 0; i != d.length; ++i) { if ((cc = d.charCodeAt(i) - 64) < 1 || cc > 26) break; idx = 26 * idx + cc } --idx; tagc = idx } else ++tagc; for (i = 0; i != x.length; ++i) if (x.charCodeAt(i) === 62) break; ++i; tag = parsexmltag(x.substr(0, i), true); if (!tag.r) tag.r = encode_cell({ r: tagr - 1, c: tagc }); d = x.substr(i); p = { t: "" }; if ((cref = d.match(match_v)) != null && cref[1] !== "") p.v = unescapexml(cref[1]); if (opts.cellFormula) { if ((cref = d.match(match_f)) != null && cref[1] !== "") { p.f = unescapexml(utf8read(cref[1])).replace(/_xlfn\./, ""); if (cref[0].indexOf('t="array"') > -1) { p.F = (d.match(refregex) || [])[1]; if (p.F.indexOf(":") > -1) arrayf.push([safe_decode_range(p.F), p.F]) } else if (cref[0].indexOf('t="shared"') > -1) { ftag = parsexmltag(cref[0]); sharedf[parseInt(ftag.si, 10)] = [ftag, unescapexml(utf8read(cref[1]))] } } else if (cref = d.match(/<f[^>]*\/>/)) { ftag = parsexmltag(cref[0]); if (sharedf[ftag.si]) p.f = shift_formula_xlsx(sharedf[ftag.si][1], sharedf[ftag.si][0].ref, tag.r) } var _tag = decode_cell(tag.r); for (i = 0; i < arrayf.length; ++i) if (_tag.r >= arrayf[i][0].s.r && _tag.r <= arrayf[i][0].e.r) if (_tag.c >= arrayf[i][0].s.c && _tag.c <= arrayf[i][0].e.c) p.F = arrayf[i][1] } if (tag.t == null && p.v === undefined) {
                        if (p.f || p.F) {
                            p.v = 0; p.t = "n";
                        } else if (!opts.sheetStubs) continue; else p.t = "z"
                    } else p.t = tag.t || "n"; if (guess.s.c > idx) guess.s.c = idx; if (guess.e.c < idx) guess.e.c = idx; switch (p.t) { case "n": p.v = parseFloat(p.v); break; case "s": if (typeof p.v == "undefined") { if (!opts.sheetStubs) continue; p.t = "z" } else { sstr = strs[parseInt(p.v, 10)]; p.v = sstr.t; p.r = sstr.r; if (opts.cellHTML) p.h = sstr.h } break; case "str": p.t = "s"; p.v = p.v != null ? utf8read(p.v) : ""; if (opts.cellHTML) p.h = escapehtml(p.v); break; case "inlineStr": cref = d.match(isregex); p.t = "s"; if (cref != null && (sstr = parse_si(cref[1]))) p.v = sstr.t; else p.v = ""; break; case "b": p.v = parsexmlbool(p.v); break; case "d": if (opts.cellDates) p.v = parseDate(p.v, 1); else { p.v = datenum(parseDate(p.v, 1)); p.t = "n" } break; case "e": if (!opts || opts.cellText !== false) p.w = p.v; p.v = RBErr[p.v]; break; } fmtid = fillid = 0; if (do_format && tag.s !== undefined) { cf = styles.CellXf[tag.s]; if (cf != null) { if (cf.numFmtId != null) fmtid = cf.numFmtId; if (opts.cellStyles) { if (cf.fillId != null) fillid = cf.fillId } } } safe_format(p, fmtid, fillid, opts, themes, styles); if (opts.cellDates && do_format && p.t == "n" && SSF.is_date(SSF._table[fmtid])) { p.t = "d"; p.v = numdate(p.v) } if (dense) { var _r = decode_cell(tag.r); if (!s[_r.r]) s[_r.r] = []; s[_r.r][_r.c] = p } else s[tag.r] = p
                }
            } if (rows.length > 0) s["!rows"] = rows
        }
    }(); function write_ws_xml_data(ws, opts, idx, wb, rels) { var o = [], r = [], range = safe_decode_range(ws["!ref"]), cell, ref, rr = "", cols = [], R = 0, C = 0, rows = ws["!rows"]; var dense = Array.isArray(ws); for (C = range.s.c; C <= range.e.c; ++C) cols[C] = encode_col(C); for (R = range.s.r; R <= range.e.r; ++R) { r = []; rr = encode_row(R); for (C = range.s.c; C <= range.e.c; ++C) { ref = cols[C] + rr; var _cell = dense ? (ws[R] || [])[C] : ws[ref]; if (_cell === undefined) continue; if ((cell = write_ws_xml_cell(_cell, ref, ws, opts, idx, wb)) != null) r.push(cell) } if (r.length > 0 || rows && rows[R]) { var params = { r: rr }; if (rows && rows[R]) { var row = rows[R]; if (row.hidden) params.hidden = 1; var height = -1; if (row.hpx) height = px2pt(row.hpx); else if (row.hpt) height = row.hpt; if (height > -1) { params.ht = height; params.customHeight = 1 } if (row.level) { params.outlineLevel = row.level } } o[o.length] = writextag("row", r.join(""), params) } } if (rows) for (; R < rows.length; ++R) { if (rows && rows[R]) { var params = { r: R + 1 }; var row = rows[R]; if (row.hidden) params.hidden = 1; var height = -1; if (row.hpx) height = px2pt(row.hpx); else if (row.hpt) height = row.hpt; if (height > -1) { params.ht = height; params.customHeight = 1 } if (row.level) { params.outlineLevel = row.level } o[o.length] = writextag("row", "", params) } } return o.join("") } var WS_XML_ROOT = writextag("worksheet", null, { xmlns: XMLNS.main[0], "xmlns:r": XMLNS.r }); function write_ws_xml(idx, opts, wb, rels) { var o = [XML_HEADER, WS_XML_ROOT]; var s = wb.SheetNames[idx], sidx = 0, rdata = ""; var ws = wb.Sheets[s]; if (ws == null) ws = {}; var ref = ws["!ref"]; if (ref == null) ref = "A1"; if (!rels) rels = {}; ws["!comments"] = []; ws["!drawing"] = []; o[o.length] = writextag("sheetPr", null, { codeName: escapexml(wb.SheetNames[idx]) }); o[o.length] = writextag("dimension", null, { ref: ref }); o[o.length] = write_ws_xml_sheetviews(ws, opts, idx, wb); if (opts.sheetFormat) o[o.length] = writextag("sheetFormatPr", null, { defaultRowHeight: opts.sheetFormat.defaultRowHeight || "16", baseColWidth: opts.sheetFormat.baseColWidth || "10", outlineLevelRow: opts.sheetFormat.outlineLevelRow || "7" }); if (ws["!cols"] != null && ws["!cols"].length > 0) o[o.length] = write_ws_xml_cols(ws, ws["!cols"]); o[sidx = o.length] = "<sheetData/>"; ws["!links"] = []; if (ws["!ref"] != null) { rdata = write_ws_xml_data(ws, opts, idx, wb, rels); if (rdata.length > 0) o[o.length] = rdata } if (o.length > sidx + 1) { o[o.length] = "</sheetData>"; o[sidx] = o[sidx].replace("/>", ">") } if (ws["!protect"] != null) o[o.length] = write_ws_xml_protection(ws["!protect"]); if (ws["!autofilter"] != null) o[o.length] = write_ws_xml_autofilter(ws["!autofilter"]); if (ws["!merges"] != null && ws["!merges"].length > 0) o[o.length] = write_ws_xml_merges(ws["!merges"]); var relc = -1, rel, rId = -1; if (ws["!links"].length > 0) { o[o.length] = "<hyperlinks>"; ws["!links"].forEach(function (l) { if (!l[1].Target) return; rId = add_rels(rels, -1, escapexml(l[1].Target).replace(/#.*$/, ""), RELS.HLINK); rel = { ref: l[0], "r:id": "rId" + rId }; if ((relc = l[1].Target.indexOf("#")) > -1) rel.location = escapexml(l[1].Target.substr(relc + 1)); if (l[1].Tooltip) rel.tooltip = escapexml(l[1].Tooltip); o[o.length] = writextag("hyperlink", null, rel) }); o[o.length] = "</hyperlinks>" } delete ws["!links"]; if (ws["!margins"] != null) o[o.length] = write_ws_xml_margins(ws["!margins"]); var hfidx = o.length; o[o.length] = ""; if (ws["!drawing"].length > 0) { rId = add_rels(rels, -1, "../drawings/drawing" + (idx + 1) + ".xml", RELS.DRAW); o[o.length] = writextag("drawing", null, { "r:id": "rId" + rId }) } else delete ws["!drawing"]; if (ws["!comments"].length > 0) { rId = add_rels(rels, -1, "../drawings/vmlDrawing" + (idx + 1) + ".vml", RELS.VML); o[o.length] = writextag("legacyDrawing", null, { "r:id": "rId" + rId }); ws["!legacy"] = rId } if (o.length > 2) { o[o.length] = "</worksheet>"; o[1] = o[1].replace("/>", ">") } return o.join("") } function parse_BrtRowHdr(data, length) { var z = {}; var tgt = data.l + length; z.r = data.read_shift(4); data.l += 4; var miyRw = data.read_shift(2); data.l += 1; var flags = data.read_shift(1); data.l = tgt; if (flags & 7) z.level = flags & 7; if (flags & 16) z.hidden = true; if (flags & 32) z.hpt = miyRw / 20; return z } function write_BrtRowHdr(R, range, ws) { var o = new_buf(17 + 8 * 16); var row = (ws["!rows"] || [])[R] || {}; o.write_shift(4, R); o.write_shift(4, 0); var miyRw = 320; if (row.hpx) miyRw = px2pt(row.hpx) * 20; else if (row.hpt) miyRw = row.hpt * 20; o.write_shift(2, miyRw); o.write_shift(1, 0); var flags = 0; if (row.level) flags |= row.level; if (row.hidden) flags |= 16; if (row.hpx || row.hpt) flags |= 32; o.write_shift(1, flags); o.write_shift(1, 0); var ncolspan = 0, lcs = o.l; o.l += 4; var caddr = { r: R, c: 0 }; for (var i = 0; i < 16; ++i) { if (range.s.c > i + 1 << 10 || range.e.c < i << 10) continue; var first = -1, last = -1; for (var j = i << 10; j < i + 1 << 10; ++j) { caddr.c = j; var cell = Array.isArray(ws) ? (ws[caddr.r] || [])[caddr.c] : ws[encode_cell(caddr)]; if (cell) { if (first < 0) first = j; last = j } } if (first < 0) continue; ++ncolspan; o.write_shift(4, first); o.write_shift(4, last) } var l = o.l; o.l = lcs; o.write_shift(4, ncolspan); o.l = l; return o.length > o.l ? o.slice(0, o.l) : o } function write_row_header(ba, ws, range, R) { var o = write_BrtRowHdr(R, range, ws); if (o.length > 17 || (ws["!rows"] || [])[R]) write_record(ba, "BrtRowHdr", o) } var parse_BrtWsDim = parse_UncheckedRfX; var write_BrtWsDim = write_UncheckedRfX; function parse_BrtWsProp(data, length) { var z = {}; data.l += 19; z.name = parse_XLSBCodeName(data, length - 19); return z } function write_BrtWsProp(str, o) { if (o == null) o = new_buf(84 + 4 * str.length); for (var i = 0; i < 3; ++i) o.write_shift(1, 0); write_BrtColor({ auto: 1 }, o); o.write_shift(-4, -1); o.write_shift(-4, -1); write_XLSBCodeName(str, o); return o.slice(0, o.l) } function parse_BrtCellBlank(data, length) { var cell = parse_XLSBCell(data); return [cell] } function write_BrtCellBlank(cell, ncell, o) { if (o == null) o = new_buf(8); return write_XLSBCell(ncell, o) } function parse_BrtCellBool(data, length) { var cell = parse_XLSBCell(data); var fBool = data.read_shift(1); return [cell, fBool, "b"] } function write_BrtCellBool(cell, ncell, o) { if (o == null) o = new_buf(9); write_XLSBCell(ncell, o); o.write_shift(1, cell.v ? 1 : 0); return o } function parse_BrtCellError(data, length) { var cell = parse_XLSBCell(data); var bError = data.read_shift(1); return [cell, bError, "e"] } function parse_BrtCellIsst(data, length) { var cell = parse_XLSBCell(data); var isst = data.read_shift(4); return [cell, isst, "s"] } function write_BrtCellIsst(cell, ncell, o) { if (o == null) o = new_buf(12); write_XLSBCell(ncell, o); o.write_shift(4, ncell.v); return o } function parse_BrtCellReal(data, length) { var cell = parse_XLSBCell(data); var value = parse_Xnum(data); return [cell, value, "n"] } function write_BrtCellReal(cell, ncell, o) { if (o == null) o = new_buf(16); write_XLSBCell(ncell, o); write_Xnum(cell.v, o); return o } function parse_BrtCellRk(data, length) { var cell = parse_XLSBCell(data); var value = parse_RkNumber(data); return [cell, value, "n"] } function write_BrtCellRk(cell, ncell, o) { if (o == null) o = new_buf(12); write_XLSBCell(ncell, o); write_RkNumber(cell.v, o); return o } function parse_BrtCellSt(data, length) { var cell = parse_XLSBCell(data); var value = parse_XLWideString(data); return [cell, value, "str"] } function write_BrtCellSt(cell, ncell, o) { if (o == null) o = new_buf(12 + 4 * cell.v.length); write_XLSBCell(ncell, o); write_XLWideString(cell.v, o); return o.length > o.l ? o.slice(0, o.l) : o } function parse_BrtFmlaBool(data, length, opts) { var end = data.l + length; var cell = parse_XLSBCell(data); cell.r = opts["!row"]; var value = data.read_shift(1); var o = [cell, value, "b"]; if (opts.cellFormula) { data.l += 2; var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts); o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts) } else data.l = end; return o } function parse_BrtFmlaError(data, length, opts) { var end = data.l + length; var cell = parse_XLSBCell(data); cell.r = opts["!row"]; var value = data.read_shift(1); var o = [cell, value, "e"]; if (opts.cellFormula) { data.l += 2; var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts); o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts) } else data.l = end; return o } function parse_BrtFmlaNum(data, length, opts) { var end = data.l + length; var cell = parse_XLSBCell(data); cell.r = opts["!row"]; var value = parse_Xnum(data); var o = [cell, value, "n"]; if (opts.cellFormula) { data.l += 2; var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts); o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts) } else data.l = end; return o } function parse_BrtFmlaString(data, length, opts) { var end = data.l + length; var cell = parse_XLSBCell(data); cell.r = opts["!row"]; var value = parse_XLWideString(data); var o = [cell, value, "str"]; if (opts.cellFormula) { data.l += 2; var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts); o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts) } else data.l = end; return o } var parse_BrtMergeCell = parse_UncheckedRfX; var write_BrtMergeCell = write_UncheckedRfX; function write_BrtBeginMergeCells(cnt, o) { if (o == null) o = new_buf(4); o.write_shift(4, cnt); return o } function parse_BrtHLink(data, length, opts) { var end = data.l + length; var rfx = parse_UncheckedRfX(data, 16); var relId = parse_XLNullableWideString(data); var loc = parse_XLWideString(data); var tooltip = parse_XLWideString(data); var display = parse_XLWideString(data); data.l = end; return { rfx: rfx, relId: relId, loc: loc, Tooltip: tooltip, display: display } } function write_BrtHLink(l, rId, o) { if (o == null) o = new_buf(50 + 4 * l[1].Target.length); write_UncheckedRfX({ s: decode_cell(l[0]), e: decode_cell(l[0]) }, o); write_RelID("rId" + rId, o); var locidx = l[1].Target.indexOf("#"); var loc = locidx == -1 ? "" : l[1].Target.substr(locidx + 1); write_XLWideString(loc || "", o); write_XLWideString(l[1].Tooltip || "", o); write_XLWideString("", o); return o.slice(0, o.l) } function parse_BrtArrFmla(data, length, opts) { var end = data.l + length; var rfx = parse_RfX(data, 16); var fAlwaysCalc = data.read_shift(1); var o = [rfx]; o[2] = fAlwaysCalc; if (opts.cellFormula) { var formula = parse_XLSBArrayParsedFormula(data, end - data.l, opts); o[1] = formula } else data.l = end; return o } function parse_BrtShrFmla(data, length, opts) { var end = data.l + length; var rfx = parse_UncheckedRfX(data, 16); var o = [rfx]; if (opts.cellFormula) { var formula = parse_XLSBSharedParsedFormula(data, end - data.l, opts); o[1] = formula; data.l = end } else data.l = end; return o } function write_BrtColInfo(C, col, o) { if (o == null) o = new_buf(18); var p = col_obj_w(C, col); o.write_shift(-4, C); o.write_shift(-4, C); o.write_shift(4, (p.width || 10) * 256); o.write_shift(4, 0); var flags = 0; if (col.hidden) flags |= 1; if (typeof p.width == "number") flags |= 2; o.write_shift(1, flags); o.write_shift(1, 0); return o } function parse_BrtMargins(data, length, opts) { return { left: parse_Xnum(data, 8), right: parse_Xnum(data, 8), top: parse_Xnum(data, 8), bottom: parse_Xnum(data, 8), header: parse_Xnum(data, 8), footer: parse_Xnum(data, 8) } } function write_BrtMargins(margins, o) { if (o == null) o = new_buf(6 * 8); default_margins(margins); write_Xnum(margins.left, o); write_Xnum(margins.right, o); write_Xnum(margins.top, o); write_Xnum(margins.bottom, o); write_Xnum(margins.header, o); write_Xnum(margins.footer, o); return o } function write_BrtBeginWsView(ws, o) { if (o == null) o = new_buf(30); o.write_shift(2, 924); o.write_shift(4, 0); o.write_shift(4, 0); o.write_shift(4, 0); o.write_shift(1, 0); o.write_shift(1, 0); o.write_shift(2, 0); o.write_shift(2, 100); o.write_shift(2, 0); o.write_shift(2, 0); o.write_shift(2, 0); o.write_shift(4, 0); return o } function write_BrtSheetProtection(sp, o) { if (o == null) o = new_buf(16 * 4 + 2); o.write_shift(2, sp.password ? crypto_CreatePasswordVerifier_Method1(sp.password) : 0); o.write_shift(4, 1);[["objects", false], ["scenarios", false], ["formatCells", true], ["formatColumns", true], ["formatRows", true], ["insertColumns", true], ["insertRows", true], ["insertHyperlinks", true], ["deleteColumns", true], ["deleteRows", true], ["selectLockedCells", false], ["sort", true], ["autoFilter", true], ["pivotTables", true], ["selectUnlockedCells", false]].forEach(function (n) { if (n[1]) o.write_shift(4, sp[n[0]] != null && !sp[n[0]] ? 1 : 0); else o.write_shift(4, sp[n[0]] != null && sp[n[0]] ? 0 : 1) }); return o } function parse_ws_bin(data, _opts, rels, wb, themes, styles) { if (!data) return data; var opts = _opts || {}; if (!rels) rels = { "!id": {} }; if (DENSE != null && opts.dense == null) opts.dense = DENSE; var s = opts.dense ? [] : {}; var ref; var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } }; var pass = false, end = false; var row, p, cf, R, C, addr, sstr, rr, cell; var mergecells = []; opts.biff = 12; opts["!row"] = 0; var ai = 0, af = false; var array_formulae = []; var shared_formulae = {}; var supbooks = [[]]; supbooks.sharedf = shared_formulae; supbooks.arrayf = array_formulae; supbooks.SheetNames = wb.SheetNames || wb.Sheets.map(function (x) { return x.name }); opts.supbooks = supbooks; for (var i = 0; i < wb.Names.length; ++i) supbooks[0][i + 1] = wb.Names[i]; var colinfo = [], rowinfo = []; var defwidth = 0, defheight = 0; var seencol = false; recordhopper(data, function ws_parse(val, R_n, RT) { if (end) return; switch (RT) { case 148: ref = val; break; case 0: row = val; if (opts.sheetRows && opts.sheetRows <= row.r) end = true; rr = encode_row(R = row.r); opts["!row"] = row.r; if (val.hidden || val.hpt || val.level != null) { if (val.hpt) val.hpx = pt2px(val.hpt); rowinfo[val.r] = val } break; case 2:; case 3:; case 4:; case 5:; case 6:; case 7:; case 8:; case 9:; case 10:; case 11: p = { t: val[2] }; switch (val[2]) { case "n": p.v = val[1]; break; case "s": sstr = strs[val[1]]; p.v = sstr.t; p.r = sstr.r; break; case "b": p.v = val[1] ? true : false; break; case "e": p.v = val[1]; if (opts.cellText !== false) p.w = BErr[p.v]; break; case "str": p.t = "s"; p.v = utf8read(val[1]); break; } if (cf = styles.CellXf[val[0].iStyleRef]) safe_format(p, cf.ifmt, null, opts, themes, styles); C = val[0].c; if (opts.dense) { if (!s[R]) s[R] = []; s[R][C] = p } else s[encode_col(C) + rr] = p; if (opts.cellFormula) { af = false; for (ai = 0; ai < array_formulae.length; ++ai) { var aii = array_formulae[ai]; if (row.r >= aii[0].s.r && row.r <= aii[0].e.r) if (C >= aii[0].s.c && C <= aii[0].e.c) { p.F = encode_range(aii[0]); af = true } } if (!af && val.length > 3) p.f = val[3] } if (refguess.s.r > row.r) refguess.s.r = row.r; if (refguess.s.c > C) refguess.s.c = C; if (refguess.e.r < row.r) refguess.e.r = row.r; if (refguess.e.c < C) refguess.e.c = C; if (opts.cellDates && cf && p.t == "n" && SSF.is_date(SSF._table[cf.ifmt])) { var _d = SSF.parse_date_code(p.v); if (_d) { p.t = "d"; p.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u) } } break; case 1: if (!opts.sheetStubs || pass) break; p = { t: "z", v: undefined }; C = val[0].c; if (opts.dense) { if (!s[R]) s[R] = []; s[R][C] = p } else s[encode_col(C) + rr] = p; if (refguess.s.r > row.r) refguess.s.r = row.r; if (refguess.s.c > C) refguess.s.c = C; if (refguess.e.r < row.r) refguess.e.r = row.r; if (refguess.e.c < C) refguess.e.c = C; break; case 176: mergecells.push(val); break; case 494: var rel = rels["!id"][val.relId]; if (rel) { val.Target = rel.Target; if (val.loc) val.Target += "#" + val.loc; val.Rel = rel } for (R = val.rfx.s.r; R <= val.rfx.e.r; ++R) for (C = val.rfx.s.c; C <= val.rfx.e.c; ++C) { if (opts.dense) { if (!s[R]) s[R] = []; if (!s[R][C]) s[R][C] = { t: "z", v: undefined }; s[R][C].l = val } else { addr = encode_cell({ c: C, r: R }); if (!s[addr]) s[addr] = { t: "z", v: undefined }; s[addr].l = val } } break; case 426: if (!opts.cellFormula) break; array_formulae.push(val); cell = opts.dense ? s[R][C] : s[encode_col(C) + rr]; cell.f = stringify_formula(val[1], refguess, { r: row.r, c: C }, supbooks, opts); cell.F = encode_range(val[0]); break; case 427: if (!opts.cellFormula) break; shared_formulae[encode_cell(val[0].s)] = val[1]; cell = opts.dense ? s[R][C] : s[encode_col(C) + rr]; cell.f = stringify_formula(val[1], refguess, { r: row.r, c: C }, supbooks, opts); break; case 60: if (!opts.cellStyles) break; while (val.e >= val.s) { colinfo[val.e--] = { width: val.w / 256, hidden: !!(val.flags & 1) }; if (!seencol) { seencol = true; find_mdw_colw(val.w / 256) } process_col(colinfo[val.e + 1]) } break; case 161: s["!autofilter"] = { ref: encode_range(val) }; break; case 476: s["!margins"] = val; break; case 485:; case 175:; case 644:; case 625:; case 562:; case 396:; case 1112:; case 1146:; case 471:; case 1050:; case 649:; case 1105:; case 49:; case 589:; case 607:; case 564:; case 1055:; case 168:; case 174:; case 1180:; case 499:; case 64:; case 1053:; case 550:; case 171:; case 167:; case 1177:; case 169:; case 1181:; case 551:; case 552:; case 661:; case 639:; case 478:; case 151:; case 537:; case 477:; case 536:; case 1103:; case 680:; case 1104:; case 1024:; case 152:; case 663:; case 535:; case 678:; case 504:; case 1043:; case 428:; case 170:; case 50:; case 2070:; case 1045:; case 147: break; case 35: pass = true; break; case 36: pass = false; break; case 37: break; case 38: break; default: if ((R_n || "").indexOf("Begin") > 0) { } else if ((R_n || "").indexOf("End") > 0) { } else if (!pass || opts.WTF) throw new Error("Unexpected record " + RT + " " + R_n); } }, opts); delete opts.supbooks; delete opts["!row"]; if (!s["!ref"] && (refguess.s.r < 2e6 || ref && (ref.e.r > 0 || ref.e.c > 0 || ref.s.r > 0 || ref.s.c > 0))) s["!ref"] = encode_range(ref || refguess); if (opts.sheetRows && s["!ref"]) { var tmpref = safe_decode_range(s["!ref"]); if (opts.sheetRows < +tmpref.e.r) { tmpref.e.r = opts.sheetRows - 1; if (tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r; if (tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r; if (tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c; if (tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c; s["!fullref"] = s["!ref"]; s["!ref"] = encode_range(tmpref) } } if (mergecells.length > 0) s["!merges"] = mergecells; if (colinfo.length > 0) s["!cols"] = colinfo; if (rowinfo.length > 0) s["!rows"] = rowinfo; return s } function write_ws_bin_cell(ba, cell, R, C, opts, ws) { if (cell.v === undefined) return ""; var vv = ""; var olddate = null; switch (cell.t) { case "b": vv = cell.v ? "1" : "0"; break; case "d": cell.z = cell.z || SSF._table[14]; olddate = cell.v; cell.v = datenum(cell.v); cell.t = "n"; break; case "n":; case "e": vv = "" + cell.v; break; default: vv = cell.v; break; } var o = { r: R, c: C }; o.s = get_cell_style(opts.cellXfs, cell, opts); if (cell.l) ws["!links"].push([encode_cell(o), cell.l]); if (cell.c) ws["!comments"].push([encode_cell(o), cell.c]); switch (cell.t) { case "s":; case "str": if (opts.bookSST) { vv = get_sst_id(opts.Strings, cell.v); o.t = "s"; o.v = vv; write_record(ba, "BrtCellIsst", write_BrtCellIsst(cell, o)) } else { o.t = "str"; write_record(ba, "BrtCellSt", write_BrtCellSt(cell, o)) } return; case "n": if (cell.v == (cell.v | 0) && cell.v > -1e3 && cell.v < 1e3) write_record(ba, "BrtCellRk", write_BrtCellRk(cell, o)); else write_record(ba, "BrtCellReal", write_BrtCellReal(cell, o)); if (olddate) { cell.t = "d"; cell.v = olddate } return; case "b": o.t = "b"; write_record(ba, "BrtCellBool", write_BrtCellBool(cell, o)); return; case "e": o.t = "e"; break; } write_record(ba, "BrtCellBlank", write_BrtCellBlank(cell, o)) } function write_CELLTABLE(ba, ws, idx, opts, wb) { var range = safe_decode_range(ws["!ref"] || "A1"), ref, rr = "", cols = []; write_record(ba, "BrtBeginSheetData"); var dense = Array.isArray(ws); var cap = range.e.r; if (ws["!rows"]) cap = Math.max(range.e.r, ws["!rows"].length - 1); for (var R = range.s.r; R <= cap; ++R) { rr = encode_row(R); write_row_header(ba, ws, range, R); if (R <= range.e.r) for (var C = range.s.c; C <= range.e.c; ++C) { if (R === range.s.r) cols[C] = encode_col(C); ref = cols[C] + rr; var cell = dense ? (ws[R] || [])[C] : ws[ref]; if (!cell) continue; write_ws_bin_cell(ba, cell, R, C, opts, ws) } } write_record(ba, "BrtEndSheetData") } function write_MERGECELLS(ba, ws) { if (!ws || !ws["!merges"]) return; write_record(ba, "BrtBeginMergeCells", write_BrtBeginMergeCells(ws["!merges"].length)); ws["!merges"].forEach(function (m) { write_record(ba, "BrtMergeCell", write_BrtMergeCell(m)) }); write_record(ba, "BrtEndMergeCells") } function write_COLINFOS(ba, ws, idx, opts, wb) { if (!ws || !ws["!cols"]) return; write_record(ba, "BrtBeginColInfos"); ws["!cols"].forEach(function (m, i) { if (m) write_record(ba, "BrtColInfo", write_BrtColInfo(i, m)) }); write_record(ba, "BrtEndColInfos") } function write_HLINKS(ba, ws, rels) { ws["!links"].forEach(function (l) { if (!l[1].Target) return; var rId = add_rels(rels, -1, l[1].Target.replace(/#.*$/, ""), RELS.HLINK); write_record(ba, "BrtHLink", write_BrtHLink(l, rId)) }); delete ws["!links"] } function write_LEGACYDRAWING(ba, ws, idx, rels) { if (ws["!comments"].length > 0) { var rId = add_rels(rels, -1, "../drawings/vmlDrawing" + (idx + 1) + ".vml", RELS.VML); write_record(ba, "BrtLegacyDrawing", write_RelID("rId" + rId)); ws["!legacy"] = rId } } function write_AUTOFILTER(ba, ws) { if (!ws["!autofilter"]) return; write_record(ba, "BrtBeginAFilter", write_UncheckedRfX(decode_range(ws["!autofilter"].ref))); write_record(ba, "BrtEndAFilter") } function write_WSVIEWS2(ba, ws) { write_record(ba, "BrtBeginWsViews"); { write_record(ba, "BrtBeginWsView", write_BrtBeginWsView(ws)); write_record(ba, "BrtEndWsView") } write_record(ba, "BrtEndWsViews") } function write_WSFMTINFO(ba, ws) { } function write_SHEETPROTECT(ba, ws) { if (!ws["!protect"]) return; write_record(ba, "BrtSheetProtection", write_BrtSheetProtection(ws["!protect"])) } function write_ws_bin(idx, opts, wb, rels) { var ba = buf_array(); var s = wb.SheetNames[idx], ws = wb.Sheets[s] || {}; var r = safe_decode_range(ws["!ref"] || "A1"); ws["!links"] = []; ws["!comments"] = []; write_record(ba, "BrtBeginSheet"); write_record(ba, "BrtWsProp", write_BrtWsProp(s)); write_record(ba, "BrtWsDim", write_BrtWsDim(r)); write_WSVIEWS2(ba, ws); write_WSFMTINFO(ba, ws); write_COLINFOS(ba, ws, idx, opts, wb); write_CELLTABLE(ba, ws, idx, opts, wb); write_SHEETPROTECT(ba, ws); write_AUTOFILTER(ba, ws); write_MERGECELLS(ba, ws); write_HLINKS(ba, ws, rels); if (ws["!margins"]) write_record(ba, "BrtMargins", write_BrtMargins(ws["!margins"])); write_LEGACYDRAWING(ba, ws, idx, rels); write_record(ba, "BrtEndSheet"); return ba.end() } function parse_numCache(data) { var col = []; (data.match(/<c:pt idx="(\d*)">(.*?)<\/c:pt>/gm) || []).forEach(function (pt) { var q = pt.match(/<c:pt idx="(.*?)"><c:v>(.*)<\/c:v><\/c:pt>/); if (!q) return; col[+q[1]] = +q[2] }); var nf = unescapexml((data.match(/<c:formatCode>([\s\S]*?)<\/c:formatCode>/) || ["", "General"])[1]); return [col, nf] } function parse_chart(data, name, opts, rels, wb, csheet) { var cs = csheet || { "!type": "chart" }; if (!data) return csheet; var C = 0, R = 0, col = "A"; var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } }; (data.match(/<c:numCache>[\s\S]*?<\/c:numCache>/gm) || []).forEach(function (nc) { var cache = parse_numCache(nc); refguess.s.r = refguess.s.c = 0; refguess.e.c = C; col = encode_col(C); cache[0].forEach(function (n, i) { cs[col + encode_row(i)] = { t: "n", v: n, z: cache[1] }; R = i }); if (refguess.e.r < R) refguess.e.r = R; ++C }); if (C > 0) cs["!ref"] = encode_range(refguess); return cs } RELS.CS = "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartsheet"; var CS_XML_ROOT = writextag("chartsheet", null, { xmlns: XMLNS.main[0], "xmlns:r": XMLNS.r }); function parse_cs_xml(data, opts, rels, wb, themes, styles) { if (!data) return data; if (!rels) rels = { "!id": {} }; var s = { "!type": "chart", "!chart": null, "!rel": "" }; var m; if (m = data.match(/drawing r:id="(.*?)"/)) s["!rel"] = m[1]; if (rels["!id"][s["!rel"]]) s["!chart"] = rels["!id"][s["!rel"]]; return s } function write_cs_xml(idx, opts, wb, rels) { var o = [XML_HEADER, CS_XML_ROOT]; o[o.length] = writextag("drawing", null, { "r:id": "rId1" }); add_rels(rels, -1, "../drawings/drawing" + (idx + 1) + ".xml", RELS.DRAW); if (o.length > 2) { o[o.length] = "</chartsheet>"; o[1] = o[1].replace("/>", ">") } return o.join("") } function parse_cs_bin(data, opts, rels, wb, themes, styles) { if (!data) return data; if (!rels) rels = { "!id": {} }; var s = { "!type": "chart", "!chart": null, "!rel": "" }; var state = []; var pass = false; recordhopper(data, function cs_parse(val, R_n, RT) { switch (RT) { case 550: s["!rel"] = val; break; case 562:; case 652:; case 651:; case 669:; case 679:; case 551:; case 552:; case 476: break; case 35: pass = true; break; case 36: pass = false; break; case 37: state.push(R_n); break; case 38: state.pop(); break; default: if ((R_n || "").indexOf("Begin") > 0) state.push(R_n); else if ((R_n || "").indexOf("End") > 0) state.pop(); else if (!pass || opts.WTF) throw new Error("Unexpected record " + RT + " " + R_n); } }, opts); if (rels["!id"][s["!rel"]]) s["!chart"] = rels["!id"][s["!rel"]]; return s } function write_cs_bin(idx, opts, wb, rels) { var ba = buf_array(); write_record(ba, "BrtBeginSheet"); write_record(ba, "BrtEndSheet"); return ba.end() } var WBPropsDef = [["allowRefreshQuery", false, "bool"], ["autoCompressPictures", true, "bool"], ["backupFile", false, "bool"], ["checkCompatibility", false, "bool"], ["codeName", ""], ["date1904", false, "bool"], ["defaultThemeVersion", 0, "int"], ["filterPrivacy", false, "bool"], ["hidePivotFieldList", false, "bool"], ["promptedSolutions", false, "bool"], ["publishItems", false, "bool"], ["refreshAllConnections", false, "bool"], ["saveExternalLinkValues", true, "bool"], ["showBorderUnselectedTables", true, "bool"], ["showInkAnnotation", true, "bool"], ["showObjects", "all"], ["showPivotChartFilter", false, "bool"], ["updateLinks", "userSet"]]; var WBViewDef = [["activeTab", 0, "int"], ["autoFilterDateGrouping", true, "bool"], ["firstSheet", 0, "int"], ["minimized", false, "bool"], ["showHorizontalScroll", true, "bool"], ["showSheetTabs", true, "bool"], ["showVerticalScroll", true, "bool"], ["tabRatio", 600, "int"], ["visibility", "visible"]]; var SheetDef = []; var CalcPrDef = [["calcCompleted", "true"], ["calcMode", "auto"], ["calcOnSave", "true"], ["concurrentCalc", "true"], ["fullCalcOnLoad", "false"], ["fullPrecision", "true"], ["iterate", "false"], ["iterateCount", "100"], ["iterateDelta", "0.001"], ["refMode", "A1"]]; var CustomWBViewDef = [["autoUpdate", "false"], ["changesSavedWin", "false"], ["includeHiddenRowCol", "true"], ["includePrintSettings", "true"], ["maximized", "false"], ["minimized", "false"], ["onlySync", "false"], ["personalView", "false"], ["showComments", "commIndicator"], ["showFormulaBar", "true"], ["showHorizontalScroll", "true"], ["showObjects", "all"], ["showSheetTabs", "true"], ["showStatusbar", "true"], ["showVerticalScroll", "true"], ["tabRatio", "600"], ["xWindow", "0"], ["yWindow", "0"]]; function push_defaults_array(target, defaults) { for (var j = 0; j != target.length; ++j) { var w = target[j]; for (var i = 0; i != defaults.length; ++i) { var z = defaults[i]; if (w[z[0]] == null) w[z[0]] = z[1]; else switch (z[2]) { case "bool": if (typeof w[z[0]] == "string") w[z[0]] = parsexmlbool(w[z[0]], z[0]); break; case "int": if (typeof w[z[0]] == "string") w[z[0]] = parseInt(w[z[0]], 10); break; } } } } function push_defaults(target, defaults) { for (var i = 0; i != defaults.length; ++i) { var z = defaults[i]; if (target[z[0]] == null) target[z[0]] = z[1]; else switch (z[2]) { case "bool": if (typeof target[z[0]] == "string") target[z[0]] = parsexmlbool(target[z[0]], z[0]); break; case "int": if (typeof target[z[0]] == "string") target[z[0]] = parseInt(target[z[0]], 10); break; } } } function parse_wb_defaults(wb) { push_defaults(wb.WBProps, WBPropsDef); push_defaults(wb.CalcPr, CalcPrDef); push_defaults_array(wb.WBView, WBViewDef); push_defaults_array(wb.Sheets, SheetDef); _ssfopts.date1904 = parsexmlbool(wb.WBProps.date1904, "date1904") } function safe1904(wb) { if (!wb.Workbook) return "false"; if (!wb.Workbook.WBProps) return "false"; return parsexmlbool(wb.Workbook.WBProps.date1904) ? "true" : "false" } var badchars = "][*?/\\".split(""); function check_ws_name(n, safe) { if (n.length > 31) { if (safe) return false; throw new Error("Sheet names cannot exceed 31 chars") } var _good = true; badchars.forEach(function (c) { if (n.indexOf(c) == -1) return; if (!safe) throw new Error("Sheet name cannot contain : \\ / ? * [ ]"); _good = false }); return _good } function check_wb_names(N) { N.forEach(function (n, i) { check_ws_name(n); for (var j = 0; j < i; ++j) if (n == N[j]) throw new Error("Duplicate Sheet Name: " + n) }) } function check_wb(wb) { if (!wb || !wb.SheetNames || !wb.Sheets) throw new Error("Invalid Workbook"); check_wb_names(wb.SheetNames) } var wbnsregex = /<\w+:workbook/; function parse_wb_xml(data, opts) { if (!data) throw new Error("Could not find file"); var wb = { AppVersion: {}, WBProps: {}, WBView: [], Sheets: [], CalcPr: {}, Names: [], xmlns: "" }; var pass = false, xmlns = "xmlns"; var dname = {}, dnstart = 0; data.replace(tagregex, function xml_wb(x, idx) { var y = parsexmltag(x); switch (strip_ns(y[0])) { case "<?xml": break; case "<workbook": if (x.match(wbnsregex)) xmlns = "xmlns" + x.match(/<(\w+):/)[1]; wb.xmlns = y[xmlns]; break; case "</workbook>": break; case "<fileVersion": delete y[0]; wb.AppVersion = y; break; case "<fileVersion/>":; case "</fileVersion>": break; case "<fileSharing":; case "<fileSharing/>": break; case "<workbookPr":; case "<workbookPr/>": WBPropsDef.forEach(function (w) { if (y[w[0]] == null) return; switch (w[2]) { case "bool": wb.WBProps[w[0]] = parsexmlbool(y[w[0]], w[0]); break; case "int": wb.WBProps[w[0]] = parseInt(y[w[0]], 10); break; default: wb.WBProps[w[0]] = y[w[0]]; } }); break; case "</workbookPr>": break; case "<workbookProtection": break; case "<workbookProtection/>": break; case "<bookViews>":; case "</bookViews>": break; case "<workbookView": delete y[0]; wb.WBView.push(y); break; case "</workbookView>": break; case "<sheets>":; case "</sheets>": break; case "<sheet": switch (y.state) { case "hidden": y.Hidden = 1; break; case "veryHidden": y.Hidden = 2; break; default: y.Hidden = 0; } delete y.state; y.name = unescapexml(utf8read(y.name)); delete y[0]; wb.Sheets.push(y); break; case "</sheet>": break; case "<functionGroups":; case "<functionGroups/>": break; case "<functionGroup": break; case "<externalReferences":; case "</externalReferences>":; case "<externalReferences>": break; case "<externalReference": break; case "<definedNames/>": break; case "<definedNames>":; case "<definedNames": pass = true; break; case "</definedNames>": pass = false; break; case "<definedName": { dname = {}; dname.Name = y.name; if (y.comment) dname.Comment = y.comment; if (y.localSheetId) dname.Sheet = +y.localSheetId; dnstart = idx + x.length } break; case "</definedName>": { dname.Ref = data.slice(dnstart, idx); wb.Names.push(dname) } break; case "<definedName/>": break; case "<calcPr": delete y[0]; wb.CalcPr = y; break; case "<calcPr/>": delete y[0]; wb.CalcPr = y; break; case "</calcPr>": break; case "<oleSize": break; case "<customWorkbookViews>":; case "</customWorkbookViews>":; case "<customWorkbookViews": break; case "<customWorkbookView":; case "</customWorkbookView>": break; case "<pivotCaches>":; case "</pivotCaches>":; case "<pivotCaches": break; case "<pivotCache": break; case "<smartTagPr":; case "<smartTagPr/>": break; case "<smartTagTypes":; case "<smartTagTypes>":; case "</smartTagTypes>": break; case "<smartTagType": break; case "<webPublishing":; case "<webPublishing/>": break; case "<fileRecoveryPr":; case "<fileRecoveryPr/>": break; case "<webPublishObjects>":; case "<webPublishObjects":; case "</webPublishObjects>": break; case "<webPublishObject": break; case "<extLst>":; case "</extLst>":; case "<extLst/>": break; case "<ext": pass = true; break; case "</ext>": pass = false; break; case "<ArchID": break; case "<AlternateContent": pass = true; break; case "</AlternateContent>": pass = false; break; case "<revisionPtr": break; default: if (!pass && opts.WTF) throw new Error("unrecognized " + y[0] + " in workbook"); } return x }); if (XMLNS.main.indexOf(wb.xmlns) === -1) throw new Error("Unknown Namespace: " + wb.xmlns); parse_wb_defaults(wb); return wb } var WB_XML_ROOT = writextag("workbook", null, { xmlns: XMLNS.main[0], "xmlns:r": XMLNS.r }); function write_wb_xml(wb, opts) { var o = [XML_HEADER]; o[o.length] = WB_XML_ROOT; var write_names = wb.Workbook && (wb.Workbook.Names || []).length > 0; var workbookPr = { codeName: "ThisWorkbook" }; if (wb.Workbook && wb.Workbook.WBProps) { if (wb.Workbook.WBProps.codeName) workbookPr.codeName = wb.Workbook.WBProps.codeName; WBPropsDef.forEach(function (x) { if (wb.Workbook.WBProps[x[0]] == null) return; if (wb.Workbook.WBProps[x[0]] == x[1]) return; workbookPr[x[0]] = wb.Workbook.WBProps[x[0]] }) } o[o.length] = writextag("workbookPr", null, workbookPr); o[o.length] = "<sheets>"; var sheets = wb.Workbook && wb.Workbook.Sheets || []; for (var i = 0; i != wb.SheetNames.length; ++i) { var sht = { name: escapexml(wb.SheetNames[i].substr(0, 31)) }; sht.sheetId = "" + (i + 1); sht["r:id"] = "rId" + (i + 1); if (sheets[i]) switch (sheets[i].Hidden) { case 1: sht.state = "hidden"; break; case 2: sht.state = "veryHidden"; break; } o[o.length] = writextag("sheet", null, sht) } o[o.length] = "</sheets>"; if (write_names) { o[o.length] = "<definedNames>"; if (wb.Workbook && wb.Workbook.Names) wb.Workbook.Names.forEach(function (n) { var d = { name: n.Name }; if (n.Comment) d.comment = n.Comment; if (n.Sheet != null) d.localSheetId = "" + n.Sheet; if (!n.Ref) return; o[o.length] = writextag("definedName", String(n.Ref), d) }); o[o.length] = "</definedNames>" } if (o.length > 2) { o[o.length] = "</workbook>"; o[1] = o[1].replace("/>", ">") } return o.join("") } function parse_BrtBundleSh(data, length) { var z = {}; z.Hidden = data.read_shift(4); z.iTabID = data.read_shift(4); z.strRelID = parse_RelID(data, length - 8); z.name = parse_XLWideString(data); return z } function write_BrtBundleSh(data, o) { if (!o) o = new_buf(127); o.write_shift(4, data.Hidden); o.write_shift(4, data.iTabID); write_RelID(data.strRelID, o); write_XLWideString(data.name.substr(0, 31), o); return o.length > o.l ? o.slice(0, o.l) : o } function parse_BrtWbProp(data, length) {
        var o = {}; var flags = data.read_shift(4);
        o.defaultThemeVersion = data.read_shift(4); var strName = length > 8 ? parse_XLWideString(data) : ""; if (strName.length > 0) o.codeName = strName; o.autoCompressPictures = !!(flags & 65536); o.backupFile = !!(flags & 64); o.checkCompatibility = !!(flags & 4096); o.date1904 = !!(flags & 1); o.filterPrivacy = !!(flags & 8); o.hidePivotFieldList = !!(flags & 1024); o.promptedSolutions = !!(flags & 16); o.publishItems = !!(flags & 2048); o.refreshAllConnections = !!(flags & 262144); o.saveExternalLinkValues = !!(flags & 128); o.showBorderUnselectedTables = !!(flags & 4); o.showInkAnnotation = !!(flags & 32); o.showObjects = ["all", "placeholders", "none"][flags >> 13 & 3]; o.showPivotChartFilter = !!(flags & 32768); o.updateLinks = ["userSet", "never", "always"][flags >> 8 & 3]; return o
    } function write_BrtWbProp(data, o) { if (!o) o = new_buf(72); var flags = 0; if (data) { if (data.filterPrivacy) flags |= 8 } o.write_shift(4, flags); o.write_shift(4, 0); write_XLSBCodeName("ThisWorkbook", o); return o.slice(0, o.l) } function parse_BrtFRTArchID$(data, length) { var o = {}; data.read_shift(4); o.ArchID = data.read_shift(4); data.l += length - 8; return o } function parse_BrtName(data, length, opts) { var end = data.l + length; var flags = data.read_shift(4); var chKey = data.read_shift(1); var itab = data.read_shift(4); var name = parse_XLNameWideString(data); var formula = parse_XLSBNameParsedFormula(data, 0, opts); var comment = parse_XLNullableWideString(data); data.l = end; var out = { Name: name, Ptg: formula, Comment: comment }; if (itab < 268435455) out.Sheet = itab; return out } function parse_wb_bin(data, opts) { var wb = { AppVersion: {}, WBProps: {}, WBView: [], Sheets: [], CalcPr: {}, xmlns: "" }; var pass = false, z; if (!opts) opts = {}; opts.biff = 12; var Names = []; var supbooks = []; supbooks.SheetNames = []; recordhopper(data, function hopper_wb(val, R_n, RT) { switch (RT) { case 156: supbooks.SheetNames.push(val.name); wb.Sheets.push(val); break; case 153: wb.WBProps = val; break; case 39: val.Ref = stringify_formula(val.Ptg, null, null, supbooks, opts); delete val.Ptg; Names.push(val); break; case 1036: break; case 357:; case 358:; case 355:; case 667:; case 362:; case 361: break; case 2071:; case 534:; case 677:; case 158:; case 157:; case 610:; case 2050:; case 155:; case 548:; case 676:; case 128:; case 665:; case 2128:; case 2125:; case 549:; case 2053:; case 596:; case 2076:; case 2075:; case 2082:; case 397:; case 154:; case 1117:; case 553:; case 2091: break; case 35: pass = true; break; case 36: pass = false; break; case 37: break; case 38: break; case 16: break; default: if ((R_n || "").indexOf("Begin") > 0) { } else if ((R_n || "").indexOf("End") > 0) { } else if (!pass || opts.WTF) throw new Error("Unexpected record " + RT + " " + R_n); } }, opts); parse_wb_defaults(wb); wb.Names = Names; return wb } function write_BUNDLESHS(ba, wb, opts) { write_record(ba, "BrtBeginBundleShs"); for (var idx = 0; idx != wb.SheetNames.length; ++idx) { var viz = wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx] && wb.Workbook.Sheets[idx].Hidden || 0; var d = { Hidden: viz, iTabID: idx + 1, strRelID: "rId" + (idx + 1), name: wb.SheetNames[idx] }; write_record(ba, "BrtBundleSh", write_BrtBundleSh(d)) } write_record(ba, "BrtEndBundleShs") } function write_BrtFileVersion(data, o) { if (!o) o = new_buf(127); for (var i = 0; i != 4; ++i) o.write_shift(4, 0); write_XLWideString("SheetJS", o); write_XLWideString(XLSX.version, o); write_XLWideString(XLSX.version, o); write_XLWideString("7262", o); o.length = o.l; return o.length > o.l ? o.slice(0, o.l) : o } function write_BrtBookView(idx, o) { if (!o) o = new_buf(29); o.write_shift(-4, 0); o.write_shift(-4, 460); o.write_shift(4, 28800); o.write_shift(4, 17600); o.write_shift(4, 500); o.write_shift(4, idx); o.write_shift(4, idx); var flags = 120; o.write_shift(1, flags); return o.length > o.l ? o.slice(0, o.l) : o } function write_BOOKVIEWS(ba, wb, opts) { if (!wb.Workbook || !wb.Workbook.Sheets) return; var sheets = wb.Workbook.Sheets; var i = 0, vistab = -1, hidden = -1; for (; i < sheets.length; ++i) { if (!sheets[i] || !sheets[i].Hidden && vistab == -1) vistab = i; else if (sheets[i].Hidden == 1 && hidden == -1) hidden = i } if (hidden > vistab) return; write_record(ba, "BrtBeginBookViews"); write_record(ba, "BrtBookView", write_BrtBookView(vistab)); write_record(ba, "BrtEndBookViews") } function write_BrtCalcProp(data, o) { if (!o) o = new_buf(26); o.write_shift(4, 0); o.write_shift(4, 1); o.write_shift(4, 0); write_Xnum(0, o); o.write_shift(-4, 1023); o.write_shift(1, 51); o.write_shift(1, 0); return o } function write_BrtFileRecover(data, o) { if (!o) o = new_buf(1); o.write_shift(1, 0); return o } function write_wb_bin(wb, opts) { var ba = buf_array(); write_record(ba, "BrtBeginBook"); write_record(ba, "BrtFileVersion", write_BrtFileVersion()); write_record(ba, "BrtWbProp", write_BrtWbProp(wb.Workbook && wb.Workbook.WBProps || null)); write_BOOKVIEWS(ba, wb, opts); write_BUNDLESHS(ba, wb, opts); write_record(ba, "BrtEndBook"); return ba.end() } function parse_wb(data, name, opts) { if (name.slice(-4) === ".bin") return parse_wb_bin(data, opts); return parse_wb_xml(data, opts) } function parse_ws(data, name, opts, rels, wb, themes, styles) { if (name.slice(-4) === ".bin") return parse_ws_bin(data, opts, rels, wb, themes, styles); return parse_ws_xml(data, opts, rels, wb, themes, styles) } function parse_cs(data, name, opts, rels, wb, themes, styles) { if (name.slice(-4) === ".bin") return parse_cs_bin(data, opts, rels, wb, themes, styles); return parse_cs_xml(data, opts, rels, wb, themes, styles) } function parse_ms(data, name, opts, rels, wb, themes, styles) { if (name.slice(-4) === ".bin") return parse_ms_bin(data, opts, rels, wb, themes, styles); return parse_ms_xml(data, opts, rels, wb, themes, styles) } function parse_ds(data, name, opts, rels, wb, themes, styles) { if (name.slice(-4) === ".bin") return parse_ds_bin(data, opts, rels, wb, themes, styles); return parse_ds_xml(data, opts, rels, wb, themes, styles) } function parse_sty(data, name, themes, opts) { if (name.slice(-4) === ".bin") return parse_sty_bin(data, themes, opts); return parse_sty_xml(data, themes, opts) } function parse_theme(data, name, opts) { return parse_theme_xml(data, opts) } function parse_sst(data, name, opts) { if (name.slice(-4) === ".bin") return parse_sst_bin(data, opts); return parse_sst_xml(data, opts) } function parse_cmnt(data, name, opts) { if (name.slice(-4) === ".bin") return parse_comments_bin(data, opts); return parse_comments_xml(data, opts) } function parse_cc(data, name, opts) { if (name.slice(-4) === ".bin") return parse_cc_bin(data, opts); return parse_cc_xml(data, opts) } function write_wb(wb, name, opts) { return (name.slice(-4) === ".bin" ? write_wb_bin : write_wb_xml)(wb, opts) } function write_ws(data, name, opts, wb, rels) { return (name.slice(-4) === ".bin" ? write_ws_bin : write_ws_xml)(data, opts, wb, rels) } function write_cs(data, name, opts, wb, rels) { return (name.slice(-4) === ".bin" ? write_cs_bin : write_cs_xml)(data, opts, wb, rels) } function write_sty(data, name, opts) { return (name.slice(-4) === ".bin" ? write_sty_bin : write_sty_xml)(data, opts) } function write_sst(data, name, opts) { return (name.slice(-4) === ".bin" ? write_sst_bin : write_sst_xml)(data, opts) } function write_cmnt(data, name, opts) { return (name.slice(-4) === ".bin" ? write_comments_bin : write_comments_xml)(data, opts) } var attregexg2 = /([\w:]+)=((?:")([^"]*)(?:")|(?:')([^']*)(?:'))/g; var attregex2 = /([\w:]+)=((?:")(?:[^"]*)(?:")|(?:')(?:[^']*)(?:'))/; var _chr = function (c) { return String.fromCharCode(c) }; function xlml_parsexmltag(tag, skip_root) { var words = tag.split(/\s+/); var z = []; if (!skip_root) z[0] = words[0]; if (words.length === 1) return z; var m = tag.match(attregexg2), y, j, w, i; if (m) for (i = 0; i != m.length; ++i) { y = m[i].match(attregex2); if ((j = y[1].indexOf(":")) === -1) z[y[1]] = y[2].substr(1, y[2].length - 2); else { if (y[1].substr(0, 6) === "xmlns:") w = "xmlns" + y[1].substr(6); else w = y[1].substr(j + 1); z[w] = y[2].substr(1, y[2].length - 2) } } return z } function xlml_parsexmltagobj(tag) { var words = tag.split(/\s+/); var z = {}; if (words.length === 1) return z; var m = tag.match(attregexg2), y, j, w, i; if (m) for (i = 0; i != m.length; ++i) { y = m[i].match(attregex2); if ((j = y[1].indexOf(":")) === -1) z[y[1]] = y[2].substr(1, y[2].length - 2); else { if (y[1].substr(0, 6) === "xmlns:") w = "xmlns" + y[1].substr(6); else w = y[1].substr(j + 1); z[w] = y[2].substr(1, y[2].length - 2) } } return z } function xlml_format(format, value) { var fmt = XLMLFormatMap[format] || unescapexml(format); if (fmt === "General") return SSF._general(value); return SSF.format(fmt, value) } function xlml_set_custprop(Custprops, Rn, cp, val) { var oval = val; switch ((cp[0].match(/dt:dt="([\w.]+)"/) || ["", ""])[1]) { case "boolean": oval = parsexmlbool(val); break; case "i2":; case "int": oval = parseInt(val, 10); break; case "r4":; case "float": oval = parseFloat(val); break; case "date":; case "dateTime.tz": oval = parseDate(val); break; case "i8":; case "string":; case "fixed":; case "uuid":; case "bin.base64": break; default: throw new Error("bad custprop:" + cp[0]); } Custprops[unescapexml(Rn[3])] = oval } function safe_format_xlml(cell, nf, o) { if (cell.t === "z") return; if (!o || o.cellText !== false) try { if (cell.t === "e") { cell.w = cell.w || BErr[cell.v] } else if (nf === "General") { if (cell.t === "n") { if ((cell.v | 0) === cell.v) cell.w = SSF._general_int(cell.v); else cell.w = SSF._general_num(cell.v) } else cell.w = SSF._general(cell.v) } else cell.w = xlml_format(nf || "General", cell.v) } catch (e) { if (o.WTF) throw e } try { var z = XLMLFormatMap[nf] || nf || "General"; if (o.cellNF) cell.z = z; if (o.cellDates && cell.t == "n" && SSF.is_date(z)) { var _d = SSF.parse_date_code(cell.v); if (_d) { cell.t = "d"; cell.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u) } } } catch (e) { if (o.WTF) throw e } } function process_style_xlml(styles, stag, opts) { if (opts.cellStyles) { if (stag.Interior) { var I = stag.Interior; if (I.Pattern) I.patternType = XLMLPatternTypeMap[I.Pattern] || I.Pattern } } styles[stag.ID] = stag } function parse_xlml_data(xml, ss, data, cell, base, styles, csty, row, arrayf, o) { var nf = "General", sid = cell.StyleID, S = {}; o = o || {}; var interiors = []; var i = 0; if (sid === undefined && row) sid = row.StyleID; if (sid === undefined && csty) sid = csty.StyleID; while (styles[sid] !== undefined) { if (styles[sid].nf) nf = styles[sid].nf; if (styles[sid].Interior) interiors.push(styles[sid].Interior); if (!styles[sid].Parent) break; sid = styles[sid].Parent } switch (data.Type) { case "Boolean": cell.t = "b"; cell.v = parsexmlbool(xml); break; case "String": cell.t = "s"; cell.r = xlml_fixstr(unescapexml(xml)); cell.v = xml.indexOf("<") > -1 ? unescapexml(ss) : cell.r; break; case "DateTime": if (xml.slice(-1) != "Z") xml += "Z"; cell.v = (parseDate(xml) - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1e3); if (cell.v !== cell.v) cell.v = unescapexml(xml); else if (cell.v < 60) cell.v = cell.v - 1; if (!nf || nf == "General") nf = "yyyy-mm-dd"; case "Number": if (cell.v === undefined) cell.v = +xml; if (!cell.t) cell.t = "n"; break; case "Error": cell.t = "e"; cell.v = RBErr[xml]; if (o.cellText !== false) cell.w = xml; break; default: cell.t = "s"; cell.v = xlml_fixstr(ss || xml); break; } safe_format_xlml(cell, nf, o); if (o.cellFormula !== false) { if (cell.Formula) { var fstr = unescapexml(cell.Formula); if (fstr.charCodeAt(0) == 61) fstr = fstr.substr(1); cell.f = rc_to_a1(fstr, base); delete cell.Formula; if (cell.ArrayRange == "RC") cell.F = rc_to_a1("RC:RC", base); else if (cell.ArrayRange) { cell.F = rc_to_a1(cell.ArrayRange, base); arrayf.push([safe_decode_range(cell.F), cell.F]) } } else { for (i = 0; i < arrayf.length; ++i) if (base.r >= arrayf[i][0].s.r && base.r <= arrayf[i][0].e.r) if (base.c >= arrayf[i][0].s.c && base.c <= arrayf[i][0].e.c) cell.F = arrayf[i][1] } } if (o.cellStyles) { interiors.forEach(function (x) { if (!S.patternType && x.patternType) S.patternType = x.patternType }); cell.s = S } cell.ixfe = cell.StyleID !== undefined ? cell.StyleID : "Default" } function xlml_clean_comment(comment) { comment.t = comment.v || ""; comment.t = comment.t.replace(/\r\n/g, "\n").replace(/\r/g, "\n"); comment.v = comment.w = comment.ixfe = undefined } function xlml_normalize(d) { if (has_buf && Buffer.isBuffer(d)) return d.toString("utf8"); if (typeof d === "string") return d; throw new Error("Bad input format: expected Buffer or string") } var xlmlregex = /<(\/?)([^\s?>!\/:]*:|)([^\s?>]*[^\s?>\/])[^>]*>/gm; function parse_xlml_xml(d, _opts) { var opts = _opts || {}; make_ssf(SSF); var str = debom(xlml_normalize(d)); if (opts && opts.type == "binary" && typeof cptable !== "undefined") str = cptable.utils.decode(65001, char_codes(str)); if (str.substr(0, 1e3).indexOf("<html") >= 0) return HTML_.to_workbook(str, opts); var Rn; var state = [], tmp; if (DENSE != null && opts.dense == null) opts.dense = DENSE; var sheets = {}, sheetnames = [], cursheet = opts.dense ? [] : {}, sheetname = ""; var table = {}, cell = {}, row = {}; var dtag = xlml_parsexmltag('<Data ss:Type="String">'), didx = 0; var c = 0, r = 0; var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } }; var styles = {}, stag = {}; var ss = "", fidx = 0; var mergecells = []; var Props = {}, Custprops = {}, pidx = 0, cp = {}; var comments = [], comment = {}; var cstys = [], csty, seencol = false; var arrayf = []; var rowinfo = [], rowobj = {}; var Workbook = { Sheets: [], WBProps: { date1904: false } }, wsprops = {}; xlmlregex.lastIndex = 0; str = str.replace(/<!--([\s\S]*?)-->/gm, ""); while (Rn = xlmlregex.exec(str)) switch (Rn[3]) { case "Data": if (state[state.length - 1][1]) break; if (Rn[1] === "/") parse_xlml_data(str.slice(didx, Rn.index), ss, dtag, state[state.length - 1][0] == "Comment" ? comment : cell, { c: c, r: r }, styles, cstys[c], row, arrayf, opts); else { ss = ""; dtag = xlml_parsexmltag(Rn[0]); didx = Rn.index + Rn[0].length } break; case "Cell": if (Rn[1] === "/") { if (comments.length > 0) cell.c = comments; if ((!opts.sheetRows || opts.sheetRows > r) && cell.v !== undefined) { if (opts.dense) { if (!cursheet[r]) cursheet[r] = []; cursheet[r][c] = cell } else cursheet[encode_col(c) + encode_row(r)] = cell } if (cell.HRef) { cell.l = { Target: cell.HRef, Tooltip: cell.HRefScreenTip }; delete cell.HRef; delete cell.HRefScreenTip } if (cell.MergeAcross || cell.MergeDown) { var cc = c + (parseInt(cell.MergeAcross, 10) | 0); var rr = r + (parseInt(cell.MergeDown, 10) | 0); mergecells.push({ s: { c: c, r: r }, e: { c: cc, r: rr } }) } if (!opts.sheetStubs) { if (cell.MergeAcross) c = cc + 1; else ++c } else if (cell.MergeAcross || cell.MergeDown) { for (var cma = c; cma <= cc; ++cma) { for (var cmd = r; cmd <= rr; ++cmd) { if (cma > c || cmd > r) { if (opts.dense) { if (!cursheet[cmd]) cursheet[cmd] = []; cursheet[cmd][cma] = { t: "z" } } else cursheet[encode_col(cma) + encode_row(cmd)] = { t: "z" } } } } c = cc + 1 } else ++c } else { cell = xlml_parsexmltagobj(Rn[0]); if (cell.Index) c = +cell.Index - 1; if (c < refguess.s.c) refguess.s.c = c; if (c > refguess.e.c) refguess.e.c = c; if (Rn[0].slice(-2) === "/>")++c; comments = [] } break; case "Row": if (Rn[1] === "/" || Rn[0].slice(-2) === "/>") { if (r < refguess.s.r) refguess.s.r = r; if (r > refguess.e.r) refguess.e.r = r; if (Rn[0].slice(-2) === "/>") { row = xlml_parsexmltag(Rn[0]); if (row.Index) r = +row.Index - 1 } c = 0; ++r } else { row = xlml_parsexmltag(Rn[0]); if (row.Index) r = +row.Index - 1; rowobj = {}; if (row.AutoFitHeight == "0" || row.Height) { rowobj.hpx = parseInt(row.Height, 10); rowobj.hpt = px2pt(rowobj.hpx); rowinfo[r] = rowobj } if (row.Hidden == "1") { rowobj.hidden = true; rowinfo[r] = rowobj } } break; case "Worksheet": if (Rn[1] === "/") { if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|")); sheetnames.push(sheetname); if (refguess.s.r <= refguess.e.r && refguess.s.c <= refguess.e.c) cursheet["!ref"] = encode_range(refguess); if (mergecells.length) cursheet["!merges"] = mergecells; if (cstys.length > 0) cursheet["!cols"] = cstys; if (rowinfo.length > 0) cursheet["!rows"] = rowinfo; sheets[sheetname] = cursheet } else { refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } }; r = c = 0; state.push([Rn[3], false]); tmp = xlml_parsexmltag(Rn[0]); sheetname = unescapexml(tmp.Name); cursheet = opts.dense ? [] : {}; mergecells = []; arrayf = []; rowinfo = []; wsprops = { name: sheetname, Hidden: 0 }; Workbook.Sheets.push(wsprops) } break; case "Table": if (Rn[1] === "/") { if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|")) } else if (Rn[0].slice(-2) == "/>") break; else { table = xlml_parsexmltag(Rn[0]); state.push([Rn[3], false]); cstys = []; seencol = false } break; case "Style": if (Rn[1] === "/") process_style_xlml(styles, stag, opts); else stag = xlml_parsexmltag(Rn[0]); break; case "NumberFormat": stag.nf = unescapexml(xlml_parsexmltag(Rn[0]).Format || "General"); if (XLMLFormatMap[stag.nf]) stag.nf = XLMLFormatMap[stag.nf]; for (var ssfidx = 0; ssfidx != 392; ++ssfidx) if (SSF._table[ssfidx] == stag.nf) break; if (ssfidx == 392) for (ssfidx = 57; ssfidx != 392; ++ssfidx) if (SSF._table[ssfidx] == null) { SSF.load(stag.nf, ssfidx); break } break; case "Column": if (state[state.length - 1][0] !== "Table") break; csty = xlml_parsexmltag(Rn[0]); if (csty.Hidden) { csty.hidden = true; delete csty.Hidden } if (csty.Width) csty.wpx = parseInt(csty.Width, 10); if (!seencol && csty.wpx > 10) { seencol = true; MDW = DEF_MDW; for (var _col = 0; _col < cstys.length; ++_col) if (cstys[_col]) process_col(cstys[_col]) } if (seencol) process_col(csty); cstys[csty.Index - 1 || cstys.length] = csty; for (var i = 0; i < +csty.Span; ++i) cstys[cstys.length] = dup(csty); break; case "NamedRange": if (!Workbook.Names) Workbook.Names = []; var _NamedRange = parsexmltag(Rn[0]); var _DefinedName = { Name: _NamedRange.Name, Ref: rc_to_a1(_NamedRange.RefersTo.substr(1)) }; if (Workbook.Sheets.length > 0) _DefinedName.Sheet = Workbook.Sheets.length - 1; Workbook.Names.push(_DefinedName); break; case "NamedCell": break; case "B": break; case "I": break; case "U": break; case "S": break; case "Sub": break; case "Sup": break; case "Span": break; case "Border": break; case "Alignment": break; case "Borders": break; case "Font": if (Rn[0].slice(-2) === "/>") break; else if (Rn[1] === "/") ss += str.slice(fidx, Rn.index); else fidx = Rn.index + Rn[0].length; break; case "Interior": if (!opts.cellStyles) break; stag.Interior = xlml_parsexmltag(Rn[0]); break; case "Protection": break; case "Author":; case "Title":; case "Description":; case "Created":; case "Keywords":; case "Subject":; case "Category":; case "Company":; case "LastAuthor":; case "LastSaved":; case "LastPrinted":; case "Version":; case "Revision":; case "TotalTime":; case "HyperlinkBase":; case "Manager":; case "ContentStatus":; case "Identifier":; case "Language": if (Rn[0].slice(-2) === "/>") break; else if (Rn[1] === "/") xlml_set_prop(Props, Rn[3], str.slice(pidx, Rn.index)); else pidx = Rn.index + Rn[0].length; break; case "Paragraphs": break; case "Styles":; case "Workbook": if (Rn[1] === "/") { if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|")) } else state.push([Rn[3], false]); break; case "Comment": if (Rn[1] === "/") { if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|")); xlml_clean_comment(comment); comments.push(comment) } else { state.push([Rn[3], false]); tmp = xlml_parsexmltag(Rn[0]); comment = { a: tmp.Author } } break; case "AutoFilter": if (Rn[1] === "/") { if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|")) } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") { var AutoFilter = xlml_parsexmltag(Rn[0]); cursheet["!autofilter"] = { ref: rc_to_a1(AutoFilter.Range).replace(/\$/g, "") }; state.push([Rn[3], true]) } break; case "Name": break; case "ComponentOptions":; case "DocumentProperties":; case "CustomDocumentProperties":; case "OfficeDocumentSettings":; case "PivotTable":; case "PivotCache":; case "Names":; case "MapInfo":; case "PageBreaks":; case "QueryTable":; case "DataValidation":; case "Sorting":; case "Schema":; case "data":; case "ConditionalFormatting":; case "SmartTagType":; case "SmartTags":; case "ExcelWorkbook":; case "WorkbookOptions":; case "WorksheetOptions": if (Rn[1] === "/") { if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|")) } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([Rn[3], true]); break; default: if (state.length == 0 && Rn[3] == "document") return parse_fods(str, opts); if (state.length == 0 && Rn[3] == "UOF") return parse_fods(str, opts); var seen = true; switch (state[state.length - 1][0]) { case "OfficeDocumentSettings": switch (Rn[3]) { case "AllowPNG": break; case "RemovePersonalInformation": break; case "DownloadComponents": break; case "LocationOfComponents": break; case "Colors": break; case "Color": break; case "Index": break; case "RGB": break; case "PixelsPerInch": break; case "TargetScreenSize": break; case "ReadOnlyRecommended": break; default: seen = false; } break; case "ComponentOptions": switch (Rn[3]) { case "Toolbar": break; case "HideOfficeLogo": break; case "SpreadsheetAutoFit": break; case "Label": break; case "Caption": break; case "MaxHeight": break; case "MaxWidth": break; case "NextSheetNumber": break; default: seen = false; } break; case "ExcelWorkbook": switch (Rn[3]) { case "Date1904": Workbook.WBProps.date1904 = true; break; case "WindowHeight": break; case "WindowWidth": break; case "WindowTopX": break; case "WindowTopY": break; case "TabRatio": break; case "ProtectStructure": break; case "ProtectWindows": break; case "ActiveSheet": break; case "DisplayInkNotes": break; case "FirstVisibleSheet": break; case "SupBook": break; case "SheetName": break; case "SheetIndex": break; case "SheetIndexFirst": break; case "SheetIndexLast": break; case "Dll": break; case "AcceptLabelsInFormulas": break; case "DoNotSaveLinkValues": break; case "Iteration": break; case "MaxIterations": break; case "MaxChange": break; case "Path": break; case "Xct": break; case "Count": break; case "SelectedSheets": break; case "Calculation": break; case "Uncalced": break; case "StartupPrompt": break; case "Crn": break; case "ExternName": break; case "Formula": break; case "ColFirst": break; case "ColLast": break; case "WantAdvise": break; case "Boolean": break; case "Error": break; case "Text": break; case "OLE": break; case "NoAutoRecover": break; case "PublishObjects": break; case "DoNotCalculateBeforeSave": break; case "Number": break; case "RefModeR1C1": break; case "EmbedSaveSmartTags": break; default: seen = false; } break; case "WorkbookOptions": switch (Rn[3]) { case "OWCVersion": break; case "Height": break; case "Width": break; default: seen = false; } break; case "WorksheetOptions": switch (Rn[3]) { case "Visible": if (Rn[0].slice(-2) === "/>") { } else if (Rn[1] === "/") switch (str.slice(pidx, Rn.index)) { case "SheetHidden": wsprops.Hidden = 1; break; case "SheetVeryHidden": wsprops.Hidden = 2; break; } else pidx = Rn.index + Rn[0].length; break; case "Header": if (!cursheet["!margins"]) default_margins(cursheet["!margins"] = {}, "xlml"); cursheet["!margins"].header = parsexmltag(Rn[0]).Margin; break; case "Footer": if (!cursheet["!margins"]) default_margins(cursheet["!margins"] = {}, "xlml"); cursheet["!margins"].footer = parsexmltag(Rn[0]).Margin; break; case "PageMargins": var pagemargins = parsexmltag(Rn[0]); if (!cursheet["!margins"]) default_margins(cursheet["!margins"] = {}, "xlml"); if (pagemargins.Top) cursheet["!margins"].top = pagemargins.Top; if (pagemargins.Left) cursheet["!margins"].left = pagemargins.Left; if (pagemargins.Right) cursheet["!margins"].right = pagemargins.Right; if (pagemargins.Bottom) cursheet["!margins"].bottom = pagemargins.Bottom; break; case "Unsynced": break; case "Print": break; case "Panes": break; case "Scale": break; case "Pane": break; case "Number": break; case "Layout": break; case "PageSetup": break; case "Selected": break; case "ProtectObjects": break; case "EnableSelection": break; case "ProtectScenarios": break; case "ValidPrinterInfo": break; case "HorizontalResolution": break; case "VerticalResolution": break; case "NumberofCopies": break; case "ActiveRow": break; case "ActiveCol": break; case "ActivePane": break; case "TopRowVisible": break; case "TopRowBottomPane": break; case "LeftColumnVisible": break; case "LeftColumnRightPane": break; case "FitToPage": break; case "RangeSelection": break; case "PaperSizeIndex": break; case "PageLayoutZoom": break; case "PageBreakZoom": break; case "FilterOn": break; case "DoNotDisplayGridlines": break; case "SplitHorizontal": break; case "SplitVertical": break; case "FreezePanes": break; case "FrozenNoSplit": break; case "FitWidth": break; case "FitHeight": break; case "CommentsLayout": break; case "Zoom": break; case "LeftToRight": break; case "Gridlines": break; case "AllowSort": break; case "AllowFilter": break; case "AllowInsertRows": break; case "AllowDeleteRows": break; case "AllowInsertCols": break; case "AllowDeleteCols": break; case "AllowInsertHyperlinks": break; case "AllowFormatCells": break; case "AllowSizeCols": break; case "AllowSizeRows": break; case "NoSummaryRowsBelowDetail": break; case "TabColorIndex": break; case "DoNotDisplayHeadings": break; case "ShowPageLayoutZoom": break; case "NoSummaryColumnsRightDetail": break; case "BlackAndWhite": break; case "DoNotDisplayZeros": break; case "DisplayPageBreak": break; case "RowColHeadings": break; case "DoNotDisplayOutline": break; case "NoOrientation": break; case "AllowUsePivotTables": break; case "ZeroHeight": break; case "ViewableRange": break; case "Selection": break; case "ProtectContents": break; default: seen = false; } break; case "PivotTable":; case "PivotCache": switch (Rn[3]) { case "ImmediateItemsOnDrop": break; case "ShowPageMultipleItemLabel": break; case "CompactRowIndent": break; case "Location": break; case "PivotField": break; case "Orientation": break; case "LayoutForm": break; case "LayoutSubtotalLocation": break; case "LayoutCompactRow": break; case "Position": break; case "PivotItem": break; case "DataType": break; case "DataField": break; case "SourceName": break; case "ParentField": break; case "PTLineItems": break; case "PTLineItem": break; case "CountOfSameItems": break; case "Item": break; case "ItemType": break; case "PTSource": break; case "CacheIndex": break; case "ConsolidationReference": break; case "FileName": break; case "Reference": break; case "NoColumnGrand": break; case "NoRowGrand": break; case "BlankLineAfterItems": break; case "Hidden": break; case "Subtotal": break; case "BaseField": break; case "MapChildItems": break; case "Function": break; case "RefreshOnFileOpen": break; case "PrintSetTitles": break; case "MergeLabels": break; case "DefaultVersion": break; case "RefreshName": break; case "RefreshDate": break; case "RefreshDateCopy": break; case "VersionLastRefresh": break; case "VersionLastUpdate": break; case "VersionUpdateableMin": break; case "VersionRefreshableMin": break; case "Calculation": break; default: seen = false; } break; case "PageBreaks": switch (Rn[3]) { case "ColBreaks": break; case "ColBreak": break; case "RowBreaks": break; case "RowBreak": break; case "ColStart": break; case "ColEnd": break; case "RowEnd": break; default: seen = false; } break; case "AutoFilter": switch (Rn[3]) { case "AutoFilterColumn": break; case "AutoFilterCondition": break; case "AutoFilterAnd": break; case "AutoFilterOr": break; default: seen = false; } break; case "QueryTable": switch (Rn[3]) { case "Id": break; case "AutoFormatFont": break; case "AutoFormatPattern": break; case "QuerySource": break; case "QueryType": break; case "EnableRedirections": break; case "RefreshedInXl9": break; case "URLString": break; case "HTMLTables": break; case "Connection": break; case "CommandText": break; case "RefreshInfo": break; case "NoTitles": break; case "NextId": break; case "ColumnInfo": break; case "OverwriteCells": break; case "DoNotPromptForFile": break; case "TextWizardSettings": break; case "Source": break; case "Number": break; case "Decimal": break; case "ThousandSeparator": break; case "TrailingMinusNumbers": break; case "FormatSettings": break; case "FieldType": break; case "Delimiters": break; case "Tab": break; case "Comma": break; case "AutoFormatName": break; case "VersionLastEdit": break; case "VersionLastRefresh": break; default: seen = false; } break; case "Sorting":; case "ConditionalFormatting":; case "DataValidation": switch (Rn[3]) { case "Range": break; case "Type": break; case "Min": break; case "Max": break; case "Sort": break; case "Descending": break; case "Order": break; case "CaseSensitive": break; case "Value": break; case "ErrorStyle": break; case "ErrorMessage": break; case "ErrorTitle": break; case "CellRangeList": break; case "InputMessage": break; case "InputTitle": break; case "ComboHide": break; case "InputHide": break; case "Condition": break; case "Qualifier": break; case "UseBlank": break; case "Value1": break; case "Value2": break; case "Format": break; default: seen = false; } break; case "MapInfo":; case "Schema":; case "data": switch (Rn[3]) { case "Map": break; case "Entry": break; case "Range": break; case "XPath": break; case "Field": break; case "XSDType": break; case "FilterOn": break; case "Aggregate": break; case "ElementType": break; case "AttributeType": break; case "schema":; case "element":; case "complexType":; case "datatype":; case "all":; case "attribute":; case "extends": break; case "row": break; default: seen = false; } break; case "SmartTags": break; default: seen = false; break; } if (seen) break; if (!state[state.length - 1][1]) throw "Unrecognized tag: " + Rn[3] + "|" + state.join("|"); if (state[state.length - 1][0] === "CustomDocumentProperties") { if (Rn[0].slice(-2) === "/>") break; else if (Rn[1] === "/") xlml_set_custprop(Custprops, Rn, cp, str.slice(pidx, Rn.index)); else { cp = Rn; pidx = Rn.index + Rn[0].length } break } if (opts.WTF) throw "Unrecognized tag: " + Rn[3] + "|" + state.join("|"); } var out = {}; if (!opts.bookSheets && !opts.bookProps) out.Sheets = sheets; out.SheetNames = sheetnames; out.Workbook = Workbook; out.SSF = SSF.get_table(); out.Props = Props; out.Custprops = Custprops; return out } function parse_xlml(data, opts) { fix_read_opts(opts = opts || {}); switch (opts.type || "base64") { case "base64": return parse_xlml_xml(Base64.decode(data), opts); case "binary":; case "buffer":; case "file": return parse_xlml_xml(data, opts); case "array": return parse_xlml_xml(data.map(_chr).join(""), opts); } } function write_props_xlml(wb, opts) { var o = []; if (wb.Props) o.push(xlml_write_docprops(wb.Props, opts)); if (wb.Custprops) o.push(xlml_write_custprops(wb.Props, wb.Custprops, opts)); return o.join("") } function write_wb_xlml(wb, opts) { return "" } function write_sty_xlml(wb, opts) { return "" } function write_ws_xlml_wsopts(ws, opts, idx, wb) { if (!ws) return ""; var o = []; if (ws["!margins"]) { o.push("<PageSetup>"); if (ws["!margins"].header) o.push(writextag("Header", null, { "x:Margin": ws["!margins"].header })); if (ws["!margins"].footer) o.push(writextag("Footer", null, { "x:Margin": ws["!margins"].footer })); o.push(writextag("PageMargins", null, { "x:Bottom": ws["!margins"].bottom || "0.75", "x:Left": ws["!margins"].left || "0.7", "x:Right": ws["!margins"].right || "0.7", "x:Top": ws["!margins"].top || "0.75" })); o.push("</PageSetup>") } if (wb && wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx]) { if (wb.Workbook.Sheets[idx].Hidden) o.push(writextag("Visible", wb.Workbook.Sheets[idx].Hidden == 1 ? "SheetHidden" : "SheetVeryHidden", {})); else { for (var i = 0; i < idx; ++i) if (wb.Workbook.Sheets[i] && !wb.Workbook.Sheets[i].Hidden) break; if (i == idx) o.push("<Selected/>") } } if (ws["!protect"]) { o.push(writetag("ProtectContents", "True")); if (ws["!protect"].objects) o.push(writetag("ProtectObjects", "True")); if (ws["!protect"].scenarios) o.push(writetag("ProtectScenarios", "True")); if (ws["!protect"].selectLockedCells != null && !ws["!protect"].selectLockedCells) o.push(writetag("EnableSelection", "NoSelection")); else if (ws["!protect"].selectUnlockedCells != null && !ws["!protect"].selectUnlockedCells) o.push(writetag("EnableSelection", "UnlockedCells"));[["formatColumns", "AllowFormatCells"], ["formatRows", "AllowSizeCols"], ["formatCells", "AllowSizeRows"], ["insertColumns", "AllowInsertCols"], ["insertRows", "AllowInsertRows"], ["insertHyperlinks", "AllowInsertHyperlinks"], ["deleteColumns", "AllowDeleteCols"], ["deleteRows", "AllowDeleteRows"], ["sort", "AllowSort"], ["autoFilter", "AllowFilter"], ["pivotTables", "AllowUsePivotTables"]].forEach(function (x) { if (ws["!protect"][x[0]]) o.push("<" + x[1] + "/>") }) } if (o.length == 0) return ""; return writextag("WorksheetOptions", o.join(""), { xmlns: XLMLNS.x }) } function write_ws_xlml_comment(comments) { return comments.map(function (c) { var t = xlml_unfixstr(c.t || ""); var d = writextag("ss:Data", t, { xmlns: "http://www.w3.org/TR/REC-html40" }); return writextag("Comment", d, { "ss:Author": c.a }) }).join("") } function write_ws_xlml_cell(cell, ref, ws, opts, idx, wb, addr) { if (!cell || cell.v == undefined && cell.f == undefined) return "<Cell></Cell>"; var attr = {}; if (cell.f) attr["ss:Formula"] = "=" + escapexml(a1_to_rc(cell.f, addr)); if (cell.F && cell.F.substr(0, ref.length) == ref) { var end = decode_cell(cell.F.substr(ref.length + 1)); attr["ss:ArrayRange"] = "RC:R" + (end.r == addr.r ? "" : "[" + (end.r - addr.r) + "]") + "C" + (end.c == addr.c ? "" : "[" + (end.c - addr.c) + "]") } if (cell.l && cell.l.Target) { attr["ss:HRef"] = escapexml(cell.l.Target); if (cell.l.Tooltip) attr["x:HRefScreenTip"] = escapexml(cell.l.Tooltip) } if (ws["!merges"]) { var marr = ws["!merges"]; for (var mi = 0; mi != marr.length; ++mi) { if (marr[mi].s.c != addr.c || marr[mi].s.r != addr.r) continue; if (marr[mi].e.c > marr[mi].s.c) attr["ss:MergeAcross"] = marr[mi].e.c - marr[mi].s.c; if (marr[mi].e.r > marr[mi].s.r) attr["ss:MergeDown"] = marr[mi].e.r - marr[mi].s.r } } var t = "", p = ""; switch (cell.t) { case "z": return ""; case "n": t = "Number"; p = String(cell.v); break; case "b": t = "Boolean"; p = cell.v ? "1" : "0"; break; case "e": t = "Error"; p = BErr[cell.v]; break; case "d": t = "DateTime"; p = new Date(cell.v).toISOString(); break; case "s": t = "String"; p = escapexml(cell.v || ""); break; } var _v = cell.v != null ? p : ""; if (opts && opts.type == "binary" && typeof cptable !== "undefined" && cell.t == "s") { _v = cptable.utils.encode(65001, _v); var __v = ""; for (var __i = 0; __i < _v.length; ++__i) __v += String.fromCharCode(_v[__i]); _v = __v } var m = '<Data ss:Type="' + t + '">' + _v + "</Data>"; if ((cell.c || []).length > 0) m += write_ws_xlml_comment(cell.c); return writextag("Cell", m, attr) } function write_ws_xlml_row(R, row) { var o = '<Row ss:Index="' + (R + 1) + '"'; if (row) { if (row.hpt && !row.hpx) row.hpx = pt2px(row.hpt); if (row.hpx) o += ' ss:AutoFitHeight="0" ss:Height="' + row.hpx + '"'; if (row.hidden) o += ' ss:Hidden="1"' } return o + ">" } function write_ws_xlml_table(ws, opts, idx, wb) {
        if (!ws["!ref"]) return ""; var range = safe_decode_range(ws["!ref"]); var marr = ws["!merges"] || [], mi = 0; var o = []; if (ws["!cols"]) ws["!cols"].forEach(function (n, i) { process_col(n); var w = !!n.width; var p = col_obj_w(i, n); var k = { "ss:Index": i + 1 }; if (w) k["ss:Width"] = width2px(p.width); if (n.hidden) k["ss:Hidden"] = "1"; o.push(writextag("Column", null, k)) }); var dense = Array.isArray(ws); for (var R = range.s.r; R <= range.e.r; ++R) {
            var row = [write_ws_xlml_row(R, (ws["!rows"] || [])[R])]; for (var C = range.s.c; C <= range.e.c; ++C) {
                var skip = false; for (mi = 0; mi != marr.length; ++mi) { if (marr[mi].s.c > C) continue; if (marr[mi].s.r > R) continue; if (marr[mi].e.c < C) continue; if (marr[mi].e.r < R) continue; if (marr[mi].s.c != C || marr[mi].s.r != R) skip = true; break } if (skip) continue;
                var addr = { r: R, c: C }; var ref = encode_cell(addr), cell = dense ? (ws[R] || [])[C] : ws[ref]; row.push(write_ws_xlml_cell(cell, ref, ws, opts, idx, wb, addr))
            } row.push("</Row>"); if (row.length > 2) o.push(row.join(""))
        } return o.join("")
    } function write_ws_xlml(idx, opts, wb) { var o = []; var s = wb.SheetNames[idx]; var ws = wb.Sheets[s]; var t = ws ? write_ws_xlml_table(ws, opts, idx, wb) : ""; if (t.length > 0) o.push("<Table>" + t + "</Table>"); o.push(write_ws_xlml_wsopts(ws, opts, idx, wb)); return o.join("") } function write_xlml(wb, opts) { var d = []; d.push(write_props_xlml(wb, opts)); d.push(write_wb_xlml(wb, opts)); d.push(write_sty_xlml(wb, opts)); for (var i = 0; i < wb.SheetNames.length; ++i) d.push(writextag("Worksheet", write_ws_xlml(i, opts, wb), { "ss:Name": escapexml(wb.SheetNames[i]) })); return XML_HEADER + writextag("Workbook", d.join(""), { xmlns: XLMLNS.ss, "xmlns:o": XLMLNS.o, "xmlns:x": XLMLNS.x, "xmlns:ss": XLMLNS.ss, "xmlns:dt": XLMLNS.dt, "xmlns:html": XLMLNS.html }) } function parse_compobj(obj) { var v = {}; var o = obj.content; var l = 28, m; m = __lpstr(o, l); l += 4 + __readUInt32LE(o, l); v.UserType = m; m = __readUInt32LE(o, l); l += 4; switch (m) { case 0: break; case 4294967295:; case 4294967294: l += 4; break; default: if (m > 400) throw new Error("Unsupported Clipboard: " + m.toString(16)); l += m; } m = __lpstr(o, l); l += m.length === 0 ? 0 : 5 + m.length; v.Reserved1 = m; if ((m = __readUInt32LE(o, l)) !== 1907550708) return v; throw new Error("Unsupported Unicode Extension") } function slurp(R, blob, length, opts) { var l = length; var bufs = []; var d = blob.slice(blob.l, blob.l + l); if (opts && opts.enc && opts.enc.insitu_decrypt) switch (R.n) { case "BOF":; case "FilePass":; case "FileLock":; case "InterfaceHdr":; case "RRDInfo":; case "RRDHead":; case "UsrExcl": break; default: if (d.length === 0) break; opts.enc.insitu_decrypt(d); } bufs.push(d); blob.l += l; var next = XLSRecordEnum[__readUInt16LE(blob, blob.l)]; while (next != null && next.n === "Continue") { l = __readUInt16LE(blob, blob.l + 2); bufs.push(blob.slice(blob.l + 4, blob.l + 4 + l)); blob.l += 4 + l; next = XLSRecordEnum[__readUInt16LE(blob, blob.l)] } var b = bconcat(bufs); prep_blob(b, 0); var ll = 0; b.lens = []; for (var j = 0; j < bufs.length; ++j) { b.lens.push(ll); ll += bufs[j].length } return R.f(b, b.length, opts) } function safe_format_xf(p, opts, date1904) { if (p.t === "z") return; if (!p.XF) return; var fmtid = 0; try { fmtid = p.z || p.XF.ifmt || 0; if (opts.cellNF) p.z = SSF._table[fmtid] } catch (e) { if (opts.WTF) throw e } if (!opts || opts.cellText !== false) try { if (p.t === "e") { p.w = p.w || BErr[p.v] } else if (fmtid === 0) { if (p.t === "n") { if ((p.v | 0) === p.v) p.w = SSF._general_int(p.v); else p.w = SSF._general_num(p.v) } else p.w = SSF._general(p.v) } else p.w = SSF.format(fmtid, p.v, { date1904: !!date1904 }); if (opts.cellDates && fmtid && p.t == "n" && SSF.is_date(SSF._table[fmtid])) { var _d = SSF.parse_date_code(p.v); if (_d) { p.t = "d"; p.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u) } } } catch (e) { if (opts.WTF) throw e } } function make_cell(val, ixfe, t) { return { v: val, ixfe: ixfe, t: t } } function parse_workbook(blob, options) { var wb = { opts: {} }; var Sheets = {}; if (DENSE != null && options.dense == null) options.dense = DENSE; var out = options.dense ? [] : {}; var Directory = {}; var found_sheet = false; var range = {}; var last_formula = null; var sst = []; var cur_sheet = ""; var Preamble = {}; var lastcell, last_cell = "", cc, cmnt, rng, rngC, rngR; var shared_formulae = {}; var array_formulae = []; var temp_val; var country; var cell_valid = true; var XFs = []; var palette = []; var Workbook = { Sheets: [], WBProps: { date1904: false } }, wsprops = {}; var get_rgb = function getrgb(icv) { if (icv < 8) return XLSIcv[icv]; if (icv < 64) return palette[icv - 8] || XLSIcv[icv]; return XLSIcv[icv] }; var process_cell_style = function pcs(cell, line, options) { var xfd = line.XF.data; if (!xfd || !xfd.patternType || !options || !options.cellStyles) return; line.s = {}; line.s.patternType = xfd.patternType; var t; if (t = rgb2Hex(get_rgb(xfd.icvFore))) { line.s.fgColor = { rgb: t } } if (t = rgb2Hex(get_rgb(xfd.icvBack))) { line.s.bgColor = { rgb: t } } }; var addcell = function addcell(cell, line, options) { if (file_depth > 1) return; if (!cell_valid) return; if (options.cellStyles && line.XF && line.XF.data) process_cell_style(cell, line, options); lastcell = cell; last_cell = encode_cell(cell); if (range.s) { if (cell.r < range.s.r) range.s.r = cell.r; if (cell.c < range.s.c) range.s.c = cell.c } if (range.e) { if (cell.r + 1 > range.e.r) range.e.r = cell.r + 1; if (cell.c + 1 > range.e.c) range.e.c = cell.c + 1 } if (options.cellFormula && line.f) { for (var afi = 0; afi < array_formulae.length; ++afi) { if (array_formulae[afi][0].s.c > cell.c) continue; if (array_formulae[afi][0].s.r > cell.r) continue; if (array_formulae[afi][0].e.c < cell.c) continue; if (array_formulae[afi][0].e.r < cell.r) continue; line.F = encode_range(array_formulae[afi][0]); if (array_formulae[afi][0].s.c != cell.c) delete line.f; if (array_formulae[afi][0].s.r != cell.r) delete line.f; if (line.f) line.f = "" + stringify_formula(array_formulae[afi][1], range, cell, supbooks, opts); break } } if (options.sheetRows && lastcell.r >= options.sheetRows) cell_valid = false; else { if (options.dense) { if (!out[cell.r]) out[cell.r] = []; out[cell.r][cell.c] = line } else out[last_cell] = line } }; var opts = { enc: false, sbcch: 0, snames: [], sharedf: shared_formulae, arrayf: array_formulae, rrtabid: [], lastuser: "", biff: 8, codepage: 0, winlocked: 0, cellStyles: !!options && !!options.cellStyles, WTF: !!options && !!options.wtf }; if (options.password) opts.password = options.password; var mergecells = []; var objects = []; var colinfo = [], rowinfo = []; var defwidth = 0, defheight = 0; var seencol = false; var supbooks = []; supbooks.SheetNames = opts.snames; supbooks.sharedf = opts.sharedf; supbooks.arrayf = opts.arrayf; supbooks.names = []; supbooks.XTI = []; var last_Rn = ""; var file_depth = 0; var BIFF2Fmt = 0; var BIFF2FmtTable = []; var FilterDatabases = []; var last_lbl; opts.codepage = 1200; set_cp(1200); while (blob.l < blob.length - 1) { var s = blob.l; var RecordType = blob.read_shift(2); if (RecordType === 0 && last_Rn === "EOF") break; var length = blob.l === blob.length ? 0 : blob.read_shift(2), y; var R = XLSRecordEnum[RecordType]; if (R && R.f) { if (options.bookSheets) { if (last_Rn === "BoundSheet8" && R.n !== "BoundSheet8") break } last_Rn = R.n; if (R.r === 2 || R.r == 12) { var rt = blob.read_shift(2); length -= 2; if (!opts.enc && rt !== RecordType) throw "rt mismatch"; if (R.r == 12) { blob.l += 10; length -= 10 } } var val; if (R.n === "EOF") val = R.f(blob, length, opts); else val = slurp(R, blob, length, opts); var Rn = R.n; switch (Rn) { case "Date1904": wb.opts.Date1904 = Workbook.WBProps.date1904 = val; break; case "WriteProtect": wb.opts.WriteProtect = true; break; case "FilePass": if (!opts.enc) blob.l = 0; opts.enc = val; if (opts.WTF) console.error(val); if (!options.password) throw new Error("File is password-protected"); if (val.valid == null) throw new Error("Encryption scheme unsupported"); if (!val.valid) throw new Error("Password is incorrect"); break; case "WriteAccess": opts.lastuser = val; break; case "FileSharing": break; case "CodePage": if (val === 21010) val = 1200; else if (val === 32769) val = 1252; opts.codepage = val; set_cp(val); break; case "RRTabId": opts.rrtabid = val; break; case "WinProtect": opts.winlocked = val; break; case "Template": break; case "RefreshAll": wb.opts.RefreshAll = val; break; case "BookBool": break; case "UsesELFs": break; case "MTRSettings": break; case "CalcCount": wb.opts.CalcCount = val; break; case "CalcDelta": wb.opts.CalcDelta = val; break; case "CalcIter": wb.opts.CalcIter = val; break; case "CalcMode": wb.opts.CalcMode = val; break; case "CalcPrecision": wb.opts.CalcPrecision = val; break; case "CalcSaveRecalc": wb.opts.CalcSaveRecalc = val; break; case "CalcRefMode": opts.CalcRefMode = val; break; case "Uncalced": break; case "ForceFullCalculation": wb.opts.FullCalc = val; break; case "WsBool": break; case "XF": XFs.push(val); break; case "ExtSST": break; case "BookExt": break; case "RichTextStream": break; case "BkHim": break; case "SupBook": supbooks.push([val]); supbooks[supbooks.length - 1].XTI = []; break; case "ExternName": supbooks[supbooks.length - 1].push(val); break; case "Index": break; case "Lbl": last_lbl = { Name: val.Name, Ref: stringify_formula(val.rgce, range, null, supbooks, opts) }; if (val.itab > 0) last_lbl.Sheet = val.itab - 1; supbooks.names.push(last_lbl); if (!supbooks[0]) supbooks[0] = []; supbooks[supbooks.length - 1].push(val); if (val.Name == "_xlnm._FilterDatabase" && val.itab > 0) if (val.rgce && val.rgce[0] && val.rgce[0][0] && val.rgce[0][0][0] == "PtgArea3d") FilterDatabases[val.itab - 1] = { ref: encode_range(val.rgce[0][0][1][2]) }; break; case "ExternSheet": if (supbooks.length == 0) { supbooks[0] = []; supbooks[0].XTI = [] } supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val); supbooks.XTI = supbooks.XTI.concat(val); break; case "NameCmt": if (opts.biff < 8) break; if (last_lbl != null) last_lbl.Comment = val[1]; break; case "Protect": out["!protect"] = val; break; case "Password": if (val !== 0 && opts.WTF) console.error("Password verifier: " + val); break; case "Prot4Rev":; case "Prot4RevPass": break; case "BoundSheet8": { Directory[val.pos] = val; opts.snames.push(val.name) } break; case "EOF": { if (--file_depth) break; if (range.e) { if (range.e.r > 0 && range.e.c > 0) { range.e.r--; range.e.c--; out["!ref"] = encode_range(range); range.e.r++; range.e.c++ } if (mergecells.length > 0) out["!merges"] = mergecells; if (objects.length > 0) out["!objects"] = objects; if (colinfo.length > 0) out["!cols"] = colinfo; if (rowinfo.length > 0) out["!rows"] = rowinfo; Workbook.Sheets.push(wsprops) } if (cur_sheet === "") Preamble = out; else Sheets[cur_sheet] = out; out = options.dense ? [] : {} } break; case "BOF": { if (opts.biff !== 8) { } else if (RecordType === 9) opts.biff = 2; else if (RecordType === 521) opts.biff = 3; else if (RecordType === 1033) opts.biff = 4; else if (val.BIFFVer === 1280) opts.biff = 5; else if (val.BIFFVer === 1536) opts.biff = 8; else if (val.BIFFVer === 2) opts.biff = 2; else if (val.BIFFVer === 7) opts.biff = 2; if (file_depth++) break; cell_valid = true; out = options.dense ? [] : {}; if (opts.biff < 5) { if (cur_sheet === "") cur_sheet = "Sheet1"; range = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } }; var fakebs8 = { pos: blob.l - length, name: cur_sheet }; Directory[fakebs8.pos] = fakebs8; opts.snames.push(cur_sheet) } else cur_sheet = (Directory[s] || { name: "" }).name; if (val.dt == 32) out["!type"] = "chart"; mergecells = []; objects = []; array_formulae = []; opts.arrayf = array_formulae; colinfo = []; rowinfo = []; defwidth = defheight = 0; seencol = false; wsprops = { Hidden: (Directory[s] || { hs: 0 }).hs, name: cur_sheet } } break; case "Number":; case "BIFF2NUM":; case "BIFF2INT": { if (out["!type"] == "chart") if (options.dense ? (out[val.r] || [])[val.c] : out[encode_cell({ c: val.c, r: val.r })])++val.c; temp_val = { ixfe: val.ixfe, XF: XFs[val.ixfe] || {}, v: val.val, t: "n" }; if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 31]; safe_format_xf(temp_val, options, wb.opts.Date1904); addcell({ c: val.c, r: val.r }, temp_val, options) } break; case "BoolErr": { temp_val = { ixfe: val.ixfe, XF: XFs[val.ixfe], v: val.val, t: val.t }; if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 31]; safe_format_xf(temp_val, options, wb.opts.Date1904); addcell({ c: val.c, r: val.r }, temp_val, options) } break; case "RK": { temp_val = { ixfe: val.ixfe, XF: XFs[val.ixfe], v: val.rknum, t: "n" }; if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 31]; safe_format_xf(temp_val, options, wb.opts.Date1904); addcell({ c: val.c, r: val.r }, temp_val, options) } break; case "MulRk": { for (var j = val.c; j <= val.C; ++j) { var ixfe = val.rkrec[j - val.c][0]; temp_val = { ixfe: ixfe, XF: XFs[ixfe], v: val.rkrec[j - val.c][1], t: "n" }; if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 31]; safe_format_xf(temp_val, options, wb.opts.Date1904); addcell({ c: j, r: val.r }, temp_val, options) } } break; case "Formula": { if (val.val == "String") { last_formula = val; break } temp_val = make_cell(val.val, val.cell.ixfe, val.tt); temp_val.XF = XFs[temp_val.ixfe]; if (options.cellFormula) { var _f = val.formula; if (_f && _f[0] && _f[0][0] && _f[0][0][0] == "PtgExp") { var _fr = _f[0][0][1][0], _fc = _f[0][0][1][1]; var _fe = encode_cell({ r: _fr, c: _fc }); if (shared_formulae[_fe]) temp_val.f = "" + stringify_formula(val.formula, range, val.cell, supbooks, opts); else temp_val.F = ((options.dense ? (out[_fr] || [])[_fc] : out[_fe]) || {}).F } else temp_val.f = "" + stringify_formula(val.formula, range, val.cell, supbooks, opts) } if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 31]; safe_format_xf(temp_val, options, wb.opts.Date1904); addcell(val.cell, temp_val, options); last_formula = val } break; case "String": { if (last_formula) { last_formula.val = val; temp_val = make_cell(val, last_formula.cell.ixfe, "s"); temp_val.XF = XFs[temp_val.ixfe]; if (options.cellFormula) { temp_val.f = "" + stringify_formula(last_formula.formula, range, last_formula.cell, supbooks, opts) } if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 31]; safe_format_xf(temp_val, options, wb.opts.Date1904); addcell(last_formula.cell, temp_val, options); last_formula = null } else throw new Error("String record expects Formula") } break; case "Array": { array_formulae.push(val); var _arraystart = encode_cell(val[0].s); cc = options.dense ? (out[val[0].s.r] || [])[val[0].s.c] : out[_arraystart]; if (options.cellFormula && cc) { if (!last_formula) break; if (!_arraystart || !cc) break; cc.f = "" + stringify_formula(val[1], range, val[0], supbooks, opts); cc.F = encode_range(val[0]) } } break; case "ShrFmla": { if (!cell_valid) break; if (!options.cellFormula) break; if (last_cell) { if (!last_formula) break; shared_formulae[encode_cell(last_formula.cell)] = val[0]; cc = options.dense ? (out[last_formula.cell.r] || [])[last_formula.cell.c] : out[encode_cell(last_formula.cell)]; (cc || {}).f = "" + stringify_formula(val[0], range, lastcell, supbooks, opts) } } break; case "LabelSst": temp_val = make_cell(sst[val.isst].t, val.ixfe, "s"); temp_val.XF = XFs[temp_val.ixfe]; if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 31]; safe_format_xf(temp_val, options, wb.opts.Date1904); addcell({ c: val.c, r: val.r }, temp_val, options); break; case "Blank": if (options.sheetStubs) { temp_val = { ixfe: val.ixfe, XF: XFs[val.ixfe], t: "z" }; if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 31]; safe_format_xf(temp_val, options, wb.opts.Date1904); addcell({ c: val.c, r: val.r }, temp_val, options) } break; case "MulBlank": if (options.sheetStubs) { for (var _j = val.c; _j <= val.C; ++_j) { var _ixfe = val.ixfe[_j - val.c]; temp_val = { ixfe: _ixfe, XF: XFs[_ixfe], t: "z" }; if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 31]; safe_format_xf(temp_val, options, wb.opts.Date1904); addcell({ c: _j, r: val.r }, temp_val, options) } } break; case "RString":; case "Label":; case "BIFF2STR": temp_val = make_cell(val.val, val.ixfe, "s"); temp_val.XF = XFs[temp_val.ixfe]; if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 31]; safe_format_xf(temp_val, options, wb.opts.Date1904); addcell({ c: val.c, r: val.r }, temp_val, options); break; case "Dimensions": { if (file_depth === 1) range = val } break; case "SST": { sst = val } break; case "Format": { SSF.load(val[1], val[0]) } break; case "BIFF2FORMAT": { BIFF2FmtTable[BIFF2Fmt++] = val; for (var b2idx = 0; b2idx < BIFF2Fmt + 163; ++b2idx) if (SSF._table[b2idx] == val) break; if (b2idx >= 163) SSF.load(val, BIFF2Fmt + 163) } break; case "MergeCells": mergecells = mergecells.concat(val); break; case "Obj": objects[val.cmo[0]] = opts.lastobj = val; break; case "TxO": opts.lastobj.TxO = val; break; case "ImData": opts.lastobj.ImData = val; break; case "HLink": { for (rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR) for (rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) { cc = options.dense ? (out[rngR] || [])[rngC] : out[encode_cell({ c: rngC, r: rngR })]; if (cc) cc.l = val[1] } } break; case "HLinkTooltip": { for (rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR) for (rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) { cc = options.dense ? (out[rngR] || [])[rngC] : out[encode_cell({ c: rngC, r: rngR })]; if (cc) cc.l.Tooltip = val[1] } } break; case "Note": { if (opts.biff <= 5 && opts.biff >= 2) break; cc = options.dense ? (out[val[0].r] || [])[val[0].c] : out[encode_cell(val[0])]; var noteobj = objects[val[2]]; if (!cc) break; if (!cc.c) cc.c = []; cmnt = { a: val[1], t: noteobj.TxO.t }; cc.c.push(cmnt) } break; default: switch (R.n) { case "ClrtClient": break; case "XFExt": update_xfext(XFs[val.ixfe], val.ext); break; case "DefColWidth": defwidth = val; break; case "DefaultRowHeight": defheight = val[1]; break; case "ColInfo": { if (!opts.cellStyles) break; while (val.e >= val.s) { colinfo[val.e--] = { width: val.w / 256 }; if (!seencol) { seencol = true; find_mdw_colw(val.w / 256) } process_col(colinfo[val.e + 1]) } } break; case "Row": { var rowobj = {}; if (val.level != null) { rowinfo[val.r] = rowobj; rowobj.level = val.level } if (val.hidden) { rowinfo[val.r] = rowobj; rowobj.hidden = true } if (val.hpt) { rowinfo[val.r] = rowobj; rowobj.hpt = val.hpt; rowobj.hpx = pt2px(val.hpt) } } break; case "LeftMargin":; case "RightMargin":; case "TopMargin":; case "BottomMargin": if (!out["!margins"]) default_margins(out["!margins"] = {}); out["!margins"][Rn.slice(0, -6).toLowerCase()] = val; break; case "Setup": if (!out["!margins"]) default_margins(out["!margins"] = {}); out["!margins"].header = val.header; out["!margins"].footer = val.footer; break; case "Header": break; case "Footer": break; case "HCenter": break; case "VCenter": break; case "Pls": break; case "GCW": break; case "LHRecord": break; case "DBCell": break; case "EntExU2": break; case "SxView": break; case "Sxvd": break; case "SXVI": break; case "SXVDEx": break; case "SxIvd": break; case "SXDI": break; case "SXLI": break; case "SXEx": break; case "QsiSXTag": break; case "Selection": break; case "Feat": break; case "FeatHdr":; case "FeatHdr11": break; case "Feature11":; case "Feature12":; case "List12": break; case "Country": country = val; break; case "RecalcId": break; case "DxGCol": break; case "Fbi":; case "Fbi2":; case "GelFrame": break; case "Font": break; case "XFCRC": break; case "Style": break; case "StyleExt": break; case "Palette": palette = val; break; case "Theme": break; case "ScenarioProtect": break; case "ObjProtect": break; case "CondFmt12": break; case "Table": break; case "TableStyles": break; case "TableStyle": break; case "TableStyleElement": break; case "SXStreamID": break; case "SXVS": break; case "DConRef": break; case "SXAddl": break; case "DConBin": break; case "DConName": break; case "SXPI": break; case "SxFormat": break; case "SxSelect": break; case "SxRule": break; case "SxFilt": break; case "SxItm": break; case "SxDXF": break; case "ScenMan": break; case "DCon": break; case "CellWatch": break; case "PrintRowCol": break; case "PrintGrid": break; case "PrintSize": break; case "XCT": break; case "CRN": break; case "Scl": { } break; case "SheetExt": { } break; case "SheetExtOptional": { } break; case "ObNoMacros": { } break; case "ObProj": { } break; case "CodeName": { } break; case "GUIDTypeLib": { } break; case "WOpt": break; case "PhoneticInfo": break; case "OleObjectSize": break; case "DXF":; case "DXFN":; case "DXFN12":; case "DXFN12List":; case "DXFN12NoCB": break; case "Dv":; case "DVal": break; case "BRAI":; case "Series":; case "SeriesText": break; case "DConn": break; case "DbOrParamQry": break; case "DBQueryExt": break; case "IFmtRecord": break; case "CondFmt":; case "CF":; case "CF12":; case "CFEx": break; case "Excel9File": break; case "Units": break; case "InterfaceHdr":; case "Mms":; case "InterfaceEnd":; case "DSF":; case "BuiltInFnGroupCount": break; case "Window1":; case "Window2":; case "HideObj":; case "GridSet":; case "Guts":; case "UserBView":; case "UserSViewBegin":; case "UserSViewEnd":; case "Pane": break; default: switch (R.n) { case "Dat":; case "Begin":; case "End":; case "StartBlock":; case "EndBlock":; case "Frame":; case "Area":; case "Axis":; case "AxisLine":; case "Tick": break; case "AxesUsed":; case "CrtLayout12":; case "CrtLayout12A":; case "CrtLink":; case "CrtLine":; case "CrtMlFrt":; case "CrtMlFrtContinue": break; case "LineFormat":; case "AreaFormat":; case "Chart":; case "Chart3d":; case "Chart3DBarShape":; case "ChartFormat":; case "ChartFrtInfo": break; case "PlotArea":; case "PlotGrowth": break; case "SeriesList":; case "SerParent":; case "SerAuxTrend": break; case "DataFormat":; case "SerToCrt":; case "FontX": break; case "CatSerRange":; case "AxcExt":; case "SerFmt": break; case "ShtProps": break; case "DefaultText":; case "Text":; case "CatLab": break; case "DataLabExtContents": break; case "Legend":; case "LegendException": break; case "Pie":; case "Scatter": break; case "PieFormat":; case "MarkerFormat": break; case "StartObject":; case "EndObject": break; case "AlRuns":; case "ObjectLink": break; case "SIIndex": break; case "AttachedLabel":; case "YMult": break; case "Line":; case "Bar": break; case "Surf": break; case "AxisParent": break; case "Pos": break; case "ValueRange": break; case "SXViewEx9": break; case "SXViewLink": break; case "PivotChartBits": break; case "SBaseRef": break; case "TextPropsStream": break; case "LnExt": break; case "MkrExt": break; case "CrtCoopt": break; case "Qsi":; case "Qsif":; case "Qsir":; case "QsiSXTag": break; case "TxtQry": break; case "FilterMode": break; case "AutoFilter":; case "AutoFilterInfo": break; case "AutoFilter12": break; case "DropDownObjIds": break; case "Sort": break; case "SortData": break; case "ShapePropsStream": break; case "MsoDrawing":; case "MsoDrawingGroup":; case "MsoDrawingSelection": break; case "WebPub":; case "AutoWebPub": break; case "HeaderFooter":; case "HFPicture":; case "PLV":; case "HorizontalPageBreaks":; case "VerticalPageBreaks": break; case "Backup":; case "CompressPictures":; case "Compat12": break; case "Continue":; case "ContinueFrt12": break; case "FrtFontList":; case "FrtWrapper": break; default: switch (R.n) { case "ExternCount": break; case "TabIdConf":; case "Radar":; case "RadarArea":; case "DropBar":; case "Intl":; case "CoordList":; case "SerAuxErrBar": break; case "BIFF2FONTCLR":; case "BIFF2FMTCNT":; case "BIFF2FONTXTRA": break; case "BIFF2XF":; case "BIFF3XF":; case "BIFF4XF": break; case "BIFF4FMTCNT":; case "BIFF2ROW":; case "BIFF2WINDOW2": break; case "SCENARIO":; case "DConBin":; case "PicF":; case "DataLabExt":; case "Lel":; case "BopPop":; case "BopPopCustom":; case "RealTimeData":; case "Name": break; default: if (options.WTF) throw "Unrecognized Record " + R.n; }; }; }; } } else blob.l += length } var sheetnamesraw = Object.keys(Directory).sort(function (a, b) { return Number(a) - Number(b) }).map(function (x) { return Directory[x].name }); var sheetnames = sheetnamesraw.slice(); wb.Directory = sheetnamesraw; wb.SheetNames = sheetnamesraw; if (!options.bookSheets) wb.Sheets = Sheets; if (wb.Sheets) FilterDatabases.forEach(function (r, i) { wb.Sheets[wb.SheetNames[i]]["!autofilter"] = r }); wb.Preamble = Preamble; wb.Strings = sst; wb.SSF = SSF.get_table(); if (opts.enc) wb.Encryption = opts.enc; wb.Metadata = {}; if (country !== undefined) wb.Metadata.Country = country; if (supbooks.names.length > 0) Workbook.Names = supbooks.names; wb.Workbook = Workbook; return wb } function parse_props(cfb) { var DSI = cfb.find("!DocumentSummaryInformation"); if (DSI) try { cfb.DocSummary = parse_PropertySetStream(DSI, DocSummaryPIDDSI) } catch (e) { } var SI = cfb.find("!SummaryInformation"); if (SI) try { cfb.Summary = parse_PropertySetStream(SI, SummaryPIDSI) } catch (e) { } } function parse_xlscfb(cfb, options) { if (!options) options = {}; fix_read_opts(options); reset_cp(); var CompObj, Summary, Workbook; if (cfb.FullPaths) { CompObj = cfb.find("!CompObj"); Summary = cfb.find("!SummaryInformation"); Workbook = cfb.find("/Workbook") } else { prep_blob(cfb, 0); Workbook = { content: cfb } } if (!Workbook) Workbook = cfb.find("/Book"); var CompObjP, SummaryP, WorkbookP; if (CompObj) CompObjP = parse_compobj(CompObj); if (options.bookProps && !options.bookSheets) WorkbookP = {}; else { if (Workbook) WorkbookP = parse_workbook(Workbook.content, options, !!Workbook.find); else if (cfb.find("PerfectOffice_MAIN")) WorkbookP = WK_.to_workbook(cfb.find("PerfectOffice_MAIN").content, options); else if (cfb.find("NativeContent_MAIN")) WorkbookP = WK_.to_workbook(cfb.find("NativeContent_MAIN").content, options); else throw new Error("Cannot find Workbook stream") } if (cfb.FullPaths) parse_props(cfb); var props = {}; for (var y in cfb.Summary) props[y] = cfb.Summary[y]; for (y in cfb.DocSummary) props[y] = cfb.DocSummary[y]; WorkbookP.Props = WorkbookP.Custprops = props; if (options.bookFiles) WorkbookP.cfb = cfb; return WorkbookP } var XLSBRecordEnum = {
        0: { n: "BrtRowHdr", f: parse_BrtRowHdr }, 1: { n: "BrtCellBlank", f: parse_BrtCellBlank }, 2: { n: "BrtCellRk", f: parse_BrtCellRk }, 3: { n: "BrtCellError", f: parse_BrtCellError }, 4: { n: "BrtCellBool", f: parse_BrtCellBool }, 5: { n: "BrtCellReal", f: parse_BrtCellReal }, 6: { n: "BrtCellSt", f: parse_BrtCellSt }, 7: { n: "BrtCellIsst", f: parse_BrtCellIsst }, 8: { n: "BrtFmlaString", f: parse_BrtFmlaString }, 9: { n: "BrtFmlaNum", f: parse_BrtFmlaNum }, 10: { n: "BrtFmlaBool", f: parse_BrtFmlaBool }, 11: { n: "BrtFmlaError", f: parse_BrtFmlaError }, 16: { n: "BrtFRTArchID$", f: parse_BrtFRTArchID$ }, 19: { n: "BrtSSTItem", f: parse_RichStr }, 20: { n: "BrtPCDIMissing", f: parsenoop }, 21: { n: "BrtPCDINumber", f: parsenoop }, 22: { n: "BrtPCDIBoolean", f: parsenoop }, 23: { n: "BrtPCDIError", f: parsenoop }, 24: { n: "BrtPCDIString", f: parsenoop }, 25: { n: "BrtPCDIDatetime", f: parsenoop }, 26: { n: "BrtPCDIIndex", f: parsenoop }, 27: { n: "BrtPCDIAMissing", f: parsenoop }, 28: { n: "BrtPCDIANumber", f: parsenoop }, 29: { n: "BrtPCDIABoolean", f: parsenoop }, 30: { n: "BrtPCDIAError", f: parsenoop }, 31: { n: "BrtPCDIAString", f: parsenoop }, 32: { n: "BrtPCDIADatetime", f: parsenoop }, 33: { n: "BrtPCRRecord", f: parsenoop }, 34: { n: "BrtPCRRecordDt", f: parsenoop }, 35: { n: "BrtFRTBegin", f: parsenoop }, 36: { n: "BrtFRTEnd", f: parsenoop }, 37: { n: "BrtACBegin", f: parsenoop }, 38: { n: "BrtACEnd", f: parsenoop }, 39: { n: "BrtName", f: parse_BrtName }, 40: { n: "BrtIndexRowBlock", f: parsenoop }, 42: { n: "BrtIndexBlock", f: parsenoop }, 43: { n: "BrtFont", f: parse_BrtFont }, 44: { n: "BrtFmt", f: parse_BrtFmt }, 45: { n: "BrtFill", f: parsenoop }, 46: { n: "BrtBorder", f: parsenoop }, 47: { n: "BrtXF", f: parse_BrtXF }, 48: { n: "BrtStyle", f: parsenoop }, 49: { n: "BrtCellMeta", f: parsenoop }, 50: { n: "BrtValueMeta", f: parsenoop }, 51: { n: "BrtMdb", f: parsenoop }, 52: { n: "BrtBeginFmd", f: parsenoop }, 53: { n: "BrtEndFmd", f: parsenoop }, 54: { n: "BrtBeginMdx", f: parsenoop }, 55: { n: "BrtEndMdx", f: parsenoop }, 56: { n: "BrtBeginMdxTuple", f: parsenoop }, 57: { n: "BrtEndMdxTuple", f: parsenoop }, 58: { n: "BrtMdxMbrIstr", f: parsenoop }, 59: { n: "BrtStr", f: parsenoop }, 60: { n: "BrtColInfo", f: parse_ColInfo }, 62: { n: "BrtCellRString", f: parsenoop }, 63: { n: "BrtCalcChainItem$", f: parse_BrtCalcChainItem$ }, 64: { n: "BrtDVal", f: parsenoop }, 65: { n: "BrtSxvcellNum", f: parsenoop }, 66: { n: "BrtSxvcellStr", f: parsenoop }, 67: { n: "BrtSxvcellBool", f: parsenoop }, 68: { n: "BrtSxvcellErr", f: parsenoop }, 69: { n: "BrtSxvcellDate", f: parsenoop }, 70: { n: "BrtSxvcellNil", f: parsenoop }, 128: { n: "BrtFileVersion", f: parsenoop }, 129: { n: "BrtBeginSheet", f: parsenoop }, 130: { n: "BrtEndSheet", f: parsenoop }, 131: { n: "BrtBeginBook", f: parsenoop, p: 0 }, 132: { n: "BrtEndBook", f: parsenoop }, 133: { n: "BrtBeginWsViews", f: parsenoop }, 134: { n: "BrtEndWsViews", f: parsenoop }, 135: { n: "BrtBeginBookViews", f: parsenoop }, 136: { n: "BrtEndBookViews", f: parsenoop }, 137: { n: "BrtBeginWsView", f: parsenoop }, 138: { n: "BrtEndWsView", f: parsenoop }, 139: { n: "BrtBeginCsViews", f: parsenoop }, 140: { n: "BrtEndCsViews", f: parsenoop }, 141: { n: "BrtBeginCsView", f: parsenoop }, 142: { n: "BrtEndCsView", f: parsenoop }, 143: { n: "BrtBeginBundleShs", f: parsenoop }, 144: { n: "BrtEndBundleShs", f: parsenoop }, 145: { n: "BrtBeginSheetData", f: parsenoop }, 146: { n: "BrtEndSheetData", f: parsenoop }, 147: { n: "BrtWsProp", f: parse_BrtWsProp }, 148: { n: "BrtWsDim", f: parse_BrtWsDim, p: 16 }, 151: { n: "BrtPane", f: parsenoop }, 152: { n: "BrtSel", f: parsenoop }, 153: { n: "BrtWbProp", f: parse_BrtWbProp }, 154: { n: "BrtWbFactoid", f: parsenoop }, 155: { n: "BrtFileRecover", f: parsenoop }, 156: { n: "BrtBundleSh", f: parse_BrtBundleSh }, 157: { n: "BrtCalcProp", f: parsenoop }, 158: { n: "BrtBookView", f: parsenoop }, 159: { n: "BrtBeginSst", f: parse_BrtBeginSst }, 160: { n: "BrtEndSst", f: parsenoop }, 161: { n: "BrtBeginAFilter", f: parse_UncheckedRfX }, 162: { n: "BrtEndAFilter", f: parsenoop }, 163: { n: "BrtBeginFilterColumn", f: parsenoop }, 164: { n: "BrtEndFilterColumn", f: parsenoop }, 165: { n: "BrtBeginFilters", f: parsenoop }, 166: { n: "BrtEndFilters", f: parsenoop }, 167: { n: "BrtFilter", f: parsenoop }, 168: { n: "BrtColorFilter", f: parsenoop }, 169: { n: "BrtIconFilter", f: parsenoop }, 170: { n: "BrtTop10Filter", f: parsenoop }, 171: { n: "BrtDynamicFilter", f: parsenoop }, 172: { n: "BrtBeginCustomFilters", f: parsenoop }, 173: { n: "BrtEndCustomFilters", f: parsenoop }, 174: { n: "BrtCustomFilter", f: parsenoop }, 175: { n: "BrtAFilterDateGroupItem", f: parsenoop }, 176: { n: "BrtMergeCell", f: parse_BrtMergeCell }, 177: { n: "BrtBeginMergeCells", f: parsenoop }, 178: { n: "BrtEndMergeCells", f: parsenoop }, 179: { n: "BrtBeginPivotCacheDef", f: parsenoop }, 180: { n: "BrtEndPivotCacheDef", f: parsenoop }, 181: { n: "BrtBeginPCDFields", f: parsenoop }, 182: { n: "BrtEndPCDFields", f: parsenoop }, 183: { n: "BrtBeginPCDField", f: parsenoop }, 184: { n: "BrtEndPCDField", f: parsenoop }, 185: { n: "BrtBeginPCDSource", f: parsenoop }, 186: { n: "BrtEndPCDSource", f: parsenoop }, 187: { n: "BrtBeginPCDSRange", f: parsenoop }, 188: { n: "BrtEndPCDSRange", f: parsenoop }, 189: { n: "BrtBeginPCDFAtbl", f: parsenoop }, 190: { n: "BrtEndPCDFAtbl", f: parsenoop }, 191: { n: "BrtBeginPCDIRun", f: parsenoop }, 192: { n: "BrtEndPCDIRun", f: parsenoop }, 193: { n: "BrtBeginPivotCacheRecords", f: parsenoop }, 194: { n: "BrtEndPivotCacheRecords", f: parsenoop }, 195: { n: "BrtBeginPCDHierarchies", f: parsenoop }, 196: { n: "BrtEndPCDHierarchies", f: parsenoop }, 197: { n: "BrtBeginPCDHierarchy", f: parsenoop }, 198: { n: "BrtEndPCDHierarchy", f: parsenoop }, 199: { n: "BrtBeginPCDHFieldsUsage", f: parsenoop }, 200: { n: "BrtEndPCDHFieldsUsage", f: parsenoop }, 201: { n: "BrtBeginExtConnection", f: parsenoop }, 202: { n: "BrtEndExtConnection", f: parsenoop }, 203: { n: "BrtBeginECDbProps", f: parsenoop }, 204: { n: "BrtEndECDbProps", f: parsenoop }, 205: { n: "BrtBeginECOlapProps", f: parsenoop }, 206: { n: "BrtEndECOlapProps", f: parsenoop }, 207: { n: "BrtBeginPCDSConsol", f: parsenoop }, 208: { n: "BrtEndPCDSConsol", f: parsenoop }, 209: { n: "BrtBeginPCDSCPages", f: parsenoop }, 210: { n: "BrtEndPCDSCPages", f: parsenoop }, 211: { n: "BrtBeginPCDSCPage", f: parsenoop }, 212: { n: "BrtEndPCDSCPage", f: parsenoop }, 213: { n: "BrtBeginPCDSCPItem", f: parsenoop }, 214: { n: "BrtEndPCDSCPItem", f: parsenoop }, 215: { n: "BrtBeginPCDSCSets", f: parsenoop }, 216: { n: "BrtEndPCDSCSets", f: parsenoop }, 217: { n: "BrtBeginPCDSCSet", f: parsenoop }, 218: { n: "BrtEndPCDSCSet", f: parsenoop }, 219: { n: "BrtBeginPCDFGroup", f: parsenoop }, 220: { n: "BrtEndPCDFGroup", f: parsenoop }, 221: { n: "BrtBeginPCDFGItems", f: parsenoop }, 222: { n: "BrtEndPCDFGItems", f: parsenoop }, 223: { n: "BrtBeginPCDFGRange", f: parsenoop }, 224: { n: "BrtEndPCDFGRange", f: parsenoop }, 225: { n: "BrtBeginPCDFGDiscrete", f: parsenoop }, 226: { n: "BrtEndPCDFGDiscrete", f: parsenoop }, 227: { n: "BrtBeginPCDSDTupleCache", f: parsenoop }, 228: { n: "BrtEndPCDSDTupleCache", f: parsenoop }, 229: { n: "BrtBeginPCDSDTCEntries", f: parsenoop }, 230: { n: "BrtEndPCDSDTCEntries", f: parsenoop }, 231: { n: "BrtBeginPCDSDTCEMembers", f: parsenoop }, 232: { n: "BrtEndPCDSDTCEMembers", f: parsenoop }, 233: { n: "BrtBeginPCDSDTCEMember", f: parsenoop }, 234: { n: "BrtEndPCDSDTCEMember", f: parsenoop }, 235: { n: "BrtBeginPCDSDTCQueries", f: parsenoop }, 236: { n: "BrtEndPCDSDTCQueries", f: parsenoop }, 237: { n: "BrtBeginPCDSDTCQuery", f: parsenoop }, 238: { n: "BrtEndPCDSDTCQuery", f: parsenoop }, 239: { n: "BrtBeginPCDSDTCSets", f: parsenoop }, 240: { n: "BrtEndPCDSDTCSets", f: parsenoop }, 241: { n: "BrtBeginPCDSDTCSet", f: parsenoop }, 242: { n: "BrtEndPCDSDTCSet", f: parsenoop }, 243: { n: "BrtBeginPCDCalcItems", f: parsenoop }, 244: { n: "BrtEndPCDCalcItems", f: parsenoop }, 245: { n: "BrtBeginPCDCalcItem", f: parsenoop }, 246: { n: "BrtEndPCDCalcItem", f: parsenoop }, 247: { n: "BrtBeginPRule", f: parsenoop }, 248: { n: "BrtEndPRule", f: parsenoop }, 249: { n: "BrtBeginPRFilters", f: parsenoop }, 250: { n: "BrtEndPRFilters", f: parsenoop }, 251: { n: "BrtBeginPRFilter", f: parsenoop }, 252: { n: "BrtEndPRFilter", f: parsenoop }, 253: { n: "BrtBeginPNames", f: parsenoop }, 254: { n: "BrtEndPNames", f: parsenoop }, 255: { n: "BrtBeginPName", f: parsenoop }, 256: { n: "BrtEndPName", f: parsenoop }, 257: { n: "BrtBeginPNPairs", f: parsenoop }, 258: { n: "BrtEndPNPairs", f: parsenoop }, 259: { n: "BrtBeginPNPair", f: parsenoop }, 260: { n: "BrtEndPNPair", f: parsenoop }, 261: { n: "BrtBeginECWebProps", f: parsenoop }, 262: { n: "BrtEndECWebProps", f: parsenoop }, 263: { n: "BrtBeginEcWpTables", f: parsenoop }, 264: { n: "BrtEndECWPTables", f: parsenoop }, 265: { n: "BrtBeginECParams", f: parsenoop }, 266: { n: "BrtEndECParams", f: parsenoop }, 267: { n: "BrtBeginECParam", f: parsenoop }, 268: { n: "BrtEndECParam", f: parsenoop }, 269: { n: "BrtBeginPCDKPIs", f: parsenoop }, 270: { n: "BrtEndPCDKPIs", f: parsenoop }, 271: { n: "BrtBeginPCDKPI", f: parsenoop }, 272: { n: "BrtEndPCDKPI", f: parsenoop }, 273: { n: "BrtBeginDims", f: parsenoop }, 274: { n: "BrtEndDims", f: parsenoop }, 275: { n: "BrtBeginDim", f: parsenoop }, 276: { n: "BrtEndDim", f: parsenoop }, 277: { n: "BrtIndexPartEnd", f: parsenoop }, 278: { n: "BrtBeginStyleSheet", f: parsenoop }, 279: { n: "BrtEndStyleSheet", f: parsenoop }, 280: { n: "BrtBeginSXView", f: parsenoop }, 281: { n: "BrtEndSXVI", f: parsenoop }, 282: { n: "BrtBeginSXVI", f: parsenoop }, 283: { n: "BrtBeginSXVIs", f: parsenoop }, 284: { n: "BrtEndSXVIs", f: parsenoop }, 285: { n: "BrtBeginSXVD", f: parsenoop }, 286: { n: "BrtEndSXVD", f: parsenoop }, 287: { n: "BrtBeginSXVDs", f: parsenoop }, 288: { n: "BrtEndSXVDs", f: parsenoop }, 289: { n: "BrtBeginSXPI", f: parsenoop }, 290: { n: "BrtEndSXPI", f: parsenoop }, 291: { n: "BrtBeginSXPIs", f: parsenoop }, 292: { n: "BrtEndSXPIs", f: parsenoop }, 293: { n: "BrtBeginSXDI", f: parsenoop }, 294: { n: "BrtEndSXDI", f: parsenoop }, 295: { n: "BrtBeginSXDIs", f: parsenoop }, 296: { n: "BrtEndSXDIs", f: parsenoop }, 297: { n: "BrtBeginSXLI", f: parsenoop }, 298: { n: "BrtEndSXLI", f: parsenoop }, 299: { n: "BrtBeginSXLIRws", f: parsenoop }, 300: { n: "BrtEndSXLIRws", f: parsenoop }, 301: { n: "BrtBeginSXLICols", f: parsenoop }, 302: { n: "BrtEndSXLICols", f: parsenoop }, 303: { n: "BrtBeginSXFormat", f: parsenoop }, 304: { n: "BrtEndSXFormat", f: parsenoop }, 305: { n: "BrtBeginSXFormats", f: parsenoop }, 306: { n: "BrtEndSxFormats", f: parsenoop }, 307: { n: "BrtBeginSxSelect", f: parsenoop }, 308: { n: "BrtEndSxSelect", f: parsenoop }, 309: { n: "BrtBeginISXVDRws", f: parsenoop }, 310: { n: "BrtEndISXVDRws", f: parsenoop }, 311: { n: "BrtBeginISXVDCols", f: parsenoop }, 312: { n: "BrtEndISXVDCols", f: parsenoop }, 313: { n: "BrtEndSXLocation", f: parsenoop }, 314: { n: "BrtBeginSXLocation", f: parsenoop }, 315: { n: "BrtEndSXView", f: parsenoop }, 316: { n: "BrtBeginSXTHs", f: parsenoop }, 317: { n: "BrtEndSXTHs", f: parsenoop }, 318: { n: "BrtBeginSXTH", f: parsenoop }, 319: { n: "BrtEndSXTH", f: parsenoop }, 320: { n: "BrtBeginISXTHRws", f: parsenoop }, 321: { n: "BrtEndISXTHRws", f: parsenoop }, 322: { n: "BrtBeginISXTHCols", f: parsenoop }, 323: { n: "BrtEndISXTHCols", f: parsenoop }, 324: {
            n: "BrtBeginSXTDMPS", f: parsenoop
        }, 325: { n: "BrtEndSXTDMPs", f: parsenoop }, 326: { n: "BrtBeginSXTDMP", f: parsenoop }, 327: { n: "BrtEndSXTDMP", f: parsenoop }, 328: { n: "BrtBeginSXTHItems", f: parsenoop }, 329: { n: "BrtEndSXTHItems", f: parsenoop }, 330: { n: "BrtBeginSXTHItem", f: parsenoop }, 331: { n: "BrtEndSXTHItem", f: parsenoop }, 332: { n: "BrtBeginMetadata", f: parsenoop }, 333: { n: "BrtEndMetadata", f: parsenoop }, 334: { n: "BrtBeginEsmdtinfo", f: parsenoop }, 335: { n: "BrtMdtinfo", f: parsenoop }, 336: { n: "BrtEndEsmdtinfo", f: parsenoop }, 337: { n: "BrtBeginEsmdb", f: parsenoop }, 338: { n: "BrtEndEsmdb", f: parsenoop }, 339: { n: "BrtBeginEsfmd", f: parsenoop }, 340: { n: "BrtEndEsfmd", f: parsenoop }, 341: { n: "BrtBeginSingleCells", f: parsenoop }, 342: { n: "BrtEndSingleCells", f: parsenoop }, 343: { n: "BrtBeginList", f: parsenoop }, 344: { n: "BrtEndList", f: parsenoop }, 345: { n: "BrtBeginListCols", f: parsenoop }, 346: { n: "BrtEndListCols", f: parsenoop }, 347: { n: "BrtBeginListCol", f: parsenoop }, 348: { n: "BrtEndListCol", f: parsenoop }, 349: { n: "BrtBeginListXmlCPr", f: parsenoop }, 350: { n: "BrtEndListXmlCPr", f: parsenoop }, 351: { n: "BrtListCCFmla", f: parsenoop }, 352: { n: "BrtListTrFmla", f: parsenoop }, 353: { n: "BrtBeginExternals", f: parsenoop }, 354: { n: "BrtEndExternals", f: parsenoop }, 355: { n: "BrtSupBookSrc", f: parse_RelID }, 357: { n: "BrtSupSelf", f: parsenoop }, 358: { n: "BrtSupSame", f: parsenoop }, 359: { n: "BrtSupTabs", f: parsenoop }, 360: { n: "BrtBeginSupBook", f: parsenoop }, 361: { n: "BrtPlaceholderName", f: parsenoop }, 362: { n: "BrtExternSheet", f: parsenoop }, 363: { n: "BrtExternTableStart", f: parsenoop }, 364: { n: "BrtExternTableEnd", f: parsenoop }, 366: { n: "BrtExternRowHdr", f: parsenoop }, 367: { n: "BrtExternCellBlank", f: parsenoop }, 368: { n: "BrtExternCellReal", f: parsenoop }, 369: { n: "BrtExternCellBool", f: parsenoop }, 370: { n: "BrtExternCellError", f: parsenoop }, 371: { n: "BrtExternCellString", f: parsenoop }, 372: { n: "BrtBeginEsmdx", f: parsenoop }, 373: { n: "BrtEndEsmdx", f: parsenoop }, 374: { n: "BrtBeginMdxSet", f: parsenoop }, 375: { n: "BrtEndMdxSet", f: parsenoop }, 376: { n: "BrtBeginMdxMbrProp", f: parsenoop }, 377: { n: "BrtEndMdxMbrProp", f: parsenoop }, 378: { n: "BrtBeginMdxKPI", f: parsenoop }, 379: { n: "BrtEndMdxKPI", f: parsenoop }, 380: { n: "BrtBeginEsstr", f: parsenoop }, 381: { n: "BrtEndEsstr", f: parsenoop }, 382: { n: "BrtBeginPRFItem", f: parsenoop }, 383: { n: "BrtEndPRFItem", f: parsenoop }, 384: { n: "BrtBeginPivotCacheIDs", f: parsenoop }, 385: { n: "BrtEndPivotCacheIDs", f: parsenoop }, 386: { n: "BrtBeginPivotCacheID", f: parsenoop }, 387: { n: "BrtEndPivotCacheID", f: parsenoop }, 388: { n: "BrtBeginISXVIs", f: parsenoop }, 389: { n: "BrtEndISXVIs", f: parsenoop }, 390: { n: "BrtBeginColInfos", f: parsenoop }, 391: { n: "BrtEndColInfos", f: parsenoop }, 392: { n: "BrtBeginRwBrk", f: parsenoop }, 393: { n: "BrtEndRwBrk", f: parsenoop }, 394: { n: "BrtBeginColBrk", f: parsenoop }, 395: { n: "BrtEndColBrk", f: parsenoop }, 396: { n: "BrtBrk", f: parsenoop }, 397: { n: "BrtUserBookView", f: parsenoop }, 398: { n: "BrtInfo", f: parsenoop }, 399: { n: "BrtCUsr", f: parsenoop }, 400: { n: "BrtUsr", f: parsenoop }, 401: { n: "BrtBeginUsers", f: parsenoop }, 403: { n: "BrtEOF", f: parsenoop }, 404: { n: "BrtUCR", f: parsenoop }, 405: { n: "BrtRRInsDel", f: parsenoop }, 406: { n: "BrtRREndInsDel", f: parsenoop }, 407: { n: "BrtRRMove", f: parsenoop }, 408: { n: "BrtRREndMove", f: parsenoop }, 409: { n: "BrtRRChgCell", f: parsenoop }, 410: { n: "BrtRREndChgCell", f: parsenoop }, 411: { n: "BrtRRHeader", f: parsenoop }, 412: { n: "BrtRRUserView", f: parsenoop }, 413: { n: "BrtRRRenSheet", f: parsenoop }, 414: { n: "BrtRRInsertSh", f: parsenoop }, 415: { n: "BrtRRDefName", f: parsenoop }, 416: { n: "BrtRRNote", f: parsenoop }, 417: { n: "BrtRRConflict", f: parsenoop }, 418: { n: "BrtRRTQSIF", f: parsenoop }, 419: { n: "BrtRRFormat", f: parsenoop }, 420: { n: "BrtRREndFormat", f: parsenoop }, 421: { n: "BrtRRAutoFmt", f: parsenoop }, 422: { n: "BrtBeginUserShViews", f: parsenoop }, 423: { n: "BrtBeginUserShView", f: parsenoop }, 424: { n: "BrtEndUserShView", f: parsenoop }, 425: { n: "BrtEndUserShViews", f: parsenoop }, 426: { n: "BrtArrFmla", f: parse_BrtArrFmla }, 427: { n: "BrtShrFmla", f: parse_BrtShrFmla }, 428: { n: "BrtTable", f: parsenoop }, 429: { n: "BrtBeginExtConnections", f: parsenoop }, 430: { n: "BrtEndExtConnections", f: parsenoop }, 431: { n: "BrtBeginPCDCalcMems", f: parsenoop }, 432: { n: "BrtEndPCDCalcMems", f: parsenoop }, 433: { n: "BrtBeginPCDCalcMem", f: parsenoop }, 434: { n: "BrtEndPCDCalcMem", f: parsenoop }, 435: { n: "BrtBeginPCDHGLevels", f: parsenoop }, 436: { n: "BrtEndPCDHGLevels", f: parsenoop }, 437: { n: "BrtBeginPCDHGLevel", f: parsenoop }, 438: { n: "BrtEndPCDHGLevel", f: parsenoop }, 439: { n: "BrtBeginPCDHGLGroups", f: parsenoop }, 440: { n: "BrtEndPCDHGLGroups", f: parsenoop }, 441: { n: "BrtBeginPCDHGLGroup", f: parsenoop }, 442: { n: "BrtEndPCDHGLGroup", f: parsenoop }, 443: { n: "BrtBeginPCDHGLGMembers", f: parsenoop }, 444: { n: "BrtEndPCDHGLGMembers", f: parsenoop }, 445: { n: "BrtBeginPCDHGLGMember", f: parsenoop }, 446: { n: "BrtEndPCDHGLGMember", f: parsenoop }, 447: { n: "BrtBeginQSI", f: parsenoop }, 448: { n: "BrtEndQSI", f: parsenoop }, 449: { n: "BrtBeginQSIR", f: parsenoop }, 450: { n: "BrtEndQSIR", f: parsenoop }, 451: { n: "BrtBeginDeletedNames", f: parsenoop }, 452: { n: "BrtEndDeletedNames", f: parsenoop }, 453: { n: "BrtBeginDeletedName", f: parsenoop }, 454: { n: "BrtEndDeletedName", f: parsenoop }, 455: { n: "BrtBeginQSIFs", f: parsenoop }, 456: { n: "BrtEndQSIFs", f: parsenoop }, 457: { n: "BrtBeginQSIF", f: parsenoop }, 458: { n: "BrtEndQSIF", f: parsenoop }, 459: { n: "BrtBeginAutoSortScope", f: parsenoop }, 460: { n: "BrtEndAutoSortScope", f: parsenoop }, 461: { n: "BrtBeginConditionalFormatting", f: parsenoop }, 462: { n: "BrtEndConditionalFormatting", f: parsenoop }, 463: { n: "BrtBeginCFRule", f: parsenoop }, 464: { n: "BrtEndCFRule", f: parsenoop }, 465: { n: "BrtBeginIconSet", f: parsenoop }, 466: { n: "BrtEndIconSet", f: parsenoop }, 467: { n: "BrtBeginDatabar", f: parsenoop }, 468: { n: "BrtEndDatabar", f: parsenoop }, 469: { n: "BrtBeginColorScale", f: parsenoop }, 470: { n: "BrtEndColorScale", f: parsenoop }, 471: { n: "BrtCFVO", f: parsenoop }, 472: { n: "BrtExternValueMeta", f: parsenoop }, 473: { n: "BrtBeginColorPalette", f: parsenoop }, 474: { n: "BrtEndColorPalette", f: parsenoop }, 475: { n: "BrtIndexedColor", f: parsenoop }, 476: { n: "BrtMargins", f: parse_BrtMargins }, 477: { n: "BrtPrintOptions", f: parsenoop }, 478: { n: "BrtPageSetup", f: parsenoop }, 479: { n: "BrtBeginHeaderFooter", f: parsenoop }, 480: { n: "BrtEndHeaderFooter", f: parsenoop }, 481: { n: "BrtBeginSXCrtFormat", f: parsenoop }, 482: { n: "BrtEndSXCrtFormat", f: parsenoop }, 483: { n: "BrtBeginSXCrtFormats", f: parsenoop }, 484: { n: "BrtEndSXCrtFormats", f: parsenoop }, 485: { n: "BrtWsFmtInfo", f: parsenoop }, 486: { n: "BrtBeginMgs", f: parsenoop }, 487: { n: "BrtEndMGs", f: parsenoop }, 488: { n: "BrtBeginMGMaps", f: parsenoop }, 489: { n: "BrtEndMGMaps", f: parsenoop }, 490: { n: "BrtBeginMG", f: parsenoop }, 491: { n: "BrtEndMG", f: parsenoop }, 492: { n: "BrtBeginMap", f: parsenoop }, 493: { n: "BrtEndMap", f: parsenoop }, 494: { n: "BrtHLink", f: parse_BrtHLink }, 495: { n: "BrtBeginDCon", f: parsenoop }, 496: { n: "BrtEndDCon", f: parsenoop }, 497: { n: "BrtBeginDRefs", f: parsenoop }, 498: { n: "BrtEndDRefs", f: parsenoop }, 499: { n: "BrtDRef", f: parsenoop }, 500: { n: "BrtBeginScenMan", f: parsenoop }, 501: { n: "BrtEndScenMan", f: parsenoop }, 502: { n: "BrtBeginSct", f: parsenoop }, 503: { n: "BrtEndSct", f: parsenoop }, 504: { n: "BrtSlc", f: parsenoop }, 505: { n: "BrtBeginDXFs", f: parsenoop }, 506: { n: "BrtEndDXFs", f: parsenoop }, 507: { n: "BrtDXF", f: parsenoop }, 508: { n: "BrtBeginTableStyles", f: parsenoop }, 509: { n: "BrtEndTableStyles", f: parsenoop }, 510: { n: "BrtBeginTableStyle", f: parsenoop }, 511: { n: "BrtEndTableStyle", f: parsenoop }, 512: { n: "BrtTableStyleElement", f: parsenoop }, 513: { n: "BrtTableStyleClient", f: parsenoop }, 514: { n: "BrtBeginVolDeps", f: parsenoop }, 515: { n: "BrtEndVolDeps", f: parsenoop }, 516: { n: "BrtBeginVolType", f: parsenoop }, 517: { n: "BrtEndVolType", f: parsenoop }, 518: { n: "BrtBeginVolMain", f: parsenoop }, 519: { n: "BrtEndVolMain", f: parsenoop }, 520: { n: "BrtBeginVolTopic", f: parsenoop }, 521: { n: "BrtEndVolTopic", f: parsenoop }, 522: { n: "BrtVolSubtopic", f: parsenoop }, 523: { n: "BrtVolRef", f: parsenoop }, 524: { n: "BrtVolNum", f: parsenoop }, 525: { n: "BrtVolErr", f: parsenoop }, 526: { n: "BrtVolStr", f: parsenoop }, 527: { n: "BrtVolBool", f: parsenoop }, 528: { n: "BrtBeginCalcChain$", f: parsenoop }, 529: { n: "BrtEndCalcChain$", f: parsenoop }, 530: { n: "BrtBeginSortState", f: parsenoop }, 531: { n: "BrtEndSortState", f: parsenoop }, 532: { n: "BrtBeginSortCond", f: parsenoop }, 533: { n: "BrtEndSortCond", f: parsenoop }, 534: { n: "BrtBookProtection", f: parsenoop }, 535: { n: "BrtSheetProtection", f: parsenoop }, 536: { n: "BrtRangeProtection", f: parsenoop }, 537: { n: "BrtPhoneticInfo", f: parsenoop }, 538: { n: "BrtBeginECTxtWiz", f: parsenoop }, 539: { n: "BrtEndECTxtWiz", f: parsenoop }, 540: { n: "BrtBeginECTWFldInfoLst", f: parsenoop }, 541: { n: "BrtEndECTWFldInfoLst", f: parsenoop }, 542: { n: "BrtBeginECTwFldInfo", f: parsenoop }, 548: { n: "BrtFileSharing", f: parsenoop }, 549: { n: "BrtOleSize", f: parsenoop }, 550: { n: "BrtDrawing", f: parse_RelID }, 551: { n: "BrtLegacyDrawing", f: parsenoop }, 552: { n: "BrtLegacyDrawingHF", f: parsenoop }, 553: { n: "BrtWebOpt", f: parsenoop }, 554: { n: "BrtBeginWebPubItems", f: parsenoop }, 555: { n: "BrtEndWebPubItems", f: parsenoop }, 556: { n: "BrtBeginWebPubItem", f: parsenoop }, 557: { n: "BrtEndWebPubItem", f: parsenoop }, 558: { n: "BrtBeginSXCondFmt", f: parsenoop }, 559: { n: "BrtEndSXCondFmt", f: parsenoop }, 560: { n: "BrtBeginSXCondFmts", f: parsenoop }, 561: { n: "BrtEndSXCondFmts", f: parsenoop }, 562: { n: "BrtBkHim", f: parsenoop }, 564: { n: "BrtColor", f: parsenoop }, 565: { n: "BrtBeginIndexedColors", f: parsenoop }, 566: { n: "BrtEndIndexedColors", f: parsenoop }, 569: { n: "BrtBeginMRUColors", f: parsenoop }, 570: { n: "BrtEndMRUColors", f: parsenoop }, 572: { n: "BrtMRUColor", f: parsenoop }, 573: { n: "BrtBeginDVals", f: parsenoop }, 574: { n: "BrtEndDVals", f: parsenoop }, 577: { n: "BrtSupNameStart", f: parsenoop }, 578: { n: "BrtSupNameValueStart", f: parsenoop }, 579: { n: "BrtSupNameValueEnd", f: parsenoop }, 580: { n: "BrtSupNameNum", f: parsenoop }, 581: { n: "BrtSupNameErr", f: parsenoop }, 582: { n: "BrtSupNameSt", f: parsenoop }, 583: { n: "BrtSupNameNil", f: parsenoop }, 584: { n: "BrtSupNameBool", f: parsenoop }, 585: { n: "BrtSupNameFmla", f: parsenoop }, 586: { n: "BrtSupNameBits", f: parsenoop }, 587: { n: "BrtSupNameEnd", f: parsenoop }, 588: { n: "BrtEndSupBook", f: parsenoop }, 589: { n: "BrtCellSmartTagProperty", f: parsenoop }, 590: { n: "BrtBeginCellSmartTag", f: parsenoop }, 591: { n: "BrtEndCellSmartTag", f: parsenoop }, 592: { n: "BrtBeginCellSmartTags", f: parsenoop }, 593: { n: "BrtEndCellSmartTags", f: parsenoop }, 594: { n: "BrtBeginSmartTags", f: parsenoop }, 595: { n: "BrtEndSmartTags", f: parsenoop }, 596: { n: "BrtSmartTagType", f: parsenoop }, 597: { n: "BrtBeginSmartTagTypes", f: parsenoop }, 598: { n: "BrtEndSmartTagTypes", f: parsenoop }, 599: { n: "BrtBeginSXFilters", f: parsenoop }, 600: { n: "BrtEndSXFilters", f: parsenoop }, 601: { n: "BrtBeginSXFILTER", f: parsenoop }, 602: { n: "BrtEndSXFilter", f: parsenoop }, 603: { n: "BrtBeginFills", f: parsenoop }, 604: { n: "BrtEndFills", f: parsenoop }, 605: { n: "BrtBeginCellWatches", f: parsenoop }, 606: { n: "BrtEndCellWatches", f: parsenoop }, 607: { n: "BrtCellWatch", f: parsenoop }, 608: { n: "BrtBeginCRErrs", f: parsenoop }, 609: { n: "BrtEndCRErrs", f: parsenoop }, 610: { n: "BrtCrashRecErr", f: parsenoop }, 611: { n: "BrtBeginFonts", f: parsenoop }, 612: { n: "BrtEndFonts", f: parsenoop }, 613: { n: "BrtBeginBorders", f: parsenoop }, 614: { n: "BrtEndBorders", f: parsenoop }, 615: { n: "BrtBeginFmts", f: parsenoop }, 616: { n: "BrtEndFmts", f: parsenoop }, 617: { n: "BrtBeginCellXFs", f: parsenoop }, 618: { n: "BrtEndCellXFs", f: parsenoop }, 619: { n: "BrtBeginStyles", f: parsenoop }, 620: { n: "BrtEndStyles", f: parsenoop }, 625: { n: "BrtBigName", f: parsenoop }, 626: { n: "BrtBeginCellStyleXFs", f: parsenoop }, 627: { n: "BrtEndCellStyleXFs", f: parsenoop }, 628: { n: "BrtBeginComments", f: parsenoop }, 629: { n: "BrtEndComments", f: parsenoop }, 630: { n: "BrtBeginCommentAuthors", f: parsenoop }, 631: { n: "BrtEndCommentAuthors", f: parsenoop }, 632: { n: "BrtCommentAuthor", f: parse_BrtCommentAuthor }, 633: { n: "BrtBeginCommentList", f: parsenoop }, 634: { n: "BrtEndCommentList", f: parsenoop }, 635: { n: "BrtBeginComment", f: parse_BrtBeginComment }, 636: { n: "BrtEndComment", f: parsenoop }, 637: { n: "BrtCommentText", f: parse_BrtCommentText }, 638: { n: "BrtBeginOleObjects", f: parsenoop }, 639: { n: "BrtOleObject", f: parsenoop }, 640: { n: "BrtEndOleObjects", f: parsenoop }, 641: { n: "BrtBeginSxrules", f: parsenoop }, 642: { n: "BrtEndSxRules", f: parsenoop }, 643: { n: "BrtBeginActiveXControls", f: parsenoop }, 644: { n: "BrtActiveX", f: parsenoop }, 645: { n: "BrtEndActiveXControls", f: parsenoop }, 646: { n: "BrtBeginPCDSDTCEMembersSortBy", f: parsenoop }, 648: { n: "BrtBeginCellIgnoreECs", f: parsenoop }, 649: { n: "BrtCellIgnoreEC", f: parsenoop }, 650: { n: "BrtEndCellIgnoreECs", f: parsenoop }, 651: { n: "BrtCsProp", f: parsenoop }, 652: { n: "BrtCsPageSetup", f: parsenoop }, 653: { n: "BrtBeginUserCsViews", f: parsenoop }, 654: { n: "BrtEndUserCsViews", f: parsenoop }, 655: { n: "BrtBeginUserCsView", f: parsenoop }, 656: { n: "BrtEndUserCsView", f: parsenoop }, 657: { n: "BrtBeginPcdSFCIEntries", f: parsenoop }, 658: { n: "BrtEndPCDSFCIEntries", f: parsenoop }, 659: { n: "BrtPCDSFCIEntry", f: parsenoop }, 660: { n: "BrtBeginListParts", f: parsenoop }, 661: { n: "BrtListPart", f: parsenoop }, 662: { n: "BrtEndListParts", f: parsenoop }, 663: { n: "BrtSheetCalcProp", f: parsenoop }, 664: { n: "BrtBeginFnGroup", f: parsenoop }, 665: { n: "BrtFnGroup", f: parsenoop }, 666: { n: "BrtEndFnGroup", f: parsenoop }, 667: { n: "BrtSupAddin", f: parsenoop }, 668: { n: "BrtSXTDMPOrder", f: parsenoop }, 669: { n: "BrtCsProtection", f: parsenoop }, 671: { n: "BrtBeginWsSortMap", f: parsenoop }, 672: { n: "BrtEndWsSortMap", f: parsenoop }, 673: { n: "BrtBeginRRSort", f: parsenoop }, 674: { n: "BrtEndRRSort", f: parsenoop }, 675: { n: "BrtRRSortItem", f: parsenoop }, 676: { n: "BrtFileSharingIso", f: parsenoop }, 677: { n: "BrtBookProtectionIso", f: parsenoop }, 678: { n: "BrtSheetProtectionIso", f: parsenoop }, 679: { n: "BrtCsProtectionIso", f: parsenoop }, 680: { n: "BrtRangeProtectionIso", f: parsenoop }, 1024: { n: "BrtRwDescent", f: parsenoop }, 1025: { n: "BrtKnownFonts", f: parsenoop }, 1026: { n: "BrtBeginSXTupleSet", f: parsenoop }, 1027: { n: "BrtEndSXTupleSet", f: parsenoop }, 1028: { n: "BrtBeginSXTupleSetHeader", f: parsenoop }, 1029: { n: "BrtEndSXTupleSetHeader", f: parsenoop }, 1030: { n: "BrtSXTupleSetHeaderItem", f: parsenoop }, 1031: { n: "BrtBeginSXTupleSetData", f: parsenoop }, 1032: { n: "BrtEndSXTupleSetData", f: parsenoop }, 1033: { n: "BrtBeginSXTupleSetRow", f: parsenoop }, 1034: { n: "BrtEndSXTupleSetRow", f: parsenoop }, 1035: { n: "BrtSXTupleSetRowItem", f: parsenoop }, 1036: { n: "BrtNameExt", f: parsenoop }, 1037: { n: "BrtPCDH14", f: parsenoop }, 1038: { n: "BrtBeginPCDCalcMem14", f: parsenoop }, 1039: { n: "BrtEndPCDCalcMem14", f: parsenoop }, 1040: { n: "BrtSXTH14", f: parsenoop }, 1041: { n: "BrtBeginSparklineGroup", f: parsenoop }, 1042: { n: "BrtEndSparklineGroup", f: parsenoop }, 1043: { n: "BrtSparkline", f: parsenoop }, 1044: { n: "BrtSXDI14", f: parsenoop }, 1045: { n: "BrtWsFmtInfoEx14", f: parsenoop }, 1046: { n: "BrtBeginConditionalFormatting14", f: parsenoop }, 1047: { n: "BrtEndConditionalFormatting14", f: parsenoop }, 1048: { n: "BrtBeginCFRule14", f: parsenoop }, 1049: { n: "BrtEndCFRule14", f: parsenoop }, 1050: { n: "BrtCFVO14", f: parsenoop }, 1051: { n: "BrtBeginDatabar14", f: parsenoop }, 1052: { n: "BrtBeginIconSet14", f: parsenoop }, 1053: { n: "BrtDVal14", f: parsenoop }, 1054: { n: "BrtBeginDVals14", f: parsenoop }, 1055: { n: "BrtColor14", f: parsenoop }, 1056: { n: "BrtBeginSparklines", f: parsenoop }, 1057: { n: "BrtEndSparklines", f: parsenoop }, 1058: { n: "BrtBeginSparklineGroups", f: parsenoop }, 1059: { n: "BrtEndSparklineGroups", f: parsenoop }, 1061: { n: "BrtSXVD14", f: parsenoop }, 1062: { n: "BrtBeginSxview14", f: parsenoop }, 1063: { n: "BrtEndSxview14", f: parsenoop }, 1066: { n: "BrtBeginPCD14", f: parsenoop }, 1067: { n: "BrtEndPCD14", f: parsenoop }, 1068: { n: "BrtBeginExtConn14", f: parsenoop }, 1069: { n: "BrtEndExtConn14", f: parsenoop }, 1070: { n: "BrtBeginSlicerCacheIDs", f: parsenoop }, 1071: { n: "BrtEndSlicerCacheIDs", f: parsenoop }, 1072: { n: "BrtBeginSlicerCacheID", f: parsenoop }, 1073: { n: "BrtEndSlicerCacheID", f: parsenoop }, 1075: { n: "BrtBeginSlicerCache", f: parsenoop }, 1076: { n: "BrtEndSlicerCache", f: parsenoop }, 1077: { n: "BrtBeginSlicerCacheDef", f: parsenoop }, 1078: { n: "BrtEndSlicerCacheDef", f: parsenoop }, 1079: { n: "BrtBeginSlicersEx", f: parsenoop }, 1080: { n: "BrtEndSlicersEx", f: parsenoop }, 1081: { n: "BrtBeginSlicerEx", f: parsenoop }, 1082: { n: "BrtEndSlicerEx", f: parsenoop }, 1083: { n: "BrtBeginSlicer", f: parsenoop }, 1084: { n: "BrtEndSlicer", f: parsenoop }, 1085: { n: "BrtSlicerCachePivotTables", f: parsenoop }, 1086: { n: "BrtBeginSlicerCacheOlapImpl", f: parsenoop }, 1087: { n: "BrtEndSlicerCacheOlapImpl", f: parsenoop }, 1088: { n: "BrtBeginSlicerCacheLevelsData", f: parsenoop }, 1089: { n: "BrtEndSlicerCacheLevelsData", f: parsenoop }, 1090: { n: "BrtBeginSlicerCacheLevelData", f: parsenoop }, 1091: { n: "BrtEndSlicerCacheLevelData", f: parsenoop }, 1092: { n: "BrtBeginSlicerCacheSiRanges", f: parsenoop }, 1093: { n: "BrtEndSlicerCacheSiRanges", f: parsenoop }, 1094: { n: "BrtBeginSlicerCacheSiRange", f: parsenoop }, 1095: { n: "BrtEndSlicerCacheSiRange", f: parsenoop }, 1096: { n: "BrtSlicerCacheOlapItem", f: parsenoop }, 1097: { n: "BrtBeginSlicerCacheSelections", f: parsenoop }, 1098: { n: "BrtSlicerCacheSelection", f: parsenoop }, 1099: { n: "BrtEndSlicerCacheSelections", f: parsenoop }, 1100: { n: "BrtBeginSlicerCacheNative", f: parsenoop }, 1101: { n: "BrtEndSlicerCacheNative", f: parsenoop }, 1102: { n: "BrtSlicerCacheNativeItem", f: parsenoop }, 1103: { n: "BrtRangeProtection14", f: parsenoop }, 1104: { n: "BrtRangeProtectionIso14", f: parsenoop }, 1105: { n: "BrtCellIgnoreEC14", f: parsenoop }, 1111: { n: "BrtList14", f: parsenoop }, 1112: { n: "BrtCFIcon", f: parsenoop }, 1113: { n: "BrtBeginSlicerCachesPivotCacheIDs", f: parsenoop }, 1114: { n: "BrtEndSlicerCachesPivotCacheIDs", f: parsenoop }, 1115: { n: "BrtBeginSlicers", f: parsenoop }, 1116: { n: "BrtEndSlicers", f: parsenoop }, 1117: { n: "BrtWbProp14", f: parsenoop }, 1118: { n: "BrtBeginSXEdit", f: parsenoop }, 1119: { n: "BrtEndSXEdit", f: parsenoop }, 1120: { n: "BrtBeginSXEdits", f: parsenoop }, 1121: { n: "BrtEndSXEdits", f: parsenoop }, 1122: { n: "BrtBeginSXChange", f: parsenoop }, 1123: { n: "BrtEndSXChange", f: parsenoop }, 1124: { n: "BrtBeginSXChanges", f: parsenoop }, 1125: { n: "BrtEndSXChanges", f: parsenoop }, 1126: { n: "BrtSXTupleItems", f: parsenoop }, 1128: { n: "BrtBeginSlicerStyle", f: parsenoop }, 1129: { n: "BrtEndSlicerStyle", f: parsenoop }, 1130: { n: "BrtSlicerStyleElement", f: parsenoop }, 1131: { n: "BrtBeginStyleSheetExt14", f: parsenoop }, 1132: { n: "BrtEndStyleSheetExt14", f: parsenoop }, 1133: { n: "BrtBeginSlicerCachesPivotCacheID", f: parsenoop }, 1134: { n: "BrtEndSlicerCachesPivotCacheID", f: parsenoop }, 1135: { n: "BrtBeginConditionalFormattings", f: parsenoop }, 1136: { n: "BrtEndConditionalFormattings", f: parsenoop }, 1137: { n: "BrtBeginPCDCalcMemExt", f: parsenoop }, 1138: { n: "BrtEndPCDCalcMemExt", f: parsenoop }, 1139: { n: "BrtBeginPCDCalcMemsExt", f: parsenoop }, 1140: { n: "BrtEndPCDCalcMemsExt", f: parsenoop }, 1141: { n: "BrtPCDField14", f: parsenoop }, 1142: { n: "BrtBeginSlicerStyles", f: parsenoop }, 1143: { n: "BrtEndSlicerStyles", f: parsenoop }, 1144: { n: "BrtBeginSlicerStyleElements", f: parsenoop }, 1145: { n: "BrtEndSlicerStyleElements", f: parsenoop }, 1146: { n: "BrtCFRuleExt", f: parsenoop }, 1147: { n: "BrtBeginSXCondFmt14", f: parsenoop }, 1148: { n: "BrtEndSXCondFmt14", f: parsenoop }, 1149: { n: "BrtBeginSXCondFmts14", f: parsenoop }, 1150: { n: "BrtEndSXCondFmts14", f: parsenoop }, 1152: { n: "BrtBeginSortCond14", f: parsenoop }, 1153: { n: "BrtEndSortCond14", f: parsenoop }, 1154: { n: "BrtEndDVals14", f: parsenoop }, 1155: { n: "BrtEndIconSet14", f: parsenoop }, 1156: { n: "BrtEndDatabar14", f: parsenoop }, 1157: { n: "BrtBeginColorScale14", f: parsenoop }, 1158: { n: "BrtEndColorScale14", f: parsenoop }, 1159: { n: "BrtBeginSxrules14", f: parsenoop }, 1160: { n: "BrtEndSxrules14", f: parsenoop }, 1161: { n: "BrtBeginPRule14", f: parsenoop }, 1162: { n: "BrtEndPRule14", f: parsenoop }, 1163: { n: "BrtBeginPRFilters14", f: parsenoop }, 1164: { n: "BrtEndPRFilters14", f: parsenoop }, 1165: { n: "BrtBeginPRFilter14", f: parsenoop }, 1166: { n: "BrtEndPRFilter14", f: parsenoop }, 1167: { n: "BrtBeginPRFItem14", f: parsenoop }, 1168: { n: "BrtEndPRFItem14", f: parsenoop }, 1169: { n: "BrtBeginCellIgnoreECs14", f: parsenoop }, 1170: { n: "BrtEndCellIgnoreECs14", f: parsenoop }, 1171: { n: "BrtDxf14", f: parsenoop }, 1172: { n: "BrtBeginDxF14s", f: parsenoop }, 1173: { n: "BrtEndDxf14s", f: parsenoop }, 1177: { n: "BrtFilter14", f: parsenoop }, 1178: { n: "BrtBeginCustomFilters14", f: parsenoop }, 1180: { n: "BrtCustomFilter14", f: parsenoop }, 1181: { n: "BrtIconFilter14", f: parsenoop }, 1182: { n: "BrtPivotCacheConnectionName", f: parsenoop }, 2048: { n: "BrtBeginDecoupledPivotCacheIDs", f: parsenoop }, 2049: { n: "BrtEndDecoupledPivotCacheIDs", f: parsenoop }, 2050: { n: "BrtDecoupledPivotCacheID", f: parsenoop }, 2051: { n: "BrtBeginPivotTableRefs", f: parsenoop }, 2052: { n: "BrtEndPivotTableRefs", f: parsenoop }, 2053: { n: "BrtPivotTableRef", f: parsenoop }, 2054: { n: "BrtSlicerCacheBookPivotTables", f: parsenoop }, 2055: { n: "BrtBeginSxvcells", f: parsenoop }, 2056: { n: "BrtEndSxvcells", f: parsenoop }, 2057: { n: "BrtBeginSxRow", f: parsenoop }, 2058: { n: "BrtEndSxRow", f: parsenoop }, 2060: { n: "BrtPcdCalcMem15", f: parsenoop }, 2067: { n: "BrtQsi15", f: parsenoop }, 2068: { n: "BrtBeginWebExtensions", f: parsenoop }, 2069: { n: "BrtEndWebExtensions", f: parsenoop }, 2070: { n: "BrtWebExtension", f: parsenoop }, 2071: { n: "BrtAbsPath15", f: parsenoop }, 2072: { n: "BrtBeginPivotTableUISettings", f: parsenoop }, 2073: { n: "BrtEndPivotTableUISettings", f: parsenoop }, 2075: { n: "BrtTableSlicerCacheIDs", f: parsenoop }, 2076: { n: "BrtTableSlicerCacheID", f: parsenoop }, 2077: { n: "BrtBeginTableSlicerCache", f: parsenoop }, 2078: { n: "BrtEndTableSlicerCache", f: parsenoop }, 2079: { n: "BrtSxFilter15", f: parsenoop }, 2080: { n: "BrtBeginTimelineCachePivotCacheIDs", f: parsenoop }, 2081: { n: "BrtEndTimelineCachePivotCacheIDs", f: parsenoop }, 2082: { n: "BrtTimelineCachePivotCacheID", f: parsenoop }, 2083: { n: "BrtBeginTimelineCacheIDs", f: parsenoop }, 2084: { n: "BrtEndTimelineCacheIDs", f: parsenoop }, 2085: { n: "BrtBeginTimelineCacheID", f: parsenoop }, 2086: { n: "BrtEndTimelineCacheID", f: parsenoop }, 2087: { n: "BrtBeginTimelinesEx", f: parsenoop }, 2088: { n: "BrtEndTimelinesEx", f: parsenoop }, 2089: { n: "BrtBeginTimelineEx", f: parsenoop }, 2090: { n: "BrtEndTimelineEx", f: parsenoop }, 2091: { n: "BrtWorkBookPr15", f: parsenoop }, 2092: { n: "BrtPCDH15", f: parsenoop }, 2093: { n: "BrtBeginTimelineStyle", f: parsenoop }, 2094: { n: "BrtEndTimelineStyle", f: parsenoop }, 2095: { n: "BrtTimelineStyleElement", f: parsenoop }, 2096: { n: "BrtBeginTimelineStylesheetExt15", f: parsenoop }, 2097: { n: "BrtEndTimelineStylesheetExt15", f: parsenoop }, 2098: { n: "BrtBeginTimelineStyles", f: parsenoop }, 2099: { n: "BrtEndTimelineStyles", f: parsenoop }, 2100: { n: "BrtBeginTimelineStyleElements", f: parsenoop }, 2101: { n: "BrtEndTimelineStyleElements", f: parsenoop }, 2102: { n: "BrtDxf15", f: parsenoop }, 2103: { n: "BrtBeginDxfs15", f: parsenoop }, 2104: { n: "brtEndDxfs15", f: parsenoop }, 2105: { n: "BrtSlicerCacheHideItemsWithNoData", f: parsenoop }, 2106: { n: "BrtBeginItemUniqueNames", f: parsenoop }, 2107: { n: "BrtEndItemUniqueNames", f: parsenoop }, 2108: { n: "BrtItemUniqueName", f: parsenoop }, 2109: { n: "BrtBeginExtConn15", f: parsenoop }, 2110: { n: "BrtEndExtConn15", f: parsenoop }, 2111: { n: "BrtBeginOledbPr15", f: parsenoop }, 2112: { n: "BrtEndOledbPr15", f: parsenoop }, 2113: { n: "BrtBeginDataFeedPr15", f: parsenoop }, 2114: { n: "BrtEndDataFeedPr15", f: parsenoop }, 2115: { n: "BrtTextPr15", f: parsenoop }, 2116: { n: "BrtRangePr15", f: parsenoop }, 2117: { n: "BrtDbCommand15", f: parsenoop }, 2118: { n: "BrtBeginDbTables15", f: parsenoop }, 2119: { n: "BrtEndDbTables15", f: parsenoop }, 2120: { n: "BrtDbTable15", f: parsenoop }, 2121: { n: "BrtBeginDataModel", f: parsenoop }, 2122: { n: "BrtEndDataModel", f: parsenoop }, 2123: { n: "BrtBeginModelTables", f: parsenoop }, 2124: { n: "BrtEndModelTables", f: parsenoop }, 2125: { n: "BrtModelTable", f: parsenoop }, 2126: { n: "BrtBeginModelRelationships", f: parsenoop }, 2127: { n: "BrtEndModelRelationships", f: parsenoop }, 2128: { n: "BrtModelRelationship", f: parsenoop }, 2129: { n: "BrtBeginECTxtWiz15", f: parsenoop }, 2130: { n: "BrtEndECTxtWiz15", f: parsenoop }, 2131: { n: "BrtBeginECTWFldInfoLst15", f: parsenoop }, 2132: { n: "BrtEndECTWFldInfoLst15", f: parsenoop }, 2133: { n: "BrtBeginECTWFldInfo15", f: parsenoop }, 2134: { n: "BrtFieldListActiveItem", f: parsenoop }, 2135: { n: "BrtPivotCacheIdVersion", f: parsenoop }, 2136: { n: "BrtSXDI15", f: parsenoop }, 65535: { n: "", f: parsenoop }
    }; var evert_RE = evert_key(XLSBRecordEnum, "n"); var XLSRecordEnum = {
        3: { n: "BIFF2NUM", f: parse_BIFF2NUM }, 4: { n: "BIFF2STR", f: parse_BIFF2STR }, 6: { n: "Formula", f: parse_Formula }, 9: { n: "BOF", f: parse_BOF }, 10: { n: "EOF", f: parse_EOF }, 12: { n: "CalcCount", f: parse_CalcCount }, 13: { n: "CalcMode", f: parse_CalcMode }, 14: { n: "CalcPrecision", f: parse_CalcPrecision }, 15: { n: "CalcRefMode", f: parse_CalcRefMode }, 16: { n: "CalcDelta", f: parse_CalcDelta }, 17: { n: "CalcIter", f: parse_CalcIter }, 18: { n: "Protect", f: parse_Protect }, 19: { n: "Password", f: parse_Password }, 20: { n: "Header", f: parse_Header }, 21: { n: "Footer", f: parse_Footer }, 23: { n: "ExternSheet", f: parse_ExternSheet }, 24: { n: "Lbl", f: parse_Lbl }, 25: { n: "WinProtect", f: parse_WinProtect }, 26: { n: "VerticalPageBreaks", f: parse_VerticalPageBreaks }, 27: { n: "HorizontalPageBreaks", f: parse_HorizontalPageBreaks }, 28: { n: "Note", f: parse_Note }, 29: { n: "Selection", f: parse_Selection }, 34: { n: "Date1904", f: parse_Date1904 }, 35: { n: "ExternName", f: parse_ExternName }, 38: { n: "LeftMargin", f: parse_LeftMargin }, 39: { n: "RightMargin", f: parse_RightMargin }, 40: { n: "TopMargin", f: parse_TopMargin }, 41: { n: "BottomMargin", f: parse_BottomMargin }, 42: { n: "PrintRowCol", f: parse_PrintRowCol }, 43: { n: "PrintGrid", f: parse_PrintGrid }, 47: { n: "FilePass", f: parse_FilePass }, 49: { n: "Font", f: parse_Font }, 51: { n: "PrintSize", f: parse_PrintSize }, 60: { n: "Continue", f: parse_Continue }, 61: { n: "Window1", f: parse_Window1 }, 64: { n: "Backup", f: parse_Backup }, 65: { n: "Pane", f: parse_Pane }, 66: { n: "CodePage", f: parse_CodePage }, 77: { n: "Pls", f: parse_Pls }, 80: { n: "DCon", f: parse_DCon }, 81: { n: "DConRef", f: parse_DConRef }, 82: { n: "DConName", f: parse_DConName }, 85: { n: "DefColWidth", f: parse_DefColWidth }, 89: { n: "XCT", f: parse_XCT }, 90: { n: "CRN", f: parse_CRN }, 91: { n: "FileSharing", f: parse_FileSharing }, 92: { n: "WriteAccess", f: parse_WriteAccess }, 93: { n: "Obj", f: parse_Obj }, 94: { n: "Uncalced", f: parse_Uncalced }, 95: { n: "CalcSaveRecalc", f: parse_CalcSaveRecalc }, 96: { n: "Template", f: parse_Template }, 97: { n: "Intl", f: parse_Intl }, 99: { n: "ObjProtect", f: parse_ObjProtect }, 125: { n: "ColInfo", f: parse_ColInfo }, 128: { n: "Guts", f: parse_Guts }, 129: { n: "WsBool", f: parse_WsBool }, 130: { n: "GridSet", f: parse_GridSet }, 131: { n: "HCenter", f: parse_HCenter }, 132: { n: "VCenter", f: parse_VCenter }, 133: { n: "BoundSheet8", f: parse_BoundSheet8 }, 134: { n: "WriteProtect", f: parse_WriteProtect }, 140: { n: "Country", f: parse_Country }, 141: { n: "HideObj", f: parse_HideObj }, 144: { n: "Sort", f: parse_Sort }, 146: { n: "Palette", f: parse_Palette }, 151: { n: "Sync", f: parse_Sync }, 152: { n: "LPr", f: parse_LPr }, 153: { n: "DxGCol", f: parse_DxGCol }, 154: { n: "FnGroupName", f: parse_FnGroupName }, 155: { n: "FilterMode", f: parse_FilterMode }, 156: { n: "BuiltInFnGroupCount", f: parse_BuiltInFnGroupCount }, 157: { n: "AutoFilterInfo", f: parse_AutoFilterInfo }, 158: { n: "AutoFilter", f: parse_AutoFilter }, 160: { n: "Scl", f: parse_Scl }, 161: { n: "Setup", f: parse_Setup }, 174: { n: "ScenMan", f: parse_ScenMan }, 175: { n: "SCENARIO", f: parse_SCENARIO }, 176: { n: "SxView", f: parse_SxView }, 177: { n: "Sxvd", f: parse_Sxvd }, 178: { n: "SXVI", f: parse_SXVI }, 180: { n: "SxIvd", f: parse_SxIvd }, 181: { n: "SXLI", f: parse_SXLI }, 182: { n: "SXPI", f: parse_SXPI }, 184: { n: "DocRoute", f: parse_DocRoute }, 185: { n: "RecipName", f: parse_RecipName }, 189: { n: "MulRk", f: parse_MulRk }, 190: { n: "MulBlank", f: parse_MulBlank }, 193: { n: "Mms", f: parse_Mms }, 197: { n: "SXDI", f: parse_SXDI }, 198: { n: "SXDB", f: parse_SXDB }, 199: { n: "SXFDB", f: parse_SXFDB }, 200: { n: "SXDBB", f: parse_SXDBB }, 201: { n: "SXNum", f: parse_SXNum }, 202: { n: "SxBool", f: parse_SxBool }, 203: { n: "SxErr", f: parse_SxErr }, 204: { n: "SXInt", f: parse_SXInt }, 205: { n: "SXString", f: parse_SXString }, 206: { n: "SXDtr", f: parse_SXDtr }, 207: { n: "SxNil", f: parse_SxNil }, 208: { n: "SXTbl", f: parse_SXTbl }, 209: { n: "SXTBRGIITM", f: parse_SXTBRGIITM }, 210: { n: "SxTbpg", f: parse_SxTbpg }, 211: { n: "ObProj", f: parse_ObProj }, 213: { n: "SXStreamID", f: parse_SXStreamID }, 215: { n: "DBCell", f: parse_DBCell }, 216: { n: "SXRng", f: parse_SXRng }, 217: { n: "SxIsxoper", f: parse_SxIsxoper }, 218: { n: "BookBool", f: parse_BookBool }, 220: { n: "DbOrParamQry", f: parse_DbOrParamQry }, 221: { n: "ScenarioProtect", f: parse_ScenarioProtect }, 222: { n: "OleObjectSize", f: parse_OleObjectSize }, 224: { n: "XF", f: parse_XF }, 225: { n: "InterfaceHdr", f: parse_InterfaceHdr }, 226: { n: "InterfaceEnd", f: parse_InterfaceEnd }, 227: { n: "SXVS", f: parse_SXVS }, 229: { n: "MergeCells", f: parse_MergeCells }, 233: { n: "BkHim", f: parse_BkHim }, 235: { n: "MsoDrawingGroup", f: parse_MsoDrawingGroup }, 236: { n: "MsoDrawing", f: parse_MsoDrawing }, 237: { n: "MsoDrawingSelection", f: parse_MsoDrawingSelection }, 239: { n: "PhoneticInfo", f: parse_PhoneticInfo }, 240: { n: "SxRule", f: parse_SxRule }, 241: { n: "SXEx", f: parse_SXEx }, 242: { n: "SxFilt", f: parse_SxFilt }, 244: { n: "SxDXF", f: parse_SxDXF }, 245: { n: "SxItm", f: parse_SxItm }, 246: { n: "SxName", f: parse_SxName }, 247: { n: "SxSelect", f: parse_SxSelect }, 248: { n: "SXPair", f: parse_SXPair }, 249: { n: "SxFmla", f: parse_SxFmla }, 251: { n: "SxFormat", f: parse_SxFormat }, 252: { n: "SST", f: parse_SST }, 253: { n: "LabelSst", f: parse_LabelSst }, 255: { n: "ExtSST", f: parse_ExtSST }, 256: { n: "SXVDEx", f: parse_SXVDEx }, 259: { n: "SXFormula", f: parse_SXFormula }, 290: { n: "SXDBEx", f: parse_SXDBEx }, 311: { n: "RRDInsDel", f: parse_RRDInsDel }, 312: { n: "RRDHead", f: parse_RRDHead }, 315: { n: "RRDChgCell", f: parse_RRDChgCell }, 317: { n: "RRTabId", f: parse_RRTabId }, 318: { n: "RRDRenSheet", f: parse_RRDRenSheet }, 319: { n: "RRSort", f: parse_RRSort }, 320: { n: "RRDMove", f: parse_RRDMove }, 330: { n: "RRFormat", f: parse_RRFormat }, 331: { n: "RRAutoFmt", f: parse_RRAutoFmt }, 333: { n: "RRInsertSh", f: parse_RRInsertSh }, 334: { n: "RRDMoveBegin", f: parse_RRDMoveBegin }, 335: { n: "RRDMoveEnd", f: parse_RRDMoveEnd }, 336: { n: "RRDInsDelBegin", f: parse_RRDInsDelBegin }, 337: { n: "RRDInsDelEnd", f: parse_RRDInsDelEnd }, 338: { n: "RRDConflict", f: parse_RRDConflict }, 339: { n: "RRDDefName", f: parse_RRDDefName }, 340: { n: "RRDRstEtxp", f: parse_RRDRstEtxp }, 351: { n: "LRng", f: parse_LRng }, 352: { n: "UsesELFs", f: parse_UsesELFs }, 353: { n: "DSF", f: parse_DSF }, 401: { n: "CUsr", f: parse_CUsr }, 402: { n: "CbUsr", f: parse_CbUsr }, 403: { n: "UsrInfo", f: parse_UsrInfo }, 404: { n: "UsrExcl", f: parse_UsrExcl }, 405: { n: "FileLock", f: parse_FileLock }, 406: { n: "RRDInfo", f: parse_RRDInfo }, 407: { n: "BCUsrs", f: parse_BCUsrs }, 408: { n: "UsrChk", f: parse_UsrChk }, 425: { n: "UserBView", f: parse_UserBView }, 426: { n: "UserSViewBegin", f: parse_UserSViewBegin }, 427: { n: "UserSViewEnd", f: parse_UserSViewEnd }, 428: { n: "RRDUserView", f: parse_RRDUserView }, 429: { n: "Qsi", f: parse_Qsi }, 430: { n: "SupBook", f: parse_SupBook }, 431: { n: "Prot4Rev", f: parse_Prot4Rev }, 432: { n: "CondFmt", f: parse_CondFmt }, 433: { n: "CF", f: parse_CF }, 434: { n: "DVal", f: parse_DVal }, 437: { n: "DConBin", f: parse_DConBin }, 438: { n: "TxO", f: parse_TxO }, 439: { n: "RefreshAll", f: parse_RefreshAll }, 440: { n: "HLink", f: parse_HLink }, 441: { n: "Lel", f: parse_Lel }, 442: { n: "CodeName", f: parse_XLSCodeName }, 443: { n: "SXFDBType", f: parse_SXFDBType }, 444: { n: "Prot4RevPass", f: parse_Prot4RevPass }, 445: { n: "ObNoMacros", f: parse_ObNoMacros }, 446: { n: "Dv", f: parse_Dv }, 448: { n: "Excel9File", f: parse_Excel9File }, 449: { n: "RecalcId", f: parse_RecalcId, r: 2 }, 450: { n: "EntExU2", f: parse_EntExU2 }, 512: { n: "Dimensions", f: parse_Dimensions }, 513: { n: "Blank", f: parse_Blank }, 515: { n: "Number", f: parse_Number }, 516: { n: "Label", f: parse_Label }, 517: { n: "BoolErr", f: parse_BoolErr }, 518: { n: "Formula", f: parse_Formula }, 519: { n: "String", f: parse_String }, 520: { n: "Row", f: parse_Row }, 523: { n: "Index", f: parse_Index }, 545: { n: "Array", f: parse_Array }, 549: { n: "DefaultRowHeight", f: parse_DefaultRowHeight }, 566: { n: "Table", f: parse_Table }, 574: { n: "Window2", f: parse_Window2 }, 638: { n: "RK", f: parse_RK }, 659: { n: "Style", f: parse_Style }, 1030: { n: "Formula", f: parse_Formula }, 1048: { n: "BigName", f: parse_BigName }, 1054: { n: "Format", f: parse_Format }, 1084: { n: "ContinueBigName", f: parse_ContinueBigName }, 1212: { n: "ShrFmla", f: parse_ShrFmla }, 2048: { n: "HLinkTooltip", f: parse_HLinkTooltip }, 2049: { n: "WebPub", f: parse_WebPub }, 2050: { n: "QsiSXTag", f: parse_QsiSXTag }, 2051: { n: "DBQueryExt", f: parse_DBQueryExt }, 2052: { n: "ExtString", f: parse_ExtString }, 2053: { n: "TxtQry", f: parse_TxtQry }, 2054: { n: "Qsir", f: parse_Qsir }, 2055: { n: "Qsif", f: parse_Qsif }, 2056: { n: "RRDTQSIF", f: parse_RRDTQSIF }, 2057: { n: "BOF", f: parse_BOF }, 2058: { n: "OleDbConn", f: parse_OleDbConn }, 2059: { n: "WOpt", f: parse_WOpt }, 2060: { n: "SXViewEx", f: parse_SXViewEx }, 2061: { n: "SXTH", f: parse_SXTH }, 2062: { n: "SXPIEx", f: parse_SXPIEx }, 2063: { n: "SXVDTEx", f: parse_SXVDTEx }, 2064: { n: "SXViewEx9", f: parse_SXViewEx9 }, 2066: { n: "ContinueFrt", f: parse_ContinueFrt }, 2067: { n: "RealTimeData", f: parse_RealTimeData }, 2128: { n: "ChartFrtInfo", f: parse_ChartFrtInfo }, 2129: { n: "FrtWrapper", f: parse_FrtWrapper }, 2130: { n: "StartBlock", f: parse_StartBlock }, 2131: { n: "EndBlock", f: parse_EndBlock }, 2132: { n: "StartObject", f: parse_StartObject }, 2133: { n: "EndObject", f: parse_EndObject }, 2134: { n: "CatLab", f: parse_CatLab }, 2135: { n: "YMult", f: parse_YMult }, 2136: { n: "SXViewLink", f: parse_SXViewLink }, 2137: { n: "PivotChartBits", f: parse_PivotChartBits }, 2138: { n: "FrtFontList", f: parse_FrtFontList }, 2146: { n: "SheetExt", f: parse_SheetExt }, 2147: { n: "BookExt", f: parse_BookExt, r: 12 }, 2148: { n: "SXAddl", f: parse_SXAddl }, 2149: { n: "CrErr", f: parse_CrErr }, 2150: { n: "HFPicture", f: parse_HFPicture }, 2151: { n: "FeatHdr", f: parse_FeatHdr }, 2152: { n: "Feat", f: parse_Feat }, 2154: { n: "DataLabExt", f: parse_DataLabExt }, 2155: { n: "DataLabExtContents", f: parse_DataLabExtContents }, 2156: { n: "CellWatch", f: parse_CellWatch }, 2161: { n: "FeatHdr11", f: parse_FeatHdr11 }, 2162: { n: "Feature11", f: parse_Feature11 }, 2164: { n: "DropDownObjIds", f: parse_DropDownObjIds }, 2165: { n: "ContinueFrt11", f: parse_ContinueFrt11 }, 2166: { n: "DConn", f: parse_DConn }, 2167: { n: "List12", f: parse_List12 }, 2168: { n: "Feature12", f: parse_Feature12 }, 2169: { n: "CondFmt12", f: parse_CondFmt12 }, 2170: { n: "CF12", f: parse_CF12 }, 2171: { n: "CFEx", f: parse_CFEx }, 2172: { n: "XFCRC", f: parse_XFCRC, r: 12 }, 2173: { n: "XFExt", f: parse_XFExt, r: 12 }, 2174: { n: "AutoFilter12", f: parse_AutoFilter12 }, 2175: { n: "ContinueFrt12", f: parse_ContinueFrt12 }, 2180: { n: "MDTInfo", f: parse_MDTInfo }, 2181: { n: "MDXStr", f: parse_MDXStr }, 2182: { n: "MDXTuple", f: parse_MDXTuple }, 2183: { n: "MDXSet", f: parse_MDXSet }, 2184: { n: "MDXProp", f: parse_MDXProp }, 2185: {
            n: "MDXKPI",
            f: parse_MDXKPI
        }, 2186: { n: "MDB", f: parse_MDB }, 2187: { n: "PLV", f: parse_PLV }, 2188: { n: "Compat12", f: parse_Compat12, r: 12 }, 2189: { n: "DXF", f: parse_DXF }, 2190: { n: "TableStyles", f: parse_TableStyles, r: 12 }, 2191: { n: "TableStyle", f: parse_TableStyle }, 2192: { n: "TableStyleElement", f: parse_TableStyleElement }, 2194: { n: "StyleExt", f: parse_StyleExt }, 2195: { n: "NamePublish", f: parse_NamePublish }, 2196: { n: "NameCmt", f: parse_NameCmt, r: 12 }, 2197: { n: "SortData", f: parse_SortData }, 2198: { n: "Theme", f: parse_Theme, r: 12 }, 2199: { n: "GUIDTypeLib", f: parse_GUIDTypeLib }, 2200: { n: "FnGrp12", f: parse_FnGrp12 }, 2201: { n: "NameFnGrp12", f: parse_NameFnGrp12 }, 2202: { n: "MTRSettings", f: parse_MTRSettings, r: 12 }, 2203: { n: "CompressPictures", f: parse_CompressPictures }, 2204: { n: "HeaderFooter", f: parse_HeaderFooter }, 2205: { n: "CrtLayout12", f: parse_CrtLayout12 }, 2206: { n: "CrtMlFrt", f: parse_CrtMlFrt }, 2207: { n: "CrtMlFrtContinue", f: parse_CrtMlFrtContinue }, 2211: { n: "ForceFullCalculation", f: parse_ForceFullCalculation }, 2212: { n: "ShapePropsStream", f: parse_ShapePropsStream }, 2213: { n: "TextPropsStream", f: parse_TextPropsStream }, 2214: { n: "RichTextStream", f: parse_RichTextStream }, 2215: { n: "CrtLayout12A", f: parse_CrtLayout12A }, 4097: { n: "Units", f: parse_Units }, 4098: { n: "Chart", f: parse_Chart }, 4099: { n: "Series", f: parse_Series }, 4102: { n: "DataFormat", f: parse_DataFormat }, 4103: { n: "LineFormat", f: parse_LineFormat }, 4105: { n: "MarkerFormat", f: parse_MarkerFormat }, 4106: { n: "AreaFormat", f: parse_AreaFormat }, 4107: { n: "PieFormat", f: parse_PieFormat }, 4108: { n: "AttachedLabel", f: parse_AttachedLabel }, 4109: { n: "SeriesText", f: parse_SeriesText }, 4116: { n: "ChartFormat", f: parse_ChartFormat }, 4117: { n: "Legend", f: parse_Legend }, 4118: { n: "SeriesList", f: parse_SeriesList }, 4119: { n: "Bar", f: parse_Bar }, 4120: { n: "Line", f: parse_Line }, 4121: { n: "Pie", f: parse_Pie }, 4122: { n: "Area", f: parse_Area }, 4123: { n: "Scatter", f: parse_Scatter }, 4124: { n: "CrtLine", f: parse_CrtLine }, 4125: { n: "Axis", f: parse_Axis }, 4126: { n: "Tick", f: parse_Tick }, 4127: { n: "ValueRange", f: parse_ValueRange }, 4128: { n: "CatSerRange", f: parse_CatSerRange }, 4129: { n: "AxisLine", f: parse_AxisLine }, 4130: { n: "CrtLink", f: parse_CrtLink }, 4132: { n: "DefaultText", f: parse_DefaultText }, 4133: { n: "Text", f: parse_Text }, 4134: { n: "FontX", f: parse_FontX }, 4135: { n: "ObjectLink", f: parse_ObjectLink }, 4146: { n: "Frame", f: parse_Frame }, 4147: { n: "Begin", f: parse_Begin }, 4148: { n: "End", f: parse_End }, 4149: { n: "PlotArea", f: parse_PlotArea }, 4154: { n: "Chart3d", f: parse_Chart3d }, 4156: { n: "PicF", f: parse_PicF }, 4157: { n: "DropBar", f: parse_DropBar }, 4158: { n: "Radar", f: parse_Radar }, 4159: { n: "Surf", f: parse_Surf }, 4160: { n: "RadarArea", f: parse_RadarArea }, 4161: { n: "AxisParent", f: parse_AxisParent }, 4163: { n: "LegendException", f: parse_LegendException }, 4164: { n: "ShtProps", f: parse_ShtProps }, 4165: { n: "SerToCrt", f: parse_SerToCrt }, 4166: { n: "AxesUsed", f: parse_AxesUsed }, 4168: { n: "SBaseRef", f: parse_SBaseRef }, 4170: { n: "SerParent", f: parse_SerParent }, 4171: { n: "SerAuxTrend", f: parse_SerAuxTrend }, 4174: { n: "IFmtRecord", f: parse_IFmtRecord }, 4175: { n: "Pos", f: parse_Pos }, 4176: { n: "AlRuns", f: parse_AlRuns }, 4177: { n: "BRAI", f: parse_BRAI }, 4187: { n: "SerAuxErrBar", f: parse_SerAuxErrBar }, 4188: { n: "ClrtClient", f: parse_ClrtClient }, 4189: { n: "SerFmt", f: parse_SerFmt }, 4191: { n: "Chart3DBarShape", f: parse_Chart3DBarShape }, 4192: { n: "Fbi", f: parse_Fbi }, 4193: { n: "BopPop", f: parse_BopPop }, 4194: { n: "AxcExt", f: parse_AxcExt }, 4195: { n: "Dat", f: parse_Dat }, 4196: { n: "PlotGrowth", f: parse_PlotGrowth }, 4197: { n: "SIIndex", f: parse_SIIndex }, 4198: { n: "GelFrame", f: parse_GelFrame }, 4199: { n: "BopPopCustom", f: parse_BopPopCustom }, 4200: { n: "Fbi2", f: parse_Fbi2 }, 0: { n: "Dimensions", f: parse_Dimensions }, 2: { n: "BIFF2INT", f: parse_BIFF2INT }, 5: { n: "BoolErr", f: parse_BoolErr }, 7: { n: "String", f: parse_BIFF2STRING }, 8: { n: "BIFF2ROW", f: parsenoop }, 11: { n: "Index", f: parse_Index }, 22: { n: "ExternCount", f: parsenoop }, 30: { n: "BIFF2FORMAT", f: parse_BIFF2Format }, 31: { n: "BIFF2FMTCNT", f: parsenoop }, 32: { n: "BIFF2COLINFO", f: parsenoop }, 33: { n: "Array", f: parse_Array }, 37: { n: "DefaultRowHeight", f: parse_DefaultRowHeight }, 50: { n: "BIFF2FONTXTRA", f: parse_BIFF2FONTXTRA }, 62: { n: "BIFF2WINDOW2", f: parsenoop }, 69: { n: "BIFF2FONTCLR", f: parsenoop }, 86: { n: "BIFF4FMTCNT", f: parsenoop }, 126: { n: "RK", f: parsenoop }, 127: { n: "ImData", f: parse_ImData }, 135: { n: "Addin", f: parsenoop }, 136: { n: "Edg", f: parsenoop }, 137: { n: "Pub", f: parsenoop }, 145: { n: "Sub", f: parsenoop }, 148: { n: "LHRecord", f: parsenoop }, 149: { n: "LHNGraph", f: parsenoop }, 150: { n: "Sound", f: parsenoop }, 169: { n: "CoordList", f: parsenoop }, 171: { n: "GCW", f: parsenoop }, 188: { n: "ShrFmla", f: parsenoop }, 194: { n: "AddMenu", f: parsenoop }, 195: { n: "DelMenu", f: parsenoop }, 214: { n: "RString", f: parse_RString }, 223: { n: "UDDesc", f: parsenoop }, 234: { n: "TabIdConf", f: parsenoop }, 354: { n: "XL5Modify", f: parsenoop }, 421: { n: "FileSharing2", f: parsenoop }, 521: { n: "BOF", f: parse_BOF }, 536: { n: "Lbl", f: parse_Lbl }, 547: { n: "ExternName", f: parse_ExternName }, 561: { n: "Font", f: parsenoop }, 1033: { n: "BOF", f: parse_BOF }, 2157: { n: "FeatInfo", f: parsenoop }, 2163: { n: "FeatInfo11", f: parsenoop }, 2177: { n: "SXAddl12", f: parsenoop }, 2240: { n: "AutoWebPub", f: parsenoop }, 2241: { n: "ListObj", f: parsenoop }, 2242: { n: "ListField", f: parsenoop }, 2243: { n: "ListDV", f: parsenoop }, 2244: { n: "ListCondFmt", f: parsenoop }, 2245: { n: "ListCF", f: parsenoop }, 2246: { n: "FMQry", f: parsenoop }, 2247: { n: "FMSQry", f: parsenoop }, 2248: { n: "PLV", f: parsenoop }, 2249: { n: "LnExt", f: parsenoop }, 2250: { n: "MkrExt", f: parsenoop }, 2251: { n: "CrtCoopt", f: parsenoop }, 67: { n: "BIFF2XF", f: parsenoop }, 579: { n: "BIFF3XF", f: parsenoop }, 1091: { n: "BIFF4XF", f: parsenoop }, 29282: {}
    }; function write_biff_rec(ba, t, payload, length) { var len = length || (payload || []).length; var o = ba.next(4 + len); o.write_shift(2, t); o.write_shift(2, len); if (len > 0 && is_buf(payload)) ba.push(payload) } function write_BOF(wb, o) { if (o.bookType != "biff2") throw "unsupported BIFF version"; var out = new_buf(4); out.write_shift(2, 2); out.write_shift(2, 16); return out } function write_BIFF2Cell(out, r, c) { if (!out) out = new_buf(7); out.write_shift(2, r); out.write_shift(2, c); out.write_shift(1, 0); out.write_shift(1, 0); out.write_shift(1, 0); return out } function write_BIFF2INT(r, c, val) { var out = new_buf(9); write_BIFF2Cell(out, r, c); out.write_shift(2, val); return out } function write_BIFF2NUMBER(r, c, val) { var out = new_buf(15); write_BIFF2Cell(out, r, c); out.write_shift(8, val, "f"); return out } function write_BIFF2BERR(r, c, val, t) { var out = new_buf(9); write_BIFF2Cell(out, r, c); if (t == "e") { out.write_shift(1, val); out.write_shift(1, 1) } else { out.write_shift(1, val ? 1 : 0); out.write_shift(1, 0) } return out } function write_BIFF2LABEL(r, c, val) { var out = new_buf(8 + 2 * val.length); write_BIFF2Cell(out, r, c); out.write_shift(1, val.length); out.write_shift(val.length, val, "sbcs"); return out.l < out.length ? out.slice(0, out.l) : out } function write_ws_biff_cell(ba, cell, R, C, opts) { if (cell.v != null) switch (cell.t) { case "d":; case "n": var v = cell.t == "d" ? datenum(cell.v) : cell.v; if (v == (v | 0) && v >= 0 && v < 65536) write_biff_rec(ba, 2, write_BIFF2INT(R, C, v)); else write_biff_rec(ba, 3, write_BIFF2NUMBER(R, C, v)); return; case "b":; case "e": write_biff_rec(ba, 5, write_BIFF2BERR(R, C, cell.v, cell.t)); return; case "s":; case "str": write_biff_rec(ba, 4, write_BIFF2LABEL(R, C, cell.v)); return; } write_biff_rec(ba, 1, write_BIFF2Cell(null, R, C)) } function write_biff_ws(ba, ws, idx, opts, wb) { var dense = Array.isArray(ws); var range = safe_decode_range(ws["!ref"] || "A1"), ref, rr = "", cols = []; for (var R = range.s.r; R <= range.e.r; ++R) { rr = encode_row(R); for (var C = range.s.c; C <= range.e.c; ++C) { if (R === range.s.r) cols[C] = encode_col(C); ref = cols[C] + rr; var cell = dense ? (ws[R] || [])[C] : ws[ref]; if (!cell) continue; write_ws_biff_cell(ba, cell, R, C, opts) } } } function write_biff_buf(wb, opts) { var o = opts || {}; if (DENSE != null && o.dense == null) o.dense = DENSE; var ba = buf_array(); var idx = 0; for (var i = 0; i < wb.SheetNames.length; ++i) if (wb.SheetNames[i] == o.sheet) idx = i; if (idx == 0 && !!o.sheet && wb.SheetNames[0] != o.sheet) throw new Error("Sheet not found: " + o.sheet); write_biff_rec(ba, 9, write_BOF(wb, o)); write_biff_ws(ba, wb.Sheets[wb.SheetNames[idx]], idx, o, wb); write_biff_rec(ba, 10); return ba.end() } var HTML_ = function () { function html_to_sheet(str, _opts) { var opts = _opts || {}; if (DENSE != null && opts.dense == null) opts.dense = DENSE; var ws = opts.dense ? [] : {}; var i = str.indexOf("<table"), j = str.indexOf("</table"); if (i == -1 || j == -1) throw new Error("Invalid HTML: missing <table> / </table> pair"); var rows = str.slice(i, j).split(/(:?<tr[^>]*>)/); var R = -1, C = 0, RS = 0, CS = 0; var range = { s: { r: 1e7, c: 1e7 }, e: { r: 0, c: 0 } }; var merges = [], midx = 0; for (i = 0; i < rows.length; ++i) { var row = rows[i].trim(); if (row.substr(0, 3) == "<tr") { ++R; C = 0; continue } if (row.substr(0, 3) != "<td") continue; var cells = row.split("</td>"); for (j = 0; j < cells.length; ++j) { var cell = cells[j].trim(); if (cell.substr(0, 3) != "<td") continue; var m = cell, cc = 0; while (m.charAt(0) == "<" && (cc = m.indexOf(">")) > -1) m = m.slice(cc + 1); while (m.indexOf(">") > -1) m = m.slice(0, m.lastIndexOf("<")); var tag = parsexmltag(cell.slice(0, cell.indexOf(">"))); CS = tag.colspan ? +tag.colspan : 1; if ((RS = +tag.rowspan) > 0 || CS > 1) merges.push({ s: { r: R, c: C }, e: { r: R + (RS || 1) - 1, c: C + CS - 1 } }); if (!m.length) { C += CS; continue } m = unescapexml(m).replace(/[\r\n]/g, ""); if (range.s.r > R) range.s.r = R; if (range.e.r < R) range.e.r = R; if (range.s.c > C) range.s.c = C; if (range.e.c < C) range.e.c = C; if (opts.dense) { if (!ws[R]) ws[R] = []; if (Number(m) == Number(m)) ws[R][C] = { t: "n", v: +m }; else ws[R][C] = { t: "s", v: m } } else { var coord = encode_cell({ r: R, c: C }); if (Number(m) == Number(m)) ws[coord] = { t: "n", v: +m }; else ws[coord] = { t: "s", v: m } } C += CS } } ws["!ref"] = encode_range(range); return ws } function html_to_book(str, opts) { return sheet_to_workbook(html_to_sheet(str, opts), opts) } function make_html_row(ws, r, R, o) { var M = ws["!merges"] || []; var oo = []; var nullcell = "<td" + (o.editable ? ' contenteditable="true"' : "") + "></td>"; for (var C = r.s.c; C <= r.e.c; ++C) { var RS = 0, CS = 0; for (var j = 0; j < M.length; ++j) { if (M[j].s.r > R || M[j].s.c > C) continue; if (M[j].e.r < R || M[j].e.c < C) continue; if (M[j].s.r < R || M[j].s.c < C) { RS = -1; break } RS = M[j].e.r - M[j].s.r + 1; CS = M[j].e.c - M[j].s.c + 1; break } if (RS < 0) continue; var coord = encode_cell({ r: R, c: C }); var cell = o.dense ? (ws[R] || [])[C] : ws[coord]; if (!cell || cell.v == null) { oo.push(nullcell); continue } var w = cell.h || escapexml(cell.w || (format_cell(cell), cell.w) || ""); var sp = {}; if (RS > 1) sp.rowspan = RS; if (CS > 1) sp.colspan = CS; if (o.editable) sp.contenteditable = "true"; sp.id = "sjs-" + coord; oo.push(writextag("td", w, sp)) } var preamble = "<tr>"; return preamble + oo.join("") + "</tr>" } function make_html_preamble(ws, R, o) { var out = []; return out.join("") + "<table>" } var _BEGIN = '<html><head><meta charset="utf-8"/><title>SheetJS Table Export</title></head><body>'; var _END = "</body></html>"; function sheet_to_html(ws, opts, wb) { var o = opts || {}; var header = o.header != null ? o.header : _BEGIN; var footer = o.footer != null ? o.footer : _END; var out = [header]; var r = decode_range(ws["!ref"]); o.dense = Array.isArray(ws); out.push(make_html_preamble(ws, r, o)); for (var R = r.s.r; R <= r.e.r; ++R) out.push(make_html_row(ws, r, R, o)); out.push("</table>" + footer); return out.join("") } return { to_workbook: html_to_book, to_sheet: html_to_sheet, _row: make_html_row, BEGIN: _BEGIN, END: _END, _preamble: make_html_preamble, from_sheet: sheet_to_html } }(); function parse_dom_table(table, _opts) { var opts = _opts || {}; if (DENSE != null) opts.dense = DENSE; var ws = opts.dense ? [] : {}; var rows = table.getElementsByTagName("tr"); var range = { s: { r: 0, c: 0 }, e: { r: rows.length - 1, c: 0 } }; var merges = [], midx = 0; var R = 0, _C = 0, C = 0, RS = 0, CS = 0; for (; R < rows.length; ++R) { var row = rows[R]; var elts = row.children; for (_C = C = 0; _C < elts.length; ++_C) { var elt = elts[_C], v = elts[_C].innerText || elts[_C].textContent; for (midx = 0; midx < merges.length; ++midx) { var m = merges[midx]; if (m.s.c == C && m.s.r <= R && R <= m.e.r) { C = m.e.c + 1; midx = -1 } } CS = +elt.getAttribute("colspan") || 1; if ((RS = +elt.getAttribute("rowspan")) > 0 || CS > 1) merges.push({ s: { r: R, c: C }, e: { r: R + (RS || 1) - 1, c: C + CS - 1 } }); var o = { t: "s", v: v }; if (v != null && v.length) { if (!isNaN(Number(v))) o = { t: "n", v: Number(v) }; else if (!isNaN(fuzzydate(v).getDate())) { o = { t: "d", v: parseDate(v) }; if (!opts.cellDates) o = { t: "n", v: datenum(o.v) }; o.z = opts.dateNF || SSF._table[14] } } if (opts.dense) { if (!ws[R]) ws[R] = []; ws[R][C] = o } else ws[encode_cell({ c: C, r: R })] = o; if (range.e.c < C) range.e.c = C; C += CS } } ws["!merges"] = merges; ws["!ref"] = encode_range(range); return ws } function table_to_book(table, opts) { return sheet_to_workbook(parse_dom_table(table, opts), opts) } var parse_content_xml = function () { var parse_text_p = function (text, tag) { return unescapexml(text.replace(/<text:s\/>/g, " ").replace(/<[^>]*>/g, "")) }; var number_formats = { day: ["d", "dd"], month: ["m", "mm"], year: ["y", "yy"], hours: ["h", "hh"], minutes: ["m", "mm"], seconds: ["s", "ss"], "am-pm": ["A/P", "AM/PM"], "day-of-week": ["ddd", "dddd"] }; return function pcx(d, _opts) { var opts = _opts || {}; if (DENSE != null && opts.dense == null) opts.dense = DENSE; var str = xlml_normalize(d); var state = [], tmp; var tag; var NFtag = { name: "" }, NF = "", pidx = 0; var sheetag; var rowtag; var Sheets = {}, SheetNames = []; var ws = opts.dense ? [] : {}; var Rn, q; var ctag = { value: "" }; var textp = "", textpidx = 0, textptag; var R = -1, C = -1, range = { s: { r: 1e6, c: 1e7 }, e: { r: 0, c: 0 } }; var number_format_map = {}; var merges = [], mrange = {}, mR = 0, mC = 0; var arrayf = []; var comments = [], comment = {}; var creator = "", creatoridx = 0; var rept = 1, isstub = false; var i = 0; xlmlregex.lastIndex = 0; str = str.replace(/<!--([\s\S]*?)-->/gm, "").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm, ""); while (Rn = xlmlregex.exec(str)) switch (Rn[3] = Rn[3].replace(/_.*$/, "")) { case "table":; case "工作表": if (Rn[1] === "/") { if (range.e.c >= range.s.c && range.e.r >= range.s.r) ws["!ref"] = encode_range(range); if (merges.length) ws["!merges"] = merges; sheetag.name = utf8read(sheetag["名称"] || sheetag.name); SheetNames.push(sheetag.name); Sheets[sheetag.name] = ws } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") { sheetag = parsexmltag(Rn[0], false); R = C = -1; range.s.r = range.s.c = 1e7; range.e.r = range.e.c = 0; ws = opts.dense ? [] : {}; merges = [] } break; case "table-row":; case "行": if (Rn[1] === "/") break; rowtag = parsexmltag(Rn[0], false); if (rowtag["行号"]) R = rowtag["行号"] - 1; else ++R; C = -1; break; case "covered-table-cell": ++C; if (opts.sheetStubs) { if (opts.dense) { if (!ws[R]) ws[R] = []; ws[R][C] = { t: "z" } } else ws[encode_cell({ r: R, c: C })] = { t: "z" } } break; case "table-cell":; case "数据": if (Rn[0].charAt(Rn[0].length - 2) === "/") { ctag = parsexmltag(Rn[0], false); if (ctag["number-columns-repeated"]) C += parseInt(ctag["number-columns-repeated"], 10); else ++C } else if (Rn[1] !== "/") { ++C; rept = 1; if (C > range.e.c) range.e.c = C; if (R > range.e.r) range.e.r = R; if (C < range.s.c) range.s.c = C; if (R < range.s.r) range.s.r = R; ctag = parsexmltag(Rn[0], false); comments = []; comment = {}; q = { t: ctag["数据类型"] || ctag["value-type"], v: null }; if (opts.cellFormula) { if (ctag.formula) ctag.formula = unescapexml(ctag.formula); if (ctag["number-matrix-columns-spanned"] && ctag["number-matrix-rows-spanned"]) { mR = parseInt(ctag["number-matrix-rows-spanned"], 10) || 0; mC = parseInt(ctag["number-matrix-columns-spanned"], 10) || 0; mrange = { s: { r: R, c: C }, e: { r: R + mR - 1, c: C + mC - 1 } }; q.F = encode_range(mrange); arrayf.push([mrange, q.F]) } if (ctag.formula) q.f = ods_to_csf_formula(ctag.formula); else for (i = 0; i < arrayf.length; ++i) if (R >= arrayf[i][0].s.r && R <= arrayf[i][0].e.r) if (C >= arrayf[i][0].s.c && C <= arrayf[i][0].e.c) q.F = arrayf[i][1] } if (ctag["number-columns-spanned"] || ctag["number-rows-spanned"]) { mR = parseInt(ctag["number-rows-spanned"], 10) || 0; mC = parseInt(ctag["number-columns-spanned"], 10) || 0; mrange = { s: { r: R, c: C }, e: { r: R + mR - 1, c: C + mC - 1 } }; merges.push(mrange) } if (ctag["number-columns-repeated"]) rept = parseInt(ctag["number-columns-repeated"], 10); switch (q.t) { case "boolean": q.t = "b"; q.v = parsexmlbool(ctag["boolean-value"]); break; case "float": q.t = "n"; q.v = parseFloat(ctag.value); break; case "percentage": q.t = "n"; q.v = parseFloat(ctag.value); break; case "currency": q.t = "n"; q.v = parseFloat(ctag.value); break; case "date": q.t = "d"; q.v = parseDate(ctag["date-value"]); if (!opts.cellDates) { q.t = "n"; q.v = datenum(q.v) } q.z = "m/d/yy"; break; case "time": q.t = "n"; q.v = parse_isodur(ctag["time-value"]) / 86400; break; case "number": q.t = "n"; q.v = parseFloat(ctag["数据数值"]); break; default: if (q.t === "string" || q.t === "text" || !q.t) { q.t = "s"; if (ctag["string-value"] != null) textp = unescapexml(ctag["string-value"]) } else throw new Error("Unsupported value type " + q.t); } } else { isstub = false; if (q.t === "s") { q.v = textp || ""; isstub = textpidx == 0 } if (comments.length > 0) { q.c = comments; comments = [] } if (textp && opts.cellText !== false) q.w = textp; if (!isstub || opts.sheetStubs) { if (!(opts.sheetRows && opts.sheetRows < R)) { if (opts.dense) { if (!ws[R]) ws[R] = []; ws[R][C] = q; while (--rept > 0) ws[R][++C] = dup(q) } else { ws[encode_cell({ r: R, c: C })] = q; while (--rept > 0) ws[encode_cell({ r: R, c: ++C })] = dup(q) } if (range.e.c <= C) range.e.c = C } } else { C += rept; rept = 0 } q = {}; textp = "" } break; case "document":; case "document-content":; case "电子表格文档":; case "spreadsheet":; case "主体":; case "scripts":; case "styles":; case "font-face-decls": if (Rn[1] === "/") { if ((tmp = state.pop())[0] !== Rn[3]) throw "Bad state: " + tmp } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([Rn[3], true]); break; case "annotation": if (Rn[1] === "/") { if ((tmp = state.pop())[0] !== Rn[3]) throw "Bad state: " + tmp; comment.t = textp; comment.a = creator; comments.push(comment) } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") { state.push([Rn[3], false]) } creator = ""; creatoridx = 0; textp = ""; textpidx = 0; break; case "creator": if (Rn[1] === "/") { creator = str.slice(creatoridx, Rn.index) } else creatoridx = Rn.index + Rn[0].length; break; case "meta":; case "元数据":; case "settings":; case "config-item-set":; case "config-item-map-indexed":; case "config-item-map-entry":; case "config-item-map-named":; case "shapes":; case "frame":; case "text-box":; case "image":; case "data-pilot-tables":; case "list-style":; case "form":; case "dde-links":; case "event-listeners": if (Rn[1] === "/") { if ((tmp = state.pop())[0] !== Rn[3]) throw "Bad state: " + tmp } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([Rn[3], false]); textp = ""; textpidx = 0; break; case "scientific-number": break; case "currency-symbol": break; case "currency-style": break; case "number-style":; case "percentage-style":; case "date-style":; case "time-style": if (Rn[1] === "/") { number_format_map[NFtag.name] = NF; if ((tmp = state.pop())[0] !== Rn[3]) throw "Bad state: " + tmp } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") { NF = ""; NFtag = parsexmltag(Rn[0], false); state.push([Rn[3], true]) } break; case "script": break; case "libraries": break; case "automatic-styles": break; case "master-styles": break; case "default-style":; case "page-layout": break; case "style": break; case "map": break; case "font-face": break; case "paragraph-properties": break; case "table-properties": break; case "table-column-properties": break; case "table-row-properties": break; case "table-cell-properties": break; case "number": switch (state[state.length - 1][0]) { case "time-style":; case "date-style": tag = parsexmltag(Rn[0], false); NF += number_formats[Rn[3]][tag.style === "long" ? 1 : 0]; break; } break; case "fraction": break; case "day":; case "month":; case "year":; case "era":; case "day-of-week":; case "week-of-year":; case "quarter":; case "hours":; case "minutes":; case "seconds":; case "am-pm": switch (state[state.length - 1][0]) { case "time-style":; case "date-style": tag = parsexmltag(Rn[0], false); NF += number_formats[Rn[3]][tag.style === "long" ? 1 : 0]; break; } break; case "boolean-style": break; case "boolean": break; case "text-style": break; case "text": if (Rn[0].slice(-2) === "/>") break; else if (Rn[1] === "/") switch (state[state.length - 1][0]) { case "number-style":; case "date-style":; case "time-style": NF += str.slice(pidx, Rn.index); break; } else pidx = Rn.index + Rn[0].length; break; case "text-content": break; case "text-properties": break; case "body":; case "电子表格": break; case "forms": break; case "table-column": break; case "table-row-group": break; case "table-column-group": break; case "null-date": break; case "graphic-properties": break; case "calculation-settings": break; case "named-expressions": break; case "named-range": break; case "named-expression": break; case "sort": break; case "sort-by": break; case "sort-groups": break; case "span": break; case "line-break": break; case "p":; case "文本串": if (Rn[1] === "/") textp = (textp.length > 0 ? textp + "\n" : "") + parse_text_p(str.slice(textpidx, Rn.index), textptag); else { textptag = parsexmltag(Rn[0], false); textpidx = Rn.index + Rn[0].length } break; case "database-range": if (Rn[1] === "/") break; try { var AutoFilter = ods_to_csf_range_3D(parsexmltag(Rn[0])["target-range-address"]); Sheets[AutoFilter[0]]["!autofilter"] = { ref: AutoFilter[1] } } catch (e) { } break; case "s": break; case "date": break; case "object": break; case "title":; case "标题": break; case "desc": break; case "table-source": break; case "iteration": break; case "content-validations": break; case "content-validation": break; case "error-message": break; case "database-ranges": break; case "filter": break; case "filter-and": break; case "filter-or": break; case "filter-condition": break; case "list-level-style-bullet": break; case "list-level-style-number": break; case "list-level-properties": break; case "sender-firstname":; case "sender-lastname":; case "sender-initials":; case "sender-title":; case "sender-position":; case "sender-email":; case "sender-phone-private":; case "sender-fax":; case "sender-company":; case "sender-phone-work":; case "sender-street":; case "sender-city":; case "sender-postal-code":; case "sender-country":; case "sender-state-or-province":; case "author-name":; case "author-initials":; case "chapter":; case "file-name":; case "template-name":; case "sheet-name": break; case "event-listener": break; case "initial-creator":; case "creation-date":; case "generator":; case "document-statistic":; case "user-defined": break; case "config-item": break; case "page-number": break; case "page-count": break; case "time": break; case "data-pilot-table":; case "source-cell-range":; case "source-service":; case "data-pilot-field":; case "data-pilot-level":; case "data-pilot-subtotals":; case "data-pilot-subtotal":; case "data-pilot-members":; case "data-pilot-member":; case "data-pilot-display-info":; case "data-pilot-sort-info":; case "data-pilot-layout-info":; case "data-pilot-field-reference":; case "data-pilot-groups":; case "data-pilot-group":; case "data-pilot-group-member": break; case "rect": break; case "dde-connection-decls":; case "dde-connection-decl":; case "dde-link":; case "dde-source": break; case "properties": break; case "property": break; case "a": break; case "table-protection": break; case "data-pilot-grand-total": break; default: if (Rn[2] === "dc:") break; if (Rn[2] === "draw:") break; if (Rn[2] === "style:") break; if (Rn[2] === "calcext:") break; if (Rn[2] === "loext:") break; if (Rn[2] === "uof:") break; if (Rn[2] === "表:") break; if (Rn[2] === "字:") break; if (opts.WTF) throw new Error(Rn); } var out = { Sheets: Sheets, SheetNames: SheetNames }; return out } }(); function parse_ods(zip, opts) { opts = opts || {}; var ods = !!safegetzipfile(zip, "objectdata"); if (ods) var manifest = parse_manifest(getzipdata(zip, "META-INF/manifest.xml"), opts); var content = getzipstr(zip, "content.xml"); if (!content) throw new Error("Missing content.xml in " + (ods ? "ODS" : "UOF") + " file"); return parse_content_xml(ods ? content : utf8read(content), opts) } function parse_fods(data, opts) { return parse_content_xml(data, opts) } var write_styles_ods = function () { var payload = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><office:document-styles xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0" xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0" xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0" xmlns:draw="urn:oasis:names:tc:opendocument:xmlns:drawing:1.0" xmlns:fo="urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:number="urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0" xmlns:svg="urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0" xmlns:of="urn:oasis:names:tc:opendocument:xmlns:of:1.2" office:version="1.2"></office:document-styles>'; return function wso(wb, opts) { return payload } }(); var write_content_ods = function () { var null_cell_xml = "          <table:table-cell />\n"; var covered_cell_xml = "          <table:covered-table-cell/>\n"; var write_ws = function (ws, wb, i, opts) { var o = []; o.push('      <table:table table:name="' + escapexml(wb.SheetNames[i]) + '">\n'); var R = 0, C = 0, range = decode_range(ws["!ref"]); var marr = ws["!merges"] || [], mi = 0; var dense = Array.isArray(ws); for (R = 0; R < range.s.r; ++R) o.push("        <table:table-row></table:table-row>\n"); for (; R <= range.e.r; ++R) { o.push("        <table:table-row>\n"); for (C = 0; C < range.s.c; ++C) o.push(null_cell_xml); for (; C <= range.e.c; ++C) { var skip = false, ct = {}, textp = ""; for (mi = 0; mi != marr.length; ++mi) { if (marr[mi].s.c > C) continue; if (marr[mi].s.r > R) continue; if (marr[mi].e.c < C) continue; if (marr[mi].e.r < R) continue; if (marr[mi].s.c != C || marr[mi].s.r != R) skip = true; ct["table:number-columns-spanned"] = marr[mi].e.c - marr[mi].s.c + 1; ct["table:number-rows-spanned"] = marr[mi].e.r - marr[mi].s.r + 1; break } if (skip) { o.push(covered_cell_xml); continue } var ref = encode_cell({ r: R, c: C }), cell = dense ? (ws[R] || [])[C] : ws[ref]; if (cell && cell.f) { ct["table:formula"] = escapexml(csf_to_ods_formula(cell.f)); if (cell.F) { if (cell.F.substr(0, ref.length) == ref) { var _Fref = decode_range(cell.F); ct["table:number-matrix-columns-spanned"] = _Fref.e.c - _Fref.s.c + 1; ct["table:number-matrix-rows-spanned"] = _Fref.e.r - _Fref.s.r + 1 } } } if (!cell) { o.push(null_cell_xml); continue } switch (cell.t) { case "b": textp = cell.v ? "TRUE" : "FALSE"; ct["office:value-type"] = "boolean"; ct["office:boolean-value"] = cell.v ? "true" : "false"; break; case "n": textp = cell.w || String(cell.v || 0); ct["office:value-type"] = "float"; ct["office:value"] = cell.v || 0; break; case "s":; case "str": textp = escapexml(cell.v); ct["office:value-type"] = "string"; break; case "d": textp = cell.w || parseDate(cell.v).toISOString(); ct["office:value-type"] = "date"; ct["office:date-value"] = parseDate(cell.v).toISOString(); ct["table:style-name"] = "ce1"; break; default: o.push(null_cell_xml); continue; } o.push("          " + writextag("table:table-cell", writextag("text:p", textp, {}), ct) + "\n") } o.push("        </table:table-row>\n") } o.push("      </table:table>\n"); return o.join("") }; var write_automatic_styles_ods = function (o) { o.push(" <office:automatic-styles>\n"); o.push('  <number:date-style style:name="N37" number:automatic-order="true">\n'); o.push('   <number:month number:style="long"/>\n'); o.push("   <number:text>/</number:text>\n"); o.push('   <number:day number:style="long"/>\n'); o.push("   <number:text>/</number:text>\n"); o.push("   <number:year/>\n"); o.push("  </number:date-style>\n"); o.push('  <style:style style:name="ce1" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N37"/>\n'); o.push(" </office:automatic-styles>\n") }; return function wcx(wb, opts) { var o = [XML_HEADER]; var attr = wxt_helper({ "xmlns:office": "urn:oasis:names:tc:opendocument:xmlns:office:1.0", "xmlns:table": "urn:oasis:names:tc:opendocument:xmlns:table:1.0", "xmlns:style": "urn:oasis:names:tc:opendocument:xmlns:style:1.0", "xmlns:text": "urn:oasis:names:tc:opendocument:xmlns:text:1.0", "xmlns:draw": "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0", "xmlns:fo": "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0", "xmlns:xlink": "http://www.w3.org/1999/xlink", "xmlns:dc": "http://purl.org/dc/elements/1.1/", "xmlns:meta": "urn:oasis:names:tc:opendocument:xmlns:meta:1.0", "xmlns:number": "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0", "xmlns:presentation": "urn:oasis:names:tc:opendocument:xmlns:presentation:1.0", "xmlns:svg": "urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0", "xmlns:chart": "urn:oasis:names:tc:opendocument:xmlns:chart:1.0", "xmlns:dr3d": "urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0", "xmlns:math": "http://www.w3.org/1998/Math/MathML", "xmlns:form": "urn:oasis:names:tc:opendocument:xmlns:form:1.0", "xmlns:script": "urn:oasis:names:tc:opendocument:xmlns:script:1.0", "xmlns:ooo": "http://openoffice.org/2004/office", "xmlns:ooow": "http://openoffice.org/2004/writer", "xmlns:oooc": "http://openoffice.org/2004/calc", "xmlns:dom": "http://www.w3.org/2001/xml-events", "xmlns:xforms": "http://www.w3.org/2002/xforms", "xmlns:xsd": "http://www.w3.org/2001/XMLSchema", "xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance", "xmlns:sheet": "urn:oasis:names:tc:opendocument:sh33tjs:1.0", "xmlns:rpt": "http://openoffice.org/2005/report", "xmlns:of": "urn:oasis:names:tc:opendocument:xmlns:of:1.2", "xmlns:xhtml": "http://www.w3.org/1999/xhtml", "xmlns:grddl": "http://www.w3.org/2003/g/data-view#", "xmlns:tableooo": "http://openoffice.org/2009/table", "xmlns:drawooo": "http://openoffice.org/2010/draw", "xmlns:calcext": "urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0", "xmlns:loext": "urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0", "xmlns:field": "urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0", "xmlns:formx": "urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0", "xmlns:css3t": "http://www.w3.org/TR/css3-text/", "office:version": "1.2" }); var fods = wxt_helper({ "xmlns:config": "urn:oasis:names:tc:opendocument:xmlns:config:1.0", "office:mimetype": "application/vnd.oasis.opendocument.spreadsheet" }); if (opts.bookType == "fods") o.push("<office:document" + attr + fods + ">\n"); else o.push("<office:document-content" + attr + ">\n"); write_automatic_styles_ods(o); o.push("  <office:body>\n"); o.push("    <office:spreadsheet>\n"); for (var i = 0; i != wb.SheetNames.length; ++i) o.push(write_ws(wb.Sheets[wb.SheetNames[i]], wb, i, opts)); o.push("    </office:spreadsheet>\n"); o.push("  </office:body>\n"); if (opts.bookType == "fods") o.push("</office:document>"); else o.push("</office:document-content>"); return o.join("") } }(); function write_ods(wb, opts) { if (opts.bookType == "fods") return write_content_ods(wb, opts); var zip = new jszip; var f = ""; var manifest = []; var rdf = []; f = "mimetype"; zip.file(f, "application/vnd.oasis.opendocument.spreadsheet"); f = "content.xml"; zip.file(f, write_content_ods(wb, opts)); manifest.push([f, "text/xml"]); rdf.push([f, "ContentFile"]); f = "styles.xml"; zip.file(f, write_styles_ods(wb, opts)); manifest.push([f, "text/xml"]); rdf.push([f, "StylesFile"]); f = "manifest.rdf"; zip.file(f, write_rdf(rdf, opts)); manifest.push([f, "application/rdf+xml"]); f = "meta.xml"; zip.file(f, write_meta_ods(wb, opts)); manifest.push([f, "text/xml"]); rdf.push([f, "MetadataFile"]); f = "META-INF/manifest.xml"; zip.file(f, write_manifest(manifest, opts)); return zip } function write_obj_str(factory) { return function write_str(wb, o) { var idx = 0; for (var i = 0; i < wb.SheetNames.length; ++i) if (wb.SheetNames[i] == o.sheet) idx = i; if (idx == 0 && !!o.sheet && wb.SheetNames[0] != o.sheet) throw new Error("Sheet not found: " + o.sheet); return factory.from_sheet(wb.Sheets[wb.SheetNames[idx]], o, wb) } } var write_htm_str = write_obj_str(HTML_); var write_csv_str = write_obj_str({ from_sheet: sheet_to_csv }); var write_slk_str = write_obj_str(SYLK); var write_dif_str = write_obj_str(DIF); var write_prn_str = write_obj_str(PRN); var write_txt_str = write_obj_str({ from_sheet: sheet_to_txt }); function fix_opts_func(defaults) { return function fix_opts(opts) { for (var i = 0; i != defaults.length; ++i) { var d = defaults[i]; if (opts[d[0]] === undefined) opts[d[0]] = d[1]; if (d[2] === "n") opts[d[0]] = Number(opts[d[0]]) } } } var fix_read_opts = fix_opts_func([["cellNF", false], ["cellHTML", true], ["cellFormula", true], ["cellStyles", false], ["cellText", true], ["cellDates", false], ["sheetStubs", false], ["sheetRows", 0, "n"], ["bookDeps", false], ["bookSheets", false], ["bookProps", false], ["bookFiles", false], ["bookVBA", false], ["password", ""], ["WTF", false]]); var fix_write_opts = fix_opts_func([["cellDates", false], ["bookSST", false], ["bookType", "xlsx"], ["compression", false], ["WTF", false]]); function get_sheet_type(n) { if (RELS.WS.indexOf(n) > -1) return "sheet"; if (RELS.CS && n == RELS.CS) return "chart"; if (RELS.DS && n == RELS.DS) return "dialog"; if (RELS.MS && n == RELS.MS) return "macro"; if (!n || !n.length) return "sheet"; return n } function safe_parse_wbrels(wbrels, sheets) { if (!wbrels) return 0; try { wbrels = sheets.map(function pwbr(w) { if (!w.id) w.id = w.strRelID; return [w.name, wbrels["!id"][w.id].Target, get_sheet_type(wbrels["!id"][w.id].Type)] }) } catch (e) { return null } return !wbrels || wbrels.length === 0 ? null : wbrels } function safe_parse_sheet(zip, path, relsPath, sheet, sheetRels, sheets, stype, opts, wb, themes, styles) { try { sheetRels[sheet] = parse_rels(getzipstr(zip, relsPath, true), path); var data = getzipdata(zip, path); switch (stype) { case "sheet": sheets[sheet] = parse_ws(data, path, opts, sheetRels[sheet], wb, themes, styles); break; case "chart": var cs = parse_cs(data, path, opts, sheetRels[sheet], wb, themes, styles); sheets[sheet] = cs; if (!cs || !cs["!chart"]) break; var dfile = resolve_path(cs["!chart"].Target, path); var drelsp = get_rels_path(dfile); var draw = parse_drawing(getzipstr(zip, dfile, true), parse_rels(getzipstr(zip, drelsp, true), dfile)); var chartp = resolve_path(draw, dfile); var crelsp = get_rels_path(chartp); cs = parse_chart(getzipstr(zip, chartp, true), chartp, opts, parse_rels(getzipstr(zip, crelsp, true), chartp), wb, cs); break; case "macro": sheets[sheet] = parse_ms(data, path, opts, sheetRels[sheet], wb, themes, styles); break; case "dialog": sheets[sheet] = parse_ds(data, path, opts, sheetRels[sheet], wb, themes, styles); break; } } catch (e) { if (opts.WTF) throw e } } var nodirs = function nodirs(x) { return x.slice(-1) != "/" }; function parse_zip(zip, opts) {
        make_ssf(SSF); opts = opts || {}; fix_read_opts(opts);
        reset_cp(); if (safegetzipfile(zip, "META-INF/manifest.xml")) return parse_ods(zip, opts); if (safegetzipfile(zip, "objectdata.xml")) return parse_ods(zip, opts); var entries = keys(zip.files).filter(nodirs).sort(); var dir = parse_ct(getzipstr(zip, "[Content_Types].xml"), opts); var xlsb = false; var sheets, binname; if (dir.workbooks.length === 0) { binname = "xl/workbook.xml"; if (getzipdata(zip, binname, true)) dir.workbooks.push(binname) } if (dir.workbooks.length === 0) { binname = "xl/workbook.bin"; if (!getzipdata(zip, binname, true)) throw new Error("Could not find workbook"); dir.workbooks.push(binname); xlsb = true } if (dir.workbooks[0].slice(-3) == "bin") xlsb = true; if (xlsb) set_cp(1200); var themes = {}; var styles = {}; if (!opts.bookSheets && !opts.bookProps) { strs = []; if (dir.sst) strs = parse_sst(getzipdata(zip, dir.sst.replace(/^\//, "")), dir.sst, opts); if (opts.cellStyles && dir.themes.length) themes = parse_theme(getzipstr(zip, dir.themes[0].replace(/^\//, ""), true) || "", dir.themes[0], opts); if (dir.style) styles = parse_sty(getzipdata(zip, dir.style.replace(/^\//, "")), dir.style, themes, opts) } var wb = parse_wb(getzipdata(zip, dir.workbooks[0].replace(/^\//, "")), dir.workbooks[0], opts); var props = {}, propdata = ""; if (dir.coreprops.length !== 0) { propdata = getzipstr(zip, dir.coreprops[0].replace(/^\//, ""), true); if (propdata) props = parse_core_props(propdata); if (dir.extprops.length !== 0) { propdata = getzipstr(zip, dir.extprops[0].replace(/^\//, ""), true); if (propdata) parse_ext_props(propdata, props) } } var custprops = {}; if (!opts.bookSheets || opts.bookProps) { if (dir.custprops.length !== 0) { propdata = getzipstr(zip, dir.custprops[0].replace(/^\//, ""), true); if (propdata) custprops = parse_cust_props(propdata, opts) } } var out = {}; if (opts.bookSheets || opts.bookProps) { if (wb.Sheets) sheets = wb.Sheets.map(function pluck(x) { return x.name }); else if (props.Worksheets && props.SheetNames.length > 0) sheets = props.SheetNames; if (opts.bookProps) { out.Props = props; out.Custprops = custprops } if (opts.bookSheets && typeof sheets !== "undefined") out.SheetNames = sheets; if (opts.bookSheets ? out.SheetNames : opts.bookProps) return out } sheets = {}; var deps = {}; if (opts.bookDeps && dir.calcchain) deps = parse_cc(getzipdata(zip, dir.calcchain.replace(/^\//, "")), dir.calcchain, opts); var i = 0; var sheetRels = {}; var path, relsPath; { var wbsheets = wb.Sheets; props.Worksheets = wbsheets.length; props.SheetNames = []; for (var j = 0; j != wbsheets.length; ++j) { props.SheetNames[j] = wbsheets[j].name } } var wbext = xlsb ? "bin" : "xml"; var wbrelsfile = "xl/_rels/workbook." + wbext + ".rels"; var wbrels = parse_rels(getzipstr(zip, wbrelsfile, true), wbrelsfile); if (wbrels) wbrels = safe_parse_wbrels(wbrels, wb.Sheets); var nmode = getzipdata(zip, "xl/worksheets/sheet.xml", true) ? 1 : 0; for (i = 0; i != props.Worksheets; ++i) { var stype = "sheet"; if (wbrels && wbrels[i]) { path = "xl/" + wbrels[i][1].replace(/[\/]?xl\//, ""); stype = wbrels[i][2] } else { path = "xl/worksheets/sheet" + (i + 1 - nmode) + "." + wbext; path = path.replace(/sheet0\./, "sheet.") } relsPath = path.replace(/^(.*)(\/)([^\/]*)$/, "$1/_rels/$3.rels"); safe_parse_sheet(zip, path, relsPath, props.SheetNames[i], sheetRels, sheets, stype, opts, wb, themes, styles) } if (dir.comments) parse_comments(zip, dir.comments, sheets, sheetRels, opts); out = { Directory: dir, Workbook: wb, Props: props, Custprops: custprops, Deps: deps, Sheets: sheets, SheetNames: props.SheetNames, Strings: strs, Styles: styles, Themes: themes, SSF: SSF.get_table() }; if (opts.bookFiles) { out.keys = entries; out.files = zip.files } if (opts.bookVBA) { if (dir.vba.length > 0) out.vbaraw = getzipdata(zip, dir.vba[0].replace(/^\//, ""), true); else if (dir.defaults && dir.defaults.bin === "application/vnd.ms-office.vbaProject") out.vbaraw = getzipdata(zip, "xl/vbaProject.bin", true) } return out
    } function parse_xlsxcfb(cfb, opts) { var f = "Version"; var data = cfb.find(f); if (!data) throw new Error("ECMA-376 Encrypted file missing " + f); var version = parse_DataSpaceVersionInfo(data.content); f = "DataSpaceMap"; data = cfb.find(f); if (!data) throw new Error("ECMA-376 Encrypted file missing " + f); var dsm = parse_DataSpaceMap(data.content); if (dsm.length != 1 || dsm[0].comps.length != 1 || dsm[0].comps[0].t != 0 || dsm[0].name != "StrongEncryptionDataSpace" || dsm[0].comps[0].v != "EncryptedPackage") throw new Error("ECMA-376 Encrypted file bad " + f); f = "StrongEncryptionDataSpace"; data = cfb.find(f); if (!data) throw new Error("ECMA-376 Encrypted file missing " + f); var seds = parse_DataSpaceDefinition(data.content); if (seds.length != 1 || seds[0] != "StrongEncryptionTransform") throw new Error("ECMA-376 Encrypted file bad " + f); f = "!Primary"; data = cfb.find(f); if (!data) throw new Error("ECMA-376 Encrypted file missing " + f); var hdr = parse_Primary(data.content); f = "EncryptionInfo"; data = cfb.find(f); if (!data) throw new Error("ECMA-376 Encrypted file missing " + f); var einfo = parse_EncryptionInfo(data.content); throw new Error("File is password-protected") } function write_zip(wb, opts) { _shapeid = 1024; if (opts.bookType == "ods") return write_ods(wb, opts); if (wb && !wb.SSF) { wb.SSF = SSF.get_table() } if (wb && wb.SSF) { make_ssf(SSF); SSF.load_table(wb.SSF); opts.revssf = evert_num(wb.SSF); opts.revssf[wb.SSF[65535]] = 0; opts.ssf = wb.SSF } opts.rels = {}; opts.wbrels = {}; opts.Strings = []; opts.Strings.Count = 0; opts.Strings.Unique = 0; var wbext = opts.bookType == "xlsb" ? "bin" : "xml"; var vbafmt = opts.bookType == "xlsb" || opts.bookType == "xlsm"; var ct = { workbooks: [], sheets: [], charts: [], dialogs: [], macros: [], rels: [], strs: [], comments: [], coreprops: [], extprops: [], custprops: [], themes: [], styles: [], calcchains: [], vba: [], drawings: [], TODO: [], xmlns: "" }; fix_write_opts(opts = opts || {}); var zip = new jszip; var f = "", rId = 0; opts.cellXfs = []; get_cell_style(opts.cellXfs, {}, { revssf: { General: 0 } }); if (!wb.Props) wb.Props = {}; f = "docProps/core.xml"; zip.file(f, write_core_props(wb.Props, opts)); ct.coreprops.push(f); add_rels(opts.rels, 2, f, RELS.CORE_PROPS); f = "docProps/app.xml"; if (wb.Props && wb.Props.SheetNames) { } else if (!wb.Workbook || !wb.Workbook.Sheets) wb.Props.SheetNames = wb.SheetNames; else wb.Props.SheetNames = wb.SheetNames.map(function (x, i) { return [(wb.Workbook.Sheets[i] || {}).Hidden != 2, x] }).filter(function (x) { return x[0] }).map(function (x) { return x[1] }); wb.Props.Worksheets = wb.Props.SheetNames.length; zip.file(f, write_ext_props(wb.Props, opts)); ct.extprops.push(f); add_rels(opts.rels, 3, f, RELS.EXT_PROPS); if (wb.Custprops !== wb.Props && keys(wb.Custprops || {}).length > 0) { f = "docProps/custom.xml"; zip.file(f, write_cust_props(wb.Custprops, opts)); ct.custprops.push(f); add_rels(opts.rels, 4, f, RELS.CUST_PROPS) } f = "xl/workbook." + wbext; zip.file(f, write_wb(wb, f, opts)); ct.workbooks.push(f); add_rels(opts.rels, 1, f, RELS.WB); for (rId = 1; rId <= wb.SheetNames.length; ++rId) { var wsrels = { "!id": {} }; var ws = wb.Sheets[wb.SheetNames[rId - 1]]; var _type = (ws || {})["!type"] || "sheet"; switch (_type) { case "chart":; default: f = "xl/worksheets/sheet" + rId + "." + wbext; zip.file(f, write_ws(rId - 1, f, opts, wb, wsrels)); ct.sheets.push(f); add_rels(opts.wbrels, -1, "worksheets/sheet" + rId + "." + wbext, RELS.WS[0]); } if (ws) { var comments = ws["!comments"]; if (comments && comments.length > 0) { var cf = "xl/comments" + rId + "." + wbext; zip.file(cf, write_cmnt(comments, cf, opts)); ct.comments.push(cf); add_rels(wsrels, -1, "../comments" + rId + "." + wbext, RELS.CMNT) } if (ws["!legacy"]) { zip.file("xl/drawings/vmlDrawing" + rId + ".vml", write_comments_vml(rId, ws["!comments"])) } delete ws["!comments"]; delete ws["!legacy"] } if (wsrels["!id"].rId1) zip.file(get_rels_path(f), write_rels(wsrels)) } if (opts.Strings != null && opts.Strings.length > 0) { f = "xl/sharedStrings." + wbext; zip.file(f, write_sst(opts.Strings, f, opts)); ct.strs.push(f); add_rels(opts.wbrels, -1, "sharedStrings." + wbext, RELS.SST) } f = "xl/theme/theme1.xml"; zip.file(f, write_theme(wb.Themes, opts)); ct.themes.push(f); add_rels(opts.wbrels, -1, "theme/theme1.xml", RELS.THEME); f = "xl/styles." + wbext; zip.file(f, write_sty(wb, f, opts)); ct.styles.push(f); add_rels(opts.wbrels, -1, "styles." + wbext, RELS.STY); if (wb.vbaraw && vbafmt) { f = "xl/vbaProject.bin"; zip.file(f, wb.vbaraw); ct.vba.push(f); add_rels(opts.wbrels, -1, "vbaProject.bin", RELS.VBA) } zip.file("[Content_Types].xml", write_ct(ct, opts)); zip.file("_rels/.rels", write_rels(opts.rels)); zip.file("xl/_rels/workbook." + wbext + ".rels", write_rels(opts.wbrels)); delete opts.revssf; delete opts.ssf; return zip } function firstbyte(f, o) { var x = ""; switch ((o || {}).type || "base64") { case "buffer": return [f[0], f[1], f[2], f[3]]; case "base64": x = Base64.decode(f.substr(0, 24)); break; case "binary": x = f; break; case "array": return [f[0], f[1], f[2], f[3]]; default: throw new Error("Unrecognized type " + (o ? o.type : "undefined")); } return [x.charCodeAt(0), x.charCodeAt(1), x.charCodeAt(2), x.charCodeAt(3)] } function read_cfb(cfb, opts) { if (cfb.find("EncryptedPackage")) return parse_xlsxcfb(cfb, opts); return parse_xlscfb(cfb, opts) } function read_zip(data, opts) { var zip, d = data; var o = opts || {}; if (!o.type) o.type = has_buf && Buffer.isBuffer(data) ? "buffer" : "base64"; switch (o.type) { case "base64": zip = new jszip(d, { base64: true }); break; case "binary":; case "array": zip = new jszip(d, { base64: false }); break; case "buffer": zip = new jszip(d); break; default: throw new Error("Unrecognized type " + o.type); } return parse_zip(zip, o) } function read_utf16(data, o) { var d = data; if (o.type == "base64") d = Base64.decode(d); d = cptable.utils.decode(1200, d.slice(2)); o.type = "binary"; if (d.charCodeAt(0) == 60) return parse_xlml(d, o); return PRN.to_workbook(d, o) } function readSync(data, opts) { var zip, d = data, n = [0]; var o = opts || {}; _ssfopts = {}; if (o.dateNF) _ssfopts.dateNF = o.dateNF; if (!o.type) o.type = has_buf && Buffer.isBuffer(data) ? "buffer" : "base64"; if (o.type == "file") { o.type = "buffer"; d = _fs.readFileSync(data) } switch ((n = firstbyte(d, o))[0]) { case 208: return read_cfb(CFB.read(d, o), o); case 9: return parse_xlscfb(s2a(o.type === "base64" ? Base64.decode(d) : d), o); case 60: return parse_xlml(d, o); case 73: if (n[1] == 68) return read_wb_ID(d, o); break; case 84: if (n[1] == 65 && n[2] == 66 && n[3] == 76) return DIF.to_workbook(d, o); break; case 80: if (n[1] == 75 && n[2] < 32 && n[3] < 32) return read_zip(d, o); break; case 239: return n[3] == 60 ? parse_xlml(d, o) : PRN.to_workbook(d, o); case 255: if (n[1] == 254) { return read_utf16(d, o) } break; case 0: if (n[1] == 0 && n[2] >= 2 && n[3] == 0) return WK_.to_workbook(d, o); break; case 3:; case 131:; case 139: return DBF.to_workbook(d, o); } if (n[2] <= 12 && n[3] <= 31) return DBF.to_workbook(d, o); if (32 > n[0] || n[0] > 127) throw new Error("Unsupported file " + n.join("|")); return PRN.to_workbook(d, o) } function readFileSync(filename, opts) { var o = opts || {}; o.type = "file"; return readSync(filename, o) } function write_zip_type(wb, opts) { var o = opts || {}; var z = write_zip(wb, o); var oopts = {}; if (o.compression) oopts.compression = "DEFLATE"; switch (o.type) { case "base64": oopts.type = "base64"; break; case "binary": oopts.type = "string"; break; case "buffer":; case "file": oopts.type = "nodebuffer"; break; default: throw new Error("Unrecognized type " + o.type); } if (o.type === "file") return _fs.writeFileSync(o.file, z.generate(oopts)); return z.generate(oopts) } function write_bstr_type(out, opts) { switch (opts.type) { case "base64": return Base64.encode(out); case "binary": return out; case "file": return _fs.writeFileSync(opts.file, out, "binary"); case "buffer": { if (has_buf) return new Buffer(out, "utf8"); else return out.split("").map(function (c) { return c.charCodeAt(0) }) }; } throw new Error("Unrecognized type " + opts.type) } function write_string_type(out, opts) { switch (opts.type) { case "base64": return Base64.encode(out); case "binary": return out; case "file": return _fs.writeFileSync(opts.file, out, "utf8"); case "buffer": { if (has_buf) return new Buffer(out, "utf8"); else return out.split("").map(function (c) { return c.charCodeAt(0) }) }; } throw new Error("Unrecognized type " + opts.type) } function write_binary_type(out, opts) { switch (opts.type) { case "base64":; case "binary": var bstr = ""; for (var i = 0; i < out.length; ++i) bstr += String.fromCharCode(out[i]); return opts.type == "base64" ? Base64.encode(bstr) : bstr; case "file": return _fs.writeFileSync(opts.file, out); case "buffer": return out; default: throw new Error("Unrecognized type " + opts.type); } } function writeSync(wb, opts) { check_wb(wb); var o = opts || {}; switch (o.bookType || "xlsb") { case "xml":; case "xlml": return write_string_type(write_xlml(wb, o), o); case "slk":; case "sylk": return write_string_type(write_slk_str(wb, o), o); case "html": return write_string_type(write_htm_str(wb, o), o); case "txt": return write_bstr_type(write_txt_str(wb, o), o); case "csv": return write_string_type(write_csv_str(wb, o), o); case "dif": return write_string_type(write_dif_str(wb, o), o); case "prn": return write_string_type(write_prn_str(wb, o), o); case "fods": return write_string_type(write_ods(wb, o), o); case "biff2": return write_binary_type(write_biff_buf(wb, o), o); case "xlsx":; case "xlsm":; case "xlsb":; case "ods": return write_zip_type(wb, o); default: throw new Error("Unrecognized bookType |" + o.bookType + "|"); } } function resolve_book_type(o) { if (!o.bookType) switch (o.file.slice(o.file.lastIndexOf(".")).toLowerCase()) { case ".xlsx": o.bookType = "xlsx"; break; case ".xlsm": o.bookType = "xlsm"; break; case ".xlsb": o.bookType = "xlsb"; break; case ".fods": o.bookType = "fods"; break; case ".xlml": o.bookType = "xlml"; break; case ".sylk": o.bookType = "sylk"; break; case ".html": o.bookType = "html"; break; case ".xls": o.bookType = "biff2"; break; case ".xml": o.bookType = "xml"; break; case ".ods": o.bookType = "ods"; break; case ".csv": o.bookType = "csv"; break; case ".txt": o.bookType = "txt"; break; case ".dif": o.bookType = "dif"; break; case ".prn": o.bookType = "prn"; break; case ".slk": o.bookType = "sylk"; break; case ".htm": o.bookType = "html"; break; } } function writeFileSync(wb, filename, opts) { var o = opts || {}; o.type = "file"; o.file = filename; resolve_book_type(o); return writeSync(wb, o) } function writeFileAsync(filename, wb, opts, cb) { var o = opts || {}; o.type = "file"; o.file = filename; resolve_book_type(o); o.type = "buffer"; var _cb = cb; if (!(_cb instanceof Function)) _cb = opts; return _fs.writeFile(filename, writeSync(wb, o), _cb) } function sheet_to_json(sheet, opts) { if (sheet == null || sheet["!ref"] == null) return []; var val = { t: "n", v: 0 }, header = 0, offset = 1, hdr = [], isempty = true, v = 0, vv = ""; var r = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } }; var o = opts != null ? opts : {}; var raw = o.raw; var defval = o.defval; var range = o.range != null ? o.range : sheet["!ref"]; if (o.header === 1) header = 1; else if (o.header === "A") header = 2; else if (Array.isArray(o.header)) header = 3; switch (typeof range) { case "string": r = safe_decode_range(range); break; case "number": r = safe_decode_range(sheet["!ref"]); r.s.r = range; break; default: r = range; } if (header > 0) offset = 0; var rr = encode_row(r.s.r); var cols = new Array(r.e.c - r.s.c + 1); var out = new Array(r.e.r - r.s.r - offset + 1); var outi = 0, counter = 0; var dense = Array.isArray(sheet); var R = r.s.r, C = 0, CC = 0; if (dense && !sheet[R]) sheet[R] = []; for (C = r.s.c; C <= r.e.c; ++C) { cols[C] = encode_col(C); val = dense ? sheet[R][C] : sheet[cols[C] + rr]; switch (header) { case 1: hdr[C] = C - r.s.c; break; case 2: hdr[C] = cols[C]; break; case 3: hdr[C] = o.header[C - r.s.c]; break; default: if (val == null) continue; vv = v = format_cell(val, null, o); counter = 0; for (CC = 0; CC < hdr.length; ++CC) if (hdr[CC] == vv) vv = v + "_" + ++counter; hdr[C] = vv; } } var row = header === 1 ? [] : {}; for (R = r.s.r + offset; R <= r.e.r; ++R) { rr = encode_row(R); isempty = true; if (header === 1) row = []; else { row = {}; if (Object.defineProperty) try { Object.defineProperty(row, "__rowNum__", { value: R, enumerable: false }) } catch (e) { row.__rowNum__ = R } else row.__rowNum__ = R } if (!dense || sheet[R]) for (C = r.s.c; C <= r.e.c; ++C) { val = dense ? sheet[R][C] : sheet[cols[C] + rr]; if (val === undefined || val.t === undefined) { if (defval === undefined) continue; if (hdr[C] != null) { row[hdr[C]] = defval; isempty = false } continue } v = val.v; switch (val.t) { case "z": if (v == null) break; continue; case "e": continue; case "s":; case "d":; case "b":; case "n": break; default: throw new Error("unrecognized type " + val.t); } if (hdr[C] != null) { if (v == null) { if (defval !== undefined) row[hdr[C]] = defval; else if (raw && v === null) row[hdr[C]] = null; else continue } else { row[hdr[C]] = raw ? v : format_cell(val, v, o) } isempty = false } } if (isempty === false || (header === 1 ? o.blankrows !== false : !!o.blankrows)) out[outi++] = row } out.length = outi; return out } var qreg = /"/g; function make_csv_row(sheet, r, R, cols, fs, rs, FS, o) { var isempty = true; var row = "", txt = "", rr = encode_row(R); for (var C = r.s.c; C <= r.e.c; ++C) { var val = o.dense ? (sheet[R] || [])[C] : sheet[cols[C] + rr]; if (val == null) txt = ""; else if (val.v != null) { isempty = false; txt = "" + format_cell(val, null, o); for (var i = 0, cc = 0; i !== txt.length; ++i) if ((cc = txt.charCodeAt(i)) === fs || cc === rs || cc === 34) { txt = '"' + txt.replace(qreg, '""') + '"'; break } if (txt == "ID") txt = '"ID"' } else if (val.f != null && !val.F) { isempty = false; txt = "=" + val.f; if (txt.indexOf(",") >= 0) txt = '"' + txt.replace(qreg, '""') + '"' } else txt = ""; row += (C === r.s.c ? "" : FS) + txt } if (o.blankrows === false && isempty) return null; return row } function sheet_to_csv(sheet, opts) { var out = []; var o = opts == null ? {} : opts; if (sheet == null || sheet["!ref"] == null) return ""; var r = safe_decode_range(sheet["!ref"]); var FS = o.FS !== undefined ? o.FS : ",", fs = FS.charCodeAt(0); var RS = o.RS !== undefined ? o.RS : "\n", rs = RS.charCodeAt(0); var endregex = new RegExp((FS == "|" ? "\\|" : FS) + "+$"); var row = "", cols = []; o.dense = Array.isArray(sheet); for (var C = r.s.c; C <= r.e.c; ++C) cols[C] = encode_col(C); for (var R = r.s.r; R <= r.e.r; ++R) { row = make_csv_row(sheet, r, R, cols, fs, rs, FS, o); if (row == null) { continue } if (o.strip) row = row.replace(endregex, ""); out.push(row + RS) } delete o.dense; return out.join("") } function sheet_to_txt(sheet, opts) { if (!opts) opts = {}; opts.FS = "\t"; opts.RS = "\n"; var s = sheet_to_csv(sheet, opts); if (typeof cptable == "undefined") return s; var o = cptable.utils.encode(1200, s); return "ÿþ" + o } function sheet_to_formulae(sheet) { var y = "", x, val = ""; if (sheet == null || sheet["!ref"] == null) return []; var r = safe_decode_range(sheet["!ref"]), rr = "", cols = [], C; var cmds = []; var dense = Array.isArray(sheet); for (C = r.s.c; C <= r.e.c; ++C) cols[C] = encode_col(C); for (var R = r.s.r; R <= r.e.r; ++R) { rr = encode_row(R); for (C = r.s.c; C <= r.e.c; ++C) { y = cols[C] + rr; x = dense ? (sheet[R] || [])[C] : sheet[y]; val = ""; if (x === undefined) continue; else if (x.F != null) { y = x.F; if (!x.f) continue; val = x.f; if (y.indexOf(":") == -1) y = y + ":" + y } if (x.f != null) val = x.f; else if (x.t == "z") continue; else if (x.t == "n" && x.v != null) val = "" + x.v; else if (x.t == "b") val = x.v ? "TRUE" : "FALSE"; else if (x.w !== undefined) val = "'" + x.w; else if (x.v === undefined) continue; else if (x.t == "s") val = "'" + x.v; else val = "" + x.v; cmds[cmds.length] = y + "=" + val } } return cmds } function json_to_sheet(js, opts) { var o = opts || {}; var ws = {}; var cell; var range = { s: { c: 0, r: 0 }, e: { c: 0, r: js.length } }; var hdr = o.header || [], C = 0; for (var R = 0; R != js.length; ++R) { Object.keys(js[R]).filter(function (x) { return js[R].hasOwnProperty(x) }).forEach(function (k) { if ((C = hdr.indexOf(k)) == -1) hdr[C = hdr.length] = k; var v = js[R][k]; var t = "z"; var z = ""; if (typeof v == "number") t = "n"; else if (typeof v == "boolean") t = "b"; else if (typeof v == "string") t = "s"; else if (v instanceof Date) { t = "d"; if (!o.cellDates) { t = "n"; v = datenum(v) } z = o.dateNF || SSF._table[14] } ws[encode_cell({ c: C, r: R + 1 })] = cell = { t: t, v: v }; if (z) cell.z = z }) } range.e.c = hdr.length - 1; for (C = 0; C < hdr.length; ++C) ws[encode_col(C) + "1"] = { t: "s", v: hdr[C] }; ws["!ref"] = encode_range(range); return ws } var utils = { encode_col: encode_col, encode_row: encode_row, encode_cell: encode_cell, encode_range: encode_range, decode_col: decode_col, decode_row: decode_row, split_cell: split_cell, decode_cell: decode_cell, decode_range: decode_range, format_cell: format_cell, get_formulae: sheet_to_formulae, make_csv: sheet_to_csv, make_json: sheet_to_json, make_formulae: sheet_to_formulae, aoa_to_sheet: aoa_to_sheet, json_to_sheet: json_to_sheet, table_to_sheet: parse_dom_table, table_to_book: table_to_book, sheet_to_csv: sheet_to_csv, sheet_to_json: sheet_to_json, sheet_to_html: HTML_.from_sheet, sheet_to_formulae: sheet_to_formulae, sheet_to_row_object_array: sheet_to_json }; (function (utils) { utils.consts = utils.consts || {}; function add_consts(R) { R.forEach(function (a) { utils.consts[a[0]] = a[1] }) } function get_default(x, y, z) { return x[y] != null ? x[y] : x[y] = z } function ws_get_cell_stub(ws, R, C) { if (typeof R == "string") return ws[R] || (ws[R] = { t: "z" }); if (typeof R != "number") return ws_get_cell_stub(ws, encode_cell(R)); return ws_get_cell_stub(ws, encode_cell({ r: R, c: C || 0 })) } function wb_sheet_idx(wb, sh) { if (typeof sh == "number") { if (sh >= 0 && wb.SheetNames.length > sh) return sh; throw new Error("Cannot find sheet # " + sh) } else if (typeof sh == "string") { var idx = wb.SheetNames.indexOf(sh); if (idx > -1) return idx; throw new Error("Cannot find sheet name |" + sh + "|") } else throw new Error("Cannot find sheet |" + sh + "|") } utils.book_new = function () { return { SheetNames: [], Sheets: {} } }; utils.book_append_sheet = function (wb, ws, name) { if (!name) for (var i = 1; i <= 65535; ++i) if (wb.SheetNames.indexOf(name = "Sheet" + i) == -1) break; if (!name) throw new Error("Too many worksheets"); check_ws_name(name); if (wb.SheetNames.indexOf(name) >= 0) throw new Error("Worksheet with name |" + name + "| already exists!"); wb.SheetNames.push(name); wb.Sheets[name] = ws }; utils.book_set_sheet_visibility = function (wb, sh, vis) { get_default(wb, "Workbook", {}); get_default(wb.Workbook, "Sheets", []); var idx = wb_sheet_idx(wb, sh); get_default(wb.Workbook.Sheets, idx, {}); switch (vis) { case 0:; case 1:; case 2: break; default: throw new Error("Bad sheet visibility setting " + vis); } wb.Workbook.Sheets[idx].Hidden = vis }; add_consts([["SHEET_VISIBLE", 0], ["SHEET_HIDDEN", 1], ["SHEET_VERY_HIDDEN", 2]]); utils.cell_set_number_format = function (cell, fmt) { cell.z = fmt; return cell }; utils.cell_set_hyperlink = function (cell, target, tooltip) { if (!target) { delete cell.l } else { cell.l = { Target: target }; if (tooltip) cell.l.Tooltip = tooltip } return cell }; utils.cell_add_comment = function (cell, text, author) { if (!cell.c) cell.c = []; cell.c.push({ t: text, a: author || "SheetJS" }) }; utils.sheet_set_array_formula = function (ws, range, formula) { var rng = typeof range != "string" ? range : safe_decode_range(range); var rngstr = typeof range == "string" ? range : encode_range(range); for (var R = rng.s.r; R <= rng.e.r; ++R) for (var C = rng.s.c; C <= rng.e.c; ++C) { var cell = ws_get_cell_stub(ws, R, C); cell.t = "n"; cell.F = rngstr; delete cell.v; if (R == rng.s.r && C == rng.s.c) cell.f = formula } return ws }; return utils })(utils); if (has_buf && typeof require != "undefined") (function () { var Readable = require("stream").Readable; var write_csv_stream = function (sheet, opts) { var stream = Readable(); var out = ""; var o = opts == null ? {} : opts; if (sheet == null || sheet["!ref"] == null) { stream.push(null); return stream } var r = safe_decode_range(sheet["!ref"]); var FS = o.FS !== undefined ? o.FS : ",", fs = FS.charCodeAt(0); var RS = o.RS !== undefined ? o.RS : "\n", rs = RS.charCodeAt(0); var endregex = new RegExp((FS == "|" ? "\\|" : FS) + "+$"); var row = "", cols = []; o.dense = Array.isArray(sheet); for (var C = r.s.c; C <= r.e.c; ++C) cols[C] = encode_col(C); var R = r.s.r; stream._read = function () { if (R > r.e.r) return stream.push(null); while (R <= r.e.r) { row = make_csv_row(sheet, r, R, cols, fs, rs, FS, o); ++R; if (row != null) { if (o.strip) row = row.replace(endregex, ""); stream.push(row + RS); break } } }; return stream }; var write_html_stream = function (ws, opts) { var stream = Readable(); var o = opts || {}; var header = o.header != null ? o.header : HTML_.BEGIN; var footer = o.footer != null ? o.footer : HTML_.END; stream.push(header); var r = decode_range(ws["!ref"]); o.dense = Array.isArray(ws); stream.push(HTML_._preamble(ws, r, o)); var R = r.s.r; var end = false; stream._read = function () { if (R > r.e.r) { if (!end) { end = true; stream.push("</table>" + footer) } return stream.push(null) } while (R <= r.e.r) { stream.push(HTML_._row(ws, r, R, o)); ++R; break } }; return stream }; XLSX.stream = { to_html: write_html_stream, to_csv: write_csv_stream } })(); XLSX.parse_xlscfb = parse_xlscfb; XLSX.parse_ods = parse_ods; XLSX.parse_fods = parse_fods; XLSX.write_ods = write_ods; XLSX.parse_zip = parse_zip; XLSX.read = readSync; XLSX.readFile = readFileSync; XLSX.readFileSync = readFileSync; XLSX.write = writeSync; XLSX.writeFile = writeFileSync; XLSX.writeFileSync = writeFileSync; XLSX.writeFileAsync = writeFileAsync; XLSX.utils = utils; XLSX.SSF = SSF
})(typeof exports !== "undefined" ? exports : XLSX); var XLS = XLSX; var ODS = XLSX;

/** @license
 * DHTML Snowstorm! JavaScript-based Snow for web pages
 * --------------------------------------------------------
 * Version 1.43.20111201 (Previous rev: 1.42.20111120)
 * Copyright (c) 2007, Scott Schiller. All rights reserved.
 * Code provided under the BSD License:
 * http://schillmania.com/projects/snowstorm/license.txt
 */

/*global window, document, navigator, clearInterval, setInterval */
/*jslint white: false, onevar: true, plusplus: false, undef: true, nomen: true, eqeqeq: true, bitwise: true, regexp: true, newcap: true, immed: true */

var snowStorm = (function (window, document) {

    // --- common properties ---

    this.autoStart = false;          // Whether the snow should start automatically or not.
    this.flakesMax = 80;           // Limit total amount of snow made (falling + sticking)
    this.flakesMaxActive = 80;      // Limit amount of snow falling at once (less = lower CPU use)
    this.animationInterval = 40;    // Theoretical "miliseconds per frame" measurement. 20 = fast + smooth, but high CPU use. 50 = more conservative, but slower
    this.excludeMobile = true;      // Snow is likely to be bad news for mobile phones' CPUs (and batteries.) By default, be nice.
    this.flakeBottom = null;        // Integer for Y axis snow limit, 0 or null for "full-screen" snow effect
    this.followMouse = false;        // Snow movement can respond to the user's mouse
    this.snowColor = '#fff';        // Don't eat (or use?) yellow snow.
    this.snowCharacter = '&bull;';  // &bull; = bullet, &middot; is square on some systems etc.
    this.snowStick = false;          // Whether or not snow should "stick" at the bottom. When off, will never collect.
    this.targetElement = null;      // element which snow will be appended to (null = document.body) - can be an element ID eg. 'myDiv', or a DOM node reference
    this.useMeltEffect = true;      // When recycling fallen snow (or rarely, when falling), have it "melt" and fade out if browser supports it
    this.useTwinkleEffect = false;  // Allow snow to randomly "flicker" in and out of view while falling
    this.usePositionFixed = false;  // true = snow does not shift vertically when scrolling. May increase CPU load, disabled by default - if enabled, used only where supported

    // --- less-used bits ---

    this.freezeOnBlur = true;       // Only snow when the window is in focus (foreground.) Saves CPU.
    this.flakeLeftOffset = 0;       // Left margin/gutter space on edge of container (eg. browser window.) Bump up these values if seeing horizontal scrollbars.
    this.flakeRightOffset = 0;      // Right margin/gutter space on edge of container
    this.flakeWidth = 5;            // Max pixel width reserved for snow element
    this.flakeHeight = 5;           // Max pixel height reserved for snow element
    this.vMaxX = 3;                 // Maximum X velocity range for snow
    this.vMaxY = 4;                 // Maximum Y velocity range for snow
    this.zIndex = 100000;                // CSS stacking order applied to each snowflake

    // --- End of user section ---

    var s = this, storm = this, i,
    // UA sniffing and backCompat rendering mode checks for fixed position, etc.
    isIE = navigator.userAgent.match(/msie/i),
    isIE6 = navigator.userAgent.match(/msie 6/i),
    isWin98 = navigator.appVersion.match(/windows 98/i),
    isMobile = navigator.userAgent.match(/mobile|opera m(ob|in)/i),
    isBackCompatIE = (isIE && document.compatMode === 'BackCompat'),
    noFixed = (isMobile || isBackCompatIE || isIE6),
    screenX = null, screenX2 = null, screenY = null, scrollY = null, vRndX = null, vRndY = null,
    windOffset = 1,
    windMultiplier = 2,
    flakeTypes = 6,
    fixedForEverything = false,
    opacitySupported = (function () {
        try {
            document.createElement('div').style.opacity = '0.5';
        } catch (e) {
            return false;
        }
        return true;
    }()),
    didInit = false,
    docFrag = document.createDocumentFragment();

    this.timers = [];
    this.flakes = [];
    this.disabled = false;
    this.active = false;
    this.meltFrameCount = 20;
    this.meltFrames = [];

    this.events = (function () {

        var old = (!window.addEventListener && window.attachEvent), slice = Array.prototype.slice,
        evt = {
            add: (old ? 'attachEvent' : 'addEventListener'),
            remove: (old ? 'detachEvent' : 'removeEventListener')
        };

        function getArgs(oArgs) {
            var args = slice.call(oArgs), len = args.length;
            if (old) {
                args[1] = 'on' + args[1]; // prefix
                if (len > 3) {
                    args.pop(); // no capture
                }
            } else if (len === 3) {
                args.push(false);
            }
            return args;
        }

        function apply(args, sType) {
            var element = args.shift(),
                method = [evt[sType]];
            if (old) {
                element[method](args[0], args[1]);
            } else {
                element[method].apply(element, args);
            }
        }

        function addEvent() {
            apply(getArgs(arguments), 'add');
        }

        function removeEvent() {
            apply(getArgs(arguments), 'remove');
        }

        return {
            add: addEvent,
            remove: removeEvent
        };

    }());

    function rnd(n, min) {
        if (isNaN(min)) {
            min = 0;
        }
        return (Math.random() * n) + min;
    }

    function plusMinus(n) {
        return (parseInt(rnd(2), 10) === 1 ? n * -1 : n);
    }

    this.randomizeWind = function () {
        var i;
        vRndX = plusMinus(rnd(s.vMaxX, 0.2));
        vRndY = rnd(s.vMaxY, 0.2);
        if (this.flakes) {
            for (i = 0; i < this.flakes.length; i++) {
                if (this.flakes[i].active) {
                    this.flakes[i].setVelocities();
                }
            }
        }
    };

    this.scrollHandler = function () {
        var i;
        // "attach" snowflakes to bottom of window if no absolute bottom value was given
        scrollY = (s.flakeBottom ? 0 : parseInt(window.scrollY || document.documentElement.scrollTop || document.body.scrollTop, 10));
        if (isNaN(scrollY)) {
            scrollY = 0; // Netscape 6 scroll fix
        }
        if (!fixedForEverything && !s.flakeBottom && s.flakes) {
            for (i = s.flakes.length; i--;) {
                if (s.flakes[i].active === 0) {
                    s.flakes[i].stick();
                }
            }
        }
    };

    this.resizeHandler = function () {
        if (window.innerWidth || window.innerHeight) {
            screenX = window.innerWidth - 16 - s.flakeRightOffset;
            screenY = (s.flakeBottom ? s.flakeBottom : window.innerHeight);
        } else {
            screenX = (document.documentElement.clientWidth || document.body.clientWidth || document.body.scrollWidth) - (!isIE ? 8 : 0) - s.flakeRightOffset;
            screenY = s.flakeBottom ? s.flakeBottom : (document.documentElement.clientHeight || document.body.clientHeight || document.body.scrollHeight);
        }
        screenX2 = parseInt(screenX / 2, 10);
    };

    this.resizeHandlerAlt = function () {
        screenX = s.targetElement.offsetLeft + s.targetElement.offsetWidth - s.flakeRightOffset;
        screenY = s.flakeBottom ? s.flakeBottom : s.targetElement.offsetTop + s.targetElement.offsetHeight;
        screenX2 = parseInt(screenX / 2, 10);
    };

    this.freeze = function () {
        // pause animation
        var i;
        if (!s.disabled) {
            s.disabled = 1;
        } else {
            return false;
        }
        for (i = s.timers.length; i--;) {
            clearInterval(s.timers[i]);
        }
    };

    this.resume = function () {
        if (s.disabled) {
            s.disabled = 0;
        } else {
            return false;
        }
        s.timerInit();
    };

    this.toggleSnow = function () {
        if (!s.flakes.length) {
            // first run
            s.start();
        } else {
            s.active = !s.active;
            if (s.active) {
                s.show();
                s.resume();
            } else {
                s.stop();
                s.freeze();
            }
        }
    };

    this.stop = function () {
        var i;
        this.freeze();
        for (i = this.flakes.length; i--;) {
            this.flakes[i].o.style.display = 'none';
        }
        s.events.remove(window, 'scroll', s.scrollHandler);
        s.events.remove(window, 'resize', s.resizeHandler);
        if (s.freezeOnBlur) {
            if (isIE) {
                s.events.remove(document, 'focusout', s.freeze);
                s.events.remove(document, 'focusin', s.resume);
            } else {
                s.events.remove(window, 'blur', s.freeze);
                s.events.remove(window, 'focus', s.resume);
            }
        }
    };

    this.show = function () {
        var i;
        for (i = this.flakes.length; i--;) {
            this.flakes[i].o.style.display = 'block';
        }
    };

    this.SnowFlake = function (parent, type, x, y) {
        var s = this, storm = parent;
        this.type = type;
        this.x = x || parseInt(rnd(screenX - 20), 10);
        this.y = (!isNaN(y) ? y : -rnd(screenY) - 12);
        this.vX = null;
        this.vY = null;
        this.vAmpTypes = [1, 1.2, 1.4, 1.6, 1.8]; // "amplification" for vX/vY (based on flake size/type)
        this.vAmp = this.vAmpTypes[this.type];
        this.melting = false;
        this.meltFrameCount = storm.meltFrameCount;
        this.meltFrames = storm.meltFrames;
        this.meltFrame = 0;
        this.twinkleFrame = 0;
        this.active = 1;
        this.fontSize = (10 + (this.type / 5) * 10);
        this.o = document.createElement('div');
        this.o.innerHTML = storm.snowCharacter;
        this.o.style.color = storm.snowColor;
        this.o.style.position = (fixedForEverything ? 'fixed' : 'absolute');
        this.o.style.width = storm.flakeWidth + 'px';
        this.o.style.height = storm.flakeHeight + 'px';
        this.o.style.fontFamily = 'arial,verdana';
        this.o.style.cursor = 'default';
        this.o.style.overflow = 'hidden';
        this.o.style.fontWeight = 'normal';
        this.o.style.zIndex = storm.zIndex;
        docFrag.appendChild(this.o);

        this.refresh = function () {
            if (isNaN(s.x) || isNaN(s.y)) {
                // safety check
                return false;
            }
            s.o.style.left = s.x + 'px';
            s.o.style.top = s.y + 'px';
        };

        this.stick = function () {
            if (noFixed || (storm.targetElement !== document.documentElement && storm.targetElement !== document.body)) {
                s.o.style.top = (screenY + scrollY - storm.flakeHeight) + 'px';
            } else if (storm.flakeBottom) {
                s.o.style.top = storm.flakeBottom + 'px';
            } else {
                s.o.style.display = 'none';
                s.o.style.top = 'auto';
                s.o.style.bottom = '0px';
                s.o.style.position = 'fixed';
                s.o.style.display = 'block';
            }
        };

        this.vCheck = function () {
            if (s.vX >= 0 && s.vX < 0.2) {
                s.vX = 0.2;
            } else if (s.vX < 0 && s.vX > -0.2) {
                s.vX = -0.2;
            }
            if (s.vY >= 0 && s.vY < 0.2) {
                s.vY = 0.2;
            }
        };

        this.move = function () {
            var vX = s.vX * windOffset, yDiff;
            s.x += vX;
            s.y += (s.vY * s.vAmp);
            if (s.x >= screenX || screenX - s.x < storm.flakeWidth) { // X-axis scroll check
                s.x = 0;
            } else if (vX < 0 && s.x - storm.flakeLeftOffset < -storm.flakeWidth) {
                s.x = screenX - storm.flakeWidth - 1; // flakeWidth;
            }
            s.refresh();
            yDiff = screenY + scrollY - s.y;
            if (yDiff < storm.flakeHeight) {
                s.active = 0;
                if (storm.snowStick) {
                    s.stick();
                } else {
                    s.recycle();
                }
            } else {
                if (storm.useMeltEffect && s.active && s.type < 3 && !s.melting && Math.random() > 0.998) {
                    // ~1/1000 chance of melting mid-air, with each frame
                    s.melting = true;
                    s.melt();
                    // only incrementally melt one frame
                    // s.melting = false;
                }
                if (storm.useTwinkleEffect) {
                    if (!s.twinkleFrame) {
                        if (Math.random() > 0.9) {
                            s.twinkleFrame = parseInt(Math.random() * 20, 10);
                        }
                    } else {
                        s.twinkleFrame--;
                        s.o.style.visibility = (s.twinkleFrame && s.twinkleFrame % 2 === 0 ? 'hidden' : 'visible');
                    }
                }
            }
        };

        this.animate = function () {
            // main animation loop
            // move, check status, die etc.
            s.move();
        };

        this.setVelocities = function () {
            s.vX = vRndX + rnd(storm.vMaxX * 0.12, 0.1);
            s.vY = vRndY + rnd(storm.vMaxY * 0.12, 0.1);
        };

        this.setOpacity = function (o, opacity) {
            if (!opacitySupported) {
                return false;
            }
            o.style.opacity = opacity;
        };

        this.melt = function () {
            if (!storm.useMeltEffect || !s.melting) {
                s.recycle();
            } else {
                if (s.meltFrame < s.meltFrameCount) {
                    s.setOpacity(s.o, s.meltFrames[s.meltFrame]);
                    s.o.style.fontSize = s.fontSize - (s.fontSize * (s.meltFrame / s.meltFrameCount)) + 'px';
                    s.o.style.lineHeight = storm.flakeHeight + 2 + (storm.flakeHeight * 0.75 * (s.meltFrame / s.meltFrameCount)) + 'px';
                    s.meltFrame++;
                } else {
                    s.recycle();
                }
            }
        };

        this.recycle = function () {
            s.o.style.display = 'none';
            s.o.style.position = (fixedForEverything ? 'fixed' : 'absolute');
            s.o.style.bottom = 'auto';
            s.setVelocities();
            s.vCheck();
            s.meltFrame = 0;
            s.melting = false;
            s.setOpacity(s.o, 1);
            s.o.style.padding = '0px';
            s.o.style.margin = '0px';
            s.o.style.fontSize = s.fontSize + 'px';
            s.o.style.lineHeight = (storm.flakeHeight + 2) + 'px';
            s.o.style.textAlign = 'center';
            s.o.style.verticalAlign = 'baseline';
            s.x = parseInt(rnd(screenX - storm.flakeWidth - 20), 10);
            s.y = parseInt(rnd(screenY) * -1, 10) - storm.flakeHeight;
            s.refresh();
            s.o.style.display = 'block';
            s.active = 1;
        };

        this.recycle(); // set up x/y coords etc.
        this.refresh();

    };

    this.snow = function () {
        var active = 0, used = 0, waiting = 0, flake = null, i;
        for (i = s.flakes.length; i--;) {
            if (s.flakes[i].active === 1) {
                s.flakes[i].move();
                active++;
            } else if (s.flakes[i].active === 0) {
                used++;
            } else {
                waiting++;
            }
            if (s.flakes[i].melting) {
                s.flakes[i].melt();
            }
        }
        if (active < s.flakesMaxActive) {
            flake = s.flakes[parseInt(rnd(s.flakes.length), 10)];
            if (flake.active === 0) {
                flake.melting = true;
            }
        }
    };

    this.mouseMove = function (e) {
        if (!s.followMouse) {
            return true;
        }
        var x = parseInt(e.clientX, 10);
        if (x < screenX2) {
            windOffset = -windMultiplier + (x / screenX2 * windMultiplier);
        } else {
            x -= screenX2;
            windOffset = (x / screenX2) * windMultiplier;
        }
    };

    this.createSnow = function (limit, allowInactive) {
        var i;
        for (i = 0; i < limit; i++) {
            s.flakes[s.flakes.length] = new s.SnowFlake(s, parseInt(rnd(flakeTypes), 10));
            if (allowInactive || i > s.flakesMaxActive) {
                s.flakes[s.flakes.length - 1].active = -1;
            }
        }
        storm.targetElement.appendChild(docFrag);
    };

    this.timerInit = function () {
        s.timers = (!isWin98 ? [setInterval(s.snow, s.animationInterval)] : [setInterval(s.snow, s.animationInterval * 3), setInterval(s.snow, s.animationInterval)]);
    };

    this.init = function () {
        var i;
        for (i = 0; i < s.meltFrameCount; i++) {
            s.meltFrames.push(1 - (i / s.meltFrameCount));
        }
        s.randomizeWind();
        s.createSnow(s.flakesMax); // create initial batch
        s.events.add(window, 'resize', s.resizeHandler);
        s.events.add(window, 'scroll', s.scrollHandler);
        if (s.freezeOnBlur) {
            if (isIE) {
                s.events.add(document, 'focusout', s.freeze);
                s.events.add(document, 'focusin', s.resume);
            } else {
                s.events.add(window, 'blur', s.freeze);
                s.events.add(window, 'focus', s.resume);
            }
        }
        s.resizeHandler();
        s.scrollHandler();
        if (s.followMouse) {
            s.events.add(isIE ? document : window, 'mousemove', s.mouseMove);
        }
        s.animationInterval = Math.max(20, s.animationInterval);
        s.timerInit();
    };

    this.start = function (bFromOnLoad) {
        if (!didInit) {
            didInit = true;
        } else if (bFromOnLoad) {
            // already loaded and running
            return true;
        }
        if (typeof s.targetElement === 'string') {
            var targetID = s.targetElement;
            s.targetElement = document.getElementById(targetID);
            if (!s.targetElement) {
                throw new Error('Snowstorm: Unable to get targetElement "' + targetID + '"');
            }
        }
        if (!s.targetElement) {
            s.targetElement = (!isIE ? (document.documentElement ? document.documentElement : document.body) : document.body);
        }
        if (s.targetElement !== document.documentElement && s.targetElement !== document.body) {
            s.resizeHandler = s.resizeHandlerAlt; // re-map handler to get element instead of screen dimensions
        }
        s.resizeHandler(); // get bounding box elements
        s.usePositionFixed = (s.usePositionFixed && !noFixed); // whether or not position:fixed is supported
        fixedForEverything = s.usePositionFixed;
        if (screenX && screenY && !s.disabled) {
            s.init();
            s.active = true;
        }
    };

    function doDelayedStart() {
        window.setTimeout(function () {
            s.start(true);
        }, 20);
        // event cleanup
        s.events.remove(isIE ? document : window, 'mousemove', doDelayedStart);
    }

    function doStart() {
        if (!s.excludeMobile || !isMobile) {
            if (s.freezeOnBlur) {
                s.events.add(isIE ? document : window, 'mousemove', doDelayedStart);
            } else {
                doDelayedStart();
            }
        }
        // event cleanup
        s.events.remove(window, 'load', doStart);
    }

    // hooks for starting the snow
    if (s.autoStart) {
        s.events.add(window, 'load', doStart, false);
    }

    return this;

}(window, document));
/*!
 * angular-ui-mask
 * https://github.com/angular-ui/ui-mask
 * Version: 1.8.7 - 2016-07-26T15:59:07.992Z
 * License: MIT
 */
!function(){"use strict";angular.module("ui.mask",[]).value("uiMaskConfig",{maskDefinitions:{9:/\d/,A:/[a-zA-Z]/,"*":/[a-zA-Z0-9]/},clearOnBlur:!0,clearOnBlurPlaceholder:!1,escChar:"\\",eventsToHandle:["input","keyup","click","focus"],addDefaultPlaceholder:!0,allowInvalidValue:!1}).provider("uiMask.Config",function(){var e={};this.maskDefinitions=function(n){return e.maskDefinitions=n},this.clearOnBlur=function(n){return e.clearOnBlur=n},this.clearOnBlurPlaceholder=function(n){return e.clearOnBlurPlaceholder=n},this.eventsToHandle=function(n){return e.eventsToHandle=n},this.addDefaultPlaceholder=function(n){return e.addDefaultPlaceholder=n},this.allowInvalidValue=function(n){return e.allowInvalidValue=n},this.$get=["uiMaskConfig",function(n){var t=n;for(var a in e)angular.isObject(e[a])&&!angular.isArray(e[a])?angular.extend(t[a],e[a]):t[a]=e[a];return t}]}).directive("uiMask",["uiMask.Config",function(e){function n(e){return e===document.activeElement&&(!document.hasFocus||document.hasFocus())&&!!(e.type||e.href||~e.tabIndex)}return{priority:100,require:"ngModel",restrict:"A",compile:function(){var t=angular.copy(e);return function(e,a,i,r){function l(e){return angular.isDefined(e)?(w(e),K?(h(),d(),!0):f()):f()}function u(e){e&&(T=e,!K||0===a.val().length&&angular.isDefined(i.placeholder)||a.val(m(p(a.val()))))}function o(){return l(i.uiMask)}function c(e){return K?(j=p(e||""),R=g(j),r.$setValidity("mask",R),j.length&&(R||Q.allowInvalidValue)?m(j):void 0):e}function s(e){return K?(j=p(e||""),R=g(j),r.$viewValue=j.length?m(j):"",r.$setValidity("mask",R),R||Q.allowInvalidValue?J?r.$viewValue:j:void 0):e}function f(){return K=!1,v(),angular.isDefined(q)?a.attr("placeholder",q):a.removeAttr("placeholder"),angular.isDefined(W)?a.attr("maxlength",W):a.removeAttr("maxlength"),a.val(r.$modelValue),r.$viewValue=r.$modelValue,!1}function h(){j=F=p(r.$modelValue||""),H=_=m(j),R=g(j),i.maxlength&&a.attr("maxlength",2*S[S.length-1]),!q&&Q.addDefaultPlaceholder&&a.attr("placeholder",T);for(var e=r.$modelValue,n=r.$formatters.length;n--;)e=r.$formatters[n](e);r.$viewValue=e||"",r.$render()}function d(){Z||(a.bind("blur",y),a.bind("mousedown mouseup",V),a.bind("keydown",M),a.bind(Q.eventsToHandle.join(" "),O),Z=!0)}function v(){Z&&(a.unbind("blur",y),a.unbind("mousedown",V),a.unbind("mouseup",V),a.unbind("keydown",M),a.unbind("input",O),a.unbind("keyup",O),a.unbind("click",O),a.unbind("focus",O),Z=!1)}function g(e){return e.length?e.length>=I:!0}function p(e){var n,t,i="",r=a[0],l=A.slice(),u=L,o=u+C(r),c="";return e=e.toString(),n=0,t=e.length-T.length,angular.forEach(B,function(a){var i=a.position;i>=u&&o>i||(i>=u&&(i+=t),e.substring(i,i+a.value.length)===a.value&&(c+=e.slice(n,i),n=i+a.value.length))}),e=c+e.slice(n),angular.forEach(e.split(""),function(e){l.length&&l[0].test(e)&&(i+=e,l.shift())}),i}function m(e){var n="",t=S.slice();return angular.forEach(T.split(""),function(a,i){e.length&&i===t[0]?(n+=e.charAt(0)||"_",e=e.substr(1),t.shift()):n+=a}),n}function b(e){var n,t=angular.isDefined(i.uiMaskPlaceholder)?i.uiMaskPlaceholder:i.placeholder;return angular.isDefined(t)&&t[e]?t[e]:(n=angular.isDefined(i.uiMaskPlaceholderChar)&&i.uiMaskPlaceholderChar?i.uiMaskPlaceholderChar:"_","space"===n.toLowerCase()?" ":n[0])}function k(){var e,n,t=T.split("");S&&!isNaN(S[0])&&angular.forEach(S,function(e){t[e]="_"}),e=t.join(""),n=e.replace(/[_]+/g,"_").split("_"),n=n.filter(function(e){return""!==e});var a=0;return n.map(function(n){var t=e.indexOf(n,a);return a=t+1,{value:n,position:t}})}function w(e){var n=0;if(S=[],A=[],T="",angular.isString(e)){I=0;var t=!1,a=0,i=e.split(""),r=!1;angular.forEach(i,function(e,i){r?(r=!1,T+=e,n++):Q.escChar===e?r=!0:Q.maskDefinitions[e]?(S.push(n),T+=b(i-a),A.push(Q.maskDefinitions[e]),n++,t||I++,t=!1):"?"===e?(t=!0,a++):(T+=e,n++)})}S.push(S.slice().pop()+1),B=k(),K=S.length>1?!0:!1}function y(){if((Q.clearOnBlur||Q.clearOnBlurPlaceholder&&0===j.length&&i.placeholder)&&(L=0,N=0,R&&0!==j.length||(H="",a.val(""),e.$apply(function(){r.$pristine||r.$setViewValue("")}))),j!==U){var n=a.val(),t=""===j&&n&&angular.isDefined(i.uiMaskPlaceholderChar)&&"space"===i.uiMaskPlaceholderChar;t&&a.val(""),$(a[0]),t&&a.val(n)}U=j}function $(e){var n;if(angular.isFunction(window.Event)&&!e.fireEvent)try{n=new Event("change",{view:window,bubbles:!0,cancelable:!1})}catch(t){n=document.createEvent("HTMLEvents"),n.initEvent("change",!1,!0)}finally{e.dispatchEvent(n)}else"createEvent"in document?(n=document.createEvent("HTMLEvents"),n.initEvent("change",!1,!0),e.dispatchEvent(n)):e.fireEvent&&e.fireEvent("onchange")}function V(e){"mousedown"===e.type?a.bind("mouseout",E):a.unbind("mouseout",E)}function E(){N=C(this),a.unbind("mouseout",E)}function M(e){var n=8===e.which,t=P(this)-1||0,i=90===e.which&&e.ctrlKey;if(n){for(;t>=0;){if(D(t)){x(this,t+1);break}t--}z=-1===t}i&&(a.val(""),e.preventDefault())}function O(n){n=n||{};var t=n.which,i=n.type;if(16!==t&&91!==t){var l,u=a.val(),o=_,c=!1,s=p(u),f=F,h=P(this)||0,d=L||0,v=h-d,g=S[0],b=S[s.length]||S.slice().shift(),k=N||0,w=C(this)>0,y=k>0,$=u.length>o.length||k&&u.length>o.length-k,V=u.length<o.length||k&&u.length===o.length-k,E=t>=37&&40>=t&&n.shiftKey,M=37===t,O=8===t||"keyup"!==i&&V&&-1===v,A=46===t||"keyup"!==i&&V&&0===v&&!y,B=(M||O||"click"===i)&&h>g;if(N=C(this),!E&&(!w||"click"!==i&&"keyup"!==i&&"focus"!==i)){if(O&&z)return a.val(T),e.$apply(function(){r.$setViewValue("")}),void x(this,d);if("input"===i&&V&&!y&&s===f){for(;O&&h>g&&!D(h);)h--;for(;A&&b>h&&-1===S.indexOf(h);)h++;var I=S.indexOf(h);s=s.substring(0,I)+s.substring(I+1),s!==f&&(c=!0)}for(l=m(s),_=l,F=s,!c&&u.length>l.length&&(c=!0),a.val(l),c&&e.$apply(function(){r.$setViewValue(l)}),$&&g>=h&&(h=g+1),B&&h--,h=h>b?b:g>h?g:h;!D(h)&&h>g&&b>h;)h+=B?-1:1;(B&&b>h||$&&!D(d))&&h++,L=h,x(this,h)}}}function D(e){return S.indexOf(e)>-1}function P(e){if(!e)return 0;if(void 0!==e.selectionStart)return e.selectionStart;if(document.selection&&n(a[0])){e.focus();var t=document.selection.createRange();return t.moveStart("character",e.value?-e.value.length:0),t.text.length}return 0}function x(e,t){if(!e)return 0;if(0!==e.offsetWidth&&0!==e.offsetHeight)if(e.setSelectionRange)n(a[0])&&(e.focus(),e.setSelectionRange(t,t));else if(e.createTextRange){var i=e.createTextRange();i.collapse(!0),i.moveEnd("character",t),i.moveStart("character",t),i.select()}}function C(e){return e?void 0!==e.selectionStart?e.selectionEnd-e.selectionStart:window.getSelection?window.getSelection().toString().length:document.selection?document.selection.createRange().text.length:0:0}var S,A,T,B,I,j,H,R,_,F,L,N,z,K=!1,Z=!1,q=i.placeholder,W=i.maxlength,G=r.$isEmpty;r.$isEmpty=function(e){return G(K?p(e||""):e)};var J=!1;i.$observe("modelViewValue",function(e){"true"===e&&(J=!0)}),i.$observe("allowInvalidValue",function(e){Q.allowInvalidValue=""===e?!0:!!e,c(r.$modelValue)});var Q={};i.uiOptions?(Q=e.$eval("["+i.uiOptions+"]"),Q=angular.isObject(Q[0])?function(e,n){for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(void 0===n[t]?n[t]=angular.copy(e[t]):angular.isObject(n[t])&&!angular.isArray(n[t])&&(n[t]=angular.extend({},e[t],n[t])));return n}(t,Q[0]):t):Q=t,i.$observe("uiMask",l),angular.isDefined(i.uiMaskPlaceholder)?i.$observe("uiMaskPlaceholder",u):i.$observe("placeholder",u),angular.isDefined(i.uiMaskPlaceholderChar)&&i.$observe("uiMaskPlaceholderChar",o),r.$formatters.unshift(c),r.$parsers.unshift(s);var U=a.val();a.bind("mousedown mouseup",V),Array.prototype.indexOf||(Array.prototype.indexOf=function(e){if(null===this)throw new TypeError;var n=Object(this),t=n.length>>>0;if(0===t)return-1;var a=0;if(arguments.length>1&&(a=Number(arguments[1]),a!==a?a=0:0!==a&&a!==1/0&&a!==-(1/0)&&(a=(a>0||-1)*Math.floor(Math.abs(a)))),a>=t)return-1;for(var i=a>=0?a:Math.max(t-Math.abs(a),0);t>i;i++)if(i in n&&n[i]===e)return i;return-1})}}}}])}();
/* =========================================================
 * bootstrap-tabdrop.js 
 * http://www.eyecon.ro/bootstrap-tabdrop
 * =========================================================
 * Copyright 2012 Stefan Petre
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================= */
 
!function( $ ) {

	var WinResizer = (function(){
		var registered = [];
		var inited = false;
		var timer;
		var resize = function(ev) {
			clearTimeout(timer);
			timer = setTimeout(notify, 0);
		};
		var notify = function() {
			for(var i=0, cnt=registered.length; i<cnt; i++) {
				registered[i].apply();
			}
		};
		return {
			register: function(fn) {
			    registered.push(fn);
			    if (inited === false) {
			        resize();
				    $(window).bind('resize', resize);
					inited = true;
				}
			},
			unregister: function(fn) {
				for(var i=0, cnt=registered.length; i<cnt; i++) {
					if (registered[i] == fn) {
						delete registered[i];
						break;
					}
				}
			}
		}
	}());

	var TabDrop = function(element, options) {
		this.element = $(element);
		this.dropdown = $('<li class="dropdown hide pull-right tabdrop"><a class="dropdown-toggle" data-toggle="dropdown" href="void(0)">' + options.text + ' <span class="fa fa-caret-down"></span></a><ul class="dropdown-menu"></ul></li>')
							.prependTo(this.element);
		if (this.element.parent().is('.tabs-below')) {
			this.dropdown.addClass('dropup');
		}
		WinResizer.register($.proxy(this.layout, this));
		this.layout();
	};

	TabDrop.prototype = {
		constructor: TabDrop,

		layout: function() {
			var collection = [];
			this.dropdown.removeClass('hide');
			this.element
				.append(this.dropdown.find('li'))
				.find('>li')
				.not('.tabdrop')
				.each(function(){
					if(this.offsetTop > 0) {
						collection.push(this);
					}
				});
			if (collection.length > 0) {
				collection = $(collection);
				this.dropdown
					.find('ul')
					.empty()
					.append(collection);
				if (this.dropdown.find('.active').length == 1) {
					this.dropdown.addClass('active');
				} else {
					this.dropdown.removeClass('active');
				}
			} else {
				this.dropdown.addClass('hide');
			}
		}
	}

	$.fn.tabdrop = function ( option ) {
		return this.each(function () {
			var $this = $(this),
				data = $this.data('tabdrop'),
				options = typeof option === 'object' && option;
			if (!data)  {
				$this.data('tabdrop', (data = new TabDrop(this, $.extend({}, $.fn.tabdrop.defaults,options))));
			}
			if (typeof option == 'string') {
				data[option]();
			}
		})
	};

	$.fn.tabdrop.defaults = {
		text: '<i class="icon-align-justify"></i>'
	};

	$.fn.tabdrop.Constructor = TabDrop;

}( window.jQuery );
/*! powerbi-client v2.3.1 | (c) 2016 Microsoft Corporation MIT */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["powerbi-client"]=t():e["powerbi-client"]=t()}(this,function(){return function(e){function t(n){if(r[n])return r[n].exports;var i=r[n]={exports:{},id:n,loaded:!1};return e[n].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}([function(e,t,r){var n=r(1);t.service=n;var i=r(10);t.factories=i;var o=r(5);t.models=o;var s=r(4);t.Report=s.Report;var a=r(9);t.Tile=a.Tile;var c=r(2);t.Embed=c.Embed;var h=r(6);t.Page=h.Page;var u=new n.Service(i.hpmFactory,i.wpmpFactory,i.routerFactory);window.powerbi=u},function(e,t,r){var n=r(2),i=r(4),o=r(7),s=r(8),a=r(9),c=r(6),h=r(3),u=function(){function e(t,r,n,i){var o=this;void 0===i&&(i={}),this.wpmp=r(i.wpmpName,i.logMessages),this.hpm=t(this.wpmp,null,i.version,i.type),this.router=n(this.wpmp),this.router.post("/reports/:uniqueId/events/:eventName",function(e,t){var r={type:"report",id:e.params.uniqueId,name:e.params.eventName,value:e.body};o.handleEvent(r)}),this.router.post("/reports/:uniqueId/pages/:pageName/events/:eventName",function(e,t){var r={type:"report",id:e.params.uniqueId,name:e.params.eventName,value:e.body};o.handleEvent(r)}),this.router.post("/dashboards/:uniqueId/events/:eventName",function(e,t){var r={type:"dashboard",id:e.params.uniqueId,name:e.params.eventName,value:e.body};o.handleEvent(r)}),this.embeds=[],this.config=h.assign({},e.defaultConfig,i),this.config.autoEmbedOnContentLoaded&&this.enableAutoEmbed()}return e.prototype.createReport=function(e,t){t.type="create";var r=e,n=new o.Create(this,r,t);return r.powerBiEmbed=n,this.addOrOverwriteEmbed(n,e),n},e.prototype.init=function(e,t){var r=this;void 0===t&&(t=void 0),e=e&&e instanceof HTMLElement?e:document.body;var i=Array.prototype.slice.call(e.querySelectorAll("["+n.Embed.embedUrlAttribute+"]"));return i.map(function(e){return r.embed(e,t)})},e.prototype.embed=function(e,t){void 0===t&&(t={});var r,n=e;return r=n.powerBiEmbed?this.embedExisting(n,t):this.embedNew(n,t)},e.prototype.embedNew=function(t,r){var o=r.type||t.getAttribute(n.Embed.typeAttribute);if(!o)throw new Error("Attempted to embed using config "+JSON.stringify(r)+" on element "+t.outerHTML+", but could not determine what type of component to embed. You must specify a type in the configuration or as an attribute such as '"+n.Embed.typeAttribute+'="'+i.Report.type.toLowerCase()+"\"'.");r.type=o;var s=h.find(function(e){return o===e.type.toLowerCase()},e.components);if(!s)throw new Error("Attempted to embed component of type: "+o+" but did not find any matching component.  Please verify the type you specified is intended.");var a=new s(this,t,r);return t.powerBiEmbed=a,this.addOrOverwriteEmbed(a,t),a},e.prototype.embedExisting=function(e,t){var r=h.find(function(t){return t.element===e},this.embeds);if(!r)throw new Error("Attempted to embed using config "+JSON.stringify(t)+" on element "+e.outerHTML+" which already has embedded comopnent associated, but could not find the existing comopnent in the list of active components. This could indicate the embeds list is out of sync with the DOM, or the component is referencing the incorrect HTML element.");if("string"==typeof t.type&&t.type!==r.config.type){if("report"===t.type&&"create"===r.config.type){var n=new i.Report(this,e,t,e.powerBiEmbed.iframe);return n.load(t),e.powerBiEmbed=n,this.addOrOverwriteEmbed(r,e),n}throw new Error("Embedding on an existing element with a different type than the previous embed object is not supported.  Attempted to embed using config "+JSON.stringify(t)+" on element "+e.outerHTML+", but the existing element contains an embed of type: "+this.config.type+" which does not match the new type: "+t.type)}return r.load(t),r},e.prototype.enableAutoEmbed=function(){var e=this;window.addEventListener("DOMContentLoaded",function(t){return e.init(document.body)},!1)},e.prototype.get=function(e){var t=e;if(!t.powerBiEmbed)throw new Error("You attempted to get an instance of powerbi component associated with element: "+e.outerHTML+" but there was no associated instance.");return t.powerBiEmbed},e.prototype.find=function(e){return h.find(function(t){return t.config.uniqueId===e},this.embeds)},e.prototype.addOrOverwriteEmbed=function(e,t){this.embeds=this.embeds.filter(function(e){return e.element.id!==t.id}),this.embeds.push(e)},e.prototype.reset=function(e){var t=e;if(t.powerBiEmbed){h.remove(function(e){return e===t.powerBiEmbed},this.embeds),delete t.powerBiEmbed;var r=e.querySelector("iframe");r&&(void 0!==r.remove?r.remove():r.parentElement.removeChild(r))}},e.prototype.handleTileEvents=function(e){"tile"===e.type&&this.handleEvent(e)},e.prototype.handleEvent=function(e){var t=h.find(function(t){return t.config.uniqueId===e.id},this.embeds);if(t){var r=e.value;if("pageChanged"===e.name){var n="newPage",i=r[n];if(!i)throw new Error("Page model not found at 'event.value."+n+"'.");r[n]=new c.Page(t,i.name,i.displayName)}h.raiseCustomEvent(t.element,e.name,r)}},e.components=[a.Tile,i.Report,s.Dashboard],e.defaultConfig={autoEmbedOnContentLoaded:!1,onError:function(){for(var e=[],t=0;t<arguments.length;t++)e[t-0]=arguments[t];return console.log(e[0],e.slice(1))}},e}();t.Service=u},function(e,t,r){var n=r(3),i=function(){function e(t,r,n,i){this.allowedEvents=[],Array.prototype.push.apply(this.allowedEvents,e.allowedEvents),this.eventHandlers=[],this.service=t,this.element=r,this.iframe=i,this.embeType=n.type.toLowerCase(),this.populateConfig(n),"create"===this.embeType?this.setIframe(!1):this.setIframe(!0)}return e.prototype.createReport=function(e){var t=this.validate(e);if(t)throw t;return this.service.hpm.post("/report/create",e,{uid:this.config.uniqueId},this.iframe.contentWindow).then(function(e){return e.body},function(e){throw e.body})},e.prototype.save=function(){return this.service.hpm.post("/report/save",null,{uid:this.config.uniqueId},this.iframe.contentWindow).then(function(e){return e.body})["catch"](function(e){throw e.body})},e.prototype.saveAs=function(e){return this.service.hpm.post("/report/saveAs",e,{uid:this.config.uniqueId},this.iframe.contentWindow).then(function(e){return e.body})["catch"](function(e){throw e.body})},e.prototype.load=function(e){var t=this,r=this.validate(e);if(r)throw r;return this.service.hpm.post(this.loadPath,e,{uid:this.config.uniqueId},this.iframe.contentWindow).then(function(r){return n.assign(t.config,e),r.body},function(e){throw e.body})},e.prototype.off=function(e,t){var r=this,i={name:e,type:null,id:null,value:null};if(t)n.remove(function(e){return e.test(i)&&e.handle===t},this.eventHandlers),this.element.removeEventListener(e,t);else{var o=this.eventHandlers.filter(function(e){return e.test(i)});o.forEach(function(t){n.remove(function(e){return e===t},r.eventHandlers),r.element.removeEventListener(e,t.handle)})}},e.prototype.on=function(e,t){if(this.allowedEvents.indexOf(e)===-1)throw new Error("eventName is must be one of "+this.allowedEvents+". You passed: "+e);this.eventHandlers.push({test:function(t){return t.name===e},handle:t}),this.element.addEventListener(e,t)},e.prototype.reload=function(){return this.load(this.config)},e.prototype.setAccessToken=function(e){return this.service.hpm.post("/report/token",e,{uid:this.config.uniqueId},this.iframe.contentWindow).then(function(e){return e.body})["catch"](function(e){throw e.body})},e.prototype.getAccessToken=function(t){var r=this.config.accessToken||this.element.getAttribute(e.accessTokenAttribute)||t;if(!r)throw new Error("No access token was found for element. You must specify an access token directly on the element using attribute '"+e.accessTokenAttribute+"' or specify a global token at: powerbi.accessToken.");return r},e.prototype.populateConfig=function(t){var r=n.assign({},e.defaultSettings,t.settings);this.config=n.assign({settings:r},t),this.config.uniqueId=this.getUniqueId(),this.config.embedUrl=this.getEmbedUrl(),"create"===this.embeType?this.createConfig={datasetId:t.datasetId||this.getId(),accessToken:this.getAccessToken(this.service.accessToken),tokenType:t.tokenType,settings:r}:(this.config.id=this.getId(),this.config.accessToken=this.getAccessToken(this.service.accessToken),"tile"==this.embeType&&(this.config.action=t.action,this.config.height=t.height,this.config.width=t.width))},e.prototype.getEmbedUrl=function(){var t=this.config.embedUrl||this.element.getAttribute(e.embedUrlAttribute);if("string"!=typeof t||0===t.length)throw new Error("Embed Url is required, but it was not found. You must provide an embed url either as part of embed configuration or as attribute '"+e.embedUrlAttribute+"'.");return t},e.prototype.getUniqueId=function(){return this.config.uniqueId||this.element.getAttribute(e.nameAttribute)||n.createRandomString()},e.prototype.fullscreen=function(){var e=this.iframe.requestFullscreen||this.iframe.msRequestFullscreen||this.iframe.mozRequestFullScreen||this.iframe.webkitRequestFullscreen;e.call(this.iframe)},e.prototype.exitFullscreen=function(){if(this.isFullscreen(this.iframe)){var e=document.exitFullscreen||document.mozCancelFullScreen||document.webkitExitFullscreen||document.msExitFullscreen;e.call(document)}},e.prototype.isFullscreen=function(e){var t=["fullscreenElement","webkitFullscreenElement","mozFullscreenScreenElement","msFullscreenElement"];return t.some(function(t){return document[t]===e})},e.prototype.setIframe=function(e){var t=this;if(!this.iframe){var r=document.createElement("iframe"),n=this.config.embedUrl;r.setAttribute("style","width:100%;height:100%;"),r.setAttribute("src",n),r.setAttribute("scrolling","no"),r.setAttribute("allowfullscreen","true");for(var i=this.element;i.firstChild;)i.removeChild(i.firstChild);i.appendChild(r),this.iframe=i.firstChild}e?this.iframe.addEventListener("load",function(){return t.load(t.config)},!1):this.iframe.addEventListener("load",function(){return t.createReport(t.createConfig)},!1)},e.allowedEvents=["loaded","saved","rendered","saveAsTriggered","error","dataSelected"],e.accessTokenAttribute="powerbi-access-token",e.embedUrlAttribute="powerbi-embed-url",e.nameAttribute="powerbi-name",e.typeAttribute="powerbi-type",e.defaultSettings={filterPaneEnabled:!0},e}();t.Embed=i},function(e,t){function r(e,t,r){var n;"function"==typeof CustomEvent?n=new CustomEvent(t,{detail:r,bubbles:!0,cancelable:!0}):(n=document.createEvent("CustomEvent"),n.initCustomEvent(t,!0,!0,r)),e.dispatchEvent(n)}function n(e,t){if(!Array.isArray(t))throw new Error("You attempted to call find with second parameter that was not an array. You passed: "+t);var r;return t.some(function(t,n){if(e(t))return r=n,!0}),r}function i(e,t){var r=n(e,t);return t[r]}function o(e,t){var r=n(e,t);t.splice(r,1)}function s(){for(var e=[],t=0;t<arguments.length;t++)e[t-0]=arguments[t];var r=e[0];if(void 0===r||null===r)throw new TypeError("Cannot convert undefined or null to object");for(var n=Object(r),i=1;i<arguments.length;i++){var o=arguments[i];if(void 0!==o&&null!==o)for(var s in o)o.hasOwnProperty(s)&&(n[s]=o[s])}return n}function a(){return(Math.random()+1).toString(36).substring(7)}t.raiseCustomEvent=r,t.findIndex=n,t.find=i,t.remove=o,t.assign=s,t.createRandomString=a},function(e,t,r){var n=this&&this.__extends||function(e,t){function r(){this.constructor=e}for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)},i=r(2),o=r(5),s=r(3),a=r(6),c=function(e){function t(r,n,i,o){var a=i.settings&&i.settings.filterPaneEnabled||!("false"===n.getAttribute(t.filterPaneEnabledAttribute)),c=i.settings&&i.settings.navContentPaneEnabled||!("false"===n.getAttribute(t.navContentPaneEnabledAttribute)),h=s.assign({filterPaneEnabled:a,navContentPaneEnabled:c},i.settings),u=s.assign({settings:h},i);e.call(this,r,n,u,o),this.loadPath="/report/load",Array.prototype.push.apply(this.allowedEvents,t.allowedEvents)}return n(t,e),t.findIdFromEmbedUrl=function(e){var t,r=/reportId="?([^&]+)"?/,n=e.match(r);return n&&(t=n[1]),t},t.prototype.getFilters=function(){return this.service.hpm.get("/report/filters",{uid:this.config.uniqueId},this.iframe.contentWindow).then(function(e){return e.body},function(e){throw e.body})},t.prototype.getId=function(){var e=this.config.id||this.element.getAttribute(t.reportIdAttribute)||t.findIdFromEmbedUrl(this.config.embedUrl);if("string"!=typeof e||0===e.length)throw new Error("Report id is required, but it was not found. You must provide an id either as part of embed configuration or as attribute '"+t.reportIdAttribute+"'.");return e},t.prototype.getPages=function(){var e=this;return this.service.hpm.get("/report/pages",{uid:this.config.uniqueId},this.iframe.contentWindow).then(function(t){return t.body.map(function(t){return new a.Page(e,t.name,t.displayName)})},function(e){throw e.body})},t.prototype.page=function(e,t){return new a.Page(this,e,t)},t.prototype.print=function(){return this.service.hpm.post("/report/print",null,{uid:this.config.uniqueId},this.iframe.contentWindow).then(function(e){return e.body})["catch"](function(e){throw e.body})},t.prototype.removeFilters=function(){return this.setFilters([])},t.prototype.setPage=function(e){var t={name:e,displayName:null};return this.service.hpm.put("/report/pages/active",t,{uid:this.config.uniqueId},this.iframe.contentWindow)["catch"](function(e){throw e.body})},t.prototype.setFilters=function(e){return this.service.hpm.put("/report/filters",e,{uid:this.config.uniqueId},this.iframe.contentWindow)["catch"](function(e){throw e.body})},t.prototype.updateSettings=function(e){return this.service.hpm.patch("/report/settings",e,{uid:this.config.uniqueId},this.iframe.contentWindow)["catch"](function(e){throw e.body})},t.prototype.validate=function(e){return o.validateReportLoad(e)},t.prototype.switchMode=function(e){var t="/report/switchMode/"+e;return this.service.hpm.post(t,null,{uid:this.config.uniqueId},this.iframe.contentWindow).then(function(e){return e.body})["catch"](function(e){throw e.body})},t.prototype.refresh=function(){return this.service.hpm.post("/report/refresh",null,{uid:this.config.uniqueId},this.iframe.contentWindow).then(function(e){return e.body})["catch"](function(e){throw e.body})},t.allowedEvents=["filtersApplied","pageChanged"],t.reportIdAttribute="powerbi-report-id",t.filterPaneEnabledAttribute="powerbi-settings-filter-pane-enabled",t.navContentPaneEnabledAttribute="powerbi-settings-nav-content-pane-enabled",t.typeAttribute="powerbi-type",t.type="Report",t}(i.Embed);t.Report=c},function(e,t,r){/*! powerbi-models v0.11.2 | (c) 2016 Microsoft Corporation MIT */
!function(t,r){e.exports=r()}(this,function(){return function(e){function t(n){if(r[n])return r[n].exports;var i=r[n]={exports:{},id:n,loaded:!1};return e[n].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}([function(e,t,r){function n(e){var t=e.message;return t||(t=e.path+" is invalid. Not meeting "+e.keyword+" constraint"),{message:t}}function i(e,t){return function(r){var i=p(e,t),o=i(r);return o?void 0:i.errors.map(n)}}function o(e){return h(e)&&!!e.keys}function s(e){return a(e)===f.Basic&&!!e.keyValues}function a(e){var t=e,r=e;return"string"==typeof t.operator&&Array.isArray(t.values)?f.Basic:"string"==typeof r.logicalOperator&&Array.isArray(r.conditions)?f.Advanced:f.Unknown}function c(e){return void 0!==e.table&&void 0!==e.measure}function h(e){return void 0!==e.table&&void 0!==e.column}function u(e){return void 0!==e.table&&void 0!==e.hierarchy&&void 0!==e.hierarchyLevel}var d=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])};return function(t,r){function n(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(t,"__esModule",{value:!0}),t.advancedFilterSchema=r(1),t.filterSchema=r(2),t.loadSchema=r(3),t.dashboardLoadSchema=r(4),t.pageSchema=r(5),t.settingsSchema=r(6),t.basicFilterSchema=r(7),t.createReportSchema=r(8),t.saveAsParametersSchema=r(9);var p=r(10);t.validateSettings=i(t.settingsSchema,{schemas:{basicFilter:t.basicFilterSchema,advancedFilter:t.advancedFilterSchema}}),t.validateReportLoad=i(t.loadSchema,{schemas:{settings:t.settingsSchema,basicFilter:t.basicFilterSchema,advancedFilter:t.advancedFilterSchema}}),t.validateCreateReport=i(t.createReportSchema),t.validateDashboardLoad=i(t.dashboardLoadSchema),t.validatePage=i(t.pageSchema),t.validateFilter=i(t.filterSchema,{schemas:{basicFilter:t.basicFilterSchema,advancedFilter:t.advancedFilterSchema}});var f;!function(e){e[e.Advanced=0]="Advanced",e[e.Basic=1]="Basic",e[e.Unknown=2]="Unknown"}(f=t.FilterType||(t.FilterType={})),t.isFilterKeyColumnsTarget=o,t.isBasicFilterWithKeys=s,t.getFilterType=a,t.isMeasure=c,t.isColumn=h,t.isHierarchy=u;var l=function(){function e(e){this.target=e}return e.prototype.toJSON=function(){return{$schema:this.schemaUrl,target:this.target}},e}();t.Filter=l;var m=function(e){function t(r,n){for(var i=[],o=2;o<arguments.length;o++)i[o-2]=arguments[o];var s=e.call(this,r)||this;if(s.operator=n,s.schemaUrl=t.schemaUrl,0===i.length&&"All"!==n)throw new Error('values must be a non-empty array unless your operator is "All".');return Array.isArray(i[0])?s.values=i[0]:s.values=i,s}return d(t,e),t.prototype.toJSON=function(){var t=e.prototype.toJSON.call(this);return t.operator=this.operator,t.values=this.values,t},t}(l);m.schemaUrl="http://powerbi.com/product/schema#basic",t.BasicFilter=m;var g=function(e){function t(t,r,n,i){var o=e.call(this,t,r,n)||this;o.keyValues=i,o.target=t;var s=t.keys?t.keys.length:0;if(s>0&&!i)throw new Error("You shold pass the values to be filtered for each key. You passed: no values and "+s+" keys");if(0===s&&i&&i.length>0)throw new Error("You passed key values but your target object doesn't contain the keys to be filtered");for(var a=0;a<o.keyValues.length;a++)if(o.keyValues[a]){var c=o.keyValues[a].length;if(c!==s)throw new Error("Each tuple of key values should contain a value for each of the keys. You passed: "+c+" values and "+s+" keys")}return o}return d(t,e),t.prototype.toJSON=function(){var t=e.prototype.toJSON.call(this);return t.keyValues=this.keyValues,t},t}(m);t.BasicFilterWithKeys=g;var v=function(e){function t(r,n){for(var i=[],o=2;o<arguments.length;o++)i[o-2]=arguments[o];var s=e.call(this,r)||this;if(s.schemaUrl=t.schemaUrl,"string"!=typeof n||0===n.length)throw new Error("logicalOperator must be a valid operator, You passed: "+n);s.logicalOperator=n;var a;if(a=Array.isArray(i[0])?i[0]:i,0===a.length)throw new Error("conditions must be a non-empty array. You passed: "+i);if(a.length>2)throw new Error("AdvancedFilters may not have more than two conditions. You passed: "+i.length);if(1===a.length&&"And"!==n)throw new Error('Logical Operator must be "And" when there is only one condition provided');return s.conditions=a,s}return d(t,e),t.prototype.toJSON=function(){var t=e.prototype.toJSON.call(this);return t.logicalOperator=this.logicalOperator,t.conditions=this.conditions,t},t}(l);v.schemaUrl="http://powerbi.com/product/schema#advanced",t.AdvancedFilter=v;var y;!function(e){e[e.Read=0]="Read",e[e.ReadWrite=1]="ReadWrite",e[e.Copy=2]="Copy",e[e.Create=4]="Create",e[e.All=7]="All"}(y=t.Permissions||(t.Permissions={}));var b;!function(e){e[e.View=0]="View",e[e.Edit=1]="Edit"}(b=t.ViewMode||(t.ViewMode={}));var w;!function(e){e[e.Aad=0]="Aad",e[e.Embed=1]="Embed"}(w=t.TokenType||(t.TokenType={})),t.validateSaveAsParameters=i(t.saveAsParametersSchema)},function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",type:"object",properties:{target:{oneOf:[{type:"object",properties:{table:{type:"string"},column:{type:"string"}},required:["table","column"]},{type:"object",properties:{table:{type:"string"},hierarchy:{type:"string"},hierarchyLevel:{type:"string"}},required:["table","hierarchy","hierarchyLevel"]},{type:"object",properties:{table:{type:"string"},measure:{type:"string"}},required:["table","measure"]}]},logicalOperator:{type:"string"},conditions:{type:"array",items:{type:"object",properties:{value:{type:["string","boolean","number"]},operator:{type:"string"}},required:["value","operator"]}}},required:["target","logicalOperator","conditions"]}},function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",oneOf:[{$ref:"#basicFilter"},{$ref:"#advancedFilter"}],invalidMessage:"filter is invalid"}},function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",type:"object",properties:{accessToken:{type:"string",messages:{type:"accessToken must be a string",required:"accessToken is required"}},id:{type:"string",messages:{type:"id must be a string",required:"id is required"}},settings:{$ref:"#settings"},pageName:{type:"string",messages:{type:"pageName must be a string"}},filters:{type:"array",items:{type:"object",oneOf:[{$ref:"#basicFilter"},{$ref:"#advancedFilter"}]},invalidMessage:"filters property is invalid"},permissions:{type:"number","enum":[0,1,2,4,7],"default":0,invalidMessage:"permissions property is invalid"},viewMode:{type:"number","enum":[0,1],"default":0,invalidMessage:"viewMode property is invalid"},tokenType:{type:"number","enum":[0,1],"default":0,invalidMessage:"tokenType property is invalid"}},required:["accessToken","id"]}},function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",type:"object",properties:{accessToken:{type:"string",messages:{type:"accessToken must be a string",required:"accessToken is required"}},id:{type:"string",messages:{type:"id must be a string",required:"id is required"}},pageView:{type:"string",messages:{type:'pageView must be a string with one of the following values: "actualSize", "fitToWidth", "oneColumn"'}},tokenType:{type:"number","enum":[0,1],"default":0,invalidMessage:"tokenType property is invalid"}},required:["accessToken","id"]}},function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",type:"object",properties:{name:{type:"string",messages:{type:"name must be a string",required:"name is required"}}},required:["name"]}},function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",type:"object",properties:{filterPaneEnabled:{type:"boolean",messages:{type:"filterPaneEnabled must be a boolean"}},navContentPaneEnabled:{type:"boolean",messages:{type:"navContentPaneEnabled must be a boolean"}},useCustomSaveAsDialog:{type:"boolean",messages:{type:"useCustomSaveAsDialog must be a boolean"}}}}},function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",type:"object",properties:{target:{type:"object",properties:{table:{type:"string"},column:{type:"string"},hierarchy:{type:"string"},hierarchyLevel:{type:"string"},measure:{type:"string"}},required:["table"]},operator:{type:"string"},values:{type:"array",items:{type:["string","boolean","number"]}}},required:["target","operator","values"]}},function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",type:"object",properties:{accessToken:{type:"string",messages:{type:"accessToken must be a string",required:"accessToken is required"}},datasetId:{type:"string",messages:{type:"datasetId must be a string",required:"datasetId is required"}},tokenType:{type:"number","enum":[0,1],"default":0,invalidMessage:"tokenType property is invalid"}},required:["accessToken","datasetId"]}},function(e,t){e.exports={$schema:"http://json-schema.org/draft-04/schema#",type:"object",properties:{name:{type:"string",messages:{type:"name must be a string",required:"name is required"}}},required:["name"]}},function(e,t,r){e.exports=r(11)},function(e,t,r){"use strict";function n(e){return e=e instanceof RegExp?e:new RegExp(e),A?e.toString():"/"+e.source.replace(v,"\\$&")+"/"}function i(e){return'"'+e.replace(y,"\\$1")+'"'}function o(e,t){return b.lastIndex=0,b.test(t)?e+"."+t:e+"["+i(t)+"]"}function s(e){if(void 0===e)return"undefined";var t=Object.prototype.toString.call(e);return t.substr(8,t.length-9).toLowerCase()}function a(e){return(0|e)===e}function c(e,t){T[t].type=e,T[t].keyword=t}function h(e){var t,r,n,i=Object.keys(e),o=i.indexOf("properties"),s=i.indexOf("patternProperties"),a={"enum":Array.isArray(e["enum"])&&e["enum"].length>0,type:null,allType:[],perType:{}};for(e.type&&("string"==typeof e.type?a.type=[e.type]:Array.isArray(e.type)&&e.type.length&&(a.type=e.type.slice(0))),n=0;n<i.length;n++)t=i[n],"enum"!==t&&"type"!==t&&(r=T[t],r&&(r.type?(a.perType[r.type]||(a.perType[r.type]=[]),o>-1&&"required"===t||s>-1&&"additionalProperties"===t||a.perType[r.type].push(t)):a.allType.push(t)));return a}function u(e,t){var r,n,i=e.substr(4),o=i.length,s=[],a="",c=!1;for(n=0;n<o;n++)switch(r=i[n]){case".":a&&(a+=r);break;case"[":isNaN(+i[n+1])?(c=!0,a&&(s.push('"'+a+'"'),a="")):(c=!1,a&&(a+="."));break;case"]":s.push(c?a:'"'+a+'"'),a="";break;default:a+=r}return a&&s.push('"'+a+'"'),t&&s.push('"'+t+'"'),1===s.length&&c?'"" + '+s[0]+' + ""':s.join(' + "." + ')||'""'}function d(e){var t,r,n,i,o=e,a=s(e);if("object"===a)for(o={},t=Object.keys(e),i=0,r=t.length;i<r;i++)n=t[i],o[n]=d(e[n]);else if("array"===a)for(o=[],i=0,r=e.length;i<r;i++)o[i]=d(e[i]);else{if("regexp"===a)return new RegExp(e);if("date"===a)return new Date(e.toJSON())}return o}function p(e,t){for(var r=0,n=t.length;r<n;r++)if(O(e,t[r]))return!0;return!1}function f(){this.objects=[],this.properties=[]}function l(e,t,r,n,i){var o,a,c,h,u,p,m;if("object"!==s(e))return t;if(e=n.resolve(e),void 0===t&&e.hasOwnProperty("default")&&(t=d(e["default"])),o=s(t),"object"===o&&"object"===s(e.properties)){for(p=Object.keys(e.properties),h=0;h<p.length;h++)c=p[h],a=l(e.properties[c],t[c],r,n),void 0!==a&&(t[c]=a);if("always"!==r)for(m=Object.keys(t),h=0;h<m.length;h++)c=m[h],p.indexOf(c)<0&&(e.additionalProperties===!1||r===!1&&!e.additionalProperties)&&(i?i.mark(t,c):delete t[c])}else if("array"===o&&e.items){if("array"===s(e.items))for(h=0;h<e.items.length;h++)a=l(e.items[h],t[h],r,n),(void 0!==a||h<t.length)&&(t[h]=a);else if(t.length)for(h=0;h<t.length;h++)t[h]=l(e.items,t[h],r,n)}else if("array"===s(e.allOf)&&e.allOf.length){for(u=new f,h=0;h<e.allOf.length;h++)t=l(e.allOf[h],t,r,n,u);u.deleteDuplicates(),u.dispose()}return t}function m(e){this.path="data",this.schema=e.schema,this.formats=e.formats,this.greedy=e.greedy,this.resolver=e.resolver,this.id=e.id,this.funcache=e.funcache||{},this.scope=e.scope||{equalAny:p,unique:P,ucs2length:k,refs:{}}}function g(e,t){if("object"!==s(e))throw new Error(w);t=t||{};var r=0,n=function(){return"i"+r++},i=new j(e,t.schemas,t.missing$Ref||!1),o=new m({schema:e,resolver:i,id:n,schemas:t.schemas,formats:t.formats,greedy:t.greedy||!1}),a=E("validate","data")("validate.errors = []")('gen(data, "", validate.errors)')("return validate.errors.length === 0").compile({gen:o.compile()});return o.dispose(),o=null,a.errors=[],a.build=function(t,r){return l(e,r&&r.copy===!1?t:d(t),r&&r.additionalProperties,i)},a}var v=/[\/]/g,y=/(")/gim,b=/^[a-z_$][0-9a-z]*$/gi,w="jsen: invalid schema object",x="object"==typeof window&&!!window.navigator,A="/"!==new RegExp("/").source,E=r(12),O=r(13),P=r(14),j=r(15),I=r(24),k=r(25),C={},T={};C["null"]=function(e){return e+" === null"},C["boolean"]=function(e){return"typeof "+e+' === "boolean"'},C.string=function(e){return"typeof "+e+' === "string"'},C.number=function(e){return"typeof "+e+' === "number"'},C.integer=function(e){return"typeof "+e+' === "number" && !('+e+" % 1)"},C.array=function(e){return"Array.isArray("+e+")"},C.object=function(e){return"typeof "+e+' === "object" && '+e+" !== null && !Array.isArray("+e+")"},C.date=function(e){return e+" instanceof Date"},T["enum"]=function(e){var t=e.schema["enum"];e.code("if (!equalAny("+e.path+", "+JSON.stringify(t)+")) {"),e.error("enum"),e.code("}")},T.minimum=function(e){"number"==typeof e.schema.minimum&&(e.code("if ("+e.path+" < "+e.schema.minimum+") {"),e.error("minimum"),e.code("}"))},T.exclusiveMinimum=function(e){e.schema.exclusiveMinimum===!0&&"number"==typeof e.schema.minimum&&(e.code("if ("+e.path+" === "+e.schema.minimum+") {"),e.error("exclusiveMinimum"),e.code("}"))},T.maximum=function(e){"number"==typeof e.schema.maximum&&(e.code("if ("+e.path+" > "+e.schema.maximum+") {"),e.error("maximum"),e.code("}"))},T.exclusiveMaximum=function(e){e.schema.exclusiveMaximum===!0&&"number"==typeof e.schema.maximum&&(e.code("if ("+e.path+" === "+e.schema.maximum+") {"),e.error("exclusiveMaximum"),e.code("}"))},T.multipleOf=function(e){if("number"==typeof e.schema.multipleOf){var t=e.schema.multipleOf,r=t.toString().length-t.toFixed(0).length-1,n=r>0?Math.pow(10,r):1,i=e.path;r>0?e.code("if (+(Math.round(("+i+" * "+n+') + "e+" + '+r+') + "e-" + '+r+") % "+t*n+" !== 0) {"):e.code("if ((("+i+" * "+n+") % "+t*n+") !== 0) {"),e.error("multipleOf"),e.code("}")}},T.minLength=function(e){a(e.schema.minLength)&&(e.code("if (ucs2length("+e.path+") < "+e.schema.minLength+") {"),e.error("minLength"),e.code("}"))},T.maxLength=function(e){a(e.schema.maxLength)&&(e.code("if (ucs2length("+e.path+") > "+e.schema.maxLength+") {"),e.error("maxLength"),e.code("}"))},T.pattern=function(e){var t=e.schema.pattern;("string"==typeof t||t instanceof RegExp)&&(e.code("if (!("+n(t)+").test("+e.path+")) {"),e.error("pattern"),e.code("}"))},T.format=function(e){"string"==typeof e.schema.format&&I[e.schema.format]&&(e.code("if (!("+I[e.schema.format]+").test("+e.path+")) {"),e.error("format"),e.code("}"))},T.minItems=function(e){a(e.schema.minItems)&&(e.code("if ("+e.path+".length < "+e.schema.minItems+") {"),e.error("minItems"),e.code("}"))},T.maxItems=function(e){a(e.schema.maxItems)&&(e.code("if ("+e.path+".length > "+e.schema.maxItems+") {"),e.error("maxItems"),e.code("}"))},T.additionalItems=function(e){e.schema.additionalItems===!1&&Array.isArray(e.schema.items)&&(e.code("if ("+e.path+".length > "+e.schema.items.length+") {"),e.error("additionalItems"),e.code("}"))},T.uniqueItems=function(e){e.schema.uniqueItems&&(e.code("if (unique("+e.path+").length !== "+e.path+".length) {"),e.error("uniqueItems"),e.code("}"))},T.items=function(e){var t=e.declare(0),r=0;if("object"===s(e.schema.items))e.code("for ("+t+" = 0; "+t+" < "+e.path+".length; "+t+"++) {"),e.descend(e.path+"["+t+"]",e.schema.items),e.code("}");else if(Array.isArray(e.schema.items)){for(;r<e.schema.items.length;r++)e.code("if ("+e.path+".length - 1 >= "+r+") {"),e.descend(e.path+"["+r+"]",e.schema.items[r]),e.code("}");"object"===s(e.schema.additionalItems)&&(e.code("for ("+t+" = "+r+"; "+t+" < "+e.path+".length; "+t+"++) {"),e.descend(e.path+"["+t+"]",e.schema.additionalItems),e.code("}"))}},T.maxProperties=function(e){a(e.schema.maxProperties)&&(e.code("if (Object.keys("+e.path+").length > "+e.schema.maxProperties+") {"),e.error("maxProperties"),e.code("}"))},T.minProperties=function(e){a(e.schema.minProperties)&&(e.code("if (Object.keys("+e.path+").length < "+e.schema.minProperties+") {"),e.error("minProperties"),e.code("}"))},T.required=function(e){if(Array.isArray(e.schema.required))for(var t=0;t<e.schema.required.length;t++)e.code("if ("+o(e.path,e.schema.required[t])+" === undefined) {"),e.error("required",e.schema.required[t]),e.code("}")},T.properties=function(e){var t,r,n,i=e.schema.properties,a="object"===s(i)?Object.keys(i):[],c=Array.isArray(e.schema.required)?e.schema.required:[];if(a.length)for(r=0;r<a.length;r++)t=a[r],n=o(e.path,t),e.code("if ("+n+" !== undefined) {"),e.descend(n,i[t]),e.code("}"),c.indexOf(t)>-1&&(e.code("else {"),e.error("required",t),e.code("}"))},T.patternProperties=T.additionalProperties=function(e){var t,r,i,o,a,c,h,u="object"===s(e.schema.properties)?Object.keys(e.schema.properties):[],d=e.schema.patternProperties,p="object"===s(d)?Object.keys(d):[],f=e.schema.additionalProperties,l=f===!1||"object"===s(f);if(p.length||l){for(r=e.declare("[]"),i=e.declare('""'),o=e.declare(0),l&&(a=e.declare(!1)),e.code(r+" = Object.keys("+e.path+")"),e.code("for ("+o+" = 0; "+o+" < "+r+".length; "+o+"++) {")(i+" = "+r+"["+o+"]")("if ("+e.path+"["+i+"] === undefined) {")("continue")("}"),l&&e.code(a+" = false"),h=0;h<p.length;h++)c=p[h],e.code("if (("+n(c)+").test("+i+")) {"),e.descend(e.path+"["+i+"]",d[c]),l&&e.code(a+" = true"),e.code("}");l&&(u.length&&(t=e.declare(JSON.stringify(u)),e.code("if ("+t+".indexOf("+i+") > -1) {")("continue")("}")),e.code("if (!"+a+") {"),f===!1?e.error("additionalProperties",void 0,i):e.descend(e.path+"["+i+"]",f),e.code("}")),e.code("}")}},T.dependencies=function(e){if("object"===s(e.schema.dependencies))for(var t,r,n=Object.keys(e.schema.dependencies),i=n.length,a=0,c=0;c<i;c++){if(t=n[c],r=e.schema.dependencies[t],e.code("if ("+o(e.path,t)+" !== undefined) {"),"object"===s(r))e.descend(e.path,r);else for(a;a<r.length;a++)e.code("if ("+o(e.path,r[a])+" === undefined) {"),e.error("dependencies",r[a]),e.code("}");e.code("}")}},T.allOf=function(e){if(Array.isArray(e.schema.allOf))for(var t=0;t<e.schema.allOf.length;t++)e.descend(e.path,e.schema.allOf[t])},T.anyOf=function(e){if(Array.isArray(e.schema.anyOf)){var t=e.greedy,r=e.declare(0),n=e.declare(0),i=e.declare(!1),o=0;for(e.code(n+" = errors.length");o<e.schema.anyOf.length;o++)e.code("if (!"+i+") {"),e.code(r+" = errors.length"),e.greedy=!0,e.descend(e.path,e.schema.anyOf[o]),e.code(i+" = errors.length === "+r)("}");e.greedy=t,e.code("if (!"+i+") {"),e.error("anyOf"),e.code("} else {")("errors.length = "+n)("}")}},T.oneOf=function(e){if(Array.isArray(e.schema.oneOf)){var t=e.greedy,r=e.declare(0),n=e.declare(0),i=e.declare(0),o=0;for(e.code(n+" = errors.length"),e.code(r+" = 0");o<e.schema.oneOf.length;o++)e.code(i+" = errors.length"),e.greedy=!0,e.descend(e.path,e.schema.oneOf[o]),e.code("if (errors.length === "+i+") {")(r+"++")("}");e.greedy=t,e.code("if ("+r+" !== 1) {"),e.error("oneOf"),e.code("} else {")("errors.length = "+n)("}")}},T.not=function(e){if("object"===s(e.schema.not)){var t=e.greedy,r=e.declare(0);e.code(r+" = errors.length"),e.greedy=!0,e.descend(e.path,e.schema.not),e.greedy=t,e.code("if (errors.length === "+r+") {"),e.error("not"),e.code("} else {")("errors.length = "+r)("}")}},["minimum","exclusiveMinimum","maximum","exclusiveMaximum","multipleOf"].forEach(c.bind(null,"number")),["minLength","maxLength","pattern","format"].forEach(c.bind(null,"string")),["minItems","maxItems","additionalItems","uniqueItems","items"].forEach(c.bind(null,"array")),["maxProperties","minProperties","required","properties","patternProperties","additionalProperties","dependencies"].forEach(c.bind(null,"object")),["enum","allOf","anyOf","oneOf","not"].forEach(c.bind(null,null)),f.prototype.mark=function(e,t){var r,n=this.objects.indexOf(e);return n<0?(this.objects.push(e),r={},r[t]=1,void this.properties.push(r)):(r=this.properties[n],void(r[t]=r[t]?r[t]+1:1))},f.prototype.deleteDuplicates=function(){var e,t,r,n,i;for(n=0;n<this.properties.length;n++)for(e=this.properties[n],t=Object.keys(e),i=0;i<t.length;i++)r=t[i],e[r]>1&&delete this.objects[n][r]},f.prototype.dispose=function(){this.objects.length=0,this.properties.length=0},m.prototype.clone=function(e){var t=new m({schema:e,formats:this.formats,greedy:this.greedy,resolver:this.resolver,id:this.id,funcache:this.funcache,scope:this.scope});return t},m.prototype.declare=function(e){var t=this.id();return this.code.def(t,e),t},m.prototype.cache=function(e,t){var r,n=this.funcache[e];return n||(n=this.funcache[e]={key:this.id()},r=this.clone(t),n.func=r.compile(n.key),this.scope.refs[n.key]=n.func,r.dispose()),"refs."+n.key},m.prototype.error=function(e,t,r){var n=this.schema,o=this.path,s="data"!==o||t?'(path ? path + "." : "") + '+u(o,t)+",":"path,",a=t&&n.properties&&n.properties[t]?this.resolver.resolve(n.properties[t]):null,c=a?a.requiredMessage:n.invalidMessage;c||(c=a&&a.messages&&a.messages[e]||n.messages&&n.messages[e]),this.code("errors.push({"),c&&this.code("message: "+i(c)+","),r&&this.code("additionalProperties: "+r+","),this.code("path: "+s)("keyword: "+i(e))("})"),this.greedy||this.code("return")},m.prototype.refactor=function(e,t,r){var n="data"!==e?'(path ? path + "." : "") + '+u(e):"path",i=this.cache(r,t),o=this.declare();this.code(o+" = "+i+"("+e+", "+n+", errors)"),this.greedy||this.code("if (errors.length) { return }")},m.prototype.descend=function(e,t){var r=this.path,n=this.schema;this.path=e,this.schema=t,this.generate(),this.path=r,this.schema=n},m.prototype.generate=function(){function e(e){T[e](l)}var t,r,o,a,c,u,d,p=this.path,f=this.schema,l=this,m=this.scope;if("object"===s(f)){if(void 0!==f.$ref){if(f=this.resolver.resolve(f),this.resolver.hasRef(f))return void this.refactor(p,f,this.resolver.getNormalizedRef(this.schema)||this.schema.$ref);this.schema=f}if(o=h(f),o["enum"])return void T["enum"](l);for(a=Object.keys(o.perType),d=0;d<a.length;d++)u=a[d],this.code((d?"else ":"")+"if ("+C[u](p)+") {"),o.perType[u].forEach(e),this.code("}"),o.type&&(c=o.type.indexOf(u),c>-1&&o.type.splice(c,1));o.type&&(o.type.length?(this.code((a.length?"else ":"")+"if (!("+o.type.map(function(e){return C[e]?C[e](p):"true"}).join(" || ")+")) {"),this.error("type"),this.code("}")):(this.code("else {"),this.error("type"),this.code("}"))),o.allType.forEach(function(e){T[e](l)}),f.format&&this.formats&&(r=this.formats[f.format],r&&("string"==typeof r||r instanceof RegExp?(this.code("if (!("+n(r)+").test("+p+")) {"),this.error("format"),this.code("}")):"function"==typeof r&&((m.formats||(m.formats={}))[f.format]=r,(m.schemas||(m.schemas={}))[f.format]=f,t=i(f.format),this.code("if (!formats["+t+"]("+p+", schemas["+t+"])) {"),this.error("format"),this.code("}"))))}},m.prototype.compile=function(e){return this.code=E("jsen_compiled"+(e?"_"+e:""),"data","path","errors"),this.generate(),this.code.compile(this.scope)},m.prototype.dispose=function(){for(var e in this)this[e]=void 0},g.browser=x,g.clone=d,g.equal=O,g.unique=P,g.ucs2length=k,g.SchemaResolver=j,g.resolve=j.resolvePointer,e.exports=g},function(e,t){"use strict";e.exports=function(){var e=Array.apply(null,arguments),t=e.shift(),r="  ",n="",i="",o=1,s="{[",a="}]",c=function(){for(var e=r,t=0;t++<o-1;)e+=r;return e},h=function(e){n+=c()+e+"\n"},u=function(e){var t=e[0],r=e[e.length-1];return a.indexOf(t)>-1&&s.indexOf(r)>-1?(o--,h(e),o++):s.indexOf(r)>-1?(h(e),o++):a.indexOf(t)>-1?(o--,h(e)):h(e),u};return u.def=function(e,t){return i+=(i?",\n"+r+"    ":"")+e+(void 0!==t?" = "+t:""),u},u.toSource=function(){return"function "+t+"("+e.join(", ")+") {\n"+r+'"use strict"\n'+(i?r+"var "+i+";\n":"")+n+"}"},u.compile=function(e){var t="return ("+u.toSource()+")",r=e||{},n=Object.keys(r),i=n.map(function(e){return r[e]});return Function.apply(null,n.concat(t)).apply(null,i)},u}},function(e,t){"use strict";function r(e){var t=Object.prototype.toString.call(e);return t.substr(8,t.length-9).toLowerCase()}function n(e,t){var r,n,o=Object.keys(e).sort(),s=Object.keys(t).sort();if(!i(o,s))return!1;for(r=0;r<o.length;r++)if(n=o[r],!i(e[n],t[n]))return!1;return!0}function i(e,t){var o,s=typeof e,a=typeof t;if("object"===s&&(s=r(e)),"object"===a&&(a=r(t)),s!==a)return!1;if("object"===s)return n(e,t);if("regexp"===s)return e.toString()===t.toString();if("array"===s){if(e.length!==t.length)return!1;for(o=0;o<e.length;o++)if(!i(e[o],t[o]))return!1;return!0}return e===t}e.exports=i},function(e,t,r){"use strict";function n(e,t,r){for(var n=0,i=e.length;n<i;n++)if(r(e[n],t))return n;return-1}var i=r(13);e.exports=function(e){return e.filter(function(e,t,r){return n(r,e,i)===t})},e.exports.findIndex=n},function(e,t,r){"use strict";function n(e,t){if(!t.length)return e;var r,i=t.shift();e&&"object"==typeof e&&e.hasOwnProperty(i)&&(r=e[i]);{if(!t.length)return r;if(r&&"object"==typeof r)return n(r,t)}}function i(e){var t=e.indexOf("#"),r={base:e.substr(0,t),path:[]};return t<0?(r.base=e,r):(e=e.substr(t+1))?(r.path=e.split("/").map(function(e){return decodeURIComponent(e).replace(/~1/g,"/").replace(/~0/g,"~")}),"/"===e[0]&&r.path.shift(),r):r}function o(e,t,r,n){this.rootSchema=e,this.resolvers=null,this.resolvedRootSchema=null,this.cache={},this.idCache={},this.refCache={refs:[],schemas:[]},this.missing$Ref=r,this.refStack=[],n=n||"",this._buildIdCache(e,n),n=this.refCache.refs[this.refCache.schemas.indexOf(this.rootSchema)]||n,this._buildResolvers(t,n)}var s=r(16),a=r(23),c="jsen: invalid schema reference",h="jsen: duplicate schema id",u="jsen: circular schema reference";o.prototype._cacheId=function(e,t,r){if(this.idCache[e])throw new Error(h+" "+e);this.idCache[e]={resolver:r,schema:t}},o.prototype._buildIdCache=function(e,t){var r,n,i,o=t;if(e&&"object"==typeof e)for("string"==typeof e.id&&e.id?(o=s.resolve(t,e.id),this._cacheId(o,e,this)):e===this.rootSchema&&t&&this._cacheId(t,e,this),e.$ref&&"string"==typeof e.$ref&&(r=s.resolve(o,e.$ref),this.refCache.schemas.push(e),this.refCache.refs.push(r)),n=Object.keys(e),i=0;i<n.length;i++)this._buildIdCache(e[n[i]],o)},o.prototype._buildResolvers=function(e,t){if(e&&"object"==typeof e){var r=this,n={};Object.keys(e).forEach(function(i){var a=s.resolve(t,i),c=new o(e[i],null,r.missing$Ref,a);r._cacheId(a,c.rootSchema,c),Object.keys(c.idCache).forEach(function(e){r.idCache[e]=c.idCache[e]}),n[i]=c}),this.resolvers=n}},o.prototype.getNormalizedRef=function(e){var t=this.refCache.schemas.indexOf(e);return this.refCache.refs[t]},o.prototype._resolveRef=function(e){var t,r,o,s,h,u=new Error(c+" "+e),d=this.idCache;if(!e||"string"!=typeof e)throw u;if(e===a.id&&(h=a),r=d[e],r&&(h=r.resolver.resolve(r.schema)),void 0===h&&(o=i(e),s=o.path,o.base&&(r=d[o.base]||d[o.base+"#"],r?h=r.resolver.resolve(n(r.schema,s.slice(0))):s.unshift(o.base))),void 0===h&&this.resolvedRootSchema&&(h=n(this.resolvedRootSchema,s.slice(0))),void 0===h&&(h=n(this.rootSchema,s.slice(0))),void 0===h&&s.length&&this.resolvers&&(t=n(this.resolvers,s),t&&(h=t.resolve(t.rootSchema))),void 0===h||"object"!=typeof h){if(!this.missing$Ref)throw u;h={}}return this.cache[e]===h?h:(this.cache[e]=h,void 0!==h.$ref&&(h=this.resolve(h)),h)},o.prototype.resolve=function(e){if(!e||"object"!=typeof e||void 0===e.$ref)return e;var t=this.getNormalizedRef(e)||e.$ref,r=this.cache[t];if(void 0!==r)return r;if(this.refStack.indexOf(t)>-1)throw new Error(u+" "+t);return this.refStack.push(t),r=this._resolveRef(t),this.refStack.pop(),e===this.rootSchema&&(this.resolvedRootSchema=r),r},o.prototype.hasRef=function(e){var t,r,n,i,o=Object.keys(e);if(o.indexOf("$ref")>-1)return!0;for(n=0,t=o.length;n<t;n++)if(r=o[n],e[r]&&"object"==typeof e[r]&&!Array.isArray(e[r])&&(i=this.hasRef(e[r])))return!0;return!1},o.resolvePointer=function(e,t){var r=i(t),o=r.path;return r.base&&(o=[r.base].concat(o)),n(e,o)},e.exports=o},function(e,t,r){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";function n(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}function i(e,t,r){if(e&&h.isObject(e)&&e instanceof n)return e;var i=new n;return i.parse(e,t,r),i}function o(e){return h.isString(e)&&(e=i(e)),e instanceof n?e.format():n.prototype.format.call(e)}function s(e,t){return i(e,!1,!0).resolve(t)}function a(e,t){return e?i(e,!1,!0).resolveObject(t):t}var c=r(17),h=r(19);t.parse=i,t.resolve=s,t.resolveObject=a,t.format=o,t.Url=n;var u=/^([a-z0-9.+-]+:)/i,d=/:[0-9]*$/,p=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,f=["<",">",'"',"`"," ","\r","\n","\t"],l=["{","}","|","\\","^","`"].concat(f),m=["'"].concat(l),g=["%","/","?",";","#"].concat(m),v=["/","?","#"],y=255,b=/^[+a-z0-9A-Z_-]{0,63}$/,w=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,x={javascript:!0,"javascript:":!0},A={javascript:!0,"javascript:":!0},E={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},O=r(20);n.prototype.parse=function(e,t,r){if(!h.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var n=e.indexOf("?"),i=n!==-1&&n<e.indexOf("#")?"?":"#",o=e.split(i),s=/\\/g;o[0]=o[0].replace(s,"/"),e=o.join(i);var a=e;if(a=a.trim(),!r&&1===e.split("#").length){var d=p.exec(a);if(d)return this.path=a,this.href=a,this.pathname=d[1],d[2]?(this.search=d[2],t?this.query=O.parse(this.search.substr(1)):this.query=this.search.substr(1)):t&&(this.search="",this.query={}),this}var f=u.exec(a);if(f){f=f[0];var l=f.toLowerCase();this.protocol=l,a=a.substr(f.length)}if(r||f||a.match(/^\/\/[^@\/]+@[^@\/]+/)){var P="//"===a.substr(0,2);!P||f&&A[f]||(a=a.substr(2),this.slashes=!0)}if(!A[f]&&(P||f&&!E[f])){for(var j=-1,I=0;I<v.length;I++){var k=a.indexOf(v[I]);k!==-1&&(j===-1||k<j)&&(j=k)}var C,T;T=j===-1?a.lastIndexOf("@"):a.lastIndexOf("@",j),T!==-1&&(C=a.slice(0,T),a=a.slice(T+1),this.auth=decodeURIComponent(C)),j=-1;for(var I=0;I<g.length;I++){var k=a.indexOf(g[I]);k!==-1&&(j===-1||k<j)&&(j=k)}j===-1&&(j=a.length),this.host=a.slice(0,j),a=a.slice(j),this.parseHost(),this.hostname=this.hostname||"";var S="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!S)for(var q=this.hostname.split(/\./),I=0,R=q.length;I<R;I++){var F=q[I];if(F&&!F.match(b)){for(var M="",$=0,U=F.length;$<U;$++)M+=F.charCodeAt($)>127?"x":F[$];if(!M.match(b)){var N=q.slice(0,I),L=q.slice(I+1),W=F.match(w);W&&(N.push(W[1]),L.unshift(W[2])),L.length&&(a="/"+L.join(".")+a),this.hostname=N.join(".");break}}}this.hostname.length>y?this.hostname="":this.hostname=this.hostname.toLowerCase(),S||(this.hostname=c.toASCII(this.hostname));var z=this.port?":"+this.port:"",_=this.hostname||"";this.host=_+z,this.href+=this.host,S&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==a[0]&&(a="/"+a))}if(!x[l])for(var I=0,R=m.length;I<R;I++){var H=m[I];if(a.indexOf(H)!==-1){var D=encodeURIComponent(H);D===H&&(D=escape(H)),a=a.split(H).join(D)}}var J=a.indexOf("#");J!==-1&&(this.hash=a.substr(J),a=a.slice(0,J));var Y=a.indexOf("?");if(Y!==-1?(this.search=a.substr(Y),this.query=a.substr(Y+1),t&&(this.query=O.parse(this.query)),a=a.slice(0,Y)):t&&(this.search="",this.query={}),a&&(this.pathname=a),E[l]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){var z=this.pathname||"",Z=this.search||"";this.path=z+Z}return this.href=this.format(),this},n.prototype.format=function(){var e=this.auth||"";e&&(e=encodeURIComponent(e),e=e.replace(/%3A/i,":"),e+="@");var t=this.protocol||"",r=this.pathname||"",n=this.hash||"",i=!1,o="";this.host?i=e+this.host:this.hostname&&(i=e+(this.hostname.indexOf(":")===-1?this.hostname:"["+this.hostname+"]"),this.port&&(i+=":"+this.port)),this.query&&h.isObject(this.query)&&Object.keys(this.query).length&&(o=O.stringify(this.query));var s=this.search||o&&"?"+o||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||E[t])&&i!==!1?(i="//"+(i||""),r&&"/"!==r.charAt(0)&&(r="/"+r)):i||(i=""),n&&"#"!==n.charAt(0)&&(n="#"+n),s&&"?"!==s.charAt(0)&&(s="?"+s),r=r.replace(/[?#]/g,function(e){return encodeURIComponent(e)}),s=s.replace("#","%23"),t+i+r+s+n},n.prototype.resolve=function(e){return this.resolveObject(i(e,!1,!0)).format()},n.prototype.resolveObject=function(e){if(h.isString(e)){var t=new n;t.parse(e,!1,!0),e=t}for(var r=new n,i=Object.keys(this),o=0;o<i.length;o++){var s=i[o];r[s]=this[s]}if(r.hash=e.hash,""===e.href)return r.href=r.format(),r;if(e.slashes&&!e.protocol){for(var a=Object.keys(e),c=0;c<a.length;c++){var u=a[c];"protocol"!==u&&(r[u]=e[u])}return E[r.protocol]&&r.hostname&&!r.pathname&&(r.path=r.pathname="/"),r.href=r.format(),r}if(e.protocol&&e.protocol!==r.protocol){if(!E[e.protocol]){for(var d=Object.keys(e),p=0;p<d.length;p++){var f=d[p];r[f]=e[f]}return r.href=r.format(),r}if(r.protocol=e.protocol,e.host||A[e.protocol])r.pathname=e.pathname;else{for(var l=(e.pathname||"").split("/");l.length&&!(e.host=l.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==l[0]&&l.unshift(""),l.length<2&&l.unshift(""),r.pathname=l.join("/")}if(r.search=e.search,r.query=e.query,r.host=e.host||"",r.auth=e.auth,r.hostname=e.hostname||e.host,r.port=e.port,r.pathname||r.search){var m=r.pathname||"",g=r.search||"";r.path=m+g}return r.slashes=r.slashes||e.slashes,r.href=r.format(),r}var v=r.pathname&&"/"===r.pathname.charAt(0),y=e.host||e.pathname&&"/"===e.pathname.charAt(0),b=y||v||r.host&&e.pathname,w=b,x=r.pathname&&r.pathname.split("/")||[],l=e.pathname&&e.pathname.split("/")||[],O=r.protocol&&!E[r.protocol];if(O&&(r.hostname="",r.port=null,r.host&&(""===x[0]?x[0]=r.host:x.unshift(r.host)),r.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===l[0]?l[0]=e.host:l.unshift(e.host)),e.host=null),b=b&&(""===l[0]||""===x[0])),y)r.host=e.host||""===e.host?e.host:r.host,r.hostname=e.hostname||""===e.hostname?e.hostname:r.hostname,r.search=e.search,r.query=e.query,x=l;else if(l.length)x||(x=[]),x.pop(),x=x.concat(l),r.search=e.search,r.query=e.query;else if(!h.isNullOrUndefined(e.search)){if(O){r.hostname=r.host=x.shift();var P=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@");P&&(r.auth=P.shift(),r.host=r.hostname=P.shift())}return r.search=e.search,r.query=e.query,h.isNull(r.pathname)&&h.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.href=r.format(),r}if(!x.length)return r.pathname=null,r.search?r.path="/"+r.search:r.path=null,r.href=r.format(),r;for(var j=x.slice(-1)[0],I=(r.host||e.host||x.length>1)&&("."===j||".."===j)||""===j,k=0,C=x.length;C>=0;C--)j=x[C],"."===j?x.splice(C,1):".."===j?(x.splice(C,1),k++):k&&(x.splice(C,1),k--);if(!b&&!w)for(;k--;k)x.unshift("..");!b||""===x[0]||x[0]&&"/"===x[0].charAt(0)||x.unshift(""),I&&"/"!==x.join("/").substr(-1)&&x.push("");var T=""===x[0]||x[0]&&"/"===x[0].charAt(0);if(O){r.hostname=r.host=T?"":x.length?x.shift():"";var P=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@");P&&(r.auth=P.shift(),r.host=r.hostname=P.shift())}return b=b||r.host&&x.length,b&&!T&&x.unshift(""),x.length?r.pathname=x.join("/"):(r.pathname=null,r.path=null),h.isNull(r.pathname)&&h.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.auth=e.auth||r.auth,r.slashes=r.slashes||e.slashes,r.href=r.format(),r},n.prototype.parseHost=function(){var e=this.host,t=d.exec(e);t&&(t=t[0],":"!==t&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},function(e,t,r){var n;(function(e,i){!function(o){function s(e){throw RangeError(q[e])}function a(e,t){for(var r=e.length,n=[];r--;)n[r]=t(e[r]);return n}function c(e,t){var r=e.split("@"),n="";r.length>1&&(n=r[0]+"@",e=r[1]),e=e.replace(S,".");var i=e.split("."),o=a(i,t).join(".");return n+o}function h(e){for(var t,r,n=[],i=0,o=e.length;i<o;)t=e.charCodeAt(i++),t>=55296&&t<=56319&&i<o?(r=e.charCodeAt(i++),56320==(64512&r)?n.push(((1023&t)<<10)+(1023&r)+65536):(n.push(t),i--)):n.push(t);return n}function u(e){return a(e,function(e){var t="";return e>65535&&(e-=65536,t+=M(e>>>10&1023|55296),e=56320|1023&e),t+=M(e)}).join("")}function d(e){return e-48<10?e-22:e-65<26?e-65:e-97<26?e-97:x}function p(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function f(e,t,r){var n=0;for(e=r?F(e/P):e>>1,e+=F(e/t);e>R*E>>1;n+=x)e=F(e/R);return F(n+(R+1)*e/(e+O))}function l(e){var t,r,n,i,o,a,c,h,p,l,m=[],g=e.length,v=0,y=I,b=j;for(r=e.lastIndexOf(k),r<0&&(r=0),n=0;n<r;++n)e.charCodeAt(n)>=128&&s("not-basic"),m.push(e.charCodeAt(n));for(i=r>0?r+1:0;i<g;){for(o=v,a=1,c=x;i>=g&&s("invalid-input"),h=d(e.charCodeAt(i++)),(h>=x||h>F((w-v)/a))&&s("overflow"),v+=h*a,p=c<=b?A:c>=b+E?E:c-b,!(h<p);c+=x)l=x-p,a>F(w/l)&&s("overflow"),a*=l;t=m.length+1,b=f(v-o,t,0==o),F(v/t)>w-y&&s("overflow"),y+=F(v/t),v%=t,m.splice(v++,0,y)}return u(m)}function m(e){var t,r,n,i,o,a,c,u,d,l,m,g,v,y,b,O=[];for(e=h(e),g=e.length,t=I,r=0,o=j,a=0;a<g;++a)m=e[a],m<128&&O.push(M(m));for(n=i=O.length,i&&O.push(k);n<g;){for(c=w,a=0;a<g;++a)m=e[a],m>=t&&m<c&&(c=m);for(v=n+1,c-t>F((w-r)/v)&&s("overflow"),r+=(c-t)*v,t=c,a=0;a<g;++a)if(m=e[a],m<t&&++r>w&&s("overflow"),m==t){for(u=r,d=x;l=d<=o?A:d>=o+E?E:d-o,!(u<l);d+=x)b=u-l,y=x-l,O.push(M(p(l+b%y,0))),u=F(b/y);O.push(M(p(u,0))),o=f(r,v,n==i),r=0,++n}++r,++t}return O.join("")}function g(e){return c(e,function(e){return C.test(e)?l(e.slice(4).toLowerCase()):e})}function v(e){return c(e,function(e){return T.test(e)?"xn--"+m(e):e})}var y=("object"==typeof t&&t&&!t.nodeType&&t,"object"==typeof e&&e&&!e.nodeType&&e,"object"==typeof i&&i);y.global!==y&&y.window!==y&&y.self!==y||(o=y);var b,w=2147483647,x=36,A=1,E=26,O=38,P=700,j=72,I=128,k="-",C=/^xn--/,T=/[^\x20-\x7E]/,S=/[\x2E\u3002\uFF0E\uFF61]/g,q={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},R=x-A,F=Math.floor,M=String.fromCharCode;b={version:"1.3.2",ucs2:{decode:h,encode:u},decode:l,encode:m,toASCII:v,toUnicode:g},n=function(){return b}.call(t,r,t,e),!(void 0!==n&&(e.exports=n))}(this)}).call(t,r(18)(e),function(){return this}())},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children=[],e.webpackPolyfill=1),e}},function(e,t){"use strict";e.exports={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}},function(e,t,r){"use strict";t.decode=t.parse=r(21),t.encode=t.stringify=r(22)},function(e,t){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";function r(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,t,n,i){t=t||"&",n=n||"=";var o={};if("string"!=typeof e||0===e.length)return o;var s=/\+/g;e=e.split(t);var a=1e3;i&&"number"==typeof i.maxKeys&&(a=i.maxKeys);var c=e.length;a>0&&c>a&&(c=a);for(var h=0;h<c;++h){var u,d,p,f,l=e[h].replace(s,"%20"),m=l.indexOf(n);m>=0?(u=l.substr(0,m),d=l.substr(m+1)):(u=l,d=""),p=decodeURIComponent(u),f=decodeURIComponent(d),r(o,p)?Array.isArray(o[p])?o[p].push(f):o[p]=[o[p],f]:o[p]=f}return o}},function(e,t){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";var r=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,t,n,i){return t=t||"&",n=n||"=",null===e&&(e=void 0),"object"==typeof e?Object.keys(e).map(function(i){var o=encodeURIComponent(r(i))+n;return Array.isArray(e[i])?e[i].map(function(e){return o+encodeURIComponent(r(e))}).join(t):o+encodeURIComponent(r(e[i]))}).join(t):i?encodeURIComponent(r(i))+n+encodeURIComponent(r(e)):""}},function(e,t){e.exports={id:"http://json-schema.org/draft-04/schema#",$schema:"http://json-schema.org/draft-04/schema#",description:"Core schema meta-schema",definitions:{schemaArray:{type:"array",minItems:1,items:{$ref:"#"}},positiveInteger:{type:"integer",minimum:0},positiveIntegerDefault0:{allOf:[{$ref:"#/definitions/positiveInteger"},{"default":0}]},simpleTypes:{"enum":["array","boolean","integer","null","number","object","string"]},stringArray:{type:"array",items:{type:"string"},minItems:1,uniqueItems:!0}},type:"object",properties:{id:{type:"string",format:"uri"},$schema:{type:"string",format:"uri"},title:{type:"string"},description:{type:"string"},"default":{},multipleOf:{type:"number",minimum:0,exclusiveMinimum:!0},maximum:{type:"number"},exclusiveMaximum:{type:"boolean","default":!1},minimum:{type:"number"},exclusiveMinimum:{type:"boolean","default":!1},maxLength:{$ref:"#/definitions/positiveInteger"},minLength:{$ref:"#/definitions/positiveIntegerDefault0"},pattern:{type:"string",format:"regex"},additionalItems:{anyOf:[{type:"boolean"},{$ref:"#"}],"default":{}},items:{anyOf:[{$ref:"#"},{$ref:"#/definitions/schemaArray"}],"default":{}},maxItems:{$ref:"#/definitions/positiveInteger"},minItems:{$ref:"#/definitions/positiveIntegerDefault0"},uniqueItems:{type:"boolean","default":!1},maxProperties:{$ref:"#/definitions/positiveInteger"},minProperties:{$ref:"#/definitions/positiveIntegerDefault0"},required:{$ref:"#/definitions/stringArray"},additionalProperties:{anyOf:[{type:"boolean"},{$ref:"#"}],"default":{}},definitions:{type:"object",additionalProperties:{$ref:"#"},"default":{}},properties:{type:"object",additionalProperties:{$ref:"#"},"default":{}},patternProperties:{type:"object",additionalProperties:{$ref:"#"},"default":{}},dependencies:{type:"object",additionalProperties:{anyOf:[{$ref:"#"},{$ref:"#/definitions/stringArray"}]}},"enum":{type:"array",minItems:1,uniqueItems:!0},type:{anyOf:[{$ref:"#/definitions/simpleTypes"},{type:"array",items:{$ref:"#/definitions/simpleTypes"},minItems:1,uniqueItems:!0}]},allOf:{$ref:"#/definitions/schemaArray"},anyOf:{$ref:"#/definitions/schemaArray"},oneOf:{$ref:"#/definitions/schemaArray"},not:{$ref:"#"}},dependencies:{exclusiveMaximum:["maximum"],exclusiveMinimum:["minimum"]},"default":{}}},function(e,t){"use strict";var r={};r["date-time"]=/(\d\d\d\d)(-)?(\d\d)(-)?(\d\d)(T)?(\d\d)(:)?(\d\d)(:)?(\d\d)(\.\d+)?(Z|([+-])(\d\d)(:)?(\d\d))/,r.uri=/^([a-zA-Z][a-zA-Z0-9+-.]*:){0,1}\/\/[^\s]*$/,r.email=/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,r.ipv4=/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,r.ipv6=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|[fF][eE]80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::([fF]{4}(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/,r.hostname=/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])(\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]))*$/,e.exports=r},function(e,t){"use strict";function r(e){for(var t,r,n=0,i=0,o=e.length;i<o;)n++,t=e.charCodeAt(i++),t>=55296&&t<=56319&&i<o&&(r=e.charCodeAt(i++),56320!==(64512&r)&&i--);return n}e.exports=r}])})},function(e,t){var r=function(){function e(e,t,r){this.report=e,this.name=t,this.displayName=r}return e.prototype.getFilters=function(){return this.report.service.hpm.get("/report/pages/"+this.name+"/filters",{uid:this.report.config.uniqueId},this.report.iframe.contentWindow).then(function(e){return e.body},function(e){throw e.body})},e.prototype.removeFilters=function(){return this.setFilters([])},e.prototype.setActive=function(){var e={name:this.name,displayName:null};return this.report.service.hpm.put("/report/pages/active",e,{uid:this.report.config.uniqueId},this.report.iframe.contentWindow)["catch"](function(e){throw e.body})},e.prototype.setFilters=function(e){return this.report.service.hpm.put("/report/pages/"+this.name+"/filters",e,{uid:this.report.config.uniqueId},this.report.iframe.contentWindow)["catch"](function(e){throw e.body})},e}();t.Page=r},function(e,t,r){var n=this&&this.__extends||function(e,t){function r(){this.constructor=e}for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)},i=r(5),o=r(2),s=function(e){function t(t,r,n){e.call(this,t,r,n)}return n(t,e),t.prototype.getId=function(){var e=this.createConfig&&this.createConfig.datasetId?this.createConfig.datasetId:t.findIdFromEmbedUrl(this.config.embedUrl);if("string"!=typeof e||0===e.length)throw new Error("Dataset id is required, but it was not found. You must provide an id either as part of embed configuration.");return e},t.prototype.validate=function(e){return i.validateCreateReport(e)},t.findIdFromEmbedUrl=function(e){var t,r=/datasetId="?([^&]+)"?/,n=e.match(r);return n&&(t=n[1]),t},t}(o.Embed);t.Create=s},function(e,t,r){var n=this&&this.__extends||function(e,t){function r(){this.constructor=e}for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)},i=r(2),o=r(5),s=function(e){function t(r,n,i){e.call(this,r,n,i),this.loadPath="/dashboard/load",Array.prototype.push.apply(this.allowedEvents,t.allowedEvents)}return n(t,e),t.findIdFromEmbedUrl=function(e){var t,r=/dashboardId="?([^&]+)"?/,n=e.match(r);return n&&(t=n[1]),t},t.prototype.getId=function(){var e=this.config.id||this.element.getAttribute(t.dashboardIdAttribute)||t.findIdFromEmbedUrl(this.config.embedUrl);if("string"!=typeof e||0===e.length)throw new Error("Dashboard id is required, but it was not found. You must provide an id either as part of embed configuration or as attribute '"+t.dashboardIdAttribute+"'.");return e},t.prototype.validate=function(e){var t=o.validateDashboardLoad(e);return t?t:this.ValidatePageView(e.pageView)},t.prototype.ValidatePageView=function(e){if(e&&"fitToWidth"!==e&&"oneColumn"!==e&&"actualSize"!==e)return[{message:"pageView must be one of the followings: fitToWidth, oneColumn, actualSize"}]},t.allowedEvents=["tileClicked","error"],t.dashboardIdAttribute="powerbi-dashboard-id",t.typeAttribute="powerbi-type",t.type="Dashboard",t}(i.Embed);t.Dashboard=s},function(e,t,r){var n=this&&this.__extends||function(e,t){function r(){this.constructor=e}for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)},i=r(5),o=r(2),s=function(e){function t(r,n,i){var o=i.embedUrl,s=o.indexOf("?")>0,a=s?"&":"?";o=o+a+"dashboardId="+i.dashboardId+"&tileId="+i.id,i.embedUrl=o,e.call(this,r,n,i),Array.prototype.push.apply(this.allowedEvents,t.allowedEvents),window.addEventListener("message",this.receiveMessage.bind(this),!1)}return n(t,e),t.prototype.getId=function(){var e=this.config.id||t.findIdFromEmbedUrl(this.config.embedUrl);if("string"!=typeof e||0===e.length)throw new Error("Tile id is required, but it was not found. You must provide an id either as part of embed configuration.");return e},t.prototype.validate=function(e){return i.validateReportLoad(e)},t.prototype.load=function(e){var t=this.validate(e);if(t)throw t;var r=e.height?e.height:this.iframe.offsetHeight,n=e.width?e.width:this.iframe.offsetWidth,i=e.action?e.action:"loadTile",o={action:i,height:r,width:n,accessToken:e.accessToken,tokenType:e.tokenType};return this.iframe.contentWindow.postMessage(JSON.stringify(o),"*"),new Promise(function(){})},t.findIdFromEmbedUrl=function(e){var t,r=/tileId="?([^&]+)"?/,n=e.match(r);return n&&(t=n[1]),t},t.prototype.receiveMessage=function(e){if(e.data)try{var t=JSON.parse(e.data),r={navigationUrl:t.navigationUrl,errors:t.error,openReport:t.openReport},n={type:"tile",id:this.config.uniqueId,name:t.event,value:r};this.service.handleTileEvents(n)}catch(i){return void console.log("invalid message data")}},t.type="Tile",t.allowedEvents=["tileClicked","tileLoaded"],t}(o.Embed);t.Tile=s},function(e,t,r){var n=r(11),i=r(12),o=r(13),s=r(14);t.hpmFactory=function(e,t,r,i){return void 0===r&&(r=n["default"].version),void 0===i&&(i=n["default"].type),new o.HttpPostMessage(e,{"x-sdk-type":i,"x-sdk-version":r},t)},t.wpmpFactory=function(e,t,r){return new i.WindowPostMessageProxy({processTrackingProperties:{addTrackingProperties:o.HttpPostMessage.addTrackingProperties,getTrackingProperties:o.HttpPostMessage.getTrackingProperties},isErrorMessage:o.HttpPostMessage.isErrorMessage,name:e,logMessages:t,eventSourceOverrideWindow:r})},t.routerFactory=function(e){return new s.Router(e)}},function(e,t){var r={version:"2.3.1",type:"js"};Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},function(e,t,r){/*! window-post-message-proxy v0.2.4 | (c) 2016 Microsoft Corporation MIT */
!function(t,r){e.exports=r()}(this,function(){return function(e){function t(n){if(r[n])return r[n].exports;var i=r[n]={exports:{},id:n,loaded:!1};return e[n].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}([function(e,t){"use strict";var r=function(){function e(t){var r=this;void 0===t&&(t={processTrackingProperties:{addTrackingProperties:e.defaultAddTrackingProperties,getTrackingProperties:e.defaultGetTrackingProperties},isErrorMessage:e.defaultIsErrorMessage,receiveWindow:window,name:e.createRandomString()}),this.pendingRequestPromises={},this.addTrackingProperties=t.processTrackingProperties&&t.processTrackingProperties.addTrackingProperties||e.defaultAddTrackingProperties,this.getTrackingProperties=t.processTrackingProperties&&t.processTrackingProperties.getTrackingProperties||e.defaultGetTrackingProperties,this.isErrorMessage=t.isErrorMessage||e.defaultIsErrorMessage,this.receiveWindow=t.receiveWindow||window,this.name=t.name||e.createRandomString(),this.logMessages=t.logMessages||!1,this.eventSourceOverrideWindow=t.eventSourceOverrideWindow,this.suppressWarnings=t.suppressWarnings||!1,this.logMessages&&console.log("new WindowPostMessageProxy created with name: "+this.name+" receiving on window: "+this.receiveWindow.document.title),this.handlers=[],this.windowMessageHandler=function(e){return r.onMessageReceived(e)},this.start()}return e.defaultAddTrackingProperties=function(t,r){return t[e.messagePropertyName]=r,t},e.defaultGetTrackingProperties=function(t){return t[e.messagePropertyName]},e.defaultIsErrorMessage=function(e){return!!e.error},e.createDeferred=function(){var e={resolve:null,reject:null,promise:null},t=new Promise(function(t,r){e.resolve=t,e.reject=r});return e.promise=t,e},e.createRandomString=function(){return(Math.random()+1).toString(36).substring(7)},e.prototype.addHandler=function(e){this.handlers.push(e)},e.prototype.removeHandler=function(e){var t=this.handlers.indexOf(e);if(t===-1)throw new Error("You attempted to remove a handler but no matching handler was found.");this.handlers.splice(t,1)},e.prototype.start=function(){this.receiveWindow.addEventListener("message",this.windowMessageHandler)},e.prototype.stop=function(){this.receiveWindow.removeEventListener("message",this.windowMessageHandler)},e.prototype.postMessage=function(t,r){var n={id:e.createRandomString()};this.addTrackingProperties(r,n),this.logMessages&&(console.log(this.name+" Posting message:"),console.log(JSON.stringify(r,null,"  "))),t.postMessage(r,"*");var i=e.createDeferred();return this.pendingRequestPromises[n.id]=i,i.promise},e.prototype.sendResponse=function(e,t,r){this.addTrackingProperties(t,r),this.logMessages&&(console.log(this.name+" Sending response:"),console.log(JSON.stringify(t,null,"  "))),e.postMessage(t,"*")},e.prototype.onMessageReceived=function(e){var t=this;this.logMessages&&(console.log(this.name+" Received message:"),console.log("type: "+e.type),console.log(JSON.stringify(e.data,null,"  ")));var r=this.eventSourceOverrideWindow||e.source,n=e.data;if("object"!=typeof n)return void(this.suppressWarnings||console.warn("Proxy("+this.name+"): Received message that was not an object. Discarding message"));var i;try{i=this.getTrackingProperties(n)}catch(o){this.suppressWarnings||console.warn("Proxy("+this.name+"): Error occurred when attempting to get tracking properties from incoming message:",JSON.stringify(n,null,"  "),"Error: ",o)}var s;if(i&&(s=this.pendingRequestPromises[i.id]),s){var a=!0;try{a=this.isErrorMessage(n)}catch(o){console.warn("Proxy("+this.name+") Error occurred when trying to determine if message is consider an error response. Message: ",JSON.stringify(n,null,""),"Error: ",o)}a?s.reject(n):s.resolve(n),delete this.pendingRequestPromises[i.id]}else{var c=this.handlers.some(function(e){var o=!1;try{o=e.test(n)}catch(s){t.suppressWarnings||console.warn("Proxy("+t.name+"): Error occurred when handler was testing incoming message:",JSON.stringify(n,null,"  "),"Error: ",s)}if(o){var a=void 0;try{a=Promise.resolve(e.handle(n))}catch(s){t.suppressWarnings||console.warn("Proxy("+t.name+"): Error occurred when handler was processing incoming message:",JSON.stringify(n,null,"  "),"Error: ",s),a=Promise.resolve()}return a.then(function(e){if(!e){var o="Handler for message: "+JSON.stringify(n,null,"  ")+" did not return a response message. The default response message will be returned instead.";t.suppressWarnings||console.warn("Proxy("+t.name+"): "+o),e={warning:o}}t.sendResponse(r,e,i)}),!0}});c||this.suppressWarnings||console.warn("Proxy("+this.name+") did not handle message. Handlers: "+this.handlers.length+"  Message: "+JSON.stringify(n,null,"")+".")}},e.messagePropertyName="windowPostMessageProxy",e}();t.WindowPostMessageProxy=r}])})},function(e,t,r){/*! http-post-message v0.2.3 | (c) 2016 Microsoft Corporation MIT */
!function(t,r){e.exports=r()}(this,function(){return function(e){function t(n){if(r[n])return r[n].exports;var i=r[n]={exports:{},id:n,loaded:!1};return e[n].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}([function(e,t){"use strict";var r=function(){function e(e,t,r){void 0===t&&(t={}),this.defaultHeaders=t,this.defaultTargetWindow=r,this.windowPostMessageProxy=e}return e.addTrackingProperties=function(e,t){return e.headers=e.headers||{},t&&t.id&&(e.headers.id=t.id),e},e.getTrackingProperties=function(e){return{id:e.headers&&e.headers.id}},e.isErrorMessage=function(e){return"number"==typeof(e&&e.statusCode)&&!(200<=e.statusCode&&e.statusCode<300)},e.prototype.get=function(e,t,r){return void 0===t&&(t={}),void 0===r&&(r=this.defaultTargetWindow),this.send({method:"GET",url:e,headers:t},r)},e.prototype.post=function(e,t,r,n){return void 0===r&&(r={}),void 0===n&&(n=this.defaultTargetWindow),this.send({method:"POST",url:e,headers:r,body:t},n)},e.prototype.put=function(e,t,r,n){return void 0===r&&(r={}),void 0===n&&(n=this.defaultTargetWindow),this.send({method:"PUT",url:e,headers:r,body:t},n)},e.prototype.patch=function(e,t,r,n){return void 0===r&&(r={}),void 0===n&&(n=this.defaultTargetWindow),this.send({method:"PATCH",url:e,headers:r,body:t},n)},e.prototype["delete"]=function(e,t,r,n){return void 0===t&&(t=null),void 0===r&&(r={}),void 0===n&&(n=this.defaultTargetWindow),this.send({method:"DELETE",url:e,headers:r,body:t},n)},e.prototype.send=function(e,t){if(void 0===t&&(t=this.defaultTargetWindow),e.headers=this.assign({},this.defaultHeaders,e.headers),!t)throw new Error("target window is not provided.  You must either provide the target window explicitly as argument to request, or specify default target window when constructing instance of this class.");return this.windowPostMessageProxy.postMessage(t,e)},e.prototype.assign=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];if(void 0===e||null===e)throw new TypeError("Cannot convert undefined or null to object");var n=Object(e);return t.forEach(function(e){if(void 0!==e&&null!==e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t])}),n},e}();t.HttpPostMessage=r}])})},function(e,t,r){/*! powerbi-router v0.1.5 | (c) 2016 Microsoft Corporation MIT */
!function(t,r){e.exports=r()}(this,function(){return function(e){function t(n){if(r[n])return r[n].exports;var i=r[n]={exports:{},id:n,loaded:!1};return e[n].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}([function(e,t,r){"use strict";var n=r(1),i=function(){function e(e){this.handlers=e,this.getRouteRecognizer=new n,this.patchRouteRecognizer=new n,this.postRouteRecognizer=new n,this.putRouteRecognizer=new n,this.deleteRouteRecognizer=new n}return e.prototype.get=function(e,t){return this.registerHandler(this.getRouteRecognizer,"GET",e,t),this},e.prototype.patch=function(e,t){return this.registerHandler(this.patchRouteRecognizer,"PATCH",e,t),this},e.prototype.post=function(e,t){return this.registerHandler(this.postRouteRecognizer,"POST",e,t),this},e.prototype.put=function(e,t){return this.registerHandler(this.putRouteRecognizer,"PUT",e,t),this},e.prototype["delete"]=function(e,t){return this.registerHandler(this.deleteRouteRecognizer,"DELETE",e,t),this},e.prototype.registerHandler=function(e,t,r,n){var i=function(e){var t=new o;return Promise.resolve(n(e,t)).then(function(e){return t})};e.add([{path:r,handler:i}]);var s={test:function(r){if(r.method!==t)return!1;var n=e.recognize(r.url);if(void 0===n)return!1;var i=n[0];return r.params=i.params,r.queryParams=n.queryParams,r.handler=i.handler,!0},handle:function(e){return e.handler(e)}};this.handlers.addHandler(s)},e}();t.Router=i;var o=function(){function e(){this.statusCode=200,this.headers={},this.body=null}return e.prototype.send=function(e,t){this.statusCode=e,this.body=t},e}();t.Response=o},function(e,t,r){var n;(function(e){(function(){"use strict";function i(e,t,r){this.path=e,this.matcher=t,this.delegate=r}function o(e){this.routes={},this.children={},this.target=e}function s(e,t,r){return function(n,o){var a=e+n;return o?void o(s(a,t,r)):new i(e+n,t,r)}}function a(e,t,r){for(var n=0,i=0;i<e.length;i++)n+=e[i].path.length;t=t.substr(n);var o={path:t,handler:r};e.push(o)}function c(e,t,r,n){var i=t.routes;for(var o in i)if(i.hasOwnProperty(o)){var s=e.slice();a(s,o,i[o]),t.children[o]?c(s,t.children[o],r,n):r.call(n,s)}}function h(e){return"[object Array]"===Object.prototype.toString.call(e)}function u(e){this.string=e}function d(e){this.name=e}function p(e){this.name=e}function f(){}function l(e,t,r){"/"===e.charAt(0)&&(e=e.substr(1));var n=e.split("/"),i=new Array(n.length);r.val="";for(var o=0;o<n.length;o++){var s,a=n[o];(s=a.match(/^:([^\/]+)$/))?(i[o]=new d(s[1]),t.push(s[1]),r.val+="3"):(s=a.match(/^\*([^\/]+)$/))?(i[o]=new p(s[1]),r.val+="1",t.push(s[1])):""===a?(i[o]=new f,r.val+="2"):(i[o]=new u(a),r.val+="4")}return r.val=+r.val,i}function m(e){this.charSpec=e,this.nextStates=[],this.charSpecs={},this.regex=void 0,this.handlers=void 0,this.specificity=void 0}function g(e){return e.sort(function(e,t){return t.specificity.val-e.specificity.val})}function v(e,t){for(var r=[],n=0,i=e.length;n<i;n++){var o=e[n];r=r.concat(o.match(t))}return r}function y(e){this.queryParams=e||{}}function b(e,t,r){var n=e.handlers,i=e.regex,o=t.match(i),s=1,a=new y(r);a.length=n.length;for(var c=0;c<n.length;c++){for(var h=n[c],u=h.names,d={},p=0;p<u.length;p++)d[u[p]]=o[s++];a[c]={handler:h.handler,params:d,isDynamic:!!u.length}}return a}function w(e){e=e.replace(/\+/gm,"%20");var t;try{t=decodeURIComponent(e)}catch(r){t=""}return t}i.prototype={to:function(e,t){var r=this.delegate;if(r&&r.willAddRoute&&(e=r.willAddRoute(this.matcher.target,e)),this.matcher.add(this.path,e),t){if(0===t.length)throw new Error("You must have an argument in the function passed to `to`");this.matcher.addChild(this.path,e,t,this.delegate)}return this}},o.prototype={add:function(e,t){this.routes[e]=t},addChild:function(e,t,r,n){var i=new o(t);this.children[e]=i;var a=s(e,i,n);n&&n.contextEntered&&n.contextEntered(t,a),r(a)}};var x=function(e,t){var r=new o;e(s("",r,this.delegate)),c([],r,function(e){t?t(this,e):this.add(e)},this)},A=["/",".","*","+","?","|","(",")","[","]","{","}","\\"],E=new RegExp("(\\"+A.join("|\\")+")","g");u.prototype={eachChar:function(e){for(var t,r=this.string,n=0;n<r.length;n++)t=r.charAt(n),e=e.put({invalidChars:void 0,repeat:!1,validChars:t});return e},regex:function(){return this.string.replace(E,"\\$1")},generate:function(){return this.string}},d.prototype={eachChar:function(e){return e.put({invalidChars:"/",repeat:!0,validChars:void 0})},regex:function(){return"([^/]+)"},generate:function(e){return e[this.name]}},p.prototype={eachChar:function(e){return e.put({invalidChars:"",repeat:!0,validChars:void 0})},regex:function(){return"(.+)"},generate:function(e){return e[this.name]}},f.prototype={eachChar:function(e){return e},regex:function(){return""},generate:function(){return""}},m.prototype={get:function(e){if(this.charSpecs[e.validChars])return this.charSpecs[e.validChars];for(var t=this.nextStates,r=0;r<t.length;r++){var n=t[r],i=n.charSpec.validChars===e.validChars;if(i=i&&n.charSpec.invalidChars===e.invalidChars)return this.charSpecs[e.validChars]=n,n}},put:function(e){var t;return(t=this.get(e))?t:(t=new m(e),this.nextStates.push(t),e.repeat&&t.nextStates.push(t),t)},match:function(e){for(var t,r,n,i=this.nextStates,o=[],s=0;s<i.length;s++)t=i[s],r=t.charSpec,"undefined"!=typeof(n=r.validChars)?n.indexOf(e)!==-1&&o.push(t):"undefined"!=typeof(n=r.invalidChars)&&n.indexOf(e)===-1&&o.push(t);return o}};var O=Object.create||function(e){function t(){}return t.prototype=e,new t};y.prototype=O({splice:Array.prototype.splice,slice:Array.prototype.slice,push:Array.prototype.push,length:0,queryParams:null});var P=function(){this.rootState=new m,this.names={}};P.prototype={add:function(e,t){for(var r,n=this.rootState,i="^",o={},s=new Array(e.length),a=[],c=!0,h=0;h<e.length;h++){var u=e[h],d=[],p=l(u.path,d,o);a=a.concat(p);for(var m=0;m<p.length;m++){var g=p[m];g instanceof f||(c=!1,n=n.put({invalidChars:void 0,repeat:!1,validChars:"/"}),i+="/",n=g.eachChar(n),i+=g.regex())}var v={handler:u.handler,names:d};s[h]=v}c&&(n=n.put({invalidChars:void 0,repeat:!1,validChars:"/"}),i+="/"),n.handlers=s,n.regex=new RegExp(i+"$"),n.specificity=o,(r=t&&t.as)&&(this.names[r]={segments:a,handlers:s})},handlersFor:function(e){var t=this.names[e];if(!t)throw new Error("There is no route named "+e);for(var r=new Array(t.handlers.length),n=0;n<t.handlers.length;n++)r[n]=t.handlers[n];return r},hasRoute:function(e){return!!this.names[e]},generate:function(e,t){var r=this.names[e],n="";if(!r)throw new Error("There is no route named "+e);for(var i=r.segments,o=0;o<i.length;o++){var s=i[o];s instanceof f||(n+="/",n+=s.generate(t))}return"/"!==n.charAt(0)&&(n="/"+n),t&&t.queryParams&&(n+=this.generateQueryString(t.queryParams,r.handlers)),n},generateQueryString:function(e,t){var r=[],n=[];for(var i in e)e.hasOwnProperty(i)&&n.push(i);n.sort();for(var o=0;o<n.length;o++){i=n[o];var s=e[i];if(null!=s){var a=encodeURIComponent(i);if(h(s))for(var c=0;c<s.length;c++){var u=i+"[]="+encodeURIComponent(s[c]);r.push(u)}else a+="="+encodeURIComponent(s),r.push(a)}}return 0===r.length?"":"?"+r.join("&")},parseQueryString:function(e){for(var t=e.split("&"),r={},n=0;n<t.length;n++){var i,o=t[n].split("="),s=w(o[0]),a=s.length,c=!1;1===o.length?i="true":(a>2&&"[]"===s.slice(a-2)&&(c=!0,s=s.slice(0,a-2),r[s]||(r[s]=[])),i=o[1]?w(o[1]):""),c?r[s].push(i):r[s]=i}return r},recognize:function(e){var t,r,n,i=[this.rootState],o={},s=!1;if(n=e.indexOf("?"),n!==-1){var a=e.substr(n+1,e.length);e=e.substr(0,n),o=this.parseQueryString(a)}for(e=decodeURI(e),"/"!==e.charAt(0)&&(e="/"+e),t=e.length,t>1&&"/"===e.charAt(t-1)&&(e=e.substr(0,t-1),s=!0),r=0;r<e.length&&(i=v(i,e.charAt(r)),i.length);r++);var c=[];for(r=0;r<i.length;r++)i[r].handlers&&c.push(i[r]);i=g(c);var h=c[0];if(h&&h.handlers)return s&&"(.+)$"===h.regex.source.slice(-5)&&(e+="/"),b(h,e,o)}},P.prototype.map=x,P.VERSION="0.1.11";var j=P;r(3).amd?(n=function(){return j}.call(t,r,t,e),!(void 0!==n&&(e.exports=n))):"undefined"!=typeof e&&e.exports?e.exports=j:"undefined"!=typeof this&&(this.RouteRecognizer=j)}).call(this)}).call(t,r(2)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children=[],e.webpackPolyfill=1),e}},function(e,t){e.exports=function(){throw new Error("define cannot be used indirect")}}])})}])});
(function () {
    (function (root, factory) {
        if (typeof define === 'function' && define.amd) {
            return define(function () {
                return factory();
            });
        } else if (typeof exports === 'object') {
            return module.exports = factory();
        } else {
            return root.ifvisible = factory();
        }
    })(this, function () {
        var addEvent, customEvent, doc, fireEvent, hidden, idleStartedTime, idleTime, ie, ifvisible, init, initialized, status, trackIdleStatus, visibilityChange;
        ifvisible = {};
        doc = document;
        initialized = false;
        status = "active";
        idleTime = 60000;
        idleStartedTime = false;
        customEvent = (function () {
            var S4, addCustomEvent, cgid, fireCustomEvent, guid, listeners, removeCustomEvent;
            S4 = function () {
                return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
            };
            guid = function () {
                return S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4();
            };
            listeners = {};
            cgid = '__ceGUID';
            addCustomEvent = function (obj, event, callback) {
                obj[cgid] = undefined;
                if (!obj[cgid]) {
                    obj[cgid] = "ifvisible.object.event.identifier";
                }
                if (!listeners[obj[cgid]]) {
                    listeners[obj[cgid]] = {};
                }
                if (!listeners[obj[cgid]][event]) {
                    listeners[obj[cgid]][event] = [];
                }
                return listeners[obj[cgid]][event].push(callback);
            };
            fireCustomEvent = function (obj, event, memo) {
                var ev, j, len, ref, results;
                if (obj[cgid] && listeners[obj[cgid]] && listeners[obj[cgid]][event]) {
                    ref = listeners[obj[cgid]][event];
                    results = [];
                    for (j = 0, len = ref.length; j < len; j++) {
                        ev = ref[j];
                        results.push(ev(memo || {}));
                    }
                    return results;
                }
            };
            removeCustomEvent = function (obj, event, callback) {
                var cl, i, j, len, ref;
                if (callback) {
                    if (obj[cgid] && listeners[obj[cgid]] && listeners[obj[cgid]][event]) {
                        ref = listeners[obj[cgid]][event];
                        for (i = j = 0, len = ref.length; j < len; i = ++j) {
                            cl = ref[i];
                            if (cl === callback) {
                                listeners[obj[cgid]][event].splice(i, 1);
                                return cl;
                            }
                        }
                    }
                } else {
                    if (obj[cgid] && listeners[obj[cgid]] && listeners[obj[cgid]][event]) {
                        return delete listeners[obj[cgid]][event];
                    }
                }
            };
            return {
                add: addCustomEvent,
                remove: removeCustomEvent,
                fire: fireCustomEvent
            };
        })();
        addEvent = (function () {
            var setListener;
            setListener = false;
            return function (el, ev, fn) {
                if (!setListener) {
                    if (el.addEventListener) {
                        setListener = function (el, ev, fn) {
                            return el.addEventListener(ev, fn, false);
                        };
                    } else if (el.attachEvent) {
                        setListener = function (el, ev, fn) {
                            return el.attachEvent('on' + ev, fn, false);
                        };
                    } else {
                        setListener = function (el, ev, fn) {
                            return el['on' + ev] = fn;
                        };
                    }
                }
                return setListener(el, ev, fn);
            };
        })();
        fireEvent = function (element, event) {
            var evt;
            if (doc.createEventObject) {
                return element.fireEvent('on' + event, evt);
            } else {
                evt = doc.createEvent('HTMLEvents');
                evt.initEvent(event, true, true);
                return !element.dispatchEvent(evt);
            }
        };
        ie = (function () {
            var all, check, div, undef, v;
            undef = void 0;
            v = 3;
            div = doc.createElement("div");
            all = div.getElementsByTagName("i");
            check = function () {
                return (div.innerHTML = "<!--[if gt IE " + (++v) + "]><i></i><![endif]-->", all[0]);
            };
            while (check()) {
                continue;
            }
            if (v > 4) {
                return v;
            } else {
                return undef;
            }
        })();
        hidden = false;
        visibilityChange = void 0;
        if (typeof doc.hidden !== "undefined") {
            hidden = "hidden";
            visibilityChange = "visibilitychange";
        } else if (typeof doc.mozHidden !== "undefined") {
            hidden = "mozHidden";
            visibilityChange = "mozvisibilitychange";
        } else if (typeof doc.msHidden !== "undefined") {
            hidden = "msHidden";
            visibilityChange = "msvisibilitychange";
        } else if (typeof doc.webkitHidden !== "undefined") {
            hidden = "webkitHidden";
            visibilityChange = "webkitvisibilitychange";
        }
        trackIdleStatus = function () {
            var timer, wakeUp;
            timer = [];
            wakeUp = function () {
                timer.map(clearTimeout);
                if (status !== "active") {
                    ifvisible.wakeup();
                }
                idleStartedTime = +(new Date());
                return timer.push(setTimeout(function () {
                    if (status === "active") {
                        return ifvisible.idle();
                    }
                }, idleTime));
            };
            wakeUp();
            addEvent(doc, "mousemove", wakeUp);
            addEvent(doc, "keyup", wakeUp);
            addEvent(doc, "touchstart", wakeUp);
            addEvent(window, "scroll", wakeUp);
            ifvisible.focus(wakeUp);
            return ifvisible.wakeup(wakeUp);
        };
        init = function () {
            var blur;
            if (initialized) {
                return true;
            }
            if (hidden === false) {
                blur = "blur";
                if (ie < 9) {
                    blur = "focusout";
                }
                addEvent(window, blur, function () {
                    return ifvisible.blur();
                });
                addEvent(window, "focus", function () {
                    return ifvisible.focus();
                });
            } else {
                addEvent(doc, visibilityChange, function () {
                    if (doc[hidden]) {
                        return ifvisible.blur();
                    } else {
                        return ifvisible.focus();
                    }
                }, false);
            }
            initialized = true;
            return trackIdleStatus();
        };
        ifvisible = {
            setIdleDuration: function (seconds) {
                return idleTime = seconds * 1000;
            },
            getIdleDuration: function () {
                return idleTime;
            },
            getIdleInfo: function () {
                var now, res;
                now = +(new Date());
                res = {};
                if (status === "idle") {
                    res.isIdle = true;
                    res.idleFor = now - idleStartedTime;
                    res.timeLeft = 0;
                    res.timeLeftPer = 100;
                } else {
                    res.isIdle = false;
                    res.idleFor = now - idleStartedTime;
                    res.timeLeft = (idleStartedTime + idleTime) - now;
                    res.timeLeftPer = (100 - (res.timeLeft * 100 / idleTime)).toFixed(2);
                }
                return res;
            },
            focus: function (callback) {
                if (typeof callback === "function") {
                    this.on("focus", callback);
                } else {
                    status = "active";
                    customEvent.fire(this, "focus");
                    customEvent.fire(this, "wakeup");
                    customEvent.fire(this, "statusChanged", {
                        status: status
                    });
                }
                return this;
            },
            blur: function (callback) {
                if (typeof callback === "function") {
                    this.on("blur", callback);
                } else {
                    status = "hidden";
                    customEvent.fire(this, "blur");
                    customEvent.fire(this, "idle");
                    customEvent.fire(this, "statusChanged", {
                        status: status
                    });
                }
                return this;
            },
            idle: function (callback) {
                if (typeof callback === "function") {
                    this.on("idle", callback);
                } else {
                    status = "idle";
                    customEvent.fire(this, "idle");
                    customEvent.fire(this, "statusChanged", {
                        status: status
                    });
                }
                return this;
            },
            wakeup: function (callback) {
                if (typeof callback === "function") {
                    this.on("wakeup", callback);
                } else {
                    status = "active";
                    customEvent.fire(this, "wakeup");
                    customEvent.fire(this, "statusChanged", {
                        status: status
                    });
                }
                return this;
            },
            on: function (name, callback) {
                init();
                customEvent.add(this, name, callback);
                return this;
            },
            off: function (name, callback) {
                init();
                customEvent.remove(this, name, callback);
                return this;
            },
            onEvery: function (seconds, callback) {
                var paused, t;
                init();
                paused = false;
                if (callback) {
                    t = setInterval(function () {
                        if (status === "active" && paused === false) {
                            return callback();
                        }
                    }, seconds * 1000);
                }
                return {
                    stop: function () {
                        return clearInterval(t);
                    },
                    pause: function () {
                        return paused = true;
                    },
                    resume: function () {
                        return paused = false;
                    },
                    code: t,
                    callback: callback
                };
            },
            now: function (check) {
                init();
                return status === (check || "active");
            }
        };
        return ifvisible;
    });

}).call(this);

//# sourceMappingURL=ifvisible.js.map
(function (angular) {
    angular.module('tandibar/ng-rollbar', []);

    angular.module('tandibar/ng-rollbar').config(['$provide', function ($provide) {
        $provide.decorator('$exceptionHandler', ['$delegate', '$injector', '$window', function ($delegate, $injector, $window) {
            return function (exception, cause) {
                if ($window.Rollbar) {
                    $window.Rollbar.error(exception, { cause: cause }, function (err, data) {
                        var $rootScope = $injector.get('$rootScope');
                        $rootScope.$emit('rollbar:exception', {
                            exception: exception,
                            err: err,
                            data: data.result
                        });
                    });
                }
                $delegate(exception, cause);
            };
        }]);
    }]);

    angular.module('tandibar/ng-rollbar').provider('Rollbar', function RollbarProvider() {
        var rollbarProvider = this;
        var rollbarActivated = true;

        this.init = function (config) {
            var _rollbarConfig = config;
            if (rollbarActivated) {
                /* jshint ignore:start */
                /* rollbar client lib start */
                // https://raw.githubusercontent.com/rollbar/rollbar.js/v2.2.3/dist/rollbar.snippet.js
                !function (r) { function o(n) { if (e[n]) return e[n].exports; var t = e[n] = { exports: {}, id: n, loaded: !1 }; return r[n].call(t.exports, t, t.exports, o), t.loaded = !0, t.exports } var e = {}; return o.m = r, o.c = e, o.p = "", o(0) }([function (r, o, e) { "use strict"; var n = e(1), t = e(4); _rollbarConfig = _rollbarConfig || {}, _rollbarConfig.rollbarJsUrl = _rollbarConfig.rollbarJsUrl || "https://cdnjs.cloudflare.com/ajax/libs/rollbar.js/2.2.3/rollbar.min.js", _rollbarConfig.async = void 0 === _rollbarConfig.async || _rollbarConfig.async; var a = n.setupShim(window, _rollbarConfig), l = t(_rollbarConfig); window.rollbar = n.Rollbar, a.loadFull(window, document, !_rollbarConfig.async, _rollbarConfig, l) }, function (r, o, e) { "use strict"; function n(r) { return function () { try { return r.apply(this, arguments) } catch (r) { try { console.error("[Rollbar]: Internal error", r) } catch (r) { } } } } function t(r, o) { this.options = r, this._rollbarOldOnError = null; var e = s++; this.shimId = function () { return e }, window && window._rollbarShims && (window._rollbarShims[e] = { handler: o, messages: [] }) } function a(r, o) { var e = o.globalAlias || "Rollbar"; if ("object" == typeof r[e]) return r[e]; r._rollbarShims = {}, r._rollbarWrappedError = null; var t = new p(o); return n(function () { o.captureUncaught && (t._rollbarOldOnError = r.onerror, i.captureUncaughtExceptions(r, t, !0), i.wrapGlobals(r, t, !0)), o.captureUnhandledRejections && i.captureUnhandledRejections(r, t, !0); var n = o.autoInstrument; return (void 0 === n || n === !0 || "object" == typeof n && n.network) && r.addEventListener && (r.addEventListener("load", t.captureLoad.bind(t)), r.addEventListener("DOMContentLoaded", t.captureDomContentLoaded.bind(t))), r[e] = t, t })() } function l(r) { return n(function () { var o = this, e = Array.prototype.slice.call(arguments, 0), n = { shim: o, method: r, args: e, ts: new Date }; window._rollbarShims[this.shimId()].messages.push(n) }) } var i = e(2), s = 0, d = e(3), c = function (r, o) { return new t(r, o) }, p = d.bind(null, c); t.prototype.loadFull = function (r, o, e, t, a) { var l = function () { var o; if (void 0 === r._rollbarDidLoad) { o = new Error("rollbar.js did not load"); for (var e, n, t, l, i = 0; e = r._rollbarShims[i++];) for (e = e.messages || []; n = e.shift() ;) for (t = n.args || [], i = 0; i < t.length; ++i) if (l = t[i], "function" == typeof l) { l(o); break } } "function" == typeof a && a(o) }, i = !1, s = o.createElement("script"), d = o.getElementsByTagName("script")[0], c = d.parentNode; s.crossOrigin = "", s.src = t.rollbarJsUrl, e || (s.async = !0), s.onload = s.onreadystatechange = n(function () { if (!(i || this.readyState && "loaded" !== this.readyState && "complete" !== this.readyState)) { s.onload = s.onreadystatechange = null; try { c.removeChild(s) } catch (r) { } i = !0, l() } }), c.insertBefore(s, d) }, t.prototype.wrap = function (r, o, e) { try { var n; if (n = "function" == typeof o ? o : function () { return o || {} }, "function" != typeof r) return r; if (r._isWrap) return r; if (!r._rollbar_wrapped && (r._rollbar_wrapped = function () { e && "function" == typeof e && e.apply(this, arguments); try { return r.apply(this, arguments) } catch (e) { var o = e; throw "string" == typeof o && (o = new String(o)), o._rollbarContext = n() || {}, o._rollbarContext._wrappedSource = r.toString(), window._rollbarWrappedError = o, o } }, r._rollbar_wrapped._isWrap = !0, r.hasOwnProperty)) for (var t in r) r.hasOwnProperty(t) && (r._rollbar_wrapped[t] = r[t]); return r._rollbar_wrapped } catch (o) { return r } }; for (var u = "log,debug,info,warn,warning,error,critical,global,configure,handleUncaughtException,handleUnhandledRejection,captureDomContentLoaded,captureLoad".split(","), f = 0; f < u.length; ++f) t.prototype[u[f]] = l(u[f]); r.exports = { setupShim: a, Rollbar: p } }, function (r, o) { "use strict"; function e(r, o, e) { if (r) { var t; "function" == typeof o._rollbarOldOnError ? t = o._rollbarOldOnError : r.onerror && !r.onerror.belongsToShim && (t = r.onerror, o._rollbarOldOnError = t); var a = function () { var e = Array.prototype.slice.call(arguments, 0); n(r, o, t, e) }; a.belongsToShim = e, r.onerror = a } } function n(r, o, e, n) { r._rollbarWrappedError && (n[4] || (n[4] = r._rollbarWrappedError), n[5] || (n[5] = r._rollbarWrappedError._rollbarContext), r._rollbarWrappedError = null), o.handleUncaughtException.apply(o, n), e && e.apply(r, n) } function t(r, o, e) { if (r) { "function" == typeof r._rollbarURH && r._rollbarURH.belongsToShim && r.removeEventListener("unhandledrejection", r._rollbarURH); var n = function (r) { var e = r.reason, n = r.promise, t = r.detail; !e && t && (e = t.reason, n = t.promise), o && o.handleUnhandledRejection && o.handleUnhandledRejection(e, n) }; n.belongsToShim = e, r._rollbarURH = n, r.addEventListener("unhandledrejection", n) } } function a(r, o, e) { if (r) { var n, t, a = "EventTarget,Window,Node,ApplicationCache,AudioTrackList,ChannelMergerNode,CryptoOperation,EventSource,FileReader,HTMLUnknownElement,IDBDatabase,IDBRequest,IDBTransaction,KeyOperation,MediaController,MessagePort,ModalWindow,Notification,SVGElementInstance,Screen,TextTrack,TextTrackCue,TextTrackList,WebSocket,WebSocketWorker,Worker,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload".split(","); for (n = 0; n < a.length; ++n) t = a[n], r[t] && r[t].prototype && l(o, r[t].prototype, e) } } function l(r, o, e) { if (o.hasOwnProperty && o.hasOwnProperty("addEventListener")) { for (var n = o.addEventListener; n._rollbarOldAdd && n.belongsToShim;) n = n._rollbarOldAdd; var t = function (o, e, t) { n.call(this, o, r.wrap(e), t) }; t._rollbarOldAdd = n, t.belongsToShim = e, o.addEventListener = t; for (var a = o.removeEventListener; a._rollbarOldRemove && a.belongsToShim;) a = a._rollbarOldRemove; var l = function (r, o, e) { a.call(this, r, o && o._rollbar_wrapped || o, e) }; l._rollbarOldRemove = a, l.belongsToShim = e, o.removeEventListener = l } } r.exports = { captureUncaughtExceptions: e, captureUnhandledRejections: t, wrapGlobals: a } }, function (r, o) { "use strict"; function e(r, o) { this.impl = r(o, this), this.options = o, n(e.prototype) } function n(r) { for (var o = function (r) { return function () { var o = Array.prototype.slice.call(arguments, 0); if (this.impl[r]) return this.impl[r].apply(this.impl, o) } }, e = "log,debug,info,warn,warning,error,critical,global,configure,handleUncaughtException,handleUnhandledRejection,_createItem,wrap,loadFull,shimId,captureDomContentLoaded,captureLoad".split(","), n = 0; n < e.length; n++) r[e[n]] = o(e[n]) } e.prototype._swapAndProcessMessages = function (r, o) { this.impl = r(this.options); for (var e, n, t; e = o.shift() ;) n = e.method, t = e.args, this[n] && "function" == typeof this[n] && ("captureDomContentLoaded" === n || "captureLoad" === n ? this[n].apply(this, [t[0], e.ts]) : this[n].apply(this, t)); return this }, r.exports = e }, function (r, o) { "use strict"; r.exports = function (r) { return function (o) { if (!o && !window._rollbarInitialized) { r = r || {}; for (var e, n, t = r.globalAlias || "Rollbar", a = window.rollbar, l = function (r) { return new a(r) }, i = 0; e = window._rollbarShims[i++];) n || (n = e.handler), e.handler._swapAndProcessMessages(l, e.messages); window[t] = n, window._rollbarInitialized = !0 } } } }]);
                /* rollbar client lib end */
                /* jshint ignore:end */
            }
        };

        this.deinit = function () {
            rollbarActivated = false;
        };

        getter.$inject = ['$log', '$window'];
        function getter($log, $window) {

            function _bindRollbarMethod(methodName) {
                return function () {
                    $window.Rollbar[methodName].apply($window.Rollbar, arguments);
                };
            }

            var service = {
                Rollbar: logInactiveMessage,

                configure: logInactiveMessage,

                critical: logInactiveMessage,
                error: logInactiveMessage,
                warning: logInactiveMessage,
                info: logInactiveMessage,
                debug: logInactiveMessage,

                scope: logInactiveMessage,

                verbose: logInactiveMessage,
                enable: logInactiveMessage,
                disable: logInactiveMessage
            };

            if (rollbarActivated) {
                service.Rollbar = $window.Rollbar;

                // bind the native Rollbar methods
                service.configure = _bindRollbarMethod('configure');
                service.critical = _bindRollbarMethod('critical');
                service.error = _bindRollbarMethod('error');
                service.warning = _bindRollbarMethod('warning');
                service.info = _bindRollbarMethod('info');
                service.debug = _bindRollbarMethod('debug');
                service.scope = _bindRollbarMethod('scope');

                service.verbose = function (boolean) {
                    if (boolean === undefined) { boolean = true; }
                    $window.Rollbar.configure({ verbose: boolean });
                };

                service.enable = function () {
                    $window.Rollbar.configure({ enabled: true });
                };

                service.disable = function () {
                    $window.Rollbar.configure({ enabled: false });
                };
            }

            function logInactiveMessage() {
                $log.warn("Rollbar is deactivated");
            }

            return service;
        }

        this.$get = getter;
    });

})
(angular);

var $stateProviderRef = null;
window.baseUrl = '';

// Default idle timeout to 15 minutes, will be overriden by web.config setting once they're loaded
ifvisible.setIdleDuration(900);

(function () {
    'use strict';
    var app = angular.module('app', [
        'ui.router',
        'ui.bootstrap',
        'ui.mask',
        'ngCookies',
        'ngRoute',
        'angular-jwt',
        'http-auth-interceptor',
        'chart.js',
        'toaster',
        'ngFileUpload',
        'ngFileSaver',
        'ngSanitize',
        'ngCsv',
        'ngMessages',
        'uiSwitch',
        'tandibar/ng-rollbar',
        'uiSwitch',
        //'pdf',
        //'pdf.worker'
    ]);

    app.config(['$locationProvider', '$routeProvider', '$httpProvider', '$sceDelegateProvider', 
        function ($locationProvider, $routeProvider, $httpProvider, $sceDelegateProvider) {
            $locationProvider.hashPrefix();
            $routeProvider.otherwise({ redirectTo: '#/home' });
            $httpProvider.interceptors.push('authInterceptor');
            $httpProvider.interceptors.push('loadIndicatorService');
        }]);

    // Configure Rollbar error reporting 
    app.config(['RollbarProvider', 'WEB_CONFIG', function (RollbarProvider, WEB_CONFIG) {
        RollbarProvider.init({
            accessToken: WEB_CONFIG.ROLLBAR_ACCESS_TOKEN,
            captureUncaught: true,
            payload: {
                environment: WEB_CONFIG.ROLLBAR_ENVIRONMENT
            }
        });
    }]);

    app.run(['$http', '$cookies', '$rootScope', 'jwtHelper', '$uibModal', '$state', 'APP_CONFIG', 'brandingService', 'routeService', '$window', '$compile', '$trace', '$transitions', 'FormTemplateService', 'PermissionMatrixService', '$stateParams', 'FormDataTransitService',
        function ($http, $cookies, $rootScope, jwtHelper, $uibModal, $state, APP_CONFIG, brandingService, routeService, $window, $compile, $trace, $transitions, FormTemplateService, PermissionMatrixService, $stateParams, FormDataTransitService) {

            // toggled in routeConfig.js
            $rootScope.title = '';
            $rootScope.isPermissionsSet = false;

            $rootScope.$watch('isPermissionsSet', function (newVal) {
                if (newVal) {
                    setTransitions();
                }
            })

            function setTransitions() {
                $trace.enable('TRANSITION');
                $transitions.onBefore({}, function (trans) {
                    // Get the state's permission
                    var statePermission = trans._targetState._definition.self.permission;
                    if (statePermission) {
                        var permissionService = trans.injector().get('PermissionMatrixService');
                        // Check if the user has the right permission, redirect to home if not. If subject, stay on the same route
                        var hasPermission = permissionService.hasPermission(statePermission);
                        if (statePermission === 'readSite' && !hasPermission) return false;
                        if (!hasPermission) return trans.router.stateService.target('home');
                    }
                    return trans;
                });
                // Warn when moving away from subject routes with unsaved forms
                $transitions.onBefore({ to: '*', from: 'subject.*' }, function (trans) {
                    if (FormDataTransitService.hasUnsavedForms()) {
                        return confirm('You have unsaved data, are you sure you want to navigate away?');
                    }
                });
                window.onbeforeunload = function () {
                    if (FormDataTransitService.hasUnsavedForms()) {
                        return 'You have unsaved data, are you sure you want to navigate away?';
                    }
                }
                $transitions.onEnter({ entering: 'subject.summary' }, function (trans) {
                    
                    var newSubjectId = trans._targetState._params.subjectId;

                    if (!newSubjectId) {
                        return trans;
                    }

                    var FormTemplateService = trans.injector().get('FormTemplateService');
                    
                    if (newSubjectId !== FormDataTransitService.getCurrentSubjectId()) {
                        FormDataTransitService.initServiceVariables();
                        FormTemplateService.clearAllClasses();
                        $rootScope.$broadcast('update-form-navigation-list');
                    }

                    return trans;
                });
            };

            $rootScope.loginModal = function () {
                if (!$rootScope.loginIsOpened) {
                    $rootScope.loginIsOpened = true;
                    var modalInstance = $uibModal.open({
                        templateUrl: '/templates/login.html',
                        controller: 'signinController',
                        controllerAs: 'loginCtrl',
                        backdrop: 'static',
                        size: 'sm',
                        windowClass: 'modal-login',
                        keyboard: false
                    }).result.finally(function () {
                        $rootScope.loginIsOpened = false;
                    });
                }
            };

            $rootScope.loginModalPromise = function () {
                if (!$rootScope.loginIsOpened) {
                    $rootScope.loginIsOpened = true;
                    var modalInstance = $uibModal.open({
                        templateUrl: '/templates/login.html',
                        controller: 'signinController',
                        controllerAs: 'loginCtrl',
                        backdrop: 'static',
                        size: 'sm',
                        windowClass: 'modal-login',
                        keyboard: false
                    });
                    return modalInstance;
                }
                return null;
            };

            $rootScope.openSubjectList = function (searchTerm) {
                var modalInstance = $uibModal.open({
                    templateUrl: 'Study/StudyTemplates/SubjectListModal.html',
                    controller: 'GenericModalController',
                    backdrop: 'static',
                    resolve: {
                        parameters: function () {
                            return { searchTerm: searchTerm };
                        }
                    }
                }).result.finally(
                        function () {

                    }
                );
            };

    }]);
})();
angular.module('app').constant('APP_CONFIG', {
    COOKIE_NAME: '_userdata',
    IMAGE_REPOSITORY_URL: 'http://syncrony-core-testing.azurewebsites.net/image_repo/',
    API_ENDPOINTS: {
        PLATFORM_GET: '/api/platform',
        TOKEN_OAUTH: '/oauth/token',
        USER_INFO: '/api/account/info',
        USER_REGISTER: '/api/account/create',
        USER_GET: '/api/account/',
        USER_GETSIMPLE: '/api/account/simple',
        USER_EDIT: '/api/account/edit',
        USER_UNLOCK: '/api/account/unlock/',
        USER_CHANGE_PWD: '/api/accounts/ChangePassword',
        USER_RESET_PWD: '/api/accounts/ResetPassword',
        STUDY_GET: '/api/study/',
        USER_ACTIVATE: '/api/account/act/',
        USER_DEACTIVATE: '/api/account/deact/',
        SITE_CREATE: '/api/study/createsite',
        SITE_EDIT: '/api/study/editsite',
        ADDRESS_CREATE: '/api/study/createaddress',
        ADDRESS_EDIT: '/api/study/editaddress',
        USER_ADDROLE: '/api/account/adduserrole',
        USER_REMOVEROLE: '/api/account/removeuserrole',
        ROLE_CREATE: '/api/study/createrole',
        ADDRESS_ADD: '/api/study/addaddress',
        REGION_CREATE: '/api/study/createregion',
        IDENTITYROLE_GET: '/api/account/identityrole',
        STUDY_BRANDING: '/api/accounts/branding',
        STUDY_SETTINGS: "/api/study/settings/",
        STUDY_SETTINGS_CREATE: '/api/study/settings/create',
        REPORTING_GET_REPORT: '/api/reporting/report/',
        REPORTING_GET_REPORTS: '/api/reporting/reports/',
        REPORTING_GET_TILE: '/api/reporting/tile/',
        REPORTING_GET_TILES: '/api/reporting/tiles/',
        REPORTING_GET_DASHBOARDS: '/api/reporting/dashboards/',
        IMPORT_STUDY: '/api/utils/importstudy/'
    }
});
(function () {
    angular.module('app').constant('EDC_CONSTANTS', {
        SERVICE_URLS: {
            GET_AUTHENTICATE_URL: '/api/authenticate',
            GET_ESIGREASONS_URL: '/api/esignature/reasons',
            SAVE_ESIGNATURE_URL: '/api/esignature/data',
            GET_TEMPLATE_LIST_URL: '/api/forms/template',
            GET_TEMPLATE_URL: '/api/forms/template/',
            SAVE_TEMPLATE_URL: '/api/forms/template/save',
            GET_FORM_LIST_URL: '/api/form/list',
            GET_FORM_TEMPLATE_URL: '/api/form/{0}',
            GET_FORM_DATA_URL: '/api/form/{0}/entry/{1}',
            SAVE_FORM_DATA_URL: '/api/form/data',
            SAVE_FORM_TEMPLATE_URL: '/api/form/template',
            MAKE_FORM_ACTIVE_URL: '/api/form/template/makeactive',
            MAKE_FORM_INACTIVE_URL: '/api/form/template/makeinactive',
            GET_USER_LIST: '/api/users/list',
            GET_ALL_FORM_DATA_URL: '/api/form/report/true',
            GET_APP_AUDIT_DATA_URL: '/api/report/appaudit',
            GET_ESIG_AUDIT_DATA_URL: '/api/report/esigaudit',
            GET_SUBJECT_FORM_TEMPLATE_URL: '/SubjectForm/GetFormTemplate/{0}',
            GET_SUBJECT_REPORT_URL: '/api/report/subjectreport',
            UPLOAD_FILE_URL: '/api/blob/upload'
        },
        REPORT_HEADERS: {  
            AUDIT_REPORT_HEADERS: ['Username', 'IP Address', 'Area/Event', 'Time', 'Reason', 'Reason Type'],
            ESIG_REPORT_HEADERS: ['Username', 'Signature Date/Time', 'Signature Reason', 'Signature Type', 'Signed Data Record'],
            SUBJECT_REPORT_HEADERS: ['SubjectId', 'Modality', 'StudyDate', 'TimePoint', 'InitialReader', 'QcReader', 'QcPass', 'ContrastUsed', 'StentGraftPatencyBody', 'FirstEndoleakType',
                'SecondEndoleakType', 'AorticBifurcateProsthesisPatency', 'ProsthesisPatencyRLimb', 'ProsthesisPatencyLLimb', 'PatencyRLimb', 'PatencyLLimb', 'AP', 'Lateral',
                'ObliqueRight', 'ObliqueLeft', 'RightLimbProsthesisPatency', 'AbpTransrenalStruts', 'AbpTrunk', 'AbpLegs', 'IpsilateralLimbProsthesis', 'ContralateralLimbProsthesis',
                'AorticExtension', 'IliacExtensionRight', 'IliacExtensionLeft', 'FractureComments', 'IsThereBarbSeparation', 'NumberOfBarbSeparations', 'IsStentSkeletonFractured',
                'LeftLimbProsthesisPatency', 'StentGraftPatencyRLimb', 'StentGraftPatencyLLimb', 'Endoleak', 'MaxAorticSacDiameter', 'Comments', 'ContrastSeries', 'NonContrastSeries',
                'DelaySeries', 'AorticDiameter20mmProximalToDistalRenal', 'AorticDiameter10mmBelow', 'AorticDiameter15mmBelow', 'AorticDiameter', 'AorticDiameterAtProximalEndOfFabric',
                'AorticDiameterAtPointOfDistalApposition', 'AorticBifurcationDiameter', 'AorticBifurcationMajorAxis', 'AorticBifurcationMinorAxis', 'AorticBifurcationPerimeter',
                'AorticBifurcationArea', 'AorticNeckLength', 'SuprarenalAngulation', 'InfrarenalAngulation', 'InfrarenalAngulationToBifurcation', 'RightCommonIliacDiamAboveRightHypogastricTakeoff',
                'RightIliacMinAccessDiam', 'RightCommonIliacMaxDiameter', 'RightIliacDiamAtLastViewGraftEdgeMarker', 'RightIliacDiamAtPointOfProximalApposition', 'RightCommonIliacLength',
                'RightAorticTreatmentLength', 'RightIliacCenterlineLength', 'RightIliacLandingZoneLength', 'RightIliacTortuosityIndex', 'LeftCommonIliacDiamAboveLeftHypogastricTakeoff',
                'LeftIliacMinAccessDiameter', 'LeftIliacDiamAtLastViewGraftEdgeMarker', 'LeftIliacDiamAtPointOfProximalApposition', 'LeftCommonIliacLength', 'LeftAorticTreatmentLength',
                'LeftIliacCenterlineLength', 'LeftIliacLandingZoneLength', 'LeftIliacTortuosityIndex', 'DistalRenalToAorticBifurcationLength', 'AorticNeckAppositionLength',
                'RightIliacAppositionLength', 'LeftIliacAppositionLength', 'RefPointToProximalEndOfFabricLength', 'FirstEndoleakVol', 'SecondEndoleakVol', 'RefPointToRightIliacGraftEdgeMarkerLength',
                'RefPointToLeftIliacGraftEdgeMarkerLength', 'SliceThickness', 'LengthOfReferencePointToEdgeMarker', 'LengthOfReferencePointToLastViewOfRGraft', 'TotalEndoleakVol',
                'PatencyMainBody', 'LengthOfReferencePointToLastViewOfLGraft', 'ConfirmedInitialReadComplete', 'InitialReaderCompletedTimestamp', 'QcReaderCompletedTimestamp',
                'ConfirmedQcOverReadComplete', 'QcComments', 'StudyFlagged', 'StudyFlaggedComments'],
            LAB_REPORT_HEADERS: ['Patient name', 'DOB', 'Subject external ID', 'Test ID', 'Date of test']
        },
        REPORT_BASE_FILE_NAMES: {
            APP_AUDIT_REPORT_FILE_NAME: 'AppAuditReport',
            ESIG_AUDIT_REPORT_FILE_NAME: 'ESigAuditReport',
            SUBJECT_REPORT_FILE_NAME: 'SubjectReport',
            LAB_REPORT_FILE_NAME: 'LabReports'
        },
        ESIGNATURE_STRINGS: {
            ESIG_SUCCESS: 'Electronic signature success',
            ESIG_FAILED: 'Electronic signature failed',
            UNABLE_SAVE_ESIG: 'Unable to save electronic signature.',
            ERROR_GETTING_REASONS: 'Error getting electronic signature reasons'
        },
        AUTHENTICATION_STRINGS: {
            AUTH_SUCCESS: 'Authentication successful',
            AUTH_FAILURE: 'Authentication failed'
        },
        GENERIC_STRINGS: {
            CANCEL: 'Cancel',
            SUCCESS: 'Success'
        },
        ESIG_TYPES: {
            FORM_DATA: 'form',
            DSIG_DATA: 'dsig'
        }
    })
})();
(function () {
    angular.module('app')
        .config(function ($stateProvider, $urlRouterProvider) {

            // There are three scenarios to cover when resolving data for routing:
            // 1. if a page is transitioned to from another page
            // 2. if a page is logged in on cold, or after a refresh (login required data and transition will be rejected even before the modal displays, hence .reload() in modal)
            // 3. if a page is timed out and then relogged in on, either by the same or a differant user

            // Router notes: 
            // 1 Switching child states does not rerun parent's resolve block. 
            //       1a Example: http://plnkr.co/edit/MZ7ypavytxD1Ty1UHozo?p=info 
            //       1b Explanation: "By default, resolves for a state are fetched just before that state is entered. Note that only states which are being entered during the Transition have their resolves fetched. States                           that are "retained" do not have their resolves re-fetched." https://ui-router.github.io/ng1/docs/1.0.0/interfaces/state.statedeclaration.html
            // 2 Injecting parent resolves into child resolves forces them to wait otherwise they run simultaneously 

            $urlRouterProvider.otherwise("/home");
            $stateProviderRef = $stateProvider;

            $stateProvider
                .state('root', {
                    abstract: true,
                    template: '<div ui-view=""></div>',
                    resolve: {
                        PrereqConfigData: ['SessionTransitService', 'StudyConfigService', function (SessionTransitService, StudyConfigService) {
                            SessionTransitService.prepareSession();
                            return StudyConfigService.loadSettings();
                        }]
                    }
                })

                //need to protect this route - needs to be logged in?
                .state('home', {
                    url: "/home",
                    parent: "root",
                    templateUrl: "view/home.html",
                    controller: "DashboardCtrl",
                    permission: 'readSite',
                    resolve: {
                        HomePreResolve: ['PrereqConfigData', 'promiseService', function (PrereqConfigData, promiseService) {

                            return promiseService.verifyOrLoadData({
                                loginRequiredData: [
                                    "GetMetaData",
                                    "FormTemplates",
                                ]
                            });

                        }]
                    }
                })
                .state('formloader', {
                    url: "/formloader",
                    parent: "root",
                    templateUrl: "FormLoader/formloader.html",
                    controller: "FormLoaderCtrl as ctrl",
                    permission: 'createTemplate',
                    resolve: {
                        FormLoaderPreResolve: ['PrereqConfigData', 'promiseService', '$stateParams', function (PrereqConfigData, promiseService, $stateParams) {

                            return promiseService.verifyOrLoadData({
                                loginRequiredData: [
                                    "FormTemplates",
                                    "GetMetaData"
                                ]
                            });

                        }]
                    }
                })
                .state('studyloader', {
                    abstract: true,
                    parent: "root",
                    template: '<div ui-view=""></div>',
                    resolve: { StudyLoaderPreResolve: ['PrereqConfigData', function (PrereqConfigData) { return PrereqConfigData }] }
                })
                .state('studyloader.upload', {
                    url: "/studyloader/upload",
                    permission: 'canImportStudy',
                    templateUrl: "StudyLoader/StudyLoaderTemplates/studyLoaderUpload.html",
                    controller: "StudyLoaderCtrl as ctrl",
                    resolve: { StudyLoaderUploadPreResolve: ['StudyLoaderPreResolve', function (StudyLoaderPreResolve) { return StudyLoaderPreResolve }] }
                })
                .state('studyloader.distributeFormData', {
                    url: "/distribute-form-data",
                    permission: 'canImportStudy',
                    templateUrl: "StudyLoader/StudyLoaderTemplates/studyLoaderDistributeFormData.html",
                    controller: "StudyLoaderCtrl as ctrl",
                    resolve: { StudyLoaderDistributeFormDataPreResolve: ['StudyLoaderPreResolve', function (StudyLoaderPreResolve) { return StudyLoaderPreResolve }] }

                })
                .state('studyloader.siteAndSubjectData', {
                    url: "/site-and-subject-data",
                    permission: 'canImportStudy',
                    templateUrl: "StudyLoader/StudyLoaderTemplates/studyLoaderSiteAndSubjectData.html",
                    controller: "StudyLoaderCtrl as ctrl",
                    resolve: { StudyLoaderDistributeDataPreResolve: ['StudyLoaderPreResolve', function (StudyLoaderPreResolve) { return StudyLoaderPreResolve }] }

                })
                .state('studyloader.subforms', {
                    url: "/subforms",
                    permission: 'canImportStudy',
                    templateUrl: "StudyLoader/StudyLoaderTemplates/studyLoaderSubforms.html",
                    controller: "StudyLoaderCtrl as ctrl",
                    resolve: { StudyLoaderDistributeDataPreResolve: ['StudyLoaderPreResolve', function (StudyLoaderPreResolve) { return StudyLoaderPreResolve }] }
                })
                .state('studyloader.dev', {
                    url: "/dev-view",
                    permission: 'canImportStudy',
                    templateUrl: "StudyLoader/StudyLoaderTemplates/studyLoaderDev.html",
                    controller: "StudyLoaderCtrl as ctrl",
                    resolve: { StudyLoaderDistributeDataPreResolve: ['StudyLoaderPreResolve', function (StudyLoaderPreResolve) { return StudyLoaderPreResolve }] }

                })

                .state('econsentloader', {
                    url: "/econsentloader",
                    parent: "root",
                    templateUrl: "EConsent/EConsentLoader.html",
                    controller: "EConsentLoaderCtrl",
                    permission: 'createEConsent',
                    resolve: {
                        FormLoaderPreResolve: ['PrereqConfigData', 'promiseService', '$stateParams', function (PrereqConfigData, promiseService, $stateParams) {

                            return promiseService.verifyOrLoadData({
                                loginRequiredData: [
                                    "FormTemplates",
                                    "GetMetaData"
                                ]
                            });

                        }]
                    }
                })


                .state('readeconsent', {
                    url: "/econsent",
                    parent: "root",
                    templateUrl: "EConsent/ReadEConsent.html",
                    controller: "ReadEConsentCtrl",
                    permission: 'createSubject',
                    resolve: {
                        FormLoaderPreResolve: ['PrereqConfigData', 'promiseService', '$stateParams', function (PrereqConfigData, promiseService, $stateParams) {

                            return promiseService.verifyOrLoadData({
                                loginRequiredData: [
                                    "FormTemplates",
                                    "GetMetaData"
                                ]
                            });

                        }]
                    }
                })

                .state('editeconsent', {
                    url: "/econsent/{subjectId}",
                    parent: "root",
                    templateUrl: "EConsent/ReadEConsent.html",
                    controller: "ReadEConsentCtrl",
                    permission: 'createSubject',
                    resolve: {
                        FormLoaderPreResolve: ['PrereqConfigData', 'promiseService', '$stateParams', function (PrereqConfigData, promiseService, $stateParams) {

                            return promiseService.verifyOrLoadData({
                                loginRequiredData: [
                                    "FormTemplates",
                                    "GetMetaData"
                                ]
                            });

                        }]
                    }
                })

                .state('editeconsentform', {
                    url: "/econsent/{subjectId}/{formId}",
                    parent: "root",
                    templateUrl: "EConsent/ReadEConsent.html",
                    controller: "ReadEConsentCtrl",
                    permission: 'createSubject',
                    resolve: {
                        FormLoaderPreResolve: ['PrereqConfigData', 'promiseService', '$stateParams', function (PrereqConfigData, promiseService, $stateParams) {

                            return promiseService.verifyOrLoadData({
                                loginRequiredData: [
                                    "FormTemplates",
                                    "GetMetaData"
                                ]
                            });

                        }]
                    }
                })

                .state('econsentsubjects', {
                    url: '/econsentsubjects',
                    parent: 'root',
                    templateUrl: "EConsent/EConsentSubjects.html",
                    controller: 'EConsentSubjectsCtrl',
                    permission: 'readEnrollmentBySite',
                    //resolve: {
                    //    SubjectEditPreResolve: ['SubjectPreResolve', 'promiseService', function (SubjectPreResolve, promiseService) {

                    //        return promiseService.verifyOrLoadData({
                    //            loginRequiredData: [
                    //                //  breaks edit page
                    //                //"LoadAllSites"
                    //            ]
                    //        });

                    //    }]
                    //}
                    resolve: {
                        FormLoaderPreResolve: ['PrereqConfigData', 'promiseService', '$stateParams', function (PrereqConfigData, promiseService, $stateParams) {

                            return promiseService.verifyOrLoadData({
                                loginRequiredData: [
                                    "FormTemplates",
                                    "GetMetaData"
                                ]
                            });

                        }]
                    }
                })


                .state('newSubject', {
                    url: "/newsubject",
                    parent: "root",
                    templateUrl: "SubjectTemplates/Subject.html",
                    controller: 'SubjectCtrl',
                    permission: 'createSubject',
                    resolve: {
                        NewSubjectPreResolve: ['PrereqConfigData', 'promiseService', function (PrereqConfigData, promiseService) {

                            return promiseService.verifyOrLoadData({
                                loginRequiredData: [
                                    "FormTemplates",
                                    "GetMetaData"
                                ]
                            });

                        }]
                    }
                })
                // use custom providers to load the data when this route is hit, and store data in service
                // this should eventually move the the 'study' level, not yet implemented
                .state('subject', {
                    url: "/subject/{subjectId}",
                    parent: 'root', 
                    templateUrl: "SubjectTemplates/SubjectNavigation.html",
                    controller: "SubjectNavigationController",
                    redirectTo: 'subject.summary',
                    controller: "SummaryCtrl",
                    permission: 'readSubject',
                    resolve: { 
                        SubjectPreResolve: ['PrereqConfigData', 'promiseService', '$stateParams', 'SubjectService', function (PrereqConfigData, promiseService, $stateParams, SubjectService) {

                            return promiseService.verifyOrLoadData({
                                loginRequiredData: [
                                    //["SubjectSummary", $stateParams.subjectId], promiseService right now only handles an empty check. It needs to be built
                                    // out to handle a check against params & arg to verify not only that the data is present, but that it is correct, and not loaded
                                    // from a previous subject, in this example. Therefor additional promise chain in summary controller for now (and only non study-wide data
                                    // handled currently by promiseService.)
                                    "FormTemplates",
                                    "GetMetaData"
                                ]
                            })

                        }]
                    }
                })
                .state('subject.edit', {
                    url: '/edit',
                    templateUrl: "SubjectTemplates/Subject.html",
                    controller: 'SubjectCtrl',
                    permission: 'updateSubject',
                    resolve: {
                        SubjectEditPreResolve: ['SubjectPreResolve', 'promiseService', function (SubjectPreResolve, promiseService) {

                            return promiseService.verifyOrLoadData({
                                loginRequiredData: [
                                    //  breaks edit page
                                    //"LoadAllSites"
                                ]
                            });

                        }]
                    }
                })

                .state('subject.enroll', {
                    url: '/edit/{enroll}',
                    templateUrl: "SubjectTemplates/Subject.html",
                    controller: 'SubjectCtrl',
                    permission: 'updateSubject',
                    resolve: {
                        SubjectEditPreResolve: ['SubjectPreResolve', 'promiseService', function (SubjectPreResolve, promiseService) {

                            return promiseService.verifyOrLoadData({
                                loginRequiredData: [
                                    //  breaks edit page
                                    //"LoadAllSites"
                                ]
                            });

                        }]
                    }
                })
                .state('subject.summary', {
                    url: "/summary",
                    templateUrl: "SubjectTemplates/SubjectSummary.html",
                    controller: 'SummaryCtrl',
                    permission: 'readSubject',
                    resolve: { SubjectEditPreResolve: ['SubjectPreResolve', function (SubjectPreResolve) { return SubjectPreResolve }] }
                })
                .state('queries', {
                    url: "/queries/{status}",
                    parent: 'root',
                    templateUrl: "Study/StudyTemplates/QueryList.html",
                    controller: "QueryListCtrl",
                    permission: 'readQuery',
                })
                .state('print', {
                    url: '/print',
                    parent: 'root',
                    templateUrl: 'Study/StudyTemplates/PrintView.html',
                    controller: 'PrintController',
                    permission: 'print',
                })
                .state('dataexport', {
                    url: '/dataexport',
                    parent: 'root',
                    templateUrl: 'Study/StudyTemplates/DataExport.html',
                    controller: 'DataExportCtrl',
                    permission: 'dataExport',
                })
                .state('reporting', {
                    url: '/reporting',
                    parent: 'root',
                    templateUrl: 'Study/StudyTemplates/Reporting.html',
                    controller: 'ReportingController as rptCtrl',
                    permission: 'dataExport',
                })
                .state('account', {
                    url: '/account',
                    parent: 'root',
                    templateUrl: 'templates/account.html',
                    controller: 'AccountController as AccntCtrl',
                    parent: 'root',
                    permission: 'readSite'
                })
        });
})();
angular.module('app').filter('removeUnderscore', function() {
    return function(input) {
        return input.replace(/_/g, ' ');
    };
});

angular.module('app').filter('YesNo', function () {
    return function (input) {
        if (input) {
            return 'Yes';
        }
        else return 'No';
    };
});

angular.module('app').filter('Yes', function () {
    return function (input) {
        if (input) {
            return 'Yes';
        }
        else return '';
    };
});

// filter for removing key-value pair from object
angular.module('app').filter('excludes')
angular.module('app')
    .controller('FormLoaderCtrl', ['$scope', '$rootScope', '$http', '$log', 'SessionTransitService', 'PermissionMatrixService', 'FormTemplateService', 'FormLoaderDTO', 'StudyExcelSheetMap', 'FORM_FIELD_CONSTANTS', 'StudyConfigService', function ($scope, $rootScope, $http, $log, SessionTransitService, PermissionMatrixService, FormTemplateService, FormLoaderDTO, StudyExcelSheetMap, FORM_FIELD_CONSTANTS, StudyConfigService) {
        var vm = this;

        var adminWorksheets = ['study', 'regions', 'sites', 'users', 'visits'];

        var configurationWorksheets = ['configuration', 'permissions', 'subject', 'status', 'dashboard'];

        function initData () {
            vm.data = {};
            vm.metaData = "";
            vm.loadingErrors = "";
            vm.formName = "";
            vm.orderNumber = 0;
            vm.isValidForm = null;
            vm.sheetType = '';
        }

        $scope.isDev = PermissionMatrixService.hasPermission('isDev');
        $scope.canCreateTemplate = PermissionMatrixService.hasPermission('createTemplate');
        $scope.canCreateConfig = PermissionMatrixService.hasPermission('createConfig');

        $scope.read = function (workbook) {
            initData();
            vm.isSaveSuccessful = false;

            var FormLoader = new FormLoaderDTO;

            for (var sheetName in workbook.Sheets) {

                if (configurationWorksheets.indexOf(sheetName) !== -1) {
                    // this is a configuration workbook
                    var configObject = FormLoader.CreateConfigData(workbook);
                    vm.metaData = configObject;
                    vm.sheetType = 'configuration';
                    break;
                    
                } else if (adminWorksheets.indexOf(sheetName.trim().toLowerCase()) !== -1) {
                    // this is an admin style workbook
                    vm.data[sheetName] = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], { header: 'A' });
                    var parsedSheet = FormLoader[StudyExcelSheetMap[sheetName.toLowerCase()]](vm.data[sheetName]);
                    // save this object in a service for review
                    parsedSheet && FormTemplateService.setStudyLoadedProperty(sheetName.trim().toLowerCase(), parsedSheet);
                    // remove for deploy
                    var testStudyData = FormTemplateService.getAllStudyLoadedObjects();
                    console.log(testStudyData);
                    $scope.isDev && $log.info(testStudyData);
                    vm.sheetType = 'admin';
                    break;

                } else {
                    // assume this is a form, as the sheet name is not recognized
                    vm.formName = sheetName;
                    var currentForm = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], { header: 'A' });

                    // CreateFormMetaData returns an object with metadata and errors
                    var parsedExcelObj = FormLoader.CreateFormMetaData(currentForm);
                    vm.metaData = parsedExcelObj.metaData;
                    vm.loadingErrors = parsedExcelObj.errors;
                    if (parsedExcelObj.topLevel.displayName) vm.formName = parsedExcelObj.topLevel.displayName;
                    if (parsedExcelObj.topLevel.order) vm.orderNumber = parsedExcelObj.topLevel.order;
                    vm.data[vm.formName] = currentForm;
                    vm.sheetType = 'form';
                }
            }

            if (vm.loadingErrors.length) {
                vm.isValidForm = false;
                $scope.$apply();
                return;
            } 

            
            vm.isValidForm = true;
            $scope.$apply();
        }

        $scope.error = function (sheetJsError) {
            vm.isValidForm = false;
            vm.data = sheetJsError;
            $scope.$apply();
            $log.error(sheetJsError);
        }

        // not yet implemented 
        //vm.export = function () {
        //    debugger
        //    vm.data[vm.formName]; // need to get the excelData at some point in the request

        //    var wopts = { bookType: 'xlsx', bookSST: false, type: 'binary' }; // options form sheetjs

        //    var wb = XLSX.utils.book_new();
        //    var ws = XLSX.utils.json_to_sheet(vm.data[vm.formName]);
        //    XLSX.utils.book_append_sheet(wb, ws, vm.formName);
        //    var wbout = XLSX.write(wb, wopts);

        //    // create a url and element for force a download
        //    var url = URL.createObjectURL(new Blob([s2ab(wbout)]));
        //    var a = document.createElement('a');
        //    a.href = url;
        //    a.download = 'test.xlsx';
        //    a.target = '_blank';
        //    a.click();

        //    // helper function to create the buffer
        //    function s2ab(s) {
        //        if (typeof ArrayBuffer !== 'undefined') {
        //            var buf = new ArrayBuffer(s.length);
        //            var view = new Uint8Array(buf);
        //            for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
        //            return buf;
        //        } else {
        //            var buf = new Array(s.length);
        //            for (var i = 0; i != s.length; ++i) buf[i] = s.charCodeAt(i) & 0xFF;
        //            return buf;
        //        }
        //    }

        //}

        function setFormType(formName) {
            for (var formLookup in FORM_FIELD_CONSTANTS.FORM_TYPE_LOOKUP) {
                if (new RegExp(formLookup, 'i').test(formName)) {
                    return FORM_FIELD_CONSTANTS.FORM_TYPE_LOOKUP[formLookup];
                }
            }
            return 0;
        }

        vm.saveSettings = function () {
            var keys = Object.keys(vm.metaData);
            if (!keys.length) return;

            StudyConfigService.saveSettings({ data: vm.metaData }).then(function () {
                vm.isSaveSuccessful = true;
                initData();
                FormTemplateService.getAll();
            });
        }

        vm.saveForm = function () {

            var createSubjectForm = FormTemplateService.getMetaDataByType(11);
            if (!vm.formName) return;
            if (!angular.isNumber(vm.orderNumber)) return;

            var savedFormName = vm.formName.toLowerCase().trim().replace(/\s/g, '_');
            var updatedName = savedFormName;
            var formType = vm.metaData.Type || setFormType(savedFormName);
            vm.metaData.displayName = vm.formName.trim();

            if (formType === 11 && createSubjectForm) {
                savedFormName = createSubjectForm.formName;
            }
            //if (formType === 11 && createSubjectForm && createSubjectForm.formName !== savedFormName) return;
            // console.log({ name: savedFormName, jsonSchema: JSON.stringify(vm.metaData), Order: vm.orderNumber, isActive: true, excelJson: JSON.stringify(vm.data[vm.formName]) });
            // add add excelJson property to the form template
            FormTemplateService.saveFormTemplate({ updatedName: updatedName, name: savedFormName, jsonSchema: JSON.stringify(vm.metaData), Order: vm.orderNumber, Type: formType, isActive: true, excelJson: JSON.stringify(vm.data[vm.formName]) }, updatedName).then(function () {
                vm.isSaveSuccessful = true;
                initData();
                FormTemplateService.getAll();
            });

        };

    }]);
'use strict';

angular.module('app')
  .directive('jsXls', function () {
      return {
          restrict: 'E',
          template: '<input type="file" ng-click="clearOldData()"/>',
          replace: true,
          link: function (scope, element, attrs) {

              function handleSelect() {
                  var files = this.files;
                  for (var i = 0, f = files[i]; i != files.length; ++i) {
                      var reader = new FileReader();
                      var name = f.name;
                      reader.onload = function (e) {
                          if (!e) {
                              var data = reader.content;
                          } else {
                              var data = e.target.result;
                          }

                          /* if binary string, read with type 'binary' */
                          try {
                              var workbook = XLS.read(data, { type: 'binary' });

                              if (attrs.onread) {
                                  var handleRead = scope[attrs.onread];
                                  if (typeof handleRead === "function") {
                                      handleRead(workbook);
                                  }
                              }
                          } catch (e) {
                              if (attrs.onerror) {
                                  var handleError = scope[attrs.onerror];
                                  if (typeof handleError === "function") {
                                      handleError(e);
                                  }
                              }
                          }

                          // Clear input file
                          element.val('');
                      };

                      //extend FileReader
                      if (!FileReader.prototype.readAsBinaryString) {
                          FileReader.prototype.readAsBinaryString = function (fileData) {
                              var binary = "";
                              var pt = this;
                              var reader = new FileReader();
                              reader.onload = function (e) {
                                  var bytes = new Uint8Array(reader.result);
                                  var length = bytes.byteLength;
                                  for (var i = 0; i < length; i++) {
                                      binary += String.fromCharCode(bytes[i]);
                                  }
                                  //pt.result  - readonly so assign binary
                                  pt.content = binary;
                                  $(pt).trigger('onload');
                              }
                              reader.readAsArrayBuffer(fileData);
                          }
                      }

                      reader.readAsBinaryString(f);

                  }
              }

              element.on('change', handleSelect);
          }
      };
  });
angular.module('app')
    .controller('EConsentLoaderCtrl', ['$scope', '$filter', '$rootScope', '$http', '$log', 'SessionTransitService', 'PermissionMatrixService', 'FormTemplateService', 'FormLoaderDTO', 'StudyExcelSheetMap', 'FORM_FIELD_CONSTANTS', 'StudyConfigService', 'Upload', 'FileSaver', function ($scope, $filter, $rootScope, $http, $log, SessionTransitService, PermissionMatrixService, FormTemplateService, FormLoaderDTO, StudyExcelSheetMap, FORM_FIELD_CONSTANTS, StudyConfigService, Upload, FileSaver) {
        $scope.studyName = SessionTransitService.sessionObj.activeStudy.Name;
        $scope.eConsentForms = FormTemplateService.getEConsentForms();
        $scope.sites = SessionTransitService.sessionObj.activeStudy.Sites;

        //Look into generating PDFs directly from html input with jsPDF

        $scope.$watch('file', function () {
            if ($scope.file) {
                var fileExtension = $scope.file.name.split('.');
                $scope.isNotPDF = fileExtension[fileExtension.length - 1].toLowerCase() !== 'pdf' ? true : false;
            } else {
                $scope.isNotPDF = false;
            }
        });

        $scope.saveForm = function () {

            var studyContainer = SessionTransitService.sessionObj.activeStudy.Name.replace(/\W+/g, '');

            //bundle this into a method on the service
            FormTemplateService.saveEConsentForm($scope.file, studyContainer).then(function (response) {
                var data = setSaveData(response.data.Name, response.data.Description);
                FormTemplateService.saveFormTemplate(data).then(function (response) {
                    initData();

                    $scope.eConsentForms = FormTemplateService.getEConsentForms();
                });
            });
           
        }

        $scope.toggleStatus = function (form) {
            form.UpdatedName = form.Name;
            FormTemplateService.saveFormTemplate(form);
        }

        $scope.cancelEditMode = function () {
            initData();
            $scope.isEditMode = false;
        }

        $scope.editForm = function (form) {
            $scope.isEditMode = true;
            $scope.name = form.properties.documentName;
            $scope.documentVersion = form.properties.documentVersion;
            $scope.date = $filter('date')(setUTCDate(form.properties.date), 'MM/dd/yyyy', 'UTC');
            $scope.approvalDate = $filter('date')(setUTCDate(form.properties.approvalDate), 'MM/dd/yyyy', 'UTC');
            $scope.protocolVersion = form.properties.protocolVersion;
            $scope.summary = form.properties.summary;
            $scope.documentSite = form.properties.siteID || '';
        }

        //$scope.testDownload = function () {
        //    $http.get("http://localhost:50000/api/blob/" + studyContainer + "/" + $sco, { responseType: "arraybuffer" })

        //        .then(function (data) {
        //            var file = new Blob([data.data], { type: 'application/octet-stream' });
        //            FileSaver.saveAs(file, "whoa");
        //        }).catch(function (data) {
        //            toaster.error(data.statusText, data.data);
        //        });
        //}

        $scope.isFormComplete = function () {
            return ($scope.file && !$scope.isNotPDF && $scope.name && $scope.documentVersion && $scope.protocolVersion && $scope.date && $scope.documentSite);
        }
        
        $scope.getSiteName = function (form) {
            var formSite = $scope.sites.find(function (site) {
                return site.ID == form.properties.siteID;
            });
            if (formSite) return formSite.Name;
            return "";
        }

        $scope.cancelEditMode = function () {
            $scope.isEditMode = false;
            initData();
        }


        function setFormData(studyContainer, fileName) {
            return {

                approvalDate: setUTCDate($scope.approvalDate),
                date: setUTCDate($scope.date),
                documentName: $scope.name,
                documentVersion: $scope.documentVersion,
                protocolVersion: $scope.protocolVersion,
                fileName: fileName,
                studyContainer: studyContainer,
                summary: $scope.summary,
                siteID: $scope.documentSite

            }
        }

        function setSaveData(fileName, studyContainer) {

            var formData = setFormData(studyContainer, fileName);
            var name = $scope.name.toLowerCase().replace(/\W+/g, '') + $scope.documentVersion.toLowerCase().replace(/\W+/g, '');
            var saveData = {
                updatedName: name,
                name: name,
                jsonSchema: JSON.stringify(formData),
                isActive: true,
                // change to 22
                type: 22,
            }
            return saveData;
        }

        function setUTCDate(date) {
            var parser = $.fn.datepicker.DPGlobal;
            return parser.parseDate(date, parser.parseFormat("mm/dd/yyyy"));
        }

        function initData() {
            $scope.name = "";
            $scope.approvalDate = "";
            $scope.date = "";
            $scope.documentVersion = "";
            $scope.protocolVersion = "";
            $scope.file = null;
            $scope.summary = "";
            $scope.documentSite = "";

            angular.forEach(angular.element("input[type='file']"), function (inputElem) {
                angular.element(inputElem).val(null);
            });
        }
    }]);
angular.module('app')
    .controller('ReadEConsentCtrl', ['$scope', '$uibModal', '$stateParams', '$sce', '$filter', '$rootScope', '$http', '$state', '$log', 'SessionTransitService', 'PermissionMatrixService', 'WEB_CONFIG', 'userService', 'FormTemplateService', 'FormLoaderDTO', 'StudyExcelSheetMap', 'FORM_FIELD_CONSTANTS', 'StudyConfigService', 'Upload', 'FileSaver', 'SubjectService', 'SubjectIDFactory',
        function ($scope, $uibModal, $stateParams, $sce, $filter, $rootScope, $http, $state, $log, SessionTransitService, PermissionMatrixService, WEB_CONFIG, userService, FormTemplateService, FormLoaderDTO, StudyExcelSheetMap, FORM_FIELD_CONSTANTS, StudyConfigService, Upload, FileSaver, SubjectService, SubjectIDFactory) {
            var subjectMetaData = StudyConfigService.getMetaDataByProperty("subject");

            $scope.sites = SessionTransitService.sessionObj.activeStudy.Sites;
            $scope.eConsentForms = setEConsentFormsBySite();
            $scope.allSignatures = {
                additional: [],
                subject: {},
                investigator: {}
            };
            $scope.isManualConsent = false;

            $scope.toggleManualEConsent = function () {
                $scope.isManualConsent = !$scope.isManualConsent;
            };

            $scope.$watch('file', function () {
                debugger
            });
            
            $scope.downloadForm = function (type) {
                var form = JSON.parse($scope.selectedForm);
                var studyContainer = form.properties.studyContainer;
                var fileName = form.properties.fileName;

                FormTemplateService.downloadPDF(studyContainer, fileName).then(function (response) {
                    userService.requireLoginModal('Subject View').then(function () {

                        if (type === 'download') {
                            var file = new Blob([response], { type: 'application/octet-stream' });
                            FileSaver.saveAs(file, fileName);
                        } else if (type === 'display') {
                            debugger
                            renderPDF(response);
                            SessionTransitService.changeToSubjectRole();
                            //$scope.subjectView = true;
                        }

                    })

                });
            };

            $scope.renderManualConsent = function () {

            }

            $scope.uploadCompletedConsent = function () {

            };

            $scope.cancelConsent = function () {
                userService.requireLoginModal('Cancel eConsent').then(function () {
                    SessionTransitService.changeToPreviousRole();
                    $state.transitionTo('home');
                })
            };

            $scope.allFieldsComplete = function () {
                return ($scope.selectedForm && $scope.subjectName && $scope.subjectSite);
            };



            $scope.completeConsent = function () {

                // open login modal to require signature to complete econsent.  On close, will save subject based on saving or creating new.
                userService.requireLoginModal('Complete Consent').then(function (response) {
                    var subject, saveSubjectData;

                    if ($scope.formType === 'edit') {
                        subject = $scope.currentSubject;
                        saveSubjectData = initializeSubject(subject);
                        SubjectService.UpdateSubject(saveSubjectData).then(function (response) {
                            // reroute to new view
                            SessionTransitService.changeToPreviousRole();
                            $state.go('econsentsubjects');
                        });
                    } else {
                        subject = JSON.parse(JSON.stringify(FORM_FIELD_CONSTANTS.SUBJECT_DEFAULT));
                        //subject.ExternalSubjectIdFormatter = subjectMetaData.idFormat;
                        subject.ConsentData = { forms: {}};
                        saveSubjectData = initializeSubject(subject);
                        subject.Consent = false;
                        SubjectService.AddSubject(saveSubjectData).then(function (response) {
                            // reroute to new view
                            SessionTransitService.changeToPreviousRole();
                            $state.go('econsentsubjects');
                        });
                    }
                }, function (response) {
                    $log.info("Modal Closed");
                });

            };

            $scope.canCompleteAndDownloadForm = function () {
                return $scope.allSignatures.subject.uncroppedSignature && $scope.allSignatures.investigator.uncroppedSignature;
            }

        

            $scope.openSignatureModal = function (isSubjectSignature, isAdditionalSignature) {

                var templateString = 'EConsent/SignatureModal.html';
                var controllerString = 'EConsentSignatureCtrl';
                var studyName = SessionTransitService.sessionObj.activeStudy.Name;

                var modalInstance = $uibModal.open({
                    animation: false,
                    templateUrl: templateString,
                    controller: controllerString,
                    size: 'lg',
                    backdrop: 'static',
                    keyboard: false,
                    windowClass: 'econsent-modal-window',
                    resolve: {
                        subjectName: function () {
                            return $scope.subjectName;
                        },

                        isSubject: function () {
                            return isSubjectSignature;
                        },
                        studyName: function () {
                            return studyName;
                        },
                        isAdditionalSignature: function () {
                            return isAdditionalSignature;
                        }
                    }
                });

                modalInstance.result.then(function (response) {
                    setSignatures(response);
                }, function (response) {
                    $log.info("Modal Closed");
                });
            };

            init();
            
            function renderPDF(response) {
                return FormTemplateService.renderPDF(response, 'econsent-pdf-container', 1).then(function () {
                    $scope.pdfRendered = true
                });
            }


            function initializeSubject(subject) {
                var form = JSON.parse($scope.selectedForm);
                //for editing test - need to disallow picking form that is being edited
                var formId;
                if ($scope.isEditForm) {
                    formId = $stateParams.formId;
                } else {
                    formId = form.ID;
                }
                subject.SiteID = $scope.subjectSite;

                subject.ConsentData.fullName = $scope.allSignatures.subject.name;
                subject.ConsentData.forms[formId] = {
                    formId: formId,
                    fullName: $scope.allSignatures.subject.name,
                    uncroppedSignature: $scope.allSignatures.subject.uncroppedSignature,
                    signature: $scope.allSignatures.subject.signature,
                    date: $scope.allSignatures.subject.date,
                    consentForm: JSON.parse($scope.selectedForm),

                    investigator: {
                        fullName: $scope.allSignatures.investigator.name,
                        userName: $scope.investigatorUserName,
                        uncroppedSignature: $scope.allSignatures.investigator.uncroppedSignature,
                        signature: $scope.allSignatures.investigator.signature,
                        date: $scope.allSignatures.investigator.date
                    },
                    additional: {

                        fullName: $scope.additionalName,
                        signature: $scope.additionalSignature,
                        uncroppedSignature: $scope.additionalUncroppedSignature,
                        date: $scope.additionalDate
                    },

                    additional: []
                };

                $scope.allSignatures.additional.forEach(function (additionalSignature) {
                    subject.ConsentData.forms[formId].additional.push({
                        fullName: additionalSignature.name,
                        signature: additionalSignature.signature,
                        uncroppedSignature: additionalSignature.uncroppedSignature,
                        date: additionalSignature.date
                    });
                });

                return subject;
            }

            $scope.append = function () {

                var canvasContainer = document.getElementById('econsent-pdf-container');
                var canvases = canvasContainer.getElementsByTagName('canvas');

                var formOptions = JSON.parse($scope.selectedForm).properties;
                formOptions.studyName = SessionTransitService.sessionObj.activeStudy.Name;
               
                userService.requireLoginModal('Download Signed eConsent').then(function () {
                    FormTemplateService.appendSignaturesToPDF($scope.allSignatures, canvases, formOptions);
                });

            }

            function displayDate(date) {
                return $filter('date')(date, 'MM-dd-yyyy', 'UTC');
            }

            function setSignatures(response) {
                var role = response.$value.role;
                var responseObject = {
                    signature: response.$value.signature,
                    uncroppedSignature: response.$value.uncroppedSignature,
                    name: response.$value.name,
                    date: response.$value.saveDate
                };

                if (role === 'additional') {
                    $scope.allSignatures.additional.push(responseObject);
                } else {
                    $scope.allSignatures[role] = responseObject;
                }



                $scope.investigatorUserName = response.$value.investigatorUserName;

                //var role = response.$value.role;
                //var signeeName = response.$value.name
                //$scope[role + 'Signature'] = response.$value.signature;
                //$scope[role + 'UncroppedSignature'] = response.$value.uncroppedSignature;
                //$scope[role + 'Name'] = signeeName;
                //$scope[role + 'Date'] = response.$value.saveDate;
                //$scope.investigatorUserName = response.$value.investigatorUserName;
            }

            function init() {
                if ($stateParams.subjectId) {
                    SubjectService.LoadSubjectById($stateParams.subjectId)
                        .then(function success(response) {
                            $scope.currentSubject = response;
                            var firstFormId = Object.keys(response.ConsentData.forms)[0];
                            var subjectData = response.ConsentData.forms[firstFormId];
                            $scope.formType = 'edit';
                            if ($stateParams.formId) {
                                $scope.isEditForm = true;

                                //get this to default to correct form and disable it in dropdown
                                $scope.selectedForm = $scope.eConsentForms.filter(function (form) {
                                    return form.ID == $stateParams.formId;
                                })[0];

                            }
                            $scope.subjectName = subjectData.fullName;
                            $scope.subjectSite = response.SiteID.toString();

                            // need to keep form being edited here
                            removeCompletedForms(response.ConsentData.forms);

                        }, function fail(response) {
                            $log.error('could not find user');
                        });
                }
            }

            function setEConsentFormsBySite() {
                var activeForms = FormTemplateService.getActiveEConsentForms();
                var formsBySite = {};
                //initialize empty array as value for lookup object
                $scope.sites.forEach(function (site) {
                    formsBySite[site.ID] = [];
                });

                activeForms.forEach(function (form) {
                    // remove conditional
                    if (form.properties.siteID) formsBySite[form.properties.siteID].push(form);
                });

                return formsBySite;
            }

            function removeCompletedForms(ConsentData) {

                for (siteID in $scope.eConsentForms) {
                    $scope.eConsentForms[siteID] = $scope.eConsentForms[siteID].filter(function (form) { return !ConsentData[form.ID] });
                }
            }
        
        }]);
angular.module('app')
    .controller('EConsentSignatureCtrl', ['subjectName', 'isSubject', 'studyName', 'isAdditionalSignature', '$scope', 'eConsentSignaturePadService', '$uibModal', '$uibModalInstance', '$sce', '$filter', '$log', 'SessionTransitService', 'FormTemplateService', 'FormLoaderDTO', 'StudyExcelSheetMap', 'FORM_FIELD_CONSTANTS', 'StudyConfigService', 'Upload', 'FileSaver',
        function (subjectName, isSubject, studyName, isAdditionalSignature, $scope, eConsentSignaturePadService, $uibModal, $uibModalInstance, $sce, $filter, $log, SessionTransitService, FormTemplateService, FormLoaderDTO, StudyExcelSheetMap, FORM_FIELD_CONSTANTS, StudyConfigService, Upload, FileSaver) {

            var currentUser = SessionTransitService.sessionObj.CurrentUser;
            var currentDate = new Date();
            $scope.studyName = studyName;


            if (isSubject) {
                $scope.consentName = subjectName;
            }

            $scope.isSubject = isSubject;
            $scope.consentDate = $filter('date')(currentDate, 'MM/dd/yyyy HH:mm');
            $scope.isAdditionalSignature = isAdditionalSignature;

            $scope.cancel = function () {
                $uibModalInstance.dismiss();
            };

            $scope.clear = function () {
                eConsentSignaturePadService.signaturePad.clear();
            }


            $scope.save = function () {

                if (eConsentSignaturePadService.signaturePad.isEmpty()) {
                    return
                }

                var signeeName = $scope.consentName;
                var signeeRole;
                if ($scope.isAdditionalSignature) {
                    signeeRole = 'additional';
                } else {
                    signeeRole = isSubject ? 'subject' : 'investigator';
                }
                var data = eConsentSignaturePadService.signaturePad.cropSignatureCanvas();
                var uncroppedData = eConsentSignaturePadService.signaturePad.toDataURL();

                $uibModalInstance.close({
                    $value: {
                        signature: data,
                        name: signeeName,
                        role: signeeRole,
                        saveDate: currentDate,
                        investigatorUserName: currentUser.UserName,
                        uncroppedSignature: uncroppedData
                    }
                });
            }

        }]);
angular.module('app')
    .controller('EConsentSubjectsCtrl', ['SubjectService', 'FormTemplateService', 'PermissionMatrixService', '$filter', '$timeout', '$state', '$rootScope', '$scope', 'SessionTransitService', 'Upload', 'FileSaver',
        function (subjectservice, FormTemplateService, PermissionMatrixService, $filter, $timeout, $state, $rootScope, $scope, SessionTransitService, Upload, FileSaver) {
            $scope.studyName = SessionTransitService.sessionObj.activeStudy.Name;
            $scope.canEnrollSubject = PermissionMatrixService.hasPermission('createSubject');
                
            $scope.orderBy = 'DateChanged';
            $scope.orderAsc = false;
            $scope.currentPage = 1;
            $scope.selectedFormID = {};
            $scope.selectedFormData = {};
            $scope.pageSize = 15;
            var originalPageSize = $scope.pageSize;


            $scope.getConsentCount = function (subject) {
                var consentCount = Object.keys(subject.ConsentData.forms).length;
                return consentCount;
            }

            $scope.SearchFilter = {};
            if ($scope.parameters) {
                $scope.SearchFilter.ExternalSubjID = $scope.parameters.searchTerm;
            }

            $scope.sessionObj = SessionTransitService.getSessionObj();

            $scope.SelectSubject = function (subject) {
                // If the subject list is a modal
                if (typeof $scope.close === "function") {
                    $scope.close();
                }
                window.location = '#/subject/' + subject._id; // using mongo id
            };

            $scope.setSelectedConsentData = function (subject) {

                $scope.selectedFormData[subject._id] = subject.ConsentData.forms[$scope.selectedFormID[subject._id]];
                $scope.selectedFormData[subject._id].displayDate = $filter('date')($scope.selectedFormData[subject._id].date, 'MM/dd/yyyy HH:mm', 'UTC')
              

            };

            $scope.addNewEConsent = function (subjectID) {
   
                window.location = '#/econsent/' + subjectID;
            }

            $scope.goToAddSubject = function (subjectId, consent) {
                //$state.transitionTo('newSubject');
                if (consent) {
                    return;
                }
                window.location = '#/subject/' + subjectId + '/edit/enroll';
            }

            $scope.downloadAndAppendSignatures = function (subject, form) {
                //form = JSON.parse(form);
                if (!form) return;
                var container = form.consentForm.properties.studyContainer;
                var fileName = form.consentForm.properties.fileName;

                var formOptions = form.consentForm.properties;
                formOptions.studyName = $scope.studyName;

                $scope.options = {
                    subject: {
                        name: form.fullName,
                        signature: form.uncroppedSignature,
                        date: form.date
                    },

                    investigator: {
                        name: form.investigator.fullName,
                        signature: form.investigator.uncroppedSignature,
                        date: form.investigator.date
                    },

                    additional: form.additional
                };

                FormTemplateService.appendSignaturesAndDownloadPDF(container, fileName, $scope.options, formOptions);
            };

            $rootScope.$on('pdfRendered', function () {

                var canvasContainer = document.getElementById('download-econsent-container');
                var canvases = canvasContainer.getElementsByTagName('canvas');
                FormTemplateService.appendSignaturesToPDF($scope.options, canvases);
            })

            $scope.ChangeSort = function (orderBy, orderAsc) {
                $scope.orderBy = orderBy;
                $scope.orderAsc = orderAsc;
                $scope.currentPage = 1;
                GetSubjects();
            }

            $scope.ChangePage = function (page) {
                $scope.currentPage = page;
                GetSubjects();
            }

            $scope.ChangeFilter = function () {
                $scope.currentPage = 1;
                GetSubjects();
            }


            $scope.getSubjectSite = function (subject) {
                var sites = SessionTransitService.sessionObj.activeStudy.Sites;
                var siteMatch = sites.find(function (site) {
                    return site.ID == subject.SiteID;
                });

                return siteMatch.Name;
            };

            var GetSubjects = function () {
                var query = "{";

                if ($scope.SearchFilter.SiteID) {
                    query += "SiteID: " + $scope.SearchFilter.SiteID;
                }

                if (!$scope.SearchFilter.Status) {
                    delete $scope.SearchFilter.Status;
                }

                if ($scope.SearchFilter.subjectName) {
                    // implement search by name
                    if (query.length > 1) {
                        query += ", ";
                    }
                    query += "'ConsentData.fullName': /" + $scope.SearchFilter.subjectName + "/i";
                }

                if ($scope.SearchFilter.EnrollmentStatus) {
                    if (query.length > 1) {
                        query += ", ";
                    }
                    query += "Consent: " + $scope.SearchFilter.EnrollmentStatus;
                }

                query += "}"
                subjectservice.LoadSubjects(query, $scope.currentPage, $scope.pageSize, $scope.SearchFilter.Status, $scope.orderBy, $scope.orderAsc).then(function success(response) {
                    $scope.EConsentSubjects = subjectservice.GetSubjects();
                    setSelectedFormData();
                    $scope.TotalSubjects = response.NumSubjects;
                    $scope.displaySelections = setSubjectViewNumber(originalPageSize, $scope.TotalSubjects);
                    console.log($scope.EConsentSubjects);
                }, function fail(response) {

                });
            };


            function setSelectedFormData() {
                $scope.EConsentSubjects.forEach(function (subject) {

                    var formKeys = Object.keys(subject.ConsentData.forms);

                    $scope.selectedFormID[subject._id] = formKeys[0].toString();
                    $scope.setSelectedConsentData(subject);

                });
            }

            function setSubjectViewNumber(defaultNumber, numSubjects) {
                var count = defaultNumber;
                var displaySelections = [];
                //var displayObj = {};
                while (count < numSubjects) {

                    displaySelections.push({ value: count, display: count.toString() });
                    count += $scope.pageSize;
                    if (count >= numSubjects) {
                        displaySelections.push({ value: numSubjects, display: "Show All" });
                    }
                }

                return displaySelections;
            }

            function displayDate(date) {
                return $filter('date')(date, 'MM-dd-yyyy', 'UTC');
            }

            $scope.filterPageSize = function () {
                if ($scope.pageSize >= $scope.NumSubjects) {
                    $scope.currentPage = 1;
                }
                GetSubjects();
            }

            $scope.ClearFilter = function () {
                $scope.SearchFilter.Status = undefined; // does this need to be set to undefined?
                $scope.SearchFilter.ExternalSubjID = undefined;
                $scope.currentPage = 1;

                GetSubjects();
            }

            GetSubjects();
        }]);
angular.module('app')
    .controller('StudyLoaderCtrl', ['$scope', '$state', 'WorkbookParserDTO', 'StudyLoaderService', '$http', 'StudyConfigService', 'APP_CONFIG', '$log',
        function ($scope, $state, WorkbookParserDTO, StudyLoaderService, $http, StudyConfigService, APP_CONFIG, $log) {

            var ctrl = this;
            ctrl.srv = StudyLoaderService;


            // THIS CONTROLLER HANDLES MULTIPLE ROUTER STATES AND TEMPLATES


            ////////// Common Functions /////////

            // set distribution for column keys in all forms of sheetsAndColumnKeysMapper
            ctrl.setDistribution = function (columnKey, distribution) {
                var mapper = ctrl.srv.workbookParser.sheetNamesAndColumnKeysMapper;
                for (sheet in mapper) {
                    if (mapper[sheet][columnKey.name]) {
                        mapper[sheet][columnKey.name].setDistribution(distribution);
                    }
                }
            }



            ////////// Nav /////////

            var stepToStateMapper = {
                1: 'studyloader.upload',
                2: 'studyloader.distributeFormData',
                3: 'studyloader.siteAndSubjectData',
                4: 'studyloader.subforms',
                5: 'studyloader.dev'
            }

            ctrl.goToStep = function (stepNumber) {
                var step = stepToStateMapper[stepNumber]
                ctrl.srv.routeStateNum = stepNumber;
                $state.transitionTo(step);
            };

            if (!StudyLoaderService.workbookParser.sheetNames) {
                ctrl.goToStep(1);
            }



            ////////// State Inits /////////

            var state = ctrl.srv.routeStateNum;
            switch (state) {
                case 1:
                    ctrl.srv.clearFormRelationshipMapper();
                    if (ctrl.srv.distributionDesignations.length === 0) loadDistributionsArray();
                    break;
                case 4:
                    subformsStateInit();
                    break;
            }




            ////////// Step 1: UPLOAD | methods and properties  for studyLoaderUpload.html /////////

            function Distribution(distributionName, displayName) {
                this.distributionName = distributionName;
                this.displayName = displayName;
            }

            // load distributions to service
            // distributions currently handled: Subject, SUBJECTID, Site, SITEID, Trash
            function loadDistributionsArray() {
                ctrl.srv.setDistributionDesignations([
                    new Distribution("subject", "Subject"),
                    new Distribution("SUBJECTID", "Main Subject ID"),
                    new Distribution("site", "Site"),
                    new Distribution("SITEID", "Main Site ID"),
                    new Distribution("trash", "Trash")
                ]);
            };

            ctrl.showNameVerification = false;

            $scope.read = function (rawWorkbook) {
                //$scope.dummyParse = function () {
                //ctrl.srv.initWorkbookParser(dummyWorkbook);

                ctrl.srv.initWorkbookParser(rawWorkbook);
                ctrl.showNameVerification = true;
                $scope.$apply();

            };

            ctrl.updateFormNamesAndContinue = function () {
                var mapper = ctrl.srv.workbookParser.sheetNamesAndColumnKeysMapper;
                var sheetsJson = ctrl.srv.workbookParser.sheetsJSON;
                for (oldSheetName in ctrl.srv.sheetRenameMapper) {
                    // update mapper
                    var newSheetName = ctrl.srv.sheetRenameMapper[oldSheetName].trim().replace(/\s/g, '_').toLowerCase();
                    Object.defineProperty(mapper, newSheetName, Object.getOwnPropertyDescriptor(mapper, oldSheetName));
                    delete mapper[oldSheetName];

                    // update sheetsJson
                    Object.defineProperty(sheetsJson, newSheetName, Object.getOwnPropertyDescriptor(sheetsJson, oldSheetName));
                    delete sheetsJson[oldSheetName];

                    // update sheetNames
                    ctrl.srv.workbookParser.sheetNames = Object.keys(mapper);
                }
                ctrl.goToStep(2);
            };



            ////////// Step 2: Distribute Form Data | methods and properties  for studyLoaderDistributeFormData.html /////////

            ctrl.setFormDataDistribution = function (columnKey, distribution) {

                // set distribution for column keys in all forms of sheetsAndColumnKeysMapper
                ctrl.setDistribution(columnKey, distribution);

                // set distribution for column keys in nonFormDataObj
                columnKey.setDistribution(distribution)
                if (columnKey.distribution === "NonFormData" && !ctrl.srv.workbookParser.nonFormData[columnKey.name]) {
                    ctrl.srv.workbookParser.nonFormData[columnKey.name] = columnKey;
                }
                else if (columnKey.distribution === "FormData" && ctrl.srv.workbookParser.nonFormData[columnKey.name]) {
                    delete ctrl.srv.workbookParser.nonFormData[columnKey.name];
                }

            };

            ctrl.isFormData = function (columnKey) {
                return columnKey.distribution === "FormData";
            };



            ////////// Step 3: Distribute Site and Subject Data | methods and properties  for siteAndSubjectData.html /////////

            ctrl.setSiteSubjectDistribution = function (columnKey, distribution) {

                // set distribution for column keys in all forms of sheetsAndColumnKeysMapper
                ctrl.setDistribution(columnKey, distribution);

                // set distribution for column keys in nonFormDataObj
                ctrl.srv.workbookParser.nonFormData[columnKey.name].setDistribution(distribution);

            };


            ////////// Step 4: Subforms | methods and properties  for studyLoaderSubforms.html /////////

            function subformsStateInit() {
                ctrl.srv.createFormRelationshipMapper();
            };

            ctrl.addParentForms = function (form) {
                ctrl.srv.formRelationshipMapper[form.formName].parentForms.push("");
            };

            function transferRelationshipsToMapper() {
                var relationships = ctrl.srv.formRelationshipMapper;
                var mapper = ctrl.srv.workbookParser.sheetNamesAndColumnKeysMapper;
                for (formName in relationships) {
                    if (relationships[formName].isRepeatingForm) {
                        mapper[formName].isRepeatingForm = relationships[formName].isRepeatingForm;
                        if (relationships[formName].parentForms.length > 0) mapper[formName].parentForms = relationships[formName].parentForms;
                    }
                }
            };

            ctrl.save = function () {
                transferRelationshipsToMapper();

                console.log("FINAL STATE OF MASTER MAPPER: ", ctrl.srv.workbookParser.sheetNamesAndColumnKeysMapper);
                console.log("sheetsJSON: ", ctrl.srv.workbookParser.sheetsJSON);

                ctrl.srv.workbookParser.generateSyncronyData();
                //ctrl.sendData();
                ctrl.goToStep(5);

            }

            ctrl.sendData = function () {
                // move this to service
                $http.post(StudyConfigService.getUrl(APP_CONFIG.API_ENDPOINTS.IMPORT_STUDY),
                    {
                        SubjectsImport: ctrl.srv.workbookParser.subjects,
                        SitesImport: ctrl.srv.workbookParser.sites,
                        FormsImport: ctrl.srv.workbookParser.forms,
                        SheetRenameMapper: ctrl.srv.sheetRenameMapper,
                        FormsToParentsMap: ctrl.srv.workbookParser.formsToParentsMap
                    })
                    .then(function (response) {
                        $log.info(response.data);
                    }).catch(function (data) {
                        $log.error(data.statusText, data.data);
                    });
            };

        }]);
angular.module('app').controller('DashboardCtrl', ['SubjectService', 'PermissionMatrixService', 'UserService', 'QueryService', 'CustomDataService', '$rootScope', '$scope', 'StudyConfigService', 'SessionTransitService', '$log', 'ReportingService',
    function (subjectservice, PermissionMatrixService, userservice, QueryService, CustomDataService, $rootScope, $scope, StudyConfigService, SessionTransitService, $log, ReportingService) {

        $scope.isSingleWidgetView = false;
        $scope.isEditMode = false;
        $scope.isMenuActive = false;
        //defaults to 3 columns across. Make seperate directive for each layout

        $scope.dashboardConfiguration = StudyConfigService.getMetaDataByProperty("dashboard");
        $scope.sessionObj = SessionTransitService.getSessionObj();

        $scope.queryLabels = ["Open Queries", "Closed Queries", "Answered Queries"];
        
        $scope.options = {
            legend: { display: true },
            hidden: false
        };

        $scope.toggleMenu = function ($event) {
            $event.stopPropagation();
            $scope.isMenuActive = !$scope.isMenuActive;
        }

        $scope.setEditMode = function ($event) {
            $event.stopPropagation();
            $scope.isEditMode = true;
            $scope.isMenuActive = false;
        }

        $scope.saveDashboard = function ($event) {

            $event.stopPropagation();
            // add method to service to save dashboard onto user
            // promise resolve below

            $scope.isEditMode = false;
        }

        $scope.cancelEdit = function ($event) {
            $event.stopPropagation();
            $scope.isEditMode = false;
        }


        $scope.windowClick = function ($event) {
            if ($scope.isMenuActive) {
                $scope.isMenuActive = false;
                $scope.$apply();
            }
        };

        //$rootScope.headerTitle = dashboardConfiguration.title;

        $scope.$on('maximizeWidget', function () {
            $scope.isSingleWidgetView = true;
        });

        $scope.$on('minimizeWidget', function () {
            $scope.isSingleWidgetView = false;
        });

        $scope.canReadEnrollmentByInvestigator = PermissionMatrixService.hasPermission('readEnrollmentByInvestigator');
        $scope.canReadEnrollmentBySite = PermissionMatrixService.hasPermission('readEnrollmentBySite');

        //$scope.loadTile = function (tileId, tile) {
        //    ReportingService.getTile('f5f7e631-df55-436b-8ce2-65d22b450f1b', tileId, function (config) {
        //        // Get a reference to the embedded report HTML element
        //        var reportContainer = $('#reportContainer')[0];

        //        // Embed the report and display it within the div container.
        //        var report = powerbi.embedNew(reportContainer, config);
        //    });
        //}

        //ReportingService.getTiles('f5f7e631-df55-436b-8ce2-65d22b450f1b', function (response) {
        //    $scope.tileList = response;
        //});

        //$scope.selectedTile = '7da9e650-6887-459c-a804-3f6d82812577';
        //$scope.loadTile($scope.selectedTile);
        angular.element(window).on('click', $scope.windowClick);
        $scope.$on('$destroy', function () {
            angular.element(window).off('click')
        });

}] );

angular.module('app').controller('DataExportCtrl', ['FormTemplateService', '$scope', '$rootScope', 'CustomDataService', 'SubjectService', 'FormTemplateService', '$parse', '$stateParams', 'PermissionMatrixService', '$log',
    function (FormTemplateService, $scope, $rootScope, CustomDataService, SubjectService, FormTemplateService, $parse, $stateParams, PermissionMatrixService, $log) {

        var FORM_METADATA = FormTemplateService.getMetaData($stateParams.propertyName);

        $scope.Headers = [];
        $scope.csvData = [];
        //$scope.fileName = "DataDumpTest.csv"
        $scope.min = 0;
        $scope.max = 100;
        $scope.progress = 0;
        $scope.subjects = []
        $scope.ReadyToDownload = true;

        // studyformtypes used to be set on the window in the index.html in a script tag
        //we want to get formtypes that we have made throught the form builder
        //get all forms and ids
        //$scope.studyFormTypes = window.studyFormTypes;
        $scope.studyFormTypes = Object.keys(FORM_METADATA);
        $scope.formsData = FORM_METADATA;
        //Load subjects
        $scope.Permission = $rootScope.CurrentUser.Permission;

        //if ( $scope.Permission.isSite )
        //{
        //    var queryName = "LoadAllSubjectsBySite";
        //    var params = [$scope.CurrentUser.Site.ID];
        //}
        //else if ( $scope.Permission.isManager )
        //{
            var queryName = "LoadAllSubjects";
            var params = [];
        //}

        //Gets all the subjects for to match subject and site Ids for later
        var promise = CustomDataService.LoadCustomData( queryName, params )
        .then( function success( response ) {
            //$scope.subjects = response;

            //if ( $scope.Permission.isSite ) {
            //    $scope.subjects = response.filter(function(subj){
            //        return subj.SiteID == $scope.CurrentUser.Site.ID
            //    })
            //}
            //else {
                $scope.subjects = response
            //}
        },
        function fail( response ) {
            $log.error(response);
        } );

        $scope.getExternalId = function (subjectId) {
            for (var i = 0; i < $scope.subjects.length; i++) {
                if ($scope.subjects[i]._id.$oid == subjectId) {
                    return $scope.subjects[i].ExternalSubjectId;
                }
            }
        }

        $scope.getSiteId = function (subjectId) {
            // no more SiteID? Check API endpoint and see what it's returning
            // matching with $scope subjects
            for (var i = 0; i < $scope.subjects.length; i++) {
                if ($scope.subjects[i]._id.$oid == subjectId) {
                    return $scope.subjects[i].SiteID;
                }
            }
        }
        //$scope.generateMegaObj = function (dataDumpArr) {
        //    $scope.megaObj = {};
        //    if (dataDumpArr.length > 0) {
        //        $scope.megaObj["Subject Id"] = [];
        //        $scope.megaObj["Site Id"] = [];
        //    }
        //    for (var i = 0; i < dataDumpArr.length; i++) {
        //        $scope.megaObj["Subject Id"].push({ row: i, value: $scope.getExternalId(dataDumpArr[i].SubjectId) });
        //        $scope.megaObj["Site Id"].push({row: i, value: $scope.getSiteId(dataDumpArr[i].SubjectId)})
        //        addFieldNamesAndValuesToMegaObj(dataDumpArr[i].FormData, i);
        //    }
        //}

        $scope.generateHeadersFromArray = function (dataDumpArr) {
            
            var ReportHeaderObj = {"Subject Id": true, "Site Id": true};

            //go through all properties in FormData for each form and populate header object
            //this logic excludes arrays from report
            //also excludes values that are not objects, because by convention we store non-field-related items as strings (ex: "IsSignedOff")
            for (var i = 0; i < dataDumpArr.length; i++) {
                var objOfFields = dataDumpArr[i].FormData;
                for (var property in objOfFields) {
                    if (ReportHeaderObj[property] || objOfFields[property].constructor === Array || typeof objOfFields[property] !== "object") {
                        continue;
                    }
                    //for checkbox object, add actual string path in the headers, so that you can find it in FormData later (ex: "TEST_CHECKBOX.FIRST_CHECK")
                    if (objOfFields[property].IsCheckboxObj) {
                        for (var subProperty in objOfFields[property]) {
                            if (typeof objOfFields[property][subProperty] !== "object" || subProperty == "status") continue;
                            var combinedString = property + "." + subProperty;
                            ReportHeaderObj[combinedString] = true;
                        }
                    }

                    // need to add checks for toggle button and multiselect? 
                    else {
                        ReportHeaderObj[property] = true;
                    }
                }
            }

            //create headers array from header objects
            $scope.Headers = [];
            for (var headerName in ReportHeaderObj) {
                $scope.Headers.push(headerName)
            }
        }

        $scope.generateCsvUsingHeaders = function(headerArray, dataDumpArr) {
            $scope.csvData = [];
            for (var i = 0; i < dataDumpArr.length; i++) {
                var dataObj = dataDumpArr[i].FormData;
                $scope.csvData[i] = {};
                //for each header, find the value in this dataobject and set it in the object at index i in the csvData array
                for (var j = 0; j < $scope.Headers.length; j++) {
                    if ($scope.Headers[j] == "Subject Id") {
                        //there are two properties on the subject - .SubjectId and ._id. Originally was .SubjectId
                        $scope.csvData[i]["SubjectId"] = $scope.getExternalId(dataDumpArr[i].SubjectId.$oid);
                        continue;
                    }
                    if ($scope.Headers[j] == "Site Id") {
                        $scope.csvData[i]["SiteId"] = $scope.getSiteId(dataDumpArr[i].SubjectId.$oid);
                        continue;
                    }
                    var getter = $parse($scope.Headers[j]);
                    var curField = getter(dataObj);
                    if (curField) {
                        $scope.csvData[i][$scope.Headers[j]] = curField.value;
                    }
                    else {
                        $scope.csvData[i][$scope.Headers[j]] = null;
                    }
                }
            }
        }

        //function addFieldNamesAndValuesToMegaObj(objOfFields, index) {
        //    for (var field in objOfFields) {
        //        if (objOfFields[field].IsCheckboxObj) {
        //            addFieldNamesAndValuesToMegaObj(objOfFields[field], index)
        //        }
        //        else if (objOfFields[field].constructor === Array || objOfFields[field].value === undefined) {
        //            continue;
        //        }
        //        else {
        //            if (!$scope.megaObj.hasOwnProperty(field)) {
        //                $scope.megaObj[field] = [];
        //            }
        //            $scope.megaObj[field].push({row: index, value: objOfFields[field].value});
        //        }
        //    }
        //}

        //$scope.generateHeadersAndDataFromObject = function () {
        //    $scope.Headers = [];
        //    $scope.csvData = [];

        //    var numRows = 0;
        //    for (var propName in $scope.megaObj) {
        //        $scope.Headers.push(propName);
        //        if (numRows == 0) {
        //            numRows = $scope.megaObj[propName].length;
        //            for (var i = 0; i < numRows; i++) {
        //                $scope.csvData.push({});
        //            }
        //        }
        //        for (var i = 0; i < $scope.megaObj[propName].length; i++) {
        //            var rowNum = $scope.megaObj[propName][i].row;
        //            $scope.csvData[rowNum][propName] = $scope.megaObj[propName][i].value;
        //        }

        //        for (var i = 0; i < $scope.csvData.length; i++) {
        //            var thisRowHasDataPoint = true;
        //            for (var j = 0; j < $scope.megaObj[propName].length; j++) {
        //                if ($scope.megaObj[propName][j].row != i) {
        //                    $scope.csvData[i][propName] = $scope.megaObj[propName][j].value
        //                }
        //                else {
        //                     $scope.csvData[i][propName] = null
        //                }
        //            }
        //        }

        //    }
        //}

        $scope.GetDataDumpByForm = function (FormTypeId, FormTypeName) {
            //the data that gets returned from server should be an array of objects
            //each object must have top-level property called SubjectId
            //and a property called FormData that contains values of interest
            $scope.ReadyToDownload = true;
            $scope.progress = 0;

            // this was left in because Zephyr uses it.  Change the Zephyr _Layout file to pass in the nested AdverseEvents form, and then you can delete this
            if (FormTypeId == 'AE') {
                var queryName = "ManagerAdverseEventReport";
                var params = [];
                $scope.fileName = "AdverseEventReport.csv";
            }
            //pass in the name of the array that you seek as "FormTypeId" for nested forms.  If 2 levels of nesting, specify the array names separated by "."
            else if (typeof FormTypeId === 'string') {
                var nestingLevels = FormTypeId.split(".");

                if (nestingLevels.length == 1) {
                    var queryName = "GetNestedForm";
                    var params = [nestingLevels[0]];
                }
                else if (nestingLevels.length == 2) {
                    var queryName = "GetSecondNestedForm";
                    var params = [nestingLevels[0], nestingLevels[1]];
                }
                $scope.fileName = FormTypeName.split(" ").join("_") + "_Report.csv";
            }
            else {
                var queryName = 'DataDumpByForm';
                var params = [FormTypeId]
                $scope.fileName = FormTypeName.split(" ").join("_") + "_Report.csv";

            }

            var promise = CustomDataService.LoadCustomData( queryName, params )
            .then( function success( response ) {
                $scope.progress = 10;

                //filter forms by subject for site users
                //if ( $scope.Permission.isSite )
                //{
                //    $scope.forms = [];
                //    for ( var i = 0; i < $scope.subjects.length; i++ )
                //    {
                //        for ( var j = 0; j < response.length; j++ )
                //        {
                //            if ( $scope.subjects[i]._id == response[j].SubjectId )
                //            {
                //                $scope.forms.push( response[j] );
                //            }
                //        }
                //    }



                //}
                //else if ( $scope.Permission.isManager )
                //{
                    $scope.forms = response;
                //}

                $scope.generateHeadersFromArray($scope.forms);
                $scope.generateCsvUsingHeaders($scope.Headers, $scope.forms);

                $scope.progress = 80;

                //$scope.generateHeadersAndDataFromObject();

                $scope.ReadyToDownload = false;

                $scope.progress = 100;
            }, function fail( response ) {
                $log.error( response );
            } );
        };



    }] );
angular.module('app').controller('PrintController', ['$scope', '$state', '$timeout', '$stateParams', function ($scope, $state, $timeout, $stateParams) {
    var self = this;

    $scope.Form = {};
    $scope.formName = $stateParams.formName;

    //$scope.Permission = {
    //    isManager: false,
    //    isSite: false
    //}
    //control accordions
    $scope.accordionControl = {
        screening: true,
        inclusion: true,
        exclusion: true,
        consent: true,
        demographics: true,
        vitalSigns: true,
        medical: true,
        examination: true,
        bodySystems: true,
        laboratory: true,
        bloodChemistry: true,
        hematology: true,
        arg: true,
        electrocardiogram: true,
        localOpen: true,
        sofa: true,
        respiratory: true,
        stepOne: true,
        stepTwo: true,
        stepThree: true,
        pacing: true,
        leftMapping: true,
        rightMapping: true,
        automaticStimulations: true,
        manualStimulations: true,
        insertion: true,
        extubation: true,
        ventilatorSettings: true,
        studyExit: true,
        violation: true,
        deviceDeficiency: true,
        adverseEvent: true
    };

    $scope.showHiddenPrint = function () {
        $scope.showHidden();
        window.print();
    }

    $scope.showHidden = function() {
        var hiddenDivs = document.querySelectorAll('div,syn-radio-field,syn-character-field,syn-date-field,syn-checkbox-field,syn-dropdown-field');
        for (var i = 0; i < hiddenDivs.length; i++) {
            if (hiddenDivs[i].hasAttribute("ng-show")) {

                hiddenDivs[i].removeAttribute("ng-show");
                hiddenDivs[i].classList.remove("ng-hide")
            }
        }
    }

    $scope.$on('$viewContentLoaded', function () {
        $timeout(function () {
            $scope.showHidden();
        },500);
    });

    $scope.isPrint = function () {
        return true;
    }

}]);
angular.module( 'app' ).controller( 'QueryWindowCtrl', ['QueryService', 'UserService', 'SubjectService', 'SessionTransitService', '$uibModalInstance', '$scope', 'QueryData', '$rootScope',
function ( QueryService, userservice, subjectService, SessionTransitService, $uibModalInstance, $scope, QueryData, $rootScope ) {

    //placeholders for query types - should be passed in through study config?
    $scope.queryTypes = ['Manual', 'Data Management', 'Safety'];

    //placeholders for query descriptions - should be allowed to be passed in through study config

    $scope.queryDescriptions = ['Data is not correct', 'Data does not match source', 'Please confirm answer'];


    // select default options for raising a query if none are specified as an app setting
    // create an object for stock reasons
    $scope.userFullName = SessionTransitService.sessionObj.CurrentUser.FullName;
    $scope.comment = '';

    //Get all the comments on the field
    $scope.commentTrails = QueryService.GetCommentTrails();

    $scope.subject = subjectService.GetSubjectById();
    $scope.Role = SessionTransitService.sessionObj.activeRole.Name;
    $scope.Permission = $rootScope.Permission;

    $scope.queryReasons = QueryData.queryReasons;
    $scope.fieldName = QueryData.fieldName;
    $scope.fieldQuestion = QueryData.fieldQuestion;
    $scope.fullPath = QueryData.fullPath;
    $scope.formId = QueryData.formId;
    $scope.subFormId = QueryData.subFormId;
    $scope.formName = QueryData.formName;
    $scope.UniqueFormId = QueryData.UniqueFormId;
    $scope.fieldQueries = QueryData.fieldQueries
    $scope.TopLevelUniqId = QueryData.topLevelUniqId;

    //submit query
    $scope.submitQuery = function ( comment ) {
        //Build Query
        $scope.Query = {
            fieldName: $scope.fieldName,
            fieldQuestion: $scope.fieldQuestion,
            fullPath: $scope.fullPath,
            subjectId: $scope.subject._id,
            userRole: $scope.Role,
            formId: $scope.formId,
            subFormId: $scope.subFormId,
            formName: $scope.formName,
            comment: comment,
            ExternalSubjectId: $scope.subject.ExternalSubjectId,
            siteId: $scope.subject.SiteID,
            addressId: $scope.subject.AddressID,
            UniqueFormId: $scope.UniqueFormId,
            TopLevelUniqId: $scope.TopLevelUniqId,
            queryType: $scope.queryType,
            userCreatedFullName: $scope.userFullName
        };

        QueryService.SubmitQuery($scope.Query).then(function (response) {
            //change this to modify object in query service and use that to update render of query list
            $rootScope.$broadcast("newQueriesAvailable");
        });
        $scope.cancel();
    };

    // Is this still in use? - CM
    //Get a queries comments
    //$scope.LoadComments = function ( querId ) {
    //    QueryService.LoadCommentTrail( querId );

    //    $scope.CommentTrail = QueryService.GetCommentTrail();
    //}


    //submit the query comment
    $scope.submitComment = function ( queryId, comment ) {

        //build the query comment object
        $scope.QueryComment = {
            queryId: queryId,
            userRole: $scope.Role,
            comment: comment
        };

        QueryService.SubmitQueryComment( $scope.QueryComment );
    };

    //Close the query
    $scope.CloseQuery = function ( query ) {
        QueryService.CloseQuery( query );
    };

    //close the modal
    $scope.cancel = function () {
        $uibModalInstance.dismiss( 'cancel' );
    };
}] );
angular.module('app')
    .controller('QueryCommentCtrl', ['SYNCRONY_METADATA', 'QueryService', '$uibModal', '$uibModalInstance', 'UserService', 'queryId', 'selectedField', 'queryOptions', '$scope', '$rootScope', 'PermissionMatrixService', 'SessionTransitService', '$log',
        function (SYNCRONY_METADATA, QueryService, $uibModal, $uibModalInstance, userService, queryId, selectedField, queryOptions, $scope, $rootScope, PermissionMatrixService, SessionTransitService, $log) {
            var vm = this;
            //$scope.queryReasons = SYNCRONY_METADATA.queries.comment.reasons;
            //placeholder for permissions on what querywindow user sees
            //$scope.action = SessionTransitService.sessionObj.activeRole.name === "Data Manager" ? 'Close' : 'Answer';
            $scope.canCreateQuery = PermissionMatrixService.hasPermission('createQuery');
            $scope.action = $scope.canCreateQuery ? 'Re-open' : "Answer";
            $scope.currentUserFullName = SessionTransitService.sessionObj.CurrentUser.FullName;
            $scope.selectedField = selectedField;
            if ($scope.canCreateQuery) {
                $scope.queryDescriptions = ['Data is not correct', 'Data does not match source', 'Please confirm answer']
            } else {
                $scope.queryDescriptions = [
                    'Data is correct',
                    'Confirmed',
                    'Data updated'
                ]
            }

            $scope.disableActions = queryOptions.Status === 'Closed';

            $scope.queryOptions = queryOptions;

            //Set by Query Id
            $scope.QueryId = queryId;

            $scope.queryOptions = queryOptions;

            ////Set user Role
            $scope.Role = SessionTransitService.sessionObj.activeRole.Name;

            //Get the Comment trail
            QueryService.LoadCommentTrail($scope.QueryId).then(function (response) {
                $scope.queryComments = response;
            });

            //submit the query comment
            $scope.submitComment = function (queryId) {
                $log.info("submitting comment");

                //build the query comment object
                $scope.QueryComment = {
                    queryId: $scope.QueryId,
                    userRole: $scope.Role,
                    comment: $scope.comment,
                    userCreatedFullName: $scope.currentUserFullName,
                    type: $scope.action
                };

                //need to add type? or show type based on query status, etc.

                //can add type in promise to commment based on status
        

                QueryService.SubmitQueryComment($scope.QueryComment).then(function (response) {
              
                    //QueryService.LoadQueriesByForm()
                    $rootScope.$broadcast('newQueriesAvailable');
                });
                $scope.cancel();
            };

            //close the modal
            $scope.cancel = function () {
                $uibModalInstance.dismiss( 'cancel' );
            };

            $scope.CloseQuery = function () {

                var promise = QueryService.CloseQuery(queryOptions)
                .then(function success(response) {
                    PermissionMatrixService.hasPermission('isDev') && $log.info(response);
                    $rootScope.$broadcast('newQueriesAvailable');
                }, function failure(resoponse) {
                    $log.error("Failed to close");
                });
            };


}] );
angular.module( 'app' ).controller( 'QueryListCtrl', ['SessionTransitService', 'QueryService', 'UserService', 'RedirectionService', '$stateParams', '$rootScope', '$scope', 'PermissionMatrixService', '$log',
    function (SessionTransitService, QueryService, userservice, RedirectionService, $stateParams, $rootScope, $scope, PermissionMatrixService, $log) {
    var vm = this;
        
    var currentUser = SessionTransitService.sessionObj.CurrentUser;
    var userRole = SessionTransitService.sessionObj.activeRole;
    var activeStudy = SessionTransitService.sessionObj.activeStudy;

    $scope.QueryStatus = $stateParams.status || 'All';
    $scope.Site = activeStudy.Sites[0];
    $scope.currentUser = SessionTransitService.sessionObj.CurrentUser;
    $scope.canViewAll = PermissionMatrixService.hasPermission('createQuery');

    //load the open queries at a site for site view
    function loadSiteQueriesForPaging() {
        //need to get queries for multiple sites for user
        //$scope.Site = $rootScope.CurrentUser.Site;

        if ($scope.currentUser.Roles[0].Name == "Investigator") {
            $scope.filterInvestigator = $scope.currentUser.UserName;
        }

        $scope.filter = {
            SiteId: $scope.Site.ID,
            PageNumber: $scope.CurrentPage,
            PageLimit: $scope.QueryLimit,
            Investigator: $scope.filterInvestigator,
            IsSite: true,
            QueryStatus: $scope.QueryStatus
        }

        $scope.GetList($scope.filter);
    };

    //load the open queries at a site for manager view
    function loadStudyQueriesForPaging() {
        //debugger
        $scope.filter = {
            PageNumber: $scope.CurrentPage,
            PageLimit: $scope.QueryLimit,
            IsSite: false,
            QueryStatus: $scope.QueryStatus
        }

        $scope.GetList($scope.filter);

    };

    $scope.GetList = function ( filter ) {

        //if ( filter.QueryStatus == 'All' )
        //{
        //    QueryService.LoadAllQueries()
        //    .then( function success( response ) {
        //        $scope.Queries = response;
        //        $scope.TotalQueries = response.length;

        //        findDaysOpen();
        //    }, function fail( response ) {
        //        console.log( "fail" );
        //        console.log( response );
        //    } );
        //}
        //else
        //{
        //    QueryService.LoadQueryList( filter )
        //    .then( function success( response ) {
        //        $scope.Queries = response.Queries;
        //        $scope.TotalQueries = response.TotalQueries;

        //        findDaysOpen();
        //    }, function fail( response ) {
        //        console.log( "fail" );
        //        console.log( response );
        //    } );
        //}

        QueryService.LoadQueryList(filter)
        .then(function success(response) {

            $scope.Queries = response.Queries;
            $scope.TotalQueries = response.TotalQueries;
            $scope.selectedField = {
                question: {
                    label: "Test"
                },
                fieldData: {
                    value: "test"
                }
            }

            findDaysOpen();
        }, function fail( response ) {
            $log.error( response );
        } );
    }

    $scope.FilterList = function () {
        //$scope.filter = {
        //    SiteId: $scope.filterSiteId,
        //    AddressId: $scope.filterAddressId,
        //    UserCreated: $scope.filterUserCreated,
        //    UserClosed: $scope.filterUserClosed,
        //    Role: $scope.filterRole,
        //    Investigator: $scope.filterInvestigator,

        //    PageNumber: $scope.CurrentPage,
        //    PageLimit: $scope.QueryLimit,
        //    IsSite: $scope.Permission.isSite,
        //    QueryStatus: $scope.QueryStatus
        //}

        $scope.filter.PageNumber = $scope.CurrentPage;
        $scope.filter.PageLimit = $scope.QueryLimit;
        $scope.filter.IsSite = currentUser.Name === "Investigator"
        $scope.filter.QueryStatus = $scope.QueryStatus;

        $scope.GetList($scope.filter);
    }


    //calculate the number of days open for open queries
    function findDaysOpen() {
        for ( var i = 0; i < $scope.Queries.length; i++ )
        {
            var dateCreated = new Date($scope.Queries[i].DateCreated);

            var refDate = $scope.QueryStatus == "Open" ? new Date() : $scope.QueryStatus == "All" ? new Date() : $scope.QueryStatus == "Answered" ? new Date() : $scope.QueryStatus == "Open&Answered" ? new Date() : new Date( $scope.Queries[i].DateClosed );

            $scope.Queries[i].DaysOpen = Math.ceil(( refDate - dateCreated ) / ( 1000 * 3600 * 24 ) );
        }
    };

    //set up the fitler for the site view
    function LoadFilterDataSV() {
        $scope.GetAddresses( $scope.Site.ID );
        $scope.GetInvestigators( $scope.Site.ID );

    };

    //set up the fitler for the manager view
    function LoadFilterDataDM() {
        //Get all the sites
        $scope.Sites = activeStudy.Sites;
        //userservice.LoadAllSites();

        //not implemented yet
        //$scope.GetAllManagers();

        $scope.Roles = activeStudy.Roles;
        //userservice.LoadAllRoles();
    };


    $scope.GetAddresses = function ( siteId ) {
        if ( siteId != null || siteId != undefined )
        {
            userservice.LoadAddresses( siteId );
            $scope.Addresses = userservice.GetAddresses();
        }
    }
    $scope.GetInvestigators = function ( siteId ) {
        if ( siteId != null || siteId != undefined )
        {
            userservice.LoadSiteInvestigators( siteId );
            $scope.Investigators = userservice.GetInvestigators();
        }
    }

    $scope.GetSiteUsers = function ( siteId ) {
        if ( siteId != null || siteId != undefined )
        {
            $scope.SiteUsers = userservice.GetSiteUsers();
            userservice.LoadSiteUsers( siteId );

        }
    }

    $scope.GetAllManagers = function () {
        $scope.Managers = userservice.GetManagers();
        userservice.LoadManagers();
    }

    //Close a Query
    $scope.CloseQuery = function ( query ) {

        var promise = QueryService.CloseQuery( query )
        .then( function success( response ) {
            PermissionMatrixService.hasPermission('isDev') && $log.info(response);
            if ( response )
            {
                $scope.GetList($scope.filter);
            };
        }, function failure( resoponse ) {
            $log.error( "Failed to close" );
        } );
    };

    //Redirect to CRF for a query
    $scope.Redirect = function ( formId, subjectId, UniqueFormId ) {
        var temp = { FormId: formId, SubjectId: subjectId, UniqueFormId: UniqueFormId }

        RedirectionService.DeepLink( temp );
    };

    //$scope.Redirect = function ( RedirectionInfo ) {
    //    RedirectionService.DeepLink( RedirectionInfo );
    //};

    $scope.ClearSearch = function () {
        $log.info("clearing the search");

        $scope.filterSiteId = "";
        $scope.filterAddressId = "";
        $scope.filterUserCreated = "";
        $scope.filterUserClosed = "";
        $scope.filterRole = "";

        if ($scope.currentUser.Roles[0].Name != "Investigator") {
            $scope.filterInvestigator = "";
        }

        $scope.CurrentPage = 1;

        $scope.filter = {
            SiteId: $scope.filterSiteId,
            AddressId: $scope.filterAddressId,
            UserCreated: $scope.filterUserCreated,
            UserClosed: $scope.filterUserClosed,
            Role: $scope.filterRole,
            Investigator: $scope.filterInvestigator,

            PageNumber: $scope.CurrentPage,
            PageLimit: $scope.QueryLimit,
            IsSite: userRole.Name === "Investigator",
            QueryStatus: $scope.QueryStatus
        }

        $scope.GetList($scope.filter);
    };

    //paging control
    $scope.QueryLimit = 8;
    $scope.CurrentPage = 1;
    $scope.SetPage = function ( pageNo ) {
        $scope.CurrentPage = pageNo;
    };

    if (userRole.Name === "Investigator") {
        //debugger
        //will need to implement Investigators view.
        //loadSiteQueriesForPaging();
        //LoadFilterDataSV();

        //investigators see placeholder DM view for now
        //use url querystring to get this. placeholder
        $scope.QueryStatus = 'All';
        loadStudyQueriesForPaging();
        LoadFilterDataDM();
    } else if (userRole.Name === "Data Manager") {
        loadStudyQueriesForPaging();
        LoadFilterDataDM();
    }

}] );
angular.module( 'app' ).controller( 'QueryButtonCtrl', ['QueryService', '$scope',
    function ( QueryService, $scope, $uibModalInstance ) {
        $scope.allFieldQueries = [];
        $scope.fieldOpenQueries = [];
        $scope.fieldAnsweredQueries = [];
        $scope.fieldClosedQueries = [];

        if (($scope.formQueries != null || $scope.formQueries != undefined) && $scope.formQueries.length > 0 )
        {
            for ( var i = 0; i < $scope.formQueries.length; i++ )
            {
                if ( $scope.fieldName != $scope.formQueries[i].FieldName ) continue;
                $scope.allFieldQueries.push( $scope.formQueries[i] );
                if ( $scope.formQueries[i].Status == "Open" ) $scope.fieldOpenQueries.push( $scope.formQueries[i] );
                if ( $scope.formQueries[i].Status == "Answered" ) $scope.fieldAnsweredQueries.push( $scope.formQueries[i] );
                if ( $scope.formQueries[i].Status == "Closed" ) $scope.fieldClosedQueries.push( $scope.formQueries[i] );
            }
        }


        //open the new query modal
        $scope.OpenQueryWindow = function () {
            QueryService.OpenQueryWindow( $scope.fieldName, $scope.formId, $scope.formName, $scope.allFieldQueries, $scope.uniqueFormId, $scope.topLevelUniqId );
        };

        $scope.SetClass = function () {
            if ( $scope.formQueries.length == 0 ) return '';
            if ( $scope.fieldOpenQueries.length > 0 ) return 'open-query';
            if ( $scope.fieldAnsweredQueries.length > 0 ) return 'answered-query';
            if ( $scope.fieldClosedQueries.length > 0 ) return 'closed-query';
        };

        //Open the query comment modal
        $scope.OpenNewComment = function () {
            QueryService.OpenNewQueryComment( $scope.queryId );
        };

        //open the query comment audit tail modal
        $scope.OpenPastComments = function (queryOptions, selectedField) {
            QueryService.OpenCommentTrail( $scope.queryId, queryOptions, selectedField );
        };

    }] );

angular.module('app')
    .controller('SubjectListController', ['SubjectService', 'StudyConfigService', 'PermissionMatrixService', '$rootScope', '$scope', 'SessionTransitService',
        function (subjectservice, StudyConfigService, PermissionMatrixService, $rootScope, $scope, SessionTransitService) {
            
            $scope.studyName = SessionTransitService.sessionObj.activeStudy.Name;







            $scope.orderBy = 'ExternalSubjectId';
            $scope.orderAsc = true;
            $scope.currentPage = 1;
            $scope.pageSize = 15;
            var originalPageSize = $scope.pageSize;

            $scope.SearchFilter = {};
            if ($scope.parameters) {
                $scope.SearchFilter.ExternalSubjID = $scope.parameters.searchTerm;
            }

            $scope.sessionObj = SessionTransitService.getSessionObj();

            $scope.SelectSubject = function (subject) {
                // If the subject list is a modal
                if (typeof $scope.close === "function") {
                    $scope.close();
                }
                window.location = '#/subject/' + subject._id; // using mongo id
            };

            $scope.ChangeSort = function (orderBy, orderAsc) {
                $scope.orderBy = orderBy;
                $scope.orderAsc = orderAsc;
                $scope.currentPage = 1;
                GetSubjects();
            }

            $scope.ChangePage= function (page) {
                $scope.currentPage = page;
                GetSubjects();
            }

            $scope.ChangeFilter = function () {
                $scope.currentPage = 1;
                GetSubjects();
            }

            var GetSubjects = function () {
                //add something to fetch subjects only if consent is true, and only if study is econsent
                // why does this make the filter a string? instead of object
                var query;
                if (StudyConfigService.getMetaDataByProperty('eConsent')) {
                    query = "{Consent: true";
                } else {
                    query = "{";
                }

                if ($scope.SearchFilter.SiteID) {
                    query += "SiteID: " + $scope.SearchFilter.SiteID;
                }

                if (!$scope.SearchFilter.Status) {
                    delete $scope.SearchFilter.Status;
                }

                if ($scope.SearchFilter.ExternalSubjID) {
                    if (query.length > 1) {
                        query += ", ";
                    }
                    query += "ExternalSubjectId: /" + $scope.SearchFilter.ExternalSubjID + "/i";
                }

                query += "}"

                subjectservice.LoadSubjects(query, $scope.currentPage, $scope.pageSize, $scope.SearchFilter.Status, $scope.orderBy, $scope.orderAsc).then(function success(response) {
                    $scope.Subjects = subjectservice.GetSubjects();
                    $scope.TotalSubjects = response.NumSubjects;
                    $scope.displaySelections = setSubjectViewNumber(originalPageSize, $scope.TotalSubjects);
                }, function fail(response) {

                });

            }

            function setSubjectViewNumber(defaultNumber, numSubjects) {
                var count = defaultNumber;
                var displaySelections = [];
                //var displayObj = {};
                while (count < numSubjects) {

                    displaySelections.push({value: count, display: count.toString()});
                    count += $scope.pageSize;
                    if (count >= numSubjects) {
                        displaySelections.push({value: numSubjects, display: "Show All"});
                    }
                }

                return displaySelections;
            }

            $scope.filterPageSize = function () {
                if ($scope.pageSize >= $scope.NumSubjects) {
                    $scope.currentPage = 1;
                }
                GetSubjects();
            }

            $scope.ClearFilter = function () {
                $scope.SearchFilter.Status = undefined; // does this need to be set to undefined?
                $scope.SearchFilter.ExternalSubjID = undefined;
                $scope.currentPage = 1;

                GetSubjects();
            }
            StudyConfigService.loadSettings().then(function () {
                GetSubjects();
            });

        }]);
angular.module('app').controller('SideBarController', ['$scope', '$rootScope',
    function ($scope, $rootScope) {

    }]);
angular.module('app')
    .controller('signinController', ['$rootScope', '$scope', '$stateParams', '$state', 'jwtHelper', 'userService', '$uibModalInstance', 'SessionTransitService', 'PermissionMatrixService', '$localstorage', 'StudyConfigService', 'Rollbar',
    function ($rootScope, $scope, $stateParams, $state, jwtHelper, userService, $uibModalInstance, SessionTransitService, PermissionMatrixService, $localstorage, StudyConfigService, Rollbar) {
        var vm = this;

        vm.signIn = function () {

            var durationLoggedOut, hasPermission;
            var timeLoggedOut = new Date().getTime();
            var isSameUser = ($rootScope.username === vm.username);

            userService.login(vm.username, vm.password, function (data) {
                var expiration = jwtHelper.getTokenExpirationDate(data.access_token);
                var tokenPayload = jwtHelper.decodeToken(data.access_token);
                var CurrentUser = JSON.parse(tokenPayload.CurrentUser);

                $localstorage.set('token', data.access_token, expiration);
                $localstorage.setObject('user', CurrentUser);
                $localstorage.setObject('activeStudy', CurrentUser.Studies[0]);
                $localstorage.setObject('activeRole', CurrentUser.Studies[0].Roles[0]);
                durationLoggedOut = new Date().getTime() - timeLoggedOut;

                // consolidate rootscope and service instead of using both
                SessionTransitService.prepareSession();

                // Load study settings
                StudyConfigService.loadSettings();

                Rollbar.info('User logged-in');

                if ($state.current.permission) {
                    hasPermission = PermissionMatrixService.hasPermission($state.current.permission);
                }

                if (durationLoggedOut > 3600000) {
                    // user has been logged out for more than one hour
                    return $uibModalInstance.close({ $value: 'duration' });
                }

                if (!hasPermission) {
                    // user doesn't have permission to access page
                    return $uibModalInstance.close({ $value: 'no-access' });
                }

                if (!isSameUser) {
                    // new user signing in after token has expired
                    return $uibModalInstance.close({ $value: 'new-user' });
                }
                 
                return $uibModalInstance.dismiss({$value: 'continue-session'});
            });
        }

        vm.sendTempPassword = function () {
            userService.sendTempPassword(vm.email, function () {
                vm.TempPwdSent = true;
                vm.forgotPassword = false;
            }, function (data) {
                vm.TempPwdError = data.data.Message;
            })
        }
    }]);
angular.module('app')
    .controller('GenericModalController', ['$scope', '$uibModalInstance', 'parameters',
        function ($scope, $uibModalInstance, parameters) {

            $scope.parameters = parameters;

            $scope.close = function () {
                $uibModalInstance.dismiss();
            }

        }]);
angular.module('app')
    .controller('FooterController', ['$scope', '$uibModal',
        function ($scope, $uibModal) {

            var modalOpened = false;
            var modalInstance = {};

            $scope.openModal = function (template, parameters) {
                if (!modalOpened) {
                    modalOpened = true
                    modalInstance = $uibModal.open({
                        templateUrl: 'Study/StudyTemplates/' + template + '.html',
                        controller: 'GenericModalController',
                        size: 'lg',
                        resolve: {
                            parameters: function () {
                                return parameters;
                            }
                        }
                    });
                    modalInstance.result.finally(function () {
                        modalOpened = false;
                    });
                } else {
                    modalInstance.close();
                }
            };

        }]);
angular.module('app').controller('ReportingController', ['ReportingService', 'PermissionMatrixService',
    function (ReportingService, PermissionMatrixService) {
        
        var srv = this;
        srv.editMode = false;

        srv.permissions = PermissionMatrixService;
        
        srv.loadReport = function (report) {
            ReportingService.getReport(report.id, function (config) {
                // Get a reference to the embedded report HTML element
                var reportContainer = $('#reportContainer')[0];

                // Embed the report and display it within the div container.
                srv.report = powerbi.embed(reportContainer, config);
            });
        }

        srv.changeMode = function () {
            srv.editMode = !srv.editMode;
            srv.report.switchMode(srv.editMode ? 'edit' : 'view');
        }

        ReportingService.getReports(function (response) {
            srv.reportList = response;
            srv.selectedReport = srv.reportList[0];
            srv.loadReport(srv.selectedReport);
        });

    }]);

angular.module('app')
    .controller('headerController', ['SessionTransitService', '$rootScope', '$scope', 'StudyConfigService', '$window', 'PermissionMatrixService',
    function (SessionTransitService, $rootScope, $scope, StudyConfigService, $window, PermissionMatrixService) {
        var vm = this;

        vm.sessionObj = SessionTransitService.getSessionObj();
        vm.selectedStudy = angular.copy(vm.sessionObj.activeStudy);
        vm.canView = PermissionMatrixService.hasPermission('readSite');

        vm.changeStudy = function (newStudy) {
            SessionTransitService.changeStudy(newStudy);
            StudyConfigService.loadSettings().then(function (response) {
                $window.location.href = '#/home';
                location.reload();
            })
        }

        $scope.$on('role-changed', function () {
            vm.canView = PermissionMatrixService.hasPermission('readSite');
        });
    }]);
angular.module('app')
    .controller('SubjectNavigationController', ['SubjectService', 'FormService', 'PermissionMatrixService', '$scope', 'FormTemplateService', '$log',
    function (SubjectService, FormService, PermissionMatrixService, $scope, FormTemplateService, $log) {

        $scope.canReadSubject = PermissionMatrixService.hasPermission('readSubject')
        $scope.canReadFormData = PermissionMatrixService.hasPermission('readFormData');

        $scope.formList = [];
        PermissionMatrixService.hasPermission('isDev') && $log.info('study summary', $scope.summary);

        function ctrlInit() {
            // Make a local copy of the navigation list
            $scope.formList = FormTemplateService.getFormNavigationList();
            
            // Load the subject
            $scope.subject = SubjectService.GetSubjectById();
            console.log('subNavContr')
        }
        
        ctrlInit();

    }]);


angular.module('app')
    .controller('SummaryCtrl', ['$state', '$stateParams', '$scope', '$stateRegistry', '$log', 'SubjectService', 'FormService', 'QueryService', 'PermissionMatrixService', 'QueryTransitService', 'FormTemplateService', '$uibModal', 'SubjectService', '$stateParams', '$rootScope', 'BrowserAPIService',
    function ($state, $stateParams, $scope, $stateRegistry, $log, SubjectService, FormService, QueryService, PermissionMatrixService, QueryTransitService, FormTemplateService, $uibModal, SubjectService, $stateParams, $rootScope, BrowserAPIService) {

        // watch for unfinished forms and add/remove classes to notify the user
        $scope.$on('update-form-navigation-list', function () {
            $scope.formList = FormTemplateService.getFormNavigationList();
        });
        // set class on the formList items
        $scope.listItemClass = function (item) {
            if (item.class) return item.class;
        }
        $scope.handleClick = function (form) {
            if (form.isEPro) { // make list of full sceeen if this works
                var element = document.documentElement;
                BrowserAPIService.toggleFullScreen(element)
            }
        };

        $scope.canReadSubject = PermissionMatrixService.hasPermission('readSubject')
        $scope.canReadFormData = PermissionMatrixService.hasPermission('readFormData');
        //$rootScope.headerTitle += ' > Subject ' + $stateParams.subjectId;

        $scope.formList = [];
        $scope.isDev = PermissionMatrixService.hasPermission('isDev');
        $scope.isDev && $log.info('study summary: ', $scope.summary);

        // TODO refactor queries
        //function getNumberQueries() {
        //    for (var i = 0; i < $scope.summary.Forms.length; i++) {
        //        $scope.summary.Forms[i].NumOpenQueries = $scope.summary.FormQueries.filter(function (formQueries) {
        //            return formQueries.UniqFormId == $scope.summary.Forms[i]._id;
        //        })[0].OpenQueries.length;
        //    }
        //}

        // TODO refactor queries
        //function sendQueriesToService(dataArray) {
        //    dataArray.Forms.forEach(function (crf, idx) {
        //        dataArray.FormQueries[idx].name = crf.Name;
        //        QueryTransitService.setQueryByForm(dataArray.FormQueries[idx]);
        //    });
        //}

        // redundant against router promises? refactor? load subject summary should be in route
        function ctrlInit() {
            // Make a local copy of the navigation list
            $scope.formList = FormTemplateService.getFormNavigationList();

            // TODO refactor queries
            //getNumberQueries();
            //sendQueriesToService(SUBJECT_SUMMARY);

            // Get the subject
            $scope.subject = SubjectService.GetSubjectById();

            // Add form statuses to form list
            FormService.LoadSubjectSummary($stateParams.subjectId)
                .then(function () {
                    return SubjectService.LoadSubjectById($stateParams.subjectId);
                })
                .then(function () {
                    $scope.subjectSummary = FormService.GetSubjectSummary();
                    return $scope.subjectSummary;
                })
                .then(function () {

                    $scope.subjectSummary.Forms.forEach(function (form) {
                        if (form.IsComplete) {
                            $scope.formList.forEach(function (formTemplate) {
                                if (formTemplate.formId == form.FormTypeId) {
                                    formTemplate.IsComplete = true;
                                    return true;
                                }
                            });
                        }
                    });

                })            

        }

        ctrlInit();

        // Display a dropdown with form tabs that can't fit in the page
        setTimeout(function () {
            $('.nav-pills, .nav-tabs').tabdrop({ text: 'More forms ' });
        }, 100);

        $scope.routeToForm = function (formName) {
            $state.transitionTo('subject.' + formName.toLowerCase(), { subjectId: $scope.subject._id });
        }

        $scope.showQueries = function (num) {
            if (num > 0) {
                return num;
            }

            return ' ';
        }      
        
        //print
        $scope.Print = function () {
            $log.info('opening print view');
            window.print();
        };

    }] );
angular.module('app').controller('SubjectCtrl', ['SessionTransitService', 'FormTemplateService', 'FormBuilderDTO', 'DefaultMetaDataService', 'SubjectService', 'PermissionMatrixService', 'StudyConfigService', '$timeout', '$rootScope', '$scope', '$stateParams', '$log', '$location', 'SubjectIDFactory', 'FORM_FIELD_CONSTANTS', 'UserService',
    function (SessionTransitService, FormTemplateService, FormBuilderDTO, DefaultMetaDataService, SubjectService, PermissionMatrixService, StudyConfigService, $timeout, $rootScope, $scope, $stateParams, $log, $location, SubjectIDFactory, FORM_FIELD_CONSTANTS, UserService) {
        var SYNCRONY_METADATA = DefaultMetaDataService.getMetaDataByProperty("metaData");
        var subjectMetaData = StudyConfigService.getMetaDataByProperty("subject");
        var isEConsent = StudyConfigService.getMetaDataByProperty('eConsent');


        var CRF_METADATA = FormTemplateService.getMetaDataByType(11);
        $scope.isDev = PermissionMatrixService.hasPermission('isDev');
        $scope.enrollSubject = $stateParams.enroll;
        //initNewSubject();
        //initMetaData(CRF_METADATA);
        var FormBuilder = new FormBuilderDTO(SYNCRONY_METADATA);
        $scope.isDev && $log.info(StudyConfigService.getMetaDataByProperty('subject'));
        $scope.sessionObj = SessionTransitService.getSessionObj();

        // data to be transfered from FormData object to top-level subject object
        function subjectLevelDataTransfer() {

            // data to be captured, point case (caps) to DB case (Pascal)
            var captureDataPointsMapper = {
                "DOB": "BirthDate",
                "SITE_ID": "SiteId"
            };

            for (dataPoint in captureDataPointsMapper) {
                var value = $scope.Form.FormData[dataPoint] ? $scope.Form.FormData[dataPoint].value : null;
                if (value) $scope.Subject[captureDataPointsMapper[dataPoint]] = value;
            }
        };

        if ($stateParams.subjectId) {

            SubjectService.LoadSubjectById($stateParams.subjectId)
                .then(function success(response) {

                    init(initEditSubject, response);

                }, function fail(response) {
                    $log.error('could not find user');
                });

        } else {
            init(initNewSubject);
        }

        $scope.submitSubject = function () {

            if ($scope.formType === 'Create' && PermissionMatrixService.hasPermission('createSubject')) {
                $scope.Subject.ExternalSubjectIdFormatter = SubjectIDFactory.formatParsedForAPI($rootScope, $scope, subjectMetaData.idFormat);
                $scope.Subject.SubjectData = $scope.Form.FormData;
                assignSite($scope.selectedSite);
                subjectLevelDataTransfer();
                SubjectService.AddSubject($scope.Subject).then(function (response) {
                    //  route to subject summary - taken out of service because of econsent
                    window.location = '#/subject/' + response.data._id;
                });
            }
            else if ($scope.formType === 'Edit' && PermissionMatrixService.hasPermission('updateSubject')) {
                $scope.Subject.SubjectData = $scope.Form.FormData;

                if ($scope.enrollSubject) {
                    $scope.Subject.ExternalSubjectIdFormatter = SubjectIDFactory.formatParsedForAPI($rootScope, $scope, subjectMetaData.idFormat);
                    $scope.Subject.SubjectData.SaveReason = 'Enroll Subject';
                    $scope.Subject.Consent = true;
                } 
                subjectLevelDataTransfer();
                assignSite($scope.selectedSite);
                SubjectService.UpdateSubject($scope.Subject)
                    .then(function (response) {
                        window.location = '#/subject/' + response._id;
                        $log.info('updating subject');
                    });


            }
            else {
                $log.warn('no form saved, could not determine permission level, or create/update');
            }
        }

        // disable the form 
        $scope.isFormInvalid = function () {
            if ($scope.formType) {
                var isValid = false;

                if (!isFormComplete($scope)) {
                    return true;
                }

                if ($scope.formType === 'edit') {
                    isValid = $scope.Subject.SubjectData.SaveReason ? false : true; // save reason required if the Subject is being edited
                }

                return isValid;
            }
        };

        function init(action, response) {
            $scope.Form = {
                Name: $scope.formName,
                FormTypeId: $scope.formId,
                FormData: {}
            }

            $scope.formId = CRF_METADATA.formId;
            $scope.formName = CRF_METADATA.formName;
            $scope.displayName = CRF_METADATA.displayName;
            $scope.metConditionsObj = {}; // store boolean values for form field conditions
            $scope.renderValidationsObj = {}; // how close does this end up being to identical to conditions functionality?
            $scope.targetElementId = CRF_METADATA.formName.toLowerCase().replace(/\.|\[|\]|\s/g, '') + '-form-builder-target'; // set the id of the container element
            $scope.defaultValidations = SYNCRONY_METADATA.validation.validations;
            $scope.formType;
            $scope.Sites = $scope.sessionObj.activeStudy.Sites;
            $scope.selectedSite = $scope.Sites[0];
            CRF_METADATA.formObjectName = 'Form.FormData';
            CRF_METADATA.formRootName = 'Form';
            action(response);

            $timeout(function () {
                FormBuilder.Build(CRF_METADATA, $scope);
            }, 0, false);
        }

        function initNewSubject() {
            $scope.Subject = JSON.parse(JSON.stringify(FORM_FIELD_CONSTANTS.SUBJECT_DEFAULT));
            assignSite($scope.selectedSite);
            //We need to be able to get the active site, since users can have multiple sites.
            //use a dropdown to select from active study's sites

            //usercreated and useredited is saved on the backend.  Might want to select investigator in future
            // Need to make Site ID what the investigator selects
            $scope.Subject.SiteID = $scope.sessionObj.activeStudy.Sites[0].ID;
            $scope.formType = 'Create';
            initMetaData(CRF_METADATA);
        }

        function initEditSubject(response) {
            $scope.formType = 'Edit';
            $scope.Subject = response;
            $scope.isDev && $log.info("Subject: ", $scope.Subject);
            $log.info('subject loaded');
            $scope.Form.FormData = response.SubjectData;
            initMetaData(CRF_METADATA);
        }

        function initMetaData(crfMetaData) {
            crfMetaData.crf = $scope.Form;
            crfMetaData.formObject = $scope.Form.FormData;
            crfMetaData.formObjectName = 'Form.FormData';
            crfMetaData.formRootName = 'Form';
        }

        function isFormComplete(scope) {
            var form = scope.Form.FormData;
            var dataPoints = Object.keys(form);
            for (i = 0; i < dataPoints.length; i++) {
                var dataPoint = dataPoints[i];
                if (dataPoint === "undefined") continue;
                if (form[dataPoint].value === null) {
                    return false;
                }
            }

            if (!scope.Subject.SiteID) {
                return false;
            }
            return true;
        }

        function assignSite(site) {
            $scope.Subject.SiteID = site.ID;
            $scope.Subject.SubjectData.SITENAME = {
                value: site.Name
            }
            $scope.Subject.SubjectData.SITENUMBER = {
                value: site.SiteNumber
            }
        }

    }]);
angular.module('app').controller('SubjectHistoryController', ['$uibModalInstance', 'subjectHistory',
    function ($uibModalInstance, subjectHistory) {

    var vm = this;

    vm.subjectHistory = subjectHistory;

    vm.arrOfUniq = [];
    
    vm.getStatusString = function (subjHistoryTimePoint) {
        var statusArr = [];
        if (subjHistoryTimePoint.IsFrozen) {
            statusArr.push("Frozen")
        }
        if (subjHistoryTimePoint.IsLocked) {
            statusArr.push("Locked")
        }
        if (subjHistoryTimePoint.IsSignedOff) {
            statusArr.push("Signed")
        }
        return statusArr.join(",");
    }

    for (var i = 0; i < vm.subjectHistory.length; i++) {
        if (typeof vm.subjectHistory[i].JsonData == "string") {
            vm.subjectHistory[i].JsonData = JSON.parse(vm.subjectHistory[i].JsonData);
        };

        //var getter = $parse(vm.fieldModelProp);


        var statusString = vm.getStatusString(vm.subjectHistory[i].JsonData);

        if (vm.arrOfUniq.length == 0) {
            vm.arrOfUniq.push({Status: statusString, DateCreated: vm.subjectHistory[i].DateCreated, UserCreated: vm.subjectHistory[i].UserCreated });
            continue;
        }

        if (statusString != vm.arrOfUniq[vm.arrOfUniq.length - 1].Status) {
            vm.arrOfUniq.push({Status: statusString, DateCreated: vm.subjectHistory[i].DateCreated, UserCreated: vm.subjectHistory[i].UserCreated });
        }
    };

    //close the modal
    vm.cancel = function () {
        $uibModalInstance.dismiss( 'cancel' );
    };
}]);
angular.module( 'app' ).controller( 'FormSaveReasonCtrl', 
    ['$uibModalInstance', 'userService', '$rootScope', 'form', 'formMarkup', 'AuditService', '$parse', 'checkboxService', 'FormService', 'metadata', 'StudyConfigService', 'FormTemplateService', 'complete',
        function ($uibModalInstance, userService, $rootScope, form, formMarkup, auditService, $parse, checkboxService, formService, metadata, StudyConfigService, FormTemplateService, complete) {
            var vm = this;

            vm.form = form;
            vm.formMarkup = formMarkup;
            vm.displayName = FormTemplateService.getMetaData(form.Name).displayName;
            vm.auditTrail = auditService.getFormAuditTrail();
            vm.complete = complete;
            vm.dataSaveReasons = StudyConfigService.getMetaDataByProperty("dataSaveReasons");
            vm.lastSave;
        
            if (vm.auditTrail.length > 0) {
                vm.lastSave = vm.auditTrail[vm.auditTrail.length - 1]
                vm.defaultDataSaveReason = StudyConfigService.getMetaDataByProperty("defaultDataSaveReason") || vm.dataSaveReasons[0];
            } else {
                vm.defaultDataSaveReason = "New Data";
            }

            vm.getLastValue = function (propertyName, fieldMetaData) {
                var getter = $parse(propertyName);

                var lastValue = getter(vm.lastSave);

                if (lastValue == undefined) return null;

                if (lastValue && lastValue.IsCheckboxObj) {
                    return checkboxService.getDisplayValues(lastValue, fieldMetaData);
                }
                else {
                    return lastValue.value;
                }
            }

            vm.valueIsChanged = function (propValue, propName, fieldMetadata) {
                if (propValue.IsCheckboxObj) {     
                    if (checkboxService.getDisplayValues(propValue, fieldMetadata) != vm.getLastValue(propName, fieldMetadata)) {

                        return true;
                    }
                    else {
                        return false;
                    }
                }
                else {
                    if (propValue.value != vm.getLastValue(propName)) {
                        if (isArraysAndEqual(propValue.value, vm.getLastValue(propName))) {
                            return false;
                        }

                        if (propValue.value instanceof Date && Date.parse(propValue.value.toString()) == Date.parse(vm.getLastValue(propName))) {
                            return false;
                        }
                        else {
                            return true;
                        }
                    }
                    else {
                        return false;
                    }
                }
            }

            vm.displayCurVal = function (propValue, fieldMetadata) {
                if (propValue.IsCheckboxObj) {
                    return checkboxService.getDisplayValues(propValue, fieldMetadata);
                }
                else {
                    return propValue.value;
                }
            }

            vm.getFieldDisplayName = function (propName, fieldMetadata) {
                if (!fieldMetadata) return propName;
                return fieldMetadata.question.label;
            }

            vm.findFieldAndSetDefaultReason = function (stringPath) {
                if (stringPath) {
                    var getter = $parse(stringPath);

                    var field = getter(vm.form);

                    field.Reason = vm.defaultDataSaveReason;

                    return field;
                }
            }

            vm.arrOfChangedFields = [];

            // Add change for form status (complete / incomplete)
            if (vm.form.IsComplete != vm.complete) {
                var lastVal = vm.form.IsComplete ? 'Complete' : 'Incomplete';
                var newVal = vm.complete ? 'Complete' : 'Incomplete';
                vm.form.CompleteStatusChange = {};
                vm.arrOfChangedFields.push({ fieldDisplay: 'Form Status', prevVal: lastVal, curVal: newVal, modelName: 'CompleteStatusChange' });
            }

            vm.getFieldMetadata = function (datapoint, propAppender, metadata) {
                var fieldMetadata = metadata;
                var subLevels = [];
                propAppender.split("FormData.").forEach(function (sub) {
                    if (sub) {
                        subLevels.push(sub.slice(0, -4));
                    }
                });
                subLevels.forEach(function (sub) {
                    var formTemplate = FormTemplateService.getMetaData(sub); // get the form metadata by the form name.
                    if (formTemplate && formTemplate.formName === sub) {
                        fieldMetadata = formTemplate;
                    }
                    // deprecated, use the FormTemplateService to access a form's sub-forms
                    //fieldMetadata.subMetaData.some(function (form) {
                    //    if (form.formName === sub) {
                    //        fieldMetadata = form;
                    //        return true;
                    //    }
                    //});
                });
                return fieldMetadata.fieldsHash[datapoint];
            }

            function addChangedFieldsToArr(objOfFields, propAppender) {
                // refactor so this doesn't iteratrate over strings
                for (var dataPoint in objOfFields) {
                    if (!objOfFields.hasOwnProperty(dataPoint)) continue;
                    var fieldMetadata = vm.getFieldMetadata(dataPoint, propAppender, metadata);
                    var rawFieldVal = objOfFields[dataPoint];
            
                    if (rawFieldVal == undefined) {
                        continue;
                    }
                    if (rawFieldVal.constructor === Array) {
                        for (var i = 0; i < rawFieldVal.length; i++) {
                            var appendToPropName = propAppender + dataPoint + "[" + i.toString() + "].";
                            addChangedFieldsToArr(rawFieldVal[i], appendToPropName);
                        }
                        continue;
                    }
                    if (dataPoint == 'FormData') {
                        addChangedFieldsToArr(rawFieldVal, propAppender + "FormData.");
                        continue;
                    }

                    if (typeof (rawFieldVal) == "object") {
                        var displayVal = vm.displayCurVal(rawFieldVal, fieldMetadata);
                        var compositeFieldModelString = propAppender + dataPoint;
                //new
                //var compositeFieldModelString = propAppender.push(dataPoint);

                        if (!vm.lastSave) {
                            var lastVal = "";
                            if (displayVal == null) continue;
                        }
                        else {
                            if (vm.valueIsChanged(rawFieldVal, compositeFieldModelString, fieldMetadata)) {
                                var lastVal = vm.getLastValue(compositeFieldModelString, fieldMetadata);
                            }
                            else {
                                continue;
                            }
                        }
                
                        if (lastVal && displayVal) {
                
                            if (lastVal.constructor === Array && displayVal.constructor === Array) {
                                lastVal = lastVal.join(", ");
                                displayVal = displayVal.join(", ");
                            }
                
                        }

                        if (!lastVal && displayVal) {
                            if (displayVal.constructor === Array) {
                                displayVal = displayVal.join(", ");
                            }
                        }

                        var fieldDisplayName = vm.getFieldDisplayName(dataPoint, fieldMetadata);
                        vm.arrOfChangedFields.push({ fieldDisplay: fieldDisplayName, prevVal: lastVal, curVal: displayVal, modelName: compositeFieldModelString });
                    }
                    else {
                        continue;
                    }
                }
            }

            function isArraysAndEqual(arr1, arr2) {

                if (!arr1 || !arr2) {
                    return false;
                }
                if (arr1.constructor !== Array || arr2.constructor !== Array) {
                    return false;
                }
                if (arr1.length !== arr2.length) {
                    return false;
                }
                arr1.sort();
                arr2.sort();
                for (var i = 0; i < arr1.length; i++) {
                    if (arr1[i] !== arr2[i]) {
                        return false;
                    }
                }

                return true;
            }
    
            addChangedFieldsToArr(vm.form.FormData, "FormData.");
  
            vm.username = $rootScope.username;
            vm.cancel = function () {
                $uibModalInstance.dismiss( 'cancelled' );
            };

            vm.confirm = function () {
                if (vm.isSigningForm) {
                    userService.login(vm.username, vm.password, function (data) {
                        $uibModalInstance.close(vm.form);
                    }, function (data) {
                        vm.errorMessage = data.data.error_description;
                    });
                } else {
                    $uibModalInstance.close(vm.form);
                }
            };

}] );
angular.module('app')
    .controller('StatusReasonCtrl', ['$rootScope', '$uibModalInstance', 'ComparisonObj', 'Form', 'FormTemplateService', 'StudyConfigService', 'userService',
        function ($rootScope, $uibModalInstance, ComparisonObj, Form, FormTemplateService, StudyConfigService, userService) {

            var vm = this;

            vm.Form = Form;
            vm.ComparisonArr = ComparisonObj.comparisonArr;
            vm.requiresSignature = isSignatureRequired(); 
            vm.isFirstSave = ComparisonObj.isFirstSave;
            vm.displayName = FormTemplateService.getMetaData(Form.Name).displayName;
            if (vm.isFirstSave) {
                vm.defaultSaveReason = "New Data";
            } else {
                vm.saveReasons = StudyConfigService.getMetaDataByProperty("dataSaveReasons");
                vm.defaultSaveReason = StudyConfigService.getMetaDataByProperty("defaultDataSaveReason") || vm.saveReasons[0];
            }
            
            function isSignatureRequired() {
                var signatureConditions = [
                    ComparisonObj.signature,

                ]
                return signatureConditions.indexOf(true) === -1 ? false : true;
            };

            vm.confirm = function () {
                if (vm.requiresSignature) {
                    userService.login(vm.username, vm.password, function (success) {
                        $uibModalInstance.close({ $value: vm.Form });
                    }, function (error) {
                        vm.errorMessage = err.data.error_description;
                    });
                } else {
                    $uibModalInstance.close({ $value: vm.Form });
                }
            }

            vm.cancel = function () {
                $uibModalInstance.dismiss({ $value: vm.displayName + ' not saved' });
            }

        }]);

angular.module('app').controller('FormErrorController', function ($uibModalInstance, formErrors) {
    var vm = this;
    vm.allErrors = formErrors;

    //for (var key in form) {
    //    if (key.charAt(0) == "$") continue;
    //    var field = key;
    //    if (!form[field].$invalid) continue;
    //    var fieldMarkup = FormService.GetFieldMarkupFromVarName(field);

    //    if (fieldMarkup[0].classList.contains("ng-hide")) {
    //        continue;
    //    }
    //    var displayName = fieldMarkup.find(".sm-label")[0].innerText;
    //    var errorMessageText = fieldMarkup.find(".edit-check-text")[0].innerText;
    //    vm.allErrors.push({ fieldName: displayName, message: errorMessageText })
    //}

    vm.cancel = function () {
        $uibModalInstance.dismiss('cancelled');
    }

    vm.confirm = function () {
        $uibModalInstance.close('Confirmed')
    }
})
angular.module('app').controller('fieldAuditTrailController', ['$uibModalInstance', 'formAuditTrail', 'fieldModelProp', 'fieldName', 'checkboxService', '$parse', 'StudyConfigService', 'fieldMetadata',
function ($uibModalInstance, formAuditTrail, fieldModelProp, fieldName, checkboxService, $parse, StudyConfigService, fieldMetadata) {

    var vm = this;

    vm.formAuditTrail = formAuditTrail;

    vm.fieldModelProp = fieldModelProp;

    vm.fieldName = fieldName;

    vm.fieldMetadata = fieldMetadata;

    vm.getStatusString = function (statusObj, formData) {
        var curFieldStatuses = [];

        if (statusObj == undefined) {
            return "";
        }

        for (var i in statusObj) {
            if (statusObj[i]) curFieldStatuses.push(i);
        }

        return curFieldStatuses.join(", ");
    }

    vm.arrOfUniq = [];

    for (var i = 0; i < vm.formAuditTrail.length; i++) {
        var displayValue = '';
        var getter = $parse(vm.fieldModelProp);

        var curField = getter(vm.formAuditTrail[i].FormData);

        if (curField == undefined || curField == null) {
            continue;
        }

        if (curField.IsCheckboxObj) {
            displayValue = checkboxService.getDisplayValues(curField, vm.fieldMetadata);
        }
        else if (curField.value && curField.value.constructor === Array) {
            displayValue = curField.value.join(', ');
        }
        else {
            displayValue = curField.value;
        }
        var statusString = vm.getStatusString(curField.status, vm.formAuditTrail[i].FormData);

        if (vm.arrOfUniq.length == 0) {
            vm.arrOfUniq.push({ Value: displayValue, Status: statusString, DateCreated: vm.formAuditTrail[i].DateCreated, UserCreated: vm.formAuditTrail[i].UserCreated, Reason: curField.Reason });
            continue;
        }

        if (displayValue != vm.arrOfUniq[vm.arrOfUniq.length - 1].Value || statusString != vm.arrOfUniq[vm.arrOfUniq.length - 1].Status) {
            vm.arrOfUniq.push({ Value: displayValue, Status: statusString, DateCreated: vm.formAuditTrail[i].DateCreated, UserCreated: vm.formAuditTrail[i].UserCreated, Reason: curField.Reason });
        }
    };

    //close the modal
    vm.cancel = function () {
        $uibModalInstance.dismiss( 'cancel' );
    };
}]);
angular.module('app')
    .controller('MainFormCtrl', ['FormTemplateService', 'FormBuilderDTO', 'FormHelperDTO', 'PassiveControlDTO', 'CalculationBuilderDTO', 'SubjectService', '$stateParams', '$scope', '$rootScope', '$timeout', '$state', 'StudyConfigService', 'PermissionMatrixService', 'FormDataTransitService', 'FormSaveHelperDTO', '$log', 'BrowserAPIService',
        function (FormTemplateService, FormBuilderDTO, FormHelperDTO, PassiveControlDTO, CalculationBuilderDTO, SubjectService, $stateParams, $scope, $rootScope, $timeout, $state, StudyConfigService, PermissionMatrixService, FormDataTransitService, FormSaveHelperDTO, $log, BrowserAPIService) {
            
            var formTemplate = FormTemplateService.getMetaData($stateParams.propertyName);

            $scope.isDev = PermissionMatrixService.hasPermission('isDev');
            $scope.canSaveForm = PermissionMatrixService.hasPermission('createFormData');

            $scope.formId = formTemplate.formId;
            $scope.formName = formTemplate.formName;
            $scope.isEPro = formTemplate.isEPro;
            $scope.displayName = formTemplate.displayName;
            $scope.metActionsObj = {};
            $scope.metConditionsObj = {}; // retire
            $scope.metMessageObj = {}; // retire 
            $scope.renderValidationsObj = {}; // how close does this end up being to identical to conditions functionality?
            $scope.targetElementId = formTemplate.formName.toLowerCase().replace(/\.|\[|\]|\s/g, '') + '-form-builder-target'; // set the id of the container element

            var FormHelper = new FormHelperDTO;
            var PassiveControl = new PassiveControlDTO;
            var FormBuilder = new FormBuilderDTO; //(synTemplateDefaults);
            var CalculationBuilder = new CalculationBuilderDTO;

            // from ctrl factories
            $scope.subject = SubjectService.GetSubjectById();

            //Selected field object with data and metadata
            var dataPointWatcher 
            $scope.selectField = function (datapoint, fieldPath) {
                // ensure the new field isn't the same as the old field
                if (datapoint && ($scope.selectedField.fieldData !== $scope.Form.FormData[datapoint])) {
                    dataPointWatcher && dataPointWatcher();

                    if (!fieldPath) fieldPath = '';
                    angular.copy(formTemplate.fieldsHash[datapoint], $scope.selectedField);
                    $scope.selectedField.formId = $scope.formId;
                    $scope.selectedField.subFormId = $scope.formId;
                    $scope.selectedField.formName = $scope.formName;
                    $scope.selectedField.formUniqueId = $scope.Form._id;
                    $scope.selectedField.formTopLevelUniqueId = $scope.Form._id;
                    $scope.selectedField.fieldPath = fieldPath;
                    $scope.selectedField.fullPath = fieldPath + datapoint;
                    $scope.selectedField.fieldData = $scope.Form.FormData[datapoint];
                    $scope.selectedField.description = $scope.selectedField.question.label;

                    dataPointWatcher = $scope.$watch('selectedField.fieldData.value', function (newVal, oldVal) {
                        
                        if (newVal !== oldVal) {
                            // add a property to the status object removeOnChange, to remove specific status when someone changes a form value
                            // move the functionality to remove status to a HelperDTO
                            if ($scope.selectedField.fieldData.status.Verify) {
                                $scope.selectedField.fieldData.status.Verify = false;
                                $scope.Form.IsVerified = false;
                            }

                            if ($scope.selectedField.fieldData.status.Sign) {
                                $scope.selectedField.fieldData.status.Sign = false;
                            }

                            if ($scope.Form.IsSignedOff) {
                                $scope.Form.IsSignedOff = false;
                            }

                            if ($scope.Form.IsVerified) {
                                $scope.Form.IsVerified = false;
                            }
                            
                            dataPointWatcher();
                        }
                    });
                }
            }

            if ($scope.isEPro && !$rootScope.openEProModalIsOpenOrOpening) {
                $rootScope.openEProModalIsOpenOrOpening = true;
                $rootScope.openEProModal($scope.Form);
                var element = document.documentElement;
            } else {
                buildForm();
            }

            function buildForm() {
                FormHelper.loadForm($scope, $stateParams.subjectId).then(function () {
                    // refactor needed, maybe store in the FormHelper
                    if (!$scope.Form.tempUniqueId) {
                        var result = FormDataTransitService.getFormObject($scope.Form.FormTypeId, $scope.Form.SubjectId);

                    if (!result) {
                        FormDataTransitService.setFormObject($scope.Form); // store the form data in the FormDataTransitService for access in subforms and isolate scope directives
                    } else {
                        $scope.Form = result.form;
                        $scope.formCtrl.$setDirty();
                    }
                }

                    formTemplate.formObject = $scope.Form.FormData;
                    formTemplate.formObjectName = 'Form.FormData';
                    formTemplate.formRootName = 'Form';

                    $timeout(function () {
                        FormBuilder.Build(formTemplate, $scope);

                        if (formTemplate.calculations) {
                            calculationMetaData = {
                                formObject: $scope.Form.FormData,
                                formObjectName: 'Form.FormData',
                                formRootName: 'Form',
                                calculations: formTemplate.calculations
                            }
                            CalculationBuilder.Build(calculationMetaData, $scope);
                        }

                        $scope.isDev && $log.info("Form: ", $scope.Form);

                        $scope.selectedField = {};
                        $scope.selectField(formTemplate.fieldsArray[0].dataPoint);

                    }, 0, false);
                });
            }

            $scope.updateStatus = function (isComplete, signatureRequired) {
                isComplete = isComplete || false;
                $scope.Form.IsComplete = isComplete;
                var FormSaveHelper = new FormSaveHelperDTO($scope.Form, $scope.formCtrl, $scope.displayName, signatureRequired);
                return FormSaveHelper.verifyUserBeforeSave(FormSaveHelper.submitForm.bind(FormSaveHelper));
            }

            PassiveControl.alertOnChange($scope);

            // if a form is dirty, store the changed version in a service.
            $state.$current.onExit = function () {
                if ($scope.formCtrl && $scope.formCtrl.$dirty) {
                    $scope.Form.isUnsaved = true;
                    FormTemplateService.addClassToFormListObject($scope.Form.Name, 'unsaved');
                    $rootScope.$broadcast('update-form-navigation-list');
                    FormDataTransitService.setFormObject($scope.Form);
                }
            };
            
            $scope.$on('newQueriesAvailable', function () {
                //Eventually use service to set queries for front end rendering
                FormHelper.loadQueries($scope);
            });

        }]);
angular.module('app')
    .controller('RepeatingFormCtrl', ['DefaultMetaDataService', 'PermissionMatrixService', 'FormBuilderDTO', 'FormHelperDTO', 'PassiveControlDTO', 'CalculationBuilderDTO', 'CalculatorDTO', 'MessageFactoryDTO', 'SubjectService', '$stateParams', '$scope', '$timeout', 'sxHelpers', '$log',
        function (DefaultMetaDataService, PermissionMatrixService, FormBuilderDTO, FormHelperDTO, PassiveControlDTO, CalculationBuilderDTO, CalculatorDTO, MessageFactoryDTO, SubjectService, $stateParams, $scope, $timeout, sxHelpers, $log) {

            var SYNCRONY_METADATA = DefaultMetaDataService.getMetaDataByProperty("metaData");

            $scope.isDev = PermissionMatrixService.hasPermission('isDev');
            
            $scope.isDev && $log.info($stateParams.formObj);

            var CRF_METADATA = $stateParams.formObj;

            $scope.metaData = SYNCRONY_METADATA;
            $scope.formId = CRF_METADATA.formId;
            $scope.formName = CRF_METADATA.formName;
            $scope.metConditionsObj = {};
            $scope.repeatedFormName = CRF_METADATA.subFormArray[0];

            var FormHelper = new FormHelperDTO;
            var PassiveControl = new PassiveControlDTO;
            var Calculator = new CalculatorDTO;
            var Messages = new MessageFactoryDTO;
            var FormBuilder = new FormBuilderDTO(SYNCRONY_METADATA); 
            var CalculationBuilder = new CalculationBuilderDTO;

            $scope.subject = SubjectService.GetSubjectById();
            SubjectService.LoadSubjectById($stateParams.subjectId);


            FormHelper.loadForm($scope, $stateParams.subjectId).then(function () {

                CRF_METADATA.crf = $scope.Form;
                CRF_METADATA.formObject = $scope.Form.FormData;
                CRF_METADATA.formObjectName = 'Form.FormData';
                $scope.repeatingFormMetaData = CRF_METADATA.subMetaData[0];

                $timeout(function () {
                    FormBuilder.Build(CRF_METADATA, $scope);

                    if (CRF_METADATA.calculations) {
                        calculationMetaData = {
                            formObject: $scope.Form.FormData,
                            formObjectName: 'Form.FormData',
                            calculations: CRF_METADATA.calculations
                        }
                        CalculationBuilder.Build(calculationMetaData, $scope);
                    }
                }, 0);

                $scope.Form.hasQuery = [];

                if ($scope.Form.FormData[$scope.repeatedFormName]) {
                    var length = $scope.Form.FormData[$scope.repeatedFormName].length - 1;

                    for (var i = length; i >= 0; i--) {
                        if (!$scope.Form.FormData[$scope.repeatedFormName][i].isDeleted) {
                            $scope.selectedForm = $scope.Form.FormData[$scope.repeatedFormName][i];
                            break;
                        }
                    }
                } else {
                    $scope.Form.FormData[$scope.repeatedFormName] = [];
                    $scope.addNewForm();
                }

            });

            //add new permission lookup
            //old uses Permission.isSite and Permission.isManager

            $scope.canCreateFormData = PermissionMatrixService.hasPermission('createFormData');





            $scope.checkForErrorsandSave = function () {
                FormHelper.saveForm($scope, false);
            }

            PassiveControl.setFunctions($scope);
            Messages.setConditionFunctions($scope);

            // Business logic for repeating forms

            $scope.addNewForm = function () {
                var randomGUID = sxHelpers.generateGUID();
                var absoluteIdx = $scope.Form.FormData[$scope.repeatedFormName].length;
                var relativePathArray = [$scope.repeatedFormName + '[' + absoluteIdx + ']'];
                var repeatedForm = {
                    Id: randomGUID,
                    absoluteIdx: absoluteIdx,
                    relativePathArray: relativePathArray
                };

                $scope.Form.FormData[$scope.repeatedFormName].push(repeatedForm);
                $scope.selectForm();
            }

            $scope.isSelectedForm = function (item) {
                return $scope.selectedFormIdx === item.absoluteIdx;
            }

            $scope.selectForm = function (item) {
                if (item) {
                    $scope.selectedFormIdx = item.absoluteIdx;
                    return;
                }

                var length = $scope.Form.FormData[$scope.repeatedFormName].length - 1;

                for (var i = length; i >= 0; i--) {
                    if ($scope.Form.FormData[$scope.repeatedFormName][i].isDeleted && $scope.Form.FormData[$scope.repeatedFormName][i].isDeleted.value) {
                        continue;
                    } else {
                        $scope.selectedFormIdx = $scope.Form.FormData[$scope.repeatedFormName][i].absoluteIdx;
                        return;
                    }
                }

                $scope.selectedFormIdx = null;

            }

            $scope.hideDeletedForms = function (item) {
                if (!item.isDeleted) {
                    return true;
                } else if (item.isDeleted && item.isDeleted.value && item.isDeleted.value == true) {
                    return false;
                }
            }

            $scope.showQuery = function (num) {
                if ($scope.Form.hasQuery && $scope.Form.hasQuery.indexOf(num) >= 0) {
                    return true;
                } else {
                    return false;
                }
            }

        }]);
angular.module('app').controller('FormSidePanelController', ['$scope', 'QueryService', 'StudyConfigService', 'PermissionMatrixService',
    function ($scope, QueryService, StudyConfigService, PermissionMatrixService) {
        var vm = this;

        $scope.isDev = PermissionMatrixService.hasPermission('isDev');
        $scope.canReadQuery = PermissionMatrixService.hasPermission('readQuery');
        $scope.canCreateNewQuery = PermissionMatrixService.hasPermission('createQuery');

        $scope.sidePanelConfig = StudyConfigService.getMetaDataByProperty("sidePanel");

        $scope.openQueryComments = function (queryId, queryOptions, selectedField) {
            //if (queryOptions.Status !== 'Closed') {
                QueryService.OpenCommentTrail(queryId, queryOptions, selectedField);
            //}
        };
        
        //filter out closed queries in sidebar list - may need to be changed
        $scope.notClosed = function (query) {
            return query.Status !== 'Closed';
        }

    }]);
angular.module('app').controller('AccountController', ['$rootScope', '$uibModal', '$sce', 'SessionTransitService', 'PermissionMatrixService',
    function ($rootScope, $uibModal, $sce, SessionTransitService, PermissionMatrixService) {
        var vm = this;
        vm.sessionObj = SessionTransitService.getSessionObj();
        vm.permissions = PermissionMatrixService;
        vm.userRoles = vm.sessionObj.activeStudy.Roles.filter(function (role) {
            return role.Name !== 'Subject';
        });

        vm.changePassword = function () {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: $sce.trustAsResourceUrl(window.baseUrl + 'templates/changepassword.html'),
                controller: 'PasswordController as PasswordCtrl',
                backdrop: 'static',
            });

            modalInstance.result.then(function () {
            }, function () {
                //$log.info("Modal Closed");
            })
        }

        vm.changeRole = function (newRole) {
            SessionTransitService.changeRole(newRole);
        } 
    }]);
angular.module('app').controller('PasswordController', ['$uibModalInstance', 'userService', '$rootScope', 'SessionTransitService',
    function ($uibModalInstance, userService, $rootScope, SessionTransitService) {
        var vm = this;

        vm.passwordErrors = {};
        vm.test = {};

        vm.sessionObj = SessionTransitService.getSessionObj();

        vm.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };

        vm.changePassword = function () {
            var chngPwdObj = {
                userName: vm.sessionObj.CurrentUser.UserName,
                OldPassword: vm.OldPassword,
                NewPassword: vm.NewPassword,
                ConfirmPassword: vm.ConfirmPassword
            }

            userService.changePassword(chngPwdObj, function () {
                $uibModalInstance.dismiss('cancel');
            }, function (data) {
                vm.errorMessage = data.data.Message;
            })
        }

        vm.validatePassword = function () {
            userService.validatePassword(vm.NewPassword, vm.passwordErrors, vm.test);
        }
    }]);
angular.module('app').controller('StudyLandingController', ['SubjectService', 'PermissionMatrixService', 'UserService', 'QueryService', 'CustomDataService', '$rootScope', '$scope', 'StudyConfigService', 'SessionTransitService', '$log', 'ReportingService',
    function (subjectservice, PermissionMatrixService, userservice, QueryService, CustomDataService, $rootScope, $scope, StudyConfigService, SessionTransitService, $log, ReportingService) {
        $scope.column1 = ['Test widget', 'uh oh'];
        $scope.column2 = ['test 2'];
        $scope.column3 = ['test 3'];

        $scope.addWidget = function (column, widgetName) {
            $scope[column].splice($scope[column].length - 1, 0, widgetName)
        }

    }]);
angular.module('app').controller('AddWidgetController', ['WidgetService', '$scope', 'columnNumber', 'lastPos', '$uibModalInstance', '$rootScope',
    function (WidgetService, $scope, columnNumber, lastPos, $uibModalInstance, $rootScope) {
        //debugger
        //debugger
        //$scope.addWidget = function (column, )
        console.log('col', columnNumber);
        console.log('pos', lastPos);
        
        $scope.widgets = WidgetService.GetWidgetsList();
        $scope.column = columnNumber;

        $scope.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };

        $scope.addWidget = function (widget) {
            //move to widget service
            //widgetCopy = angular.copy(widget);
            //debugger
            //widget.col = columnNumber;
            //widget.position = lastPos + 1;

            lastPos += 1;
            WidgetService.AddWidget(widget, columnNumber, lastPos)


            //in promise
            //lastPos += 1;
        }
    }]);
angular.module('app').controller('TestController', ['WidgetService', '$scope', 'ReportingService',
    function (WidgetService, $scope, ReportingService) {

        $scope.loadTile = function (tileId, tile) {
            ReportingService.getTile('f5f7e631-df55-436b-8ce2-65d22b450f1b', tileId, function (config) {
                // Get a reference to the embedded report HTML element
                var reportContainer = $('#reportContainer')[0];

                // Embed the report and display it within the div container.
                var report = powerbi.embedNew(reportContainer, config);
            });
        }

        ReportingService.getTiles('f5f7e631-df55-436b-8ce2-65d22b450f1b', function (response) {
            $scope.tileList = response;
        });

        $scope.selectedTile = '7da9e650-6887-459c-a804-3f6d82812577';
        $scope.loadTile($scope.selectedTile);
    }]);
angular.module('app')

.factory('ActionBuilderDTO', ['$parse', 'sxHelpers', function ($parse, sxHelpers) {

    var actionMap = {
        show: 'polyGraph',
        message: 'polyGraph',
        result: 'result',
        query: 'query',
        email: 'email'
    };

    var intensityMap = {
        info: 1,
        warn: 1,
        error: 1,
        success: 1
    };

    function ActionBuilder() {
        this.does = 'Test the $parse service';
    }

    ActionBuilder.prototype.Build = function (metaData, scope) {
        var self = this;

        var domActionArray = [];

        angular.forEach(metaData.actions, function (expressionObj, idx) {

            var actionObj = {}; // used in the form builder to interact with the DOM
            actionObj.target = metaData.target; // current variable as a string
            actionObj.hash = 'id' + sxHelpers.generateGUID().replace(/\-/g, ''); // hash value, to assign multiple conditions and messsages to a single data point

            // construct an array of data point string values for the watch group
            var datapoints = expressionObj.dependents.map(function (property) {
                return metaData.formObjectName + '.' + property + '.value';
            });

            // append .value to any data points in the formula string
            var updatedFormula = expressionObj.formula.split(' ').map(function (str) {
                if (expressionObj.dependents.indexOf(str) > -1) {
                    str += '.value';
                }
                return str;
            }).join(' ');

            // create the parsed function
            var exp = $parse(updatedFormula);

            // find actions by keyword
            var actionArr = expressionObj.actions.split(/[()]/).map(function (str) {
                if (str) {
                    return str.trim();
                }
            });

            for (var i in actionArr) {
                var item = actionArr[i];

                if (actionMap[item]) {
                    actionObj.method = item;
                    continue;
                    // check for multiple actions, and create a new action object for it
                }

                if (intensityMap[item]) {
                    // append an intensity to a message
                    continue;
                }

                if (angular.isString(item)) {
                    actionObj.text = item;
                    continue;
                }

            }

            domActionArray.push(actionObj);

            scope.$watchGroup(datapoints, function (newVal) {

                // return value from the parsed expression
                actionObj.value = exp(metaData.formObject); 

                // get a reference of the current data point object
                if (metaData.formObject[actionObj.target]) {
                    actionObj.dataPoint = metaData.formObject[actionObj.target];
                }

                if (actionObj.method === 'result') {
                    actionObj.dataPoint.value = actionObj.value;
                    return;
                }

                if (actionObj.method === 'show') {
                    scope.metActionsObj[actionObj.hash] = actionObj.value;

                    if (!actionObj.value) {

                        if (actionObj.dataPoint.IsCheckboxObj) {
                            for (var i in actionObj.dataPoint) {
                                if (actionObj.dataPoint[i].hasOwnProperty('value')) {
                                    actionObj.dataPoint[i].value = null;
                                }
                            }
                            return;
                        }

                        actionObj.dataPoint.value = null;
                    }
                    
                    return;
                }

                if (actionObj.method === 'message') {
                    scope.metActionsObj[actionObj.hash] = actionObj.value;
                    return;
                }

            });

        });

        return domActionArray;
    }

    return ActionBuilder;
}]);
angular.module('app')

    .factory('PolygraphDTO', [function () {

        function Polygraph() {
            this.does = 'Returns a boolean value after checking values in an array against a single condition';
        }

        Polygraph.prototype.isTrue = function (array) {
            for (var i = 0; i < array.length; i++) {
                if (!array[i]) {
                    return false;
                }
            }
            return true;
        }

        Polygraph.prototype.isAnswered = function (array) {
            for (var i = 0; i < array.length; i++) {
                if (array[i] === null || array[i] === undefined || array[i] === '') {
                    return false;
                }
            }
            return true;
        }

        Polygraph.prototype.isEqual = function (array, optionalValue) {
            for (var i = 0; i < array.length; i++) {
                if (!array[i]) {
                    return false;
                }
                if (array[i] != optionalValue) {
                    return false;
                }
            }
            return true;
        }

        Polygraph.prototype.isGreater = function (array, optionalValue) {
            for (var i = 0; i < array.length; i++) {
                if (!array[i]) {
                    return false;
                }
                if (array[i] <= optionalValue) {
                    return false;
                }
            }
            return true;
        }

        Polygraph.prototype.isLess = function (array, optionalValue) {
            for (var i = 0; i < array.length; i++) {
                if (!array[i]) {
                    return false;
                }
                if (array[i] >= optionalValue) {
                    return false;
                }
            }
            return true;
        }

        return Polygraph;

    }]);
angular.module('app')
    // map the user input to the PolygraphDTO methods
    .value('requirementMap', {
        true: 'isTrue',
        answered: 'isAnswered',
        equals: 'isEqual',
        greater: 'isGreater',
        less: 'isLess'
    })

    .factory('ConditionBuilderDTO', ['PolygraphDTO', 'requirementMap', function (PolygraphDTO, requirementMap) {

        function ConditionBuilder() {
            this.does = 'Sets conditions on form fields';
        }

        ConditionBuilder.prototype.Build = function (conditionMetaData, scope) {
            var self = this;
            var booleanArr = [];
            var Polygraph = new PolygraphDTO;

            angular.forEach(conditionMetaData.conditions, function (conditionObj, idx) {


                // construct an array of data point string values for the watch group
                var datapoints = conditionObj.dependants.map(function (property) {
                    return conditionMetaData.formObjectName + '.' + property + '.value';
                });

                scope.$watchGroup(datapoints, function (newVal) {

                    // return a boolean value from the polygraph if all the values of the watchgoup satify the condition
                    booleanArr[idx] = Polygraph[requirementMap[conditionObj.requirement]](newVal, conditionObj.optionalValue);

                    // If any of the conditions are not met, this passes false to an ng-if on the form field
                    scope.metConditionsObj[conditionMetaData.target] = booleanArr.indexOf(false) === -1;

                    if (!scope.metConditionsObj[conditionMetaData.target]) {
                        // set the hidden values to null
                        setDataPointToNull(conditionMetaData.formObject[conditionMetaData.target]);
                    }

                });

            });
        }

        // HELPER FUNCTIONS

        function setDataPointToNull(datapoint) {
            if (datapoint.value === null) {
                return
            }
            if (datapoint.value) {
                datapoint.value = null
                return
            }
            // iterate through checkboxes and set sub object values to null
            var keys = Object.keys(datapoint);

            keys.forEach(function (key) {
                if (datapoint[key].value) {
                    datapoint[key].value = null;
                }
            });

        }

        return ConditionBuilder;
    }]);
angular.module('app')
    .factory('AbacusDTO', ['CONVERSION', function (CONVERSION) {
        function Abacus() {
            this.does = 'Syncrony V2 prototype calculator';
        }

        Abacus.prototype.addNumbers = function (array, sum) {
            sum.value = array.reduce(function (x, y) {
                return x + y;
            }, 0);
        }

        Abacus.prototype.subtractNumbers = function (array, diff) {
            diff.value = 'not implemented';
        }

        Abacus.prototype.multiplyNumbers = function (array, product) {
            product.value = array.reduce(function (x, y) {
                return x * y;
            }, 1);
        }

        Abacus.prototype.divideNumbers = function (array, result) {
            result.value = array.reduce(function (x, y) {
                return x / y;
            });
        }

        Abacus.prototype.findAverage = function (array, ave) {
            ave.value = array.reduce(function (x, y) {
                return x + y;
            }, 0) / array.length;
        }

        Abacus.prototype.calcBmi = function (array, bmi) {
            var wieghtInKg = array[0] / CONVERSION[array[2]]['kg']; // convert weight to kg from user supplied unit and measure 
            var heightInM = array[1] / CONVERSION[array[3]]['m']; // convert height to meters from user supplied unit and measure 
            if (wieghtInKg && heightInM) {
                 unroundedNumber = wieghtInKg / (Math.pow(heightInM, 2));
                 return bmi.value = unroundedNumber; round(unroundedNumber, 2);
            }

            return bmi.value = null;
        }

        Abacus.prototype.evaluateExpression = function (string, context, result) {
            var parsedExpression = $parse(string);
            var evaluated = parsedExpression(context);
            if (evaluated) result = evaluated;
        }
        
        return Abacus;

        // HELPER FUNTIONS

        function round(value, decimals) {
            return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);
        }

    }]);
angular.module('app')
    .factory('CalculatorDTO', function () {
        function Calculator() {
            this.does = 'common calculations needed in Syncrony Core';

            this.decimalAdjust = function (type, value, exp) {
                // If the exp is undefined or zero...
                if (typeof exp === 'undefined' || +exp === 0) {
                    return Math[type](value);
                }
                value = +value;
                exp = +exp;
                // If the value is not a number or the exp is not an integer...
                if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {
                    return NaN;
                }
                // Shift
                value = value.toString().split('e');
                value = Math[type](+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));
                // Shift back
                value = value.toString().split('e');
                return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));
            }
        }

        // set the range of a numerical input field
        // units = [ measurement1, measurement2, etc ];
        // ranges = [ [startVal1, endVal1], [startVal2, endVal2], etc ];
        Calculator.prototype.setRange = function (form, property, units, ranges) {
            if (form && form[property]) {
                for (var i = 0; i < units.length; i++) {
                    if (form[property].value == units[i]) {
                        return { min: ranges[i][0], max: ranges[i][1] };
                    }
                }
            }
        }

        Calculator.prototype.BMI = function (heightUnit, weightUnit, height, weight) {
            var self = this;
            var meterHeight, kgWeight, bmi;

            if (heightUnit == "in") {
                meterHeight = height * .0254;
            } else if (heightUnit == "cm") {
                meterHeight = (height / 100)
            }

            if (weightUnit == "kg") {
                kgWeight = weight;
            } else if (weightUnit == "lb") {
                kgWeight = weight * 0.453592;
            }

            if (height != undefined && weight != undefined) {
                var unRounded = (kgWeight / (meterHeight * meterHeight))

                if (!Math.round10) {
                    Math.round10 = function (value, exp) {
                        return self.decimalAdjust('round', value, exp);
                    };
                }

                bmi = Math.round10(unRounded, -1);
            }

            return bmi;
        }

        Calculator.prototype.getAgeFromBirthday = function (birthday) {
            if (birthday) {
                var today = new Date();
                var age = today.getFullYear() - birthday.getFullYear();
                var month = today.getMonth() - birthday.getMonth();
                if (month < 0 || (month === 0 && today.getDate() < birthday.getDate())) {
                    age--;
                }
                return age;
            }
        };

        Calculator.prototype.round = function (numToBeRounded, decimalPlaces) {
            var normalizer = decimalPlaces * 10
            return Math.round(numToBeRounded * normalizer) / normalizer
        }

        return Calculator;
    });
angular.module('app')

    .factory('FormBuilderDTO', ['$log', '$compile', 'ActionBuilderDTO', 'ConditionBuilderDTO', 'DefaultMetaDataService', 'FieldDirectiveHelperDTO', 'ValidationBuilderDTO', function ($log, $compile, ActionBuilderDTO, ConditionBuilderDTO, DefaultMetaDataService, FieldDirectiveHelperDTO, ValidationBuilderDTO) {

        var ConditionBuilder = new ConditionBuilderDTO;
        var FieldDirectiveHelper = new FieldDirectiveHelperDTO;
        var ActionBuilder = new ActionBuilderDTO;

        function FormBuilder(studyConfig) {
            this.does = "Converts meta data into a form at runtime";
            this.studyConfig = studyConfig || DefaultMetaDataService.getMetaDataByProperty('metaData');
            this.ValidationBuilder = new ValidationBuilderDTO;
        }

        FormBuilder.prototype.Build = function (metaData, scope) {
            var self = this;

            // unique element id for the Form Builder to target at runtime
            var stringForIdTarget = metaData.relativePathArray ? metaData.relativePathArray.join('') : metaData.formName;
            var idForTarget = '#' + stringForIdTarget.toLowerCase().replace(/\.|\[|\]|\s/g, '') + '-form-builder-target';
            var targetElement = document.querySelector(idForTarget);

            // snapshot the phantom .appendChild() error if/when it is about to happen
            // SPL-676 will streamline this
            if (!targetElement) {
                var snapshotData = JSON.stringify({
                    time: new Date,
                    dom: document.getElementsByTagName("html")[0].innerHTML,
                    metaData: metaData,
                    scopeDotTargetElementId: scope.targetElementId, // full scope can't be stringified, unstringified object can't be copied from console
                    formBuilder: self
                });
                $log.warn("⚠️ ATTENTION! PLEASE COPY AND PASTE THIS LOG ITEM INTO AN EMAIL FOR THE DEVELOPERS: ", snapshotData);
            }

            // store the crf, form, and other widely used data on the prototype
            // self.crf = metaData.crf; clear to remove
            self.formObject = metaData.formObject;

            self.formObjectName = metaData.formObjectName;
            self.formRootName = metaData.formRootName;
            self.formMetaDataId = metaData.formId;
            self.nameForQueries = metaData.formName;
            self.mainFormTypeId = metaData.mainFormTypeId || metaData.formId;

            if (metaData.relativePathArray) {
                self.auditString = metaData.relativePathArray.join('.') + '.';
            }
            else self.auditString = '';

            // default builders
            // self.ValidationBuilder = new ValidationBuilderDTO; // (scope.defaultValidations);

            // if a subForm exists, store the subMetaData on the prototype
            //metaData.subMetaData && metaData.subMetaData.forEach(function (data) {
            //    var subFormName = data.formName;
            //    self[subFormName] = data;
            //    self[subFormName].crf = self.crf;
            //}); clear to remove CM

            // interate over the metadata to build and compile a single form field
            metaData.fieldsArray.forEach(function (fieldObj) {
                var uncompiledFormField = self.BuildSingleField(fieldObj, scope);
                targetElement.appendChild(uncompiledFormField);
                $compile(uncompiledFormField)(scope);
            });
        }

        FormBuilder.prototype.BuildSingleField = function (obj, scope) {
            var self = this;
            var conditionsAttr, subFormNode, informationNode, questionNode, inputNode, clearInputNode, auditNode, queryNode, statusNode, validationNode;

            // Store string value of the datapoint and its form.
            self.stringForNgModel = self.formObjectName + "." + obj.dataPoint;

            // If it's a datapoint make it selectable
            if (obj.dataPoint) {
                //var formRow = angular.element('<div class="row form-row" ng-click="currentField = ' + self.stringForNgModel + '" ng-class="{&#39;form-row-selected&#39;: currentField == ' + self.stringForNgModel + '}"></div>');
                var formRow = angular.element('<div class="row form-row" ng-click="selectField(&#39;' + obj.dataPoint + '&#39;,&#39;' + self.auditString + '&#39;)" ng-class="{&#39;form-row-selected&#39;: selectedField.fullPath == &#39;' + self.auditString + obj.dataPoint + '&#39;}"></div>');
            }
            else {
                var formRow = angular.element('<div class="row form-row"></div>');
            }            

            // basic implementation of conditions set on the form field
            //if (obj.conditions) {
            //    obj.conditions.stringForFormData = self.formObjectName;
            //    conditionsAttr = self.AddConditionsToField(obj.conditions);

            //    conditionsAttr.forEach(function (conditionArr) {
            //        formRow.attr(conditionArr[0], conditionArr[1]);
            //    });
            //}

            // for now question styles dif on vas score - REFACTOR: a dynamic way to change question styles in general
            if (obj.input && obj.input.type === "visualAnalogScale") {
                obj.question.isVas = true;
                if (obj.question.list) obj.input.list = obj.question.list;
            }

            if (obj.subForm) {
                subFormNode = self.CreateSubForm(obj.subForm);
                formRow.append(subFormNode);
            }

            if (obj.information) {
                informationNode = self.Information(obj.information);
                formRow.append(informationNode);
            }

            if (obj.question) {
                // Store the field's question
                self.fieldQuestion = obj.question.label;
                questionNode = self.Question(obj.question);
                formRow.append(questionNode);
            }

            if (obj.input) {                
                obj.input.dataPoint = obj.dataPoint;
                inputNode = self.Input(obj.input);
                formRow.append(inputNode);

                statusNode = self.CreateStatusField(obj);
                formRow.append(statusNode);
            }

            if (obj.clearInput) {
                obj.clearInput.inputType = obj.input.type;

                if (obj.clearInput.inputType === "checkboxdepreciated") {
                    obj.clearInput.subDataPointNames = obj.input.value;
                }

                clearInputNode = self.ClearInput(obj.clearInput);
                formRow.append(clearInputNode);
            }

            if (obj.validation) {
                obj.validation.dataPointName = obj.dataPoint;
                obj.validation.inputType = obj.input.type;
                if (obj.validation.inputType === "checkboxdepreciated") {
                    obj.validation.subDataPointNames = obj.input.value;
                }

                obj.validation.styles = obj.validation.styles || self.studyConfig.validation.styles;

                scope.renderValidationsObj[obj.validation.dataPointName] = [];

                var formMetaData = {
                        formObjectName: self.formObjectName
                };

                self.ValidationBuilder.Build(obj.validation, formMetaData, scope);

                validationNode = self.Validation(obj.validation);
                formRow.append(validationNode);
            }

            //if (obj.auditTrail) {
            //    // relative path of the datapoint, ex: Medications[1].Events[5].DP_1 
            //    obj.auditTrail.dataPoint = self.auditString ? self.auditString + obj.dataPoint : obj.dataPoint;
            //    auditNode = self.CreateAudit(obj.auditTrail);
            //    formRow.append(auditNode);
            //}

            //if (obj.queries) {
            //    queryNode = self.CreateQuery(obj.queries);
            //    formRow.append(queryNode);
            //}

            //if (obj.statusButtons) {
            //    statusNode = self.CreateStatusForm(obj.statusButtons);
            //    formRow.append(statusNode);
            //}
            
            if (obj.conditions) {

                scope.metConditionsObj[obj.dataPoint] = 0;
                var metConditionsStr = 'metConditionsObj.' + obj.dataPoint;

                var conditionMetaData = {
                    formObjectName: self.formObjectName,
                    target: obj.dataPoint,
                    conditions: obj.conditions
                }

                conditionMetaData.formObject = self.formObject,

                ConditionBuilder.Build(conditionMetaData, scope);

                formRow.attr('ng-if', metConditionsStr);
            }

            if (obj.actions) {
                // append form and data point info along with the actions
                var actionMetaData = {
                    formObjectName: self.formObjectName,
                    formObject: self.formObject,
                    actions: obj.actions,
                    target: obj.dataPoint
                }
                
                var domActionArray = ActionBuilder.Build(actionMetaData, scope);

                var messagerWrapper;

                for (var i in domActionArray) {

                    var actionObj = domActionArray[i];

                    if (actionObj.method === 'show') {
                        scope.metActionsObj[actionObj.hash] = 0;
                        var metActionStr = 'metActionsObj.' + actionObj.hash;

                        formRow.attr('ng-if', metActionStr);
                        continue;
                    }

                    if (actionObj.method === 'message') {
                        
                        messagerWrapper = messagerWrapper || angular.element('<ul></ul>');

                        scope.metActionsObj[actionObj.hash] = 0;
                        var metActionStr = 'metActionsObj.' + actionObj.hash;

                        var messageNode = angular.element('<li>' + actionObj.text + '</li>');
                        messageNode.attr('class', 'total-class');
                        messageNode.attr('ng-if', metActionStr);
                        messagerWrapper.append(messageNode);

                    }
                }

                messagerWrapper && formRow.append(messagerWrapper);
            }

            // If the datapoint is being instantiated, created an object with value and status property.
            if (obj.dataPoint && !self.formObject[obj.dataPoint]) {
                self.formObject[obj.dataPoint] = {
                    value: null,
                    status: {}
                }
            }

            return formRow[0];
        }

        FormBuilder.prototype.AddConditionsToField = function (obj) {
            var conditionalArray = [];

            if (obj.showIf) {
                var completeConditionString = "";
                obj.showIf.forEach(function (condition) {
                    completeConditionString += obj.stringForFormData + "." + condition;
                });
                conditionalArray.push(['ng-show', completeConditionString]);
            }

            return conditionalArray;
        }

        FormBuilder.prototype.CreateSubForm = function (obj) {
            var self = this;

            var subFormDir = angular.element('<repeated-sub-form-wrapper data-selected-field="selectedField" data-form-ctrl="formCtrl" data-query-hash="queryHash"></repeated-sub-form-wrapper>');
            var displayName = obj.displayName || obj.formName;
            // subFormDir.attr('data-crf', JSON.stringify(self.crf)); // clear to remove CM
            subFormDir.attr('data-default-meta-data', JSON.stringify(self.studyConfig));
            subFormDir.attr('data-meta-data', JSON.stringify(self[obj.formName]));
            subFormDir.attr('data-display-name', displayName);
            subFormDir.attr('data-form-name', obj.formName);
            subFormDir.attr('data-form-object', self.formObjectName);
            subFormDir.attr('data-form-root', self.formRootName);
            subFormDir.attr('data-main-form-type-id', self.mainFormTypeId); // this id points to the template FormTypeId and needs a way to be passed to the subforms

            if (!obj.instruction) {
                obj.instruction = self.studyConfig.subForm.instruction;
            }

            subFormDir.attr('data-form-instruction', obj.instruction);

            return subFormDir;
        }

        FormBuilder.prototype.Information = function (obj) {
            var self = this;

            var infoDir = angular.element('<syn-info-bar></syn-info-bar>');

            if (obj.heading) {
                infoDir.attr('data-heading', obj.heading);
            }

            if (obj.subHeading) {
                infoDir.attr('data-sub-heading', obj.subHeading);
            }

            if (obj.text) {
                infoDir.attr('data-text', obj.text);
            }

            if (!obj.styles) {
                obj.styles = self.studyConfig.fieldDirectives.informationStyles;
            }

            infoDir.attr('data-styles-obj', JSON.stringify(obj.styles));

            return infoDir;
        }

        FormBuilder.prototype.Question = function (obj) {
            var self = this;

            var questionDir = angular.element('<syn-question></syn-question>');
            questionDir.attr('data-label', obj.label);

            if (obj.note) {
                questionDir.attr('data-note', obj.note);
            }

            if (obj.list && !obj.isVas) {
                questionDir.attr('data-list', JSON.stringify(obj.list));
            }

            //if (!obj.styles) {
            //    obj.styles = self.studyConfig.question.styles;
            //}

            obj.styles = obj.isVas ? self.studyConfig.question.vasStyles : self.studyConfig.question.styles;

            questionDir.attr('data-styles-obj', JSON.stringify(obj.styles));

            return questionDir;
        }

        FormBuilder.prototype.Input = function (obj) {
            var self = this;

            if (obj.type === 'radio') {
                var inputDir = angular.element('<syn-radio></syn-radio>');

                if (!obj.styles) {
                    obj.styles = self.studyConfig.input.radioStyles;
                }

                if (!obj.display) {
                    obj.display = self.studyConfig.input.display;
                    obj.value = self.studyConfig.input.value;
                }

                if (!obj.value) {
                    obj.value = obj.display;
                }

                var displayValueArr = createDisplayValueArr(obj.display, obj.value);

                inputDir.attr('display-value-arr', JSON.stringify(displayValueArr));
                inputDir.attr('data-datapoint', obj.dataPoint);
            }

            if (obj.type === 'dropdown') {
                var inputDir = angular.element('<syn-dropdown></syn-dropdown>')

                if (!obj.styles) {
                    obj.styles = self.studyConfig.input.dropdownStyles;
                }

                if (!obj.display) {
                    obj.display = self.studyConfig.input.display;
                    obj.value = self.studyConfig.input.value;
                }

                if (!obj.value) {
                    obj.value = obj.display;
                }

                var displayValueArr = createDisplayValueArr(obj.display, obj.value);

                inputDir.attr('data-display-value-arr', JSON.stringify(displayValueArr));
            }

            if (obj.type === 'multidropdown') {
                var inputDir = angular.element('<syn-multidropdown></syn-multidropdown>');

                if (!obj.styles) {
                    obj.styles = self.studyConfig.input.multidropdownStyles;
                }

                if (!obj.display) {
                    obj.display = self.studyConfig.input.display;
                    obj.value = self.studyConfig.input.value;
                }

                if (!obj.value) {
                    obj.value = obj.display;
                }

                var displayValueArr = createDisplayValueArr(obj.display, obj.value);
                inputDir.attr('data-display-arr', JSON.stringify(obj.display));
                inputDir.attr('data-display-value-arr', JSON.stringify(displayValueArr));
            }

            if (obj.type === 'toggle') {
                var inputDir = angular.element('<syn-toggle></syn-toggle>');

                if (!obj.styles) {
                    obj.styles = self.studyConfig.input.toggleStyles
                }
            }
            
            if (obj.type === 'stringdate') {

                var defaultDateOptions = FieldDirectiveHelper.SetDateOptions(obj.format, self.studyConfig.input.stringDateFormat);

                var inputDir = angular.element('<syn-stringdate></syn-stringdate>');
                var newDataPoint = obj.dataPoint + '_SYNDATE';
                var uniqueId = newDataPoint.toLowerCase().replace(/_/, '-');
                if (!obj.styles) {
                    obj.styles = self.studyConfig.input.textfieldStyles
                }
                if (obj.dataPoint && !self.formObject[newDataPoint]) {
                    self.formObject[newDataPoint] = {
                        value: null,
                        status: {}
                    }
                }

                inputDir.attr('data-format', defaultDateOptions.format);
                inputDir.attr('data-new-data-point', self.formObjectName + '.' + newDataPoint);
                inputDir.attr('data-delimiter', defaultDateOptions.delimiter);
                inputDir.attr('data-unique-id', uniqueId);
                inputDir.attr('data-display-format', defaultDateOptions.displayFormat);
            }

            if (obj.type === 'number') {
                var inputDir = angular.element('<syn-number></syn-number>');

                if (!obj.styles) {
                    obj.styles = self.studyConfig.input.numberStyles
                }
            }

            if (obj.type === 'text') {
                var inputDir = angular.element('<syn-textfield></syn-textfield>');

                if (!obj.styles) {
                    obj.styles = self.studyConfig.input.textfieldStyles
                }

                if (obj.format) {
                    inputDir.attr('data-format-obj', JSON.stringify(obj.format));
                }
            }

            if (obj.type === 'textarea') {
                var inputDir = angular.element('<syn-textarea></syn-textarea>');

                if (!obj.styles) {
                    obj.styles = self.studyConfig.input.textareaStyles
                }

                if (obj.format) {
                    inputDir.attr('data-format-obj', JSON.stringify(obj.format));
                }
            }

            if (obj.type === 'readonly') {
                var inputDir = angular.element('<syn-readonly></syn-readonly>');

                if (!obj.styles) {
                    obj.styles = self.studyConfig.input.readonlyStyles
                }

                if (obj.format) {
                    inputDir.attr('data-format-obj', JSON.stringify(obj.format));
                }
            }

            if (obj.type === 'date') {
                var defaultDateOptions = FieldDirectiveHelper.SetDateOptions(obj.format, self.studyConfig.input.dateFormat);
                var inputDir = angular.element('<syn-date-parser></syn-date-parser>');

                if (!obj.styles) {
                    obj.styles = self.studyConfig.input.dateParserStyles
                }

                inputDir.attr('data-display-format', defaultDateOptions.displayFormat);
                inputDir.attr('data-format', defaultDateOptions.format);
                inputDir.attr('data-delimiter', defaultDateOptions.delimiter);
            }

            if (obj.type === 'time') {
                var inputDir = angular.element('<syn-time-parser></syn-time-parser>');

                if (!obj.styles) {
                    obj.styles = self.studyConfig.input.timeParserStyles;
                }
            }

            if (obj.type === 'unitMeasure') {
                var inputDir = angular.element('<syn-unit-measure></syn-unit-measure>');
                
                if (obj.dataPoint && !self.formObject[obj.dataPoint + '_UNIT']) {
                    self.formObject[obj.dataPoint + '_UNIT'] = {
                        value: null,
                        status: {}
                    }
                }

                if (obj.dataPoint && !self.formObject[obj.dataPoint + '_MEASURE']) {
                    self.formObject[obj.dataPoint + '_MEASURE'] = {
                        value: null,
                        status: {}
                    }
                }

                inputDir.attr('data-field-unit', self.stringForNgModel + '_UNIT');
                inputDir.attr('data-field-measure', self.stringForNgModel + '_MEASURE');

                if (!obj.display) obj.display = ['cm']; // dynamism wanted here, hardcoded for now
                obj.value = obj.value ? obj.value : obj.display[0];

                inputDir.attr('data-display', JSON.stringify(obj.display));
                inputDir.attr('data-value', obj.value); 

                if (!obj.styles) {
                    obj.styles = self.studyConfig.input.unitMeasureStyles
                }
            }

            if (obj.type === 'checkboxdepreciated') {

                var inputDir = angular.element('<syn-checkbox-depreciated></syn-checkbox-depreciated>');

                if (!obj.display) {
                    obj.display = self.studyConfig.input.display;
                    obj.value = self.studyConfig.input.value;
                }

                if (!obj.value) {
                    obj.value = obj.display;
                }

                var displayValueArr = createDisplayValueArr(obj.display, obj.value);

                inputDir.attr('display-value-arr', JSON.stringify(displayValueArr));

                // set the datapoint as an object and set the sub-object properties
                if (!self.formObject[obj.dataPoint]) {
                    self.formObject[obj.dataPoint] = {
                        IsCheckboxObj: true,
                        status: {}
                    };

                    obj.value.forEach(function (prop) {
                        self.formObject[obj.dataPoint][prop] = {
                            value: null
                        }
                    });
                }

                inputDir.attr('data-datapoint', obj.dataPoint);

                if (!obj.styles) {
                    obj.styles = self.studyConfig.input.checkboxDepreciatedStyles;
                }
            }




            if (obj.type === 'visualAnalogScale') {

                var inputDir = angular.element('<syn-visual-analog-scale></syn-visual-analog-scale>');

                if (!obj.styles) obj.styles = self.studyConfig.input.visualAnalogScale;
                
                var scopeBuildingObj = [];

                // continuumImg from 'format' cell for now
                scopeBuildingObj.push({
                    value: obj.format || self.studyConfig.input.continuumImg,
                    action: "continuumImg"
                })

                // end images from 'list' cell for now
                var actionsFromListCell = ['end1Text', 'end2Text', 'min', 'max', 'step']
                var counter = 0;
                if (obj.list) {
                    obj.list.forEach(function (img) {
                        scopeBuildingObj.push({
                            value: obj.list[counter],
                            action: actionsFromListCell[counter]
                        });
                        counter++;
                    })
                }

                if (!obj.display) {
                    obj.display = self.studyConfig.input.display;
                    obj.value = self.studyConfig.input.value;
                    var step = self.studyConfig.input.options;
                    inputDir.attr('data-step', JSON.stringify(step));
                }
                if (!obj.value) {
                    obj.value = obj.display;
                }                
                var displayValueArr = createDisplayValueArr(obj.display, obj.value);
                scopeBuildingObj.push({
                    value: displayValueArr,
                    action: "displayValueArr"
                });

                // scopeBuilding element ignored by scope building function if already present so just all defaults added for now
                var rangeDefaults = self.studyConfig.input.rangeDefaults;
                for (var d in rangeDefaults) {
                    scopeBuildingObj.push({
                        value: rangeDefaults[d],
                        action: d
                    });
                }

                inputDir.attr('data-scope-building-obj', JSON.stringify(scopeBuildingObj));                
            }




            if (obj.options) {
                inputDir.attr('data-attribute-obj', JSON.stringify(obj.options));
            }

            inputDir.attr('data-field', self.stringForNgModel);
            inputDir.attr('data-styles-obj', JSON.stringify(obj.styles));

            // inputDir.setAttribute('data-disable-obj', JSON.stringify(obj.disable));

            return inputDir;
        }

        FormBuilder.prototype.Validation = function (validation) {

            var validationDir = angular.element('<syn-validation></syn-validation>');

            validationDir.attr('data-styles-obj', JSON.stringify(validation.styles));
            validationDir.attr('data-render-validations', "renderValidationsObj." + validation.dataPointName);

            return validationDir;
        }

        FormBuilder.prototype.ClearInput = function (clearInput) {
            if (false) {
                // locks, freezes, permission conditions // access status which will be -- lock or freeze (sign should unsigned if field is cleared)
            }
            var self = this;

            var clearInputDir = angular.element('<syn-clear-input></syn-clear-input>');

            if (clearInput.inputType === "checkboxdepreciated") {
                clearInputDir.attr('data-sub-data-point-names', JSON.stringify(clearInput.subDataPointNames));
            }

            if (!clearInput.styles) {
                clearInput.styles = self.studyConfig.clearInput.styles
            }

            clearInputDir.attr('data-field-type', clearInput.inputType);
            clearInputDir.attr('data-field', self.stringForNgModel);
            clearInputDir.attr('data-styles-obj', JSON.stringify(clearInput.styles));

            return clearInputDir;
        }

        FormBuilder.prototype.CreateAudit = function (obj) {
            var self = this;

            var auditDir = angular.element('<syn-audit-button></syn-audit-button>');
            auditDir.attr('data-question', self.fieldQuestion);
            auditDir.attr('data-model-property', obj.dataPoint);

            if (!obj.styles) {
                obj.styles = self.studyConfig.auditTrail.styles;
            }

            auditDir.attr('data-styles-obj', JSON.stringify(obj.styles));

            return auditDir;
        }

        FormBuilder.prototype.CreateQuery = function (obj) {
            var self = this;

            if (!obj.comment) {
                obj.comment = self.studyConfig.queries.comment;
            }

            var queryDir = angular.element('<syn-query-button></syn-query-button>');

            var uniqueFormId = self.formObject.Id ? self.formObject.Id : self.crf._id;
            queryDir.attr('data-field-name', self.fieldQuestion);
            queryDir.attr('data-form-id', self.formMetaDataId);
            queryDir.attr('data-form-name', self.nameForQueries);
            queryDir.attr('data-unique-form-id', uniqueFormId);
            queryDir.attr('data-top-level-uniq-id', self.crf._id);
            queryDir.attr('data-form-queries', 'formQueries');
            queryDir.attr('data-query-comments', JSON.stringify(obj.comment));

            if (!obj.styles) {
                obj.styles = self.studyConfig.queries.styles;
            }

            queryDir.attr('data-styles-obj', JSON.stringify(obj.styles));

            return queryDir;
        }

        FormBuilder.prototype.CreateStatusForm = function (obj) {
            var self = this;

            var statusDir = angular.element('<syn-status-form></syn-status-form>');

            if (!obj.types) {
                obj = self.studyConfig.statusButtons;
            }

            if (!obj.styles) {
                obj.styles = self.studyConfig.statusButtons.styles;
            }

            statusDir.attr('data-status-arr', JSON.stringify(obj.types));
            statusDir.attr('data-styles-obj', JSON.stringify(obj.styles));
            statusDir.attr('data-field', self.stringForNgModel);

            return statusDir;
        }

        FormBuilder.prototype.CreateStatusField = function (obj) {
            var self = this;

            var statusDir = angular.element('<syn-status-field></syn-status-field>');

            statusDir.attr('data-field-status', self.stringForNgModel + '.status');
            statusDir.attr('data-field-queries', 'queryHash["' + self.auditString + obj.dataPoint + '"]');

            return statusDir;
        }

        return FormBuilder;


        //HELPER FUNCTIONS

        // build an object for synRadio directive, makes using ngValue easier
        function createDisplayValueArr(display, value) {

            var newArr = [];

            for (var i = 0; i < display.length; i++) {
                newArr.push({
                    display: display[i],
                    value: value[i]
                });
            }

            return newArr;
        }

        function dateDefaults(format, defaultFormat) {

            var options = {};
            options.format = format || defaultFormat;
            options.delimiter = options.format.match(/[^a-zA-Z0-9]/);

            if (!options.delimiter || (options.delimiter && options.format.split(options.delimiter[0]).length !== 3)) {
                options.format = defaultFormat;
                options.delimiter = options.format.match(/[^a-zA-Z0-9]/);
            }
            return options;

        }
        
    }]);
angular.module('app')

.value('StudyExcelSheetMap', {

    study: 'CreateStudyData',
    regions: 'CreateObjectArray',
    sites: 'CreateObjectArray',
    users: 'CreateObjectArray',
    visits: 'CreateObjectArray',
    permissions: 'CreatePermissionData',
    configuration: 'CreateConfigData'

})

.factory('FormLoaderDTO', ['LibrarianService', 'PermissionMatrixService', '$log', 'InputClassService', function (LibrarianService, PermissionMatrixService, $log, InputClassService) {

    var validFieldComponents = LibrarianService.getExcelNames('fieldDirectives'); // array of available components using the entire row.
    var validInputs = LibrarianService.getExcelNames('inputDirectives'); // array of available inputs coming from the excel sheet.
    var excelSheetTerms = LibrarianService.getExcelSheetTerms(); // object with excel sheet lingo

    var inputMap = LibrarianService.getExcelToTypeMap('inputDirectives'); // map of excel names and types the FormBuilder is expecting.
    var fieldComponentMap = LibrarianService.getExcelToTypeMap('fieldDirectives');
    var formAttributesMap = LibrarianService.getFormAttributesMap();
    
    function FormLoader() {
        this.does = 'Parses an Object created by a structured spread sheet, and returns an object that can be interpreted by the FormBuilderDTO and an array of errors';

        this.loadingErrors = [];
        this.sheetDataPoints = [];

        this.topLevelObject = {};
        this.MetaDataObject = {
            controller: "MainFormCtrl",
            template: "FormTemplates/MainForm.html",
            subFormArray: [],
            fieldsArray: [],
            calculations: []
        };
    }

    FormLoader.prototype.CreateFormMetaData = function (excelArray) {
        var self = this;

        var columnTitleObj, columnLettersArr;
        var idx = 0;
        var length = excelArray.length;
        // store the excel column letters for references to the obect
        while (idx < length || !columnTitleObj) {
            var obj = excelArray[idx++];
            
            if (!obj["A"]) continue;

            if (obj["A"] && stringCompare(obj["A"], excelSheetTerms.header)) continue;

            if (obj["A"] !== obj["A"].trim()) continue;

            // if the row isn't empty, and it doesn't contain the title key words, assume the row has the property values used by the form loader.
            columnTitleObj = obj;
            columnLettersArr = Object.keys(obj);
            break;
        }

        for (idx; idx < length; idx++) {
            var obj = {}; // map the property from the header with the row / cell value
            obj.idx = idx;

            for (var prop in excelArray[idx]) obj[columnTitleObj[prop]] = excelArray[idx][prop];
            
            var columnTitleObj, columnLettersArr;

            // if there is no type specified, ignore entire row
            if (!obj.type) continue;

            var formField = {}; // object to return if field is valid

            obj.type = obj.type.trim().toLowerCase();
                
            // check for new form, which should return new object (not implemented) 
            if (obj.type === "form") {
                if (obj.label) self.topLevelObject.displayName = obj.label; // name of the form
                if (obj.note) self.topLevelObject.order = parseString(obj.note); // order number
                if (obj.display) {
                    self.MetaDataObject[formAttributesMap[parseString(obj.display)].internalName] = true;
                    self.MetaDataObject.Type = formAttributesMap[parseString(obj.display)].formType;
                }
                continue;
            } 
            
            // check for form components that fill an entire form row, such as headings and subforms
            if (validFieldComponents.indexOf(obj.type) > -1) {
                formField = self.ParseFieldComponent(obj, idx);
                formField && self.MetaDataObject.fieldsArray.push(formField);
                // add the subForm name to the top level array, for the formTemplateService to append the subform metadata
                formField && formField.subForm && self.MetaDataObject.subFormArray.push(formField.subForm.formName);
                continue;
            }

            // check for form field inputs
            if (validInputs.indexOf(obj.type) > -1) {
                formField = self.ParseInputComponent(obj, idx);

                // new updated error object:
                if (formField.errorMessage) {
                    self.loadingErrors.push({
                        type: formField.errorMessage.error,
                        message: formField.errorMessage.message,
                        line: formField.errorMessage.row,
                        obj: obj
                    });
                    continue;
                }

                formField && self.MetaDataObject.fieldsArray.push(formField);
                continue;
            }

            // if the type is not recognized, skip this object
            self.loadingErrors.push({
                type: 'error',
                message: obj.type + ' is not a recognized type',
                line: obj.idx + 1,
                obj: obj
            });
        };

        return { metaData: self.MetaDataObject, errors: self.loadingErrors, topLevel: self.topLevelObject };
    };

    FormLoader.prototype.ParseInputComponent = function (obj, idx) {
        var self = this;

        newObj = {};

        var type = inputMap[obj.type]; // map the type to a valid Syncrony input type
        if (InputClassService.hasInputFactory(type)) {
           
            obj.dataPoints = self.sheetDataPoints; // current variable names reversed by data points on the spreadsheet

            var input = InputClassService.createInputContructor(obj, type);
            
            // there are two formatting methods, this one is only used for date objects.  move functionality over to the helper function on the INPUTDTO
            input.setValidFormatting && input.setValidFormatting();

            input.setValidConditions(self.sheetDataPoints);
            input.setValidValidations(self.sheetDataPoints);
            input.setValidCalculation && input.setValidCalculation(self.MetaDataObject.calculations, self.sheetDataPoints);

            input.removeBuildProperties();
            
            return input;// add form object to the form
        }
    };

    FormLoader.prototype.ParseFieldComponent = function (obj, idx) {
        var self = this;

        var newObj = {};

        if (obj.type === 'infobar') {
            newObj.information = {};
            newObj.information.type = fieldComponentMap[obj.type];

            if (obj.label) {
                newObj.information.heading = obj.label.trim();
            }

            if (obj.note) {
                newObj.information.subHeading = obj.note.trim();
            }

            if (obj.list) {
                newObj.information.text = obj.list.trim();
            }

            return newObj;
        }

        if (obj.type === 'subform') {
            newObj.subForm = {};
            newObj.subForm.type = fieldComponentMap[obj.type];

            if (!obj.label) {
                // if the sub form doesn't have a label, skip this object
                self.loadingErrors.push({
                    message: 'subform must have a label, referencing a form name',
                    line: idx + 2,
                    obj: obj
                });
                return newObj = null;
            }
            

            if (obj.label) {
                newObj.subForm.formName = obj.label.trim().replace(/\s/g, '_').toLowerCase();
                newObj.subForm.displayName = obj.label.trim();
                
            }

            if (obj.note) {
                newObj.subForm.instruction = obj.note.trim();
            }

            return newObj;
        }

    };

    function buildShallowObject(excelArray) {
        arrayProperties = ['dataSaveReasons'];
        objectProperties = ['sidePanel', 'statusBar'];
        booleanProperties = ['consent'];
        numberProperties = ['minAge'];
        arraryOfArrayProperties = ['idFormat'];

        var newObj = {};

        for (var i = 0; i < excelArray.length; i++) {
            var item = excelArray[i];

            if (item["A"] && stringCompare(item["A"], excelSheetTerms.header));

            if (item["A"] && item["A"] !== item["A"].trim()) continue;

            if (item["A"]) {
                var valueWithType = null;

                if (arrayProperties.indexOf(item["A"]) > -1) {
                    valueWithType = item["C"].split('|').map(function (str) { return str.trim() });
                }

                if (objectProperties.indexOf(item["A"]) > -1) {
                    valueWithType = {};
                    item["C"].split('|').map(function (str) {
                        valueWithType[str.trim()] = 1;
                        return;
                    });
                }

                if (booleanProperties.indexOf(item["A"]) > -1) { 
                    valueWithType = parseString(item["C"]);
                }

                if (numberProperties.indexOf(item["A"]) > -1) {
                    valueWithType = parseString(item["C"]);
                }

                if (arraryOfArrayProperties.indexOf(item["A"]) > -1) {
                    valueWithType = [];
                    var firstArray = item["C"].split('|');
                    firstArray.forEach(function (str) {
                        str = str.trim();
                        valueWithType.push([str]);
                    })
                }

                newObj[item["A"]] = valueWithType || item["C"] || ""; // add message for blank value
            }
        }

        var keys = Object.keys(newObj);
        if (!keys.length) newObj == null;
        return newObj;
    }

    function buildObjectFromTable(excelArray) {
        
        var newObj = {};
        var roleObject;

        var idx = 0;
        while (!roleObject && idx < excelArray.length) {
            var item = excelArray[idx];

            if (item["A"] && stringCompare(item["A"], excelSheetTerms.header));

            if (item["A"] && item["A"] !== item["A"].trim());

            if (item["A"] === "Permission / Role Name" || item["A"] === "Prop / Widget") {
                roleObject = item;
                arrayOfHeaders = Object.keys(item);
                arrayOfHeaders.shift();
                arrayOfHeaders.forEach(function (l) {
                    newObj[item[l]] = {};
                });
            }
            idx++
        }

        for (idx; idx < excelArray.length; idx++) {
            var item = excelArray[idx];

            if (roleObject) {
                var keys = Object.keys(item);
                keys.shift();

                keys.forEach(function (l) {
                    if (item[l] && item[l]) {
                        var role = roleObject[l];
                        newObj[role][item['A']] = parseString(item[l]);
                    }
                });
            }
        }

        var keys = Object.keys(newObj);
        if (!keys.length) newObj == null;
        return newObj;
    }

    function buildNestedObjectFromTable(excelArray) {

        var newObj = {};
        var roleObject;

        var idx = 0;
        while (!roleObject && idx < excelArray.length) {
            var item = excelArray[idx];

            if (item["A"] && stringCompare(item["A"], excelSheetTerms.header));

            if (item["A"] && item["A"] !== item["A"].trim());

            if (item["A"] === "Prop / Widget") {
                roleObject = item;
                arrayOfHeaders = Object.keys(item);
                arrayOfHeaders.shift();
                arrayOfHeaders.forEach(function (l) {
                    newObj[item[l]] = {};
                });
            }
            idx++
        }

        for (idx; idx < excelArray.length; idx++) {
            var item = excelArray[idx];

            if (roleObject) {
                var keys = Object.keys(item);
                keys.shift();

                keys.forEach(function (l) {
                    if (item[l] && roleObject[l]) {
                        var role = roleObject[l];
                        newObj[role][item['A']] = parseString(item[l]);
                    }
                });
            }
        }

        var keys = Object.keys(newObj);
        if (!keys.length) newObj == null;
        return newObj;
    }

    FormLoader.prototype.CreateConfigData = function (workbook) {
        var self = this;
        var configObj;

        for (var sheet in workbook.Sheets) {

            var excelArray = XLSX.utils.sheet_to_json(workbook.Sheets[sheet], { header: 'A' });
            if (sheet === 'configuration') {
                configObj = buildShallowObject(excelArray);
            }

            if (sheet === 'permissions' && configObj) {
                configObj.permissions = buildObjectFromTable(excelArray);
            }

            if (sheet === 'subject' && configObj) {
                configObj.subject = buildShallowObject(excelArray);
            }

            if (sheet === 'status' && configObj) {
                configObj.statuses = self.CreateObjectArray(excelArray);
            }

            if (sheet === 'dashboard' && configObj) {
                configObj.dashboard = buildShallowObject(excelArray);
            }

            if (sheet === 'widgets' && configObj && configObj.dashboard) {
                configObj.dashboard = buildObjectFromTable(excelArray);
            }

        }

        return configObj;
    }

    // expecting simple set keys and a single value for each.  Empty values will be saved as null.
    FormLoader.prototype.CreateStudyData = function (excelArray) {
        var self = this;

        var newObj = {};

        mainLoop:
        for (var i = 0; i < excelArray.length; i++) {
            var item = excelArray[i];

            if (item["A"] && stringCompare(item["A"], excelSheetTerms.header)) continue mainLoop;

            if (item["A"] && item["A"] !== item["A"].trim()) continue;

            if (item["A"]) {
                newObj[item["A"]] = item["C"] || ""; // add message for blank value
            }
        }

        var keys = Object.keys(newObj);
        if (!keys.length) newObj == null;
        return newObj;
    }

    // move this to a local function
    // assume the first row is a header, and use the top cell of a column as an object property name
    FormLoader.prototype.CreateObjectArray = function (excelArray) {
        var self = this;

        var newArr = [];
        var columnTitleObj, columnLettersArr;

        for (var i = 0; i < excelArray.length; i++) {
            var item = excelArray[i];

            if (!item['A']) continue; // assume if the first cell is empty, the entire row is invalid

            if (item["A"] && stringCompare(item["A"], excelSheetTerms.header)) continue;

            if (item["A"] !== item["A"].trim()) continue;

            if (!columnTitleObj) {
                columnTitleObj = item;
                columnLettersArr = Object.keys(columnTitleObj);
                continue;
            }

            var newObj = {};

            columnLettersArr.forEach(function (letter) {
                newObj[columnTitleObj[letter]] = item[letter] || null;
            });

            newArr.push(newObj);
        }

        if (!newArr.length) newArr = null;
        return newArr;
    }


    FormLoader.prototype.CreatePermissionData = function (excelArray) {
        PermissionMatrixService.hasPermission('isDev') && $log.info(excelArray);
    }

    return FormLoader;
    

    // HELPER FUNCTIONS

    function parseString(string) {

        var stringToEval = string.toLowerCase();

        try {
            eval(stringToEval);
            return eval(stringToEval);
        } catch (e) {
            return string;
        }
    }

    function stringCompare(searchString, string) {
        return searchString.substr(0, string.length) === string;
    }

}]);
angular.module('app')

.factory('InputDTO', function (LibrarianService) {

    // values supported by Syncrony, stored in arrays 
    var validHtmlInputAttributes = LibrarianService.getHtmlAttributes();
    var validInputs = LibrarianService.getExcelNames('inputDirectives');
    var validConditions = LibrarianService.getExcelNames('conditions');
    var validValidations = LibrarianService.getExcelNames('validations');

    // objects for mapping the excel key words to Form Builder properties
    var inputMap = LibrarianService.getExcelToTypeMap('inputDirectives');
    var validationMap = LibrarianService.getExcelToTypeMap('validations');
    var conditionMap = LibrarianService.getExcelToTypeMap('conditions');


    function setValidDataPoint(excelRowObj) {
        var dataPointObj = {};

        if (!excelRowObj.variable) {
            dataPointObj.error = 'error';
            dataPointObj.message = 'An input field requires a variable';
            dataPointObj.row = excelRowObj.idx + 1;
            return dataPointObj;
        }

        if (excelRowObj.dataPoints.indexOf(excelRowObj.variable) > -1) {
            dataPointObj.error = 'error';
            dataPointObj.message = 'Variable names must be unique';
            dataPointObj.row = excelRowObj.idx + 1;
            return dataPointObj;
        }

        var convertedVariable = excelRowObj.variable.replace(/\`|\~|\!|\@|\#|\$|\%|\^|\&|\*|\(|\)|\+|\=|\[|\{|\]|\}|\||\\|\'|\<|\,|\.|\>|\?|\/|\"|\;|\:|\s/g, '').toUpperCase();

        if (convertedVariable !== excelRowObj.variable) {
            dataPointObj.error = 'error';
            dataPointObj.message = 'An variable can\'t have special character or lowercase letters.  Consider using: ' + convertedVariable;
            dataPointObj.row = excelRowObj.idx + 1;
            return dataPointObj;
        }

        dataPointObj.variable = excelRowObj.variable;
        excelRowObj.dataPoints.push(dataPointObj.variable);
        return dataPointObj;
    }

    function setValidInputType(excelRowObj) {
        var inputObj = {};

        if (!excelRowObj.type) {
            inputObj.error = 'error';
            inputObj.message = 'An input field requires a input type';
            inputObj.row = excelRowObj.idx + 1;
            return inputObj;
        }

        var mappedInputType = inputMap[excelRowObj.type];

        if (!mappedInputType) {
            inputObj.error = 'error';
            inputObj.message = 'An input field requires a valid input type';
            inputObj.row = excelRowObj.idx + 1;
            return inputObj;
        }

        inputObj.type = mappedInputType;
        return inputObj;
    }

    function setValidQuestion(excelRowObj) {
        var questionObj = {};

        if (!excelRowObj.label) {
            questionObj.error = 'error';
            questionObj.message = 'An input field requires a question';
            questionObj.row = excelRowObj.idx + 1;
            return questionObj;
        }

        questionObj.label = excelRowObj.label.trim();
        if (excelRowObj.note) questionObj.note = excelRowObj.note.trim();
        if (excelRowObj.list) questionObj.list = excelRowObj.list.split('|').map(function (str) { return str.trim() });

        return questionObj;
    }

    function setValidAttributes(excelRowObj) {
        var attrOptionObj = {};
        var optionsArray = excelRowObj.options.split('|').map(function (str) { return str.trim() });

        for (var i = 0; i < optionsArray.length; i++) {
            var item = optionsArray[i]
            if (validHtmlInputAttributes.indexOf(item) === -1) {
                attrOptionObj.error = 'error';
                attrOptionObj.message = 'Invalid attribute detected';
                attrOptionObj.row = excelRowObj.idx + 1;
                return attrOptionObj;
            }

            if (!optionsArray[i + 1]) {
                attrOptionObj.error = 'error';
                attrOptionObj.message = 'Invalid attribute value detected';
                attrOptionObj.row = excelRowObj.idx + 1;
                return attrOptionObj;;
            }

            attrOptionObj[item.toLowerCase()] = parseString(optionsArray[++i]);
        }

        return attrOptionObj;
    }

    function setValidFormat(excelRowObj) {
        var formattingObj = {};

        // temporary way to pass date format. This is slightly different that other input type formatting
        if (excelRowObj.type === 'stringdate' || excelRowObj.type === 'date') {

            var delimiter = excelRowObj.format.match(/[^a-zA-Z0-9]/);

            if (!delimiter) {
                formattingObj.error = 'error';
                formattingObj.message = 'Date format requires a delimeter';
                formattingObj.row = excelRowObj.idx + 1;
                return formattingObj;
            }

            delimiter = delimiter[0];

            var formatMatcher = {
                "d": "d",
                "dd": "dd",
                "m": "M",
                "mm": "MM",
                "mmm": "MMM",
                "mmmm": "MMMM",
                "yy": "yy",
                "yyyy": "yyyy",
                "m!": "MM",
                "d!": "dd"
            };

            var formatArray = excelRowObj.format.split(delimiter);

            for (var i in formatArray) {

                var str = formatArray[i];

                if (!formatMatcher[str]) {
                    formattingObj.error = 'error';
                    formattingObj.message = 'Syncrony can\'t parse this date format: ' + str;
                    formattingObj.row = excelRowObj.idx + 1;
                    return formattingObj;
                }
            }

            return excelRowObj.format;
        }

        var formatArray = excelRowObj.format.split('|').map(function (str) { return str.trim() });
        var formattingTypes = LibrarianService.getInputChildObject(excelRowObj.type, 'format');

        for (var i = 0; i < formatArray.length; i++) {
            var item = formatArray[i].toLowerCase();

            if (!formattingTypes[item]) {
                formattingObj.error = 'error';
                formattingObj.message = 'Invalid format type detected';
                formattingObj.row = excelRowObj.idx + 1;
                return formattingObj;
            }

            if (!formatArray[i + 1]) {
                formattingObj.error = 'error';
                formattingObj.message = 'Invalid format value detected';
                formattingObj.row = excelRowObj.idx + 1;
                return formattingObj;;
            }

            formattingObj[item] = parseString(formatArray[++i]);
        }

        return formattingObj;
    }

    function setValidActions(excelRowObj) {
        var actionArr = [];
        var actionsArray = excelRowObj.actions.split(' | ');


        for (var i in actionsArray) {

            var actionString = actionsArray[i];

            var formula = actionString.substring(actionString.indexOf("[") + 1, actionString.indexOf("]")).trim();
            var actions = actionString.substring(actionString.lastIndexOf("{") + 1, actionString.lastIndexOf("}")).trim();

            var expressionArr = formula.split(' ');
            var dependents = [];

            for (var i in expressionArr) {
                var str = expressionArr[i];

                if (excelRowObj.dataPoints.indexOf(str) > -1 && dependents.indexOf(str) === -1) {
                    dependents.push(str);
                    continue;
                }

                // check for nested data point in a checkbox data point.
                var baseStr = str.split('.')[0];
                if (excelRowObj.dataPoints.indexOf(baseStr) > -1 && dependents.indexOf(str) === -1) {
                    dependents.push(str);
                    continue;
                }
            }

            var newActionObj = {
                dependents: dependents,
                formula: formula,
                actions: actions
            }

            actionArr.push(newActionObj);
        }

        return actionArr;
    }

    function Input(obj) {
        var self = this;

        // valid data-point and set the datapoint property
        var dataPointResult = setValidDataPoint(obj);

        if (dataPointResult.error) {
            self.errorMessage = dataPointResult;
            return;
        }

        self.dataPoint = dataPointResult.variable;

        // valid input type and set the input object
        var inputTypeResult = setValidInputType(obj);

        if (inputTypeResult.error) {
            self.errorMessage = inputTypeResult;
            return;
        }

        self.input = inputTypeResult;

        // valid question and set question object
        var questionResult = setValidQuestion(obj);

        if (questionResult.error) {
            self.errorMessage = questionResult;
            return;
        }

        self.question = questionResult;

        // valid HTML attributes and set the option object as a property on the input object
        if (obj.options) {
            var attrOptionsResult = setValidAttributes(obj);

            if (attrOptionsResult.error) {
                self.errorMessage = attrOptionsResult;
                return;
            }

            self.input.options = attrOptionsResult;
        }

        if (obj.format) {
            var formatResult = setValidFormat(obj);

            if (formatResult.error) {
                self.errorMessage = formatResult;
                return;
            }

            self.input.format = formatResult;
        }

        if (obj.actions) {
            var actionsResult = setValidActions(obj);

            if (actionsResult.error) {
                self.errorMessage = actionsResult;
            }

            self.actions = actionsResult;
        }



        // refactor to interperate different formatting key / values 
        //if (self.input.type === 'date' && obj.format) {
        //    self.input.dateFormat = obj.format;
        //}

        // if (obj.format) self.input.format = obj.format;

        if (obj.conditions) self.arrayOfConditions = obj.conditions.split('|').map(function (str) { return str.trim() });
        if (obj['edit checks']) self.arrayOfValidations = obj['edit checks'].split('|').map(function (str) { return str.trim() });
    }

    Input.prototype.setValidConditions = function (sheetDataPoints) {
        var self = this;

        if (!self.arrayOfConditions) return;

        var conditions = [];
        var newCondition = {};

        for (var i = 0; i <= self.arrayOfConditions.length; i++) {

            if (i === self.arrayOfConditions.length) {
                if (newCondition.requirement) {
                    conditions.push(newCondition);
                    self.conditions = angular.copy(conditions);
                    delete self.arrayOfConditions;
                    return;
                }

                self.errorMessages.push({
                    message: 'There was a problem parsing the conditions'
                });
                return;
            }

            var item = self.arrayOfConditions[i];

            if (validConditions.indexOf(item) > -1) {

                newCondition.requirement && newCondition.dependants.length && conditions.push(newCondition);

                newCondition = {
                    requirement: conditionMap[item],
                    dependants: []
                }
                continue;
            }

            if (item[0] === "(" && item[item.length - 1] === ")") {
                var optionalValue = item.match(/\((.*?)\)/)[1];

                // first check for a requirement before adding an optional value
                if (!newCondition.requirement) {
                    self.errorMessages.push({
                        message: 'There is no condition to set the optional value: ' + optionalValue
                    });
                    continue;
                }

                newCondition.optionalValue = parseString(optionalValue);
                continue;
            }

            // first check for a requirement before adding a dependent datapoint value
            if (!newCondition.requirement) {
                self.errorMessages.push({
                    message: 'Could not set condition with value: ' + item
                });
                continue;
            }

            // split the datapoint to the top level, if it has a sub-object from a checkbox
            //var sliceIdx = item.indexOf('.') > -1 ? item.indexOf('.') : item.length;
            //var dataPointNoSubObject = item.slice(0, sliceIdx);

            //if (sheetDataPoints.indexOf(dataPointNoSubObject) === -1) {
            //    // if this data-point hasn't been regestered, skip this condition
            //    self.errorMessages.push({
            //        message: item + ' is not a valid data-point to set a condition'
            //    });
            //    newCondition = {};
            //    continue;
            //}

            if (!newCondition.dependants) {
                // if there is no dependants array, the condition hasn't been properly set, skip this condition
                self.errorMessages.push({
                    message: 'Could not set dependent ' + item + ' without a valid condition'
                });
                newCondition = {};
                continue;
            }

            newCondition.dependants.push(item);
            continue;

            // if there isn't a requirement, parameter, of exisiting datapoint, skip this object
            self.errorMessages.push({
                message: 'Error attempting to parse conditions'
            });
        }
    };

    Input.prototype.setValidValidations = function () {
        var self = this;

        if (!self.arrayOfValidations) return;

        var validation = {
            validations: []
        };

        var newValidation = {};

        for (var i = 0; i <= self.arrayOfValidations.length; i++) {
            var item = self.arrayOfValidations[i];

            if (i === self.arrayOfValidations.length) {
                if (newValidation.type) {
                    validation.validations.push(newValidation);
                    self.validation = angular.copy(validation); // add the validation object to the input
                    delete self.arrayOfValidations;
                    return;
                }

                self.errorMessages.push({
                    message: 'Could not interpret the type of validation correctly'
                });
                return;
            }

            if (validValidations.indexOf(item) > -1) {
                newValidation.type && validation.validations.push(newValidation);
                newValidation = {
                    type: validationMap[item] // map the excel name to the form builder type
                }
                continue;
            }

            if (item[0] === "(" && item[item.length - 1] === ")") {

                var optionalValue = item.match(/\((.*?)\)/)[1];
                var optionalValue = parseString(optionalValue);

                if (!newValidation.type) {
                    // optional value can't be set without a validation type
                    self.errorMessages.push({
                        message: 'Could not set: ' + optionalValue + ' without a type of validation'
                    });
                    continue;
                }

                if (angular.isString(optionalValue)) {
                    newValidation.compareDataPoint = optionalValue;
                }

                if (angular.isNumber(optionalValue)) {
                    newValidation.compareVal = optionalValue;
                }

                continue;
            }

            var valueForMessageOrIntensity = parseString(item);

            if (!newValidation.type) {
                // message or intensity can't be set without a validation type
                self.errorMessages.push({
                    message: 'Could not set: ' + valueForMessageOrIntensity + ' without a type of validation'
                });
                continue;
            }

            if (angular.isNumber(valueForMessageOrIntensity)) {
                newValidation.intensity = valueForMessageOrIntensity
                continue;
            }

            if (angular.isString(valueForMessageOrIntensity)) {
                newValidation.message = valueForMessageOrIntensity;
                continue;
            }
        }
    }

    Input.prototype.extendAndReturnErrors = function (obj) {
        var self = this;

        if (self.errorMessages.length) {
            self.errorMessages.forEach(function (message) {
                message.obj = obj;
                message.line = obj.idx + 1;
            });
        }
        return self.errorMessages;
    }

    Input.prototype.removeBuildProperties = function () {
        var self = this;
        var buildProperties = ['calculation', 'errorMessages', 'dataPoints'];

        buildProperties.forEach(function (property) {
            if (self[property]) delete self[property];
        });
    }

    return Input;
})

.factory('SelectorDTO', ['InputDTO', function (InputDTO) {

    function setValidSelection(excelRowObj) {
        var selectionObj = {};

        if (excelRowObj.display) var display = excelRowObj.display.split('|').map(function (str) { return str.trim() });
        if (excelRowObj.value) var value = excelRowObj.value.split('|').map(function (str) { return str.trim() });

        if (value && !display) {
            selectionObj.error = 'error';
            selectionObj.message = 'An input must have "display" before assigning "value"';
            selectionObj.row = excelRowObj.idx + 1;
            return selectionObj;
        }

        if ((display && value) && (display.length !== value.length)) {
            selectionObj.error = 'error';
            selectionObj.message = '"display" and "value" must have the same number of items';
            selectionObj.row = excelRowObj.idx + 1;
            return selectionObj;
        }

        return {
            display: display,
            value: value
        }
    }

    function Selector(obj) {
        angular.extend(Selector.prototype, InputDTO.prototype);
        var self = this;
        var input = new InputDTO(obj);
        angular.merge(self, input);

        if (self.errorMessage) return;

        // valid display and value array and set on the input object
        if (obj.display || obj.value) {
            var selectionResult = setValidSelection(obj);
            if (selectionResult.error) {
                self.errorMessage = selectionResult;
                return;
            }

            angular.merge(self.input, selectionResult);
        }

    }

    return Selector;
}])


.factory('CheckboxSelectorDTO', ['SelectorDTO', 'InputDTO', function (SelectorDTO, InputDTO) {

    function CheckboxSelector(obj) {

        var prototype = angular.copy(CheckboxSelector.prototype); // save a copy of the prototype so it doesn't get overwritten
        angular.extend(CheckboxSelector.prototype, InputDTO.prototype, SelectorDTO.prototype, prototype); // extend the prototype with parent methods

        var self = this;
        var selector = new SelectorDTO(obj);

        angular.merge(self, selector); // extend the instance variable with parent properties and values

        if (self.errorMessage) return;

        for (var i in self.input.value) {
            var convertedVariable = self.input.value[i].replace(/\`|\~|\!|\@|\#|\$|\%|\^|\&|\*|\(|\)|\+|\=|\[|\{|\]|\}|\||\\|\'|\<|\,|\.|\>|\?|\/|\"|\;|\:|\s/g, '');
            if (convertedVariable !== self.input.value[i]) {
                self.errorMessage.error = 'error';
                self.errorMessage.message = 'An variable can\'t have special character or lowercase letters.  Consider using: ' + convertedVariable;
                self.errorMessage.row = excelRowObj.idx + 1;
                return;
            }
        }
    }

    return CheckboxSelector;
}])

.factory('MultiSelectorDTO', ['InputDTO', function (InputDTO) {

    function setValidSelection(excelRowObj) {
        var selectionObj = {};

        if (excelRowObj.display) var display = excelRowObj.display.split('|').map(function (str) { return str.trim() });

        if (!display) {
            selectionObj.error = 'error';
            selectionObj.message = 'An multiselect dropdown must have list of "display" items';
            selectionObj.row = excelRowObj.idx + 1;
            return selectionObj;
        }

        selectionObj.display = display;
        return selectionObj;
    }

    function MultiSelector(obj) {
        angular.extend(MultiSelector.prototype, InputDTO.prototype);

        var input = new InputDTO(obj);
        var self = this;

        angular.extend(self, input);

        if (self.errorMessage) return;

        var selectionResult = setValidSelection(obj);
        if (selectionResult.error) {
            self.errorMessage = selectionResult;
            return;
        }

        angular.merge(self.input, selectionResult);
    }

    return MultiSelector;
}])

.factory('UnitMeasureDTO', ['CONVERSION', 'SelectorDTO', 'InputDTO', function (CONVERSION, SelectorDTO, InputDTO) {

    function setValidSelection(excelRowObj) {
        var selectionObj = {};

        if (excelRowObj.display) var display = excelRowObj.display.split('|').map(function (str) { return str.trim() });
        // if (excelRowObj.value) var value = excelRowObj.value.split('|').map(function (str) { return str.trim() });

        if (!display) {
            selectionObj.error = 'error';
            selectionObj.message = 'An unit-measure must have a list of "display" items';
            selectionObj.row = excelRowObj.idx + 1;
            return selectionObj;
        }

        var defaultUnit = excelRowObj.value ? excelRowObj.value : display[0];
        var validUnits = Object.keys(CONVERSION);

        if (validUnits.indexOf(defaultUnit) === -1) {
            selectionObj.error = 'error';
            selectionObj.message = defaultUnit + ' is not a unit of measurement "unit-measure" can save';
            selectionObj.row = excelRowObj.idx + 1;
            return selectionObj;
        }

        var convertUnits = Object.keys(CONVERSION[defaultUnit]);

        for (var i = 0; i < display.length; i++) {
            var unit = display[i];

            if (convertUnits.indexOf(unit) === -1) {
                selectionObj.error = 'error';
                selectionObj.message = '"unit-measure" cannot convert ' + unit + ' to ' + defaultUnit;
                selectionObj.row = excelRowObj.idx + 1;
                return selectionObj;
            }
        }

        selectionObj.display = display;
        selectionObj.value = defaultUnit;
        return selectionObj;
    }

    function UnitMeasure(obj) {
        var prototype = UnitMeasure.prototype;
        angular.extend(UnitMeasure.prototype, InputDTO.prototype, prototype);
        var self = this;
        var input = new InputDTO(obj);
        angular.extend(self, input);

        if (self.errorMessage) return;

        var selectionResult = setValidSelection(obj);

        if (selectionResult.error) {
            self.errorMessage = selectionResult;
            return;
        }

        angular.merge(self.input, selectionResult);
    }

    return UnitMeasure;
}])

.factory('TextDTO', ['LibrarianService', 'InputDTO', function (LibrarianService, InputDTO) {

    var validCalculations = LibrarianService.getExcelNames('calculations');
    var calculationMap = LibrarianService.getExcelToTypeMap('calculations');

    function Text(obj) {
        angular.extend(Text.prototype, InputDTO.prototype);
        var self = this;
        var input = new InputDTO(obj);
        angular.extend(self, input);

        if (self.errorMessage) return;

        if (obj.calculation) self.calculation = obj.calculation;
    }

    Text.prototype.setValidCalculation = function (metaDataCalcArray, sheetDataPoints) {
        var self = this;

        if (!self.calculation) return;

        // Array of string values, correlating to an operation or an operand 
        var arrayOfCalcs = self.calculation.split('|').map(function (str) { return str.trim() });

        var newCalc = {};

        for (var i = 0; i <= arrayOfCalcs.length; i++) {
            var item = arrayOfCalcs[i];

            if (i === arrayOfCalcs.length && newCalc) {
                if (newCalc.operation && newCalc.operands.length) {
                    metaDataCalcArray.push(newCalc);
                    delete self.calculation;
                    return;
                }

                // if there isn't an operation or operands, skip this object
                self.errorMessages.push({
                    type: 'message',
                    message: 'Calculation has an unrecognized operation or variable name'
                });
                return
            }

            if (validCalculations.indexOf(item.toLowerCase()) > -1) {
                // if the current iteration finds a new operation, push a valid newCalc object into the calculation array
                newCalc.operation && newCalc.operands.length && metaDataCalcArray.push(newCalc);

                newCalc = {};
                newCalc.resultant = self.dataPoint;
                newCalc.operation = calculationMap[item.toLowerCase()],
                newCalc.operands = [];
                continue;
            }

            if (newCalc.operands && sheetDataPoints.indexOf(item) > -1) {
                newCalc.operands.push(item);
                continue;
            }

            // if there isn't an operation or operands, skip this object
            self.errorMessages.push({
                type: 'message',
                message: 'Calculation has an unrecognized operation or variable name'
            });
            break;
        }
    }

    return Text;
}])

.factory('VasDTO', ['LibrarianService', 'InputDTO', function (LibrarianService, InputDTO) {

    var validCalculations = LibrarianService.getExcelNames('calculations');
    var calculationMap = LibrarianService.getExcelToTypeMap('calculations');

    function Vas(obj) {
        angular.extend(Vas.prototype, InputDTO.prototype);
        var self = this;
        var input = new InputDTO(obj);
        angular.extend(self, input);

        if (obj.calculation) self.calculation = obj.calculation;
    }

    // add validations here
    //Vas.prototype.setValidCalculation = function (metaDataCalcArray, sheetDataPoints) { };

    return Vas;
}])

.service('InputClassService', ['CheckboxSelectorDTO', 'InputDTO', 'MultiSelectorDTO', 'SelectorDTO', 'TextDTO', 'UnitMeasureDTO', 'VasDTO', function (CheckboxSelectorDTO, InputDTO, MultiSelectorDTO, SelectorDTO, TextDTO, UnitMeasureDTO, VasDTO) {
    var srv = this;

    // map of the available input type and the factory it uses as a constructor
    var factories = {
        time: InputDTO,
        date: InputDTO,
        stringdate: InputDTO,
        toggle: InputDTO,
        radio: SelectorDTO,
        dropdown: SelectorDTO,
        checkboxdepreciated: CheckboxSelectorDTO,
        multidropdown: MultiSelectorDTO,
        unitMeasure: UnitMeasureDTO,
        number: TextDTO,
        readonly: TextDTO,
        text: TextDTO,
        textarea: TextDTO,
        visualAnalogScale: VasDTO
    }

    srv.hasInputFactory = function (inputType) {
        return !!factories[inputType];
    }

    srv.createInputContructor = function (obj, type) {
        type = type || obj.type;

        if (factories[type]) {
            return new factories[type](obj);
        }
        return;
    }

}]);

// FILE HELPER FUNCTIONS

function parseString(string) {

    var stringToEval = string.toLowerCase();

    try {
        eval(stringToEval);
        return eval(stringToEval);
    } catch (e) {
        return string;
    }
}
angular.module('app')
    // map the user input to the AbacusDTO methods
    .value('operationMap', {
        add: 'addNumbers',
        multiply: 'multiplyNumbers',
        average: 'findAverage',
        divide: 'divideNumbers',
        bmi: 'calcBmi',
        evaluate: 'evaluteExpression'
    })

    .factory('CalculationBuilderDTO', function (AbacusDTO, operationMap) {

        var Abacus = new AbacusDTO;

        function CalculationBuilder() {
            this.does = 'Sets calculations on the current form';
            
        }

        CalculationBuilder.prototype.Build = function (calculationMetaData, scope) {
            var self = this;

            angular.forEach(calculationMetaData.calculations, function (calculationObj) {

                var datapoints = calculationObj.operands.map(function (property) {
                    return calculationMetaData.formObjectName + '.' + property + '.value';
                });

                scope.$watchGroup(datapoints, function (newVal) {
                    // check to see if the values need to be converted before the calculation
                    var operandsArr = setOperandsArray(calculationObj, newVal);
                    Abacus[operationMap[calculationObj.operation]](operandsArr, calculationMetaData.formObject[calculationObj.resultant]);
                });

            });
        }

        return CalculationBuilder;

        // HELPER FUNCTIONS

        function setOperandsArray(calculationObj, newValArr) {

            if (calculationObj.operation === 'bmi') {
                newValArr[0] = calculationMetaData.formObject[calculationObj.operands[0] + '_MEASURE'].value;
                newValArr[2] = calculationMetaData.formObject[calculationObj.operands[0] + '_UNIT'].value;
                newValArr[1] = calculationMetaData.formObject[calculationObj.operands[1] + '_MEASURE'].value;
                newValArr[3] = calculationMetaData.formObject[calculationObj.operands[1] + '_UNIT'].value;
            }

            return newValArr;
        }

    });
angular.module('app')

    .factory('FormHelperDTO', ['$rootScope', 'FormService', 'StatusService', 'QueryService', 'AuditService', 'toaster', 'sxHelpers', '$log', 'FormTemplateService', 'FormDataTransitService', function ($rootScope, FormService, StatusService, QueryService, AuditService, toaster, sxHelpers, $log, FormTemplateService, FormDataTransitService) {

        function FormHelper() {
            this.does = 'load and save forms via the FormService with the current scope and stateParams reference number.';
        }
        

        FormHelper.prototype.loadQueries = function (scope, uniqueId) {
            if (!uniqueId) uniqueId = scope.Form._id;
            var promise = QueryService.LoadQueriesByForm(uniqueId)
                        .then(function success(response) {
                            scope.formQueries = response;

                            // put the queries in a hash to make them easily accessible
                            scope.queryHash = {};
                            scope.formQueries.forEach(function (query) {
                                if (!scope.queryHash[query.FullPath]) scope.queryHash[query.FullPath] = [];
                                scope.queryHash[query.FullPath].push(query);
                            });

                        }, function fail(response) {
                            $log.error('There was an error getting the queries');
                        });
            return promise;
        }

        FormHelper.prototype.loadForm = function (scope, stateParamsRefnum) {
            var self = this;
            var promise = FormService.LoadSubjectForm(stateParamsRefnum, scope.formId).then(function success(response) {
                scope.Form = response;

                if (scope.Form == null) {
                    scope.noFormSaved = true;
                    scope.Form = {
                        SubjectId: stateParamsRefnum,
                        Name: scope.formName,
                        FormTypeId: scope.formId,
                        isEPro: scope.isEPro,
                        FormData: {}
                    }
                }
                if (scope.Form._id != undefined) {
                    self.loadQueries(scope);
                    AuditService.loadFormAuditTrail(scope.Form._id);
                    scope.topUniqueId = scope.Form._id;
                    scope.uniqueId = scope.Form._id;
                }
                scope.Form.statusChange = false;
            },

        function fail(response) {
            $log.error(response);
        });

            return promise;
        };
        
        // isRepeating = true if the form to be saved is a follow up form
        FormHelper.prototype.saveForm = function (scope, isRepeating, metadata, complete) {
            return new Promise(function (resolve, reject) {
                var localForm;

                if (scope.noFormSaved) {
                    for (var i = 0; i < document.forms.length; i++) {
                        if (document.forms[i].id == "") {
                            localForm = document.forms[i];
                        }
                    }
                } else {
                    localForm = document.getElementById(scope.Form._id);
                }
                // FormService.NullHidden(localForm); // sets all the hidden values on the form to null

                resolve();

            }).then(function () {
                // refactored scope[scope.formName] to scope.formCtrl - CM
                FormService.SaveForm(scope.Form, scope.formCtrl, metadata, complete).then(function success(response) {
                    // Alert User Success
                    var successString = scope.displayName + ' Saved';
                    toaster.pop('Success', successString);
                    scope.noFormSaved = false;

                    // Make a deep copy of the saved version but keep the object references on all sub forms
                    sxHelpers.deepCopy(scope.Form, response.data);

                    AuditService.loadFormAuditTrail(scope.Form._id);
                    scope.formCtrl && scope.formCtrl.$setPristine();

                    // update the form in the FormDataTransitService and the class in the form tab list.
                    FormTemplateService.addClassToFormListObject(scope.Form.Name);
                    $rootScope.$broadcast('update-form-navigation-list');
                    FormDataTransitService.removeFormObject(scope.Form.Name);
                    // FormDataTransitService.setFormObject(scope.Form); // this has to change to remove the form from the service
                    if (scope.statusChange) scope.statusChange = false;

                }, function errorCallback(response) {
                    toaster.pop('Error', response);
                });
            });
        }

        FormHelper.prototype.setFormStatus = function () {
            StatusService.saveStatus(form);
        }

        FormHelper.prototype.setDefaultValues = function (formData, variables, values) {
            for (var i = 0; i < variables.length; i++) {
                if (!formData[variables[i]] || formData[variables[i]].value == null) {
                    formData[variables[i]] = {
                        value: values[i]
                    }
                }
            }
        }

        FormHelper.prototype.addNestedForm = function (formData, nestedFormName, keyValuePair) {
            //nestedFormName will be the name of the array for the nestedForm
            var randomGUID = sxHelpers.generateGUID();

            var nestedForm = {
                Id: randomGUID
            }

            if (keyValuePair) {
                for (var key in keyValuePair) {
                    if (!keyValuePair.hasOwnProperty(key)) {
                        continue;
                    }
                    if (keyValuePair[key].constructor === Array) {
                        nestedForm[key] = keyValuePair[key];
                    }
                    else {
                        nestedForm[key] = {
                            value: keyValuePair[key]
                        }
                    }
                }
            }

            if (formData[nestedFormName] == undefined) {
                formData[nestedFormName] = [];
            }

            formData[nestedFormName].push(nestedForm)
        }

        FormHelper.prototype.loadMultipleForms = function (scope, stateParamsRefnum, forms) {
            var self = this;
            if (!forms) forms = "Forms";
            var promise = FormService.LoadMultipleSubjectForms(stateParamsRefnum, scope.formId).then(function success(response) {
                scope[forms] = response;
            },

        function fail(response) {
            $log.error(response);
        });

            return promise;
        }

        FormHelper.prototype.addTopLevelForm = function (scope, refnum, keyValuePair, forms) {
            if (!forms) forms = "Forms";

            var defaultFormData = {};

            if (keyValuePair) {
                for (var key in keyValuePair) {
                    if (!keyValuePair.hasOwnProperty(key)) {
                        continue;
                    }
                    if (keyValuePair[key].constructor === Array) {
                        defaultFormData[key] = keyValuePair[key];
                    }
                    else {
                        defaultFormData[key] = {
                            value: keyValuePair[key]
                        }
                    }
                }
            }

            scope[forms].push({
                SubjectId: refnum,
                Name: scope.formName,
                noFormSaved: true,
                FormTypeId: scope.formId,
                FormData: defaultFormData
            })
            scope.selectedForm = scope[forms][scope[forms].length - 1];
        }



        return FormHelper;
    }]);
angular.module('app')
    .factory('FormSaveHelperDTO', ['$localstorage', '$rootScope', '$state', 'FormDataTransitService', 'FormTemplateService', 'jwtHelper', 'StatusService', 'sxHelpers', 'toaster', '$q',
        function ($localstorage, $rootScope, $state, FormDataTransitService, FormTemplateService, jwtHelper, StatusService, sxHelpers, toaster, $q) {

        function FormSaveHelper(form, formCtrl, displayName, signatureRequired) {
            this.form = form;
            this.form.signatureRequired = signatureRequired;
            this.formCtrl = formCtrl;
            this.displayName = displayName;
        }

        FormSaveHelper.prototype.submitForm = function () {
            var self = this;
            var deferred = $q.defer();

            StatusService.saveStatus(self.form).then(function success(response) {
                toaster.pop('Success', self.displayName + ' Saved');
                angular.copy(response, self.form);
                self.formCtrl && self.formCtrl.$setPristine();
                self.form.statusChange = false;
                deferred.resolve(response);
            }, function error(response) {
                toaster.pop('warning', response);
                deferred.reject(response);
            });

            return deferred.promise;
        }

        FormSaveHelper.prototype.verifyUserBeforeSave = function (callback) {
            var self = this;
        
            var token = $localstorage.get('token');
            var isSignedOut = jwtHelper.isTokenExpired(token, 300); // check if token expire in 5 minutes

            if (!isSignedOut) return callback(self.form);

            $rootScope.loginModalPromise().result.then(function close(params) {

                if (params.$value) {

                    self.formCtrl.$dirty = false;
                    FormTemplateService.clearAllClasses();
                    FormDataTransitService.initServiceVariables();

                    $rootScope.$broadcast('user-changed');
                    return $state.go('home');
                }

            }, function dismiss(params) {

                if (params.$value === 'continue-session') return callback(self.form);

            }).finally(function () {
                $rootScope.loginIsOpened = false;
            });

        }

        return FormSaveHelper;

}]);
angular.module('app')

    .factory('PassiveControlDTO', ['FormService', '$state', '$rootScope', 'SubjectService', 'AuditService', '$transitions', function (FormService, $state, $rootScope, SubjectService, AuditService, $transitions) {

        function PassiveControl() {
            this.does = 'loads functionality into the controller for continuous, passive use'
        }

        PassiveControl.prototype.alertOnChange = function (scope) {
            $transitions.onBefore({}, function (trans) {
                if ($rootScope.previousUser !== $rootScope.username) {
                    return FormService.FormSwitchCheck(false, trans);
                } else if (scope.formCtrl) {
                    return FormService.FormSwitchCheck(scope.formCtrl.$dirty, trans);
                }
            });
        }

        PassiveControl.prototype.generateFieldError = function (scope) {
            //error messaging
            scope.getFieldErrorString = function (fieldName) {
                return scope[scope.formName][fieldName].$error
            };
        }

        PassiveControl.prototype.getFieldValidity = function (scope) {
            scope.isInvalidField = function (fieldName) {
                return scope[scope.formName][fieldName].$invalid
            }
        }

        PassiveControl.prototype.getStateName = function (scope) {
            scope.currentState = $state.current.name;
        }

        PassiveControl.prototype.getPermission = function (scope) {
            scope.Permission = $rootScope.Permission;
        }

        PassiveControl.prototype.getSelectedSubject = function (scope) {
            scope.subject = SubjectService.GetSubjectById();
        }

        //adds methods and variables to top-level non-repeating form controllers
        PassiveControl.prototype.setFunctions = function (scope) {
            var self = this;
            self.alertOnChange(scope);
            self.generateFieldError(scope);
            self.getFieldValidity(scope);
            self.getStateName(scope);
        }

        //adds methods and variables to nested repeating form controllers
        PassiveControl.prototype.setNestedFunctions = function (scope) {
            var self = this;
            self.getPermission(scope);
            self.getStateName(scope);
            self.generateFieldError(scope);
            self.getSelectedSubject(scope);
        }

        //adds methods and variables to top-level repeating form controllers
        PassiveControl.prototype.setTopRepeatingFunctions = function (scope) {
            var self = this;
            self.getPermission(scope);
            self.getSelectedSubject(scope);
            self.generateFieldError(scope);
            self.alertOnChange(scope);
        }

        PassiveControl.prototype.setParentRepeatingFunctions = function (scope) {

            scope.isSelectedForm = function (form) {
                return scope.selectedForm == form;
            }

            scope.selectForm = function (form) {
                scope.selectedForm = form;
                AuditService.loadFormAuditTrail(scope.selectedForm._id);
            };
        }

        return PassiveControl;

    }]);
angular.module('app')

    .factory('FieldDirectiveHelperDTO', ['$log', '$timeout', 'FORM_FIELD_CONSTANTS', function ($log, $timeout, FORM_FIELD_CONSTANTS) {

        function FieldDirectiveHelper() {
            this.does = "Provides helper functions for the input and other directives making up a complete field in a form";

        }

        // set classes on the directive template elements using the querySelectorAll method
        FieldDirectiveHelper.prototype.SetClasses = function (styleObject, dirElement) {
            if (!styleObject) {
                return;
            }

            $timeout(function () {
                selectors = Object.keys(styleObject);
                selectors.forEach(function (selector) {
                    var selectedElements = angular.element(dirElement[0].querySelectorAll(selector));
                    if (selectedElements) {
                        for (var i = 0; i < selectedElements.length; i++) {
                            angular.element(selectedElements[i]).addClass(styleObject[selector].join(' '));
                        }
                    } else {
                        $log.warn('could not find element by selector: ' + selector);
                    }

                });
            }, 0);
            
        }

        // set attributes on the directive template input element using the querySelectorAll method
        FieldDirectiveHelper.prototype.SetAttributes = function (attributesObject, dirElement) {
            if (!attributesObject) {
                return;
            }

            $timeout(function () {
                var attributes = Object.keys(attributesObject);
                var inputElements = angular.element(dirElement[0].querySelectorAll('input, textarea'));

                attributes.forEach(function (attribute) {
                    if (inputElements) {
                        for (var i = 0; i < inputElements.length; i++) {
                            angular.element(inputElements[i]).attr(attribute, attributesObject[attribute]);
                        }
                    } else {
                        $log.warn('could not find the input element');
                    }
                });
            }, 0);

        }

        // used in stringDate directive to create new datapoint with a valid date value when entered in correctly
        FieldDirectiveHelper.prototype.SetValidDate = function (date, newVariable, format, newVariableName) {
            var day, month, year, monthInt, delimiter, dateObject;
            var inputDelimiter = format.match(/[^a-zA-Z0-9]/);
            var formatDelimiter = date.match(/[^a-zA-Z0-9]/);

            //look into checks for delimiters with multiple characters
            if (inputDelimiter && formatDelimiter) {
                delimiter = formatDelimiter[0];
            } else {
                clearNewVariable(newVariable);
                return false;
            }

            var dateFormatArray = format.toLowerCase().split(delimiter);
            var stringDateArray = date.toLowerCase().split(delimiter);

            //if (newVariable.value) {
            //    newVariable.value = null;
            //}

            //if (date === null || date === "") {
            //    return;
            //}

            if (stringDateArray.length !== 3 || dateFormatArray.length !== 3) {
                clearNewVariable(newVariable);
                return false;
            }

            for (i = 0; i < dateFormatArray.length; i++) {
                var formatElement = dateFormatArray[i];
                var dateElement = stringDateArray[i];
                var regExp = FORM_FIELD_CONSTANTS.DATE_REGEX_LOOKUP[formatElement];
                if (!regExp instanceof RegExp) {
                    clearNewVariable(newVariable);
                    return false;
                }

                if (!dateElement.match(regExp)) {
                    clearNewVariable(newVariable);
                    return false;
                }

                switch (formatElement[0]) {
                    case "d":
                        day = dateElement;
                        break;
                    case "m":
                        //can take in number or string values for month
                        month = dateElement;
                        monthInt = +month;
                        break;
                    case "y":
                        year = dateElement;
                        break;
                }
            }

            //checks if month is an integer or month string value to assign JS month value
            if (isNaN(monthInt)) {
                monthInt = FORM_FIELD_CONSTANTS.MONTH_LOOKUP[month];
            } else {
                monthInt = +month - 1;
            }

            if (day && month && year) {
                dateObject = new Date([month, day, year].join("/"));
                if ((dateObject.getFullYear() == year || dateObject.getYear() == year || dateObject.getYear() == +year + 100) && dateObject.getDate() == day && dateObject.getMonth() === monthInt) {

                    if (new Date(newVariable.value).getTime() !== dateObject.getTime()) {
                        newVariable.value = dateObject;
                        $log.info("Successfully set " + newVariableName.toUpperCase() + " datapoint:", newVariable.value);
                    }
                    return true;
                }
            }
            clearNewVariable(newVariable);
            return false;
        };


        FieldDirectiveHelper.prototype.SetUnknownDate = function (dateOptions, format, delimiter) {
            var formatArray = format.split(delimiter);
            var dateArray = [];
            formatArray.forEach(function (formatEl) {
                var dateEl = formatEl[0].toLowerCase();
                dateArray.push(dateOptions[dateEl]);
            });

            return dateArray.join(delimiter);
        }

        FieldDirectiveHelper.prototype.SetDateOptions = function (format, defaultFormat) {
            var formatMatcher = {
                "d": "d",
                "dd": "dd",
                "m": "M",
                "mm": "MM",
                "mmm": "MMM",
                "mmmm": "MMMM",
                "yy": "yy",
                "yyyy": "yyyy",
                "m!": "MM",
                "d!": "dd"
            };

            var options = {};

            options.format = format || defaultFormat;
            options.delimiter = options.format.match(/[^a-zA-Z0-9]/);

            if (!options.delimiter || (options.delimiter && options.format.split(options.delimiter[0]).length !== 3)) {
                options.format = defaultFormat;
                options.delimiter = options.format.match(/[^a-zA-Z0-9]/)[0];
            }


            var splitFormat = options.format.split(options.delimiter);
            var displayFormatArray = [];

            for (i = 0; i < splitFormat.length; i++) {

                if (!formatMatcher[splitFormat[i]]) {
                    options.format = defaultFormat;
                    options.delimiter = options.format.match(/[^a-zA-Z0-9]/)[0];
                    splitFormat = options.format.split(options.delimiter);
                    var displayFormat = splitFormat.map(function (el) {
                        return formatMatcher[el];
                    }).join(options.delimiter);
                    break;
                }

                displayFormatArray.push(formatMatcher[splitFormat[i]]);
            }

            options.displayFormat = displayFormat || displayFormatArray.join(options.delimiter);
            return options;

        }

        function clearNewVariable(newVariable) {
            if (newVariable.value) {
                newVariable.value = null;
            }
        }

        return FieldDirectiveHelper;

    }]);
angular.module('app')

    .factory('ValidationPolyDTO', [function () {

        function ValidationPoly() {
            this.does = "handles input field validations, method names are validation keys from metadata obj, methods return true or false";
        };

        ValidationPoly.prototype.returnTrue = function () {
            return true;
        };

        ValidationPoly.prototype.isRequired = function (value, compareVal) {

            var isValid = false;

            if (Array.isArray(value)) {
                // multiselect
                if (value.length === 0) isValid = true;
                // checkboxes
                if ((value.indexOf(false) > -1 || value.indexOf(null) > -1) && value.indexOf(true) < 0) isValid = true;
            }
            else if (!value &&
                    typeof value !== "number" &&
                        value !== false) {
                isValid = true;
            }

            return isValid;
        };

        ValidationPoly.prototype.isLessThanMin = function (value, compareVal) {
            if (value === null || (compareVal === null && value < 0)) return false;

            var isValid = false;

            if (value < compareVal) {
                isValid = true;
            }

            return isValid;
        };

        ValidationPoly.prototype.isGreaterThanMax = function (value, compareVal) {
            if (value === null || (compareVal === null && value < 0)) return false;

            var isValid = false;

            if (value > compareVal) {
                isValid = true;
            }

            return isValid;
        };

        ValidationPoly.prototype.isEqual = function (value, compareVal) {
            if (value === null || (compareVal === null && value < 0)) return false;

            var isValid = false;

            if (value !== compareVal) {
                isValid = true;
            }

            return isValid;
        };

        return ValidationPoly;


    }]);
angular.module('app')

    .value('validationMap', {
        staticMessage: 'returnTrue', // available for all input types
        required: 'isRequired', // available for all input types
        numberMax: 'isGreaterThanMax', // available for all input types but checkboxdepreciated and multidropdown
        numberMin: 'isLessThanMin', // available for all input types but checkboxdepreciated and multidropdown
        numberMustEqual: 'isEqual' // available for all input types but checkboxdepreciated and multidropdown
    })

    .factory('ValidationBuilderDTO', ['ValidationPolyDTO', 'validationMap', 'DefaultMetaDataService', function (ValidationPolyDTO, validationMap, DefaultMetaDataService) {

        var ValidationPoly = new ValidationPolyDTO;

        ////////////////////////////////////////////// candidate for its own file, and/or trigger object, and where vals can be stored for message interpolation
        function MessageObjectDTO(defaults) {

            var MessageObject = function (validation) {
                var type = validation.type;

                this.message = validation.message || defaults[type].message;
                this.styles = validation.styles || defaults[type].styles;

                // this means an array of style must always have a relationship intensity, otherwise it is a string
                if (Array.isArray(this.styles)) {
                    this.intensity = validation.intensity || defaults[type].intensity;
                    this.styles = this.styles[this.intensity];
                }
            };

            return MessageObject;

        }
        //////////////////////////////////////////////

        function ValidationBuilder(defaultConfiguration) {
            this.does = "Checks validations and creates MessageObjects for synValidation to render.";
            // this.defaults = defaultConfiguration;
            this.defaults = defaultConfiguration || DefaultMetaDataService.getMetaDataByProperty('metaData').validation.validations;
        };

        ValidationBuilder.prototype.Build = function (parentValidationObj, formMetaData, scope) {
            var self = this;

            self.scope = scope;
            self.formMetaData = formMetaData;
            self.renderValidationsObj = scope.renderValidationsObj;

            self.MessageObject = new MessageObjectDTO(this.defaults);

            parentValidationObj.validations.forEach(function (validation, index) {

                validation.currentDataPointName = parentValidationObj.dataPointName;
                validation.currentFullDataPointString = self.formMetaData.formObjectName + "." + validation.currentDataPointName + ".value";

                validation.subDataPointNames = parentValidationObj.subDataPointNames;
                validation.inputType = parentValidationObj.inputType;
                validation.index = index;

                // checkbox input type
                if (validation.inputType === "checkboxdepreciated") {

                    var checkboxStrings;

                    checkboxStrings = validation.subDataPointNames.map(function (subDataPointName) {
                        return formMetaData.formObjectName + "." + validation.currentDataPointName + "." + subDataPointName + ".value";
                    });

                    scope.$watchGroup(checkboxStrings, function (newVal) {

                            self.buildMessages(newVal, validation);
                
                    })

                } else { // all others input types

                    self.setWatchers(validation);

                }

            })

        };

        ValidationBuilder.prototype.setWatchers = function (validation) {
            var self = this;

            var compareFieldString = self.formMetaData.formObjectName + "." + validation.compareDataPoint + ".value";

            // multiselect drop down (since $watchGroup does not support deep watch)
            if (validation.inputType === "multidropdown") {

                self.scope.$watch(validation.currentFullDataPointString, function (newVal) {

                    self.buildMessages(newVal, validation);

                }, true);
              

            } else { // all others

                self.scope.$watchGroup([validation.currentFullDataPointString, compareFieldString], function (newVal) {

                    var compareValue;
                    if (validation.compareVal === 0 || validation.compareVal) {
                        compareValue = validation.compareVal;
                    } else {
                        compareValue = newVal[1];
                    }

                    self.buildMessages(newVal[0], validation, compareValue);

                });

            }


        };

        ValidationBuilder.prototype.buildMessages = function (value, validation, compareValue) {
            var self = this;

            var renderValidations = self.renderValidationsObj[validation.currentDataPointName];

            var compareValue;
            if (validation.compareVal === 0 || validation.compareVal) {
                compareValue = validation.compareVal;
            }

            if (ValidationPoly[validationMap[validation.type]](value, compareValue)) {
                var messageObject = new self.MessageObject(validation);
                renderValidations[validation.index] = messageObject;
            } else {
                renderValidations[validation.index] = null;
            }

        };

        return ValidationBuilder;

    }]);
angular.module('app')
    .factory('$localstorage', ['$window', function ($window) {
    return {
        set: function (key, value, expirationDate) {
            $window.localStorage[key] = value;
            if (expirationDate) {
                $window.localStorage[key + '_exp'] = expirationDate;
            }
        },
        get: function (key, defaultValue) {
            if ($window.localStorage[key + '_exp'] && $window.localStorage[key + '_exp'] <= new Date()) {
                remove(key);
                return false;
            }
            return $window.localStorage[key] || defaultValue || false;
        },
        setObject: function (key, value, expirationDate) {
            $window.localStorage[key] = JSON.stringify(value);
            if (expirationDate) {
                $window.localStorage[key + '_exp'] = expirationDate;
            }
        },
        getObject: function (key, defaultValue) {
            if ($window.localStorage[key] != undefined) {
                if ($window.localStorage[key + '_exp'] && $window.localStorage[key + '_exp'] <= new Date()) {
                    remove(key);
                    return false;
                }
                return JSON.parse($window.localStorage[key]);
            } else {
                return defaultValue || false;
            }
        },
        remove: function (key) {
            $window.localStorage.removeItem(key);
            $window.localStorage.removeItem(key + '_exp');
        },
        clear: function () {
            $window.localStorage.clear();
        }
    }
}]);
angular.module('app')
    .service('WorkbookParserDTO', [ 'StudyConfigService',
        function (StudyConfigService) {

            // !! MULTIDATAPOINTS SUCH AS CHECKBOXES AND MULTISELECT DROPDOWNS HAVE A SEPARATE STRUCTURE, THEY ARE NOT SUPPORTED YET !!
            // will be part of overhaul where each subdatapoint will need a column

            // ColumnKey
            function ColumnKeyDTO(name, distribution) {
                this.name = name;
                this.distribution = distribution;
            };
            ColumnKeyDTO.prototype.setDistribution = function (distribution) {
                this.distribution = distribution;
            };

            function SiteDTO() {
                this.SiteNumber;
            };
            SiteDTO.prototype.addAttribute = function (name, value) {
                this[name] = value;
            };

            // Form
            function FormDTO() {
                var self = this;

                // FormData DTO dynamically created per form in WorkbookParser.generateSyncronyData()
                self.FormData = {};

                // FOR WHEN STATUS IMPORT FUNCTIONALITY IS ADDED
                //var activeStatuses = StudyConfigService.getMetaDataByProperty("activeStatuses").split(" | ");
                //var statuses = StudyConfigService.getMetaDataByProperty("statuses");
                //activeStatuses.forEach(function (activeStatus) {

                //    var thisStatus = statuses.find(function (status) {
                //        return status.value === activeStatus;
                //    })

                //    if (thisStatus) self[thisStatus.formProperty] = false;

                //})
                //this.IsComplete = false;

            };
            FormDTO.prototype.addAttribute = function (name, value) {
                this[name] = value;
            };
            FormDTO.prototype.addFormData = function (formDataDTO) {
                this.FormData = formDataDTO;
            };

            // Subject, inherits from form
            function SubjectDTO() {                
                FormDTO.call(this);
                this.SubjectData = this.FormData;
                this.Consent = "";
                this.ConsentData = {};
            };
            SubjectDTO.prototype = Object.create(FormDTO.prototype);
            SubjectDTO.prototype.constructor = SubjectDTO;
            SubjectDTO.prototype.addDataPoint = function (name, DataPointDTO) {
                this.FormData[name] = DataPointDTO;
            }

            // DataPoint
            function DataPointDTO(value) {
                // convert number strings to numbers
                if (typeof value === "string" && value.indexOf("/") === -1) { // '/' comes up in dates, and would be evaled as division expression
                    var stringToEval = value.toLowerCase();
                    try {
                        eval(stringToEval);
                        this.value = eval(stringToEval);
                    } catch (e) {
                        this.value = value;
                    }
                } else {
                    this.value = value;
                }
                this.status = {};
                this.Reason = "Study Import";
            };

            // WorkbookParser
            function WorkbookParser(rawWorkbook) {
                var wbp = this;
                wbp.does = "inits with jsxls workbook, stores as JSON, and contains functions for parsing";
                wbp.properties = [
                    "rawWorkbook", // cleared after use because it's huge
                    "sheetsJSON",
                    "sheetNames",
                    "nonFormData", // guesses on init
                    "sheetNamesAndColumnKeysMapper",
                    "sites",
                    "subjects",
                    "forms",
                    "formsToParentsMap"];

                wbp.init = function (rawWorkbook) {
                    wbp.addRawWorkbook(rawWorkbook);
                    wbp.createSheetObjectsAndMappers();
                }

                wbp.addRawWorkbook = function (rawWorkbook) {
                    wbp.rawWorkbook = rawWorkbook;
                };

                wbp.createSheetObjectsAndMappers = function () {

                    // create these objects
                    wbp.sheetsJSON = {};
                    wbp.nonFormData = {};
                    wbp.sheetNames = [];

                    wbp.sheetNamesAndColumnKeysMapper = wbp.rawWorkbook.SheetNames.reduce(function (obj, sheetName) {

                        var sheet = wbp.rawWorkbook.Sheets[sheetName];
                        var sheetJSON = XLSX.utils.sheet_to_json(sheet);
                        wbp.sheetsJSON[sheetName] = sheetJSON;
                        wbp.sheetNames.push(sheetName);


                        var columnNames = XLSX.utils.sheet_to_json(sheet, {header: 1})[0];
                        var columnKeysMapper = {};

                        // convert all column names to columnKey objects
                        columnNames.forEach(function (columnKey) {

                            // set up mapper and take best guess at column key distribution
                            var guess = (columnKey.toUpperCase() === columnKey && columnKey.indexOf(" ") === -1) ? "FormData" : "NonFormData";
                            columnKeysMapper[columnKey] = new ColumnKeyDTO(columnKey, guess);

                            if (guess === "NonFormData") {
                                wbp.nonFormData[columnKey] = new ColumnKeyDTO(columnKey, guess);
                            }

                        })
                        obj[sheetName] = columnKeysMapper;
       
                        return obj;
                    }, {});

                    wbp.rawWorkbook = "cleared";

                    console.log("wbp.sheetNames", wbp.sheetNames);
                    console.log("wbp.sheetsJSON", wbp.sheetsJSON);
                    console.log("wbp.nonFormData (initial guesses)", wbp.nonFormData);
                    console.log("wbp.sheetNamesAndColumnKeysMapper", wbp.sheetNamesAndColumnKeysMapper);
                };

                // when all necessary alterations have been made to wbp.sheetNamesAndColumnKeysMapper
                wbp.generateSyncronyData = function () {

                    var sitesTracker = {};
                    var subjectsTracker = {}; // also tracks repeating forms for now   
                    wbp.formsToParentsMap = {}; // also tracks repeating forms for now       


                    // distributionFunctionsMapper should come from its own service, there it can map to function names that 
                    // the reference funtions, then it can be configurable as an adapter than can be swapped
                    var distributionFunctionsMapper = {
                        FormData: function (columnName, columnValue, newData) {
                            var dataPoint = new DataPointDTO(columnValue);
                            newData.newForm.FormData.addDataPoint(columnName, dataPoint);
                        },
                        subject: function (columnName, columnValue, newData) {
                            var dataPoint = new DataPointDTO(columnValue);
                            newData.newSubject.addDataPoint(columnName, dataPoint);
                        },
                        SUBJECTID: function (columnName, columnValue, newData) {
                            newData.newForm.addAttribute("ExternalSubjectId", columnValue);
                            newData.newSubject.addAttribute("ExternalSubjectId", columnValue);
                        },
                        site: function (columnName, columnValue, newData) {
                            newData.newSite.addAttribute(columnName, columnValue);
                        },
                        SITEID: function (columnName, columnValue, newData) {
                            newData.newSite.addAttribute("SiteNumber", columnValue);
                        },
                        NonFormData: function(){},
                        trash: function (){}
                    };

                    wbp.sites = [];
                    wbp.subjects = [];
                    wbp.forms = [];


                    for (formType in wbp.sheetsJSON) { // excel sheet level
                        wbp.sheetsJSON[formType].forEach(function (form) { // excel row level

                            // new data from row
                            var newData = {
                                newForm: new FormDTO,
                                newSite: new SiteDTO,
                                newSubject: new SubjectDTO
                            }

                            // create constructor for new form's FormData
                            function FormDataDTO() {
                                var self = this;

                                wbp.sheetNames.forEach(function (sheetName) {
                                    var columnKeyNames = Object.keys(wbp.sheetNamesAndColumnKeysMapper[sheetName]);
                                    columnKeyNames.forEach(function (columnKey) {
                                        if (columnKey.distribution === "FormData") self[columnKey.name] = new DataPointDTO;
                                    })
                                })

                            };
                            FormDataDTO.prototype.addDataPoint = function (name, DataPointDTO) {
                                this[name] = DataPointDTO;
                            };

                            newData.newForm.addFormData(new FormDataDTO);
                            newData.newForm.addAttribute("Name", formType);

                            for (columnName in form) {

                                // handle column value
                                var columnValue = form[columnName];
                                var columnKey = wbp.sheetNamesAndColumnKeysMapper[formType][columnName]; // columnKey is a columnKey object, not the key partner of columnValue
                                distributionFunctionsMapper[columnKey.distribution](columnName, columnValue, newData);

                            }

                            // check site and subjects against trackers and enter data accordingly
                            if (!subjectsTracker[newData.newSubject.ExternalSubjectId]) {
                                wbp.subjects.push(newData.newSubject);
                                subjectsTracker[newData.newSubject.ExternalSubjectId] = {}; // for subforms, for now
                            }

                            if (!sitesTracker[newData.newSite.SiteNumber]) {
                                wbp.sites.push(newData.newSite);
                                sitesTracker[newData.newSite.SiteNumber] = true;
                            }

                            newData.newForm.FormData.addDataPoint(new DataPointDTO("Version", 1));
                            wbp.forms.push(newData.newForm);

                            // add SiteNumber to Subject if both are present - to be converted to SiteID at API
                            if (newData.newSite.SiteNumber && newData.newSubject.ExternalSubjectId) {
                                var siteNumber = newData.newSite.SiteNumber;
                                newData.newSubject.addAttribute("SiteNumber", siteNumber);
                                var dataPoint = new DataPointDTO(siteNumber);
                                newData.newSubject.addDataPoint("SITENUMBER", dataPoint);
                            }

                            // keeping track of subforms with subjectsTracker and parentFormsTracker for now (single parent, single nesting only)
                            var isRepeatingForm = wbp.sheetNamesAndColumnKeysMapper[formType].isRepeatingForm;
                            if (isRepeatingForm) {
                                // check/update subjectsTracker
                                var trackerSubjectHasFormCount = typeof subjectsTracker[newData.newSubject.ExternalSubjectId][formType] === "number";
                                if (trackerSubjectHasFormCount) {
                                    subjectsTracker[newData.newSubject.ExternalSubjectId][formType] = subjectsTracker[newData.newSubject.ExternalSubjectId][formType] + 1;
                                } else {
                                    subjectsTracker[newData.newSubject.ExternalSubjectId][formType] = 0;
                                }
                                var subFormsAbsId = subjectsTracker[newData.newSubject.ExternalSubjectId][formType];
                                var pathString = formType + "[" + subFormsAbsId + "].FormData"; // adding the path string is redundant against the API but mimics the behavior of FE
                                newData.newForm.addAttribute("relativePathArray", [pathString]);
                                newData.newForm.addAttribute("AbsoluteIdx", subFormsAbsId);
                                var dataPoint = new DataPointDTO(subFormsAbsId);
                                newData.newForm.FormData.addDataPoint("SYN_REF_ID", dataPoint);

                                // check/update wbp.FormsToParentsMap
                                if (!wbp.formsToParentsMap[formType]) wbp.formsToParentsMap[formType] = wbp.sheetNamesAndColumnKeysMapper[formType].parentForms[0];
                            }

                        })

                    }

                    console.log("wbp.wbp.FormsToParentsMap", wbp.formsToParentsMap);
                    console.log("wbp.parentForms", wbp.parentForms);
                    console.log("wbp.sites", wbp.sites);
                    console.log("wbp.subjects", wbp.subjects);
                    console.log("wbp.forms", wbp.forms);
                    console.log("wbp.siteTracker", wbp.siteTracker);
                    console.log("wbp.subjectTracker", wbp.subjectTracker);
                }

            };

            return WorkbookParser;

        }]);
(function () {
    angular.module('app').factory('sxHelpers', [function () {
        return {
            format: function (format) {
                var args = Array.prototype.slice.call(arguments, 1);
                return format.replace(/{(\d+)}/g, function (match, number) {
                    return typeof args[number] !== 'undefined' ? args[number] : match;
                });
            },
            displayLocaleDate: function (sDate) {
                if (!sDate) {
                    return '';
                }
                var d = new Date(sDate);
                return d.toLocaleDateString();
            },
            getDate: function () {
                return new Date();
            },
            capitalize: function (str) {
                return str.charAt(0).toUpperCase() + str.slice(1);
            },
            displayLocaleDate: function (sDate) {
                if (!sDate) {
                    return '';
                }
                var d = new Date(sDate);
                return d.toLocaleDateString();
            },
            generateGUID: function() {
                function s4() {
                    return Math.floor((1 + Math.random()) * 0x10000)
                      .toString(16)
                      .substring(1);
                  }
                return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
                    s4() + '-' + s4() + s4() + s4();
            },
            deepCopy: function deepCopy(oldForm, newForm) {
                if (oldForm && newForm) {
                    for (var i in newForm) {
                        if (!newForm.hasOwnProperty(i)) continue;
                        if (newForm[i] !== null && (typeof newForm[i]) === 'object') {
                            oldForm[i] = deepCopy(oldForm[i], newForm[i]);
                        }
                        else oldForm[i] = newForm[i];
                    }
                }
                return oldForm;
            }
        }
    }])
})();
angular.module('app').factory('SubjectIDFactory', function () {
    var ftry = this;

    // array of arrays
    // arg 1 - any string, any datapoint, any provided value 
    // if arg 1 is reference to a string value: arg 2 & 3 - start and end slice values
    // if arg 1 is reference to an int: arg 2 - total length to be padded to with prepended zeros
    // if arg 1 is date: arg 2 - any valid JS date manilpulation or null, arg 3 & 4 - slice nums
    // no tildes allowed

    // provided values:
    // CurrentTime = current date - FE
    // CurrentUser = current user - FE
    // Autoincrement = Autoincremented subject id - API
    // SiteNumber = site number, not site id - API

    ftry.formatParsedForAPI = function (rootScope, scope, idFormat) {

        // API takes array of array structure, so all values enclosed in arrays

        parsedFormat = idFormat.map(function (formatObj) {

            // swap data point references for values
            if (scope.Form.FormData[formatObj[0]]) {
                return [scope.Form.FormData[formatObj[0]].value];
            }

            // swap current user and its options
            else if (formatObj[0] === "CurrentUser") {

                var currentUserName = rootScope.CurrentUser.UserName;
                var slicedUser;
                switch (formatObj.length) {

                    case 1:
                        slicedUser = currentUserName;
                        break;
                    case 2:
                        slicedUser = currentUserName.slice(formatObj[1]);
                        break;
                    case 3:
                        slicedUser = currentUserName.slice(formatObj[1], formatObj[2]);
                        break;
                }

                return [slicedUser];

            }

            // parse and swap CurrentTime and its options
            else if (formatObj[0] === "CurrentTime") {

                // swap for date
                if (formatObj[1]) {

                    // js date method
                    var evalStr = "(function(){ var value = new Date ; value = value" + formatObj[1] + "; return value})()";
                    date = eval(evalStr);
                    if (typeof date !== "string") date = date.toString();

                }
                else {
                    var date = new Date;
                    date = date.toString();
                }

                // slice date                
                if (formatObj[3]) {
                    // start and end slice args
                    date = date.slice(formatObj[2], formatObj[3]);
                }
                else if (formatObj[2]) {
                    // start slice arg
                    date = date.slice(formatObj[2]);
                }

                return [date];

            }

            // string or provided value to be parsed by API (SiteNumber, etc.)
            else {
                return formatObj;
            }

        })

        return parsedFormat;

    };

    return {
        formatParsedForAPI: ftry.formatParsedForAPI
    }

});

angular.module('app')
    .service('DefaultMetaDataService', ['$q', '$timeout', function ($q, $timeout) {

        // this object can never be replaced, as .config() phase stores reference directly to it, not to this var
        // so it must be appended
        var _syncronyMetaData = {};  

        function getMetaData() {
            var deferred = $q.defer();
            $timeout(function () {
                _syncronyMetaData.metaData = syncronyDefaults;
                deferred.resolve(_syncronyMetaData);
            }, 250);
            return deferred.promise;
        }

        return {
            getMetaData: getMetaData,
            getMetaDataByProperty: function (property) {
                return _syncronyMetaData[property];
            }
        };

    }]);

var syncronyDefaults = {
    question: {
        styles: {
            ".question-wrapper": ['col-sm-2'],
            "label": ['sm-label']
        },
        vasStyles: {
            ".question-wrapper": ['vas-question',
                                  'row']
        }
    },
    input: {
        display: ['Yes', 'No'],
        value: [true, false],
        dateFormat: 'mmm/d/yyyy',
        stringDateFormat: "mm/dd/yyyy",
        step: 1,
        rangeDefaults: {
            scale: [0, 10],
            continuumImg: 'VAS-ruler.png',
            end1Img: 'VAS-smiley-face.png',
            end2Img: 'VAS-frowny-face.png',
            min: 0,
            max: 10,
            step: .01
        },
        radioStyles: {
            ".input-wrapper": ['col-sm-3']
        },
        dropdownStyles: {
            ".input-wrapper": ['col-sm-3']
        },
        multidropdownStyles: {
            ".input-wrapper": ['col-sm-3']
        },
        numberStyles: {
            ".input-wrapper": ['col-sm-3'],
            "input": ['form-control', 'sm-input']
        },
        toggleStyles: {
            ".input-wrapper": ['col-sm-3'],
            "input": ['form-control', 'sm-input']
        },
        textfieldStyles: {
            ".input-wrapper": ['col-sm-3'],
            "input": ['form-control', 'sm-input']
        },
        textareaStyles: {
            ".input-wrapper": ['col-sm-3'],
            "input": ['form-control', 'sm-input']
        },
        readonlyStyles: {
            ".input-wrapper": ['col-sm-3'],
            "input": ['form-control', 'sm-input']
        },
        dateParserStyles: {
            ".input-wrapper": ['col-sm-3'],
            "input": ['form-control', 'sm-input']
        },
        timeParserStyles: {
            ".input-wrapper": ['col-sm-3'],
            "input": ['form-control', 'sm-input']
        },
        checkboxDepreciatedStyles: {
            ".input-wrapper": ["col-sm-3"],
            ".checkbox-area": ["form-check"],
            "label": ["form-check-label"],
            "input": ["form-check-input"]
        },
        unitMeasureStyles: {
            ".input-wrapper": ["col-sm-3"],
            "input": ["form-control", "unit-measure"],
            "select": ["form-control", "unit-measure"]
        },
        visualAnalogScale: {
            ".vas-input-wrapper": ["row"],
            "fieldset": ["col-xs-8"],
            ".vas-col": ["col-xs-1"]
        }
    },
    fieldDirectives: {
        informationStyles: {
            ".form-section-title": ["syncrony-default-infobar"]
        },
    },
    validation: {
        styles: {
            ".vwrap1": ['validations-wrapper']
        },
        validations: { // metadata structure differs from corresponding formdata structure which is an array
            staticMessage: {
                styles: ["validation-message-intensity-0", "validation-message-intensity-1", "validation-message-intensity-2"], // if it is an array, must have intensity to select from it, otherwise it may be a string
                intensity: 0
            },
            required: {
                message: "Required.",
                styles: ["validation-message-intensity-0", "validation-message-intensity-1", "validation-message-intensity-2"],
                intensity: 1
            },
            numberMin: {
                message: "Input out of range: number too small.",
                styles: ["validation-message-intensity-0", "validation-message-intensity-1", "validation-message-intensity-2"],
                intensity: 1
            },
            numberMax: {
                message: "Input out of range: number too large.",
                styles: ["validation-message-intensity-0", "validation-message-intensity-1", "validation-message-intensity-2"],
                intensity: 1
            },
            numberMustEqual: {
                message: "This number must be equal to .. do some interpolation.",
                styles: ["validation-message-intensity-0", "validation-message-intensity-1", "validation-message-intensity-2"],
                intensity: 1
            }
        }
    },
    clearInput: {
        styles: {
            "button": ['btn', 'btn-sm', 'no-disable'],
            "button > span": ['glyphicon', 'glyphicon-remove']
        }
    },
    subForm: {
        instruction: 'Add as many subforms as needed'
    },
    queries: {
        comment: {
            reasons: ['Data Changed', 'Missing Data', 'Inconsistent Data']
        },
        styles: {
            "button": ['btn', 'btn-sm'],
            "button > span": ['glyphicon', 'glyphicon-asterisk']
        }
    },
    auditTrail: {
        styles: {
            "button": ['btn', 'btn-sm'],
            "button > span": ['glyphicon', 'glyphicon-cog']
        }
    },
    statusButtons: {
        form: 'Form',
        types: [
            {
                value: 'Verify',
                //read: ['isSite'],
                //write: ['isManager']
            },
            {
                value: 'Freeze',
                //read: ['isSite'],
                //write: ['isManager']
            },
            {
                value: 'Lock',
                //read: ['isSite'],
                //write: ['isManager']
            },
            {
                value: 'Sign',
                //read: ['isSite'],
                //write: ['isManager']
            }
        ],
        styles: {
            ".input-wrapper": ["col-sm-2"]
            // ".checkbox-area": ["checkbox"]
        }
    }
}

angular.module('app')
    .service('FormTemplateService', ['loadIndicatorService','StudyConfigService', 'SessionTransitService', 'EDC_CONSTANTS', 'WEB_CONFIG', '$filter', '$http', '$stateRegistry', 'toaster', '$q', '$rootScope', '$log', 'PermissionMatrixService', 'FileSaver', 'Upload', '$uibModal',
        function (loadIndicatorService, StudyConfigService, SessionTransitService, EDC_CONSTANTS, WEB_CONFIG, $filter, $http, $stateRegistry, toaster, $q, $rootScope, $log, PermissionMatrixService, FileSaver, Upload, $uibModal) {
            var srv = this;

            srv.metaDataObject = {}; // convert to local variable
            var formNavigationList = []; // list of crf's used to generate the subject summary and the navigation tabs
            var templateIdMap = {}; // map of template names and ids, so a single form can be requested with either
            var studyLoadedObject = {}; // used by the form loader DTO and Ctrl to hold multiple forms while the users gets load errors
            var studyHasEPros = false;
            var eConsentForms = [];

            srv.setStudyLoadedProperty = function (property, obj) {
                studyLoadedObject[property] = obj;
            }

            srv.getAllStudyLoadedObjects = function () {
                return studyLoadedObject;
            }

            srv.getTemplate = function (formName) {
                return $http.get(StudyConfigService.getUrl(EDC_CONSTANTS.SERVICE_URLS.GET_TEMPLATE_URL) + formName)
                    .then(function (response) {
                        return prepareObjectForControllers(response.data);
                    }).catch(function (data) {
                        toaster.error(data.statusText, data.data);
                    });
            }

            srv.getAll = function () {
                return $http.get(StudyConfigService.getUrl(EDC_CONSTANTS.SERVICE_URLS.GET_TEMPLATE_LIST_URL))
                    .then(function (response) {
                        PermissionMatrixService.hasPermission('isDev') && $log.info("FormTemplateService.getAll(): ", response.data);
                        setEConsentForms(response.data);                       
                        return prepareObjectForControllers(response.data);
                    }).catch(function (data) {
                        toaster.error(data.statusText, data.data);
                    });
            }

            srv.getEConsentForms = function () {
                return eConsentForms;
            }

            srv.getActiveEConsentForms = function () {
                var activeForms = [];
                eConsentForms.forEach(function (form) {
                    if (form.IsActive) activeForms.push(form);
                });
                return activeForms;
            }

            srv.downloadPDF = function (studyContainer, fileName) {
                var splitFile = fileName.split('.');
                return $http.get(WEB_CONFIG.BASE_URL + '/api/blob/' + studyContainer + '/' + splitFile[0] + '/' + splitFile[1], { responseType: "arraybuffer" })
                    .then(function (data) {
                        return data.data
                    }).catch(function (data) {
                        toaster.error(data.statusText, data.data);
                    });
            };

            srv.appendSignaturesAndDownloadPDF = function (container, fileName, options, formOptions) {
                srv.downloadPDF(container, fileName).then(function (response) {

                    srv.renderPDF(response, 'download-econsent-container', 1.3).then(function (response) {

                        var canvasContainer = document.getElementById('download-econsent-container');
                        var canvases = canvasContainer.getElementsByTagName('canvas');
                        srv.appendSignaturesToPDF(options, canvases, formOptions);

                    });
                });
            };

            srv.renderPDF = function (response, containerId, scale) {
                var file = new Blob([response], { type: 'application/pdf' });
                var url = URL.createObjectURL(file);
                //https://www.sitepoint.com/custom-pdf-rendering/

                loadIndicatorService.startLoading();

                var deferred = $q.defer();
                PDFJS.getDocument(url)
                  .then(function (pdf) {

                      // Get div#container and cache it for later use
                      var container = document.getElementById(containerId);

                      container.innerHTML = '';

                      // Loop from 1 to total_number_of_pages in PDF document
                      for (var i = 1; i <= pdf.numPages; i++) {

                          // Get desired page
                          pdf.getPage(i).then(function (page) {

                              // scale 1.3 for export, 1 for view on ipad
                              //var scale = 1.3;
                              var viewport = page.getViewport(scale);
                              var div = document.createElement("div");

                              // Set id attribute with page-#{pdf_page_number} format
                              div.setAttribute("id", "econsent-page-" + (page.pageIndex + 1));

                              // This will keep positions of child elements as per our needs
                              div.setAttribute("style", "position: relative");
                              div.setAttribute("class", "econsent-pdf-page");

                              // Append div within div#container
                              container.appendChild(div);

                              // Create a new Canvas element
                              var canvas = document.createElement("canvas");
                              canvas.id = 'econsent-pdf-canvas' + i;

                              // Append Canvas within div#page-#{pdf_page_number}
                              div.appendChild(canvas);

                              var context = canvas.getContext('2d');
                              canvas.height = viewport.height;
                              canvas.width = viewport.width;

                              var renderContext = {
                                  canvasContext: context,
                                  viewport: viewport
                              };

                              // Render PDF page
                              var pageRendering = page.render(renderContext);

                              // return promise when last page is rendered
                              if (page.pageNumber === pdf.numPages) {
                                  pageRendering._internalRenderTask.callback = function () {
                                      deferred.resolve();
                                  }
                              }

                          });
                      }

                  });

                return deferred.promise.then(function () {
                    loadIndicatorService.stopLoading();
                });


            };


            srv.appendSignaturesToPDF = function (options, canvases, formOptions) {
                // currently, the loading indicator directive is changing to true, but view is not recognizing that
                loadIndicatorService.startLoading();
                var pdf = new jsPDF();
                var width = 90;
                var height = 28;
                var imgData;
                var formSite = SessionTransitService.sessionObj.activeStudy.Sites.find(function (site) {
                    return site.ID == formOptions.siteID;
                }).Name;

                for (var i = 0; i < canvases.length; i++) {

                    imgData = canvases[i].toDataURL("image/jpeg", 1.0);
                    pdf.addImage(imgData, 'JPEG', 0, 0);
                    pdf.addPage();

                }

                pdf.setFontSize(14);
                pdf.text(10, 10, formOptions.studyName + ' Study');
                pdf.text(10, 16, 'Site: ' + formSite);
                pdf.text(10, 22, 'Document Name: ' + formOptions.documentName);
                pdf.text(10, 28, 'Document Date: ' + displayDate(formOptions.date));
                pdf.text(10, 34, 'eConsent Signatures:');

                pdf.setFontSize(12);

                // should realign names, dates and signatures similar to Spirox's signed consent page.

                pdf.text(10, 30 + height + 5, options.subject.name);
                pdf.text(10, 30 + height, '(Subject)');

                //clear db and erase || logic
                pdf.addImage(options.subject.uncroppedSignature || options.subject.signature, 'PNG', 55, 40, width, height);
                pdf.text(75 + width, 30 + height + 5, displayDate(options.subject.date, true));

                pdf.text(10, 40 + (height * 2) + 5, options.investigator.name);
                pdf.text(10, 40 + (height * 2), '(PI)');
                pdf.addImage(options.investigator.uncroppedSignature || options.investigator.signature, 'PNG', 55, 50 + height, width, height);
                pdf.text(75 + width, 40 + (height * 2) + 5, displayDate(options.investigator.date, true));

                if (Array.isArray(options.additional) && options.additional.length) {
                    var startingHeight = 50;
                    var signatureHeight = 60;
                    var heightMultiplier = 2;

                    options.additional.forEach(function (additionalSignature) {
                        
                        if (signatureHeight + (height * heightMultiplier) > 260) {
                            pdf.addPage();
                            startingHeight = 20;
                            signatureHeight = 30;
                            heightMultiplier = 0;
                        }

                        var multiplier = heightMultiplier + 1;

                        pdf.text(10, startingHeight + (height * multiplier) + 5, additionalSignature.name || additionalSignature.fullName);
                        pdf.text(10, startingHeight + (height * multiplier), '(Additional)');
                        pdf.addImage(additionalSignature.uncroppedSignature, 'PNG', 55, signatureHeight + (height * heightMultiplier), width, height);
                        pdf.text(75 + width, startingHeight + (height * multiplier) + 5, displayDate(additionalSignature.date, true));

                        startingHeight += 10;
                        signatureHeight += 10;
                        heightMultiplier++;


                    });
                }

                pdf.save('signedeconsent.pdf');
                loadIndicatorService.stopLoading();
            };

            srv.getMetaData = function (property) {
                if (property) {
                    return srv.metaDataObject[property];
                }
                return srv.metaDataObject;
            }

            srv.getMetaDataByType = function (type) {
                for (property in srv.metaDataObject) {
                    if (srv.metaDataObject[property].type === type) return srv.metaDataObject[property];
                }
            }

            srv.saveFormTemplate = function (formTemplate) {
                return $http({
                    method: 'POST',
                    url: StudyConfigService.getUrl(EDC_CONSTANTS.SERVICE_URLS.SAVE_TEMPLATE_URL),
                    data: formTemplate
                })
                .then(function success(response) {
                    PermissionMatrixService.hasPermission('isDev') && $log.info(response);
                    // add saved form to array of econsent forms if econsent form
                    if (response.data.Type === 22) {
                        response.data.properties = JSON.parse(response.data.JsonSchema);
                        appendEConsentForm(response.data);
                    }
                    return response;

                }, function error(response) {
                    toaster.error(data.statusText, data.data);

                });
            }


            //can rename to save file -- any file should be able to be saved
            srv.saveEConsentForm = function (file, studyContainer) {

                return Upload.upload({
                    url: WEB_CONFIG.BASE_URL + '/api/blob/upload/' + studyContainer,
                    data: {
                        file: file,
                    }
                });
            }

            srv.getFormIdByName = function (formName) {
                return templateIdMap[formName];
            }

            srv.getFormNavigationList = function () {
                return formNavigationList;
            }

            srv.addClassToFormListObject = function (formName, className) {
                className = className || null;

                for (var i in formNavigationList) {
                    if (formNavigationList[i].name === formName) {
                        formNavigationList[i].class = className;
                    }
                }
                // update the ctrl bindings after the classes are appended
                $rootScope.$broadcast('update-form-navigation-list');
            };

            srv.clearAllClasses = function () {
                for (var i in formNavigationList) {
                    formNavigationList[i].class = null;
                }
                $rootScope.$broadcast('update-form-navigation-list');
            }

            function appendEConsentForm(form) {
                var formPosition;
                for (var i = 0; i < eConsentForms.length; i++) {
                    if (eConsentForms[i].ID === form.ID) {
                        formPosition = i;
                        eConsentForms[formPosition] = form;
                        return;
                    }
                }

                eConsentForms.push(form);


            }

            // helper funtion to parse JSON and append states
            function prepareObjectForControllers(arrayOfMetaData) {
                if (arrayOfMetaData.constructor !== Array) {
                    arrayOfMetaData = [arrayOfMetaData];
                }
                var metaDataArray = [];
                arrayOfMetaData.forEach(function (data) {
                    if (data.Type !== 22) {
                        try {
                            //need to add check for add subject
                            //skip edit/add subject as we have it inside the sidebar
                            var formObj = JSON.parse(data.JsonSchema);
                            formObj.formName = data.Name;
                            formObj.formHandle = formObj.formName.replace(/\s/g, '').toLowerCase();
                            formObj.formId = data.ID;
                            formObj.order = data.Order;
                            formObj.required = data.ReqForApproval;
                            formObj.type = data.Type;
                            if (data.Type == 11) {
                                var previousSubjectForm = srv.getMetaDataByType(11);
                                $rootScope.hasCreateSubjectForm = true;
                                formObj.state = 'subject.edit';
                                if (previousSubjectForm) {
                                    delete srv.metaDataObject[previousSubjectForm.formName];
                                }
                            } else {
                                formObj.state = 'subject.' + formObj.formHandle;
                            }

                        if (!$stateRegistry.matcher._states.hasOwnProperty(formObj.state)) {
                            //use condition to register add subject form to new route
                            $stateRegistry.register({
                                name: formObj.state,
                                url: "/" + formObj.formHandle,
                                templateUrl: formObj.template,
                                controller: formObj.controller,
                                permission: 'readFormData',
                                data: {
                                    // a place for data on the transfer object
                                },
                                params: {
                                    propertyName: formObj.formHandle // signin modal looks for this key in order to not reload forms
                                },
                                resolve: { 
                                    preResolve: ['SubjectService', '$stateParams', function (SubjectService, $stateParams) {
                                        // so it will reject timed out transitions
                                        return SubjectService.LoadSubjectById($stateParams.subjectId);
                                    }]
                                }
                            })
                        }
                    
                        // create a hash of all datapoints for quick access
                        formObj.fieldsHash = {};
                        formObj.fieldsArray.forEach(function (fieldObj) {
                            if (fieldObj.dataPoint) formObj.fieldsHash[fieldObj.dataPoint] = fieldObj;
                        });

                            // create a sub-object from the formHandle to retrieve the MetaData in controller by name
                            srv.metaDataObject[formObj.formHandle] = formObj;
                            templateIdMap[formObj.formName] = formObj.formId;

                        }
                        catch (error) {
                            $log.warn("FormTemplateService cannot parse: " + data.Name);
                        }
                    }

                });
                // appendSubforms(srv.metaDataObject);
                formNavigationList = generateFormNavigationList();
                return srv.metaDataObject;

            }

            function removeMetaDataPropertyByType(type) {
                
            }

            function displayDate(date, minutes) {
                var format = minutes ? 'MM-dd-yyyy HH:mm' : 'MM-dd-yyyy';
                return $filter('date')(date, format, 'UTC');
            }

            function setEConsentForms(forms) {

                var eConsentFormsArray = [];
                forms.forEach(function (form) {
                    if (form.Type === 22) {
                        form.properties = form.properties || JSON.parse(form.JsonSchema);
                        eConsentFormsArray.push(form);
                    }
                });

                eConsentForms = eConsentFormsArray;

                //return eConsentFormsArray.sort(function (a, b) {
                //    return 
                //});

            }

            // register modal if necessary
            function registerEProModal() {
                $rootScope.openEProModal = function (form) {
                    return $uibModal.open({
                        animation: true,
                        templateUrl: 'FormTemplates/MainForm.html',
                        controller: 'MainFormCtrl as mainFormCtrl',
                        backdrop: 'static',
                        size: "total-coverage",
                        keyboard: false,
                        resolve: {
                            preResolve: ['SubjectService', '$stateParams', function (SubjectService, $stateParams) {
                                // so it will reject timed out transitions
                                return SubjectService.LoadSubjectById($stateParams.subjectId);
                            }]
                        }
                    });
                }
            }

            // Generate form list for navigation
            function generateFormNavigationList() {

                var arrayForNav = [];
                var keys = Object.keys(srv.metaDataObject);
                //var canUpdateSubject = PermissionMatrixService.hasPermission('updateSubject');

                keys.forEach(function (key) {
                    //if (srv.metaDataObject[key].type == 1) return;
                
                    if (srv.metaDataObject[key].order > 0 && srv.metaDataObject[key].type != 11 && srv.metaDataObject[key].type !== 22) {
                        // change add subject form display to edit subject on subject views

                        if (srv.metaDataObject[key].isEPro) studyHasEPros = true;

                        var displayName = srv.metaDataObject[key].displayName || srv.metaDataObject[key].formName;
                        var navigationObj = {
                            name: srv.metaDataObject[key].formName,
                            state: srv.metaDataObject[key].state,
                            displayName: displayName,
                            order: srv.metaDataObject[key].order,
                            required: srv.metaDataObject[key].required,
                            formId: srv.metaDataObject[key].formId,
                            type: srv.metaDataObject[key].type,
                            isEPro: srv.metaDataObject[key].isEPro
                        };

                        arrayForNav.push(navigationObj);
                    }
                });
               
                if (studyHasEPros === true) registerEProModal();

                return arrayForNav.sort(function (obj1, obj2) {
                    return obj1.order - obj2.order;
                });
            }

        }]);

        


// form templates should stored in the service object and retreved by the controller
// appended the sub-form's MetaData to it's parent.
//function appendSubforms(metaDataObject) {
//    var keys = Object.keys(metaDataObject);

//    keys.forEach(function (key) {
//        extendData(metaDataObject[key], metaDataObject);
//    });
//}

// recusively extend the sub-forms with MetaData
//function extendData(form, metaDataObject) {
//    if (!form.subFormArray || form.subFormArray.length < 1) {
//        return;
//    }

//    form.subMetaData = [];

//    var keys = Object.keys(metaDataObject);

//    form.subFormArray.forEach(function (subFormName) {
//        keys.forEach(function (key) {
//            if (subFormName === metaDataObject[key].formName) {
//                form.subMetaData.push(metaDataObject[key]);
//                extendData(metaDataObject[key], metaDataObject);
//            }
//        });
//    });
//}
angular.module('app').factory('SubjectService', function ($http, $q, StudyConfigService, $uibModal, $sce, PermissionMatrixService, $log) {

    //constants
    var _urls = {
        _load_all_subjects: '/api/subject/loadallsubjects',
        _load_subject_list: '/api/subject/getsubjectlist/',
        //_load_site_subjects: '/api/subject/loadsitesubjects/',

        _get_subject_by_id: '/api/subject/getsubject/',
        _get_num_subjects: '/api/subject/getnumsubjects',
        _add_subject: '/api/subject/addsubject',
        _update_subject: '/api/subject/updatesubject',
        _get_subject_history: '/api/subject/getsubjecthistory/'
        //_get_num_subjects_at_site: '/api/subject/getsubjectcount/',

    };


    //Data
    var _subjects = [];
    var _subject = {};
    var _subject_list = [];
    var _subject_history = [];

    //Getters
    var _get_subjects = function () {
        return _subjects;
    };

    var _get_subject = function () {
        return _subject;
    };

    var _get_subject_list = function () {
        return _subject_list;
    };

    //Loaders
    var _load_all_subjects = function () {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: StudyConfigService.getUrl(_urls._load_all_subjects),

        })
            .then(function success(response) {
                angular.copy(response.data, _subjects);
                PermissionMatrixService.hasPermission('isDev') && $log.info(response);
                deferred.resolve(response.data);
            }, function error(response) {
                $log.error('ERROR');
                $log.error(response);
                deferred.reject();
            });

        return deferred.promise;
    };


    var _load_subject_by_id = function (Id) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: StudyConfigService.getUrl(_urls._get_subject_by_id) + Id

        })
            .then(function success(response) {
                PermissionMatrixService.hasPermission('isDev') && $log.info(response);
                angular.copy(response.data, _subject);

                deferred.resolve(_subject);
            }, function error(response) {
                $log.error('ERROR');
                $log.error(response);
                deferred.reject();
            });

        return deferred.promise;
    };

    var _load_subject_history = function (Id) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: StudyConfigService.getUrl(_urls._get_subject_history) + Id

        })
            .then(function success(response) {
                PermissionMatrixService.hasPermission('isDev') && $log.info(response);
                angular.copy(response.data, _subject_history);

                deferred.resolve(_subject_history);
            }, function error(response) {
                $log.error('ERROR');
                $log.error(response);
                deferred.reject();
            });

        return deferred.promise;
    };

    var _open_subject_History_Popup = function () {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: 'SubjectTemplates/SubjectHistory.html',
            controller: 'SubjectHistoryController as subjHistCtrl',
            size: 'lg',
            resolve: {
                subjectHistory: function () {
                    return _subject_history;
                }
            }
        });

        modalInstance.result.then(function () {
        }, function () {
            $log.info("Modal Closed");
        })
    }

    var _load_num_subjects = function () {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: StudyConfigService.getUrl(_urls._get_num_subjects),

        })
            .then(function success(response) {
                PermissionMatrixService.hasPermission('isDev') && $log.info(response);
                deferred.resolve(response.data);

            }, function error(response) {
                $log.error('ERROR');
                $log.error(response);
                deferred.reject();
            });

        return deferred.promise;
    };

    var _load_total_num_subjects = function () {
        var deferred = $q.defer();
        $http({
            method: 'GET',
            url: StudyConfigService.getUrl(_urls._get_num_subjects),

        })
            .then(function success(response) {
                PermissionMatrixService.hasPermission('isDev') && $log.info(response);
                deferred.resolve(response.data);

            }, function error(response) {
                $log.error('ERROR');
                $log.error(response);
                deferred.reject();
            });

        return deferred.promise;
    };


    var _load_subjects = function (filter, pageNum, pageLimit, statusFilter, orderBy, orderAsc) {
        var deferred = $q.defer();
        $http({
            method: 'POST',
            url: StudyConfigService.getUrl(_urls._load_subject_list) + pageNum + '/' + pageLimit + '/' + statusFilter + '/' + orderBy + '/' + orderAsc,
            data: JSON.stringify(filter)
        })
        .then(function success(response) {
            angular.copy(response.data.Subjects, _subjects);
            deferred.resolve(response.data)
        }, function error(response) {
            deferred.reject();
        })

        return deferred.promise;
    }

    //Setters
    var _add_subject = function (newSubject) {
        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: StudyConfigService.getUrl(_urls._add_subject),
            data: newSubject

        })
            .then(function success(response) {
                PermissionMatrixService.hasPermission('isDev') && $log.info(response);
                //window.location.href = '/#/state1/state0/patientSummary?refnum=' + response.data._id;
                //window.location = '#/subject/' + response.data._id;
                deferred.resolve(response);
            }, function error(response) {
                $log.error('ERROR');
                $log.error(response);
                deferred.reject();
            });

        return deferred.promise;
    };

    var _update_subject = function (subject) {
        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: StudyConfigService.getUrl(_urls._update_subject),
            data: subject

        })
            .then(function success(response) {
                PermissionMatrixService.hasPermission('isDev') && $log.info(response);
                deferred.resolve(response.data);
            }, function error(response) {
                $log.error('ERROR');
                $log.error(response);
                deferred.reject();
            });

        return deferred.promise;
    };

    //Public Getters
    return {

        GetSubjects: _get_subjects,
        GetSubjectById: _get_subject,
        GetSubjectList: _get_subject_list,

        LoadAllSubjects: _load_all_subjects,
        LoadSubjectById: _load_subject_by_id,
        LoadTotalNumSubjects: _load_total_num_subjects,

        //LoadNumSubjectsAtSite: _load_num_subjects_at_site,
        //LoadSiteSubjects: _load_site_subjects,
        LoadSubjects: _load_subjects,
        LoadSubjectHistory: _load_subject_history,

        AddSubject: _add_subject,
        UpdateSubject: _update_subject,
        openSubjectHistoryPopup: _open_subject_History_Popup
    };

});
angular.module('app').factory('QueryService', ['$http', '$q', '$uibModal', 'StudyConfigService', '$sce', 'PermissionMatrixService', '$log', function ($http, $q, $uibModal, StudyConfigService, $sce, PermissionMatrixService, $log) {
    var srv = this;
    var _urls = {
        _get_open_queries: '/api/query/getopenquires',
        _get_closed_queries: '/api/query/getclosedquires',



        _get_comment_trail: '/api/query/getcommenttrail/',
        _get_all_comment_trails: '/api/query/getallcommenttrails',
        _get_num_open_queries: '/api/query/getnumopen',
        _get_num_closed_queries: '/api/query/getnumclosed',


        _get_num_queries_per_follw_up: '/api/query/getnumopenquriesperfollowup/',
        _get_open_queries_by_form: '/api/query/getopenqueriesbyform/',
        _get_closed_queries_by_form: '/api/query/getclosedqueriesbyform/',

        _get_open_queries_at_site: '/api/query/getsiteopenquires/',
        _get_closed_queries_at_site: '/api/query/getsiteclosedqueries/',
        _get_open_query_page_list: '/api/getopenquerypagelist/',
        _get_closed_query_page_list: '/api/getclosedquerypagelist/',
        _get_open_query_page_list_dm: '/api/getopenquerypagelist/',
        _get_closed_query_page_list_dm: '/api/getclosedquerypagelist/',
        _get_num_open_at_site: '/api/query/getnumopen/',
        _get_num_closed_at_site: '/api/query/getnumclosed/',
        _load_query_list: '/api/query/getquerylist',
        //_get_filtered_list_closed: '/api/query/getfilteredlistClosed',





        //unviersal
        _submit_query_comment: '/api/query/submitquerycomment',
        _submit_query: '/api/query/submitquery',
        _close_query: '/api/query/closequery',
        //Study level
        _get_study_queries: '/api/query/getstudylevelqueries',
        _get_study_queries_count: '/api/query/getcountstudylevelqueriestype',
        _get_all_queries: '/api/query/getallqueries',
        _get_count_all_queries: '/api/query/getallqueriescount',
        //site level
        _get_site_queries: '/api/getsitequieries/',
        _get_site_queries_count: '/api/getsitequieriescount/',
        //subject level
        _get_form_queries: '/api/query/getformqueries/',

    };

    //Data
    var _query_comment = {};
    var _open_queries = [];
    var _closed_queries = [];
    var _comment_trail = [];
    var _comment_trails = [];

    var _site_open_queries = [];
    var _site_closed_queries = [];
    var _filtered_list_open = [];
    var _filtered_list_closed = [];

    var _list_queries_by_form = [];

    var studyQueries = {};

    srv.getFormQueries = function (id) {
        return studyQueries[id];
    }

    srv.setFormQueriesById = function (queries, id) {
        studyQueries[id] = queries;
    }


    //Data Getters

    var _get_form_queries = function () {
        return _list_queries_by_form;
    };

    var _get_query_comment = function () {
        return _query_comment;
    };

    var _get_open_queries = function () {
        return _open_queries;
    };

    var _get_closed_queries = function () {
        return _closed_queries;
    };

    var _get_comment_trail = function () {
        return _comment_trail;
    }

    var _get_comment_trails = function () {
        return _comment_trails;
    }

    var _get_site_open_queries = function () {
        return _site_open_queries;
    };

    var _get_site_closed_queries = function () {
        return _site_closed_queries;
    };

    var _get_filtered_list_open = function () {
        return _filtered_list_open;
    };

    var _get_filtered_list_closed = function () {
        return _filtered_list_closed
    };

    //Posts
    var _submit_query_comment = function (queryComment) {
        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: StudyConfigService.getUrl(_urls._submit_query_comment),
            data: queryComment
        })
        .then(function success(response) {
            PermissionMatrixService.hasPermission('isDev') && $log.info(response);
            deferred.resolve(response.data);

        }, function errorr(response) {
            $log.error(response);

        });

        return deferred.promise;
    };

    var _submit_query = function (query) {
        var deferred = $q.defer();
        $http({
            method: 'POST',
            url: StudyConfigService.getUrl(_urls._submit_query),
            data: query
        })
        .then(function success(response) {
            PermissionMatrixService.hasPermission('isDev') && $log.info(response);
            //change this
            deferred.resolve(response.config.data.UniqueFormId);
            

        }, function errorr(response) {
            $log.error(response);

        });

        return deferred.promise;
    };

    var _close_query = function (query) {
        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: StudyConfigService.getUrl(_urls._close_query),
            data: query
        })
        .then(function success(response) {
            PermissionMatrixService.hasPermission('isDev') && $log.info(response);
            deferred.resolve(true);
        }, function errorr(response) {
            $log.error(response);
            deferred.reject(false);
        });

        return deferred.promise;
    };

    //reworked functions

    //study level
    var _load_all_queries = function () {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: StudyConfigService.getUrl(_urls._get_all_queries),

        })
        .then(function success(response) {
            PermissionMatrixService.hasPermission('isDev') && $log.info(response);
            deferred.resolve(response.data);
        }, function error(response) {
            $log.error(response);
        });

        return deferred.promise;
    };

    var _load_all_queries_count = function () {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: StudyConfigService.getUrl(_urls._get_count_all_queries),

        })
        .then(function success(response) {
            PermissionMatrixService.hasPermission('isDev') && $log.info(response);
            deferred.resolve(response.data);
        }, function error(response) {
            $log.error(response);

        });

        return deferred.promise;
    };

    var _load_num_study_queries_by_type = function () {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: StudyConfigService.getUrl(_urls._get_study_queries_count),

        })
        .then(function success(response) {
            PermissionMatrixService.hasPermission('isDev') && $log.info(response);
            deferred.resolve(response.data);
        }, function error(response) {
            $log.error(response);
        });

        return deferred.promise;
    };

    var _load_study_queries = function () {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: StudyConfigService.getUrl(_urls._get_study_queries),

        })
        .then(function success(response) {
            PermissionMatrixService.hasPermission('isDev') && $log.info(response);
            deferred.resolve(response.data);
        }, function error(response) {
            $log.error(response);

        });

        return deferred.promise;
    };

    //site level
    var _load_site_num_site_queries = function (siteId) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: StudyConfigService.getUrl(_urls._get_site_queries_count) + siteId,

        })
        .then(function success(response) {
            PermissionMatrixService.hasPermission('isDev') && $log.info(response);
            deferred.resolve(response.data);
        }, function error(response) {
            $log.error(response);

        });

        return deferred.promise;
    };

    var _load_site_queries = function (siteId) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: StudyConfigService.getUrl(_urls._get_site_queries) + siteId,

        })
        .then(function success(response) {
            PermissionMatrixService.hasPermission('isDev') && $log.info(response);
            deferred.resolve(response.data);
        }, function error(response) {
            $log.error(response);

        });

        return deferred.promise;
    }

    //subject level
    var _load_queries_by_form = function (UniqueFormId) {
        var deferred = $q.defer();
        var uniqueId = UniqueFormId;
        $http({
            method: 'GET',
            url: StudyConfigService.getUrl(_urls._get_form_queries) + UniqueFormId,

        })
            .then(function success(response) {
                srv.setFormQueriesById(response.data, uniqueId);
                PermissionMatrixService.hasPermission('isDev') && $log.info(response);
                angular.copy(response.data, _list_queries_by_form);
                deferred.resolve(response.data);

            }, function error(response) {
                $log.error(response);
                deferred.reject();
            });

        return deferred.promise;

    };

    //unversal
    var _load_query_list = function (filter) {
        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: StudyConfigService.getUrl(_urls._load_query_list),
            data: filter

        })
        .then(function success(response) {
            PermissionMatrixService.hasPermission('isDev') && $log.info(response);
            angular.copy(response.data, _filtered_list_open);

            deferred.resolve(response.data);
        }, function errorr(response) {
            $log.error(response);

        });

        return deferred.promise;
    };
    var _load_comment_trail = function (queryId) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: StudyConfigService.getUrl(_urls._get_comment_trail) + queryId,
        })
        .then(function success(response) {
            PermissionMatrixService.hasPermission('isDev') && $log.info(response);
            angular.copy(response.data, _comment_trail);
            deferred.resolve(response.data);
        }, function errorr(response) {
            $log.error(response);

        });

        return deferred.promise;
    };


    var _load_all_comment_trails = function (searchParams) {
        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: StudyConfigService.getUrl(_urls._get_all_comment_trails),
            data: searchParams

        })
        .then(function success(response) {
            PermissionMatrixService.hasPermission('isDev') && $log.info(response);
            angular.copy(response.data, _comment_trails);
            deferred.resolve(_comment_trails);
        }, function errorr(response) {
            $log.error(response);

        });

        return deferred.promise;
    };

    //modal functions
    //Query Comment Modal
    var _open_new_query_comment = function (queryId, queryOptions) {
        var templateString = 'Study/StudyTemplates/QueryCommentModal.html';
        var controllerString = 'QueryCommentCtrl';

        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: templateString,
            controller: controllerString,
            size: 'lg',
            resolve: {
                queryId: function () {
                    return queryId;
                },
                SYNCRONY_METADATA: ['DefaultMetaDataService', function (DefaultMetaDataService) {
                    return DefaultMetaDataService.getMetaData();
                }]
            }
        });

        modalInstance.result.then(function () {

        }, function () {
            $log.info("Modal Closed");
        });
    };


    //New Query modal
    var _open_new_query_modal = function (fieldName, fieldQuestion, fullPath, formId, subFormId, formName, fieldQueries, UniqueFormId, topLevelUniqId, queryReasons) {
        var templateString = 'Study/StudyTemplates/QueryWindow.html';
        var controllerString = 'QueryWindowCtrl';

        var QueryData = {
            fieldName: fieldName,
            fieldQuestion: fieldQuestion,
            fullPath: fullPath,
            formId: formId,
            subFormId: subFormId,
            formName: formName,
            UniqueFormId: UniqueFormId,
            topLevelUniqId: topLevelUniqId,
            fieldQueries: fieldQueries,
            queryReasons: queryReasons
        };
        _load_all_comment_trails(QueryData);
        var modalInstance = $uibModal.open({
            anmiation: true,
            templateUrl: templateString,
            controller: controllerString,
            size: 'lg',
            resolve: {
                QueryData: function () {
                    return QueryData;
                }
            }
        });

        modalInstance.result.then(function () {

        }, function () {
            $log.info("Modal Closed");
        });
    };

    //Query comment Audit trail
    var _open_comment_trail = function (queryId, queryOptions, selectedField) {
        var templateString = 'Study/StudyTemplates/QueryCommentModal.html';
        var controllerString = 'QueryCommentCtrl';

        var modalInstance = $uibModal.open({
            anmiation: true,
            templateUrl: templateString,
            controller: controllerString,
            size: 'lg',
            resolve: {
                queryId: function () {
                    return queryId;
                },
                queryOptions: function() {
                    return queryOptions
                },
                selectedField: function() {
                    return selectedField;
                },
                SYNCRONY_METADATA: ['DefaultMetaDataService', function (DefaultMetaDataService) {
                    return DefaultMetaDataService.getMetaData();
                }]
            }
        });

        modalInstance.result.then(function () {

        }, function () {
            $log.info("Modal Closed");
        });
    };


    //public getters
    return {
        GetQueryComment: _get_query_comment,
        GetOpenQueries: _get_open_queries,
        GetClosedQueries: _get_closed_queries,

        GetFormQueries: _get_form_queries,

        GetSiteOpenQueries: _get_site_open_queries,
        GetSiteClosedQueries: _get_site_closed_queries,
        GetFilteredListDM: _get_filtered_list_open,


        //comments
        LoadCommentTrail: _load_comment_trail,
        LoadAllCommentTrails: _load_all_comment_trails,
        GetCommentTrail: _get_comment_trail,
        GetCommentTrails: _get_comment_trails,
        OpenNewQueryComment: _open_new_query_comment,
        OpenQueryWindow: _open_new_query_modal,
        OpenCommentTrail: _open_comment_trail,
        //universal
        SubmitQuery: _submit_query,
        SubmitQueryComment: _submit_query_comment,
        CloseQuery: _close_query,
        LoadQueryList: _load_query_list,
        //study level
        LoadNumberStudyQueriesByType: _load_num_study_queries_by_type,
        LoadStudyQueries: _load_study_queries,
        LoadAllQueries: _load_all_queries,
        LoadNumberTotalQueres: _load_all_queries_count,
        //stite level
        LoadSiteQueryCount: _load_site_num_site_queries,
        LoadSiteQueries: _load_site_queries,
        //subject level
        LoadQueriesByForm: _load_queries_by_form,
        getFormQueries: srv.getFormQueries
        
    };

}]);
angular.module('app').factory('AuditService', ['$http', '$q', '$uibModal', 'StudyConfigService', '$sce', 'PermissionMatrixService', '$log', function ($http, $q, $uibModal, StudyConfigService, $sce, PermissionMatrixService, $log) {

    var _urls = {
        _getFormDataHistory: '/api/forms/getFormDataHistory/'
    }

    //data
    var _auditTrail = [];

    //getters
    var _get_form_audit_trail = function () {
        return _auditTrail;
    };

    //loaders
    var _load_form_audit_trail = function(uniqId) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: StudyConfigService.getUrl(_urls._getFormDataHistory) + uniqId,

        })
            .then(function success(response) {
                PermissionMatrixService.hasPermission('isDev') && $log.info(response);
                angular.copy(response.data, _auditTrail);
            }, function error(response) {
                $log.error(response);
                deferred.reject();
            });

        return deferred.promise;
    }

    var _empty_audit_trail = function() {
        _auditTrail = []
    }

    //modal controls
    var _open_field_audit_popup = function (fieldModelProp, fieldName, fieldMetadata) {
        
        var modalInstance = $uibModal.open( {
            animation: true,
            templateUrl: 'FormTemplates/FieldAuditTrail.html',
            controller: 'fieldAuditTrailController as fieldAuditCtrl',
            size: 'lg',
            resolve: {
                formAuditTrail: function () {
                    return _auditTrail;
                },
                fieldModelProp: function () {
                    return fieldModelProp;
                },
                fieldName: function () {
                    return fieldName;
                },
                fieldMetadata: function () {
                    return fieldMetadata;
                }
            }
        } );

        modalInstance.result.then( function () {
        }, function () {
            $log.info("Modal Closed");
        } )
    };


    //public Getters
    return {
        getFormAuditTrail: _get_form_audit_trail,

        loadFormAuditTrail: _load_form_audit_trail,

        openFieldAuditPopup: _open_field_audit_popup,
        
        emptyAuditTrail: _empty_audit_trail
    };

}]);
angular.module('app').service('QueryTransitService', [function () {
    var svr = this;

    var studyQueries = {};

    //svr.setStudyQueries = function (studyData) {
    //    studyData.forEach(function (crf) {
    //        svr.setQueryByForm(crf);
    //    });
    //}

    svr.setQueryByForm = function (crf) {
        studyQueries[crf.name] = crf;
    }

    svr.getQueryByFormName = function (crfName) {
        return studyQueries[crfName];
    }

}]);
angular.module('app')
    .service('SessionTransitService', ['$rootScope', '$cookies', 'WEB_CONFIG', '$http', 'PermissionMatrixService', 'jwtHelper', '$localstorage', 'FormDataTransitService', '$state', 'toaster', 'Rollbar',
        function ($rootScope, $cookies, WEB_CONFIG, $http, PermissionMatrixService, jwtHelper, $localstorage, FormDataTransitService, $state, toaster, Rollbar) {

            var srv = this;

            var previousRole;

            srv.sessionObj; // convert to local variable

            srv.getSessionObj = function () {
                return srv.sessionObj;
            }

            // Load the token and user credentials from local storage, check the authentication token and store the user information in the session
            srv.prepareSession = function () {
                var token = $localstorage.get('token');
                if (token && !jwtHelper.isTokenExpired(token)) {
                    if ($localstorage.getObject('activeRole').Name === 'Subject') {
                        srv.logout();
                        return
                    }
                    srv.sessionObj = {};
                    srv.sessionObj.expiration = jwtHelper.getTokenExpirationDate(token);
                    srv.sessionObj.CurrentUser = $localstorage.getObject('user');
                    srv.sessionObj.activeStudy = $localstorage.getObject('activeStudy');
                    srv.sessionObj.activeRole = $localstorage.getObject('activeRole');
                    srv.token = token;

                    $rootScope.username = srv.sessionObj.CurrentUser.UserName;
                    $http.defaults.headers.common.Authorization = "Bearer " + srv.token;
                    PermissionMatrixService.setRolePermission(srv.sessionObj.activeRole);
                    $rootScope.loggedIn = true;
                    $rootScope.isPermissionsSet = true;

                    document.title = 'Syncrony - ' + srv.sessionObj.activeStudy.Name;

                    // Add the current user info to the Rollbar payload
                    Rollbar.configure({
                        payload: {
                            person: {
                                id: srv.sessionObj.CurrentUser.Id,
                                username: srv.sessionObj.CurrentUser.UserName,
                                email: srv.sessionObj.CurrentUser.Email
                            }
                        }
                    });

                    //Rollbar.info('User session ready');
                    
                } else {
                    srv.logout();
                }
            }

            // Clear the local storage and all user information before displaying the login window
            srv.logout = function () {
                $state.go('home');
                $http.defaults.headers.common.Authorization = null;
                $localstorage.clear();
                srv.sessionObj = {};
                $rootScope.loggedIn = false;
                document.title = 'Syncrony';
                srv.token = '';
                FormDataTransitService.initServiceVariables();
                $rootScope.loginModal();
            };

            // Save new active study, set active role to default and refresh 
            srv.changeStudy = function (newStudy) {
                $localstorage.setObject('activeStudy', newStudy);
                $localstorage.setObject('activeRole', newStudy.Roles[0]);
            };

            // Save new active role
            srv.changeRole = function (newRole) {
                srv.sessionObj.activeRole = angular.copy(newRole);
                $localstorage.setObject('activeRole', srv.sessionObj.activeRole);
                PermissionMatrixService.setRolePermission(srv.sessionObj.activeRole);
                $rootScope.$broadcast('role-changed');
            };

            srv.changeToSubjectRole = function () {
                // should shift page-wrapper css class and hide sidebar completely
                subjectRole = srv.sessionObj.activeStudy.Roles.find(function (role) {
                    return role.Name === 'Subject';
                });
                if (subjectRole) {
                    previousRole = previousRole || angular.copy(srv.sessionObj.activeRole);
                    srv.changeRole(subjectRole);
                }
            };

            srv.changeToPreviousRole = function () {
                if (previousRole) srv.changeRole(previousRole);
                previousRole = null;
            }

            // When idle period is passed, logout user
            ifvisible.on("idle", function () {
                if ($rootScope.loggedIn && ifvisible.getIdleInfo().timeLeft <= 0) {
                    console.log('idle');
                    srv.logout();
                    toaster.warning('Warning', 'You were inactive for more than ' + WEB_CONFIG.SESSION_IDLE_TIMEOUT + ' minutes, please log back in');
                }
            });

            // Explain to the user that has been away why he isn't logged in anymore
            ifvisible.on("focus", function () {
                if (!$rootScope.loggedIn && ifvisible.getIdleInfo().timeLeft <= 0) {
                    toaster.info('Welcome back!', 'You were inactive for more than ' + WEB_CONFIG.SESSION_IDLE_TIMEOUT + ' minutes, please log back in');
                }
            });

            // Show a warning when approaching end of token session
            setInterval(function () {
                if ($rootScope.loggedIn) {
                    srv.sessionObj.minutesLeft = Math.floor((srv.sessionObj.expiration - new Date()) / 60000);
                    if (srv.sessionObj.minutesLeft <= WEB_CONFIG.SESSION_WARNING_START && srv.sessionObj.minutesLeft >= 0) {
                        var spellingIsImportant = srv.sessionObj.minutesLeft >= 2 ? ' minutes' : ' minute';
                        toaster.warning('', 'Your session will end in ' + srv.sessionObj.minutesLeft + spellingIsImportant + ', please make sure your work is saved', WEB_CONFIG.SESSION_WARNING_DURATION * 1000);
                    }
                }
            }, WEB_CONFIG.SESSION_WARNING_INTERVAL * 1000);


    }]);
angular.module('app')
    .service('PermissionMatrixService', function () {
        var srv = this;

        var rolePermissions; // set as an object, based on the user role

        srv.setRolePermission = function (role) {
            rolePermissions = JSON.parse(role.JsonPermissions);
        }

        srv.getRolePermissions = function () {
            return rolePermissions;
        }

        srv.hasPermission = function (action) {
            if (rolePermissions) return rolePermissions[action];
            else return false;
        }

        // used for testing only
        srv.setPermissionToNull = function () {
            rolePermissions = {};
        }

    });

var template = {
    adminPortalAccess: 0,
    createSubject: 0,
    updateSubject: 0,
    readSubject: 0,
    updateSubjectStatus: 0,
    readSubjectStatus: 0,
    createFormData: 0,
    updateFormData: 0,
    readFormData: 0,
    signOn: 0,
    signOff: 0,
    signCasebook: 0,
    createQuery: 0,
    createQueryComment: 0,
    closeQuery: 0,
    closeManyQueries: 0,
    readQuery: 0,
    readStudyQueries: 0,
    verifyOn: 0,
    verifyOff: 0,
    freezeOn: 0,
    freezeOff: 0,
    lockOn: 0,
    lockOff: 0,
    print: 0,
    dataExport: 0,
    setStandardReports: 0,
    runStandardReports: 0,
    reportingToolsAccess: 0,
    readAuditTrail: 0,
    createSite: 0,
    readSite: 0,
    updateSite: 0,
    deleteSite: 0,
    updateLogin: 0,
    updatePassword: 0,
    updateStudy: 0,
    createStudy: 0,
    readStudy: 0,
    createUser: 0,
    readUser: 0,
    updateUser: 0,
    deactivateUser: 0,
    deactivateStudy: 0,
    archiveStudy: 0,
    createRole: 0,
    updateRole: 0,
    deletedRole: 0,
    readRole: 0,
    createDiscussion: 0,
    readDiscussion: 0,
    updateDiscussion: 0,
    manageAccess: 0,
    manageStudyBuilders: 0,
    manageAdministrators: 0,
    uploadStudy: 0
}
angular.module('app').service('StudyConfigService', ['WEB_CONFIG', '$http', 'APP_CONFIG', '$log', '$rootScope', 'SessionTransitService', '$localstorage',
        function (WEB_CONFIG, $http, APP_CONFIG, $log, $rootScope, SessionTransitService, $localstorage) {

    var srv = this;

    srv.loadSettings = function () {
        return $http.get(srv.getUrl(APP_CONFIG.API_ENDPOINTS.STUDY_SETTINGS, !$rootScope.loggedIn))
            .then(function (response) {
                $localstorage.setObject('StudyConfigData', response.data)
            })
            .catch(function (error) {
                $log.error("catch block of loadsettings", error);
            });

    };

    srv.getUrl = function (endpoint, notStudySpecific) {
        var studyNameParam = '';
        if (!notStudySpecific) {
            studyNameParam = SessionTransitService.getSessionObj().activeStudy.ID;
            if (endpoint.endsWith('/')) {
                studyNameParam = studyNameParam + '/';
            } else {
                studyNameParam = '/' + studyNameParam;
            }
        }
        return WEB_CONFIG.BASE_URL + endpoint + studyNameParam;
    }

    // not fully implememted, sending the object to the backend and logging it.
    srv.saveSettings = function (studySettings) {
        return $http({
            method: 'POST',
            url: srv.getUrl(APP_CONFIG.API_ENDPOINTS.STUDY_SETTINGS_CREATE),
            data: studySettings
        }).then(function success(success) {
            console.log(success);
        }, function error(error) {
            console.log(error);
        });
    }

    srv.saveFormTemplate = function (formTemplate) {
        return $http({
            method: 'POST',
            url: srv.getUrl(EDC_CONSTANTS.SERVICE_URLS.SAVE_TEMPLATE_URL),
            data: formTemplate
        })
        .then(function success(response) {
            PermissionMatrixService.hasPermission('isDev') && $log.info(response);

        }, function error(response) {
            toaster.error(data.statusText, data.data);

        });
    }

    srv.setMetaData = function (object) {
        metaData = object;
    }

    srv.setMetaDataByProperty = function (property, object) {
        $localstorage.getObject('StudyConfigData')[property] = object;
    }

    srv.getMetaData = function () {
        return $localstorage.getObject('StudyConfigData');
    }

    srv.getMetaDataByProperty = function (property) {
        return $localstorage.getObject('StudyConfigData')[property];
    }

    //srv.getCustomRole = function (role) {
    //    if (!metaData.permission.customRoles) {
    //        return;
    //    }

    //    for (idx; idx < metaData.permission.customRoles.length; idx) {
    //        customRole = metaData.permission.customRoles[idx];
    //        if (customRole[role]) {
    //            return customRole[role];
    //        }
    //    }
    //}

    srv.getStudyStatuses = function () {
        var activeStatuses = [];
        $localstorage.getObject('StudyConfigData').statuses.forEach(function (s) {
            if ($localstorage.getObject('StudyConfigData').activeStatuses.indexOf(s.value) !== -1) activeStatuses.push(s);
        });
        return activeStatuses;
    }


}]);

var studyConfigObjectTemplate = {
        "subject": {
            "idFormat": [
                ["NY-"],
                ["SiteNumber"],
                ["-"],
                ["CurrentTime", ".getFullYear()", 2, 4],
                ["-"],
                ["Investigator", 0, 3],
                ["--"],
                ["Autoincrement"],
                ["-.-"],
                ["CurrentTime", ".getMilliseconds()"]
            ],
            "minAge": 18,
            "consent": true,
            "monthFormat": [{
                "name": "January",
                "number": 1
            },
                {
                    "name": "Febuary",
                    "number": 2
                },
                {
                    "name": "March",
                    "number": 3
                },
                {
                    "name": "April",
                    "number": 4
                },
                {
                    "name": "May",
                    "number": 5
                },
                {
                    "name": "June",
                    "number": 6
                },
                {
                    "name": "July",
                    "number": 7
                },
                {
                    "name": "August",
                    "number": 8
                },
                {
                    "name": "September",
                    "number": 9
                },
                {
                    "name": "October",
                    "number": 10
                },
                {
                    "name": "November",
                    "number": 11
                },
                {
                    "name": "December",
                    "number": 12
                }
            ]
        },
        "permissions": {
            "Investigator": {
                "dataExport": 1,
                "createSubject": 1,
                "updateSubject": 1,
                "readSubject": 1,
                "updateSubjectStatus": 1,
                "readSubjectStatus": 1,
                "createFormData": 1,
                "updateFormData": 1,
                "readFormData": 1,
                "signForm": 1,
                "signOn": 1,
                "signOff": 1,
                "signCasebook": 1,
                "createQueryComment": 1,
                "readQuery": 1,
                "print": 1,
                "readAuditTrail": 1,
                "readSite": 1,
                "readEnrollmentByInvestigator": 1
            },
            "Research Associate": {
                "createSubject": 1,
                "updateSubject": 1,
                "readSubject": 1,
                "updateSubjectStatus": 1,
                "readSubjectStatus": 1,
                "createFormData": 1,
                "updateFormData": 1,
                "readFormData": 1,
                "createQueryComment": 1,
                "readQuery": 1,
                "print": 1,
                "readAuditTrail": 1,
                "readSite": 1
            },
            "monitor": {},
            "Data Manager": {
                "signOn": 1,
                "signOff": 1,
                "readSubject": 1,
                "readSubjectStatus": 1,
                "readFormData": 1,
                "createQuery": 1,
                "createQueryComment": 1,
                "closeQuery": 1,
                "readQuery": 1,
                "readStudyQueries": 1,
                "readAuditTrail": 1,
                "verifyOn": 1,
                "verifyOff": 1,
                "freezeOn": 1,
                "freezeOff": 1,
                "lockOn": 1,
                "lockOff": 1,
                "print": 1,
                "dataExport": 1,
                "setStandardReports": 1,
                "runStandardReports": 1,
                "readUser": 1,
                "readRole": 1,
                "readEnrollmentBySite": 1
            },
            "sponsorProjectManager": {},
            "readOnly": {},
            "studyBuilder": {},
            "admin": {},
            "global": {}
        },
        "sidePanel": {
            "showSidePanel": true,
            "showStatus": true,
            "showQueries": false,
            "showDescription": false,
            "showComments": false,
            "showAudit": true
        },
        "statusBar": {
            "showAllFieldsSelector": false,
            "showAllFieldsButtons": false
        },
        "dashboard": {
            "title": "Study Dashboard",
            "widgets": {
                "subjectList": {
                    "show": true
                },
                "doughnutGraph": {
                    "titles": "something",
                    "data": "something",
                    "labels": "something"
                },
                "barGraph": {
                    "titles": "something",
                    "data": "something",
                    "labelsX": "something",
                    "labelsY": "something"
                }
            }
        },
        "defaultDataSaveReason": "New Data",
        "dataSaveReasons": ["New Data", "Respond to Query", "Data Entry Error"],
        "activeStatuses": ["Sign"],
        "statuses": [{
            "value": "Verify",
            "fieldProperty": "Verify",
            "formProperty": "IsVerified",
            "canToggleOn": 0,
            "canToggleOff": 0,
            "actionOn": "verifyOn",
            "actionOff": "verifyOff"
            },
            {
                "value": "Freeze",
                "fieldProperty": "Freeze",
                "formProperty": "IsFrozen",
                "canToggleOn": 0,
                "canToggleOff": 0,
                "actionOn": "freezeOn",
                "actionOff": "freezeOff"
            },
            {
                "value": "Lock",
                "fieldProperty": "Lock",
                "formProperty": "IsLocked",
                "canToggleOn": 0,
                "canToggleOff": 0,
                "actionOn": "lockOn",
                "actionOff": "lockOff"
            },
            {
                "value": "Sign",
                "fieldProperty": "Sign",
                "formProperty": "IsSignedOff",
                "canToggleOn": 0,
                "canToggleOff": 0,
                "actionOn": "signOn",
                "actionOff": "signOff"
            }
        ],
        "forms": {
            "fieldDefaults": {

            },

        },
        "settings": {
            "econsent": true
        }

    }

var defaultPermissions = {
    adminPortalAccess: 0,
    createSubject: 0,
    updateSubject: 0,
    readSubject: 0,
    updateSubjectStatus: 0,
    readSubjectStatus: 0,
    createFormData: 0,
    updateFormData: 0,
    readFormData: 0,
    signOn: 0,
    signOff: 0,
    signCasebook: 0,
    createQuery: 0,
    createQueryComment: 0,
    closeQuery: 0,
    closeManyQueries: 0,
    readQuery: 0,
    readStudyQueries: 0,
    verifyOn: 0,
    verifyOff: 0,
    freezeOn: 0,
    freezeOff: 0,
    lockOn: 0,
    lockOff: 0,
    print: 0,
    dataExport: 0,
    setStandardReports: 0,
    runStandardReports: 0,
    reportingToolsAccess: 0,
    readAuditTrail: 0,
    createSite: 0,
    readSite: 0,
    updateSite: 0,
    deleteSite: 0,
    updateLogin: 0,
    updatePassword: 0,
    updateStudy: 0,
    createStudy: 0,
    readStudy: 0,
    createUser: 0,
    readUser: 0,
    updateUser: 0,
    deactivateUser: 0,
    deactivateStudy: 0,
    archiveStudy: 0,
    createRole: 0,
    updateRole: 0,
    deletedRole: 0,
    readRole: 0,
    createDiscussion: 0,
    readDiscussion: 0,
    updateDiscussion: 0,
    manageAccess: 0,
    manageStudyBuilders: 0,
    manageAdministrators: 0,
}

// nonValidJson example for future development (valid JSON example at end of file)
var metaDataExample = {
    subject: {
        defaultObject: {
            Consent: "",
            BirthDate: "",
            SiteID: "",
            AddressID: "",
            Investigator: "",
            ConsentData: {},
            SubjectData: {}
        },
        idFormat: [
            ["NY-"],
            ["SiteNumber"],
            ["-"],
            ["CurrentTime", ".getFullYear()", 2, 4],
            ["-"],
            ["Investigator", 0, 3],
            ["--"],
            ["Autoincrement"],
            ["-.-"],
            ["CurrentTime", ".getMilliseconds()"]
        ],
        minAge: 18,
        consent: true
        // monthFormat: standardMonthFormat
    },
    permissions: {
        "Investigator": {
            createSubject: 1,
            updateSubject: 1,
            readSubject: 1,
            updateSubjectStatus: 1,
            readSubjectStatus: 1,
            createFormData: 1,
            updateFormData: 1,
            readFormData: 1,
            signForm: 1,
            signOn: 1,
            signOff: 1,
            signCasebook: 1,
            createQueryComment: 1,
            readQuery: 1,
            print: 1,
            readAuditTrail: 1,
            readSite: 1,
            readEnrollmentByInvestigator: 1
        },
        "Research Associate": {
            createSubject: 1,
            updateSubject: 1,
            readSubject: 1,
            updateSubjectStatus: 1,
            readSubjectStatus: 1,
            createFormData: 1,
            updateFormData: 1,
            readFormData: 1,
            createQueryComment: 1,
            readQuery: 1,
            print: 1,
            readAuditTrail: 1,
            readSite: 1
        },
        monitor: {},
        "Data Manager": {
            readSubject: 1,
            readSubjectStatus: 1,
            readFormData: 1,
            createQuery: 1,
            createQueryComment: 1,
            closeQuery: 1,
            readQuery: 1,
            readStudyQueries: 1,
            readAuditTrail: 1,
            verifyOn: 1,
            verifyOff: 1,
            freezeOn: 1,
            freezeOff: 1,
            lockOn: 1,
            lockOff: 1,
            print: 1,
            dataExport: 1,
            setStandardReports: 1,
            runStandardReports: 1,
            readUser: 1,
            readRole: 1,
            readEnrollmentBySite: 1
        },
        sponsorProjectManager: {},
        readOnly: {},
        studyBuilder: {},
        admin: {},
        global: {}
    },
    sidePanel: {
        showSidePanel: false,
        showStatus: false,
        showQueries: false,
        showDescription: false,
        showComments: false,
        showAudit: true
    },
    statusBar: {
        showAllFieldsSelector: false,
        showAllFieldsButtons: false
    },
    dashboard: {
        title: "Study Dashboard",
        widgets: { // not hooked up, concept for the future
            subjectList: {
                show: true
            },
            doughnutGraph: {
                titles: "something",
                data: "something",
                labels: "something"
            },
            barGraph: {
                titles: "something",
                data: "something",
                labelsX: "something",
                labelsY: "something"
            }
        }
    },
    defaultDataSaveReason: "New Data",
    dataSaveReasons: ["New Data", "Respond to Query", "Data Entry Error"],
    activeStatuses: ["Sign"],
    statuses: [
                {
                    value: "Verify", // variable for the display name
                    fieldProperty: "Verify", // key name of bool on status field
                    formProperty: "IsVerified", // key name of bool on form
                    //read: [
                    //    "isSite"
                    //],
                    //write: [
                    //    "isManager"
                    //],
                    canToggleOn: 0, // this will be passed by angular as undefined
                    canToggleOff: 0,
                    actionOn: "verifyOn",
                    actionOff: "verifyOff"
                },
                {
                    value: "Freeze",
                    fieldProperty: "Freeze",
                    formProperty: "IsFrozen",
                    //read: [
                    //    "isSite"
                    //],
                    //write: [
                    //    "isManager"
                    //],
                    canToggleOn: 0,
                    canToggleOff: 0,
                    actionOn: "freezeOn",
                    actionOff: "freezeOff"
                },
                {
                    value: "Lock",
                    fieldProperty: "Lock",
                    formProperty: "IsLocked",
                    //read: [
                    //    "isSite"
                    //],
                    //write: [
                    //    "isManager"
                    //],
                    canToggleOn: 0,
                    canToggleOff: 0,
                    actionOn: "lockOn",
                    actionOff: "lockOff"
                },
                {
                    value: "Sign",
                    fieldProperty: "Sign",
                    formProperty: "IsSignedOff",
                    //read: [
                    //    "isSite"
                    //],
                    //write: [
                    //    "isManager"
                    //],
                    canToggleOn: 0,
                    canToggleOff: 0,
                    actionOn: "signOn",
                    actionOff: "signOff"
                }
    ],
    forms: {
        fieldDefaults: {
            // a copy of the DefaultMetaDataProvider to stand in between that and FormBuilderDTO as client's study-wide field defaults
        }
    },

    //added for econsent check

    settings: {
        econsent: true
    }

}
angular.module('app').service('LibrarianService', ['Library', function (Library) {
    var srv = this;

    srv.getLibrary = function () {
        return Library;
    }

    srv.getExcelNames = function (property) {
        var excelNames = [];
        var names = Object.keys(Library[property]);

        names.forEach(function (name) {
            var excelName = Library[property][name].excelName;
            excelName && excelNames.push(excelName);
        });
        return excelNames;
    }

    srv.getExcelToTypeMap = function (property) {
        var map = {};
        var names = Object.keys(Library[property]);
       
        names.forEach(function (name) {
            var excelName = Library[property][name].excelName;
            var type = Library[property][name].metaDataType;
            if (excelName && type) map[excelName] = type;
        });
        return map;
    }

    srv.getInputChildObject = function (input, property) {
        var names = Object.keys(Library.inputDirectives);
        for (var idx = 0; idx <= names.length; idx++) {
            name = names[idx];
            if (Library.inputDirectives[name].excelName === input || Library.inputDirectives[name].metaDataType === input) {
                if (Library.inputDirectives[name][property]) {
                    return Library.inputDirectives[name][property];
                }
                return null;
            }
        }
    }

    srv.getObjectRecursively = function (properties, obj, idx) {
        idx = idx || 0;
        obj = obj || Library;

        for (idx; idx <= properties.length; idx) {
            if (idx === properties.length) {
                return obj;
            }

            var property = properties[idx];

            if (obj[property]) {
                var obj = obj[property];
            }
            
            return this.getObjectRecursively(properties, obj, ++idx);
        }
    }

    srv.getHtmlAttributes = function () {
        return Library.html.inputAttributes;
    }

    srv.getExcelSheetTerms = function () {
        return Library.excelSheet;
    }

    srv.getFormAttributesMap = function () {
        return Library.formAttributes;
    }

}]);
angular.module('app')
    .service('brandingService', ['StudyConfigService', '$rootScope', 'APP_CONFIG', '$http', 'toaster', 'WEB_CONFIG',
        function (StudyConfigService, $rootScope, APP_CONFIG, $http, toaster, WEB_CONFIG) {
            var srv = this;

            var numberOrImages = 9;
            
            $rootScope.branding = {
                productLogoUrl: 'content/img/syncrony_logo_white.png',
                productSigninLogoUrl: 'content/img/syncrony_logo_color.png',
                companyLogoUrl: 'content/img/syntech_logo_2.png',
                backgroundUrl: 'content/img/stethoscope.png',
                copyrightText: '©Copyright 2015-2017 Syntactx Technologies™. All rights reserved.',
                productVersionNumber: WEB_CONFIG.VERSION_PRODUCT,
                frontendVersionNumber: WEB_CONFIG.VERSION_FRONTEND,
                releaseDate: WEB_CONFIG.RELEASE_DATE
            }

            srv.cycleBackground = function () {
                var rand = Math.round(Math.random() * (numberOrImages - 1) + 1);
                $rootScope.branding.backgroundUrl = 'content/backgrounds/' + rand + '.jpg';
                document.getElementsByTagName("body")[0].style.background = 'linear-gradient(rgba(255,255,255,.2), rgba(255,255,255,.2)), url("' + $rootScope.branding.backgroundUrl + '")';
                document.getElementsByTagName("body")[0].style.backgroundAttachment = 'fixed';
                document.getElementsByTagName("body")[0].style.backgroundSize = 'cover';
            }

            srv.loadBranding = function () {
                $http.get(StudyConfigService.getUrl(APP_CONFIG.API_ENDPOINTS.STUDY_BRANDING, true))
                    .then(function (response) {
                        if (response.data.productLogoId) $rootScope.branding.productLogoUrl = APP_CONFIG.IMAGE_REPOSITORY_URL + response.data.productLogoId;
                        if (response.data.productSigninLogoId) $rootScope.branding.productSigninLogoUrl = APP_CONFIG.IMAGE_REPOSITORY_URL + response.data.productSigninLogoId;
                        if (response.data.companyLogoId) $rootScope.branding.companyLogoUrl = APP_CONFIG.IMAGE_REPOSITORY_URL + response.data.companyLogoId;
                        if (response.data.backgroundId) $rootScope.branding.backgroundUrl = APP_CONFIG.IMAGE_REPOSITORY_URL + response.data.backgroundId;
                        if (response.data.copyrightText) $rootScope.branding.copyrightText = response.data.copyrightText;
                        $rootScope.branding.APIVersionNumber = response.data.VersionNumber;
                    }).catch(function (data) {
                        toaster.error(data.statusText, data.data);
                    });
                srv.cycleBackground();
            }

            srv.loadBranding();
            
        }]);
angular.module('app')
    .service('authInterceptor', ['$q', 'toaster', '$rootScope', '$state', '$log',
        function ($q, toaster, $rootScope, $state, $log) {
            var srv = this;
           
            srv.responseError = function (response) {
                if (response.status == 401 || response.status == 403) {
                    $rootScope.previousUser = $rootScope.username;
                    toaster.info('', 'Your session timed-out, please log back in');
                    $rootScope.loginModalPromise()
                        .result
                        .then(function close(params) {
                            params.$value && $state.go('home');
                        })
                        .finally(function () {
                            $rootScope.loginIsOpened = false;
                        });
                } else if (response.status == -1) {
                    toaster.error('Error', 'Server unreachable');
                }
                $log.error(response);
                return $q.reject(response);
            };
        }]);

//window.onerror = function (message, file, line, col, error) {
//    $log.error(message);
//    return false;
//};
angular.module('app').factory('CustomDataService', function ($http, $q, $uibModal, StudyConfigService, PermissionMatrixService, $log) {

    //var $injector = angular.injector( ['$scope'] );

    //constants
    var _urls = {
        _load_custom_data: "/api/user/loadcustomdata"
    };

    var _load_custom_data = function ( queryName, queryParams ) {
        var deferred = $q.defer();

        var dataObj = {
            queryName: queryName,
            queryParams: queryParams
        } 
        $http( {
            method: 'POST',
            url: StudyConfigService.getUrl(_urls._load_custom_data),
            data: dataObj

        } )
            .then( function success( response ) {
                PermissionMatrixService.hasPermission('isDev') && $log.info(response.data);
                deferred.resolve( response.data );
            }, function error( response ) {
                $log.error( response );
                deferred.reject();
            } );

        return deferred.promise;
    }
    
    //Public Getters
    return {
        LoadCustomData: _load_custom_data
    };

} );

angular.module('app').factory('RedirectionService', function (PermissionMatrixService, $log) {
    var _forms = [];

    //var _push_forms = function ( formTypeId, formUrl,isFollowUp ) {
    //    _forms.push( { FormTypeId: formTypeId, FormUrl: formUrl, isFollowUp } );
    //}

    var _push_forms = function ( RedirectionInfo ) {
        PermissionMatrixService.hasPermission('isDev') && $log.info("_forms", RedirectionInfo);
        $log.info(RedirectionInfo);
        _forms = RedirectionInfo;
        
    }

    var _get_url = function ( formTypeId ) {
        for ( var i = 0; i < _form.length; i++ )
        {
            if(_form[i].FormTypeId === formTypeId)
            {
                return _forms[i];
            }
        }
    };

    var _get_forms = function () {
        return _forms;
    }


    var _deep_link = function ( FormInfo ) {

        var Forms = _get_forms();
        //var form = {};

        for (var i = 0; i < Forms.length;i++)
        {
            if ( FormInfo.FormId == Forms[i].FormTypeId )
            {
                window.location.href = Forms[i].FormUrl + FormInfo.SubjectId + '&formid=' + FormInfo.UniqueFormId;
            }
        }


        //for ( var i = 0; i < redirectionData.length; i++ )
        //{
        //    if(FormInfo.FormTypeId == redirectionData[i].FormTypeId)
        //    {
        //        form = redirectionData[i]
        //    }
        //}
        //if ( redirectionData.isProcedureBased )
        //{
        //    if ( redirectionData.isFollowUp )
        //    {
        //        window.location.href = redirectionData.FormUrl + procuredId + '&refnum=' + subjectId + '&formid=' + TopLevelUniqId;
        //    }
        //    else
        //    {
        //        window.location.href = redirectionData.FormUrl + procuredId + '&refnum=' + subjectId;
        //    }
        //}


        //if(redirectionData.isFollowUp)
        //{
        //    window.location.href = redirectionData.FormUrl + subjectId + '&formid=' + uniqueFormId;
        //}
        //else
        //{
        //    window.location.href = redirectionData.FormUrl + subjectId;
        //}


    };

    return {
        PushForms:_push_forms,
        GetForms: _get_forms,

        DeepLink: _deep_link
    };


} );
angular.module('app')
    .service('routeService', ['$state', '$window', '$sce',
        function ($state, $window, $sce) {
            var srv = this;

            srv.setRoute = function (name, url, template, controller) {
                var state = $state.get(name);
                if (state) {
                    state.url = url;
                    state.controller = controller;
                    state.templateUrl = $sce.trustAsResourceUrl($window.baseUrl + template);
                } else {
                    $stateProviderRef
                        .state(name, {
                            url: url,
                            controller: controller,
                            templateUrl: $sce.trustAsResourceUrl($window.baseUrl + template)
                        });
                }
            }

        }]);

angular.module('app')
    .service('loadIndicatorService', ['$q', '$rootScope', function ($q, $rootScope) {
        var requests = 0;

        function show() {
            if (!requests) {
                $rootScope.$broadcast('loading-start');
            }
            return ++requests;
        }

        function hide() {
            requests--;
            if (!requests) {
                $rootScope.$broadcast('loading-stop');
            }
            return requests;
        }

        return {
            'request': function (config) {
                show();
                return $q.when(config);
            },
            'response': function (response) {
                hide();
                return $q.when(response);
            },
            'responseError': function (rejection) {
                hide();
                return $q.reject(rejection);
            },

            'startLoading': function () {
                show();
            },

            'stopLoading': function () {
                hide();
            }

        }
}]);
angular.module('app')
    .service('promiseService', ['FormService', '$stateParams', 'StudyConfigService','FormTemplateService', '$rootScope', '$state', 'DefaultMetaDataService', 'UserService',
        function (FormService, $stateParams, StudyConfigService, FormTemplateService, $rootScope, $state, DefaultMetaDataService, UserService) {
            var srv = this;

            // identifies the location of data which should be populated by each promise, but could be empty
            var promiseDataMapper = {
                SubjectSummary: FormService.GetSubjectSummary(),
                FormTemplates: FormTemplateService.metaDataObject,
                GetTemplate: FormTemplateService.metaDataObject,
                GetMetaData: DefaultMetaDataService.getMetaDataByProperty("metaData"),
                LoadAllSites: UserService.GetAllSites(),
            };

            // empty checker
            function isEmpty(element) {
                var conditions = [
                    angular.equals(element, {}),
                    angular.equals(element, undefined),
                    angular.equals(element, [])
                ];

                return conditions.indexOf(true) > -1;
            }

            // map verifyOrLoadData() args to corresponding promises
            // must be passed $stateParams from resolve block, as $stateParams cannot be reliably 
            // injected in this service (though no amount of research says why)
            // REFACTOR POSSIBILITY: can/should these promises be dynamically created based on input (i.e. FormService + LoadSubject Summary + etc.)
            var promiseMapper = {
                // SubjectSummary is a promise like others currently in the subject controller that need more than an empty checker,
                // they have to make sure certain information is correct, not just previously loaded (more notes in routeConfig file, summary route)
                //SubjectSummary: function(args) {
                //    return FormService.LoadSubjectSummary.apply(null, [args]); 
                //},
                FormTemplates: function () {
                    return FormTemplateService.getAll();
                },
                GetTemplate: function (args) {
                    return FormTemplateService.getTemplate.apply(null, [args]);
                },
                GetMetaData: function (args) {
                    return DefaultMetaDataService.getMetaData();
                },
                LoadAllSites: function() {
                    return UserService.LoadAllSites();
                }
            }

            // takes either string as keyword for promise
            // or array of two args: fist is keyword for promise, second is singel arg or array of args for promise
            // returns Promise.all([promise collection]) for routers resolve block
            srv.verifyOrLoadData = function (requestObj) {
                var self = this;

                var promises = [];

                if (requestObj.loginAgnosticdata) requestObj.loginAgnosticdata.forEach(function (requestKey) {
                    // nothing needs this yet
                });

                if (requestObj.loginRequiredData) requestObj.loginRequiredData.forEach(function (requestKey) {
                    if ($rootScope.loggedIn) {

                        // pass arguements if any
                        angular.isArray(requestKey) ? verifyOrPushPromise(requestKey[0], requestKey[1]) : verifyOrPushPromise(requestKey);

                    }
                })
                
                function verifyOrPushPromise(promiseKeyword, args) {

                    // check if data location is empty
                    if (isEmpty(promiseDataMapper[promiseKeyword])) { 

                        promises.push(promiseMapper[promiseKeyword](args));

                    }

                };

                return Promise.all(promises);
            };

        }]);
angular.module('app')
    .service('ReportingService', ['StudyConfigService', '$rootScope', 'APP_CONFIG', '$http', 'toaster',
        function (StudyConfigService, $rootScope, APP_CONFIG, $http, toaster) {
            var srv = this;

            srv.getReports = function (success) {
                $http.get(StudyConfigService.getUrl(APP_CONFIG.API_ENDPOINTS.REPORTING_GET_REPORTS))
                    .then(function (response) {
                        success(response.data);
                    }).catch(function (data) {
                        toaster.error(data.statusText, data.data);
                    });
            }

            srv.getDashboards = function (success) {
                $http.get(StudyConfigService.getUrl(APP_CONFIG.API_ENDPOINTS.REPORTING_GET_DASHBOARDS))
                    .then(function (response) {
                        success(response.data);
                    }).catch(function (data) {
                        toaster.error(data.statusText, data.data);
                    });
            }

            srv.getTiles = function (dashboardId, success) {
                $http.get(StudyConfigService.getUrl(APP_CONFIG.API_ENDPOINTS.REPORTING_GET_TILES) + dashboardId)
                    .then(function (response) {
                        success(response.data);
                    }).catch(function (data) {
                        toaster.error(data.statusText, data.data);
                    });
            }

            srv.getReport = function (reportId, success) {
                $http.get(StudyConfigService.getUrl(APP_CONFIG.API_ENDPOINTS.REPORTING_GET_REPORT) + reportId)
                    .then(function (response) {
                        // Read embed application token from Model
                        var accessToken = response.data.EmbedToken.token;

                        // Read embed URL from Model
                        var embedUrl = response.data.EmbedUrl;

                        // Read report Id from Model
                        var embedReportId = response.data.Id;

                        // Get models. models contains enums that can be used.
                        var models = window['powerbi-client'].models;

                        // Embed configuration used to describe the what and how to embed.
                        // This object is used when calling powerbi.embed.
                        // This also includes settings and options such as filters.
                        // You can find more information at https://github.com/Microsoft/PowerBI-JavaScript/wiki/Embed-Configuration-Details.
                        var config = {
                            type: 'report',
                            tokenType: models.TokenType.Embed,
                            accessToken: accessToken,
                            embedUrl: embedUrl,
                            id: embedReportId,
                            permissions: models.Permissions.All,
                            settings: {
                                filterPaneEnabled: true,
                                navContentPaneEnabled: true
                            },
                            //viewMode: models.ViewMode.Edit
                        };

                        success(config);
                    }).catch(function (data) {
                        toaster.error(data.statusText, data.data);
                    });
            }

            srv.getTile = function (dashboardId, tileId, success) {
                $http.get(StudyConfigService.getUrl(APP_CONFIG.API_ENDPOINTS.REPORTING_GET_TILE) + dashboardId + '/' + tileId)
                    .then(function (response) {
                        // Read embed application token from Model
                        var accessToken = response.data.EmbedToken.token;

                        // Read embed URL from Model
                        var embedUrl = response.data.EmbedUrl;

                        // Read report Id from Model
                        var embedTileId = response.data.Id;

                        // Get models. models contains enums that can be used.
                        var models = window['powerbi-client'].models;

                        // Read dashboard Id from Model
                        var embedDashboardeId = response.data.dashboardId;

                        // Embed configuration used to describe the what and how to embed.
                        // This object is used when calling powerbi.embed.
                        // This also includes settings and options such as filters.
                        // You can find more information at https://github.com/Microsoft/PowerBI-JavaScript/wiki/Embed-Configuration-Details.
                        var config = {
                            type: 'tile',
                            tokenType: models.TokenType.Embed,
                            accessToken: accessToken,
                            embedUrl: embedUrl,
                            id: embedTileId,
                            dashboardId: embedDashboardeId
                        };

                        success(config);
                    }).catch(function (data) {
                        toaster.error(data.statusText, data.data);
                    });
            }

        }]);
angular.module('app').service('FormDataTransitService', [function () {
    var srv = this;

    var currentSubjectId = null;
    var studyForms = {};
    var hashRefList = [];
    var studyFormMapObj = {
        formIdList: [],
        templateIdList: [],
        formNameList: [],
    };    

    srv.hasUnsavedForms = function () {
        for (var i = 0; i < hashRefList.length; i++) {
            if (studyForms[hashRefList[i]].isUnsaved) {
                return true;
            }
        }
        return false;
    }

    srv.setFormObject = function (formObject) {
        var self = this;

        var timeString = Date.now().toString();

        if (!formObject.Name || !formObject.FormTypeId) return null;
        if (!formObject._id && !formObject.tempUniqueId) {
            formObject.tempUniqueId = timeString;
        }
        if (!currentSubjectId) {
            currentSubjectId = formObject.SubjectId;
        }

        // check to see if a saved form exists and replace it.
        var id = formObject.tempUniqueId || formObject.FormTypeId;
        var existingFormObj = self.getFormObject(id);

        if (existingFormObj) {
            var idx = existingFormObj.idx;
            var hashRef = existingFormObj.hashRef;

            studyFormMapObj.formNameList[idx] = formObject.Name;
            studyFormMapObj.templateIdList[idx] = formObject.FormTypeId;
            studyFormMapObj.formIdList[idx] = formObject._id || formObject.tempUniqueId;

            studyForms[hashRef] = formObject;
        } else {
            
            studyForms[timeString] = formObject;

            hashRefList.push(timeString);
            studyFormMapObj.formNameList.push(formObject.Name);
            studyFormMapObj.templateIdList.push(formObject.FormTypeId);
            // _id will only exists on saved forms
            var formId = formObject._id || formObject.tempUniqueId;
            studyFormMapObj.formIdList.push(formId);
        }

        return formObject.Name;
    };

    srv.removeFormObject = function (reference) {
        var self = this;

        var responseObj = self.getFormObject(reference);

        if (responseObj) {

            delete studyForms[responseObj.hashRef];

            for (var i in studyFormMapObj) {
                studyFormMapObj[i][responseObj.idx] = null;
            }

            hashRefList[responseObj.idx] = null;
        }
    }

    srv.getFormObject = function (reference, subjectId) {

        if (!reference) return null;

        var idx;

        outerLoop:
            for (var prop in studyFormMapObj) {
                for (var j in studyFormMapObj[prop]) {
                    if (reference === studyFormMapObj[prop][j]) {
                        idx = j;
                        break outerLoop;
                    }
                }
            }

        if (idx) return { form: studyForms[hashRefList[idx]], hashRef: hashRefList[idx], idx: idx };

        return null;
    };

    srv.getFormObjectProperty = function (reference) {

    };

    srv.getCurrentSubjectId = function () {
        return currentSubjectId;
    };

    srv.initServiceVariables = function () {
        currentSubjectId = null;
        studyForms = {};
        hashRefList = [];
        studyFormMapObj = {
            formIdList: [],
            templateIdList: [],
            formNameList: [],
        };
    }

}]);

// consider getting the value of one property, instead of sending back the entire form object.
angular.module('app').service('BrowserAPIService', ['$rootScope',
        function ($rootScope) {

            var srv = this;
            
            var _backButtonDisabled = false;

                srv.isBackButtonDisabled = _backButtonDisabled;
                srv.enableBackButton = function () {
                    _backButtonDisabled = false;
                };

            srv.disableBackButton = function () {
                if (!srv.isBackButtonDisabled) {
                    _disableBackButton();
                }                
            };

            function _disableBackButton() {
                _backButtonDisabled = true;
                history.pushState(null, null, document.URL)
                function hackBack() {
                    if (_backButtonDisabled) history.pushState(null, null, document.URL);
                }
                window.addEventListener('popstate', hackBack);
            }

            srv.toggleFullScreen = function (element) {
                if ($rootScope.isFullScreenMode === true) {
                    if (document.exitFullscreen) {
                        document.exitFullscreen();
                    } else if (document.mozCancelFullScreen) {
                        document.mozCancelFullScreen();
                    } else if (document.webkitExitFullscreen) {
                        document.webkitExitFullscreen();
                    }
                    $rootScope.isFullScreenMode = false;
                } else {
                    if (element.requestFullscreen) {
                        element.requestFullscreen();
                    } else if (element.mozRequestFullScreen) {
                        element.mozRequestFullScreen();
                    } else if (element.webkitRequestFullscreen) {
                        element.webkitRequestFullscreen();
                    } else if (element.msRequestFullscreen) {
                        element.msRequestFullscreen();
                    }
                    $rootScope.isFullScreenMode = true;
                }
            };





        }]);
angular.module('app')
    .service('StudyLoaderService', ['WorkbookParserDTO',
        function (WorkbookParserDTO) {           

            var srv = this;

            // only use setter methods below to load these objects
            srv.routeStateNum = 1;
            srv.formRelationshipMapper = {};
            srv.distributionDesignations = [];
            srv.sheetRenameMapper = {};
            srv.workbookParser = new WorkbookParserDTO;


            srv.initWorkbookParser = function (rawWorkbook) {
                srv.workbookParser.init(rawWorkbook);
                srv.initSheetNameRenamer();
            };

            srv.initSheetNameRenamer = function () {
                // clear
                for (key in srv.sheetRenameMapper) {
                    delete srv.sheetRenameMapper[key];
                }
                // rebuils
                srv.workbookParser.sheetNames.forEach(function (sheetName) {
                    srv.sheetRenameMapper[sheetName] = sheetName.trim().replace(/\s/g, '_').toLowerCase();
                })
            };;

            srv.clearFormRelationshipMapper = function () {
                for (key in srv.formRelationshipMapper) {
                    delete srv.formRelationshipMapper[key];
                }
            };

            srv.createFormRelationshipMapper = function () {
                srv.workbookParser.sheetNames.forEach(function (sheetName) {
                    srv.formRelationshipMapper[sheetName] = {
                        formName: sheetName,
                        isRepeatingForm: false,
                        parentForms: []
                    };
                })
                console.log("srv.formRelationshipMapper", srv.formRelationshipMapper);
            }

            srv.setDistributionDesignations = function (designationsArr) {
                designationsArr.forEach(function(distribution) {
                    srv.distributionDesignations.push(distribution);
                })
            };



        }]);
angular.module('app')
    .service('ReportingService', ['StudyConfigService', '$rootScope', 'APP_CONFIG', '$http', 'toaster',
        function (StudyConfigService, $rootScope, APP_CONFIG, $http, toaster) {
            var srv = this;

            srv.getReports = function (success) {
                $http.get(StudyConfigService.getUrl(APP_CONFIG.API_ENDPOINTS.REPORTING_GET_REPORTS))
                    .then(function (response) {
                        success(response.data);
                    }).catch(function (data) {
                        toaster.error(data.statusText, data.data);
                    });
            }

            srv.getDashboards = function (success) {
                $http.get(StudyConfigService.getUrl(APP_CONFIG.API_ENDPOINTS.REPORTING_GET_DASHBOARDS))
                    .then(function (response) {
                        success(response.data);
                    }).catch(function (data) {
                        toaster.error(data.statusText, data.data);
                    });
            }

            srv.getTiles = function (dashboardId, success) {
                $http.get(StudyConfigService.getUrl(APP_CONFIG.API_ENDPOINTS.REPORTING_GET_TILES) + dashboardId)
                    .then(function (response) {
                        success(response.data);
                    }).catch(function (data) {
                        toaster.error(data.statusText, data.data);
                    });
            }

            srv.getReport = function (reportId, success) {
                $http.get(StudyConfigService.getUrl(APP_CONFIG.API_ENDPOINTS.REPORTING_GET_REPORT) + reportId)
                    .then(function (response) {
                        // Read embed application token from Model
                        var accessToken = response.data.EmbedToken.token;

                        // Read embed URL from Model
                        var embedUrl = response.data.EmbedUrl;

                        // Read report Id from Model
                        var embedReportId = response.data.Id;

                        // Get models. models contains enums that can be used.
                        var models = window['powerbi-client'].models;

                        // Embed configuration used to describe the what and how to embed.
                        // This object is used when calling powerbi.embed.
                        // This also includes settings and options such as filters.
                        // You can find more information at https://github.com/Microsoft/PowerBI-JavaScript/wiki/Embed-Configuration-Details.
                        var config = {
                            type: 'report',
                            tokenType: models.TokenType.Embed,
                            accessToken: accessToken,
                            embedUrl: embedUrl,
                            id: embedReportId,
                            permissions: models.Permissions.All,
                            settings: {
                                filterPaneEnabled: true,
                                navContentPaneEnabled: true
                            },
                            //viewMode: models.ViewMode.Edit
                        };

                        success(config);
                    }).catch(function (data) {
                        toaster.error(data.statusText, data.data);
                    });
            }

            srv.getTile = function (dashboardId, tileId, success) {
                $http.get(StudyConfigService.getUrl(APP_CONFIG.API_ENDPOINTS.REPORTING_GET_TILE) + dashboardId + '/' + tileId)
                    .then(function (response) {
                        // Read embed application token from Model
                        var accessToken = response.data.EmbedToken.token;

                        // Read embed URL from Model
                        var embedUrl = response.data.EmbedUrl;

                        // Read report Id from Model
                        var embedTileId = response.data.Id;

                        // Get models. models contains enums that can be used.
                        var models = window['powerbi-client'].models;

                        // Read dashboard Id from Model
                        var embedDashboardeId = response.data.dashboardId;

                        // Embed configuration used to describe the what and how to embed.
                        // This object is used when calling powerbi.embed.
                        // This also includes settings and options such as filters.
                        // You can find more information at https://github.com/Microsoft/PowerBI-JavaScript/wiki/Embed-Configuration-Details.
                        var config = {
                            type: 'tile',
                            tokenType: models.TokenType.Embed,
                            accessToken: accessToken,
                            embedUrl: embedUrl,
                            id: embedTileId,
                            dashboardId: embedDashboardeId
                        };

                        success(config);
                    }).catch(function (data) {
                        toaster.error(data.statusText, data.data);
                    });
            }

        }]);
angular.module('app').service('FormDataTransitService', [function () {
    var srv = this;

    var currentSubjectId = null;
    var studyForms = {};
    var hashRefList = [];
    var studyFormMapObj = {
        formIdList: [],
        templateIdList: [],
        formNameList: [],
    };    

    srv.hasUnsavedForms = function () {
        for (var i = 0; i < hashRefList.length; i++) {
            if (studyForms[hashRefList[i]].isUnsaved) {
                return true;
            }
        }
        return false;
    }

    srv.setFormObject = function (formObject) {
        var self = this;

        var timeString = Date.now().toString();

        if (!formObject.Name || !formObject.FormTypeId) return null;
        if (!formObject._id && !formObject.tempUniqueId) {
            formObject.tempUniqueId = timeString;
        }
        if (!currentSubjectId) {
            currentSubjectId = formObject.SubjectId;
        }

        // check to see if a saved form exists and replace it.
        var id = formObject.tempUniqueId || formObject.FormTypeId;
        var existingFormObj = self.getFormObject(id);

        if (existingFormObj) {
            var idx = existingFormObj.idx;
            var hashRef = existingFormObj.hashRef;

            studyFormMapObj.formNameList[idx] = formObject.Name;
            studyFormMapObj.templateIdList[idx] = formObject.FormTypeId;
            studyFormMapObj.formIdList[idx] = formObject._id || formObject.tempUniqueId;

            studyForms[hashRef] = formObject;
        } else {
            
            studyForms[timeString] = formObject;

            hashRefList.push(timeString);
            studyFormMapObj.formNameList.push(formObject.Name);
            studyFormMapObj.templateIdList.push(formObject.FormTypeId);
            // _id will only exists on saved forms
            var formId = formObject._id || formObject.tempUniqueId;
            studyFormMapObj.formIdList.push(formId);
        }

        return formObject.Name;
    };

    srv.removeFormObject = function (reference) {
        var self = this;

        var responseObj = self.getFormObject(reference);

        if (responseObj) {

            delete studyForms[responseObj.hashRef];

            for (var i in studyFormMapObj) {
                studyFormMapObj[i][responseObj.idx] = null;
            }

            hashRefList[responseObj.idx] = null;
        }
    }

    srv.getFormObject = function (reference, subjectId) {

        if (!reference) return null;

        var idx;

        outerLoop:
            for (var prop in studyFormMapObj) {
                for (var j in studyFormMapObj[prop]) {
                    if (reference === studyFormMapObj[prop][j]) {
                        idx = j;
                        break outerLoop;
                    }
                }
            }

        if (idx) return { form: studyForms[hashRefList[idx]], hashRef: hashRefList[idx], idx: idx };

        return null;
    };

    srv.getFormObjectProperty = function (reference) {

    };

    srv.getCurrentSubjectId = function () {
        return currentSubjectId;
    };

    srv.initServiceVariables = function () {
        currentSubjectId = null;
        studyForms = {};
        hashRefList = [];
        studyFormMapObj = {
            formIdList: [],
            templateIdList: [],
            formNameList: [],
        };
    }

}]);

// consider getting the value of one property, instead of sending back the entire form object.
angular.module('app').factory('FormService', function ($http, $q, $uibModal, StudyConfigService, $rootScope, $window, $sce, AuditService, PermissionMatrixService, $log) {

    //var $injector = angular.injector( ['$scope'] );

    //constants
    var _urls = {
        _getForm: "/api/forms/getform",
        _getMultipleForms: "/api/forms/getmultipleforms",
        _getFollowUp: '/api/forms/getfollowup/',

        _get_subject_summary: '/api/special/getpatientsummary/',
        _saveForm: '/api/forms/saveform',
        _saveFollowUp: '/api/forms/savefollowup',
    };

    //Data
    var _followUp = [];
    var _procedure = {};
    var _preprocedure = {};
    var _form = {};
    var _subject_summary = {};
    var _baseline = {};


    //Getters
    var _get_form = function () {
        return _form;
    };

    var _get_procedure = function () {
        return _procedure;
    };

    var _get_preprocedure = function () {
        return _preprocedure;
    };

    var _get_baseline = function () {
        return _baseline;
    };

    var _get_subject_summary = function () {
        return _subject_summary;
    };

    //Loaders
    var _load_subject_form = function (subjectId, FormTypeId) {
        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: StudyConfigService.getUrl(_urls._getForm),
            data: JSON.stringify("{SubjectId: ObjectId('" + subjectId + "'), FormTypeId: " + FormTypeId + "}")
        })
            .then(function success(response) {
                PermissionMatrixService.hasPermission('isDev') && $log.info(response);

                //if no form exists, make sure audit trail is empty array
                if (response.data == null) {
                    AuditService.emptyAuditTrail();
                }
                angular.copy(response.data, _form);
                deferred.resolve(response.data);

            }, function error(response) {
                $log.error(response);
                deferred.reject();
            });

        return deferred.promise;
    }

    var _load_multiple_subject_forms = function (subjectId, FormTypeId) {
        var deferred = $q.defer();

        $http({
            method: 'POST',
            url: StudyConfigService.getUrl(_urls._getMultipleForms),
            data: JSON.stringify("{SubjectId: ObjectId('" + subjectId + "'), FormTypeId: " + FormTypeId + "}")
        })
            .then(function success(response) {
                console.log(response);
                //if no form exists, make sure audit trail is empty array
                if (response.data.length == 0) {
                    AuditService.emptyAuditTrail();
                }
                deferred.resolve(response.data);

            }, function error(response) {
                console.log('ERROR');
                console.log(response);
                deferred.reject();
            });

        return deferred.promise;
    }

    var _load_subject_summary = function (subjectId) {
        var deferred = $q.defer();
        $http({
            method: 'POST',
            url: StudyConfigService.getUrl(_urls._get_subject_summary),
            data: JSON.stringify("{SubjectId: ObjectId('" + subjectId + "')}")

        })
            .then(function success(response) {
                PermissionMatrixService.hasPermission('isDev') && console.log(response);
                angular.copy(response.data, _subject_summary);
                deferred.resolve(response.data);
            }, function error(response) {
                console.log('ERROR');
                console.log(response);
                deferred.reject();
            });

        return deferred.promise;
    };


    //Saves
    var _get_field_markup_from_var = function (varName, formName) {
        var formRows = $("[name=" + formName + "]").find(".form-row");
        for (var i = 0; i < formRows.length; i++) {
            if (formRows[i].getAttribute("field")) {
                var modelArr = formRows[i].getAttribute("field").split(".");
                var modelString = modelArr[modelArr.length - 1];
                if (modelString == varName) {
                    return $(formRows[i]);
                }
            }
            else {
                continue;
            }

        }
    }

    //generates an errors array
    var _get_form_errors = function (formMarkup) {
        var formErrors = [];

        if (formMarkup.$invalid) {
            addErrorsToArray(formMarkup);
        }


        function addErrorsToArray(formObject) {
            for (var key in formObject) {
                if (key.charAt(0) == "$") continue;
                if (!formObject[key].$invalid) continue;
                if (!formObject[key].hasOwnProperty("$modelValue")) {
                    //addErrorsToArray(formMarkup[key]);
                    for (var subKey in formObject[key]) {
                        if (subKey.charAt(0) == "$") continue;
                        if (!formObject[key][subKey].$invalid) continue;
                        var fieldMarkup = _get_field_markup_from_var(subKey, formObject[key].$name);

                        if (fieldMarkup.hasClass("ng-hide") || fieldMarkup.parentsUntil($("follow-up-directive"), ".ng-hide").length) {
                            continue;
                        }
                        var displayName = fieldMarkup.find(".sm-label")[0].innerText;
                        if (fieldMarkup.find(".edit-check-text")[0] != undefined) {
                            var errorMessageText = fieldMarkup.find(".edit-check-text")[0].innerText;
                        }
                        else {
                            var errorMessageText = "Fails validation"
                        }

                        formErrors.push({ fieldName: displayName, message: errorMessageText })
                    }
                    continue;
                }
                var fieldMarkup = _get_field_markup_from_var(key, formObject.$name);

                if (fieldMarkup.hasClass("ng-hide") || fieldMarkup.parents(".ng-hide").length) {
                    continue;
                }
                var displayName = fieldMarkup.find(".sm-label")[0].innerText;
                if (fieldMarkup.find(".edit-check-text")[0] != undefined) {
                    var errorMessageText = fieldMarkup.find(".edit-check-text")[0].innerText;
                }
                else {
                    var errorMessageText = "Fails validation"
                }

                formErrors.push({ fieldName: displayName, message: errorMessageText })
            }
        }


        return formErrors;
    }
    var _confirm_save = function (formErrors) {
        var deferred = $q.defer();

        var errorPopUpPromise = _open_error_popup(formErrors);
        errorPopUpPromise.then(function () {
            deferred.resolve(true);
        }, function () {
            deferred.resolve(false);
        })

        return deferred.promise;
    }

    var _save_form = function (form, formMarkup, metadata, complete) {
        //form.FormData.IsVerified = form.IsVerified;
        form.FormData.IsFrozen = form.IsFrozen;
        form.FormData.IsLocked = form.IsLocked;
        form.FormData.IsSignedOff = form.IsSignedOff;

        var deferred = $q.defer();
        //var formErrors = _get_form_errors(formMarkup);
        //var confirmDeferred = $q.defer();

        ////if form has formErrors, request confirmation, otherwise default confirmation to true
        //if (formErrors.length > 0 && $rootScope.Permission.isSite) {
        //    var confirmPromise = _confirm_save(formErrors);
        //    confirmPromise.then(function (response) {
        //        var saveConfirmed = response;
        //        if (saveConfirmed) {
        //            confirmDeferred.resolve(true);
        //        }
        //        else {
        //            confirmDeferred.resolve(false);
        //        }
        //    })
        //} else {
        //    confirmDeferred.resolve(true);
        //}

        //confirmDeferred.promise.then(function (confirmed) {
        //    if (confirmed) {
        var saveReasonPromise = _get_save_reasons(form, formMarkup, metadata, complete);
        saveReasonPromise.then(function (response) {
            form.FormData.IsComplete = form.IsComplete = complete;
            var formWithReasons = response;
            $http({
                method: 'POST',
                url: StudyConfigService.getUrl(_urls._saveForm),
                data: formWithReasons
            })
            .then(function success(response) {
                deferred.resolve(response);
            }, function error(response) {
                deferred.reject("Form Failed to Save");
            })
        }, function (rejectionResponse) {
            deferred.reject(rejectionResponse)
        })

        return deferred.promise;
    }

    var _get_save_reasons = function (form, formMarkup, metadata, complete) {
        var deferred = $q.defer();

        var popUpPromise = _open_reason_popup(form, formMarkup, metadata, complete);
        popUpPromise.then(function (result) {
            var formWithReasons = result;
            deferred.resolve(formWithReasons);

        }, function () {
            deferred.reject("Save Cancelled");
        })

        return deferred.promise;
    }

    var _open_reason_popup = function (form, formMarkup, metadata, complete) {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: 'FormTemplates/FormSaveReasonPopup.html',
            controller: 'FormSaveReasonCtrl as frmSvRsnCtrl',
            backdrop: 'static',
            size: 'lg',
            resolve: {
                form: function () {
                    return form;
                },
                formMarkup: function () {
                    return formMarkup;
                },
                metadata: function () {
                    return metadata;
                },
                complete: function () {
                    return complete;
                }
            }
        });

        return modalInstance.result;
    }//flarg



    var _open_error_popup = function (formErrors) {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: 'FormTemplates/FormErrorPopup.html',
            controller: 'FormErrorController as formErrorCtrl',
            backdrop: 'static',
            size: 'lg',
            resolve: {
                formErrors: function () {
                    return formErrors;
                }
            }
        });

        return modalInstance.result;
    }

    //form edits
    var _null_hidden = function (form) {
        //get all the divs to determine if they are hidded
        var divs = form.children[0].getElementsByTagName('div');
        var hiddenDivs = [];

        //find all hidden divs
        for (var i = 0; i < divs.length; i++) {
            if (divs[i] != undefined) {
                if (divs[i].classList.contains('ng-hide')) {
                    hiddenDivs.push(divs[i]);
                }
            }

        }

        var inputs = []

        //get all the inputs,textareas and dropdowns in the hidden divs
        for (var i = 0; i < hiddenDivs.length; i++) {
            inputs.push(hiddenDivs[i].getElementsByTagName('textarea'));
            inputs.push(hiddenDivs[i].getElementsByTagName('select'));
            inputs.push(hiddenDivs[i].getElementsByTagName('input'));
        }

        //find all inputs that aren't empty and set all their vaules to null
        for (var i = 0; i < inputs.length; i++) {

            if (inputs[i] != null || inputs[i] != undefined) {
                for (var j = 0; j < inputs[i].length; j++) {
                    inputs[i][j].value = null;
                }
            }
        }
    }

    //navigation check
    var _form_switch_check = function (dirty, event) {
        if (dirty) {
            if (!$window.confirm('You have unsaved changes on this form, are you sure you want to navigate away?')) {
                //works when clicking links, but doesn't work when using the back button
                return false;
            }
        }
        return true;
    }

    //Public Getters
    return {

        GetForm: _get_form,
        GetProcedure: _get_procedure,
        GetPreProcedure: _get_preprocedure,
        GetSubjectSummary: _get_subject_summary,
        GetFieldMarkupFromVarName: _get_field_markup_from_var,

        LoadSubjectForm: _load_subject_form,
        LoadMultipleSubjectForms: _load_multiple_subject_forms,
        LoadSubjectSummary: _load_subject_summary,

        SaveForm: _save_form,
        NullHidden: _null_hidden,
        FormSwitchCheck: _form_switch_check,

        openErrorPopup: _open_error_popup,
        confirmSave: _confirm_save,
        openReasonPopup: _open_reason_popup
    };

});
angular.module('app').service('StatusService', ['$http', '$parse', '$q', '$rootScope', '$uibModal', 'AuditService', 'FormDataTransitService', 'FormTemplateService', 'StudyConfigService',
    function ($http, $parse, $q, $rootScope, $uibModal, AuditService, FormDataTransitService, FormTemplateService, StudyConfigService) {

        var srv = this;

        var _urls = {
            saveFormStatus: '/api/forms/saveform'
        };

        // when the service is injected, get the study statuses and create an object with fieldProperty and signature boolean
        var activeStatuses = StudyConfigService.getStudyStatuses();
        var statusSignatureMap = {};
        activeStatuses.forEach(function (statusObj) {
            statusSignatureMap[statusObj.fieldProperty] = statusObj.signature || false;
        });

        srv.saveStatus = function (form) {

            var formTemplate = FormTemplateService.getMetaData(form.Name);
            var comparisonObj = createComparisonArray(formTemplate, [form]);
            var deferred = $q.defer();

            var modalInstance = saveModal(form, comparisonObj)
                .result
                .then(function close(params) {
                    var formWithSaveReasons = params.$value;
                    $http({
                        method: 'POST',
                        url: StudyConfigService.getUrl(_urls.saveFormStatus),  // StudyConfigService.getUrl(_urls._saveForm),
                        data: formWithSaveReasons
                    }).then(function success(response) {

                        AuditService.loadFormAuditTrail(response.data._id);
                        FormTemplateService.addClassToFormListObject(form.Name);
                        FormDataTransitService.setFormObject(response.data);

                        deferred.resolve(response.data);

                    }, function error(response) {
                        deferred.reject("There was a problem saving the form");
                    });

                    
                }, function dismiss(params) {
                    deferred.reject(params.$value);
                });

            return deferred.promise;
        }

        function saveModal(form, comparisonObj) {
            return $uibModal.open({
                animation: true,
                templateUrl: 'FormTemplates/StatusReason.html',
                controller: 'StatusReasonCtrl as ctrl',
                backdrop: 'static',
                size: 'lg',
                resolve: {
                    Form: function () {
                        return form;
                    },
                    ComparisonObj: function () {
                        return comparisonObj;
                    }
                }
            });
        }

        function createComparisonArray(formTemplate, arrayOfForms) {

            var auditTrail = AuditService.getFormAuditTrail() || null;
            var lastSave = auditTrail[auditTrail.length - 1];
            var comparisonObj = {
                comparisonArr: [],
                signature: false,
                isFirstSave: lastSave ? false : true
            }

            recursivelyAppendObject(formTemplate, arrayOfForms);
            return comparisonObj;

            function recursivelyAppendObject(formTemplate, arrayOfForms) {

                for (var i in arrayOfForms) {
                    var form = arrayOfForms[i];

                    formTemplate.fieldsArray.forEach(function (fieldObj) {

                        if (fieldObj.subForm) {
                            var subFormTemplate = FormTemplateService.getMetaData(fieldObj.subForm.formName);
                            var subFormData = form.FormData[fieldObj.subForm.formName]; // array of subform objects

                            recursivelyAppendObject(subFormTemplate, subFormData);
                        } else if (fieldObj.information){
                            return;
                        } else {

                            var previousValue, newValue, previousStatus, newStatus;
                            // relative path array traverses previous form's subforms
                            var relativePathWithDataPoint = form.relativePathArray && form.relativePathArray.length ? form.relativePathArray.join('.') + '.' + fieldObj.dataPoint : fieldObj.dataPoint;
                            // function evaluating the path to a data-point
                            var parsedPath = $parse(relativePathWithDataPoint);
                            // data-point's object form the previous save
                            var previousObj = lastSave ? parsedPath(lastSave.FormData) : null;
                            // data-point object currently being saved
                            var newObj = form.FormData[fieldObj.dataPoint];

                            if (newObj.IsCheckboxObj) {
                                var newCheckboxArr = [];
                                var oldCheckboxArr = [];
                                var stringArr;
                                var propertyArr;

                                for (var i in formTemplate.fieldsArray) {
                                    // iterate the template, to find the properties and display values of a checkbox field
                                    if (formTemplate.fieldsArray[i].dataPoint === fieldObj.dataPoint) {
                                        stringArr = angular.copy(formTemplate.fieldsArray[i].input.display);
                                        propertyArr = angular.copy(formTemplate.fieldsArray[i].input.value);
                                        break;
                                    }
                                }


                                for (var i in propertyArr) {
                                    // push the display values into an arrays
                                    if (previousObj && previousObj[propertyArr[i]].value) {
                                        oldCheckboxArr.push(stringArr[i]);
                                    }

                                    if (newObj[propertyArr[i]].value) {
                                        newCheckboxArr.push(stringArr[i]);
                                    }
                                }

                                var newCheckValues = newCheckboxArr.join(', ');
                                var oldCheckValues = oldCheckboxArr.join(', ');

                                // compare the checkbox display values to determine if the field has been changed
                                if (newCheckValues && newCheckValues !== oldCheckValues) {
                                    previousValue = oldCheckValues;
                                    newValue = newCheckValues;
                                } else {
                                    return;
                                }

                            // display multiselect's array value as comma seperated string in save reasons
                            } else if (Array.isArray(newObj.value)) {
                                var newMultiSelectValues, oldMultiSelectValues;
                                newMultiSelectValues = newObj.value.join(', ');

                                if (!previousObj) {
                                    return;
                                }

                                if (previousObj.value) {
                                    oldMultiSelectValues = previousObj.value.join(', ');
                                }

                                if (newMultiSelectValues !== oldMultiSelectValues) {
                                    newValue = newMultiSelectValues;
                                    previousValue = oldMultiSelectValues;
                                } else {
                                    return;
                                }

                            } else {
                                previousValue = previousObj ? previousObj.value : null;
                                newValue = (newObj && newObj.value !== undefined) ? newObj.value : null; // datapoint with no value?
                            }

                            var sortedStatus = sortStatusObjects([previousObj, newObj]);
                            if (form.signatureRequired) {
                                var signatureRequired = true;
                            } else {
                                var signatureRequired = sortedStatus.signature > 0 ? true : false;
                            }
                            previousStatus = sortedStatus.status[0];
                            newStatus = sortedStatus.status[1];

                            if (signatureRequired) comparisonObj.signature = true;

                            // if there are differences between previous input values or status, create an object with differences
                            if (newValue !== previousValue || previousStatus !== newStatus) {
                                var megaFormObj = {
                                    // append index to repeating forms
                                    formDisplayName: angular.isNumber(form.AbsoluteIdx) ? formTemplate.displayName + ' ' + (form.AbsoluteIdx + 1) : formTemplate.displayName,
                                    question: fieldObj.question.label,
                                    variable: fieldObj.dataPoint,
                                    previousValue: previousValue,
                                    newValue: newValue,
                                    previousStatus: previousStatus,
                                    newStatus: newStatus
                                };
                                // reference the datapoint in saving form to append the save reason.
                                megaFormObj.dataPoint = newObj;
                                comparisonObj.comparisonArr.push(megaFormObj);
                            };

                        };
                    });

                }
            }
        }

        function sortStatusObjects(arrayOfObjects) {

            var arrayOfStrings = [];
            var signatureValue = 0;

            arrayOfObjects.forEach(function (obj, idx) {
                var status = [];
                if (obj && obj.status) {
                    for (var i in obj.status) {
                        if (obj.status[i]) {
                            status.push(i);
                            var addSubtractOne = idx / 2 === idx % 2 ? -1 : 1;
                            if (statusSignatureMap[i]) signatureValue += addSubtractOne;
                        }
                    }
                }
                arrayOfStrings.push(status.sort().join(', '));
            });

            return {
                status: arrayOfStrings,
                signature: signatureValue
            };
        }

    }]);
// depreciated, use the FormTemplateService instead - CM 
angular.module('app')
    .service('MetaDataService', ['$q', '$timeout', function ($q, $timeout) {
        //var srv = this;
        
        //srv.getCrfMetaData = function (formName, arrayOfMetaData) {
        //    var crf;
        //    var length = arrayOfMetaData.length;
        //    for (var i = 0; i < length; i++) {
        //        if (formName === arrayOfMetaData[i].formName) {
        //            crf = arrayOfMetaData[i];
        //            extendData(crf, arrayOfMetaData);
        //            return crf;
        //        }
        //    }
        //}

        //// append subforms to the CRF metadata object
        //function extendData(data, arrayOfMetaData) {
        //    if (data.subFormArray && data.subFormArray.length > 0) {
        //        data.subMetaData = [];
        //        for (var i = 0; i < data.subFormArray.length; i++) {
        //            arrayOfMetaData.forEach(function (subData) {
        //                if (subData.formName === data.subFormArray[i]) {
        //                    data.subMetaData.push(subData);
        //                    extendData(subData);
        //                }
        //            });
        //        }
        //    }
        //}
        

        //function getMetaData(id) {
        //    var deferred = $q.defer();
        //    $timeout(function () {
        //        mockDataArray.some(function (data) {
        //            if (data._id === id) {
        //                extendData(data);
        //                deferred.resolve(data);
        //                return true;
        //            }
        //        });
                
        //    }, 1000);
        //    return deferred.promise;
        //}

        //return {
        //    getMetaData: getMetaData,
        //    getCrfMetaData: getCrfMetaData
        //};
    }]);




var screeningJson = {
    "controller": "MainFormCtrl",
    "template": "FormTemplates/MainForm.html",
    "subFormArray": ["recursive_form", "Medications"],
    "fieldsArray": [{
        "dataPoint": "SCREEN_1",
        "question": {
            "label": "Does subject exhibit any of the following:",
            "list": ["aqua-dentitous", "tiger balm syndrome", "cat-scratch foosebell", "attaquatulance"],
            "styles": {
                ".question-wrapper": ["first-div", "second-div", "col-sm-2"],
                "label": ["sm-label"],
                "p": ["first-p", "second-p"]
            }
        },
        "input": {
            "type": "radio",
            "display": ["Yes", "No", "Oui", "NA"],
            "disable": {
                "form": ["IsFrozen", "IsLocked"],
                "field": ["Lock", "Freeze"],
                "subject": ["IsLocked", "IsFrozen"],
                "permission": ["isManager"]
            },
            "styles": {
                ".input-wrapper": ["col-sm-3"],
                "label": ["radio-inline"]
            }
        },
        "validation": {
            "validations": [{
                "type": "required",
                "message": "custom required message",
                "intensity": 2
            }]
        },
        "queries": {
            "comment": {
                "reasons": ["Sticky", "SPeci8978al CHa215084rs"]
            },
            "styles": {
                "button": ["btn", "btn-sm"],
                "button > span": ["glyphicon", "glyphicon-exclamation-sign"]
            }
        },
        "auditTrail": {
            "styles": {
                "button": ["btn", "btn-sm"],
                "button > span": ["glyphicon", "glyphicon-cog"]
            }
        },
        "statusButtons": {
            "form": "Form",
            "types": [{
                "value": "Verify",
                //"read": ["isSite"],
                //"write": ["isManager"]
            }, {
                "value": "Freeze",
                //"read": ["isSite"],
                //"write": ["isManager"]
            }, {
                "value": "Lock",
                //"read": ["isSite"],
                //"write": ["isManager"]
            }, {
                "value": "Sign",
                //"read": ["isSite"],
                //"write": ["isManager"]
            }]
        },
        "clearInput": {}
    }, {
        "dataPoint": "SCREEN_1A",
        "question": {
            "label": "Enter a date"
        },
        "input": {
            "type": "stringdate",
            "format": "dd/mm/yyyy"
        }
    }, {
        "dataPoint": "SCREEN_2",
        "question": {
            "label": "Enter Sum Num",
            "note": "sum num must not sum chum-drum"
        },
        "input": {
            "type": "number",
            "options": {
                "placeholder": "placeholder text",
                "value": 0,
                "step": 0.01,
                "min": -2,
                "max": 100002
            }
        },
        "validation": {
            "validations": [{
                "type": "staticMessage",
                "message": "static message"
            }, {
                "type": "required"
            }]
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {
            "form": "Form",
            "types": [{
                "value": "Verify",
                //"read": ["isSite"],
                //"write": ["isManager"]
            }, {
                "value": "Freeze",
                //"read": ["isSite"],
                //"write": ["isManager"]
            }, {
                "value": "Lock",
                //"read": ["isSite"],
                //"write": ["isManager"]
            }, {
                "value": "Sign",
                //"read": ["isSite"],
                //"write": ["isManager"]
            }]
        },
        "clearInput": {
            "styles": {
                "button": ["btn", "btn-sm"],
                "button > span": ["glyphicon", "glyphicon-scissors"]
            }
        }
    }, {
        "information": {
            "type": "infoBar",
            "heading": "Heading",
            "subHeading": "Sub-Heading",
            "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque imperdiet sit amet lacus id mattis. Quisque ultrices mauris ut mauris molestie pretium. Sed lobortis pulvinar nulla. Proin nibh turpis, pharetra ut elementum nec, finibus eu eros. Aliquam efficitur, ante rhoncus imperdiet vestibulum, tortor neque dapibus turpis, nec feugiat orci ex vel nunc. Nam porta, nisi eget egestas aliquam, ante sem feugiat sapien, et eleifend enim erat quis augue. In volutpat, justo vitae porttitor efficitur, erat dui ultricies enim, ut gravida nisi mi ut libero. Morbi sit amet porta nunc. Donec vulputate ligula at nibh dapibus, vel tincidunt nunc porta. Suspendisse quis ligula lobortis, rutrum lectus in, blandit ex. Nam eget purus consectetur, laoreet urna ac, porttitor ipsum. Ut eu augue nisi. Quisque arcu purus, euismod nec urna non, vulputate tincidunt eros. Donec tristique libero aliquet justo maximus dignissim."
        }
    }, {
        "subForm": {
            "formName": "recursive_form",
            "instruction": "Only add if subject has recursive form"
        }
    }, {
        "dataPoint": "SCREEN_3",
        "question": {
            "label": "Has error characters? !@#$%^&*()''\"<>:;[]{}123456789"
        },
        "validation": {
            "validations": [{
                "type": "required",
                "message": "hey that's required!"
            }]
        },
        "input": {
            "type": "radio"
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "SCREEN_4",
        "conditions": [{
            "requirement": "true",
            "dependants": ["SCREEN_3"]
        }],
        "question": {
            "label": "Conditional Tense?"
        },
        "input": {
            "type": "radio"
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "subForm": {
            "formName": "Medications",
            "instruction": "Use one form for each medication the subject is taking"
        }
    },
    {
        "dataPoint": "SCREEN_5",
        "question": {
            "label": "Enter a number:"
        },
        "input": {
            "type": "number"
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    },{
        "dataPoint": "SCREEN_6",
        "question": {
            "label": "Info from some other form:"
        },
        "input": {
            "type": "text",
            "options": {
                "readonly": true,
                "value": "234e-235g"
            }
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    },{
        "dataPoint": "SCREEN_7",
        "question": {
            "label": "Other data, specify"
        },
        "input": {
            "type": "textarea",
            "options": {
                "rows": 10
            }
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "SCREEN_8",
        "question": {
            "label": "Dropdown default values"
        },
        "input": {
            "type": "dropdown"
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "SCREEN_9",
        "question": {
            "label": "Dropdown with same value for save and display"
        },
        "input": {
            "type": "dropdown",
            "display": ["first", "second", "third", "fourth"]
        },
        "validation": {
            "validations": [{
                "type": "required"
            }]
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "SCREEN_10",
        "question": {
            "label": "Dropdown with different value for save and display"
        },
        "input": {
            "type": "dropdown",
            "display": ["first", "second", "third", "fourth"],
            "value": [1,2,3,4]
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "SCREEN_11",
        "question": {
            "label": "Date of screening"
        },
        "input": {
            "type": "date"
        },
        "validation": {
            "validations": [{
                "type": "required",
                "message": "DO IT!"
            }]
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "SCREEN_12",
        "question": {
            "label": "Year graduated from clown college?"
        },
        "input": {
            "type": "date",
            "dateFormat": "yyyy"
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "SCREEN_13",
        "question": {
            "label": "Time of screening"
        },
        "input": {
            "type": "time"
        },
        "validation": {
            "validations": [{
                "type": "staticMessage",
                "message": "Strike the keys, Forrester!"
            }, {
                "type": "required"
            }]
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "SCREEN_14",
        "question": {
            "label": "Type of ice cream found in blood cells",
            "note": "check all that apply"
        },
        "input": {
            "type": "checkboxdepreciated",
            "display": ["Blue Blast", "Loco Chiller Cooler", "Choco Taco", "Krazy Karab Krunch", "Lucky Lemon Lifesaver Blended Candy Cream"],
            "value": ["SUB_1","SUB_2","SUB_3","SUB_4","SUB_5"]
        },
        "validation": {
            "validations": [{
                "type": "required"
            }]
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    }]
};

var examinationJson = {
    "controller": "MainFormCtrl",
    "template": "FormTemplates/MainForm.html",
    "subFormArray": [],
    "conditions": [{
        "requirement": "true",
        "dependants":["EXAM_1"],
        "target": "EXAM_2"
    }, {
        "requirement": "greater",
        "dependants": ["EXAM_1"],
        "target": "EXAM_2"
    }],
    "calculations": [{
        "operation": "add",
        "operands": ["EXAM_1", "EXAM_2", "EXAM_3"],
        "resultant": "EXAM_4A"
    },{
        "operation": "multiply",
        "operands": ["EXAM_5", "EXAM_6"],
        "resultant": "EXAM_7"
    }, {
        "operation": "average",
        "operands": ["EXAM_4", "EXAM_7", "EXAM_8", "EXAM_9"],
        "resultant": "EXAM_10"
    }],
    "fieldsArray": [{
        "dataPoint": "EXAM_1",
        "question": {
            "label": "Sum Num 1"
        },
        "input": {
            "type": "number"
        },
        "validation": {
            "validations": [{
                "type": "staticMessage",
                "message": "static message: min is 1"
            }, {
                "type": "required",
                "message": "REQUIRED!",
                "intensity": 2
            }, {
                "type": "numberMin",
                "compareVal": 1,
                "message": "Don't be less than 1!",
                "intensity": 1
            }, {
                "type": "numberMax",
                "compareVal": "EXAM_2",
                "message": "max val...!",
                "intensity": 2
            }]
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "EXAM_1a",
        "question": {
            "label": "Sum Num 1a"
        },
        "input": {
            "type": "number"
        },
        "validation": {
            "validations": [{
                "type": "staticMessage",
                "message": "be at least sum num 1"
            }, {
                "type": "required",
                "message": "this is required"
            }, {
                "type": "numberMin",
                "compareDataPoint": "EXAM_1",
                "message": "min val: sum num 1",
                "intensity": 2
            }]
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "EXAM_1b",
        "question": {
            "label": "Sum Num 1b"
        },
        "input": {
            "type": "number"
        },
        "validation": {
            "validations": [{
                "type": "staticMessage",
                "message": "be at least sum num 1a and at least than 50"
            }, {
                "type": "numberMin",
                "compareDataPoint": "EXAM_1a",
                "message": "min val: sum num 1a",
                "intensity": 2
            }, {
                "type": "numberMin",
                "compareVal": 50,
                "message": "min val: 50"
            }]
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "EXAM_1c",
        "question": {
            "label": "Sum Num 1c"
        },
        "input": {
            "type": "number"
        },
        "validation": {
            "validations": [{
                "type": "staticMessage",
                "message": "be at most 1b"
            }, {
                "type": "numberMax",
                "compareDataPoint": "EXAM_1b",
                "message": "no more than 1b!",
                "intensity": 2
            }]
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "EXAM_1d",
        "question": {
            "label": "Sum Num 1d"
        },
        "input": {
            "type": "number"
        },
        "validation": {
            "validations": [{
                "type": "staticMessage",
                "message": "be at most 1c and at most 1"
            }, {
                "type": "numberMax",
                "compareDataPoint": "EXAM_1c",
                "message": "1c at the most!",
                "intensity": 2
            }, {
                "type": "numberMax",
                "compareVal": 1,
                "message": "1 at the most",
                "intensity": 2
            }]
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "EXAM_1e",
        "question": {
            "label": "Sum Num 1e"
        },
        "input": {
            "type": "number"
        },
        "validation": {
            "validations": [{
                "type": "staticMessage",
                "message": "0 max"
            }, {
                "type": "numberMax",
                "compareVal": 0,
                "message": "don't be more than 0",
                "intensity": 2
            }]
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "EXAM_1f",
        "question": {
            "label": "Sum Num 1f"
        },
        "input": {
            "type": "number"
        },
        "validation": {
            "validations": [{
                "type": "staticMessage",
                "message": "equal EXAM_1e"
            }, {
                "type": "numberMustEqual",
                "compareDataPoint": "EXAM_1e",
                "message": "must equal EXAM_1e",
                "intensity": 2
            }]
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "EXAM_1g",
        "question": {
            "label": "Sum Num 1g"
        },
        "input": {
            "type": "number"
        },
        "validation": {
            "validations": [{
                "type": "staticMessage",
                "message": "equal 6"
            }, {
                "type": "numberMustEqual",
                "compareVal": 6,
                "message": "must equal 6",
                "intensity": 2
            }]
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "EXAM_1h",
        "question": {
            "label": "Sum Num 1h"
        },
        "input": {
            "type": "number"
        },
        "validation": {
            "validations": [{
                "type": "staticMessage",
                "message": "at least sum num 1c and at least sum num 1d"
            }, {
                "type": "numberMin",
                "compareDataPoint": "EXAM_1c",
                "message": "min val: sum num 1c",
                "intensity": 2
            }, {
                "type": "numberMin",
                "compareDataPoint": "EXAM_1d",
                "message": "min val: sum num 1d",
                "intensity": 2
            }]
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "EXAM_CHECK",
        "question": {
            "label": "Multi condition A,B,C"
        },
        "input": {
            "type": "checkboxdepreciated",
            "display": ["Select", "Other", "to show", "next field"],
            "value": ["SUB_1", "SUB_2", "SUB_3", "SUB_4"]
        },
        "auditTrail": {},
        "queries": {},
        "statusButtons": {},
        "validation": {
            "validations": [{
                "type": "staticMessage",
                "message": "static message"
            }, {
                "type": "required",
                "message": "Custom Req Message!",
                "intensity": 1
            }]
        }
    }, {
        "dataPoint": "EXAM_3a",
        "question": {
            "label": "Sum Num 3a"
        },
        "input": {
            "type": "number"
        },
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "EXAM_3",
        "question": {
            "label": "Sum Num 3"
        },
        "input": {
            "type": "number"
        },
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "EXAM_4A",
        "question": {
            "label": "Auto Calculated and Disabled"
        },
        "input": {
            "type": "readonly"
        },
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "EXAM_4x",
        "question": {
            "label": "Multiselect dropdown"
        },
        "input": {
            "type": "multidropdown",
            "display": ["geese", "ducks", "mallards", "sparrows", "egrets", "loons"]
        },
        "auditTrail": {},
        "statusButtons": {},
        "validation": {
            "validations": [{
                "type": "staticMessage",
                "message": "static message"
            }, {
                "type": "required"
            }]
        }
    }, {
        "dataPoint": "EXAM_4y",
        "question": {
            "label": "Toggle for you"
        },
        "input": {
            "type": "toggle"
        },
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "EXAM_5",
        "question": {
            "label": "Product Num 1"
        },
        "input": {
            "type": "number"
        },
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "EXAM_6",
        "question": {
            "label": "Product Num 2"
        },
        "input": {
            "type": "number"
        },
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "EXAM_7",
        "question": {
            "label": "Result 2"
        },
        "input": {
            "type": "number"
        },
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "EXAM_8",
        "question": {
            "label": "Ave Num 1"
        },
        "input": {
            "type": "number"
        },
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "EXAM_9",
        "question": {
            "label": "Ave Num 2"
        },
        "input": {
            "type": "number"
        },
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "EXAM_10",
        "question": {
            "label": "Averaged Result 3"
        },
        "input": {
            "type": "number"
        },
        "auditTrail": {},
        "statusButtons": {}
    },{
        "dataPoint": "EXAM_11",
        "question": {
            "label": "Enter any number to show next field"
        },
        "input": {
            "type": "number"
        },
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "EXAM_12",
        "question": {
            "label": "Enter a number above 10 to show next field"
        },
        "input": {
            "type": "number"
        },
        "auditTrail": {},
        "statusButtons": {},
        "conditions": [{
            "requirement": "true",
            "dependants": ["EXAM_11"]
        }]
    }, {
        "dataPoint": "EXAM_13",
        "question": {
            "label": "Enter a number below -10 to show next field"
        },
        "input": {
            "type": "number"
        },
        "auditTrail": {},
        "statusButtons": {},
        "conditions": [{
            "requirement": "greater",
            "optionalValue": 10,
            "dependants": ["EXAM_12"]
        }]
    }, {
        "dataPoint": "EXAM_14",
        "question": {
            "label": "Select Other"
        },
        "input": {
            "type": "dropdown",
            "display": ["Select", "Other", "to show", "next field"]
        },
        "auditTrail": {},
        "statusButtons": {},
        "conditions": [{
            "requirement": "less",
            "optionalValue": -10,
            "dependants": ["EXAM_13"]
        }]
    }, {
        "dataPoint": "EXAM_15A",
        "question": {
            "label": "Multi A - enter number above 10"
        },
        "input": {
            "type": "text"
        },
        "auditTrail": {},
        "statusButtons": {},
        "conditions": [{
            "requirement": "equals",
            "optionalValue": "Other",
            "dependants": ["EXAM_14"]
        }]
    }, {
        "dataPoint": "EXAM_15B",
        "question": {
            "label": "Multi A - enter number above 10"
        },
        "input": {
            "type": "text"
        },
        "auditTrail": {},
        "statusButtons": {},
        "conditions": [{
            "requirement": "equals",
            "optionalValue": "Other",
            "dependants": ["EXAM_14"]
        }]
    }, {
        "dataPoint": "EXAM_15C",
        "question": {
            "label": "Multi C - enter 1122"
        },
        "input": {
            "type": "text"
        },
        "auditTrail": {},
        "statusButtons": {},
        "conditions": [{
            "requirement": "equals",
            "optionalValue": "Other",
            "dependants": ["EXAM_14"]
        }]
    }, {
        "dataPoint": "EXAM_16",
        "question": {
            "label": "Multi condition A,B,C"
        },
        "input": {
            "type": "checkboxdepreciated",
            "display": ["Select","Other","to show","next field"],
            "value": ["SUB_1", "SUB_2", "SUB_3", "SUB_4"]
        },
        "auditTrail": {},
        "statusButtons": {},
        "conditions": [{
            "requirement": "greater",
            "optionalValue": 10,
            "dependants": ["EXAM_15A", "EXAM_15B"]
        }, {
            "requirement": "equals",
            "optionalValue": 1122,
            "dependants": ["EXAM_15C"]
        }]
    }, {
        "dataPoint": "EXAM_17",
        "question": {
            "label": "Other, specify"
        },
        "input": {
            "type": "textarea"
        },
        "auditTrail": {},
        "statusButtons": {},
        "conditions": [{
            "requirement": "true",
            "dependants": ["EXAM_16.SUB_2"]
        }]
    }, {
        "dataPoint": "EXAM_18",
        "question": {
            "label": "Next field, specify"
        },
        "input": {
            "type": "textarea"
        },
        "auditTrail": {},
        "statusButtons": {},
        "conditions": [{
            "requirement": "true",
            "dependants": ["EXAM_16.SUB_4"]
        }]
    }]
};



var proceduresJson = {
    "controller": "RepeatingFormCtrl",
    "template": "FormTemplates/RepeatingForm.html",
    "subFormArray": ["Procedure"],
    "fieldsArray": []
};

var procedureJson = {
    "subFormArray": [],
    "fieldsArray": [{
        "dataPoint": "PROC_1",
        "question": {
            "label": "Has patient had procedure?"
        },
        "input": {
            "type": "radio"
        },
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "PROC_2",
        "question": {
            "label": "Rate pain 1-5?"
        },
        "input": {
            "type": "number"
        },
        "auditTrail": {},
        "statusButtons": {}
    }]
};

var recursiveFormJson = {
    "subFormArray": [],
    "fieldsArray": [{
        "dataPoint": "RF_1",
        "question": {
            "label": "Has recursive form?"
        },
        "input": {
            "type": "radio"
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    }]
};

var medicationsJson = {
    "subFormArray": ["Events"],
    "calculations": [{
        "operation": "add",
        "operands": ["MD_1", "MD_2"],
        "resultant": "MD_3"
    }],
    "fieldsArray": [{
        "dataPoint": "MD_1",
        "question": {
            "label": "Type of medication"
        },
        "input": {
            "type": "number"
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "MD_2",
        "question": {
            "label": "Dosage"
        },
        "input": {
            "type": "number"
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "MD_3",
        "question": {
            "label": "Sum"
        },
        "input": {
            "type": "number"
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "MD_3A",
        "question": {
            "label": "unit of messure"
        },
        "input": {
            "type": "text"
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "MD_4",
        "question": {
            "label": "Describe reason for dose"
        },
        "input": {
            "type": "textarea"
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {},
        "conditions": [{
            "requirement": "answered",
            "dependants": ["MD_3A"]

        }]
    }, {
        "subForm": {
            "formName": "Events",
            "instruction": "Events Caused by Medications"
        }
    }]
};

var eventsJson = {
    "subFormArray": ["recursive_form"],
    "calculations": [{
        "operation": "average",
        "operands": ["EVENT_1", "EVENT_2"],
        "resultant": "EVENT_3"
    }],
    "fieldsArray": [{
        "dataPoint": "EVENT_1",
        "question": {
            "label": "Date of Event"
        },
        "input": {
            "type": "number"
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "dataPoint": "EVENT_2",
        "question": {
            "label": "Time of Event"
        },
        "input": {
            "type": "number"
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    }, {
        "subForm": {
            "formName": "recursive_form",
            "instruction": "Recursive Ax3"
        }
    }, {
        "dataPoint": "EVENT_3",
        "question": {
            "label": "Average"
        },
        "input": {
            "type": "number"
        },
        "queries": {},
        "auditTrail": {},
        "statusButtons": {}
    }]
};

var followUpJson = {
    "controller": "MainFormCtrl",
    "template": "FormTemplates/MainForm.html",
    "subFormArray": ["Medications"],
    "fieldsArray": [{
        "subForm": {
            "formName": "Medications",
            "instruction": "Enter Medications"
        }
    }]
};
angular.module( 'app' ).factory( 'checkboxService', function ( ) {

    var _get_display_values = function (checkboxDataObj, metadata) {
        var stringArr = [];
        var checkboxDir = $(document).find("syn-checkbox-depreciated");
        var idx = 0;
        for (var propValue in checkboxDataObj) {
            if (propValue !== 'IsCheckboxObj' && propValue !== 'Reason' && propValue !== 'status') {
                if (checkboxDataObj[propValue].value) {
                    var displayValue = metadata.input.display[idx];
                    stringArr.push(displayValue)
                }
                idx++;
            }
        }
        if (stringArr.length == 0) {
            return null;
        }
        else {
            return stringArr.join(", ");
        }
    }

    return {
        getDisplayValues: _get_display_values
    };
});
angular.module('app').service('ValidationActionService', [function () {
    var srv = this;

    srv.formHasIntensity = function (validationsObj, intensity) {
        var hasIntensity = false;
        for (var dataPoint in validationsObj) {
            for (var validation of validationsObj[dataPoint]) {
                if (validation && validation.intensity === intensity) {
                    hasIntensity = true;
                    break;
                }
            }
            if (hasIntensity) break;
        }
        return hasIntensity;
    };






}]);
angular.module('app')

    .service('InputFormatHelper', function () {
        var srv = this;

        srv.functionMap = {
            round: round,
            absolute: absolute,
            base: base,
            uppercase: upperCase,
            lowercase: lowerCase
        }

        function round(value, decimals) {
            return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);
        }

        function absolute(value, bool) {
            if (bool) return Math.abs(value);
        }

        function base(value, radix) {
            return value.toString(radix);
        }

        function upperCase(value) {
            return value.toUpperCase();
        }

        function lowerCase(value) {
            return value.toLowerCase();
        }
    });

angular.module('app')
    .service('userService', ['StudyConfigService', 'APP_CONFIG', '$http', '$uibModal', 'toaster', 'WEB_CONFIG',
        function (StudyConfigService, APP_CONFIG, $http, $uibModal, toaster, WEB_CONFIG) {
            var srv = this;

            srv.users = [];

            srv.login = function (username, password, success, error) {
                var params = "grant_type=password&username=" + username + "&password=" + password;
                $http({
                    url: StudyConfigService.getUrl(APP_CONFIG.API_ENDPOINTS.TOKEN_OAUTH, true),
                    method: "POST",
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    data: params
                })
                .then(function (response) {
                    success(response.data);
                }).catch(function (data) {
                    toaster.error(data.statusText, data.data.error_description);
                });
            }

            srv.getUserInformation = function (success) {
                $http.get(StudyConfigService.getUrl(APP_CONFIG.API_ENDPOINTS.USER_INFO, true))
                    .then(function (response) {
                        success(response.data);
                    }).catch(function (data) {
                        toaster.error(data.statusText, data.data);
                    });
            }

            srv.changePassword = function (changePwdObj, success, error) {
                $http({
                    url: StudyConfigService.getUrl(APP_CONFIG.API_ENDPOINTS.USER_CHANGE_PWD, true),
                    method: "POST",
                    headers: { 'Content-Type': 'application/json' },
                    data: changePwdObj
                })
                .then(function (response) {
                    success();
                }).catch(function (data) {
                    error(data);
                });
            }

            srv.sendTempPassword = function (email, success, error) {
                $http({
                    url: StudyConfigService.getUrl(APP_CONFIG.API_ENDPOINTS.USER_RESET_PWD, true),
                    method: "POST",
                    data: JSON.stringify(email)
                })
                .then(function (response) {
                    toaster.success('', 'A new password has been sent to ' + email);
                    success();
                }).catch(function (data) {
                    error(data);
                });
            }

            srv.validatePassword = function (password, errors, test) {
                var minLength = WEB_CONFIG.PASSWORD_MIN_LENGTH;
                var minSpecial = WEB_CONFIG.PASSWORD_MIN_SPECIAL;
                var minNumeric = WEB_CONFIG.PASSWORD_MIN_NUMERIC;
                var minUCase = WEB_CONFIG.PASSWORD_MIN_UCASE;
                var minLCase = WEB_CONFIG.PASSWORD_MIN_LCASE;
                var specialChars = /[@`~!#$%^*()\-_=/{}[\]\|\;:'",<>.?]/g;

                test.password = password;
                test.length = password ? password.length : 0;
                test.special = password ? password.match(specialChars) : 0;
                test.numeric = password ? password.match(/[0-9]/g) : 0;
                test.ucase = password ? password.match(/[A-Z]/g) : 0;
                test.lcase = password ? password.match(/[a-z]/g) : 0;

                if (!password || password.length < minLength) {
                    errors.minLength = true;
                }
                else errors.minLength = false;

                if (!password || !password.match(specialChars) || password.match(specialChars).length < minSpecial) {
                    errors.special = true;
                }
                else errors.special = false;

                if (!password || !password.match(/[0-9]/g) || password.match(/[0-9]/g).length < minNumeric) {
                    errors.numeric = true;
                }
                else errors.numeric = false;

                if (!password || !password.match(/[A-Z]/g) || password.match(/[A-Z]/g).length < minUCase) {
                    errors.ucase = true;
                }
                else errors.ucase = false;

                if (!password || !password.match(/[a-z]/g) || password.match(/[a-z]/g).length < minLCase) {
                    errors.lcase = true;
                }
                else errors.lcase = false;

                errors.global = errors.minLength || errors.special || errors.numeric || errors.ucase || errors.lcase;
            }

            srv.requireLoginModal = function (modalAction) {


                var modalInstance = $uibModal.open({
                    animation: true,
                    template: '\
                                <div class="modal-header"> \
                                    <button type="button" class="close" ng-click="cancel()" aria-label="Close"><span aria-hidden="true">&times;</span></button> \
                                    <h2 style="text-align:center;">Confirm {{action}}</span></h2> \
                                </div> \
                                <div class="modal-body">Please enter your credentials to confirm {{action}}.</div> \
                                <div class="modal-footer"> \
                                    <div class="row alert alert-danger margin-top-5" ng-show="errorMessage">{{errorMessage}}</div> \
                                    <div> \
                                        <div class="row"> \
                                            <input class="form-control margin-top-5" type="text" ng-model="username" placeholder="Username" ng-keyup="$event.keyCode == 13 && confirm(username, password)" /> \
                                        </div> \
                                        <div class="row"> \
                                            <input class="form-control margin-top-5" type="password" ng-model="password" placeholder="Password" ng-keyup="$event.keyCode == 13 && confirm(username, password)" /> \
                                        </div> \
                                    </div> \
                                    <div class="row"> \
                                        <button type="button" ng-click="cancel()" class="btn btn-default">Cancel</button> \
                                        <button type="button" ng-click="confirm(username, password)" class="btn btn-default">Login</button> \
                                    </div> \
                                </div>',
                    backdrop: 'static',
                    size: 'lg',
                    controller: ['$scope', '$uibModalInstance', 'action', function ($scope, $uibModalInstance, action) {

                        $scope.action = action;

                        $scope.cancel = function () {
                            $uibModalInstance.dismiss();
                        }
                        $scope.confirm = function (username, password) {
                            srv.login(username, password, function (success) {
                                $uibModalInstance.close();
                            }, function (error) {
                                $scope.errorMessage = err.data.error_description;
                            });
                        }

                    }],

                    resolve: {
                        action: function () {
                            return modalAction;
                        }
                    },
                });


                return modalInstance.result;


            }

            
}]);
angular.module('app').factory('UserService', function ($http, $q, StudyConfigService, SubjectService, $stateParams, PermissionMatrixService, $log) {

    //constants
    var _urls = {
        _load_users: '/api/user/loaduser',
        //_load_users_site: '/api/user/loaduser/',
        //_load_user_role: '/api/user/loaduserrole',
        //_load_permission: '/api/user/getpermission',
        _load_sites: '/api/user/getsites',
        _load_addresses: '/api/user/getadresses/',
        _load_investigators: '/api/user/getinvestigators/',
        //_load_site: '/api/user/loadusersite',
        _load_site_investigators: '/api/user/loadsiteinvestigators/',
        _load_all_sites: '/api/user/loadallsites',
        _load_managers: '/api/user/loadmanagers',
        _load_roles: '/api/user/getallroles',
        _load_all_investigators: '/api/user/loadallinvestigators',
        _load_current_user: '/api/user/loadcurrentuser'
    };

    //Data
    var _users = [];
    var _users_at_site = [];
    var _current_user = {
        Permission: {
            isSite: false,
            isManager: false
        },
    };
    //var _role = "";
    //var _permission = {};
    var _sites = [];
    var _addresses = [];
    var _investigators = [];
    var _site = {}
    var _all_sites = [];
    var _managers = [];
    var _roles = [];

    //disable forms
    var _disable_form = function (form) {
        if (SubjectService.GetSubjectById() == undefined) {
            SubjectService.LoadSubjectById($stateParams.subjectId).then(function success(response) {
                var curSubj = GetSubjectById();
                this.DisableSubjectForm(form, curSubj)
            })
        } else {
            this.DisableSubjectForm(form, SubjectService.GetSubjectById())
        }
    }

    var _disable_subject_form = function (form, subject) {
        if (subject.IsLocked) {
            //$( 'form :input' ).not( '.no-disable' ).prop( 'disabled', true );
            setTimeout(function () { $('form :input').not('.no-disable').prop('disabled', true) }, 250);
        }
    }


    //Getters
    var _get_users = function () {
        return _users;
    };

    var _get_current_user = function () {
        return _current_user;
    };

    //var _get_role = function () {
    //    return _role;
    //};

    //var _get_permission = function () {
    //    return _permission;
    //};

    var _get_sites = function () {
        return _sites;
    };

    var _get_addresses = function () {
        return _addresses;
    };

    var _get_investigators = function () {
        return _investigators;
    };
    var _get_site = function () {
        return _site;
    }

    var _get_all_sites = function () {
        return _all_sites
    }

    var _get_site_users = function () {
        return _users_at_site;
    }

    var _get_managers = function () {
        return _managers;
    }

    var _get_roles = function () {
        return _roles;
    }

    var _load_current_user = function () {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: StudyConfigService.getUrl(_urls._load_current_user),

        })
        .then(function success(response) {
            PermissionMatrixService.hasPermission('isDev') && $log.info(response);
            angular.copy(response.data, _current_user);
            deferred.resolve(_current_user);

        }, function error(response) {
            $log.error('ERROR');
            $log.error(response);
            deferred.reject();
        });

        return deferred.promise;
    }

    //Loaders
    var _load_users = function () {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: StudyConfigService.getUrl(_urls._load_users),

        })
            .then(function success(response) {
                PermissionMatrixService.hasPermission('isDev') && $log.info(response);
                angular.copy(response.data, _users);
            }, function error(response) {
                $log.error('ERROR');
                $log.error(response);
                deferred.reject();
            });

        return deferred.promise;
    };

    var _load_users_site = function (siteId) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: StudyConfigService.getUrl(_urls._load_users_site + siteId),

        })
            .then(function success(response) {
                PermissionMatrixService.hasPermission('isDev') && $log.info(response);
                angular.copy(response.data, _users_at_site);

            }, function error(response) {
                $log.error('ERROR');
                $log.error(response);
                deferred.reject();
            });

        return deferred.promise;
    };

    var _load_managers = function () {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: StudyConfigService.getUrl(_urls._load_managers),

        })
            .then(function success(response) {
                PermissionMatrixService.hasPermission('isDev') && $log.info(response);
                angular.copy(response.data, _managers);

            }, function error(response) {
                $log.error('ERROR');
                $log.error(response);
                deferred.reject();
            });

        return deferred.promise;
    };

    var _load_user_role = function () {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: StudyConfigService.getUrl(_urls._load_user_role),

        })
            .then(function success(response) {
                PermissionMatrixService.hasPermission('isDev') && $log.info(response.data);
                deferred.resolve(response.data);
                _role = response.data;
            }, function error(response) {
                $log.error('ERROR');
                $log.error(response);
                deferred.reject();
            });

        return deferred.promise;
    };

    var _load_user_sites = function () {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: StudyConfigService.getUrl(_urls._load_sites),

        })
            .then(function success(response) {
                PermissionMatrixService.hasPermission('isDev') && $log.info(response.data);
                angular.copy(response.data, _sites);

                deferred.resolve(response.data);
            }, function error(response) {
                $log.error('ERROR');
                $log.error(response);
                deferred.reject();
            });

        return deferred.promise;
    };

    var _load_addresses = function (siteId) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: StudyConfigService.getUrl(_urls._load_addresses + siteId),

        })
            .then(function success(response) {
                PermissionMatrixService.hasPermission('isDev') && $log.info(response.data);
                angular.copy(response.data, _addresses);

                deferred.resolve(response.data);
            }, function error(response) {
                $log.error('ERROR');
                $log.error(response);
                deferred.reject();
            });

        return deferred.promise;
    };


    var _load_investigators = function (siteId, addressId) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: StudyConfigService.getUrl(_urls._load_investigators + siteId + '/' + addressId),

        })
            .then(function success(response) {
                PermissionMatrixService.hasPermission('isDev') && $log.info(response.data);
                angular.copy(response.data, _investigators);

                deferred.resolve(response.data);
            }, function error(response) {
                $log.error('ERROR');
                $log.error(response);
                deferred.reject();
            });

        return deferred.promise;
    };

    var _load_site_investigators = function (siteId) {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: StudyConfigService.getUrl(_urls._load_site_investigators + siteId),

        })
            .then(function success(response) {
                PermissionMatrixService.hasPermission('isDev') && $log.info(response.data);
                angular.copy(response.data, _investigators);

                deferred.resolve(response.data);
            }, function error(response) {
                $log.error('ERROR');
                $log.error(response);
                deferred.reject();
            });

        return deferred.promise;
    }

    var _load_all_sites = function () {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: StudyConfigService.getUrl(_urls._load_all_sites),

        })
            .then(function success(response) {
                PermissionMatrixService.hasPermission('isDev') && $log.info(response.data);
                angular.copy(response.data, _all_sites);

                deferred.resolve(response.data);
            }, function error(response) {
                $log.error('ERROR');
                $log.error(response);
                deferred.reject();
            });

        return deferred.promise;
    }

    var _load_all_roles = function () {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: StudyConfigService.getUrl(_urls._load_roles),

        })
            .then(function success(response) {
                PermissionMatrixService.hasPermission('isDev') && $log.info(response.data);
                angular.copy(response.data, _roles);

                deferred.resolve(response.data);
            }, function error(response) {
                $log.error('ERROR');
                $log.error(response);
                deferred.reject();
            });

        return deferred.promise;
    }

    var _load_all_investigators = function () {
        var deferred = $q.defer();

        $http({
            method: 'GET',
            url: StudyConfigService.getUrl(_urls._load_all_investigators)
        })
        .then(function success(response) {
            deferred.resolve(response.data);
        }, function error(response) {
            $log.error(response)
            deferred.reject();
        })

        return deferred.promise;
    }

    //pubilc getteers
    return {
        GetUsers: _get_users,
        GetCurrentUser: _get_current_user,
        //GetRole: _get_role,
        //GetPermission: _get_permission,
        GetSites: _get_sites,
        GetAddresses: _get_addresses,
        GetInvestigators: _get_investigators,
        GetSite: _get_site,
        GetAllSites: _get_all_sites,
        GetSiteUsers: _get_site_users,
        GetManagers: _get_managers,
        GetRoles: _get_roles,

        LoadCurrentUser: _load_current_user,
        LoadUsers: _load_users,
        //LoadRole: _load_user_role,
        //LoadPermission: _load_permission,
        LoadUserSites: _load_user_sites,
        LoadAddresses: _load_addresses,
        LoadInvestigators: _load_investigators,
        //LoadUserSite: _load_user_site,
        LoadSiteInvestigators: _load_site_investigators,
        LoadAllSites: _load_all_sites,
        LoadSiteUsers: _load_users_site,
        LoadManagers: _load_managers,
        LoadAllRoles: _load_all_roles,
        LoadAllInvestigators: _load_all_investigators,

        DisableForm: _disable_form,
        DisableSubjectForm: _disable_subject_form
    };

});
angular.module('app')
    .filter('setWidgetDisplay', ['widgetMap', function (widgetMap) {
        return function (widgets, columns) {

            var displayWidget = (function (el) { while (el.push([]) < columns); return el })([]);

            widgets.forEach(function (widget, i) {
                var col = widget.col;
                var pos = widget.position;
                widget.templateUrl = widgetMap[widget.type].templateUrl;
                widget.controller = widgetMap[widget.type].controller;
                //if (!displayWidget[col]) displayWidget[col] = [];
                displayWidget[col][pos] = widget;
                
            });

            return displayWidget;
        }
    }])
    .value('widgetMap', {
        //add screenshot of all widgets, map to source
        test: {
            templateUrl: "view/Views/TestWidget.html",
            controller: "TestController",

        },

        subject: {
            templateUrl: "Study/StudyTemplates/SubjectsList.html",
            controller: "SubjectListController"
        },

        add: {
            templateUrl: "view/Views/AddWidget.html",
            controller: "AddWidgetController",
        },

        query: {
            templateUrl: "view/Views/QueriesWidget.html",
            controller: "QueryListCtrl"
        }

    })
    .service('WidgetService', ['widgetMap', '$uibModal', '$log', '$rootScope', function (widgetMap, $uibModal, $log, $rootScope) {

        //constants
        var srv = this;

        //use this and take out col and position to be stored on a specific user setting
        var widgetsList = [
            { type: 'subject', name: 'Subject List', id: 1, imgUrl: 'content/img/subject-list.png', description: 'Displays a sortable/searchable list of subjects' },
            { type: "test", name: "Test 1", uniqueId: "test1-1", id: 4, reportId: "46fb6f48-bb02-4ac8-949f-4d36ff3330bf", reportName: 'test1', imgUrl: 'content/img/bar-chart.png', description: 'Displays a bar chart of data of your choice. Will be a more specific chart in the future' },
            { type: "test", name: "Test 4", id: 7, reportId: "7da9e650-6887-459c-a804-3f6d82812577", reportName: 'test4', imgUrl: 'content/img/piechart.png', description: 'Displays a pie chart of data of your choice. Will be a more specific chart in the future' },
            { type: "query", name: "Queries", id: 8, imgUrl: 'content/img/queries.png', description: 'Displays a list of queries and their statuses. You can respond to queries directly in this widget.' }
        ];

        var maximizedWidget = {};

        var userWidgets = [
            
                { col: 0, position: 0, type: 'subject', name: 'Subject List', id: 1, imgUrl: 'content/img/subject-list.png', description: 'Displays a sortable/searchable list of subjects' },

                //{ col: 1, position: 0, type: "test", name: "Test 1", id: 4, reportId: "46fb6f48-bb02-4ac8-949f-4d36ff3330bf", reportName: 'test1', imgUrl: 'content/img/bar-chart.png', description: 'Displays a bar chart of data of your choice. Will be a more specific chart in the future' },
                //{ col: 1, position: 1, type: "test", name: "Test 4", id: 7, reportId: "7da9e650-6887-459c-a804-3f6d82812577", reportName: 'test4', imgUrl: 'content/img/piechart.png', description: 'Displays a pie chart of data of your choice. Will be a more specific chart in the future' },


                { col: 1, position: 0, type: "query", name: "Queries", id: 8, imgUrl: 'content/img/queries.png', description: 'Displays a list of queries and their statuses. You can respond to queries directly in this widget.' }

            
        ];

        srv.GetWidgetsList = function () {
            return widgetsList;
        }

        srv.GetWidgetsByColumn = function (columnNumber) {
            return userWidgets.filter(function (widget) {
                return widget.col == columnNumber;
            });
        }

        srv.GetUserWidgets = function () {
            return userWidgets;
        }

        srv.AddWidget = function (widget, column, lastPos) {
            var widgetCount;
            var widgetCopy = angular.copy(widget);

            if (widget.reportId) {
                widgetCount = srv.CountOfWidget(widget.name) + 1;
                widgetCopy.reportName = widget.reportName + '-' + widgetCount;
            }
            widgetCopy.col = column;
            widgetCopy.position = lastPos;
            userWidgets.push(widgetCopy);
            $rootScope.$broadcast('setWidgets');

        }

        srv.CountOfWidget = function (name) {
            return userWidgets.filter(function (widget) {
                return widget.name === name;
            }).length;
        }

        srv.MaximizeWidget = function (widget) {
            maximizedWidget = widget;
            $rootScope.$broadcast('maximizeWidget');
        }

        srv.GetMaximizedWidget = function () {
            return maximizedWidget;
        }

        srv.AddNewWidget = function (columnNumber, lastPos) {
            var templateString = 'view/Views/AddWidgetModal.html';
            var controllerString = 'AddWidgetController';

            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: templateString,
                controller: controllerString,
                size: 'md',
                resolve: {
                    columnNumber: function () {
                        return columnNumber;
                    },
                    
                    lastPos: function () {
                        return lastPos;
                    }
                }
            });

            modalInstance.result.then(function () {

            }, function () {
                $log.info("Modal Closed");
            });

            
        }
     

        srv.DeleteWidget = function (widgetToDelete) {
            for (var i = userWidgets.length - 1; i >= 0; i--) {
                
                if (userWidgets[i].col === widgetToDelete.col) {
                    if (userWidgets[i].position > widgetToDelete.position) {
                        userWidgets[i].position -= 1;
                        continue;
                    } else if (userWidgets[i].position === widgetToDelete.position) {
                        userWidgets.splice(i, 1);
                    }
                }
            }
            $rootScope.$broadcast('setWidgets');
        }

        srv.GetLastPos = function (columnNumber) {
            return srv.GetWidgetsByColumn(columnNumber).length - 1;
        }
        //pubilc getteers
        //return {
        
        //};

        return {
            GetUserWidgets: srv.GetUserWidgets,
            AddWidget: srv.AddWidget,
            GetLastPos: srv.GetLastPos,
            AddNewWidget: srv.AddNewWidget,
            GetWidgetsList: srv.GetWidgetsList,
            CountOfWidget: srv.CountOfWidget,
            DeleteWidget: srv.DeleteWidget,
            MaximizeWidget: srv.MaximizeWidget,
            GetMaximizedWidget: srv.GetMaximizedWidget
        }

}]);
angular.module('app').service('eConsentSignaturePadService', function () {
    //Signature pad gets set in custom modal directive link function.  Needs to be used in signature modal controller
});
angular.module( 'app' ).directive( 'queryCommentDirective', function ($sce) {
    return {
        scope: {
            fieldName: '=',
            formId: '=',
            formName: '=',
            queryId: '=',
            queryOptions: '=',
            selectedField: '='
        },
        restrict: 'AE',
        replace: false,
        templateUrl: 'Study/StudyTemplates/QueryCommentButton.html',
        controller: 'QueryButtonCtrl'
    };

} );
angular.module('app')
    .directive('synNavigationBarDirective', ['PermissionMatrixService', 'SessionTransitService', 'userService', function (PermissionMatrixService, SessionTransitService, userService) {

        return {
            scope: true,
            restrict: 'E',
            templateUrl: "templates/navbar.html",
            link: function (scope) {
                // moved logic? CM
                // scope.canCreateSubject = PermissionMatrixService.hasPermission('createSubject');
                // scope.canReadStudyQueries = PermissionMatrixService.hasPermission('readStudyQueries');
            },
            controller: ['$scope', 'DefaultMetaDataService', function ($scope, DefaultMetaDataService) {
                $scope.$on('user-changed', function () {
                    init(); // this will have to be expanded with multiple studies and options
                });

                $scope.$on('role-changed', function () {
                    init();
                });

                $scope.switchToPreviousRole = function () {
                    userService.requireLoginModal('Exit Subject View').then(function () {
                        SessionTransitService.changeToPreviousRole();
                    });
                };

                function setSessionInfo() {
                    var sessionObj = SessionTransitService.getSessionObj();
                    $scope.user = sessionObj.CurrentUser.UserName;
                    $scope.role = sessionObj.activeRole.Name;
                    $scope.logout = SessionTransitService.logout;

                }

                function setPermissionInfo() {
                    $scope.canAccessToolBox = PermissionMatrixService.hasPermission('adminStudy');
                    $scope.canAccessFormLoader = PermissionMatrixService.hasPermission('createTemplate');
                    $scope.canAccessStudyConfig = PermissionMatrixService.hasPermission('createConfig');
                    $scope.canImportStudy = PermissionMatrixService.hasPermission('canImportStudy');
                    $scope.canAddEConsent = PermissionMatrixService.hasPermission('createEConsent');
                    $scope.canReadSite = PermissionMatrixService.hasPermission('readSite');
                }

                function init() {
                    setSessionInfo();
                    setPermissionInfo();
                }

                init();
            }]
        }

    }]);
angular.module('app').directive('synSideBarDirective', ['PermissionMatrixService', 'FormTemplateService', 'promiseService', function (PermissionMatrixService, FormTemplateService, promiseService) {
    return {
        scope: true,
        restrict: 'E',
        templateUrl: "templates/sidebar.html",
        controller: ['FormTemplateService', '$scope', 'SessionTransitService', 'PermissionMatrixService', 'StudyConfigService', function (FormTemplateService, $scope, SessionTransitService, PermissionMatrixService, StudyConfigService) {

            $scope.toggleSidebar = function () {
                $scope.expandSidebar = !$scope.expandSidebar;
            }

            $scope.closeSidebar = function () {
                $scope.expandSidebar = false;
            }

            $scope.stopWindowClick = function ($event) {
                $event.stopPropagation();
            }

            $scope.windowClick = function () {
                if ($scope.expandSidebar) {
                    $scope.expandSidebar = false;
                    $scope.$apply();
                }
            }

            function init() {
                promiseService.verifyOrLoadData({
                    loginRequiredData: ["FormTemplates"] // needs to verify that these are the right ones
                });
                $scope.permissions = PermissionMatrixService.getRolePermissions();
                $scope.reportingConfiguration = StudyConfigService.getMetaDataByProperty("reporting");
                angular.element(window).on('click', $scope.windowClick);
                $scope.expandSidebar = false;
                //  set eConsent study config setting
                StudyConfigService.loadSettings().then(function () {
                    $scope.isEConsent = StudyConfigService.getMetaDataByProperty('eConsent');
                });
                //for testing - doesn't load settings in time and crashes on Ipad
                //$scope.isEConsent = true;
            }

            $scope.$on('$destroy', function () {
                angular.element(window).off('click')
            });

            $scope.$on('role-changed', function () {
                $scope.permissions = PermissionMatrixService.getRolePermissions();
            });

            init();

        }]
    }

}]);
angular.module( 'app' ).directive( 'commentAudit', function ($sce) {
    return {
        scope: {
            queryId: '='
        },
        restrict: 'AE',
        replace: false,
        templateUrl: 'Study/StudyTemplates/CommentAuditButton.html',
        controller: 'QueryButtonCtrl'
    };

});
angular.module('app')
    .directive('loadingIndicator', function ($sce, $rootScope) {
        return {
            templateUrl: $sce.trustAsResourceUrl('templates/loadingIndicator.html'),
            link: function (scope, element) {
                scope.$on('loading-start', function () {
                    scope.isLoading = true;
                });

                scope.$on('loading-stop', function () {
                    scope.isLoading = false;
                });
            }
        };
});
angular.module('app').directive('sortBtnDirective', function () {
    return {
        scope: {
            sortAsc: '=',
            sortBy: '=',
            sortVarString: '=',
            sortReloadFunction: '=',
            sortDisplay: '@'
        },
        restrict: 'AE',
        replace: false,
        templateUrl: 'templates/sortButton.html',
        controller: function ($scope) {
            $scope.setSortOrder = function () {
                if ($scope.sortBy == $scope.sortVarString) {
                    $scope.sortAsc = !$scope.sortAsc;
                }
                else {
                    $scope.sortAsc = true;
                }
                $scope.sortBy = $scope.sortVarString;
                $scope.sortReloadFunction($scope.sortBy, $scope.sortAsc);
            }
        }
    }
});
angular.module('app').directive('auditBtn', function ($sce) {
    return {
        scope: {
            fieldDisplayName: '=',
            modelProperty: '='
        },
        restrict: 'AE',
        replace: false,
        templateUrl: 'FormDirectives/auditButton.html',
        controller: function ($scope, AuditService) {
            $scope.getFieldAuditTrail = function () {
                AuditService.openFieldAuditPopup($scope.modelProperty, $scope.fieldDisplayName)
            }
        }
    }
});
angular.module( 'app' ).directive( 'formButtons', function ($sce) {
    return {
        scope: {
            fieldName: '=',
            fieldProperty: '=',
            formName: '=',
            topLevelUniqueId: '=',
            formId: '=',
            uniqueFormId: '=',
            formQueries: '=',
            permission: '=',
            //fieldLockList: '=',
            modelStatus: '=',
            //modelValue: '=',
            parentForm:'=',
            form: '='
        },
        restrict: 'E',
        replace: false,
        templateUrl: 'FormDirectives/FormButtonsDirective.html'
    }

} );
angular.module('app')

    .directive('formStatusButtonsDirective', ['FieldDirectiveHelperDTO', 'StudyConfigService', 'PermissionMatrixService', function (FieldDirectiveHelperDTO, StudyConfigService, PermissionMatrixService) {

        return {
            template: [
                    '<div class="btn-group pull-right">',
                        '<label class="btn btn-default" ng-repeat="status in activeStatuses" ng-if="statusBarConfig.showAllFieldsButtons && canToggle(status)" ng-model="Form[status.formProperty]" ng-click="toggleAll(status)" uib-btn-checkbox><span class="status-btn-icon" ng-class="status.class"></span> {{status.value}}</label>',
                    '</div>'
            ].join(''),
            link: function (scope, element) {
                // iterate through the study statuses and set permissions
                scope.activeStatuses = StudyConfigService.getStudyStatuses();
                for (var i = 0; i < scope.activeStatuses.length; i++) {
                    scope.activeStatuses[i].canToggleOn = PermissionMatrixService.hasPermission(scope.activeStatuses[i].actionOn);
                    scope.activeStatuses[i].canToggleOff = PermissionMatrixService.hasPermission(scope.activeStatuses[i].actionOff);
                }

                scope.canToggle = function (status) {
                    if (status.canToggleOff) return true;
                    if (status.canToggleOn) return true;

                    return false;
                }

                scope.toggleAll = function (status) {
                    // scope.formCtrl.$setDirty();
                    updateStatusOfFields(scope.Form, status.fieldProperty, status.formProperty);
                    scope.Form.statusChange = true;
                }

                function updateStatusOfFields(form, fieldStatusProp, formStatusProp) {
                    if (form.FormData) {
                        for (var dataPoint in form.FormData) {

                            if (angular.isArray(form.FormData[dataPoint])) {
                                for (var subForm in form.FormData[dataPoint]) {
                                    updateStatusOfFields(form.FormData[dataPoint][subForm], fieldStatusProp, formStatusProp);
                                }
                            }

                            if (angular.isObject(form.FormData[dataPoint]) && form.FormData[dataPoint].status) {
                                form.FormData[dataPoint].status[fieldStatusProp] = scope.Form[formStatusProp];
                            }
                        }
                    }
                }

            }
        }
    }]);
angular.module('app').directive('repeatedSubFormWrapper', ['PermissionMatrixService', '$log', function (PermissionMatrixService, $log) {
    return {
        scope: {
            formName: '@',
            displayName: '@',
            formInstruction: '@',
            formObject: '=',
            selectedField: '=',
            mainFormTypeId: '=',
            formCtrl: '=',
            formRoot: '=',
            queryHash: '='
        },
        restrict: 'E',
        replace: false,
        templateUrl: 'FormDirectives/RepeatedSubFormWrapper.html',
        controller: ['$scope', 'sxHelpers', 'QueryTransitService', 'FormTemplateService', function ($scope, sxHelpers, QueryTransitService, FormTemplateService) {
            var dirCtrl = this;

            var formTemplateId;

            function ctrlInit() {
                $scope.canAddForm = PermissionMatrixService.hasPermission('createFormData');
                formTemplateId = FormTemplateService.getFormIdByName($scope.formName);
                dirCtrl.deleteArray = [];
                createSubFormArray();
                setWatchOnFormObject();
                emitFormName();
                $scope.selectForm();
            }

            // build the sub-form array using the sub-form name
            function createSubFormArray() {
                if (!$scope.formObject[$scope.formName]) {
                    $scope.formObject[$scope.formName] = [];
                }
                $scope.subFormsArray = $scope.formObject[$scope.formName];

                //var crfQueries = QueryTransitService.getQueryByFormName($scope.crf.Name);

                //PermissionMatrixService.hasPermission('isDev') && $log.info('crf queries in the directive', crfQueries);
                //crfQueries && $scope.subFormsArray.forEach(function (subForm, idx) { // prototype - CM
                //    crfQueries.OpenQueries.forEach(function (query) {
                //        if (subForm._id === query.UniqueFormId) {
                //            $scope.subFormsArray[idx].hasQuery = true;
                //        }
                //    });
                //});
            }

            // FRONT-END SUBFORM CRUD
            $scope.add = function () {
                var randomGUID = sxHelpers.generateGUID();
                var absoluteIdx = $scope.subFormsArray.length;
                var relativePathArray = $scope.formRoot.relativePathArray ? $scope.formRoot.relativePathArray.slice() : [];
                relativePathArray.push($scope.formName + '[' + absoluteIdx + ']' + '.FormData');
                var item = {
                    //Id: randomGUID,
                    absoluteIdx: absoluteIdx,
                    relativePathArray: relativePathArray,
                    name: $scope.formName,
                    formTypeId: formTemplateId,
                    MainFormTypeId: $scope.mainFormTypeId,
                    FormData: { SYN_REF_ID: { value: absoluteIdx, status: {}}} // used in the dataexport to identify each sub-form
                };

                $scope.subFormsArray.push(item);
                $scope.selectForm(item);
                $scope.formCtrl.$setDirty();
            }

            $scope.isSelected = function (item) {
                return $scope.selectedFormIdx === item.absoluteIdx;
            }

            $scope.selectForm = function (item) {
                if (item) {
                    $scope.selectedFormIdx = item.absoluteIdx;
                    return;
                }

                var length = $scope.subFormsArray.length - 1;

                for (var i = length; i >= 0; i--) {
                    if ($scope.subFormsArray[i].isDeleted && $scope.subFormsArray[i].isDeleted.value) {
                        continue;
                    } else {
                        $scope.selectedFormIdx = $scope.subFormsArray[i].absoluteIdx;
                        return;
                    }
                }

                $scope.selectedFormIdx = null;
            }

            $scope.hideDeletedForms = function (item) {
                if ($scope.state == 'manager') {
                    return true;
                }

                if (!item.isDeleted || !item.isDeleted.value) {
                    return true;
                }

                if (item.isDeleted && item.isDeleted.value && item.isDeleted.value === true) {
                    return false;
                }
            }

            function deletedNestedForms(arrayOfForms, arrayOfNames) {
                
                arrayOfNames.forEach(function (name) {
                    if (arrayOfForms[name]) {
                        for (var i = 0; i < arrayOfForms[name].length; i++) {
                            // mark the forms as deleted
                            arrayOfForms[name][i].isDeleted = {
                                value: true
                            }
                            deletedNestedForms(arrayOfForms[name][i], arrayOfNames);
                        }
                    }
                });
            }

            $scope.delete = function (index) {

                if (!$scope.confirmDeleteMessage) {
                    $scope.confirmDeleteMessage = 'Delete this subform, and all it\'s subforms?'
                    return
                }

                if ($scope.confirmDeleteMessage) {

                    $scope.confirmDeleteMessage = '';

                    // mark the 'clicked' form as deleted
                    $scope.formObject[$scope.formName][index].isDeleted = {
                        value: true
                    };

                    $scope.formObject[$scope.formName][index].class = true; // temporary class for deleted forms
                    deletedNestedForms($scope.formObject[$scope.formName][index], dirCtrl.deleteArray);

                    // When autoselecting a form after a delete, the audit trail remains contected to deleted sub-form
                    // $scope.selectForm();
                }
            }

            $scope.cancelDelete = function () {
                $scope.confirmDeleteMessage = '';
            }

            $scope.restore = function (index) {
                if (!$scope.confirmRestoreMessage) {
                    $scope.confirmRestoreMessage = 'Restore this subform?';
                    return
                }

                if ($scope.confirmRestoreMessage) {
                    $scope.confirmRestoreMessage = '';
                }

                if ($scope.formObject[$scope.formName][index].isDeleted) {
                    $scope.formObject[$scope.formName][index].isDeleted.value = false;
                }
            }

            $scope.cancelRestore = function () {
                $scope.confirmRestoreMessage = '';
            }

            // temporary functionality to swithc between investigator and manager
            $scope.switchState = function () {
                if ($scope.state == 'investigator') {
                    $scope.state = 'manager';
                } else {
                    $scope.state = 'investigator';
                }
            }

            // watch for names of subforms
            $scope.$on('returnChildern', function (event, subFormName) {

                if (dirCtrl.deleteArray.indexOf(subFormName) === -1 && subFormName !== $scope.formName) {
                    dirCtrl.deleteArray.push(subFormName);
                }

            });

            // emit the current form name
            emitFormName = function () {
                $scope.$emit('returnChildern', $scope.formName);
            }

            // watch for the fome object, the create an array for subforms
            setWatchOnFormObject = function () {
                $scope.$watch('formObject', function (newVal, oldVal) {
                    if (newVal !== oldVal) {
                        createSubFormArray();
                    }
                });
            }

            ctrlInit();
        }]
    };
}]);
angular.module('app').directive('repeatedSubFormDirective', ['$log', function ($log) {
    return {
        scope: {
            formName: '=',
            mainFormTypeId: '=',
            subForm: '=',
            selectedField: '=',
            formCtrl: '=',
            queryHash: '='
        },
        restrict: 'E',
        replace: false,
        templateUrl: 'FormDirectives/RepeatedSubFormDirective.html',
        controller: ['$scope', '$timeout', '$log', 'FormTemplateService', 'QueryService', 'FormBuilderDTO', 'CalculationBuilderDTO', 'PermissionMatrixService', 'FormDataTransitService', 'DefaultMetaDataService', function ($scope, $timeout, $log, FormTemplateService, QueryService, FormBuilderDTO, CalculationBuilderDTO, PermissionMatrixService, FormDataTransitService, DefaultMetaDataService) {

            var formDataObject = FormDataTransitService.getFormObject($scope.mainFormTypeId).form; // Form object, complete with parents and children.
            var formTemplate = FormTemplateService.getMetaData($scope.formName); // get the form metadata by the form name.
            var FormBuilder = new FormBuilderDTO;
            var CalculationBuilder = new CalculationBuilderDTO;

            PermissionMatrixService.hasPermission('isDev') && $log.info(formTemplate);

            function buildAppendedForm() {
                $timeout(function () {
                    FormBuilder.Build(formTemplate, $scope);

                    if (formTemplate.calculations) {
                        calculationMetaData = {
                            formObject: $scope.subForm.FormData,
                            formObjectName: 'subForm.FormData',
                            formRootName: 'subForm',
                            calculations: formTemplate.calculations
                        }
                        CalculationBuilder.Build(calculationMetaData, $scope);
                    }
                }, 0);
            }

            // queries are loaded from the top level form
            //function loadQueries() {
            //    QueryService.LoadQueriesByForm($scope.formId, $scope.uniqueId)
            //        .then(function success(response) {
            //            // set the form queries on the scope for the synQueries directive to access
            //            $scope.formQueries = response;
            //        }, function fail(response) {
            //            $log.error('Failed to load Queries');
            //        });
            //}

            function ctrlInit() {
                // scope variables
                $scope.renderValidationsObj = {};
                $scope.uniqueId = $scope.subForm._id; // used to load the queries
                $scope.topUniqueId = formDataObject._id || null; // An _id won't exist if the form hasn't been saved
                $scope.formId = formTemplate.formId; // used to load the queries
                $scope.metActionsObj = {};
                $scope.metConditionsObj = {}; // retire
                $scope.metMessageObj = {}; // retire 

                // need to take out spaces to create an element id for them FormBuilder to target
                $scope.targetElementId = $scope.subForm.relativePathArray.join('').toLowerCase().replace(/\.|\[|\]|\s/g, '');
                $scope.targetElementId = $scope.targetElementId + '-form-builder-target';

                // append data to the formTemplate before the build
                formTemplate.formObject = $scope.subForm.FormData;
                formTemplate.formObjectName = 'subForm.FormData';
                formTemplate.formRootName = 'subForm';
                formTemplate.mainFormTypeId = $scope.mainFormTypeId;
                formTemplate.relativePathArray = $scope.subForm.relativePathArray;

                //loadQueries();
                buildAppendedForm();
            }

            //Selected field object with data and formTemplate
            $scope.selectField = function (datapoint, fieldPath) {
                if (datapoint) {
                    if (!fieldPath) fieldPath = '';
                    angular.copy(formTemplate.fieldsHash[datapoint], $scope.selectedField);
                    $scope.selectedField.formId = $scope.mainFormTypeId;
                    $scope.selectedField.subFormId = $scope.formId;
                    $scope.selectedField.formName = formTemplate.formName;
                    $scope.selectedField.formUniqueId = $scope.subForm._id; // An _id won't exist if the form hasn't been saved
                    $scope.selectedField.formTopLevelUniqueId = formDataObject._id || null; // An _id won't exist if the form hasn't been saved
                    $scope.selectedField.fieldPath = fieldPath;
                    $scope.selectedField.fullPath = fieldPath + datapoint;
                    $scope.selectedField.fieldData = $scope.subForm.FormData[datapoint];
                    $scope.selectedField.description = $scope.selectedField.question.label;
                }
            }

            ctrlInit();

        }]
    };

}]);
angular.module('app').directive('formWrapperDirective', ['$sce', 'PermissionMatrixService', 'FormHelperDTO', 'StudyConfigService',
    function ($sce, PermissionMatrixService, FormHelperDTO, StudyConfigService) {
    var FormHelper = new FormHelperDTO;
    return {
        restrict: 'AE',
        transclude: true,
        // replace:true,
        templateUrl: $sce.trustAsResourceUrl(window.baseUrl + 'templates/FormWrapper.html'),
        link: function (scope, element) {
            scope.isDisabled = function () {                
                var canCreateFormData = PermissionMatrixService.hasPermission('createFormData');
                var canUpdateFormData = PermissionMatrixService.hasPermission('updateFormData');
                if (!canCreateFormData || !canUpdateFormData) {
                    return true;
                }
                return false;
            }

            element.bind("wheel", function (event) {
                // scroll progress logic
                //console.log("wheeling")
                //var form = document.getElementsByClassName("form-content")[0];
                //var scrollPercentage = (form.scrollTop / form.scrollHeight) * 100;
                //scope.scrollPercentage = scrollPercentage;
                //scope.$apply(); // this is the problem
            });

            scope.statusBarConfig = StudyConfigService.getMetaDataByProperty("statusBar");
            scope.sidePanelConfig = StudyConfigService.getMetaDataByProperty("sidePanel");
            //FormHelper.loadQueries(scope, scope.formId);
        }

    }
}]);
angular.module('app').directive('formSidePanel', [function () {
    return {
        scope: true,
        restrict: 'E',
        replace: false,
        templateUrl: 'FormDirectives/FormSidePanelDirective.html',
        controller: 'FormSidePanelController as sidePaneCtrl'
    }
}]);
angular.module('app').directive('eProControlBarDirective', ['ValidationActionService', 'userService', '$uibModal', '$state', '$rootScope', 'BrowserAPIService',
    function (ValidationActionService, userService, $uibModal, $state, $rootScope, BrowserAPIService) {

        return {
            scope: true,
            templateUrl: "FormTemplates/EProControlBar.html",
            link: function () { },
            controller: ['$scope', function ($scope) {

                BrowserAPIService.disableBackButton();

                var element = document.documentElement;

                $scope.disableSave = true;
                $scope.$watch("renderValidationsObj", function (newVal) {
                    var hasOne = ValidationActionService.formHasIntensity($scope.renderValidationsObj, 1);
                    $scope.disableSave = hasOne ? true : false;
                }, true);

                $scope.saveEPro = function () {
                    $scope.updateStatus(null, true).then(function () {
                        $rootScope.openEProModalIsOpenOrOpening = false;
                        BrowserAPIService.enableBackButton();
                        $scope.$close();
                        BrowserAPIService.toggleFullScreen(element);
                        $state.go("subject");
                    });
                };

                var signatureRequiredExitModalTemplate = '\
                    <div class="modal-header"> \
                        <button type="button" class="close" ng-click="cancel()" aria-label="Close"><span aria-hidden="true">&times;</span></button> \
                        <h2 style="text-align:center;">Confirm Form Exit</span></h2> \
                    </div> \
                    <div class="modal-body">Only an investigator may exit this form. If you are sure you would like to exit without saving, please enter your login credentials and press Confirm</div> \
                    <div class="modal-footer"> \
                        <div class="row alert alert-danger margin-top-5" ng-show="errorMessage">{{errorMessage}}</div> \
                        <div> \
                            <div class="row"> \
                                <input class="form-control margin-top-5" type="text" ng-model="cusername" placeholder="Username" ng-keyup="$event.keyCode == 13 && confirm(username, password)" /> \
                            </div> \
                            <div class="row"> \
                                <input class="form-control margin-top-5" type="password" ng-model="password" placeholder="Password" ng-keyup="$event.keyCode == 13 && confirm(username, password)" /> \
                            </div> \
                        </div> \
                        <div class="row"> \
                            <button type="button" ng-click="confirm(username, password)" class="btn btn-primary">Confirm</button> \
                            <button type="button" ng-click="cancel()" class="btn btn-default">Cancel</button> \
                        </div> \
                    </div>'

                var closeEProWindow = $scope.$close;
                $scope.exitEPro = function () {

                    return $uibModal.open({
                        animation: true,
                        template: signatureRequiredExitModalTemplate,
                        backdrop: 'static',
                        size: 'lg',
                        controller: ['$scope', function ($scope) {

                            $scope.cancel = $scope.$close;
                            $scope.confirm = function (username, password) {
                                userService.login(username, password, function (success) {
                                    BrowserAPIService.enableBackButton();
                                    $rootScope.openEProModalIsOpenOrOpening = false;
                                    $scope.$close();
                                    closeEProWindow();
                                    BrowserAPIService.toggleFullScreen(element);
                                    $state.go("subject");
                                }, function (error) {
                                    $scope.errorMessage = err.data.error_description;
                                });
                            }

                        }],
                    });

                };

            }]
        }
    }]);

angular.module('app').directive('formScrollProgressBarDirective', [
    function () {

        return {
            scope: {
                scrollPercentage: "="
            },
            restrict: 'AE',
            transclude: true,
            templateUrl: "FormDirectives/FormScrollProgressBarDirective.html",
            link: function (scope, element) { },
            controller: function ($scope) {
                console.log("asdfasdf", $scope.scrollPercentage)
            }
        }

    }]);
angular.module('app').directive('studyLanding', ['$log', 'setWidgetDisplayFilter', '$rootScope', function ($log, setWidgetDisplayFilter, $rootScope) {
    return {
        scope: {
            widgetColumns: '=',
            maxWidgets: '=',
            isEditMode: '='
        },
        restrict: 'E',
        replace: false,
        templateUrl: function (el, attr) {
            if (attr.widgetColumns == 3) {
                return 'view/Views/StudyLanding3Cols.html'
            }
        },

        controller: ['WidgetService', '$scope', function (WidgetService, $scope) {
            var widgets = WidgetService.GetUserWidgets();

            $scope.userWidgets = setWidgetDisplayFilter(widgets, $scope.widgetColumns);

            $scope.getLastPos = WidgetService.GetLastPos;

            //$scope.addWidget = function (columnNumber) {

            //}
            
            $scope.$on('setWidgets', function () {
                widgets = WidgetService.GetUserWidgets();
                $scope.userWidgets = setWidgetDisplayFilter(widgets, $scope.widgetColumns);
            });


        }]


    };

}]);
angular.module('app').directive('widgetWrapperDirective', ['$log', function ($log) {
    return {
        scope: {
            widget: '=',
            add: '@',
            lastPos: "=",
            col: '=',
            isEditMode: '=',
            isSingleWidget: '='

        },
        restrict: 'E',
        replace: false,
        templateUrl: 'view/Views/WidgetWrapper.html',

        controller: ['$scope', '$timeout', '$log', 'WidgetService', '$uibModal', '$rootScope', function ($scope, $timeout, $log, WidgetService, $uibModal, $rootScope) {

            //console.log($scope)
            //var a = angular.element();

            //$scope.maximizeWidget = function (widget) {
            //    //if (!$rootScope.loginIsOpened) {
            //    //    $rootScope.loginIsOpened = true;
            //    //    var modalInstance = $uibModal.open({
            //    //        templateUrl: '/templates/login.html',
            //    //        controller: 'signinController',
            //    //        controllerAs: 'loginCtrl',
            //    //        backdrop: 'static',
            //    //        size: 'sm',
            //    //        windowClass: 'modal-login',
            //    //        keyboard: false
            //    //    }).result.finally(
            //    //            function () {
            //    //                $rootScope.loginIsOpened = false;
            //    //            }
            //    //        );
            //    //}
            //    //debugger
            //    var templateString = widget.templateUrl;
            //    var controllerString = widget.controller;
            //    var modalInstance = $uibModal.open({
            //        anmiation: true,
            //        templateUrl: templateString,
            //        controller: controllerString,
            //        size: 'lg',
            //        //add this to disable clicking on window
            //        //backdrop: 'static',
            //        backdropClass: 'maximized-widget',
            //        windowClass: 'maximized-widget'

            //        //resolve: {
            //        //    QueryData: function () {
            //        //        return QueryData;
            //        //    }
            //        //}
            //    });

            //    modalInstance.result.then(function () {

            //    }, function () {
            //        $log.info("Modal Closed");
            //    });

            //}

            $scope.maximizeWidget = function (widget) {
                WidgetService.MaximizeWidget(widget);
            }

            $scope.minimizeWidget = function () {
                $rootScope.$broadcast('minimizeWidget');
            }


            $scope.removeWidget = function (widget) {
                WidgetService.DeleteWidget(widget);
            }

        }]
    };

}]);
angular.module('app').directive('widgetDirective', ['$log', 'widgetMap', function ($log, widgetMap) {

    return {
        scope: {
            widget: '=',
            //add: '@',
            //lastPos: '=',
            //col: '='
        },
        restrict: 'E',

        replace: false,
        template: '<ng-include src="widget.templateUrl"></ng-include>',

        controller: ['$scope', '$timeout', '$log', 'FormTemplateService', 'QueryService', 'FormBuilderDTO', 'CalculationBuilderDTO', 'PermissionMatrixService', 'FormDataTransitService', 'DefaultMetaDataService', function ($scope, $timeout, $log, FormTemplateService, QueryService, FormBuilderDTO, CalculationBuilderDTO, PermissionMatrixService, FormDataTransitService, DefaultMetaDataService) {

            //$scope.column = $scope.$parent.widgetColumn;
            //console.log('add?', $scope.add)
        }]
    };

}]);
angular.module('app').directive('reportsWidgetDirective', ['$log', 'ReportingService', 'WidgetService', function ($log, ReportingService, WidgetService) {
    return {
        scope: {
            widget: '='
        },
        restrict: 'E',
        replace: false,
        template: '<div ng-class="{\'report-tile-lg\': isSingleWidget === true, \'report-tile\': isSingleWidget !== true}"></div>',
        link: function (scope, element, attr) {

            var id = scope.$parent.$parent.widget.reportId;
            var name = scope.$parent.$parent.widget.reportName;
            scope.isSingleWidget = scope.$parent.$parent.$parent.isSingleWidget;
            //get widget passed in as html data
            element[0].firstChild.id = name;
            ReportingService.getTile('f5f7e631-df55-436b-8ce2-65d22b450f1b', id, function (config) {
                // Get a reference to the embedded report HTML element
                var reportContainer = document.getElementById(name);

                // Embed the report and display it within the div container.
                var report = powerbi.embedNew(reportContainer, config);
            });
        }
    };

}]);
angular.module('app').directive('addWidgetDirective', ['$log', 'setWidgetDisplayFilter', function ($log, setWidgetDisplayFilter) {
    return {
        scope: {
            column: '=',
            lastPos: '='
        },
        restrict: 'E',
        replace: false,
        templateUrl: 'view/Views/AddWidget.html',

        controller: ['WidgetService', '$scope', function (WidgetService, $scope, $uibModalInstance) {
            $scope.addWidget = function () {

                WidgetService.AddNewWidget($scope.column, $scope.lastPos);
            }
        }]


    };

}]);
angular.module('app').directive('singleWidgetDirective', ['$log', 'ReportingService', 'WidgetService', function ($log, ReportingService, WidgetService) {
    return {
        scope: {

        },
        restrict: 'E',
        replace: false,
        template: '<widget-wrapper-directive widget="widget" is-edit-mode="isEditMode" is-single-widget="true"></widget-wrapper-directive>',
        link: function (scope, element, attr) {
            scope.widget = WidgetService.GetMaximizedWidget();
            scope.isEditMode = false;
        },
        controller: ['$scope', 'WidgetService', '$rootScope', function ($scope, WidgetService, $rootScope) {
            //$scope.widget = WidgetService.GetMaximizedWidget();
            //debugger
            //$scope.$on('maximizeWidget', function () {
            //    $scope.widget = WidgetService.GetMaximizedWidget();
            //});
        }]
    };

}]);
angular.module('app').directive('fileModel', ['$parse', function ($parse) {
    return {
        restrict: 'A',
        link: function (scope, element, attrs) {
            var model = $parse(attrs.fileModel);
            var modelSetter = model.assign;

            element.bind('change', function () {
                scope.$apply(function () {
                    modelSetter(scope, element[0].files[0]);
                });
            });

            scope.$on('$destroy', function () {
                element.unbind();
            });
        }
    };
}]);
angular.module('app').directive('signatureDirective', ['eConsentSignaturePadService', function (eConsentSignaturePadService) {
    return {
        restrict: 'E',
        scope: {
            canvasId: '@'
        },
        template: '<canvas id="{{canvasId}}"></canvas>',
        replace: false,
        link: function (scope, element, attrs) {
            //add method on SignaturePad to remove whitespace around signature for display purposes.

            SignaturePad.prototype.cropSignatureCanvas = function () {

                var canvas = this._canvas;
                // First duplicate the canvas to not alter the original
                var croppedCanvas = document.createElement('canvas'),
                    croppedCtx = croppedCanvas.getContext('2d');

                croppedCanvas.width = canvas.width;
                croppedCanvas.height = canvas.height;
                croppedCtx.drawImage(canvas, 0, 0);

                // Next do the actual cropping
                var w = croppedCanvas.width,
                    h = croppedCanvas.height,
                    pix = { x: [], y: [] },
                    imageData = croppedCtx.getImageData(0, 0, croppedCanvas.width, croppedCanvas.height),
                    x, y, index;

                for (y = 0; y < h; y++) {
                    for (x = 0; x < w; x++) {
                        index = (y * w + x) * 4;
                        if (imageData.data[index + 3] > 0) {
                            pix.x.push(x);
                            pix.y.push(y);

                        }
                    }
                }
                pix.x.sort(function (a, b) { return a - b });
                pix.y.sort(function (a, b) { return a - b });
                var n = pix.x.length - 1;

                w = pix.x[n] - pix.x[0];
                h = pix.y[n] - pix.y[0];
                var cut = croppedCtx.getImageData(pix.x[0], pix.y[0], w, h);

                croppedCanvas.width = w;
                croppedCanvas.height = h;
                croppedCtx.putImageData(cut, 0, 0);

                return croppedCanvas.toDataURL();
            };


            function initSignaturePad() {
                //eSignatureCanvas = document.getElementById(scope.canvasId);
                eSignatureCanvas = element.find('canvas')[0];
                //  look into resizing bugs - good resource: https://github.com/szimek/signature_pad/blob/gh-pages/js/app.js
                if (!eSignatureCanvas) return;

                eSignatureCanvas.width = window.innerWidth - 70;
                eSignatureCanvas.height = 350;
                eConsentSignaturePadService.signaturePad = new SignaturePad(eSignatureCanvas, {
                    minWidth: 1.4,
                    
                    // defaults to transparent black, which is fine when saving as PNG, but needs to be changed to white for saving as JPEG to append to PDF with jsPDF
                    // breaks the whitespae trimmer if non transparent. 
                    //backgroundColor: 'rgb(255,255,255)'

                });
            }

            initSignaturePad();

        }
    };
}]);
angular.module('app')

    .directive('synInfoBar', ['FieldDirectiveHelperDTO', function (FieldDirectiveHelperDTO) {

        var FieldDirectiveHelper = new FieldDirectiveHelperDTO;

        return {
            scope: {
                heading: "@",
                subHeading: "@",
                stylesObj: "=",
                text: "@",
            },
            template: '<div class="form-section-title"><h3 ng-if="heading">{{heading}}</h3><h4 ng-if="subHeading">{{subHeading}}</h4><p ng-if="text">{{text}}</p></div>',
            link: function (scope, element) {

                FieldDirectiveHelper.SetClasses(scope.stylesObj, element);
                FieldDirectiveHelper.SetAttributes(scope.attributeObj, element);

            },
            controller: function ($scope) {

            }
        }
    }]);
angular.module('app')

    .directive('synQuestion', ['$compile', '$log', function ($compile, $log) {
    
        return {
            priority: 1,
            scope: {
                text: '@',
                label: '@',
                note: '@',
                list: '=',
                stylesObj: '='
            },
            template: '<div class="question-wrapper"><label ng-show="label" ng-bind="label"></label><p ng-show="note" ng-bind="note"></p><ul ng-if="list"><li ng-repeat="item in list">{{item}}</li></ul></div>',
            link: function (scope, element, attributes, controller, transcludeFn) {

                if (scope.stylesObj) {
                    selectors = Object.keys(scope.stylesObj);
                    selectors.forEach(function (selector) {
                        var selectedElements = angular.element(element[0].querySelectorAll(selector));
                        if (selectedElements) {
                            for (var i = 0; i < selectedElements.length; i++) {
                                angular.element(selectedElements[i]).addClass(scope.stylesObj[selector].join(' '));
                            }
                        } else {
                            $log.warn('could not find element by selector: ' + selector);
                        }

                    });
                }

            }
        }

    }]);
angular.module('app')

    .directive('synRadio', ['FieldDirectiveHelperDTO', function (FieldDirectiveHelperDTO) {

        var FieldDirectiveHelper = new FieldDirectiveHelperDTO;

        // Form.IsFrozen || Form.IsLocked || Form.FormData.default.status.Lock || Form.FormData.default.status.Freeze || !Permission.isSite || subject.IsLocked || subject.IsFrozen

        return {
            priority: 2,
            scope: {
                field: "=",
                disableObj: "=",
                displayValueArr: "=",
                stylesObj: "=",
                attributeObj: "=",
                datapoint: "@"
            },
            template: [
                    '<div class="input-wrapper">',
                        '<fieldset ng-disabled="isDisabled()">',
                            '<div class="radio" ng-repeat="obj in displayValueArr track by $index">',
                                '<input type="radio" ng-model="field.value" id="{{datapoint}}_{{$index}}" ng-value="obj.value">',
                                '<label for="{{datapoint}}_{{$index}}">{{obj.display}}</label>',
                            '</div>',
                        '</fieldset>',
                    '</div>',
            ].join(''),
            link: function (scope, element) {

                FieldDirectiveHelper.SetClasses(scope.stylesObj, element);
                FieldDirectiveHelper.SetAttributes(scope.attributeObj, element);

            },
            controller: function ($scope) {

                $scope.isDisabled = function () {
                    if (!$scope.field.status) {
                        return false;
                    }

                    if ($scope.field.status.Lock) {
                        return true;
                    }

                    if ($scope.field.status.Freeze) {
                        return true;
                    }
                }

                // if there are more than two options, render the buttons vertically
                $scope.setClass = function () {
                    if ($scope.displayValueArr.length > 2) {
                        return 'radio-vertical';
                    }

                    return 'radio-horizontal';
                }
            }
        }
    }]);
angular.module('app')

    .directive('synDropdown', ['FieldDirectiveHelperDTO', function (FieldDirectiveHelperDTO) {

        var FieldDirectiveHelper = new FieldDirectiveHelperDTO;

        return {
            priority: 2,
            scope: {
                field: "=",
                disableObj: "=",
                displayValueArr: "=",
                stylesObj: "=",
                attributeObj: "="
            },
            template: [
                    '<div class="input-wrapper">',
                        '<fieldset>',
                            '<select ng-options="item.value as item.display for item in displayValueArr" ng-model="field.value" ng-disabled="isDisabled()" class="form-control">',
                                '<option></option>',
                            '</select>',
                        '<fieldset>',
                    '</div>'
            ].join(''),
            link: function (scope, element) {

                FieldDirectiveHelper.SetClasses(scope.stylesObj, element);
                // not in use, as the attributes can be set to both the <select> tag or it's childern <option> tags
                // FieldDirectiveHelper.SetAttributes(scope.attributeObj, element);

            },
            controller: ['$scope', function ($scope) {

                $scope.isDisabled = function () {
                    if (!$scope.field.status) {
                        return false;
                    }

                    if ($scope.field.status.Lock) {
                        return true;
                    }

                    if ($scope.field.status.Freeze) {
                        return true;
                    }
                }

            }]
        }

    }]);
angular.module('app')

    .directive('synNumber', ['FieldDirectiveHelperDTO', function (FieldDirectiveHelperDTO) {

        var FieldDirectiveHelper = new FieldDirectiveHelperDTO;
         
        return {
            priority: 2,
            scope: {
                field: "=",
                disableObj: "=",
                stylesObj: "=",
                attributeObj: "="
            },
            template: '<div class ="input-wrapper"><fieldset><input type="number" ng-model="field.value" ng-disabled="isDisabled()"></fieldset></div>',
            link: function (scope, element) {

                FieldDirectiveHelper.SetClasses(scope.stylesObj, element);
                FieldDirectiveHelper.SetAttributes(scope.attributeObj, element);

            },
            controller: function ($scope) {

                $scope.isDisabled = function () {
                    if (!$scope.field.status) {
                        return false;
                    }

                    if ($scope.field.status.Lock) {
                        return true;
                    }

                    if ($scope.field.status.Freeze) {
                        return true;
                    }
                }

            }
        }
    }]);
angular.module('app')

    .directive('synTextfield', ['FieldDirectiveHelperDTO', 'InputFormatHelper', 'PermissionMatrixService', function (FieldDirectiveHelperDTO, InputFormatHelper, PermissionMatrixService) {

        var FieldDirectiveHelper = new FieldDirectiveHelperDTO;

        return {
            priority: 2,
            scope: {
                field: "=",
                disableObj: "=",
                stylesObj: "=",
                attributeObj: "=",
                formatObj: '='
            },
            template: '<div class="input-wrapper"><fieldset><input type="text" ng-model="field.value" ng-disabled="isDisabled(); "></fieldset></div>',
            link: function (scope, element) {

                FieldDirectiveHelper.SetClasses(scope.stylesObj, element);
                FieldDirectiveHelper.SetAttributes(scope.attributeObj, element);

                scope.formatObj && scope.$watch('field.value', function synFormatWatcher(newVal) {
                    if (!newVal) return;
                    for (var format in scope.formatObj) {
                        if (scope.field.value) scope.field.value = InputFormatHelper.functionMap[format](scope.field.value, scope.formatObj[format]);
                    }
                });

            },
            controller: function ($scope) {
                $scope.isDisabled = function () {

                    //var canUpdateFormData = PermissionMatrixService.hasPermission('updateFormData');
                    //var canCreateFormData = PermissionMatrixService.hasPermission('createFormData');

                    //if (!canUpdateFormData || !canCreateFormData) {
                    //    return true;
                    //}

                    if (!$scope.field.status) {
                        return false;
                    }

                    if ($scope.field.status.Lock) {
                        return true;
                    }

                    if ($scope.field.status.Freeze) {
                        return true;
                    }
                }

            }
        }

    }]);
angular.module('app')

    .directive('synTextarea', ['FieldDirectiveHelperDTO', 'InputFormatHelper', function (FieldDirectiveHelperDTO, InputFormatHelper) {

        var FieldDirectiveHelper = new FieldDirectiveHelperDTO;

        return {
            priority: 2,
            scope: {
                field: "=",
                disableObj: "=",
                stylesObj: "=",
                attributeObj: "=",
                formatObj: '='
            },
            template: '<div class="input-wrapper"><fieldset><textarea ng-model="field.value" ng-disabled="isDisabled()" class="form-control"></textarea></fieldset></div>',
            link: function (scope, element) {

                FieldDirectiveHelper.SetClasses(scope.stylesObj, element);
                FieldDirectiveHelper.SetAttributes(scope.attributeObj, element);

                scope.formatObj && scope.$watch('field.value', function synFormatWatcher(newVal) {
                    if (!newVal) return;
                    for (var format in scope.formatObj) {
                        if (scope.field.value) scope.field.value = InputFormatHelper.functionMap[format](scope.field.value, scope.formatObj[format]);
                    }
                });

            },
            controller: function ($scope) {

                $scope.isDisabled = function () {
                    if (!$scope.field.status) {
                        return false;
                    }

                    if ($scope.field.status.Lock) {
                        return true;
                    }

                    if ($scope.field.status.Freeze) {
                        return true;
                    }
                }

            }
        }

    }]);
angular.module('app')

    .directive('synDateParser', ['$filter', 'FieldDirectiveHelperDTO', '$timeout', 'PermissionMatrixService', function ($filter, FieldDirectiveHelperDTO, $timeout, PermissionMatrixService) {

        var FieldDirectiveHelper = new FieldDirectiveHelperDTO;

        return {
            priority: 2,
            scope: {
                field: "=",
                format: "@",
                delimiter: '@',
                displayFormat: "@",
                disableObj: "=",
                stylesObj: "=",
                attributeObj: "="
            },

            require: '^form',
            // using bootstrap-datepicker, setting options vis attributes
            templateUrl: 'FieldDirectives/templates/synDateParser.html',
            link: function (scope, element, attribute, formController) {
                scope.pickerFormat = scope.format.split(scope.delimiter).map(function (el) {

                    return el === 'mmm' || el === 'mmmm' ? 'mm' : el;
                    
                }).join(scope.delimiter);
                
                scope.dateString = $filter('date')(scope.field.value, scope.displayFormat, 'UTC');

                FieldDirectiveHelper.SetClasses(scope.stylesObj, element);
                FieldDirectiveHelper.SetAttributes(scope.attributeObj, element);

                $timeout(function () {

                    formController.$setPristine();

                }, 0);

            },
            controller: ['$scope', function ($scope) {
                var canCreateFormData = PermissionMatrixService.hasPermission('createFormData');
                var canUpdateFormData = PermissionMatrixService.hasPermission('updateFormData');

                $scope.isDisabled = function () {
                    if (!canCreateFormData && !canUpdateFormData) {
                        return true;
                    }

                    if (!$scope.field.status) {
                        return false;
                    }

                    if ($scope.field.status.Lock) {
                        return true;
                    }

                    if ($scope.field.status.Freeze) {
                        return true;
                    }
                    return false;
                }

                $scope.setUTCDate = function () {
                    var parser = $.fn.datepicker.DPGlobal;
                    $scope.field.value = parser.parseDate($scope.dateString, parser.parseFormat($scope.pickerFormat));
                    $scope.dateString = $filter('date')($scope.field.value, $scope.displayFormat, 'UTC');
                }

            }]
        }

    }]);
angular.module('app')

    .directive('synTimeParser', ['FieldDirectiveHelperDTO', function (FieldDirectiveHelperDTO) {

        var FieldDirectiveHelper = new FieldDirectiveHelperDTO;

        return {
            priority: 2,
            scope: {
                field: "=",
                // format: "@",
                disableObj: "=",
                stylesObj: "=",
                attributeObj: "="
            },
            template: [
                    '<div class="input-wrapper">',
                        '<fieldset ng-disabled="isDisabled()">',
                            '<div uib-timepicker ng-model="dateTime" show-meridian="false" show-spinners="false" mousewheel="false"></div>',
                        '<fieldset>',
                    '</div>'
            ].join(''),
            link: function (scope, element) {

                FieldDirectiveHelper.SetClasses(scope.stylesObj, element);
                FieldDirectiveHelper.SetAttributes(scope.attributeObj, element);

                // set the time picker value equal to a saved time on the data point
                if (scope.field.value) {
                    scope.dateTime = new Date();
                    var timeArray = scope.field.value.split(':');

                    scope.dateTime.setHours(timeArray[0]);
                    scope.dateTime.setMinutes(timeArray[1]);
                    // scope.dateTime.setSeconds(timeArray[2]);
                }

                // watch the time picker and convert the hours and minutes to a string value for the data point
                scope.$watch('dateTime', function (newVal, oldVal) {
                    if (newVal) {
                        scope.field.value = ("00" + scope.dateTime.getHours()).slice(-2) + ":" + ("00" + scope.dateTime.getMinutes()).slice(-2);
                    }
                });
                

            },
            controller: ['$scope', 'uibDateParser', function ($scope, uibDateParser) {

                $scope.$watch("field.value", function (newVal) {

                    if ($scope.field.value === null) {
                        $scope.dateTime = null;
                    }

                })

                $scope.isDisabled = function () {
                    if (!$scope.field.status) {
                        return false;
                    }

                    if ($scope.field.status.Lock) {
                        return true;
                    }

                    if ($scope.field.status.Freeze) {
                        return true;
                    }
                }

            }]
        }

    }]);
angular.module('app')

    .directive('synCheckboxDepreciated', ['FieldDirectiveHelperDTO', function (FieldDirectiveHelperDTO) {

        var FieldDirectiveHelper = new FieldDirectiveHelperDTO;

        return {
            priority: 2,
            scope: {
                field: "=",
                displayValueArr: "=",
                disableObj: "=",
                stylesObj: "=",
                attributeObj: "=",
                datapoint: "@"
            },
            template: [
                    '<div class="input-wrapper">',
                        '<fieldset ng-disabled="isDisabled()">',
                            '<div class="checkbox" ng-repeat="obj in displayValueArr track by $index">',
                                '<input type="checkbox" ng-model="field[obj.value].value" id="{{datapoint}}_{{$index}}">',
                                '<label for="{{datapoint}}_{{$index}}">{{obj.display}}</label>',
                            '</div>',
                        '</fieldset>',
                    '</div>'
            ].join(''),
            link: function (scope, element) {

                FieldDirectiveHelper.SetClasses(scope.stylesObj, element);
                FieldDirectiveHelper.SetAttributes(scope.attributeObj, element);

            },
            controller: ['$scope', function ($scope) {

                $scope.isDisabled = function () {
                    if (!$scope.field.status) {
                        return false;
                    }

                    if ($scope.field.status.Lock) {
                        return true;
                    }

                    if ($scope.field.status.Freeze) {
                        return true;
                    }
                }

            }]
        }

    }]);
angular.module('app')

    .directive('synReadonly', ['FieldDirectiveHelperDTO', 'InputFormatHelper', function (FieldDirectiveHelperDTO, InputFormatHelper) {

    var FieldDirectiveHelper = new FieldDirectiveHelperDTO;

    return {
        restrict: "E",

        scope: {
            field: '=',
            stylesObj: '=',
            disableObj: '=',
            attributeObj: '=',
            formatObj: '='
        },

        template: [
                '<div class="input-wrapper">',
                    '<fieldset>',
                        '<input type="text" value="{{field.value}}" ng-disabled="isDisabled()" readonly/>',
                    '</fieldset>',
                '</div>'
        ].join(''),

        link: function (scope, element) {

            FieldDirectiveHelper.SetClasses(scope.stylesObj, element);
            FieldDirectiveHelper.SetAttributes(scope.attributeObj, element);

            scope.formatObj && scope.$watch('field.value', function synFormatWatcher(newVal) {
                if (!newVal) return;
                for (var format in scope.formatObj) {
                    if (scope.field.value) scope.field.value = InputFormatHelper.functionMap[format](scope.field.value, scope.formatObj[format]);
                }
            });

        },

        controller: function ($scope) {

            $scope.isDisabled = function () {
                if (!$scope.field.status) {
                    return false;
                }

                if ($scope.field.status.Lock) {
                    return true;
                }

                if ($scope.field.status.Freeze) {
                    return true;
                }
            }
        }
    };
}]);
angular.module('app')
    .directive('synMultidropdown', ['FieldDirectiveHelperDTO', 'PermissionMatrixService', function (FieldDirectiveHelperDTO, PermissionMatrixService) {
        var FieldDirectiveHelper = new FieldDirectiveHelperDTO;

        return {
            restrict: "E",

            scope: {
                field: '=',
                stylesObj: '=',
                displayValueArr: '=',
                disableObj: '=',
                attributeObj: '=',
                displayArr: '='
            },

            require: "^form",

            template:
                    '<div class="input-wrapper">'+
                        '<fieldset style="position: relative;">'+
                            '<div class="form-control sm-input multiple-select" ng-click="toggleDropdown($event)" ng-class="{\'multiple-dropdown-active\': isDropdownActive, \'offset-padding\': field.value.length > 0}">'+
                                '<span class="multi-dropdown-arrow"><i class="fa fa-caret-down" aria-hidden="true"></i></span>'+
                                '<span ng-show="field.value === null || field.value.length <= 0">Select Item(s)</span>'+                                
                                '<span ng-disabled="true" ng-click="handleRemove($event); formController.$setDirty()" ng-repeat="selectedValue in field.value track by $index" class="multiple-dropdown-selected-item" ng-class="{\'multiple-dropdown-item-active\': !isClickDisabled, \'multiple-dropdown-item-inactive\': isClickDisabled}" data-item={{selectedValue}}>{{selectedValue}}</span>'+
                            '</div>'+

                            '<div class="form-control multiple-select-dropdown" ng-show="isDropdownActive" ng-class="{\'multiple-dropdown-active\': isDropdownActive}">'+
                                '<div class="multiple-dropdown-item" ng-click="handleAll($event, \'add\'); formController.$setDirty()"><span class="multidropdown-item-inner">Add all</span></div>'+
                                '<div class="multiple-dropdown-item" ng-click="handleAll($event, \'clear\'); formController.$setDirty()"><span class="multidropdown-item-inner">Clear all</span></div>'+
                                '<div class="multiple-dropdown-item" ng-repeat="item in displayArrCopy track by $index" data-selectitem="{{item}}" ng-click="handleSelect($event); formController.$setDirty()"><span class="multidropdown-item-inner" data-selectitem="{{item}}">{{item}}</span></div>'+
                            '</div>'+

                        '<fieldset>'+
                    '</div>',
          
            link: function (scope, element, attribute, formController) {

                scope.formController = formController;
                FieldDirectiveHelper.SetClasses(scope.stylesObj, element);

                angular.element(window).on('click', scope.windowClick);

            },

            controller: ['$scope', function ($scope) {

                if ($scope.field.value === null) $scope.field.value = [];

                $scope.$watchCollection("field.value", function (newVal) {
                    if (newVal.length === 0) {
                        $scope.displayArrCopy = angular.copy($scope.displayArr);
                        $scope.displayArrCopy.sort();
                    }
                });

                var isClickDisabled = !PermissionMatrixService.hasPermission('createFormData') || !PermissionMatrixService.hasPermission('updateFormData');
                $scope.isClickDisabled = isClickDisabled;

                setDropdownItemsArray();

                $scope.windowClick = function ($event) {
                    document.getElementsByClassName('multi-dropdown-arrow')[0].style.cssText += 'transform: rotate(0deg); transition: .4s';
                    if ($scope.isDropdownActive) {
                        $scope.isDropdownActive = false;
                        $scope.$apply();
                    }
                };

                $scope.isDisabled = function () {
                    if (!$scope.field.status) {
                        return false;
                    }

                    if ($scope.field.status.Lock) {
                        return true;
                    }

                    if ($scope.field.status.Freeze) {
                        return true;
                    }
                };

                $scope.toggleDropdown = function ($event) {
                    if (isClickDisabled) {
                        return;
                    }
                    $event.stopPropagation();
                    if ($scope.isDropdownActive) {
                        document.getElementsByClassName('multi-dropdown-arrow')[0].style.cssText += 'transform: rotate(0deg); transition: .4s';
                        $scope.isDropdownActive = false;
                    } else {
                        $scope.isDropdownActive = true;
                        document.getElementsByClassName('multi-dropdown-arrow')[0].style.cssText += 'transform: rotate(180deg); transition: .4s';
                    }
                };

                $scope.handleRemove = function ($event) {
                    if (isClickDisabled) {
                        return;
                    }
                    $event.stopPropagation();

                    var value = $event.target.dataset.item;
                    $scope.displayArrCopy.push(value);
                    $scope.displayArrCopy.sort();
                    $scope.field.value.splice($scope.field.value.indexOf(value), 1);

                };


                $scope.handleSelect = function ($event) {
                    $event.stopPropagation();

                    var selectedItem = $event.target.dataset.selectitem;
                    if ($scope.field.value) {
                        $scope.field.value.push(selectedItem);
                    } else {
                        $scope.field.value = [selectedItem];
                    }

                    $scope.displayArrCopy.splice($scope.displayArrCopy.indexOf(selectedItem), 1);
                    
                };

                $scope.handleAll = function ($event, action) {
                    $event.stopPropagation();

                    if (action === 'clear') {

                        $scope.field.value.length = 0;

                    } else if (action === 'add') {

                        $scope.field.value = $scope.field.value.concat($scope.displayArrCopy);
                        $scope.displayArrCopy.length = 0;

                    }
                };

                function setDropdownItemsArray() {
                    $scope.displayArrCopy = angular.copy($scope.displayArr);
                    if ($scope.field.value && $scope.field.value.length) {
                        
                        $scope.field.value.forEach(function (item) {
                            var index = $scope.displayArrCopy.indexOf(item);
                            if (index !== -1) {
                                $scope.displayArrCopy.splice(index, 1);
                            }
                        });
                    }

                    $scope.displayArrCopy.sort();
                    $scope.$apply();
                }

                $scope.$on('$destroy', function () {
                    angular.element(window).off('click')
                });

            }]

        };
    }]);
angular.module('app')

    .directive('synToggle', ['FieldDirectiveHelperDTO', 'PermissionMatrixService', function (FieldDirectiveHelperDTO, PermissionMatrixService) {

        var FieldDirectiveHelper = new FieldDirectiveHelperDTO;

        return {
            scope: {
                field: "=",
                disableObj: "=",
                stylesObj: "=",
                attributeObj: "=",
            },

            require: '^form',

            template: [
                  '<div class="input-wrapper">',
                        '<fieldset disabled>',
                            '<switch id="enabled" name="enabled" ng-model="field.value" ng-change="falseToNull()" disabled="isClickDisabled || isDisabled()"></switch>',
                            
                        '<fieldset>',
                    '</div>'
            ].join(''),

            link: function (scope, element, attribute, formController) {
                scope.formController = formController;
                FieldDirectiveHelper.SetClasses(scope.stylesObj, element);
                //FieldDirectiveHelper.SetAttributes(scope.attributeObj, element);

            },
            controller: function ($scope) {


                var isClickDisabled = !PermissionMatrixService.hasPermission('createFormData') || !PermissionMatrixService.hasPermission('updateFormData');
                $scope.isClickDisabled = isClickDisabled;

                $scope.isDisabled = function () {
                    if (!$scope.field.status) {
                        return false;
                    }

                    if ($scope.field.status.Lock) {
                        return true;
                    }

                    if ($scope.field.status.Freeze) {
                        return true;
                    }
                }

                $scope.falseToNull = function () {
                    $scope.formController.$setDirty();
                    if ($scope.field.value === false) {
                        $scope.field.value = null;
                    }
                }
                
            }
        }
    }]);
angular.module('app')

    .directive('synStringdate', ['FieldDirectiveHelperDTO', '$compile', '$timeout', '$filter', 'FORM_FIELD_CONSTANTS', 'PermissionMatrixService', function (FieldDirectiveHelperDTO, $compile, $timeout, $filter, FORM_FIELD_CONSTANTS, PermissionMatrixService) {

        var FieldDirectiveHelper = new FieldDirectiveHelperDTO;
        return {
            scope: {
                //need to implement ability to hide calendar picker through spreadsheet/study configuration
                field: "=",
                disableObj: "=",
                stylesObj: "=",
                attributeObj: "=",
                form: "=",
                newDataPoint: "=",
                format: "@",
                delimiter: "@",
                uniqueId: "@",
                displayFormat: "@"
            },

            require: "^form",

            templateUrl: 'FieldDirectives/templates/synStringDate.html',

            link: function (scope, element, attribute, formController) {
                
                //initialize valid date for input field error class / error tooltip
                scope.isValidDate = true;
                scope.formController = formController;

                scope.firstClick = true;
                var uniqueDateSelector = '#' + scope.uniqueId;

                FieldDirectiveHelper.SetClasses(scope.stylesObj, element);

                setCurrentDate();
                formatSavedDate();

                $timeout(function () {

                    $(uniqueDateSelector).datepicker().on('changeMonth', function (e) {

                        var month = e.date.getMonth();
                        setMonth(month + 1);

                    }).on('changeYear', function (e) {

                        var year = e.date.getFullYear();
                        setYear(year);

                    }).on('changeDate', function (e) {

                        var day = e.date.getDate();
                        setDay(day, e.date);

                    }).on('show', function (e) {

                        addUnknownButtons();

                    }).on('hide', function () {

                        setIncompleteDate();

                    });

                    scope.formController.$setPristine();

                }, 0);               

                function setCurrentDate() {

                    var currentDate = new Date();
                    scope.date = {
                        d: currentDate.getDate(),
                        m: currentDate.getMonth(),
                        y: currentDate.getFullYear()
                    }
                    scope.currentDate = $filter('date')(currentDate, scope.displayFormat, 'UTC');
                }

                function setMonth(month) {
                    scope.date.m = month.toString();

                    $('.custom-datepicker-months').css("display", "none");
                    $('.datepicker-days').css("display", "block");
                    $('.datepicker-dropdown').css('top', function () {
                        return parseInt($(this).css('top')) - 25.5;
                    });
                }

                function setDay(day) {
                    scope.date.d = day.toString();

                    if (scope.date.d === "UK" || scope.date.m === "UNK" || scope.date.y === "UKUK") {
                        scope.field.value = FieldDirectiveHelper.SetUnknownDate(scope.date, scope.format, scope.delimiter);
                    } else {

                        $timeout(function () {
                            //set stringdate value by using angular date filter
                            scope.field.value = $filter('date')(new Date(scope.dateString), scope.displayFormat, 'UTC');
                        }, 0)
 
                    }
                }

                function setYear(year) {
                    scope.date.y = year.toString();
                }

                function setIncompleteDate() {
                    if (scope.date.d === "UK" || scope.date.m === "UNK" || scope.date.y === "UKUK") {
                        scope.field.value = FieldDirectiveHelper.SetUnknownDate(scope.date, scope.format, scope.delimiter);
                    }
                }
                
                function addUnknownButtons() {
    
                    //only set for first click
                    if (scope.firstClick) {
                        
                        shiftCalendarUp();
                        
                        addCustomMonthsView();

                        $('.datepicker-days').find('tfoot').prepend($compile('<tr ng-click="setStringDay()"><th colspan="7" style="display: table-cell; color: red;">Unknown Day</th></tr>')(scope));
                        $('.datepicker-months').find('tfoot').prepend($compile('<tr ng-click="setStringMonth()"><th colspan="7" style="display: table-cell; color: red;">Unknown Month</th></tr>')(scope));
                        $('.datepicker-years').find('tfoot').prepend($compile('<tr ng-click="setStringYear()"><th colspan="7" style="display: table-cell; color: red;">Unknown Year</th></tr>')(scope));
                        $('.datepicker-decades').find('tfoot').prepend($compile('<tr ng-click="setStringYear()"><th colspan="7" style="display: table-cell; color: red;">Unknown Year</th></tr>')(scope));
                        $('.datepicker-centuries').find('tfoot').prepend($compile('<tr ng-click="setStringYear()"><th colspan="7" style="display: table-cell; color: red;">Unknown Year</th></tr>')(scope));
                        $('.custom-datepicker-months').find('tfoot').prepend($compile('<tr ng-click="setStringMonth()"><th colspan="7" style="display: table-cell; color: red;">Unknown Month</th></tr>')(scope));

                    }
                }

                function addCustomMonthsView() {
                    $('.datepicker-months').clone().removeClass('datepicker-months').addClass('custom-datepicker-months').appendTo('.datepicker').css('display', 'none');
                    $('.custom-datepicker-months').find('.month').each(function (i, el) {
                        $(this).removeClass('month').addClass('custom-month');
                    })
                    .on('click', function () {
                        var monthString = $(this).text().toLowerCase();
                        var monthInt = FORM_FIELD_CONSTANTS.MONTH_LOOKUP[monthString] + 1;
                        setMonth(monthInt);
                    });
                }

                function formatSavedDate() {
                    if (scope.newDataPoint.value) {
                        scope.field.value = $filter('date')(new Date(scope.newDataPoint.value), scope.displayFormat, 'UTC')
                    }
                }

                function shiftCalendarUp() {
                    
                    //set positioning of datepicker accounting for new button added
                    var picker = $('.dropdown-menu');
                    picker.css('top', function () {
                        return parseInt(picker.css('top')) - 30;
                    });

                    $('.datepicker-days').find('.datepicker-switch').on('click', function () {
                        $('.datepicker-dropdown').css('top', function () {
                            return parseInt($(this).css('top')) + 25.5;
                        });
                    });
                }
            },

            controller: ['$scope', '$filter', 'FORM_FIELD_CONSTANTS', function ($scope, $filter, FORM_FIELD_CONSTANTS) {
                var uniqueDateSelector = '#' + $scope.uniqueId;
                var canCreateFormData = PermissionMatrixService.hasPermission('createFormData');
                var canUpdateFormData = PermissionMatrixService.hasPermission('updateFormData');

                $scope.$watch('field.value', function () {
                    if ($scope.field.value) {
                        $scope.setValidDate();
                    }                    
                });

                $scope.showCalendar = function () {

                    if (canCreateFormData || canUpdateFormData) {

                        $(uniqueDateSelector).datepicker('show');

                        //no longer first click after clicking on the calendar
                        if ($scope.firstClick) {
                            $scope.firstClick = false;
                        }
                    }
                }

                $scope.setStringDay = function () {
                    $scope.date.d = 'UK';
                    $(uniqueDateSelector).datepicker('hide');
                    $scope.field.value = FieldDirectiveHelper.SetUnknownDate($scope.date, $scope.format, $scope.delimiter);
                    $scope.formController.$setDirty();
                };

                $scope.setStringMonth = function () {
                    $scope.date.m = 'UNK';
                    $('.custom-datepicker-months').css("display", "none");
                    $('.datepicker-months').css("display", "none");
                    $('.datepicker-days').css("display", "block");
                    $('.datepicker-dropdown').css('top', function () {
                        return parseInt($(this).css('top')) - 25.5;
                    });
                };

                $scope.setStringYear = function () {
                    $scope.date.y = 'UKUK';
                    $('.datepicker-years').css("display", "none");
                    $('.datepicker-decades').css("display", "none");
                    $('.datepicker-centuries').css("display", "none");
                    $('.custom-datepicker-months').css("display", "block");
                };

                $scope.setValidDate = function () {
                    $scope.isValidDate = FieldDirectiveHelper.SetValidDate($scope.field.value, $scope.newDataPoint, $scope.format, $scope.uniqueId) || (new RegExp('(UK|UNK|UKUK)', 'i').test($scope.field.value) && ($scope.field.value.match(/\//g) || []).length === 2);
                };

                $scope.isDisabled = function () {
                    if (!$scope.field.status) {
                        return false;
                    }

                    if ($scope.field.status.Lock) {
                        return true;
                    }

                    if ($scope.field.status.Freeze) {
                        return true;
                    }
                }

                $scope.$on('$destroy', function () {

                    $(uniqueDateSelector).off().datepicker('destroy');
                    //$(document).off('.datepicker.data-api');
                    
                });
            }]
        }
    }]);
angular.module('app').directive('synUnitMeasure', ['FieldDirectiveHelperDTO', function (FieldDirectiveHelperDTO) {

    var FieldDirectiveHelper = new FieldDirectiveHelperDTO;

    return {
        scope: {
            field: '=',
            fieldUnit: '=',
            fieldMeasure: '=',
            display: '=',
            value: '@',
            stylesObj: '='
        },
        template: [
            '<div class ="input-wrapper">',
                '<fieldset ng-disabled="isDisabled()">',
                    '<input type="number" ng-model="fieldMeasure.value">',
                    '<select ng-options="item for item in display" ng-model="fieldUnit.value">',
                    '</select>',
                '</fieldset>',
            '</div>'].join(''),
        link: function (scope, element) {

            FieldDirectiveHelper.SetClasses(scope.stylesObj, element);
            //FieldDirectiveHelper.SetAttributes(scope.attributeObj, element);

        },
        controller: ['$scope', 'CONVERSION', function ($scope, CONVERSION) {
            
            var defaultUnit = $scope.value;

            if (!$scope.fieldUnit.value) $scope.fieldUnit.value = $scope.display[0];

            $scope.$watchCollection('field.status', function (newVal) {
                $scope.fieldMeasure.status = $scope.fieldUnit.status = $scope.field.status;
            });

            $scope.$watchGroup(['fieldMeasure.value', 'fieldUnit.value'], function (newVal) {

                if (!$scope.fieldMeasure.value) {
                    $scope.field.value = null;
                    return;
                }

                var measureInDefaultUnit = $scope.fieldMeasure.value * CONVERSION[defaultUnit][$scope.fieldUnit.value];

                if (measureInDefaultUnit) $scope.field.value = measureInDefaultUnit;
                
            });

            $scope.isDisabled = function () {
                if (!$scope.field.status) {
                    return false;
                }

                if ($scope.field.status.Lock) {
                    return true;
                }

                if ($scope.field.status.Freeze) {
                    return true;
                }
            }

        }]
    }
}]);


angular.module('app')

    .directive('synVisualAnalogScale', ['FieldDirectiveHelperDTO', function (FieldDirectiveHelperDTO) {

        var FieldDirectiveHelper = new FieldDirectiveHelperDTO;

        return {
            priority: 2,
            scope: {
                field: "=",
                disableObj: "=",
                stylesObj: "=",
                scopeBuildingObj: "="
            },
            template: '<div class="vas-input-wrapper">' +
                            '<div class="vas-flex-wrapper">' +

                            '<div ng-if="hasEndImgs" class="vas-col"><span>{{vasCol1}}</span></div>' +
                            '<div ng-if="!hasEndImgs" class="vas-col"></div>' +

                            '<img ng-if="hasEndImgs" class="vas-col vas-col-img" ng-src={{vasCol2}}></img>' +
                            '<div ng-if="!hasEndImgs" class="vas-col"><span>{{vasCol2}}</span></div>' +

                            '<fieldset class="vas-fieldset">' +
                                '<input type="range"' +
                                        'ng-model="field.value"' +
                                        'ng-disabled="isDisabled()"' +
                                        'style="padding:0px;"' +
                                        'step="{{step}}"' +
                                        'min="{{min}}"' +
                                        'max="{{max}}">' +
                                '<img class="vas-continuum-img" ng-if="continuumImgPath" ng-src={{continuumImgPath}}></img>' +
                            '</fieldset>' +

                            '<img ng-if="hasEndImgs" class="vas-col vas-col-img" ng-src={{vasCol11}}></img>' +
                            '<div ng-if="!hasEndImgs" class="vas-col"><span>{{vasCol11}}</span></div>' +

                            '<div ng-if="hasEndImgs" class="vas-col"><span>{{vasCol12}}</span></div>' +
                            '<div ng-if="!hasEndImgs" class="vas-col"></div>' +

                            '</div>' +
                        '</div>{{field.value}}',
            link: function (scope, element) {

                FieldDirectiveHelper.SetClasses(scope.stylesObj, element);
                FieldDirectiveHelper.SetAttributes(scope.attributeObj, element);

            },
            controller: function ($scope) {

                function buildScope() {
                    $scope.scopeBuildingObj.forEach(function (scopeObj) {
                        if (!$scope[scopeObj.action]) $scope[scopeObj.action] = scopeObj.value;
                    })
                };
                buildScope();

                $scope.hasEndImgs = !!$scope.end1Img && !!$scope.end2Img;

                var scopeMapForPaths = {
                    "continuumImg": $scope.continuumImg,
                    "end1Img": $scope.end1Img,
                    "end2Img": $scope.end2Img
                };

                function pathify(scopeMapForPaths) {
                    for (var el in scopeMapForPaths) {
                        if (el) $scope[el + "Path"] = 'content/img/' + scopeMapForPaths[el];
                        console.log( $scope[el])
                    }
                };

                pathify(scopeMapForPaths);

                function setVASCols() {                    
                    if ($scope.hasEndImgs) {
                        $scope.vasCol1 = $scope.end1Text;
                        $scope.vasCol2 = $scope.end1ImgPath;
                        $scope.vasCol11 = $scope.end2ImgPath;
                        $scope.vasCol12 = $scope.end2Text;
                    } else {
                        $scope.vasCol2 = $scope.end1Text;
                        $scope.vasCol11 = $scope.end2Text;
                    }
                }

                setVASCols();                

                $scope.isDisabled = function () {
                    if (!$scope.field.status) {
                        return false;
                    }

                    if ($scope.field.status.Lock) {
                        return true;
                    }

                    if ($scope.field.status.Freeze) {
                        return true;
                    }
                }

            }
        }

    }]);
angular.module('app')

    .directive('synAuditButton', ['$compile', '$log', 'PermissionMatrixService', function ($compile, $log, PermissionMatrixService) {

        return {
            priority: 3,
            scope: {
                question: '@',
                modelProperty: '@',
                stylesObj: "=",
                disabled: '=',
                fullPath: '@',
                fieldMetadata: '='
            },
            template: '<button class="btn fa fa-cog" ng-click="getFieldAuditTrail()" title="View audit trail" ng-if="canReadAuditTrail" ng-disabled="disabled"></button>',
            link: function (scope, element, attributes, controller, transcludeFn) {
                
                if (scope.stylesObj) {
                    selectors = Object.keys(scope.stylesObj);
                    selectors.forEach(function (selector) {
                        var selectedElements = angular.element(element[0].querySelectorAll(selector));
                        if (selectedElements) {
                            for (var i = 0; i < selectedElements.length; i++) {
                                selectedElements[i].setAttribute('class', scope.stylesObj[selector].join(' '));
                            }
                        } else {
                            $log.warn('could not find element by selector: ' + selector);
                        }

                    });
                }

                scope.canReadAuditTrail = PermissionMatrixService.hasPermission('readAuditTrail');

            },
            controller: function ($scope, AuditService) {
                

                $scope.getFieldAuditTrail = function () {
                    AuditService.openFieldAuditPopup($scope.fullPath, $scope.question, $scope.fieldMetadata);
                }
            }
        }
    }]);
angular.module('app')

    .directive('synQueryButton', ['FieldDirectiveHelperDTO', 'PermissionMatrixService', function (FieldDirectiveHelperDTO, PermissionMatrixService) {

        var FieldDirectiveHelper = new FieldDirectiveHelperDTO;

        return {
            priority: 3,
            scope: {
                selectedField: '=',
                formQueries: '=',
                queryComments: '=',
                stylesObj: '=',
                disabled: '='
            },
            template: '<button class="btn fa fa-send" ng-click="openQueryWindow()" title="Raise a query" ng-if="canRaiseQuery" ng-disabled="disabled"></button>',
            link: function (scope, element) {
                FieldDirectiveHelper.SetClasses(scope.stylesObj, element);
                scope.canRaiseQuery = PermissionMatrixService.hasPermission('createQuery');

            },
            controller: ['$scope', '$log', 'QueryService', function ($scope, $log, QueryService) {
                function onInit() {
                    $scope.allFieldQueries = [];
                    $scope.fieldOpenQueries = [];
                    $scope.fieldAnsweredQueries = [];
                    $scope.fieldClosedQueries = [];

                    $scope.$watch('formQueries', function (newVal, oldval) {
              
                        if (newVal) {
                            setQueriesByStatus();
                        }
                    });
                }

                function setQueriesByStatus() {

                    if ($scope.formQueries.length > 0) {
                        for (var i = 0; i < $scope.formQueries.length; i++) {
                            if ($scope.selectedField.dataPoint != $scope.formQueries[i].FieldName) {
                                continue;
                            }

                            $scope.allFieldQueries.push($scope.formQueries[i]);

                            if ($scope.formQueries[i].Status == "Open") {
                                $scope.fieldOpenQueries.push($scope.formQueries[i]);
                            } else if ($scope.formQueries[i].Status == "Answered") {
                                $scope.fieldAnsweredQueries.push($scope.formQueries[i]);
                            } else if ($scope.formQueries[i].Status == "Closed") {
                                $scope.fieldClosedQueries.push($scope.formQueries[i]);
                            } else {
                                $log.warn('Couldn\'t determine status of query:', $scope.formQueries[i]);
                            }
                        }
                    }

                }

                // send query info to the QueryService and open the new query modal
                $scope.openQueryWindow = function () {
                    QueryService.OpenQueryWindow($scope.selectedField.dataPoint,
                                                 //$scope.selectedField.fieldQuestion,
                                                 $scope.selectedField.question.label,
                                                 $scope.selectedField.fullPath,
                                                 $scope.selectedField.formId,
                                                 $scope.selectedField.subFormId,
                                                 $scope.selectedField.formName,
                                                 $scope.allFieldQueries,
                                                 $scope.selectedField.formUniqueId,
                                                 $scope.selectedField.formTopLevelUniqueId,
                                                 $scope.queryComments.reasons);
                };

                // changes the color of the query button by status
                $scope.setClass = function () {
                    if ($scope.formQueries && $scope.formQueries.length == 0) return '';
                    if ($scope.fieldOpenQueries && $scope.fieldOpenQueries.length > 0) return 'open-query';
                    if ($scope.fieldAnsweredQueries && $scope.fieldAnsweredQueries.length > 0) return 'answered-query';
                    if ($scope.fieldClosedQueries && $scope.fieldClosedQueries.length > 0) return 'closed-query';
                };

                onInit();
            }]
        }
    }]);
angular.module('app')

    .directive('synValidation', ['FieldDirectiveHelperDTO', function (FieldDirectiveHelperDTO) {

        var FieldDirectiveHelper = new FieldDirectiveHelperDTO;

        return {

            priority: 2,
            scope: {
                stylesObj: "=",
                renderValidations: "="
            },
            template: [
                '<div class="vwrap1">',
                    '<div ng-repeat="validation in renderValidations track by $index">',
                        '<span ng-class="validation.styles" key="{{$index}}"> {{validation.message}} <span>',
                    '</div>',
                '</div>'
            ].join(''),
            link: function (scope, element) {

                FieldDirectiveHelper.SetClasses(scope.stylesObj, element);
                FieldDirectiveHelper.SetAttributes(scope.attributeObj, element);

            },
            controller: ['$scope', function ($scope) {

            }]

        };
    }]);

angular.module('app')

    .directive('synClearInput', ['$log', 'FieldDirectiveHelperDTO', 'PermissionMatrixService', function ($log, FieldDirectiveHelperDTO, PermissionMatrixService) {

        var FieldDirectiveHelper = new FieldDirectiveHelperDTO;

        return {
            priority: 2,
            scope: {
                field: "=",
                fieldType: "@",
                subDataPointNames: "=",
                stylesObj: "="
            },
            require: "^form",
            template: [
                '<div class="clear-input-wrapper">',
                    '<span ng-show="hasValue && isClearInputAllowed" data-toggle="tooltip" data-placement="top" title="Clear Input">',
                        '<button type="button" ng-click="clearInput()" style="background-color:transparent;">',
                            '<span></span>',
                        '</button>',
                    '</span>',
                '</div>'
            ].join(''),
            link: function (scope, element, attribute, formController) {

                scope.formController = formController;

                FieldDirectiveHelper.SetClasses(scope.stylesObj, element);
                FieldDirectiveHelper.SetAttributes(scope.attributeObj, element);

            },
            controller: function ($scope) {

                $scope.hasValue;
                
                var disableConditions = [
                    !PermissionMatrixService.hasPermission("createFormData"),
                    !PermissionMatrixService.hasPermission("updateFormData"),

                    !!$scope.field.status.Freeze,
                    !!$scope.field.status.Lock

                    // when form-level statuses are finalized, add them here
                ];

                $scope.isClearInputAllowed = disableConditions.indexOf(true) === -1;

                if ($scope.fieldType === "checkboxdepreciated") {

                    var watchStrings = $scope.subDataPointNames.map(function (sdpn) {
                        return "field." + sdpn + ".value";
                    });

                    $scope.$watchGroup(watchStrings, function (newVal) {
                        $scope.hasValue = newVal.indexOf(true) > -1 ? true : false;
                    });

                }
                else {

                    $scope.$watch("field.value", function (newVal) {

                        if ($scope.fieldType === "multidropdown") {
                            $scope.hasValue = newVal.length > 0 ? true : false;
                        }
                        else {
                            $scope.hasValue = newVal !== null ? true : false;
                        }

                    }, true);

                }

                $scope.clearInput = function () {

                    $scope.formController.$setDirty();

                    if ($scope.fieldType === "multidropdown") {
                        $scope.field.value.length = 0;
                    }
                    else if ($scope.fieldType === "checkboxdepreciated") {

                        $scope.subDataPointNames.forEach(function (sdpn) {
                            $scope.field[sdpn].value = null;
                        })

                    }
                    else {
                        $scope.field.value = null;
                    }

                    if ($scope.field.status.Sign) $scope.field.status.Sign = false;

                };

            }
        }
    }]);
angular.module('app')

    .directive('synStatusField', ['FieldDirectiveHelperDTO', 'StudyConfigService', function (FieldDirectiveHelperDTO, StudyConfigService) {

        var FieldDirectiveHelper = new FieldDirectiveHelperDTO;

        return {
            scope: {
                fieldStatus: "=",
                fieldQueries: "="
            },
            templateUrl: 'FieldDirectives/synStatusField.html',
            link: function (scope, element) {
                scope.activeStatuses = StudyConfigService.getStudyStatuses();
            }
        }
    }]);
angular.module('app')

    .directive('synStatusButtons', ['$rootScope', 'FieldDirectiveHelperDTO', 'StudyConfigService', 'PermissionMatrixService', function ($rootScope, FieldDirectiveHelperDTO, StudyConfigService, PermissionMatrixService) {

        return {
            scope: true,
            template: [
                    '<div class="btn-group">',
                        '<label class="btn btn-default" ng-repeat="obj in activeStatuses" ng-if="canToggle(obj)" ng-model="selectedField.fieldData.status[obj.value]" ng-change="toggleStatus(obj)" uib-btn-checkbox><span class="status-btn-icon" ng-class="obj.class"></span> {{obj.value}}</label>',
                    '</div>'
            ].join(''),
            link: function (scope, element) {

                scope.activeStatuses = StudyConfigService.getStudyStatuses();

                for (i = 0; i < scope.activeStatuses.length; i++) {
                    scope.activeStatuses[i].canToggleOn = PermissionMatrixService.hasPermission(scope.activeStatuses[i].actionOn);
                    scope.activeStatuses[i].canToggleOff = PermissionMatrixService.hasPermission(scope.activeStatuses[i].actionOff);
                }

                scope.canToggle = function (status) {
                    if (scope.selectedField.fieldData) {
                        if (scope.selectedField.fieldData.status[status.value] && status.canToggleOff) return true;
                        if (!scope.selectedField.fieldData.status[status.value] && status.canToggleOn) return true;
                    }
                    return false;
                }

                scope.toggleStatus = function (statusObj) {
                    // set on the MainFormCtrl, this object reveals and hides the 'Update Status' button
                    scope.Form.statusChange = true;
                    // set the form level status to false, if a single field status is changed to false
                    if (!scope.selectedField.fieldData.status[statusObj.fieldProperty] && scope.Form[statusObj.formProperty]) {
                        scope.Form[statusObj.formProperty] = false;
                    }
                    return statusObj;
                }

            },

        }
    }]);
angular.module('app')

    .directive('synTextCounter', ['FieldDirectiveHelperDTO', function (FieldDirectiveHelperDTO) {

        return {
            restrict: 'AE',
            scope: {
                input: "=",
                max: "@"
            },
            template: [
                '<span>{{input.length.toString()}} / {{max}}<span>',            
            ].join(''),

            link: function (scope) {
                scope.input = scope.input || "";
            }
        }

    }]);
angular.module('app')

    .directive('synCsvImport', ['$filter', 'PermissionMatrixService', '$log', function ($filter, PermissionMatrixService, $log) {

        return {
            scope: {
                csv: '='
            },
            template: '<div><input type="file"/></div>',
            link: function (scope, element) {

                PermissionMatrixService.hasPermission('isDev') && $log.info(scope.csv);

                element.on('change', function (changeEvent) {
                    var files = changeEvent.target.files;

                    if (files.length) {
                        var r = new FileReader();
                        r.onload = function (e) {
                            var contents = e.target.result;
                            scope.$apply(function () {
                                var arr = contents.split("\n");
                                arr.forEach(function (str) {
                                    scope.csv.push(str);
                                });
                                PermissionMatrixService.hasPermission('isDev') && $log.info(scope.csv);
                            });
                        };

                        r.readAsText(files[0]);
                    }
                });

            },
            controller: function ($scope) {

               
            }
        }
    }]);
angular.module('app')

    .filter('replaceString', function () {
        return function (input, char, newChar) {
            newChar = newChar || '';
            return input.split(char).join(newChar);
        };
    });
angular.module('app').value('Library', {

    inputDirectives: {
        radio: {
            excelName: 'radio',
            metaDataType: 'radio',
            directive: 'synRadio'
        },
        number: {
            excelName: 'number',
            metaDataType: 'number',
            directive: 'synNumber'
        },
        textfield: {
            excelName: 'text',
            metaDataType: 'text',
            directive: 'synTextarea',
            format: {
                uppercase: 'boolean',
                lowercase: 'boolean'
            }
        },
        textarea: {
            excelName: 'textarea',
            metaDataType: 'textarea',
            directive: 'synTextarea',
            format: {
                uppercase: 'boolean',
                lowercase: 'boolean'
            } 
        },
        readonly: {
            excelName: 'readonly',
            metaDataType: 'readonly',
            directive: 'synReadonly',
            format: {
                round: 'number',
                absolute: 'boolean',
                base: 'number',
                uppercase: 'boolean',
                lowercase: 'boolean'
            } 
        },
        date: {
            excelName: 'date',
            metaDataType: 'date',
            directive: 'synDateParser',
            format: {
                date: 'string'
            }
        },
        time: {
            excelName: 'time',
            metaDataType: 'time',
            directive: 'SynTimeParser'
        },
        checkbox: {
            excelName: 'checkbox',
            metaDataType: 'checkboxdepreciated',
            directive: 'synCheckboxDepreciated'
        },
        dropdown: {
            excelName: 'dropdown',
            metaDataType: 'dropdown',
            directive: 'synDropdown'
        },
        multidropdown: {
            excelName: 'multidropdown',
            metaDataType: 'multidropdown',
            directive: 'synMultidropdown'
        },
        toggle: {
            excelName: 'toggle',
            metaDataType: 'toggle',
            directive: 'synToggle'
        },
        stringdate: {
            excelName: 'stringdate',
            metaDataType: 'stringdate',
            directive: 'synStringdate',
            format: {
                date: 'string'
            }
        },
        unitmeasure: {
            excelName: 'unit-measure',
            metaDataType: 'unitMeasure',
            directive: 'synUnitMeasure'
        },
        vas: {
            excelName: 'vas',
            metaDataType: 'visualAnalogScale',
            directive: 'synVisualAnalogScale'
        }

    },
    
    fieldDirectives: {
        subform: {
            excelName: 'subform',
            metaDataType: 'subForm',
            directive: 'repeatedSubFormWrapper'
        },
        information: {
            excelName: 'infobar',
            metaDataType: 'infoBar',
            directive: 'synInfoBar'
        },
    },

    formAttributes: {
        epro: {
            excelName: 'epro',
            internalName: 'isEPro',
            formType: 21
        },
        addsubject: {
            excelName: 'addsubject',
            internalName: 'isAddSubject',
            formType: 11
        },
        econsent: {
            excelName: 'econsent',
            internalName: 'isEConsent',
            formType: 22
        }
    },

    calculations: {
        add:{
            excelName: 'add', // add,Var1,Var2...
            metaDataType: "add", // {"operation": "add", "operands": ["Var1", "Var2", "Var3"], "resultant": "Var4" }
            method: 'addNumbers(operands, resultant)'
        },
        multiply: {
            excelName: 'multiply', // multiply,Var1,Var2...
            metaDataType: 'multiply', //{"operation": "multiply", "operands": ["Var1", "Var2", "Var3"], "resultant": "Var4"}
            method: 'multiplyNumbers(operands, resultant)'
        },
        average: {
            excelName: 'average',  // average,Var1,Var2...
            metaDataType: 'average', // {"operation": "average", "operands": ["Var1", "Var2", "Var3"], "resultant": "Var4"}
            method: 'findAverage(operands, resultant)'
        },
        divide: {
            excelName: 'divide', // divide,Var1,Var2...
            metaDataType: 'divide',
            method: 'divideNumbers(operands, resultant)'
        },
        bmi: {
            excelName: 'bmi',
            metaDataType: 'bmi',
            method: 'calcBmi(operands, resultant)' // operands = [weight, height]
        }
    },

    // message, intensity, and styles are optional 
    validations: {
        styles: "some-wrapper-styles", // optional, for validation wrapper (not hooked up yet)
        staticMessage: {
            excelName: 'static', // static,message,2
            metaDataType: 'staticMessage', // { "type": "staticMessage", "message": "static message", "intensity": 2, "styles": ["validation-message-intensity-0", "validation-message-intensity-1", "validation-message-intensity-2"]} // styles (optional) may be an array, if so intensity must be specified and will correspond to the array index
            method: 'staticMessage(watchValue)'
        },
        required: {
            excelName: 'required', // required,message,2
            metaDataType: 'required', // { "type": "required", "message": "hey that's required!", "intensity": 2, "styles": "style1 style2"} // styles (optional) may also be a string of one or more styles, in this situation, no intensity is required
            method: 'required(watchValue)'
        },
        // min and max numbers are inclusive, i.e. the message "must be greater than five" makes sense with a numberMin of 6, not 5
        minimum: {
            excelName: 'minimum', // minimum | (10) | message | 2
            metaDataType: 'numberMin', // { "type": "numberMin", "compareVal": 10, "message": "Must be greater than 10", "intensity": 2 }
            method: 'isLessThanMin(watchValue, compareValue)'
        },
        maximum: {
            excelName: 'maximum', // maximum | (VAR1) | message | 2
            metaDataType: 'numberMax', // { "type": "numberMax", "compareDataPoint": "VAR1", "message": "Must be greater than question...", "intensity": 2 }
            method: 'isGreaterThanMax(watchValue, compareValue)'
        },
        equals: {
            excelName: 'equals', // equals | (101) | message | 2
            metaDataType: 'numberMustEqual', // { "type": "numberMustEqual", "compareVal": 101, "message": "Must be equal to 101", "intensity": 2 }
            method: 'isEqual(watchValue, compareValue)'
        }
    },

    conditions: {
        true: {
            excelName: 'true', // true,VAR2,VAR3...
            metaDataType: 'true', // {"requirement": "true", "dependants": ["VAR1", "VAR2"]}
            method: 'isTrue(dependants)'
        },
        answered: {
            excelName: 'answered', // answered,VAR2,VAR3...
            metaDataType: 'answered', // {"requirement": "answered", "dependants": ["VAR1", "VAR2"]}
            method: 'isAnswered(dependants)'
        },
        equals: {
            excelName: 'equals', // equals,(<value to check equality>),VAR2,VAR3...
            metaDataType: 'equals', // {"requirement": "equals", "optionalValue": "Other", "dependants": ["VAR1", "VAR2"]}
            method: 'isEqual(dependants, optionalValue)'
        },
        greater: {
            excelName: 'greater', // greater,(10),VAR2,VAR3...
            metaDataType: 'greater', // {"requirement": "greater", "optionalValue": 10, "dependants": ["VAR1", "VAR2"]}
            method: 'isGreater(dependants, optionalValue)'
        },
        less: {
            excelName: 'less', // less,(10),VAR2,VAR3...
            metaDataType: 'less', // {"requirement": "less", "optionalValue": 10, "dependants": ["VAR1", "VAR2"]}
            method: 'isLess(dependants, optionalValue)'
        }
    },

    excelSheet: {
        header: 'Syntactx Technologies'
    },

    html: {
        inputAttributes: ['placeholder', 'value', 'step', 'min', 'max', 'maxlength', 'pattern']
    }

});
angular.module('app').constant('CONVERSION', {
    mm: {
        mm: 1,
        cm: 10,
        m: 1000,
        inches: 25.4,
        in: 25.4
    },
    cm: {
        mm: 0.1,
        cm: 1,
        m: 100,
        inches: 2.54,
        in: 2.54
    },
    mg: {
        mg: 1,
        g: 0.001
    },
    g: {
        mg: 0.001,
        g: 1,
        kg: 1000,
        lbs: 453.592,
        pounds: 453.592
    },
    kg: {
        g: 0.001,
        kg: 1,
        lbs: 0.453592,
        pounds: 0.453592
    },
    inches: {
        mm: 0.0393701,
        cm: 0.393701,
        m: 39.3701,
        inches: 1,
        in: 1
    },
    in: {
        mm: 0.0393701,
        cm: 0.393701,
        m: 39.3701,
        inches: 1,
        in: 1
    },
    lbs: {
        ounces: 0.0625,
        oz: 0.0625,
        lbs: 1,
        g: 0.00220462,
        kg: 2.20462
    },
    pounds: {
        ounces: 0.0625,
        oz: 0.0625,
        pounds: 1,
        g: 0.00220462,
        kg: 2.20462
    },
    F: {
        C: function (f) {
            return (f - 32) * 5 / 9;
        }
    },
    C: {
        F: function (c) {
            return (c * 9 / 5) + 32;
        }
    }
});
angular.module('app').constant('FORM_FIELD_CONSTANTS', {

    MONTH_LOOKUP: {
        'jan': 0,
        'feb': 1,
        'mar': 2,
        'apr': 3,
        'may': 4,
        'jun': 5,
        'jul': 6,
        'aug': 7,
        'sep': 8,
        'oct': 9,
        'nov': 10,
        'dec': 11,
        'january': 0,
        'february': 1,
        'march': 2,
        'april': 3,
        'may': 4,
        'june': 5,
        'july': 6,
        'august': 7,
        'september': 8,
        'october': 9,
        'november': 10,
        'december': 11
    },

    DATE_REGEX_LOOKUP: {
        'dd': /^0[1-9]$|^1[0-9]$|^2[0-9]$|^3[0-1]$/,
        'mmm': /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)$/,
        'mmmm': /^((jan|febr)uary|march|april|may|ju(ne|ly)|august|(septem|octo|novem|decem)ber)$/,
        'mm': /^0[1-9]$|^1[0-2]$/,
        'yyyy': /^(\d{4})$/,
        'yy': /^(\d{2})$/,
        'd': /^[1-9]$|^1[0-9]$|^2[0-9]$|^3[0-1]$/,
        'm': /^[1-9]$|^1[0-2]$/,
        'm!': /^[1-9]$|^0[1-9]$|^1[0-2]$/,
        'd!': /^[1-9]$|^0[1-9]$|^1[0-9]$|^2[0-9]$|^3[0-1]$/
    },

    FORM_TYPE_LOOKUP: {
        "^((add|edit|create|new|generate|register|enlist|update|enroll|sign(.*)?).*(subjects?|patients?|characters?|persons?|testers?testees?|people|units?|users?).*)$": 11
    },

    SUBJECT_DEFAULT: {
        "Consent": "",
        "BirthDate": "",
        "SiteID": "",
        "AddressID": "",
        "Investigator": "",
        "ConsentData": {},
        "SubjectData": {}
    }
    
});
